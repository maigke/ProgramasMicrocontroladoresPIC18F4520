

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Dec 18 02:38:33 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.44
    27                           ; Generated 14/09/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  007BAE                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _b
    66  007BAE  C0                 	db	low _b1
    67  007BAF  00                 	db	high _b1
    68  007BB0  D0                 	db	low _b2
    69  007BB1  00                 	db	high _b2
    70  007BB2  1F                 	db	low _b3
    71  007BB3  00                 	db	high _b3
    72  007BB4  B0                 	db	low _b4
    73  007BB5  00                 	db	high _b4
    74                           
    75                           ;initializer for _p
    76  007BB6  39                 	db	low _p1
    77  007BB7  00                 	db	high _p1
    78  007BB8  2C                 	db	low _p2
    79  007BB9  00                 	db	high _p2
    80  007BBA  11                 	db	low _p3
    81  007BBB  00                 	db	high _p3
    82  007BBC  DF                 	db	low _p4
    83  007BBD  00                 	db	high _p4
    84                           
    85                           ;initializer for _p3
    86  007BBE  4F                 	db	79
    87  007BBF  53                 	db	83
    88  007BC0  43                 	db	67
    89  007BC1  41                 	db	65
    90  007BC2  52                 	db	82
    91  007BC3  20                 	db	32
    92  007BC4  45                 	db	69
    93  007BC5  44                 	db	68
    94  007BC6  55                 	db	85
    95  007BC7  41                 	db	65
    96  007BC8  52                 	db	82
    97  007BC9  44                 	db	68
    98  007BCA  4F                 	db	79
    99  007BCB  00                 	db	0
   100                           
   101                           ;initializer for _b3
   102  007BCC  4C                 	db	76
   103  007BCD  55                 	db	85
   104  007BCE  4E                 	db	78
   105  007BCF  41                 	db	65
   106  007BD0  20                 	db	32
   107  007BD1  4D                 	db	77
   108  007BD2  45                 	db	69
   109  007BD3  4E                 	db	78
   110  007BD4  44                 	db	68
   111  007BD5  4F                 	db	79
   112  007BD6  5A                 	db	90
   113  007BD7  41                 	db	65
   114  007BD8  00                 	db	0
   115                           
   116                           ;initializer for _p2
   117  007BD9  4E                 	db	78
   118  007BDA  4F                 	db	79
   119  007BDB  52                 	db	82
   120  007BDC  4D                 	db	77
   121  007BDD  41                 	db	65
   122  007BDE  20                 	db	32
   123  007BDF  49                 	db	73
   124  007BE0  53                 	db	83
   125  007BE1  41                 	db	65
   126  007BE2  42                 	db	66
   127  007BE3  45                 	db	69
   128  007BE4  4C                 	db	76
   129  007BE5  00                 	db	0
   130                           
   131                           ;initializer for _p1
   132  007BE6  4A                 	db	74
   133  007BE7  55                 	db	85
   134  007BE8  41                 	db	65
   135  007BE9  4E                 	db	78
   136  007BEA  20                 	db	32
   137  007BEB  43                 	db	67
   138  007BEC  41                 	db	65
   139  007BED  52                 	db	82
   140  007BEE  4C                 	db	76
   141  007BEF  4F                 	db	79
   142  007BF0  53                 	db	83
   143  007BF1  00                 	db	0
   144                           
   145                           	psect	idataBANK0
   146  007CA2                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _Digit
   150  007CA2  01                 	db	1
   151  007CA3  01                 	db	1
   152  007CA4  01                 	db	1
   153  007CA5  01                 	db	1
   154  007CA6  01                 	db	1
   155  007CA7  01                 	db	1
   156  007CA8  00                 	db	0
   157  007CA9  00                 	db	0
   158  007CAA  00                 	db	0
   159  007CAB  01                 	db	1
   160  007CAC  01                 	db	1
   161  007CAD  00                 	db	0
   162  007CAE  00                 	db	0
   163  007CAF  00                 	db	0
   164  007CB0  00                 	db	0
   165  007CB1  00                 	db	0
   166  007CB2  01                 	db	1
   167  007CB3  01                 	db	1
   168  007CB4  00                 	db	0
   169  007CB5  01                 	db	1
   170  007CB6  01                 	db	1
   171  007CB7  00                 	db	0
   172  007CB8  01                 	db	1
   173  007CB9  00                 	db	0
   174  007CBA  01                 	db	1
   175  007CBB  01                 	db	1
   176  007CBC  01                 	db	1
   177  007CBD  01                 	db	1
   178  007CBE  00                 	db	0
   179  007CBF  00                 	db	0
   180  007CC0  01                 	db	1
   181  007CC1  00                 	db	0
   182  007CC2  00                 	db	0
   183  007CC3  01                 	db	1
   184  007CC4  01                 	db	1
   185  007CC5  00                 	db	0
   186  007CC6  00                 	db	0
   187  007CC7  01                 	db	1
   188  007CC8  01                 	db	1
   189  007CC9  00                 	db	0
   190  007CCA  01                 	db	1
   191  007CCB  00                 	db	0
   192  007CCC  01                 	db	1
   193  007CCD  01                 	db	1
   194  007CCE  00                 	db	0
   195  007CCF  01                 	db	1
   196  007CD0  01                 	db	1
   197  007CD1  00                 	db	0
   198  007CD2  01                 	db	1
   199  007CD3  00                 	db	0
   200  007CD4  01                 	db	1
   201  007CD5  01                 	db	1
   202  007CD6  01                 	db	1
   203  007CD7  01                 	db	1
   204  007CD8  01                 	db	1
   205  007CD9  00                 	db	0
   206  007CDA  01                 	db	1
   207  007CDB  01                 	db	1
   208  007CDC  01                 	db	1
   209  007CDD  00                 	db	0
   210  007CDE  00                 	db	0
   211  007CDF  00                 	db	0
   212  007CE0  00                 	db	0
   213  007CE1  00                 	db	0
   214  007CE2  01                 	db	1
   215  007CE3  01                 	db	1
   216  007CE4  01                 	db	1
   217  007CE5  01                 	db	1
   218  007CE6  01                 	db	1
   219  007CE7  01                 	db	1
   220  007CE8  01                 	db	1
   221  007CE9  00                 	db	0
   222  007CEA  01                 	db	1
   223  007CEB  01                 	db	1
   224  007CEC  01                 	db	1
   225  007CED  00                 	db	0
   226  007CEE  00                 	db	0
   227  007CEF  01                 	db	1
   228  007CF0  01                 	db	1
   229  007CF1  00                 	db	0
   230                           
   231                           ;initializer for _b4
   232  007CF2  4C                 	db	76
   233  007CF3  41                 	db	65
   234  007CF4  20                 	db	32
   235  007CF5  50                 	db	80
   236  007CF6  52                 	db	82
   237  007CF7  4F                 	db	79
   238  007CF8  47                 	db	71
   239  007CF9  52                 	db	82
   240  007CFA  41                 	db	65
   241  007CFB  4D                 	db	77
   242  007CFC  41                 	db	65
   243  007CFD  43                 	db	67
   244  007CFE  49                 	db	73
   245  007CFF  4F                 	db	79
   246  007D00  4E                 	db	78
   247  007D01  00                 	db	0
   248                           
   249                           ;initializer for _b1
   250  007D02  52                 	db	82
   251  007D03  4F                 	db	79
   252  007D04  44                 	db	68
   253  007D05  52                 	db	82
   254  007D06  49                 	db	73
   255  007D07  47                 	db	71
   256  007D08  55                 	db	85
   257  007D09  45                 	db	69
   258  007D0A  5A                 	db	90
   259  007D0B  20                 	db	32
   260  007D0C  50                 	db	80
   261  007D0D  45                 	db	69
   262  007D0E  52                 	db	82
   263  007D0F  45                 	db	69
   264  007D10  5A                 	db	90
   265  007D11  00                 	db	0
   266                           
   267                           ;initializer for _b2
   268  007D12  48                 	db	72
   269  007D13  45                 	db	69
   270  007D14  52                 	db	82
   271  007D15  4E                 	db	78
   272  007D16  41                 	db	65
   273  007D17  4E                 	db	78
   274  007D18  44                 	db	68
   275  007D19  45                 	db	69
   276  007D1A  5A                 	db	90
   277  007D1B  20                 	db	32
   278  007D1C  44                 	db	68
   279  007D1D  49                 	db	73
   280  007D1E  41                 	db	65
   281  007D1F  5A                 	db	90
   282  007D20  00                 	db	0
   283                           
   284                           ;initializer for _p4
   285  007D21  49                 	db	73
   286  007D22  4E                 	db	78
   287  007D23  54                 	db	84
   288  007D24  52                 	db	82
   289  007D25  4F                 	db	79
   290  007D26  44                 	db	68
   291  007D27  55                 	db	85
   292  007D28  43                 	db	67
   293  007D29  43                 	db	67
   294  007D2A  49                 	db	73
   295  007D2B  4F                 	db	79
   296  007D2C  4E                 	db	78
   297  007D2D  20                 	db	32
   298  007D2E  41                 	db	65
   299  007D2F  00                 	db	0
   300  0000                     _PORTD	set	3971
   301  0000                     _PORTDbits	set	3971
   302  0000                     _LATBbits	set	3978
   303  0000                     _PORTCbits	set	3970
   304  0000                     _TRISCbits	set	3988
   305  0000                     _TRISB	set	3987
   306  0000                     _TRISD	set	3989
   307                           
   308                           ; #config settings
   309                           
   310                           	psect	cinit
   311  007BF2                     __pcinit:
   312                           	opt stack 0
   313  007BF2                     start_initialization:
   314                           	opt stack 0
   315  007BF2                     __initialization:
   316                           	opt stack 0
   317                           
   318                           ; Initialize objects allocated to BANK0 (142 bytes)
   319                           ; load TBLPTR registers with __pidataBANK0
   320  007BF2  0EA2               	movlw	low __pidataBANK0
   321  007BF4  6EF6               	movwf	tblptrl,c
   322  007BF6  0E7C               	movlw	high __pidataBANK0
   323  007BF8  6EF7               	movwf	tblptrh,c
   324  007BFA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   325  007BFC  6EF8               	movwf	tblptru,c
   326  007BFE  EE00  F060         	lfsr	0,__pdataBANK0
   327  007C02  EE10 F08E          	lfsr	1,142
   328  007C06                     copy_data0:
   329  007C06  0009               	tblrd		*+
   330  007C08  CFF5 FFEE          	movff	tablat,postinc0
   331  007C0C  50E5               	movf	postdec1,w,c
   332  007C0E  50E1               	movf	fsr1l,w,c
   333  007C10  E1FA               	bnz	copy_data0
   334                           
   335                           ; Initialize objects allocated to COMRAM (68 bytes)
   336                           ; load TBLPTR registers with __pidataCOMRAM
   337  007C12  0EAE               	movlw	low __pidataCOMRAM
   338  007C14  6EF6               	movwf	tblptrl,c
   339  007C16  0E7B               	movlw	high __pidataCOMRAM
   340  007C18  6EF7               	movwf	tblptrh,c
   341  007C1A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   342  007C1C  6EF8               	movwf	tblptru,c
   343  007C1E  EE00  F001         	lfsr	0,__pdataCOMRAM
   344  007C22  EE10 F044          	lfsr	1,68
   345  007C26                     copy_data1:
   346  007C26  0009               	tblrd		*+
   347  007C28  CFF5 FFEE          	movff	tablat,postinc0
   348  007C2C  50E5               	movf	postdec1,w,c
   349  007C2E  50E1               	movf	fsr1l,w,c
   350  007C30  E1FA               	bnz	copy_data1
   351                           
   352                           ; Clear objects allocated to COMRAM (4 bytes)
   353  007C32  6A56               	clrf	(__pbssCOMRAM+3)& (0+255),c
   354  007C34  6A55               	clrf	(__pbssCOMRAM+2)& (0+255),c
   355  007C36  6A54               	clrf	(__pbssCOMRAM+1)& (0+255),c
   356  007C38  6A53               	clrf	__pbssCOMRAM& (0+255),c
   357  007C3A                     end_of_initialization:
   358                           	opt stack 0
   359  007C3A                     __end_of__initialization:
   360                           	opt stack 0
   361  007C3A  0100               	movlb	0
   362  007C3C  EF98  F03E         	goto	_main	;jump to C main() function
   363                           tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	bssCOMRAM
   372  000053                     __pbssCOMRAM:
   373                           	opt stack 0
   374  000053                     _contN:
   375                           	opt stack 0
   376  000053                     	ds	2
   377  000055                     _cont:
   378                           	opt stack 0
   379  000055                     	ds	2
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           postdec1	equ	0xFE5
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	dataCOMRAM
   389  000001                     __pdataCOMRAM:
   390                           	opt stack 0
   391  000001                     _b:
   392                           	opt stack 0
   393  000001                     	ds	8
   394  000009                     _p:
   395                           	opt stack 0
   396  000009                     	ds	8
   397  000011                     _p3:
   398                           	opt stack 0
   399  000011                     	ds	14
   400  00001F                     _b3:
   401                           	opt stack 0
   402  00001F                     	ds	13
   403  00002C                     _p2:
   404                           	opt stack 0
   405  00002C                     	ds	13
   406  000039                     _p1:
   407                           	opt stack 0
   408  000039                     	ds	12
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           postdec1	equ	0xFE5
   415                           fsr1l	equ	0xFE1
   416                           
   417                           	psect	dataBANK0
   418  000060                     __pdataBANK0:
   419                           	opt stack 0
   420  000060                     _Digit:
   421                           	opt stack 0
   422  000060                     	ds	80
   423  0000B0                     _b4:
   424                           	opt stack 0
   425  0000B0                     	ds	16
   426  0000C0                     _b1:
   427                           	opt stack 0
   428  0000C0                     	ds	16
   429  0000D0                     _b2:
   430                           	opt stack 0
   431  0000D0                     	ds	15
   432  0000DF                     _p4:
   433                           	opt stack 0
   434  0000DF                     	ds	15
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	cstackCOMRAM
   444  000045                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000045                     Display@N:
   447                           	opt stack 0
   448  000045                     delay@ms:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x0
   452  000045                     	ds	2
   453  000047                     ??_Display:
   454  000047                     delay@i:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x2
   458  000047                     	ds	2
   459  000049                     delay@j:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x4
   463  000049                     	ds	2
   464  00004B                     ??_lcd_cmd:
   465  00004B                     ??_lcd_dwr:
   466  00004B                     lcd_cmd_hf@x:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x6
   470  00004B                     	ds	1
   471  00004C                     lcd_cmd@x:
   472                           	opt stack 0
   473  00004C                     lcd_dwr@x:
   474                           	opt stack 0
   475  00004C                     Display@valor:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x7
   479  00004C                     	ds	1
   480  00004D                     lcd_msg@c:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x8
   484  00004D                     	ds	1
   485  00004E                     Display@i:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x9
   489  00004E                     	ds	1
   490  00004F                     
   491                           ; 1 bytes @ 0xA
   492  00004F                     	ds	1
   493  000050                     ??_main:
   494                           
   495                           ; 1 bytes @ 0xB
   496  000050                     	ds	2
   497  000052                     main@boton:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0xD
   501  000052                     	ds	1
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           postdec1	equ	0xFE5
   508                           fsr1l	equ	0xFE1
   509                           
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 76 in file "nombres.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  boton           1   13[COMRAM] unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   529 ;;      Params:         0       0       0       0       0       0       0       0       0
   530 ;;      Locals:         1       0       0       0       0       0       0       0       0
   531 ;;      Temps:          2       0       0       0       0       0       0       0       0
   532 ;;      Totals:         3       0       0       0       0       0       0       0       0
   533 ;;Total ram usage:        3 bytes
   534 ;; Hardware stack levels required when called:    5
   535 ;; This function calls:
   536 ;;		_Display
   537 ;;		_IncrementaNumero
   538 ;;		_IncrementaPersona
   539 ;;		_lcd_cmd
   540 ;;		_lcd_init
   541 ;;		_lcd_msg
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text0
   548  007D30                     __ptext0:
   549                           	opt stack 0
   550  007D30                     _main:
   551                           	opt stack 26
   552                           
   553                           ;nombres.c: 78: char boton= 'x';
   554                           
   555                           ;incstack = 0
   556  007D30  0E78               	movlw	120
   557  007D32  6E52               	movwf	main@boton,c
   558                           
   559                           ;nombres.c: 79: contN=0;
   560  007D34  0E00               	movlw	0
   561  007D36  6E54               	movwf	_contN+1,c	;volatile
   562  007D38  0E00               	movlw	0
   563  007D3A  6E53               	movwf	_contN,c	;volatile
   564                           
   565                           ;nombres.c: 80: TRISD = 0x00;
   566  007D3C  0E00               	movlw	0
   567  007D3E  6E95               	movwf	3989,c	;volatile
   568                           
   569                           ;nombres.c: 81: TRISB = 0x00;
   570  007D40  0E00               	movlw	0
   571  007D42  6E93               	movwf	3987,c	;volatile
   572                           
   573                           ;nombres.c: 82: TRISCbits.TRISC6=1;
   574  007D44  8C94               	bsf	3988,6,c	;volatile
   575                           
   576                           ;nombres.c: 83: TRISCbits.TRISC7=1;
   577  007D46  8E94               	bsf	3988,7,c	;volatile
   578                           
   579                           ;nombres.c: 84: TRISCbits.TRISC0 = 0;
   580  007D48  9094               	bcf	3988,0,c	;volatile
   581                           
   582                           ;nombres.c: 85: TRISCbits.TRISC1 = 0;
   583  007D4A  9294               	bcf	3988,1,c	;volatile
   584                           
   585                           ;nombres.c: 86: lcd_init();
   586  007D4C  ECA4  F03D         	call	_lcd_init	;wreg free
   587                           
   588                           ;nombres.c: 87: _delay((unsigned long)((200)*(4000000/4000.0)));
   589  007D50  0E02               	movlw	2
   590  007D52  6E51               	movwf	(??_main+1)& (0+255),c
   591  007D54  0E04               	movlw	4
   592  007D56  6E50               	movwf	??_main& (0+255),c
   593  007D58  0EBA               	movlw	186
   594  007D5A                     u217:
   595  007D5A  2EE8               	decfsz	wreg,f,c
   596  007D5C  D7FE               	bra	u217
   597  007D5E  2E50               	decfsz	??_main& (0+255),f,c
   598  007D60  D7FC               	bra	u217
   599  007D62  2E51               	decfsz	(??_main+1)& (0+255),f,c
   600  007D64  D7FA               	bra	u217
   601  007D66  D000               	nop2	
   602                           
   603                           ;nombres.c: 88: lcd_cmd(0x01);
   604  007D68  0E01               	movlw	1
   605  007D6A  EC7A  F03D         	call	_lcd_cmd
   606                           
   607                           ;nombres.c: 89: lcd_msg(p[3]);
   608  007D6E  C00F  F04D         	movff	_p+6,lcd_msg@c
   609  007D72  C010  F04E         	movff	_p+7,lcd_msg@c+1
   610  007D76  EC55  F03D         	call	_lcd_msg	;wreg free
   611                           
   612                           ;nombres.c: 90: lcd_cmd(0xC0);
   613  007D7A  0EC0               	movlw	192
   614  007D7C  EC7A  F03D         	call	_lcd_cmd
   615                           
   616                           ;nombres.c: 91: lcd_msg(b[3]);
   617  007D80  C007  F04D         	movff	_b+6,lcd_msg@c
   618  007D84  C008  F04E         	movff	_b+7,lcd_msg@c+1
   619  007D88  EC55  F03D         	call	_lcd_msg	;wreg free
   620                           
   621                           ;nombres.c: 92: Display(8);
   622  007D8C  0E00               	movlw	0
   623  007D8E  6E46               	movwf	Display@N+1,c
   624  007D90  0E08               	movlw	8
   625  007D92  6E45               	movwf	Display@N,c
   626  007D94  ECF0  F03E         	call	_Display	;wreg free
   627  007D98                     
   628                           ;nombres.c: 94: {
   629                           ;nombres.c: 95: _delay((unsigned long)((20)*(4000000/4000.0)));
   630  007D98  0E1A               	movlw	26
   631  007D9A  6E50               	movwf	??_main& (0+255),c
   632  007D9C  0EF8               	movlw	248
   633  007D9E                     u227:
   634  007D9E  2EE8               	decfsz	wreg,f,c
   635  007DA0  D7FE               	bra	u227
   636  007DA2  2E50               	decfsz	??_main& (0+255),f,c
   637  007DA4  D7FC               	bra	u227
   638  007DA6  D000               	nop2	
   639                           
   640                           ;nombres.c: 96: if(PORTCbits.RC6 == 1)
   641  007DA8  AC82               	btfss	3970,6,c	;volatile
   642  007DAA  D005               	goto	l62
   643                           
   644                           ;nombres.c: 97: {
   645                           ;nombres.c: 98: PORTCbits.RC0 = 1;
   646  007DAC  8082               	bsf	3970,0,c	;volatile
   647                           
   648                           ;nombres.c: 99: PORTCbits.RC1 = 0;
   649  007DAE  9282               	bcf	3970,1,c	;volatile
   650                           
   651                           ;nombres.c: 100: boton= IncrementaPersona();
   652  007DB0  EC20  F03E         	call	_IncrementaPersona	;wreg free
   653  007DB4  D006               	goto	L1
   654  007DB6                     l62:
   655                           
   656                           ;nombres.c: 102: else if(PORTCbits.RC7 == 1)
   657  007DB6  AE82               	btfss	3970,7,c	;volatile
   658  007DB8  D005               	goto	l64
   659                           
   660                           ;nombres.c: 103: {
   661                           ;nombres.c: 104: PORTCbits.RC0 = 0;
   662  007DBA  9082               	bcf	3970,0,c	;volatile
   663                           
   664                           ;nombres.c: 105: PORTCbits.RC1 = 1;
   665  007DBC  8282               	bsf	3970,1,c	;volatile
   666                           
   667                           ;nombres.c: 106: boton = IncrementaNumero();
   668  007DBE  EC67  F03D         	call	_IncrementaNumero	;wreg free
   669  007DC2                     L1:
   670  007DC2  6E52               	movwf	main@boton,c
   671  007DC4                     l64:
   672                           
   673                           ;nombres.c: 107: }
   674                           ;nombres.c: 109: PORTCbits.RC0 ^= 1;
   675  007DC4  7082               	btg	3970,0,c	;volatile
   676                           
   677                           ;nombres.c: 110: PORTCbits.RC1 ^= 1;
   678  007DC6  7282               	btg	3970,1,c	;volatile
   679                           
   680                           ;nombres.c: 111: _delay((unsigned long)((500)*(4000000/4000.0)));
   681  007DC8  0E03               	movlw	3
   682  007DCA  6E51               	movwf	(??_main+1)& (0+255),c
   683  007DCC  0E8A               	movlw	138
   684  007DCE  6E50               	movwf	??_main& (0+255),c
   685  007DD0  0E56               	movlw	86
   686  007DD2                     u237:
   687  007DD2  2EE8               	decfsz	wreg,f,c
   688  007DD4  D7FE               	bra	u237
   689  007DD6  2E50               	decfsz	??_main& (0+255),f,c
   690  007DD8  D7FC               	bra	u237
   691  007DDA  2E51               	decfsz	(??_main+1)& (0+255),f,c
   692  007DDC  D7FA               	bra	u237
   693  007DDE  D7DC               	goto	l61
   694  007DE0                     __end_of_main:
   695                           	opt stack 0
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705 ;; *************** function _lcd_init *****************
   706 ;; Defined at:
   707 ;;		line 214 in file "nombres.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   721 ;;      Params:         0       0       0       0       0       0       0       0       0
   722 ;;      Locals:         0       0       0       0       0       0       0       0       0
   723 ;;      Temps:          0       0       0       0       0       0       0       0       0
   724 ;;      Totals:         0       0       0       0       0       0       0       0       0
   725 ;;Total ram usage:        0 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    3
   728 ;; This function calls:
   729 ;;		_lcd_cmd
   730 ;;		_lcd_cmd_hf
   731 ;; This function is called by:
   732 ;;		_main
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text1
   737  007B48                     __ptext1:
   738                           	opt stack 0
   739  007B48                     _lcd_init:
   740                           	opt stack 27
   741                           
   742                           ;nombres.c: 216: lcd_cmd_hf(0x30);
   743                           
   744                           ;incstack = 0
   745  007B48  0E30               	movlw	48
   746  007B4A  EC4B  F03D         	call	_lcd_cmd_hf
   747                           
   748                           ;nombres.c: 217: lcd_cmd_hf(0x20);
   749  007B4E  0E20               	movlw	32
   750  007B50  EC4B  F03D         	call	_lcd_cmd_hf
   751                           
   752                           ;nombres.c: 218: lcd_cmd(0x28);
   753  007B54  0E28               	movlw	40
   754  007B56  EC7A  F03D         	call	_lcd_cmd
   755                           
   756                           ;nombres.c: 219: lcd_cmd(0x0E);
   757  007B5A  0E0E               	movlw	14
   758  007B5C  EC7A  F03D         	call	_lcd_cmd
   759                           
   760                           ;nombres.c: 220: lcd_cmd(0x01);
   761  007B60  0E01               	movlw	1
   762  007B62  EC7A  F03D         	call	_lcd_cmd
   763                           
   764                           ;nombres.c: 221: lcd_cmd(0x06);
   765  007B66  0E06               	movlw	6
   766  007B68  EC7A  F03D         	call	_lcd_cmd
   767                           
   768                           ;nombres.c: 222: lcd_cmd(0x80);
   769  007B6C  0E80               	movlw	128
   770  007B6E  EC7A  F03D         	call	_lcd_cmd
   771  007B72  0012               	return		;funcret
   772  007B74                     __end_of_lcd_init:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1l	equ	0xFE1
   782                           
   783 ;; *************** function _lcd_cmd_hf *****************
   784 ;; Defined at:
   785 ;;		line 179 in file "nombres.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;  x               1    wreg     unsigned char 
   788 ;; Auto vars:     Size  Location     Type
   789 ;;  x               1    6[COMRAM] unsigned char 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, status,2, status,0, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   799 ;;      Params:         0       0       0       0       0       0       0       0       0
   800 ;;      Locals:         1       0       0       0       0       0       0       0       0
   801 ;;      Temps:          0       0       0       0       0       0       0       0       0
   802 ;;      Totals:         1       0       0       0       0       0       0       0       0
   803 ;;Total ram usage:        1 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    2
   806 ;; This function calls:
   807 ;;		_lcd_lat
   808 ;; This function is called by:
   809 ;;		_lcd_init
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  007A96                     __ptext2:
   815                           	opt stack 0
   816  007A96                     _lcd_cmd_hf:
   817                           	opt stack 27
   818                           
   819                           ;incstack = 0
   820                           ;lcd_cmd_hf@x stored from wreg
   821  007A96  6E4B               	movwf	lcd_cmd_hf@x,c
   822                           
   823                           ;nombres.c: 181: PORTDbits.RD0 = 0;
   824  007A98  9083               	bcf	3971,0,c	;volatile
   825                           
   826                           ;nombres.c: 182: PORTD &= 0x0F;
   827  007A9A  0E0F               	movlw	15
   828  007A9C  1683               	andwf	3971,f,c	;volatile
   829                           
   830                           ;nombres.c: 183: PORTD |= (x & 0xF0);
   831  007A9E  504B               	movf	lcd_cmd_hf@x,w,c
   832  007AA0  0BF0               	andlw	240
   833  007AA2  1283               	iorwf	3971,f,c	;volatile
   834                           
   835                           ;nombres.c: 184: lcd_lat();
   836  007AA4  EC42  F03D         	call	_lcd_lat	;wreg free
   837  007AA8  0012               	return		;funcret
   838  007AAA                     __end_of_lcd_cmd_hf:
   839                           	opt stack 0
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postdec1	equ	0xFE5
   847                           fsr1l	equ	0xFE1
   848                           
   849 ;; *************** function _IncrementaPersona *****************
   850 ;; Defined at:
   851 ;;		line 120 in file "nombres.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      unsigned char 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   865 ;;      Params:         0       0       0       0       0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0       0       0       0       0
   868 ;;      Totals:         0       0       0       0       0       0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    4
   872 ;; This function calls:
   873 ;;		_lcd_cmd
   874 ;;		_lcd_msg
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text3
   881  007C40                     __ptext3:
   882                           	opt stack 0
   883  007C40                     _IncrementaPersona:
   884                           	opt stack 26
   885                           
   886                           ;nombres.c: 123: {
   887                           ;nombres.c: 124: lcd_cmd(0x01);
   888                           
   889                           ;incstack = 0
   890  007C40  0E01               	movlw	1
   891  007C42  EC7A  F03D         	call	_lcd_cmd
   892                           
   893                           ;nombres.c: 125: lcd_msg(p[cont]);
   894  007C46  90D8               	bcf	status,0,c
   895  007C48  3455               	rlcf	_cont,w,c	;volatile
   896  007C4A  6ED9               	movwf	fsr2l,c
   897  007C4C  3456               	rlcf	_cont+1,w,c	;volatile
   898  007C4E  6EDA               	movwf	fsr2h,c
   899  007C50  0E09               	movlw	low _p
   900  007C52  26D9               	addwf	fsr2l,f,c
   901  007C54  0E00               	movlw	high _p
   902  007C56  22DA               	addwfc	fsr2h,f,c
   903  007C58  CFDE F04D          	movff	postinc2,lcd_msg@c
   904  007C5C  CFDD F04E          	movff	postdec2,lcd_msg@c+1
   905  007C60  EC55  F03D         	call	_lcd_msg	;wreg free
   906                           
   907                           ;nombres.c: 126: lcd_cmd(0xC0);
   908  007C64  0EC0               	movlw	192
   909  007C66  EC7A  F03D         	call	_lcd_cmd
   910                           
   911                           ;nombres.c: 127: lcd_msg(b[cont]);
   912  007C6A  90D8               	bcf	status,0,c
   913  007C6C  3455               	rlcf	_cont,w,c	;volatile
   914  007C6E  6ED9               	movwf	fsr2l,c
   915  007C70  3456               	rlcf	_cont+1,w,c	;volatile
   916  007C72  6EDA               	movwf	fsr2h,c
   917  007C74  0E01               	movlw	low _b
   918  007C76  26D9               	addwf	fsr2l,f,c
   919  007C78  0E00               	movlw	high _b
   920  007C7A  22DA               	addwfc	fsr2h,f,c
   921  007C7C  CFDE F04D          	movff	postinc2,lcd_msg@c
   922  007C80  CFDD F04E          	movff	postdec2,lcd_msg@c+1
   923  007C84  EC55  F03D         	call	_lcd_msg	;wreg free
   924                           
   925                           ;nombres.c: 128: }
   926                           ;nombres.c: 129: cont++;
   927  007C88  4A55               	infsnz	_cont,f,c	;volatile
   928  007C8A  2A56               	incf	_cont+1,f,c	;volatile
   929                           
   930                           ;nombres.c: 130: if (cont == 4) cont = 0;
   931  007C8C  0E04               	movlw	4
   932  007C8E  1855               	xorwf	_cont,w,c	;volatile
   933  007C90  1056               	iorwf	_cont+1,w,c	;volatile
   934  007C92  A4D8               	btfss	status,2,c
   935  007C94  D004               	goto	l70
   936  007C96  0E00               	movlw	0
   937  007C98  6E56               	movwf	_cont+1,c	;volatile
   938  007C9A  0E00               	movlw	0
   939  007C9C  6E55               	movwf	_cont,c	;volatile
   940  007C9E                     l70:
   941                           
   942                           ;nombres.c: 131: return 'x';
   943  007C9E  0E78               	movlw	120
   944  007CA0  0012               	return	
   945  007CA2                     __end_of_IncrementaPersona:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           postinc2	equ	0xFDE
   956                           postdec2	equ	0xFDD
   957                           fsr2h	equ	0xFDA
   958                           fsr2l	equ	0xFD9
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _lcd_msg *****************
   962 ;; Defined at:
   963 ;;		line 199 in file "nombres.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  c               2    8[COMRAM] PTR unsigned char 
   966 ;;		 -> b4(16), b3(13), b2(15), b1(16), 
   967 ;;		 -> p4(15), p3(14), p2(13), p1(12), 
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   979 ;;      Params:         2       0       0       0       0       0       0       0       0
   980 ;;      Locals:         0       0       0       0       0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0       0       0       0       0
   982 ;;      Totals:         2       0       0       0       0       0       0       0       0
   983 ;;Total ram usage:        2 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    3
   986 ;; This function calls:
   987 ;;		_lcd_dwr
   988 ;; This function is called by:
   989 ;;		_main
   990 ;;		_IncrementaPersona
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text4
   995  007AAA                     __ptext4:
   996                           	opt stack 0
   997  007AAA                     _lcd_msg:
   998                           	opt stack 27
   999                           
  1000                           ;nombres.c: 201: while(*c != 0)
  1001                           
  1002                           ;incstack = 0
  1003  007AAA  D009               	goto	l95
  1004  007AAC                     
  1005                           ;nombres.c: 202: {
  1006                           ;nombres.c: 203: lcd_dwr(*c++);
  1007  007AAC  C04D  FFD9         	movff	lcd_msg@c,fsr2l
  1008  007AB0  C04E  FFDA         	movff	lcd_msg@c+1,fsr2h
  1009  007AB4  50DF               	movf	indf2,w,c
  1010  007AB6  EC8F  F03D         	call	_lcd_dwr
  1011  007ABA  4A4D               	infsnz	lcd_msg@c,f,c
  1012  007ABC  2A4E               	incf	lcd_msg@c+1,f,c
  1013  007ABE                     l95:
  1014  007ABE  C04D  FFD9         	movff	lcd_msg@c,fsr2l
  1015  007AC2  C04E  FFDA         	movff	lcd_msg@c+1,fsr2h
  1016  007AC6  50DF               	movf	indf2,w,c
  1017  007AC8  B4D8               	btfsc	status,2,c
  1018  007ACA  0012               	return	
  1019  007ACC  D7EF               	goto	l96
  1020  007ACE                     __end_of_lcd_msg:
  1021                           	opt stack 0
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           indf2	equ	0xFDF
  1031                           postinc2	equ	0xFDE
  1032                           postdec2	equ	0xFDD
  1033                           fsr2h	equ	0xFDA
  1034                           fsr2l	equ	0xFD9
  1035                           status	equ	0xFD8
  1036                           
  1037 ;; *************** function _lcd_dwr *****************
  1038 ;; Defined at:
  1039 ;;		line 187 in file "nombres.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;  x               1    wreg     unsigned char 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  x               1    7[COMRAM] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2, status,0, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1053 ;;      Params:         0       0       0       0       0       0       0       0       0
  1054 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1055 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1056 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1057 ;;Total ram usage:        2 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    2
  1060 ;; This function calls:
  1061 ;;		_lcd_lat
  1062 ;; This function is called by:
  1063 ;;		_lcd_msg
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text5
  1068  007B1E                     __ptext5:
  1069                           	opt stack 0
  1070  007B1E                     _lcd_dwr:
  1071                           	opt stack 27
  1072                           
  1073                           ;incstack = 0
  1074                           ;lcd_dwr@x stored from wreg
  1075  007B1E  6E4C               	movwf	lcd_dwr@x,c
  1076                           
  1077                           ;nombres.c: 189: PORTDbits.RD0 = 1;
  1078  007B20  8083               	bsf	3971,0,c	;volatile
  1079                           
  1080                           ;nombres.c: 190: PORTD &= 0x0F;
  1081  007B22  0E0F               	movlw	15
  1082  007B24  1683               	andwf	3971,f,c	;volatile
  1083                           
  1084                           ;nombres.c: 191: PORTD |= ((x & 0xF0));
  1085  007B26  504C               	movf	lcd_dwr@x,w,c
  1086  007B28  0BF0               	andlw	240
  1087  007B2A  1283               	iorwf	3971,f,c	;volatile
  1088                           
  1089                           ;nombres.c: 192: lcd_lat();
  1090  007B2C  EC42  F03D         	call	_lcd_lat	;wreg free
  1091                           
  1092                           ;nombres.c: 194: PORTD &= 0x0F;
  1093  007B30  0E0F               	movlw	15
  1094  007B32  1683               	andwf	3971,f,c	;volatile
  1095                           
  1096                           ;nombres.c: 195: PORTD |= ((x & 0x0F)<<4);
  1097  007B34  C04C  F04B         	movff	lcd_dwr@x,??_lcd_dwr
  1098  007B38  0E0F               	movlw	15
  1099  007B3A  164B               	andwf	??_lcd_dwr,f,c
  1100  007B3C  384B               	swapf	??_lcd_dwr,w,c
  1101  007B3E  0BF0               	andlw	240
  1102  007B40  1283               	iorwf	3971,f,c	;volatile
  1103                           
  1104                           ;nombres.c: 196: lcd_lat();
  1105  007B42  EC42  F03D         	call	_lcd_lat	;wreg free
  1106  007B46  0012               	return		;funcret
  1107  007B48                     __end_of_lcd_dwr:
  1108                           	opt stack 0
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           fsr1l	equ	0xFE1
  1117                           indf2	equ	0xFDF
  1118                           postinc2	equ	0xFDE
  1119                           postdec2	equ	0xFDD
  1120                           fsr2h	equ	0xFDA
  1121                           fsr2l	equ	0xFD9
  1122                           status	equ	0xFD8
  1123                           
  1124 ;; *************** function _lcd_cmd *****************
  1125 ;; Defined at:
  1126 ;;		line 167 in file "nombres.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;  x               1    wreg     unsigned char 
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;  x               1    7[COMRAM] unsigned char 
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		wreg, status,2, status,0, cstack
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1140 ;;      Params:         0       0       0       0       0       0       0       0       0
  1141 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1142 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1143 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1144 ;;Total ram usage:        2 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; Hardware stack levels required when called:    2
  1147 ;; This function calls:
  1148 ;;		_lcd_lat
  1149 ;; This function is called by:
  1150 ;;		_main
  1151 ;;		_IncrementaPersona
  1152 ;;		_lcd_init
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text6
  1157  007AF4                     __ptext6:
  1158                           	opt stack 0
  1159  007AF4                     _lcd_cmd:
  1160                           	opt stack 27
  1161                           
  1162                           ;incstack = 0
  1163                           ;lcd_cmd@x stored from wreg
  1164  007AF4  6E4C               	movwf	lcd_cmd@x,c
  1165                           
  1166                           ;nombres.c: 169: PORTDbits.RD0 = 0;
  1167  007AF6  9083               	bcf	3971,0,c	;volatile
  1168                           
  1169                           ;nombres.c: 170: PORTD &= 0x0F;
  1170  007AF8  0E0F               	movlw	15
  1171  007AFA  1683               	andwf	3971,f,c	;volatile
  1172                           
  1173                           ;nombres.c: 171: PORTD |= (x & 0xF0);
  1174  007AFC  504C               	movf	lcd_cmd@x,w,c
  1175  007AFE  0BF0               	andlw	240
  1176  007B00  1283               	iorwf	3971,f,c	;volatile
  1177                           
  1178                           ;nombres.c: 172: lcd_lat();
  1179  007B02  EC42  F03D         	call	_lcd_lat	;wreg free
  1180                           
  1181                           ;nombres.c: 174: PORTD &= 0x0F;
  1182  007B06  0E0F               	movlw	15
  1183  007B08  1683               	andwf	3971,f,c	;volatile
  1184                           
  1185                           ;nombres.c: 175: PORTD |= ((x & 0x0F)<<4);
  1186  007B0A  C04C  F04B         	movff	lcd_cmd@x,??_lcd_cmd
  1187  007B0E  0E0F               	movlw	15
  1188  007B10  164B               	andwf	??_lcd_cmd,f,c
  1189  007B12  384B               	swapf	??_lcd_cmd,w,c
  1190  007B14  0BF0               	andlw	240
  1191  007B16  1283               	iorwf	3971,f,c	;volatile
  1192                           
  1193                           ;nombres.c: 176: lcd_lat();
  1194  007B18  EC42  F03D         	call	_lcd_lat	;wreg free
  1195  007B1C  0012               	return		;funcret
  1196  007B1E                     __end_of_lcd_cmd:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           indf2	equ	0xFDF
  1207                           postinc2	equ	0xFDE
  1208                           postdec2	equ	0xFDD
  1209                           fsr2h	equ	0xFDA
  1210                           fsr2l	equ	0xFD9
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function _lcd_lat *****************
  1214 ;; Defined at:
  1215 ;;		line 159 in file "nombres.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;		None
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0, cstack
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1229 ;;      Params:         0       0       0       0       0       0       0       0       0
  1230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1232 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1233 ;;Total ram usage:        0 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    1
  1236 ;; This function calls:
  1237 ;;		_delay
  1238 ;; This function is called by:
  1239 ;;		_lcd_cmd
  1240 ;;		_lcd_cmd_hf
  1241 ;;		_lcd_dwr
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text7
  1246  007A84                     __ptext7:
  1247                           	opt stack 0
  1248  007A84                     _lcd_lat:
  1249                           	opt stack 27
  1250                           
  1251                           ;nombres.c: 162: PORTDbits.RD1 = 1;
  1252                           
  1253                           ;incstack = 0
  1254  007A84  8283               	bsf	3971,1,c	;volatile
  1255                           
  1256                           ;nombres.c: 163: delay(1);
  1257  007A86  0E00               	movlw	0
  1258  007A88  6E46               	movwf	delay@ms+1,c
  1259  007A8A  0E01               	movlw	1
  1260  007A8C  6E45               	movwf	delay@ms,c
  1261  007A8E  ECBA  F03D         	call	_delay	;wreg free
  1262                           
  1263                           ;nombres.c: 164: PORTDbits.RD1 = 0;
  1264  007A92  9283               	bcf	3971,1,c	;volatile
  1265  007A94  0012               	return		;funcret
  1266  007A96                     __end_of_lcd_lat:
  1267                           	opt stack 0
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1l	equ	0xFE1
  1276                           indf2	equ	0xFDF
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283 ;; *************** function _delay *****************
  1284 ;; Defined at:
  1285 ;;		line 207 in file "nombres.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  ms              2    0[COMRAM] unsigned int 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  j               2    4[COMRAM] int 
  1290 ;;  i               2    2[COMRAM] int 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1300 ;;      Params:         2       0       0       0       0       0       0       0       0
  1301 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1303 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1304 ;;Total ram usage:        6 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_lcd_lat
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text8
  1314  007B74                     __ptext8:
  1315                           	opt stack 0
  1316  007B74                     _delay:
  1317                           	opt stack 27
  1318                           
  1319                           ;nombres.c: 209: int i,j;
  1320                           ;nombres.c: 210: for(i=0;i<=ms;i++)
  1321                           
  1322                           ;incstack = 0
  1323  007B74  0E00               	movlw	0
  1324  007B76  6E48               	movwf	delay@i+1,c
  1325  007B78  0E00               	movlw	0
  1326  007B7A  6E47               	movwf	delay@i,c
  1327  007B7C  D011               	goto	l101
  1328  007B7E                     
  1329                           ;nombres.c: 211: for(j=0;j<=120;j++);
  1330  007B7E  0E00               	movlw	0
  1331  007B80  6E4A               	movwf	delay@j+1,c
  1332  007B82  0E00               	movlw	0
  1333  007B84  6E49               	movwf	delay@j,c
  1334  007B86                     l879:
  1335  007B86  BE4A               	btfsc	delay@j+1,7,c
  1336  007B88  D006               	goto	l103
  1337  007B8A  504A               	movf	delay@j+1,w,c
  1338  007B8C  E107               	bnz	l887
  1339  007B8E  0E79               	movlw	121
  1340  007B90  5C49               	subwf	delay@j,w,c
  1341  007B92  B0D8               	btfsc	status,0,c
  1342  007B94  D003               	goto	u120
  1343  007B96                     l103:
  1344  007B96  4A49               	infsnz	delay@j,f,c
  1345  007B98  2A4A               	incf	delay@j+1,f,c
  1346  007B9A  D7F5               	goto	l879
  1347  007B9C                     u120:
  1348  007B9C                     l887:
  1349  007B9C  4A47               	infsnz	delay@i,f,c
  1350  007B9E  2A48               	incf	delay@i+1,f,c
  1351  007BA0                     l101:
  1352  007BA0  5047               	movf	delay@i,w,c
  1353  007BA2  5C45               	subwf	delay@ms,w,c
  1354  007BA4  5048               	movf	delay@i+1,w,c
  1355  007BA6  5846               	subwfb	delay@ms+1,w,c
  1356  007BA8  A0D8               	btfss	status,0,c
  1357  007BAA  0012               	return	
  1358  007BAC  D7E8               	goto	l102
  1359  007BAE                     __end_of_delay:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1l	equ	0xFE1
  1369                           indf2	equ	0xFDF
  1370                           postinc2	equ	0xFDE
  1371                           postdec2	equ	0xFDD
  1372                           fsr2h	equ	0xFDA
  1373                           fsr2l	equ	0xFD9
  1374                           status	equ	0xFD8
  1375                           
  1376 ;; *************** function _IncrementaNumero *****************
  1377 ;; Defined at:
  1378 ;;		line 135 in file "nombres.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      unsigned char 
  1385 ;; Registers used:
  1386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1392 ;;      Params:         0       0       0       0       0       0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1395 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    1
  1399 ;; This function calls:
  1400 ;;		_Display
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text9
  1407  007ACE                     __ptext9:
  1408                           	opt stack 0
  1409  007ACE                     _IncrementaNumero:
  1410                           	opt stack 29
  1411                           
  1412                           ;nombres.c: 137: Display(contN);
  1413                           
  1414                           ;incstack = 0
  1415  007ACE  C053  F045         	movff	_contN,Display@N	;volatile
  1416  007AD2  C054  F046         	movff	_contN+1,Display@N+1	;volatile
  1417  007AD6  ECF0  F03E         	call	_Display	;wreg free
  1418                           
  1419                           ;nombres.c: 138: contN++;
  1420  007ADA  4A53               	infsnz	_contN,f,c	;volatile
  1421  007ADC  2A54               	incf	_contN+1,f,c	;volatile
  1422                           
  1423                           ;nombres.c: 139: if(contN == 10) contN = 0;
  1424  007ADE  0E0A               	movlw	10
  1425  007AE0  1853               	xorwf	_contN,w,c	;volatile
  1426  007AE2  1054               	iorwf	_contN+1,w,c	;volatile
  1427  007AE4  A4D8               	btfss	status,2,c
  1428  007AE6  D004               	goto	l74
  1429  007AE8  0E00               	movlw	0
  1430  007AEA  6E54               	movwf	_contN+1,c	;volatile
  1431  007AEC  0E00               	movlw	0
  1432  007AEE  6E53               	movwf	_contN,c	;volatile
  1433  007AF0                     l74:
  1434                           
  1435                           ;nombres.c: 140: return 'x';
  1436  007AF0  0E78               	movlw	120
  1437  007AF2  0012               	return	
  1438  007AF4                     __end_of_IncrementaNumero:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           indf2	equ	0xFDF
  1449                           postinc2	equ	0xFDE
  1450                           postdec2	equ	0xFDD
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _Display *****************
  1456 ;; Defined at:
  1457 ;;		line 143 in file "nombres.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  N               2    0[COMRAM] int 
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  i               2    9[COMRAM] int 
  1462 ;;  valor           2    7[COMRAM] int 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1472 ;;      Params:         2       0       0       0       0       0       0       0       0
  1473 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1474 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1475 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1476 ;;Total ram usage:       11 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;;		_IncrementaNumero
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text10
  1487  007DE0                     __ptext10:
  1488                           	opt stack 0
  1489  007DE0                     _Display:
  1490                           	opt stack 29
  1491                           
  1492                           ;nombres.c: 145: int valor,i;
  1493                           ;nombres.c: 146: for (i= 0 ; i<8 ; i++)
  1494                           
  1495                           ;incstack = 0
  1496  007DE0  0E00               	movlw	0
  1497  007DE2  6E4F               	movwf	Display@i+1,c
  1498  007DE4  0E00               	movlw	0
  1499  007DE6  6E4E               	movwf	Display@i,c
  1500  007DE8  BE4F               	btfsc	Display@i+1,7,c
  1501  007DEA  D008               	goto	l78
  1502  007DEC  504F               	movf	Display@i+1,w,c
  1503  007DEE  E105               	bnz	u150
  1504  007DF0  0E08               	movlw	8
  1505  007DF2  5C4E               	subwf	Display@i,w,c
  1506  007DF4  B0D8               	btfsc	status,0,c
  1507  007DF6  0012               	return	
  1508  007DF8  D001               	goto	l78
  1509  007DFA                     u150:
  1510  007DFA  0012               	return	
  1511  007DFC                     l78:
  1512                           
  1513                           ;nombres.c: 147: { valor = Digit[N][i] ;
  1514  007DFC  C045  F047         	movff	Display@N,??_Display
  1515  007E00  C046  F048         	movff	Display@N+1,??_Display+1
  1516  007E04  90D8               	bcf	status,0,c
  1517  007E06  3647               	rlcf	??_Display,f,c
  1518  007E08  3648               	rlcf	??_Display+1,f,c
  1519  007E0A  90D8               	bcf	status,0,c
  1520  007E0C  3647               	rlcf	??_Display,f,c
  1521  007E0E  3648               	rlcf	??_Display+1,f,c
  1522  007E10  90D8               	bcf	status,0,c
  1523  007E12  3647               	rlcf	??_Display,f,c
  1524  007E14  3648               	rlcf	??_Display+1,f,c
  1525  007E16  0E60               	movlw	low _Digit
  1526  007E18  6E49               	movwf	(??_Display+2)& (0+255),c
  1527  007E1A  0E00               	movlw	high _Digit
  1528  007E1C  6E4A               	movwf	(??_Display+3)& (0+255),c
  1529  007E1E  5047               	movf	??_Display,w,c
  1530  007E20  2649               	addwf	??_Display+2,f,c
  1531  007E22  5048               	movf	??_Display+1,w,c
  1532  007E24  224A               	addwfc	??_Display+3,f,c
  1533  007E26  504E               	movf	Display@i,w,c
  1534  007E28  2449               	addwf	??_Display+2,w,c
  1535  007E2A  6ED9               	movwf	fsr2l,c
  1536  007E2C  504F               	movf	Display@i+1,w,c
  1537  007E2E  204A               	addwfc	??_Display+3,w,c
  1538  007E30  6EDA               	movwf	fsr2h,c
  1539  007E32  50DF               	movf	indf2,w,c
  1540  007E34  6E4B               	movwf	(??_Display+4)& (0+255),c
  1541  007E36  504B               	movf	??_Display+4,w,c
  1542  007E38  6E4C               	movwf	Display@valor,c
  1543  007E3A  6A4D               	clrf	Display@valor+1,c
  1544                           
  1545                           ;nombres.c: 148: LATBbits.LATB0=Digit[N][0];
  1546  007E3C  C045  F047         	movff	Display@N,??_Display
  1547  007E40  C046  F048         	movff	Display@N+1,??_Display+1
  1548  007E44  90D8               	bcf	status,0,c
  1549  007E46  3647               	rlcf	??_Display,f,c
  1550  007E48  3648               	rlcf	??_Display+1,f,c
  1551  007E4A  90D8               	bcf	status,0,c
  1552  007E4C  3647               	rlcf	??_Display,f,c
  1553  007E4E  3648               	rlcf	??_Display+1,f,c
  1554  007E50  90D8               	bcf	status,0,c
  1555  007E52  3647               	rlcf	??_Display,f,c
  1556  007E54  3648               	rlcf	??_Display+1,f,c
  1557  007E56  0E60               	movlw	low _Digit
  1558  007E58  2447               	addwf	??_Display,w,c
  1559  007E5A  6ED9               	movwf	fsr2l,c
  1560  007E5C  0E00               	movlw	high _Digit
  1561  007E5E  2048               	addwfc	??_Display+1,w,c
  1562  007E60  6EDA               	movwf	fsr2h,c
  1563  007E62  50DF               	movf	indf2,w,c
  1564  007E64  6E49               	movwf	(??_Display+2)& (0+255),c
  1565  007E66  508A               	movf	3978,w,c	;volatile
  1566  007E68  1849               	xorwf	??_Display+2,w,c
  1567  007E6A  0BFE               	andlw	-2
  1568  007E6C  1849               	xorwf	??_Display+2,w,c
  1569  007E6E  6E8A               	movwf	3978,c	;volatile
  1570                           
  1571                           ;nombres.c: 149: LATBbits.LATB1=Digit[N][1];
  1572  007E70  C045  F047         	movff	Display@N,??_Display
  1573  007E74  C046  F048         	movff	Display@N+1,??_Display+1
  1574  007E78  90D8               	bcf	status,0,c
  1575  007E7A  3647               	rlcf	??_Display,f,c
  1576  007E7C  3648               	rlcf	??_Display+1,f,c
  1577  007E7E  90D8               	bcf	status,0,c
  1578  007E80  3647               	rlcf	??_Display,f,c
  1579  007E82  3648               	rlcf	??_Display+1,f,c
  1580  007E84  90D8               	bcf	status,0,c
  1581  007E86  3647               	rlcf	??_Display,f,c
  1582  007E88  3648               	rlcf	??_Display+1,f,c
  1583  007E8A  0E01               	movlw	1
  1584  007E8C  2647               	addwf	??_Display,f,c
  1585  007E8E  0E00               	movlw	0
  1586  007E90  2248               	addwfc	??_Display+1,f,c
  1587  007E92  0E60               	movlw	low _Digit
  1588  007E94  2447               	addwf	??_Display,w,c
  1589  007E96  6ED9               	movwf	fsr2l,c
  1590  007E98  0E00               	movlw	high _Digit
  1591  007E9A  2048               	addwfc	??_Display+1,w,c
  1592  007E9C  6EDA               	movwf	fsr2h,c
  1593  007E9E  50DF               	movf	indf2,w,c
  1594  007EA0  6E49               	movwf	(??_Display+2)& (0+255),c
  1595  007EA2  4649               	rlncf	??_Display+2,f,c
  1596  007EA4  508A               	movf	3978,w,c	;volatile
  1597  007EA6  1849               	xorwf	??_Display+2,w,c
  1598  007EA8  0BFD               	andlw	-3
  1599  007EAA  1849               	xorwf	??_Display+2,w,c
  1600  007EAC  6E8A               	movwf	3978,c	;volatile
  1601                           
  1602                           ;nombres.c: 150: LATBbits.LATB2=Digit[N][2];
  1603  007EAE  C045  F047         	movff	Display@N,??_Display
  1604  007EB2  C046  F048         	movff	Display@N+1,??_Display+1
  1605  007EB6  90D8               	bcf	status,0,c
  1606  007EB8  3647               	rlcf	??_Display,f,c
  1607  007EBA  3648               	rlcf	??_Display+1,f,c
  1608  007EBC  90D8               	bcf	status,0,c
  1609  007EBE  3647               	rlcf	??_Display,f,c
  1610  007EC0  3648               	rlcf	??_Display+1,f,c
  1611  007EC2  90D8               	bcf	status,0,c
  1612  007EC4  3647               	rlcf	??_Display,f,c
  1613  007EC6  3648               	rlcf	??_Display+1,f,c
  1614  007EC8  0E02               	movlw	2
  1615  007ECA  2647               	addwf	??_Display,f,c
  1616  007ECC  0E00               	movlw	0
  1617  007ECE  2248               	addwfc	??_Display+1,f,c
  1618  007ED0  0E60               	movlw	low _Digit
  1619  007ED2  2447               	addwf	??_Display,w,c
  1620  007ED4  6ED9               	movwf	fsr2l,c
  1621  007ED6  0E00               	movlw	high _Digit
  1622  007ED8  2048               	addwfc	??_Display+1,w,c
  1623  007EDA  6EDA               	movwf	fsr2h,c
  1624  007EDC  50DF               	movf	indf2,w,c
  1625  007EDE  6E49               	movwf	(??_Display+2)& (0+255),c
  1626  007EE0  4649               	rlncf	??_Display+2,f,c
  1627  007EE2  4649               	rlncf	??_Display+2,f,c
  1628  007EE4  508A               	movf	3978,w,c	;volatile
  1629  007EE6  1849               	xorwf	??_Display+2,w,c
  1630  007EE8  0BFB               	andlw	-5
  1631  007EEA  1849               	xorwf	??_Display+2,w,c
  1632  007EEC  6E8A               	movwf	3978,c	;volatile
  1633                           
  1634                           ;nombres.c: 151: LATBbits.LATB3=Digit[N][3];
  1635  007EEE  C045  F047         	movff	Display@N,??_Display
  1636  007EF2  C046  F048         	movff	Display@N+1,??_Display+1
  1637  007EF6  90D8               	bcf	status,0,c
  1638  007EF8  3647               	rlcf	??_Display,f,c
  1639  007EFA  3648               	rlcf	??_Display+1,f,c
  1640  007EFC  90D8               	bcf	status,0,c
  1641  007EFE  3647               	rlcf	??_Display,f,c
  1642  007F00  3648               	rlcf	??_Display+1,f,c
  1643  007F02  90D8               	bcf	status,0,c
  1644  007F04  3647               	rlcf	??_Display,f,c
  1645  007F06  3648               	rlcf	??_Display+1,f,c
  1646  007F08  0E03               	movlw	3
  1647  007F0A  2647               	addwf	??_Display,f,c
  1648  007F0C  0E00               	movlw	0
  1649  007F0E  2248               	addwfc	??_Display+1,f,c
  1650  007F10  0E60               	movlw	low _Digit
  1651  007F12  2447               	addwf	??_Display,w,c
  1652  007F14  6ED9               	movwf	fsr2l,c
  1653  007F16  0E00               	movlw	high _Digit
  1654  007F18  2048               	addwfc	??_Display+1,w,c
  1655  007F1A  6EDA               	movwf	fsr2h,c
  1656  007F1C  50DF               	movf	indf2,w,c
  1657  007F1E  6E49               	movwf	(??_Display+2)& (0+255),c
  1658  007F20  4649               	rlncf	??_Display+2,f,c
  1659  007F22  4649               	rlncf	??_Display+2,f,c
  1660  007F24  4649               	rlncf	??_Display+2,f,c
  1661  007F26  508A               	movf	3978,w,c	;volatile
  1662  007F28  1849               	xorwf	??_Display+2,w,c
  1663  007F2A  0BF7               	andlw	-9
  1664  007F2C  1849               	xorwf	??_Display+2,w,c
  1665  007F2E  6E8A               	movwf	3978,c	;volatile
  1666                           
  1667                           ;nombres.c: 152: LATBbits.LATB4=Digit[N][4];
  1668  007F30  C045  F047         	movff	Display@N,??_Display
  1669  007F34  C046  F048         	movff	Display@N+1,??_Display+1
  1670  007F38  90D8               	bcf	status,0,c
  1671  007F3A  3647               	rlcf	??_Display,f,c
  1672  007F3C  3648               	rlcf	??_Display+1,f,c
  1673  007F3E  90D8               	bcf	status,0,c
  1674  007F40  3647               	rlcf	??_Display,f,c
  1675  007F42  3648               	rlcf	??_Display+1,f,c
  1676  007F44  90D8               	bcf	status,0,c
  1677  007F46  3647               	rlcf	??_Display,f,c
  1678  007F48  3648               	rlcf	??_Display+1,f,c
  1679  007F4A  0E04               	movlw	4
  1680  007F4C  2647               	addwf	??_Display,f,c
  1681  007F4E  0E00               	movlw	0
  1682  007F50  2248               	addwfc	??_Display+1,f,c
  1683  007F52  0E60               	movlw	low _Digit
  1684  007F54  2447               	addwf	??_Display,w,c
  1685  007F56  6ED9               	movwf	fsr2l,c
  1686  007F58  0E00               	movlw	high _Digit
  1687  007F5A  2048               	addwfc	??_Display+1,w,c
  1688  007F5C  6EDA               	movwf	fsr2h,c
  1689  007F5E  50DF               	movf	indf2,w,c
  1690  007F60  6E49               	movwf	(??_Display+2)& (0+255),c
  1691  007F62  3A49               	swapf	??_Display+2,f,c
  1692  007F64  508A               	movf	3978,w,c	;volatile
  1693  007F66  1849               	xorwf	??_Display+2,w,c
  1694  007F68  0BEF               	andlw	-17
  1695  007F6A  1849               	xorwf	??_Display+2,w,c
  1696  007F6C  6E8A               	movwf	3978,c	;volatile
  1697                           
  1698                           ;nombres.c: 153: LATBbits.LATB5=Digit[N][5];
  1699  007F6E  C045  F047         	movff	Display@N,??_Display
  1700  007F72  C046  F048         	movff	Display@N+1,??_Display+1
  1701  007F76  90D8               	bcf	status,0,c
  1702  007F78  3647               	rlcf	??_Display,f,c
  1703  007F7A  3648               	rlcf	??_Display+1,f,c
  1704  007F7C  90D8               	bcf	status,0,c
  1705  007F7E  3647               	rlcf	??_Display,f,c
  1706  007F80  3648               	rlcf	??_Display+1,f,c
  1707  007F82  90D8               	bcf	status,0,c
  1708  007F84  3647               	rlcf	??_Display,f,c
  1709  007F86  3648               	rlcf	??_Display+1,f,c
  1710  007F88  0E05               	movlw	5
  1711  007F8A  2647               	addwf	??_Display,f,c
  1712  007F8C  0E00               	movlw	0
  1713  007F8E  2248               	addwfc	??_Display+1,f,c
  1714  007F90  0E60               	movlw	low _Digit
  1715  007F92  2447               	addwf	??_Display,w,c
  1716  007F94  6ED9               	movwf	fsr2l,c
  1717  007F96  0E00               	movlw	high _Digit
  1718  007F98  2048               	addwfc	??_Display+1,w,c
  1719  007F9A  6EDA               	movwf	fsr2h,c
  1720  007F9C  50DF               	movf	indf2,w,c
  1721  007F9E  6E49               	movwf	(??_Display+2)& (0+255),c
  1722  007FA0  3A49               	swapf	??_Display+2,f,c
  1723  007FA2  4649               	rlncf	??_Display+2,f,c
  1724  007FA4  508A               	movf	3978,w,c	;volatile
  1725  007FA6  1849               	xorwf	??_Display+2,w,c
  1726  007FA8  0BDF               	andlw	-33
  1727  007FAA  1849               	xorwf	??_Display+2,w,c
  1728  007FAC  6E8A               	movwf	3978,c	;volatile
  1729                           
  1730                           ;nombres.c: 154: LATBbits.LATB6=Digit[N][6];
  1731  007FAE  C045  F047         	movff	Display@N,??_Display
  1732  007FB2  C046  F048         	movff	Display@N+1,??_Display+1
  1733  007FB6  90D8               	bcf	status,0,c
  1734  007FB8  3647               	rlcf	??_Display,f,c
  1735  007FBA  3648               	rlcf	??_Display+1,f,c
  1736  007FBC  90D8               	bcf	status,0,c
  1737  007FBE  3647               	rlcf	??_Display,f,c
  1738  007FC0  3648               	rlcf	??_Display+1,f,c
  1739  007FC2  90D8               	bcf	status,0,c
  1740  007FC4  3647               	rlcf	??_Display,f,c
  1741  007FC6  3648               	rlcf	??_Display+1,f,c
  1742  007FC8  0E06               	movlw	6
  1743  007FCA  2647               	addwf	??_Display,f,c
  1744  007FCC  0E00               	movlw	0
  1745  007FCE  2248               	addwfc	??_Display+1,f,c
  1746  007FD0  0E60               	movlw	low _Digit
  1747  007FD2  2447               	addwf	??_Display,w,c
  1748  007FD4  6ED9               	movwf	fsr2l,c
  1749  007FD6  0E00               	movlw	high _Digit
  1750  007FD8  2048               	addwfc	??_Display+1,w,c
  1751  007FDA  6EDA               	movwf	fsr2h,c
  1752  007FDC  50DF               	movf	indf2,w,c
  1753  007FDE  6E49               	movwf	(??_Display+2)& (0+255),c
  1754  007FE0  3A49               	swapf	??_Display+2,f,c
  1755  007FE2  4649               	rlncf	??_Display+2,f,c
  1756  007FE4  4649               	rlncf	??_Display+2,f,c
  1757  007FE6  508A               	movf	3978,w,c	;volatile
  1758  007FE8  1849               	xorwf	??_Display+2,w,c
  1759  007FEA  0BBF               	andlw	-65
  1760  007FEC  1849               	xorwf	??_Display+2,w,c
  1761  007FEE  6E8A               	movwf	3978,c	;volatile
  1762  007FF0  4A4E               	infsnz	Display@i,f,c
  1763  007FF2  2A4F               	incf	Display@i+1,f,c
  1764  007FF4  BE4F               	btfsc	Display@i+1,7,c
  1765  007FF6  D702               	goto	l78
  1766  007FF8  504F               	movf	Display@i+1,w,c
  1767  007FFA  E101               	bnz	l80
  1768  007FFC  D6F9               	goto	L2
  1769  007FFE                     l80:
  1770  007FFE  0012               	return		;funcret
  1771  008000                     __end_of_Display:
  1772                           	opt stack 0
  1773  0000                     tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8
  1801                           
  1802                           	psect	rparam
  1803  0000                     tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           postdec2	equ	0xFDD
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        210
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      86
    BANK0           160      0     142
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 16
		 -> b4(BANK0[16]), b3(COMRAM[13]), b2(BANK0[15]), b1(BANK0[16]), 
		 -> p4(BANK0[15]), p3(COMRAM[14]), p2(COMRAM[13]), p1(COMRAM[12]), 

    b	PTR unsigned char [4] size(2) Largest target is 16
		 -> b4(BANK0[16]), b3(COMRAM[13]), b2(BANK0[15]), b1(BANK0[16]), 

    p	PTR unsigned char [4] size(2) Largest target is 15
		 -> p4(BANK0[15]), p3(COMRAM[14]), p2(COMRAM[13]), p1(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_Display
    _lcd_init->_lcd_cmd
    _IncrementaPersona->_lcd_msg
    _lcd_msg->_lcd_dwr
    _lcd_lat->_delay
    _IncrementaNumero->_Display

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2745
                                             11 COMRAM     3     3      0
                            _Display
                   _IncrementaNumero
                  _IncrementaPersona
                            _lcd_cmd
                           _lcd_init
                            _lcd_msg
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     402
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     190
                                              6 COMRAM     1     1      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (1) _IncrementaPersona                                    0     0      0     773
                            _lcd_cmd
                            _lcd_msg
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     561
                                              8 COMRAM     2     0      2
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (2) _lcd_dwr                                              2     2      0     212
                                              6 COMRAM     2     2      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     212
                                              6 COMRAM     2     2      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (3) _lcd_lat                                              0     0      0     168
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                6     4      2     168
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _IncrementaNumero                                     0     0      0     397
                            _Display
 ---------------------------------------------------------------------------------
 (2) _Display                                             11     9      2     397
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display
   _IncrementaNumero
     _Display
   _IncrementaPersona
     _lcd_cmd
       _lcd_lat
         _delay
     _lcd_msg
       _lcd_dwr
         _lcd_lat
           _delay
   _lcd_cmd
     _lcd_lat
       _delay
   _lcd_init
     _lcd_cmd
       _lcd_lat
         _delay
     _lcd_cmd_hf
       _lcd_lat
         _delay
   _lcd_msg
     _lcd_dwr
       _lcd_lat
         _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      56       1       90.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4      20        0.0%
DATA                 0      0      E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Dec 18 02:38:33 2017

                         _b 0001                           _p 0009                 lcd_cmd_hf@x 004B  
                        l61 7D98                          l70 7C9E                          l62 7DB6  
                        l80 7FFE                          l64 7DC4                          l74 7AF0  
                        l78 7DFC                          l95 7ABE                          l96 7AAC  
                        _b1 00C0                          _b2 00D0                          _b3 001F  
                        _b4 00B0                          _p1 0039                          _p2 002C  
                        _p3 0011                          _p4 00DF  __size_of_IncrementaPersona 0062  
                       l101 7BA0                         l102 7B7E                         l103 7B96  
                       l887 7B9C                         l879 7B86                         u120 7B9C  
                       u150 7DFA                         u217 7D5A                         u227 7D9E  
                       u237 7DD2                         wreg 000FE8                        _cont 0055  
                      _main 7D30                        fsr2h 000FDA                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        start 0000  
           __end_of_Display 8000                ___param_bank 000000                       ?_main 0045  
                     _PORTD 000F83                       _TRISB 000F93                       _TRISD 000F95  
                     _Digit 0060             __end_of_lcd_cmd 7B1E             __end_of_lcd_lat 7A96  
           __end_of_lcd_dwr 7B48             __end_of_lcd_msg 7ACE                       _delay 7B74  
                     _contN 0053                       tablat 000FF5                       status 000FD8  
           __initialization 7BF2                __end_of_main 7DE0                      ??_main 0050  
             __activetblptr 000000                      ?_delay 0045                   ??_Display 0047  
          __end_of_lcd_init 7B74                      delay@i 0047                      delay@j 0049  
 __size_of_IncrementaNumero 0026                   ??_lcd_cmd 004B                   ??_lcd_lat 004B  
                 ??_lcd_dwr 004B                   ??_lcd_msg 004F                __pdataCOMRAM 0001  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0060     __end_of__initialization 7C3A               ___rparam_used 000001  
            __pcstackCOMRAM 0045                __pidataBANK0 7CA2               __end_of_delay 7BAE  
                   ??_delay 0047                  _lcd_cmd_hf 7A96                   ?_lcd_init 0045  
                   _Display 7DE0                     __Hparam 0000                     __Lparam 0000  
          _IncrementaNumero 7ACE                     __pcinit 7BF2                     __ramtop 0800  
                   __ptext0 7D30                     __ptext1 7B48                     __ptext2 7A96  
                   __ptext3 7C40                     __ptext4 7AAA                     __ptext5 7B1E  
                   __ptext6 7AF4                     __ptext7 7A84                     __ptext8 7B74  
                   __ptext9 7ACE                     _lcd_cmd 7AF4                     _lcd_lat 7A84  
                   _lcd_dwr 7B1E                     _lcd_msg 7AAA                     delay@ms 0045  
                ??_lcd_init 004D        end_of_initialization 7C3A                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTCbits 000F82                   _PORTDbits 000F83                 ?_lcd_cmd_hf 0045  
                 _TRISCbits 000F94               __pidataCOMRAM 7BAE         start_initialization 7BF2  
       __size_of_lcd_cmd_hf 0014                 __pdataBANK0 0060                 __pbssCOMRAM 0053  
  __end_of_IncrementaNumero 7AF4           __size_of_lcd_init 002C                    ?_Display 0045  
                  ?_lcd_cmd 0045                    ?_lcd_lat 0045                    ?_lcd_dwr 0045  
                  ?_lcd_msg 004D              __size_of_delay 003A                    _LATBbits 000F8A  
                  Display@N 0045                    Display@i 004E                ??_lcd_cmd_hf 004B  
                 main@boton 0052                   copy_data0 7C06                   copy_data1 7C26  
          __size_of_Display 0220                    __Hrparam 0000                    __Lrparam 0000  
        __end_of_lcd_cmd_hf 7AAA           _IncrementaPersona 7C40            __size_of_lcd_cmd 002A  
          __size_of_lcd_lat 0012            __size_of_lcd_dwr 002A            __size_of_lcd_msg 0024  
        ?_IncrementaPersona 0045                    __ptext10 7DE0                    _lcd_init 7B48  
       ??_IncrementaPersona 004F               __size_of_main 00B0                    lcd_cmd@x 004C  
                  lcd_dwr@x 004C                    lcd_msg@c 004D   __end_of_IncrementaPersona 7CA2  
         ?_IncrementaNumero 0045          ??_IncrementaNumero 0050                Display@valor 004C  
