

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Mar  3 00:15:18 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.44
    18                           ; Generated 14/09/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F45K50 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	smallconst
    53  000800                     __psmallconst:
    54                           	opt stack 0
    55  000800  00                 	db	0
    56  000801                     _KEYS:
    57                           	opt stack 0
    58  000801  31                 	db	49
    59  000802  32                 	db	50
    60  000803  33                 	db	51
    61  000804  41                 	db	65
    62  000805  34                 	db	52
    63  000806  35                 	db	53
    64  000807  36                 	db	54
    65  000808  42                 	db	66
    66  000809  37                 	db	55
    67  00080A  38                 	db	56
    68  00080B  39                 	db	57
    69  00080C  43                 	db	67
    70  00080D  2A                 	db	42
    71  00080E  30                 	db	48
    72  00080F  23                 	db	35
    73  000810  44                 	db	68
    74  000811                     __end_of_KEYS:
    75                           	opt stack 0
    76  0000                     _ANSELA	set	3931
    77  0000                     _PORTB	set	3969
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _TRISCbits	set	3988
    81  0000                     _TRISDbits	set	3989
    82  0000                     _PORTA	set	3968
    83                           
    84                           ; #config settings
    85  000811  00                 	db	0	; dummy byte at the end
    86  0000                     
    87                           	psect	cinit
    88  000A5C                     __pcinit:
    89                           	opt stack 0
    90  000A5C                     start_initialization:
    91                           	opt stack 0
    92  000A5C                     __initialization:
    93                           	opt stack 0
    94  000A5C                     end_of_initialization:
    95                           	opt stack 0
    96  000A5C                     __end_of__initialization:
    97                           	opt stack 0
    98  000A5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  000A5E  6EF8               	movwf	tblptru,c
   100  000A60  0100               	movlb	0
   101  000A62  EFA1  F004         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           
   104                           	psect	cstackCOMRAM
   105  000001                     __pcstackCOMRAM:
   106                           	opt stack 0
   107  000001                     display@valor:
   108                           	opt stack 0
   109  000001                     rota@display:
   110                           	opt stack 0
   111  000001                     ui8_TestKeyPad@k:
   112                           	opt stack 0
   113                           
   114                           ; 1 bytes @ 0x0
   115  000001                     	ds	1
   116  000002                     kbd_getc@kchar:
   117                           	opt stack 0
   118                           
   119                           ; 1 bytes @ 0x1
   120  000002                     	ds	1
   121  000003                     kbd_getc@temp:
   122                           	opt stack 0
   123                           
   124                           ; 1 bytes @ 0x2
   125  000003                     	ds	1
   126  000004                     ??_main:
   127                           
   128                           ; 1 bytes @ 0x3
   129  000004                     	ds	1
   130  000005                     main@vtecla:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x4
   134  000005                     	ds	1
   135  000006                     main@tecla:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0x5
   139  000006                     	ds	1
   140  000007                     main@i:
   141                           	opt stack 0
   142                           
   143                           ; 1 bytes @ 0x6
   144  000007                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           
   147 ;;
   148 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   149 ;;
   150 ;; *************** function _main *****************
   151 ;; Defined at:
   152 ;;		line 60 in file "Teclado_2.c"
   153 ;; Parameters:    Size  Location     Type
   154 ;;		None
   155 ;; Auto vars:     Size  Location     Type
   156 ;;  i               1    6[COMRAM] unsigned char 
   157 ;;  tecla           1    5[COMRAM] unsigned char 
   158 ;;  vtecla          1    4[COMRAM] unsigned char 
   159 ;; Return value:  Size  Location     Type
   160 ;;                  1    wreg      void 
   161 ;; Registers used:
   162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   163 ;; Tracked objects:
   164 ;;		On entry : 0/0
   165 ;;		On exit  : 0/0
   166 ;;		Unchanged: 0/0
   167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   168 ;;      Params:         0       0       0       0       0       0       0       0       0
   169 ;;      Locals:         3       0       0       0       0       0       0       0       0
   170 ;;      Temps:          1       0       0       0       0       0       0       0       0
   171 ;;      Totals:         4       0       0       0       0       0       0       0       0
   172 ;;Total ram usage:        4 bytes
   173 ;; Hardware stack levels required when called:    2
   174 ;; This function calls:
   175 ;;		_display
   176 ;;		_kbd_getc
   177 ;;		_rota
   178 ;;		_vInitKeyPad
   179 ;; This function is called by:
   180 ;;		Startup code after reset
   181 ;; This function uses a non-reentrant model
   182 ;;
   183                           
   184                           	psect	text0
   185  000942                     __ptext0:
   186                           	opt stack 0
   187  000942                     _main:
   188                           	opt stack 29
   189                           
   190                           ;Teclado_2.c: 62: unsigned char tecla, vtecla,i;
   191                           ;Teclado_2.c: 65: ANSELA = 0x00;
   192                           
   193                           ;incstack = 0
   194  000942  0E00               	movlw	0
   195  000944  010F               	movlb	15	; () banked
   196  000946  6F5B               	movwf	91,b	;volatile
   197                           
   198                           ; BSR set to: 15
   199                           ;Teclado_2.c: 67: vInitKeyPad();
   200  000948  EC25  F005         	call	_vInitKeyPad	;wreg free
   201                           
   202                           ;Teclado_2.c: 70: (*(&(*(&PORTA + 0x12))) &=~ (1<<(2)));
   203  00094C  9492               	bcf	3986,2,c	;volatile
   204                           
   205                           ;Teclado_2.c: 71: (*(&(*(&PORTA + 0x12))) &=~ (1<<(3)));
   206  00094E  9692               	bcf	3986,3,c	;volatile
   207                           
   208                           ;Teclado_2.c: 72: (*(&(*(&PORTA + 0x12))) &=~ (1<<(4)));
   209  000950  9892               	bcf	3986,4,c	;volatile
   210                           
   211                           ;Teclado_2.c: 73: (*(&(*(&PORTA + 0x12))) &=~ (1<<(5)));
   212  000952  9A92               	bcf	3986,5,c	;volatile
   213                           
   214                           ;Teclado_2.c: 75: TRISDbits.TRISD1 = 0;
   215  000954  9295               	bcf	3989,1,c	;volatile
   216                           
   217                           ;Teclado_2.c: 76: TRISCbits.TRISC1 = 0;
   218  000956  9294               	bcf	3988,1,c	;volatile
   219                           
   220                           ;Teclado_2.c: 77: TRISCbits.TRISC2 = 0;
   221  000958  9494               	bcf	3988,2,c	;volatile
   222                           
   223                           ;Teclado_2.c: 78: TRISDbits.TRISD0 = 0;
   224  00095A  9095               	bcf	3989,0,c	;volatile
   225                           
   226                           ;Teclado_2.c: 79: TRISDbits.TRISD2 = 0;
   227  00095C  9495               	bcf	3989,2,c	;volatile
   228                           
   229                           ;Teclado_2.c: 80: TRISDbits.TRISD3 = 0;
   230  00095E  9695               	bcf	3989,3,c	;volatile
   231                           
   232                           ;Teclado_2.c: 81: TRISCbits.TRISC6 = 0;
   233  000960  9C94               	bcf	3988,6,c	;volatile
   234                           
   235                           ;Teclado_2.c: 82: TRISCbits.TRISC7 = 0;
   236  000962  9E94               	bcf	3988,7,c	;volatile
   237  000964                     
   238                           ;Teclado_2.c: 86: tecla = kbd_getc();
   239  000964  EC5B  F004         	call	_kbd_getc	;wreg free
   240  000968  6E06               	movwf	main@tecla,c
   241                           
   242                           ;Teclado_2.c: 87: if (vtecla != tecla) {
   243  00096A  5006               	movf	main@tecla,w,c
   244  00096C  1805               	xorwf	main@vtecla,w,c
   245  00096E  B4D8               	btfsc	status,2,c
   246  000970  D003               	goto	l28
   247                           
   248                           ;Teclado_2.c: 88: display(tecla);
   249  000972  5006               	movf	main@tecla,w,c
   250  000974  ECD2  F004         	call	_display
   251  000978                     l28:
   252                           
   253                           ;Teclado_2.c: 89: }
   254                           ;Teclado_2.c: 90: for ( i = 0; i < 5; i++) {
   255  000978  0E00               	movlw	0
   256  00097A  6E07               	movwf	main@i,c
   257  00097C                     l901:
   258  00097C  0E04               	movlw	4
   259  00097E  6407               	cpfsgt	main@i,c
   260  000980  D001               	goto	l29
   261  000982  D00D               	goto	u250
   262  000984                     l29:
   263                           
   264                           ;Teclado_2.c: 91: rota(i);
   265  000984  5007               	movf	main@i,w,c
   266  000986  ECFC  F004         	call	_rota
   267                           
   268                           ;Teclado_2.c: 92: _delay((unsigned long)((5)*(4000000/4000.0)));
   269  00098A  0E07               	movlw	7
   270  00098C  6E04               	movwf	??_main& (0+255),c
   271  00098E  0E7D               	movlw	125
   272  000990                     u267:
   273  000990  2EE8               	decfsz	wreg,f,c
   274  000992  D7FE               	bra	u267
   275  000994  2E04               	decfsz	??_main& (0+255),f,c
   276  000996  D7FC               	bra	u267
   277  000998  F000               	nop	
   278  00099A  2A07               	incf	main@i,f,c
   279  00099C  D7EF               	goto	l901
   280  00099E                     u250:
   281                           
   282                           ;Teclado_2.c: 93: }
   283                           ;Teclado_2.c: 94: vtecla = tecla;
   284  00099E  C006  F005         	movff	main@tecla,main@vtecla
   285  0009A2  D7E0               	goto	l27
   286  0009A4                     __end_of_main:
   287                           	opt stack 0
   288                           tblptru	equ	0xFF8
   289                           wreg	equ	0xFE8
   290                           status	equ	0xFD8
   291                           
   292 ;; *************** function _vInitKeyPad *****************
   293 ;; Defined at:
   294 ;;		line 35 in file "../MyLibs/keyb.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		status,2, status,0
   303 ;; Tracked objects:
   304 ;;		On entry : 0/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   308 ;;      Params:         0       0       0       0       0       0       0       0       0
   309 ;;      Locals:         0       0       0       0       0       0       0       0       0
   310 ;;      Temps:          0       0       0       0       0       0       0       0       0
   311 ;;      Totals:         0       0       0       0       0       0       0       0       0
   312 ;;Total ram usage:        0 bytes
   313 ;; Hardware stack levels used:    1
   314 ;; This function calls:
   315 ;;		Nothing
   316 ;; This function is called by:
   317 ;;		_main
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text1
   322  000A4A                     __ptext1:
   323                           	opt stack 0
   324  000A4A                     _vInitKeyPad:
   325                           	opt stack 30
   326                           
   327                           ;keyb.c: 38: (*(&(*(&PORTB + 0x12))) |= (1<<(4)));
   328                           
   329                           ;incstack = 0
   330  000A4A  8893               	bsf	3987,4,c	;volatile
   331                           
   332                           ;keyb.c: 39: (*(&(*(&PORTB + 0x12))) |= (1<<(5)));
   333  000A4C  8A93               	bsf	3987,5,c	;volatile
   334                           
   335                           ;keyb.c: 40: (*(&(*(&PORTB + 0x12))) |= (1<<(6)));
   336  000A4E  8C93               	bsf	3987,6,c	;volatile
   337                           
   338                           ;keyb.c: 41: (*(&(*(&PORTB + 0x12))) |= (1<<(7)));
   339  000A50  8E93               	bsf	3987,7,c	;volatile
   340                           
   341                           ;keyb.c: 43: (*(&(*(&PORTB + 0x12))) &=~ (1<<(0)));
   342  000A52  9093               	bcf	3987,0,c	;volatile
   343                           
   344                           ;keyb.c: 44: (*(&(*(&PORTB + 0x12))) &=~ (1<<(1)));
   345  000A54  9293               	bcf	3987,1,c	;volatile
   346                           
   347                           ;keyb.c: 45: (*(&(*(&PORTB + 0x12))) &=~ (1<<(2)));
   348  000A56  9493               	bcf	3987,2,c	;volatile
   349                           
   350                           ;keyb.c: 46: (*(&(*(&PORTB + 0x12))) &=~ (1<<(3)));
   351  000A58  9693               	bcf	3987,3,c	;volatile
   352  000A5A  0012               	return		;funcret
   353  000A5C                     __end_of_vInitKeyPad:
   354                           	opt stack 0
   355                           tblptru	equ	0xFF8
   356                           wreg	equ	0xFE8
   357                           status	equ	0xFD8
   358                           
   359 ;; *************** function _rota *****************
   360 ;; Defined at:
   361 ;;		line 125 in file "Teclado_2.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;  display         1    wreg     unsigned char 
   364 ;; Auto vars:     Size  Location     Type
   365 ;;  display         1    0[COMRAM] unsigned char 
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, status,2, status,0
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   375 ;;      Params:         0       0       0       0       0       0       0       0       0
   376 ;;      Locals:         1       0       0       0       0       0       0       0       0
   377 ;;      Temps:          0       0       0       0       0       0       0       0       0
   378 ;;      Totals:         1       0       0       0       0       0       0       0       0
   379 ;;Total ram usage:        1 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; This function calls:
   382 ;;		Nothing
   383 ;; This function is called by:
   384 ;;		_main
   385 ;; This function uses a non-reentrant model
   386 ;;
   387                           
   388                           	psect	text2
   389  0009F8                     __ptext2:
   390                           	opt stack 0
   391  0009F8                     _rota:
   392                           	opt stack 30
   393                           
   394                           ;incstack = 0
   395                           ;rota@display stored from wreg
   396  0009F8  6E01               	movwf	rota@display,c
   397                           
   398                           ;Teclado_2.c: 127: switch (display) {
   399  0009FA  D019               	goto	l55
   400  0009FC                     
   401                           ;Teclado_2.c: 129: (*(&(*(&PORTA + 0x09))) |= (1<<(2)));
   402  0009FC  8489               	bsf	3977,2,c	;volatile
   403                           
   404                           ;Teclado_2.c: 130: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   405  0009FE  9689               	bcf	3977,3,c	;volatile
   406                           
   407                           ;Teclado_2.c: 131: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   408  000A00  9889               	bcf	3977,4,c	;volatile
   409                           
   410                           ;Teclado_2.c: 132: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   411  000A02  9A89               	bcf	3977,5,c	;volatile
   412                           
   413                           ;Teclado_2.c: 133: break;
   414  000A04  0012               	return	
   415  000A06                     
   416                           ;Teclado_2.c: 135: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   417  000A06  9489               	bcf	3977,2,c	;volatile
   418                           
   419                           ;Teclado_2.c: 136: (*(&(*(&PORTA + 0x09))) |= (1<<(3)));
   420  000A08  8689               	bsf	3977,3,c	;volatile
   421                           
   422                           ;Teclado_2.c: 137: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   423  000A0A  9889               	bcf	3977,4,c	;volatile
   424                           
   425                           ;Teclado_2.c: 138: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   426  000A0C  9A89               	bcf	3977,5,c	;volatile
   427                           
   428                           ;Teclado_2.c: 139: break;
   429  000A0E  0012               	return	
   430  000A10                     
   431                           ;Teclado_2.c: 141: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   432  000A10  9489               	bcf	3977,2,c	;volatile
   433                           
   434                           ;Teclado_2.c: 142: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   435  000A12  9689               	bcf	3977,3,c	;volatile
   436                           
   437                           ;Teclado_2.c: 143: (*(&(*(&PORTA + 0x09))) |= (1<<(4)));
   438  000A14  8889               	bsf	3977,4,c	;volatile
   439                           
   440                           ;Teclado_2.c: 144: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   441  000A16  9A89               	bcf	3977,5,c	;volatile
   442                           
   443                           ;Teclado_2.c: 145: break;
   444  000A18  0012               	return	
   445  000A1A                     
   446                           ;Teclado_2.c: 147: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   447  000A1A  9489               	bcf	3977,2,c	;volatile
   448                           
   449                           ;Teclado_2.c: 148: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   450  000A1C  9689               	bcf	3977,3,c	;volatile
   451                           
   452                           ;Teclado_2.c: 149: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   453  000A1E  9889               	bcf	3977,4,c	;volatile
   454                           
   455                           ;Teclado_2.c: 150: (*(&(*(&PORTA + 0x09))) |= (1<<(5)));
   456  000A20  8A89               	bsf	3977,5,c	;volatile
   457                           
   458                           ;Teclado_2.c: 151: break;
   459  000A22  0012               	return	
   460  000A24                     
   461                           ;Teclado_2.c: 153: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   462  000A24  9489               	bcf	3977,2,c	;volatile
   463                           
   464                           ;Teclado_2.c: 154: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   465  000A26  9689               	bcf	3977,3,c	;volatile
   466                           
   467                           ;Teclado_2.c: 155: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   468  000A28  9889               	bcf	3977,4,c	;volatile
   469                           
   470                           ;Teclado_2.c: 156: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   471  000A2A  9A89               	bcf	3977,5,c	;volatile
   472                           
   473                           ;Teclado_2.c: 157: }
   474  000A2C  0012               	return	
   475  000A2E                     l55:
   476  000A2E  5001               	movf	rota@display,w,c
   477                           
   478                           ; Switch size 1, requested type "space"
   479                           ; Number of cases is 4, Range of values is 0 to 3
   480                           ; switch strategies available:
   481                           ; Name         Instructions Cycles
   482                           ; simple_byte           13     7 (average)
   483                           ;	Chosen strategy is simple_byte
   484  000A30  0A00               	xorlw	0	; case 0
   485  000A32  B4D8               	btfsc	status,2,c
   486  000A34  D7E3               	goto	l56
   487  000A36  0A01               	xorlw	1	; case 1
   488  000A38  B4D8               	btfsc	status,2,c
   489  000A3A  D7E5               	goto	l58
   490  000A3C  0A03               	xorlw	3	; case 2
   491  000A3E  B4D8               	btfsc	status,2,c
   492  000A40  D7E7               	goto	l59
   493  000A42  0A01               	xorlw	1	; case 3
   494  000A44  B4D8               	btfsc	status,2,c
   495  000A46  D7E9               	goto	l60
   496  000A48  D7ED               	goto	l61
   497  000A4A                     __end_of_rota:
   498                           	opt stack 0
   499                           tblptru	equ	0xFF8
   500                           wreg	equ	0xFE8
   501                           status	equ	0xFD8
   502                           
   503 ;; *************** function _kbd_getc *****************
   504 ;; Defined at:
   505 ;;		line 83 in file "../MyLibs/keyb.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  temp            1    2[COMRAM] unsigned char 
   510 ;;  kchar           1    1[COMRAM] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      unsigned char 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   520 ;;      Params:         0       0       0       0       0       0       0       0       0
   521 ;;      Locals:         2       0       0       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0       0       0
   523 ;;      Totals:         2       0       0       0       0       0       0       0       0
   524 ;;Total ram usage:        2 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    1
   527 ;; This function calls:
   528 ;;		_ui8_TestKeyPad
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text3
   535  0008B6                     __ptext3:
   536                           	opt stack 0
   537  0008B6                     _kbd_getc:
   538                           	opt stack 29
   539                           
   540                           ;keyb.c: 85: unsigned char kchar,temp;
   541                           ;keyb.c: 87: temp = ui8_TestKeyPad();
   542                           
   543                           ;incstack = 0
   544  0008B6  EC09  F004         	call	_ui8_TestKeyPad	;wreg free
   545  0008BA  6E03               	movwf	kbd_getc@temp,c
   546                           
   547                           ;keyb.c: 88: if (temp <=3)
   548  0008BC  0E04               	movlw	4
   549  0008BE  6003               	cpfslt	kbd_getc@temp,c
   550  0008C0  D00B               	goto	l74
   551                           
   552                           ;keyb.c: 89: kchar = KEYS[0][temp];
   553  0008C2  5003               	movf	kbd_getc@temp,w,c
   554  0008C4  0D01               	mullw	1
   555  0008C6  0E01               	movlw	low _KEYS
   556  0008C8  24F3               	addwf	prodl,w,c
   557  0008CA  6EF6               	movwf	tblptrl,c
   558  0008CC  0E08               	movlw	high _KEYS
   559  0008CE  20F4               	addwfc	prodh,w,c
   560  0008D0  6EF7               	movwf	tblptrh,c
   561  0008D2                     	if	0	;There are less than 3 active tblptr bytes
   562  0008D2                     	endif
   563  0008D2  0008               	tblrd		*
   564  0008D4  CFF5 F002          	movff	tablat,kbd_getc@kchar
   565  0008D8                     l74:
   566                           
   567                           ;keyb.c: 90: if (temp >=4 || temp <=7)
   568  0008D8  0E04               	movlw	4
   569  0008DA  6003               	cpfslt	kbd_getc@temp,c
   570  0008DC  D003               	goto	u90
   571  0008DE  0E08               	movlw	8
   572  0008E0  6003               	cpfslt	kbd_getc@temp,c
   573  0008E2  D009               	goto	l75
   574  0008E4                     u90:
   575                           
   576                           ;keyb.c: 91: kchar = KEYS[1][temp-4];
   577  0008E4  0E01               	movlw	low _KEYS
   578  0008E6  2403               	addwf	kbd_getc@temp,w,c
   579  0008E8  6EF6               	movwf	tblptrl,c
   580  0008EA  6AF7               	clrf	tblptrh,c
   581  0008EC  0E08               	movlw	high _KEYS
   582  0008EE  22F7               	addwfc	tblptrh,f,c
   583  0008F0                     	if	0	;There are less than 3 active tblptr bytes
   584  0008F0                     	endif
   585  0008F0  0008               	tblrd		*
   586  0008F2  CFF5 F002          	movff	tablat,kbd_getc@kchar
   587  0008F6                     l75:
   588                           
   589                           ;keyb.c: 92: if (temp >=8 || temp <=11)
   590  0008F6  0E08               	movlw	8
   591  0008F8  6003               	cpfslt	kbd_getc@temp,c
   592  0008FA  D003               	goto	u110
   593  0008FC  0E0C               	movlw	12
   594  0008FE  6003               	cpfslt	kbd_getc@temp,c
   595  000900  D009               	goto	l78
   596  000902                     u110:
   597                           
   598                           ;keyb.c: 93: kchar = KEYS[2][temp-8];
   599  000902  0E01               	movlw	low _KEYS
   600  000904  2403               	addwf	kbd_getc@temp,w,c
   601  000906  6EF6               	movwf	tblptrl,c
   602  000908  6AF7               	clrf	tblptrh,c
   603  00090A  0E08               	movlw	high _KEYS
   604  00090C  22F7               	addwfc	tblptrh,f,c
   605  00090E                     	if	0	;There are less than 3 active tblptr bytes
   606  00090E                     	endif
   607  00090E  0008               	tblrd		*
   608  000910  CFF5 F002          	movff	tablat,kbd_getc@kchar
   609  000914                     l78:
   610                           
   611                           ;keyb.c: 94: if (temp >=12 || temp <=15)
   612  000914  0E0C               	movlw	12
   613  000916  6003               	cpfslt	kbd_getc@temp,c
   614  000918  D003               	goto	u130
   615  00091A  0E10               	movlw	16
   616  00091C  6003               	cpfslt	kbd_getc@temp,c
   617  00091E  D009               	goto	l81
   618  000920                     u130:
   619                           
   620                           ;keyb.c: 95: kchar = KEYS[3][temp-12];
   621  000920  0E01               	movlw	low _KEYS
   622  000922  2403               	addwf	kbd_getc@temp,w,c
   623  000924  6EF6               	movwf	tblptrl,c
   624  000926  6AF7               	clrf	tblptrh,c
   625  000928  0E08               	movlw	high _KEYS
   626  00092A  22F7               	addwfc	tblptrh,f,c
   627  00092C                     	if	0	;There are less than 3 active tblptr bytes
   628  00092C                     	endif
   629  00092C  0008               	tblrd		*
   630  00092E  CFF5 F002          	movff	tablat,kbd_getc@kchar
   631  000932                     l81:
   632                           
   633                           ;keyb.c: 96: if(temp == 16)
   634  000932  0E10               	movlw	16
   635  000934  1803               	xorwf	kbd_getc@temp,w,c
   636  000936  A4D8               	btfss	status,2,c
   637  000938  D002               	goto	l84
   638                           
   639                           ;keyb.c: 97: kchar = '\0';
   640  00093A  0E00               	movlw	0
   641  00093C  6E02               	movwf	kbd_getc@kchar,c
   642  00093E                     l84:
   643                           
   644                           ;keyb.c: 98: return kchar;
   645  00093E  5002               	movf	kbd_getc@kchar,w,c
   646  000940  0012               	return	
   647  000942                     __end_of_kbd_getc:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           prodh	equ	0xFF4
   654                           prodl	equ	0xFF3
   655                           wreg	equ	0xFE8
   656                           status	equ	0xFD8
   657                           
   658 ;; *************** function _ui8_TestKeyPad *****************
   659 ;; Defined at:
   660 ;;		line 101 in file "../MyLibs/keyb.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  k               1    0[COMRAM] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      unsigned char 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         0       0       0       0       0       0       0       0       0
   675 ;;      Locals:         1       0       0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0
   677 ;;      Totals:         1       0       0       0       0       0       0       0       0
   678 ;;Total ram usage:        1 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_kbd_getc
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text4
   688  000812                     __ptext4:
   689                           	opt stack 0
   690  000812                     _ui8_TestKeyPad:
   691                           	opt stack 29
   692                           
   693                           ;keyb.c: 103: unsigned char k;
   694                           ;keyb.c: 104: for(k=0;k<16;k++)
   695                           
   696                           ;incstack = 0
   697  000812  0E00               	movlw	0
   698  000814  6E01               	movwf	ui8_TestKeyPad@k,c
   699  000816                     l725:
   700  000816  0E0F               	movlw	15
   701  000818  6401               	cpfsgt	ui8_TestKeyPad@k,c
   702  00081A  D014               	goto	l90
   703  00081C  D046               	goto	u60
   704  00081E  908A               	bcf	3978,0,c	;volatile
   705  000820  D00D               	goto	L5
   706  000822  808A               	bsf	3978,0,c	;volatile
   707  000824  928A               	bcf	3978,1,c	;volatile
   708  000826  D00B               	goto	L4
   709  000828  808A               	bsf	3978,0,c	;volatile
   710  00082A  828A               	bsf	3978,1,c	;volatile
   711  00082C  948A               	bcf	3978,2,c	;volatile
   712  00082E  D008               	goto	L3
   713  000830  808A               	bsf	3978,0,c	;volatile
   714  000832  828A               	bsf	3978,1,c	;volatile
   715  000834  848A               	bsf	3978,2,c	;volatile
   716  000836  968A               	bcf	3978,3,c	;volatile
   717                           
   718                           ;keyb.c: 119: break;
   719  000838  D013               	goto	l92
   720  00083A  808A               	bsf	3978,0,c	;volatile
   721  00083C                     L5:
   722  00083C  828A               	bsf	3978,1,c	;volatile
   723  00083E                     L4:
   724  00083E  848A               	bsf	3978,2,c	;volatile
   725  000840                     L3:
   726  000840  868A               	bsf	3978,3,c	;volatile
   727                           
   728                           ;keyb.c: 121: }
   729  000842  D00E               	goto	l92
   730  000844                     l90:
   731  000844  5001               	movf	ui8_TestKeyPad@k,w,c
   732                           
   733                           ; Switch size 1, requested type "space"
   734                           ; Number of cases is 4, Range of values is 0 to 12
   735                           ; switch strategies available:
   736                           ; Name         Instructions Cycles
   737                           ; simple_byte           13     7 (average)
   738                           ;	Chosen strategy is simple_byte
   739  000846  0A00               	xorlw	0	; case 0
   740  000848  B4D8               	btfsc	status,2,c
   741  00084A  D7E9               	goto	l91
   742  00084C  0A04               	xorlw	4	; case 4
   743  00084E  B4D8               	btfsc	status,2,c
   744  000850  D7E8               	goto	l93
   745  000852  0A0C               	xorlw	12	; case 8
   746  000854  B4D8               	btfsc	status,2,c
   747  000856  D7E8               	goto	l94
   748  000858  0A04               	xorlw	4	; case 12
   749  00085A  B4D8               	btfsc	status,2,c
   750  00085C  D7E9               	goto	l95
   751  00085E  D7ED               	goto	l96
   752  000860                     l92:
   753                           
   754                           ;keyb.c: 124: if (!((PORTB) & (1 << 4)))
   755  000860  B881               	btfsc	3969,4,c	;volatile
   756  000862  D006               	goto	l97
   757                           
   758                           ;keyb.c: 125: {
   759                           ;keyb.c: 128: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   760  000864  808A               	bsf	3978,0,c	;volatile
   761  000866  828A               	bsf	3978,1,c	;volatile
   762  000868  848A               	bsf	3978,2,c	;volatile
   763  00086A  868A               	bsf	3978,3,c	;volatile
   764                           
   765                           ;keyb.c: 129: return k;
   766  00086C  5001               	movf	ui8_TestKeyPad@k,w,c
   767  00086E  0012               	return	
   768  000870                     l97:
   769                           
   770                           ;keyb.c: 130: }
   771                           ;keyb.c: 131: } k++;
   772  000870  2A01               	incf	ui8_TestKeyPad@k,f,c
   773                           
   774                           ;keyb.c: 133: if (!((PORTB) & (1 << 5)))
   775  000872  BA81               	btfsc	3969,5,c	;volatile
   776  000874  D006               	goto	l99
   777                           
   778                           ;keyb.c: 134: {
   779                           ;keyb.c: 137: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   780  000876  808A               	bsf	3978,0,c	;volatile
   781  000878  828A               	bsf	3978,1,c	;volatile
   782  00087A  848A               	bsf	3978,2,c	;volatile
   783  00087C  868A               	bsf	3978,3,c	;volatile
   784                           
   785                           ;keyb.c: 138: return k;
   786  00087E  5001               	movf	ui8_TestKeyPad@k,w,c
   787  000880  0012               	return	
   788  000882                     l99:
   789                           
   790                           ;keyb.c: 139: }
   791                           ;keyb.c: 140: }k++;
   792  000882  2A01               	incf	ui8_TestKeyPad@k,f,c
   793                           
   794                           ;keyb.c: 142: if (!((PORTB) & (1 << 6)))
   795  000884  BC81               	btfsc	3969,6,c	;volatile
   796  000886  D006               	goto	l100
   797                           
   798                           ;keyb.c: 143: {
   799                           ;keyb.c: 146: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   800  000888  808A               	bsf	3978,0,c	;volatile
   801  00088A  828A               	bsf	3978,1,c	;volatile
   802  00088C  848A               	bsf	3978,2,c	;volatile
   803  00088E  868A               	bsf	3978,3,c	;volatile
   804                           
   805                           ;keyb.c: 147: return k;
   806  000890  5001               	movf	ui8_TestKeyPad@k,w,c
   807  000892  0012               	return	
   808  000894                     l100:
   809                           
   810                           ;keyb.c: 148: }
   811                           ;keyb.c: 149: }k++;
   812  000894  2A01               	incf	ui8_TestKeyPad@k,f,c
   813                           
   814                           ;keyb.c: 151: if (!((PORTB) & (1 << 7)))
   815  000896  BE81               	btfsc	3969,7,c	;volatile
   816  000898  D006               	goto	l101
   817                           
   818                           ;keyb.c: 152: {
   819                           ;keyb.c: 155: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   820  00089A  808A               	bsf	3978,0,c	;volatile
   821  00089C  828A               	bsf	3978,1,c	;volatile
   822  00089E  848A               	bsf	3978,2,c	;volatile
   823  0008A0  868A               	bsf	3978,3,c	;volatile
   824                           
   825                           ;keyb.c: 156: return k;
   826  0008A2  5001               	movf	ui8_TestKeyPad@k,w,c
   827  0008A4  0012               	return	
   828  0008A6                     l101:
   829  0008A6  2A01               	incf	ui8_TestKeyPad@k,f,c
   830  0008A8  D7B6               	goto	l725
   831  0008AA                     u60:
   832                           
   833                           ;keyb.c: 157: }
   834                           ;keyb.c: 158: }
   835                           ;keyb.c: 159: }
   836                           ;keyb.c: 160: {(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1))
      +                          ); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   837  0008AA  808A               	bsf	3978,0,c	;volatile
   838  0008AC  828A               	bsf	3978,1,c	;volatile
   839  0008AE  848A               	bsf	3978,2,c	;volatile
   840  0008B0  868A               	bsf	3978,3,c	;volatile
   841                           
   842                           ;keyb.c: 161: return (16);
   843  0008B2  0E10               	movlw	16
   844  0008B4  0012               	return	
   845  0008B6                     __end_of_ui8_TestKeyPad:
   846                           	opt stack 0
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           prodh	equ	0xFF4
   852                           prodl	equ	0xFF3
   853                           wreg	equ	0xFE8
   854                           status	equ	0xFD8
   855                           
   856 ;; *************** function _display *****************
   857 ;; Defined at:
   858 ;;		line 98 in file "Teclado_2.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;  valor           1    wreg     unsigned char 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  valor           1    0[COMRAM] unsigned char 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   872 ;;      Params:         0       0       0       0       0       0       0       0       0
   873 ;;      Locals:         1       0       0       0       0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0       0       0
   875 ;;      Totals:         1       0       0       0       0       0       0       0       0
   876 ;;Total ram usage:        1 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text5
   886  0009A4                     __ptext5:
   887                           	opt stack 0
   888  0009A4                     _display:
   889                           	opt stack 30
   890                           
   891                           ;incstack = 0
   892                           ;display@valor stored from wreg
   893  0009A4  6E01               	movwf	display@valor,c
   894                           
   895                           ;Teclado_2.c: 100: if (valor & (1 << 0)) LATDbits.LATD1 = 1;
   896  0009A6  A001               	btfss	display@valor,0,c
   897  0009A8  D002               	goto	l36
   898  0009AA  828C               	bsf	3980,1,c	;volatile
   899  0009AC  D001               	goto	l37
   900  0009AE                     l36:
   901                           
   902                           ;Teclado_2.c: 101: else LATDbits.LATD1 = 0;
   903  0009AE  928C               	bcf	3980,1,c	;volatile
   904  0009B0                     l37:
   905                           
   906                           ;Teclado_2.c: 103: if (valor & (1 << 1)) LATCbits.LATC1 = 1;
   907  0009B0  A201               	btfss	display@valor,1,c
   908  0009B2  D002               	goto	l38
   909  0009B4  828B               	bsf	3979,1,c	;volatile
   910  0009B6  D001               	goto	l39
   911  0009B8                     l38:
   912                           
   913                           ;Teclado_2.c: 104: else LATCbits.LATC1 = 0;
   914  0009B8  928B               	bcf	3979,1,c	;volatile
   915  0009BA                     l39:
   916                           
   917                           ;Teclado_2.c: 106: if (valor & (1 << 2)) LATCbits.LATC2 = 1;
   918  0009BA  A401               	btfss	display@valor,2,c
   919  0009BC  D002               	goto	l40
   920  0009BE  848B               	bsf	3979,2,c	;volatile
   921  0009C0  D001               	goto	l41
   922  0009C2                     l40:
   923                           
   924                           ;Teclado_2.c: 107: else LATCbits.LATC2 = 0;
   925  0009C2  948B               	bcf	3979,2,c	;volatile
   926  0009C4                     l41:
   927                           
   928                           ;Teclado_2.c: 109: if (valor & (1 << 3)) LATDbits.LATD0 = 1;
   929  0009C4  A601               	btfss	display@valor,3,c
   930  0009C6  D002               	goto	l42
   931  0009C8  808C               	bsf	3980,0,c	;volatile
   932  0009CA  D001               	goto	l43
   933  0009CC                     l42:
   934                           
   935                           ;Teclado_2.c: 110: else LATDbits.LATD0 = 0;
   936  0009CC  908C               	bcf	3980,0,c	;volatile
   937  0009CE                     l43:
   938                           
   939                           ;Teclado_2.c: 112: if (valor & (1 << 4)) LATDbits.LATD2 = 1;
   940  0009CE  A801               	btfss	display@valor,4,c
   941  0009D0  D002               	goto	l44
   942  0009D2  848C               	bsf	3980,2,c	;volatile
   943  0009D4  D001               	goto	l45
   944  0009D6                     l44:
   945                           
   946                           ;Teclado_2.c: 113: else LATDbits.LATD2 = 0;
   947  0009D6  948C               	bcf	3980,2,c	;volatile
   948  0009D8                     l45:
   949                           
   950                           ;Teclado_2.c: 115: if (valor & (1 << 5)) LATDbits.LATD3 = 1;
   951  0009D8  AA01               	btfss	display@valor,5,c
   952  0009DA  D002               	goto	l46
   953  0009DC  868C               	bsf	3980,3,c	;volatile
   954  0009DE  D001               	goto	l47
   955  0009E0                     l46:
   956                           
   957                           ;Teclado_2.c: 116: else LATDbits.LATD3 = 0;
   958  0009E0  968C               	bcf	3980,3,c	;volatile
   959  0009E2                     l47:
   960                           
   961                           ;Teclado_2.c: 118: if (valor & (1 << 6)) LATCbits.LATC6 = 1;
   962  0009E2  AC01               	btfss	display@valor,6,c
   963  0009E4  D002               	goto	l48
   964  0009E6  8C8B               	bsf	3979,6,c	;volatile
   965  0009E8  D001               	goto	l49
   966  0009EA                     l48:
   967                           
   968                           ;Teclado_2.c: 119: else LATCbits.LATC6 = 0;
   969  0009EA  9C8B               	bcf	3979,6,c	;volatile
   970  0009EC                     l49:
   971                           
   972                           ;Teclado_2.c: 121: if (valor & (1 << 7)) LATCbits.LATC7 = 1;
   973  0009EC  AE01               	btfss	display@valor,7,c
   974  0009EE  D002               	goto	l50
   975  0009F0  8E8B               	bsf	3979,7,c	;volatile
   976  0009F2  0012               	return	
   977  0009F4                     l50:
   978                           
   979                           ;Teclado_2.c: 122: else LATCbits.LATC7 = 0;
   980  0009F4  9E8B               	bcf	3979,7,c	;volatile
   981  0009F6  0012               	return	
   982  0009F8                     __end_of_display:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           prodh	equ	0xFF4
   989                           prodl	equ	0xFF3
   990                           wreg	equ	0xFE8
   991                           status	equ	0xFD8
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           prodh	equ	0xFF4
   997                           prodl	equ	0xFF3
   998                           wreg	equ	0xFE8
   999                           status	equ	0xFD8
  1000                           
  1001                           	psect	rparam
  1002  0000                     tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           prodh	equ	0xFF4
  1007                           prodl	equ	0xFF3
  1008                           wreg	equ	0xFE8
  1009                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_kbd_getc
    _kbd_getc->_ui8_TestKeyPad

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     540
                                              3 COMRAM     4     4      0
                            _display
                           _kbd_getc
                               _rota
                        _vInitKeyPad
 ---------------------------------------------------------------------------------
 (1) _vInitKeyPad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rota                                                 1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _kbd_getc                                             2     2      0     300
                                              1 COMRAM     2     2      0
                     _ui8_TestKeyPad
 ---------------------------------------------------------------------------------
 (2) _ui8_TestKeyPad                                       1     1      0     105
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0     120
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _kbd_getc
     _ui8_TestKeyPad
   _rota
   _vInitKeyPad

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Mar  3 00:15:18 2018

           ?_vInitKeyPad 0001                       l40 09C2                       l41 09C4  
                     l50 09F4                       l42 09CC                       l43 09CE  
                     l27 0964                       l44 09D6                       l36 09AE  
                     l60 0A1A                       l28 0978                       l45 09D8  
                     l37 09B0                       l61 0A24                       l29 0984  
                     l46 09E0                       l38 09B8                       l47 09E2  
                     l39 09BA                       l55 0A2E                       l48 09EA  
                     l56 09FC                       l49 09EC                       l81 0932  
                     l90 0844                       l74 08D8                       l58 0A06  
                     l91 081E                       l75 08F6                       l59 0A10  
                     l92 0860                       l84 093E                       l93 0822  
                     l94 0828                       l78 0914                       l95 0830  
                     l96 083A                       l97 0870                       l99 0882  
                     u60 08AA                       u90 08E4             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l100 0894                      l101 08A6  
                    l725 0816                      l901 097C             __CFG_CPB$OFF 000000  
                    u110 0902                      u130 0920                      u250 099E  
           __CFG_CPD$OFF 000000                      u267 0990                      wreg 000FE8  
           __CFG_FOSC$XT 000000                     _KEYS 0801                     _main 0942  
                   _rota 09F8            __CFG_BORV$190 000000                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
                  ?_rota 0001                    _PORTA 000F80                    _PORTB 000F81  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000          __end_of_display 09F8            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000             display@valor 0001           __CFG_EBTRB$OFF 000000  
                  main@i 0007           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8           __CFG_T3CMX$RC0 000000           __CFG_ICPRT$OFF 000000  
           __end_of_KEYS 0811          __initialization 0A5C             __end_of_main 09A4  
           __end_of_rota 0A4A           __CFG_PCLKEN$ON 000000                   ??_main 0004  
                 ??_rota 0001            __activetblptr 000002         ??_ui8_TestKeyPad 0001  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   _ANSELA 000F5B  
         __CFG_WDTEN$OFF 000000         __end_of_kbd_getc 0942           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000     __size_of_vInitKeyPad 0012                ??_display 0001  
        ui8_TestKeyPad@k 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 0A5C          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001        __CFG_PLLSEL$PLL4X 000000  
              ?_kbd_getc 0001                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0800                  __pcinit 0A5C                  __ramtop 0800  
                __ptext0 0942                  __ptext1 0A4A                  __ptext2 09F8  
                __ptext3 08B6                  __ptext4 0812                  __ptext5 09A4  
                _display 09A4               ??_kbd_getc 0002     end_of_initialization 0A5C  
          __Lmediumconst 0000              rota@display 0001                _TRISCbits 000F94  
              _TRISDbits 000F95               main@vtecla 0005            ??_vInitKeyPad 0001  
    start_initialization 0A5C          __CFG_nLPBOR$OFF 000000  __size_of_ui8_TestKeyPad 00A4  
    __end_of_vInitKeyPad 0A5C          __CFG_nPWRTEN$ON 000000        __size_of_kbd_getc 008C  
               ?_display 0001              __smallconst 0800                 _LATCbits 000F8B  
               _LATDbits 000F8C              _vInitKeyPad 0A4A         __CFG_WDTPS$32768 000000  
              main@tecla 0006        __CFG_CFGPLLEN$OFF 000000           _ui8_TestKeyPad 0812  
               __Hrparam 0000                 __Lrparam 0000         __size_of_display 0054  
               _kbd_getc 08B6   __end_of_ui8_TestKeyPad 08B6            __size_of_main 0062  
          __size_of_rota 0052            kbd_getc@kchar 0002          ?_ui8_TestKeyPad 0001  
           kbd_getc@temp 0003     __CFG_CPUDIV$NOCLKDIV 000000  
