

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  2 21:29:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     _dpowers:
    94                           	opt stack 0
    95  000601  0001               	dw	1
    96  000603  0000               	dw	0
    97  000605  000A               	dw	10
    98  000607  0000               	dw	0
    99  000609  0064               	dw	100
   100  00060B  0000               	dw	0
   101  00060D  03E8               	dw	1000
   102  00060F  0000               	dw	0
   103  000611  2710               	dw	10000
   104  000613  0000               	dw	0
   105  000615  86A0               	dw	34464
   106  000617  0001               	dw	1
   107  000619  4240               	dw	16960
   108  00061B  000F               	dw	15
   109  00061D  9680               	dw	38528
   110  00061F  0098               	dw	152
   111  000621  E100               	dw	57600
   112  000623  05F5               	dw	1525
   113  000625  CA00               	dw	51712
   114  000627  3B9A               	dw	15258
   115  000629                     __end_of_dpowers:
   116                           	opt stack 0
   117  000629                     __powers_:
   118                           	opt stack 0
   119  000629  00                 	db	0
   120  00062A  80                 	db	128
   121  00062B  3F                 	db	63
   122  00062C  00                 	db	0
   123  00062D  20                 	db	32
   124  00062E  41                 	db	65
   125  00062F  00                 	db	0
   126  000630  C8                 	db	200
   127  000631  42                 	db	66
   128  000632  00                 	db	0
   129  000633  7A                 	db	122
   130  000634  44                 	db	68
   131  000635  40                 	db	64
   132  000636  1C                 	db	28
   133  000637  46                 	db	70
   134  000638  50                 	db	80
   135  000639  C3                 	db	195
   136  00063A  47                 	db	71
   137  00063B  24                 	db	36
   138  00063C  74                 	db	116
   139  00063D  49                 	db	73
   140  00063E  97                 	db	151
   141  00063F  18                 	db	24
   142  000640  4B                 	db	75
   143  000641  BC                 	db	188
   144  000642  BE                 	db	190
   145  000643  4C                 	db	76
   146  000644  6B                 	db	107
   147  000645  6E                 	db	110
   148  000646  4E                 	db	78
   149  000647  03                 	db	3
   150  000648  15                 	db	21
   151  000649  50                 	db	80
   152  00064A  79                 	db	121
   153  00064B  AD                 	db	173
   154  00064C  60                 	db	96
   155  00064D  F3                 	db	243
   156  00064E  49                 	db	73
   157  00064F  71                 	db	113
   158  000650                     __end_of__powers_:
   159                           	opt stack 0
   160  000650                     __npowers_:
   161                           	opt stack 0
   162  000650  00                 	db	0
   163  000651  80                 	db	128
   164  000652  3F                 	db	63
   165  000653  CD                 	db	205
   166  000654  CC                 	db	204
   167  000655  3D                 	db	61
   168  000656  D7                 	db	215
   169  000657  23                 	db	35
   170  000658  3C                 	db	60
   171  000659  12                 	db	18
   172  00065A  83                 	db	131
   173  00065B  3A                 	db	58
   174  00065C  B7                 	db	183
   175  00065D  D1                 	db	209
   176  00065E  38                 	db	56
   177  00065F  C6                 	db	198
   178  000660  27                 	db	39
   179  000661  37                 	db	55
   180  000662  38                 	db	56
   181  000663  86                 	db	134
   182  000664  35                 	db	53
   183  000665  C0                 	db	192
   184  000666  D6                 	db	214
   185  000667  33                 	db	51
   186  000668  CC                 	db	204
   187  000669  2B                 	db	43
   188  00066A  32                 	db	50
   189  00066B  70                 	db	112
   190  00066C  89                 	db	137
   191  00066D  30                 	db	48
   192  00066E  E7                 	db	231
   193  00066F  DB                 	db	219
   194  000670  2E                 	db	46
   195  000671  E5                 	db	229
   196  000672  3C                 	db	60
   197  000673  1E                 	db	30
   198  000674  42                 	db	66
   199  000675  A2                 	db	162
   200  000676  0D                 	db	13
   201  000677                     __end_of__npowers_:
   202                           	opt stack 0
   203  0000                     _TMR1	set	4046
   204  0000                     _T1CONbits	set	4045
   205  0000                     _PIE1bits	set	3997
   206  0000                     _TRISCbits	set	3988
   207  0000                     _TRISB	set	3987
   208  0000                     _PORTCbits	set	3970
   209  0000                     _PORTD	set	3971
   210  0000                     _PORTB	set	3969
   211  0000                     _PIR1bits	set	3998
   212  0000                     _GIEL	set	32662
   213  0000                     _GIEH	set	32663
   214  0000                     _IPEN	set	32391
   215  0000                     _TMR1CS	set	32361
   216  0000                     _T1CKPS0	set	32364
   217  0000                     _T1CKPS1	set	32365
   218  0000                     _TMR1IP	set	31992
   219  0000                     _INT1IP	set	32646
   220  0000                     _INT1IE	set	32643
   221  0000                     _INT0IE	set	32660
   222  0000                     _INTEDG1	set	32653
   223  0000                     _INT1IF	set	32640
   224  0000                     _INTEDG0	set	32654
   225  0000                     _INT0IF	set	32657
   226  0000                     _TMR1IF	set	31984
   227  0000                     _TMR1ON	set	32360
   228  000677                     STR_1:
   229  000677  20                 	db	32
   230  000678  48                 	db	72	;'H'
   231  000679  61                 	db	97	;'a'
   232  00067A  62                 	db	98	;'b'
   233  00067B  69                 	db	105	;'i'
   234  00067C  6C                 	db	108	;'l'
   235  00067D  69                 	db	105	;'i'
   236  00067E  74                 	db	116	;'t'
   237  00067F  61                 	db	97	;'a'
   238  000680  20                 	db	32
   239  000681  69                 	db	105	;'i'
   240  000682  6E                 	db	110	;'n'
   241  000683  74                 	db	116	;'t'
   242  000684  27                 	db	39
   243  000685  73                 	db	115	;'s'
   244  000686  00                 	db	0
   245  000687                     STR_2:
   246  000687  25                 	db	37
   247  000688  34                 	db	52	;'4'
   248  000689  2E                 	db	46
   249  00068A  33                 	db	51	;'3'
   250  00068B  66                 	db	102	;'f'
   251  00068C  00                 	db	0
   252                           
   253                           ; #config settings
   254  00068D  00                 	db	0	; dummy byte at the end
   255  0000                     
   256                           	psect	cinit
   257  00266C                     __pcinit:
   258                           	opt stack 0
   259  00266C                     start_initialization:
   260                           	opt stack 0
   261  00266C                     __initialization:
   262                           	opt stack 0
   263                           
   264                           ; Clear objects allocated to BANK0 (11 bytes)
   265  00266C  EE00  F0E7         	lfsr	0,__pbssBANK0
   266  002670  0E0B               	movlw	11
   267  002672                     clear_0:
   268  002672  6AEE               	clrf	postinc0,c
   269  002674  06E8               	decf	wreg,f,c
   270  002676  E1FD               	bnz	clear_0
   271                           
   272                           ; Clear objects allocated to COMRAM (8 bytes)
   273  002678  EE00  F043         	lfsr	0,__pbssCOMRAM
   274  00267C  0E08               	movlw	8
   275  00267E                     clear_1:
   276  00267E  6AEE               	clrf	postinc0,c
   277  002680  06E8               	decf	wreg,f,c
   278  002682  E1FD               	bnz	clear_1
   279  002684                     end_of_initialization:
   280                           	opt stack 0
   281  002684                     __end_of__initialization:
   282                           	opt stack 0
   283  002684  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   284  002686  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   285  002688  0E00               	movlw	low (__Lmediumconst shr (0+16))
   286  00268A  6EF8               	movwf	tblptru,c
   287  00268C  0100               	movlb	0
   288  00268E  EF57  F010         	goto	_main	;jump to C main() function
   289                           tblptru	equ	0xFF8
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	bssCOMRAM
   294  000043                     __pbssCOMRAM:
   295                           	opt stack 0
   296  000043                     _rpm1:
   297                           	opt stack 0
   298  000043                     	ds	3
   299  000046                     _contM2:
   300                           	opt stack 0
   301  000046                     	ds	2
   302  000048                     _lcd:
   303                           	opt stack 0
   304  000048                     	ds	1
   305  000049                     _contM1:
   306                           	opt stack 0
   307  000049                     	ds	2
   308                           tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	bssBANK0
   313  0000E7                     __pbssBANK0:
   314                           	opt stack 0
   315  0000E7                     _rpm2:
   316                           	opt stack 0
   317  0000E7                     	ds	3
   318  0000EA                     _value:
   319                           	opt stack 0
   320  0000EA                     	ds	8
   321                           tblptru	equ	0xFF8
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	cstackBANK0
   326  000080                     __pcstackBANK0:
   327                           	opt stack 0
   328  000080                     ??_isdigit:
   329  000080                     ??_lcd_lat:
   330  000080                     ?___awmod:
   331                           	opt stack 0
   332  000080                     ?___ftpack:
   333                           	opt stack 0
   334  000080                     ?___ftneg:
   335                           	opt stack 0
   336  000080                     ?__tdiv_to_l_:
   337                           	opt stack 0
   338  000080                     ?__div_to_l_:
   339                           	opt stack 0
   340  000080                     ?___lldiv:
   341                           	opt stack 0
   342  000080                     ?___llmod:
   343                           	opt stack 0
   344  000080                     manda@dato:
   345                           	opt stack 0
   346  000080                     ___awmod@dividend:
   347                           	opt stack 0
   348  000080                     __div_to_l_@f1:
   349                           	opt stack 0
   350  000080                     ___ftpack@arg:
   351                           	opt stack 0
   352  000080                     __tdiv_to_l_@f1:
   353                           	opt stack 0
   354  000080                     ___ftge@ff1:
   355                           	opt stack 0
   356  000080                     ___ftneg@f1:
   357                           	opt stack 0
   358  000080                     ___lldiv@dividend:
   359                           	opt stack 0
   360  000080                     ___llmod@dividend:
   361                           	opt stack 0
   362                           
   363                           ; 4 bytes @ 0x0
   364  000080                     	ds	1
   365  000081                     ??_lcd_dwr:
   366  000081                     ??_lcd_cmd:
   367  000081                     lcd_cmd_hf@x:
   368                           	opt stack 0
   369  000081                     _isdigit$695:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x1
   373  000081                     	ds	1
   374  000082                     lcd_cmd@x:
   375                           	opt stack 0
   376  000082                     lcd_dwr@x:
   377                           	opt stack 0
   378  000082                     isdigit@c:
   379                           	opt stack 0
   380  000082                     ___awmod@divisor:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x2
   384  000082                     	ds	1
   385  000083                     ??_lcd_init:
   386  000083                     lcd_putc@c:
   387                           	opt stack 0
   388  000083                     lcd_gotoxy@y:
   389                           	opt stack 0
   390  000083                     ___ftpack@exp:
   391                           	opt stack 0
   392  000083                     __div_to_l_@f2:
   393                           	opt stack 0
   394  000083                     __tdiv_to_l_@f2:
   395                           	opt stack 0
   396  000083                     ___ftge@ff2:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x3
   400  000083                     	ds	1
   401  000084                     ??_lcd_gotoxy:
   402  000084                     ___awmod@counter:
   403                           	opt stack 0
   404  000084                     ___ftpack@sign:
   405                           	opt stack 0
   406  000084                     lcd_msg@c:
   407                           	opt stack 0
   408  000084                     ___lldiv@divisor:
   409                           	opt stack 0
   410  000084                     ___llmod@divisor:
   411                           	opt stack 0
   412                           
   413                           ; 4 bytes @ 0x4
   414  000084                     	ds	1
   415  000085                     ??___ftpack:
   416  000085                     lcd_gotoxy@x:
   417                           	opt stack 0
   418  000085                     ___awmod@sign:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x5
   422  000085                     	ds	1
   423  000086                     ??__tdiv_to_l_:
   424  000086                     ??___ftge:
   425  000086                     ?___awdiv:
   426                           	opt stack 0
   427  000086                     lcd_gotoxy@ADDRESS:
   428                           	opt stack 0
   429  000086                     ___awdiv@dividend:
   430                           	opt stack 0
   431  000086                     __div_to_l_@quot:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x6
   435  000086                     	ds	2
   436  000088                     ?___lltoft:
   437                           	opt stack 0
   438  000088                     ___llmod@counter:
   439                           	opt stack 0
   440  000088                     ___awdiv@divisor:
   441                           	opt stack 0
   442  000088                     ___lldiv@quotient:
   443                           	opt stack 0
   444  000088                     ___lltoft@c:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x8
   448  000088                     	ds	1
   449  000089                     __tdiv_to_l_@quot:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x9
   453  000089                     	ds	1
   454  00008A                     ___awdiv@counter:
   455                           	opt stack 0
   456  00008A                     __div_to_l_@cntr:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0xA
   460  00008A                     	ds	1
   461  00008B                     ___awdiv@sign:
   462                           	opt stack 0
   463  00008B                     __div_to_l_@exp1:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0xB
   467  00008B                     	ds	1
   468  00008C                     ??___lltoft:
   469  00008C                     ___lldiv@counter:
   470                           	opt stack 0
   471  00008C                     ___awdiv@quotient:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0xC
   475  00008C                     	ds	1
   476  00008D                     __tdiv_to_l_@cntr:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0xD
   480  00008D                     	ds	1
   481  00008E                     ?___wmul:
   482                           	opt stack 0
   483  00008E                     __tdiv_to_l_@exp1:
   484                           	opt stack 0
   485  00008E                     ___wmul@multiplier:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xE
   489  00008E                     	ds	2
   490  000090                     ___lltoft@exp:
   491                           	opt stack 0
   492  000090                     ___wmul@multiplicand:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x10
   496  000090                     	ds	2
   497  000092                     ___wmul@product:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x12
   501  000092                     	ds	2
   502  000094                     ?___ftmul:
   503                           	opt stack 0
   504  000094                     ___ftmul@f1:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x14
   508  000094                     	ds	3
   509  000097                     ___ftmul@f2:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x17
   513  000097                     	ds	3
   514  00009A                     ??___ftmul:
   515                           
   516                           ; 1 bytes @ 0x1A
   517  00009A                     	ds	3
   518  00009D                     ___ftmul@exp:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1D
   522  00009D                     	ds	1
   523  00009E                     ___ftmul@f3_as_product:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x1E
   527  00009E                     	ds	3
   528  0000A1                     ___ftmul@cntr:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x21
   532  0000A1                     	ds	1
   533  0000A2                     ___ftmul@sign:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x22
   537  0000A2                     	ds	1
   538  0000A3                     ?_fround:
   539                           	opt stack 0
   540  0000A3                     ?_scale:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x23
   544  0000A3                     	ds	3
   545  0000A6                     _fround$1060:
   546                           	opt stack 0
   547  0000A6                     _scale$1061:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x26
   551  0000A6                     	ds	3
   552  0000A9                     scale@scl:
   553                           	opt stack 0
   554  0000A9                     _fround$1059:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x29
   558  0000A9                     	ds	1
   559  0000AA                     ?___fttol:
   560                           	opt stack 0
   561  0000AA                     ___fttol@f1:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x2A
   565  0000AA                     	ds	2
   566  0000AC                     fround@prec:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x2C
   570  0000AC                     	ds	1
   571  0000AD                     ?___ftadd:
   572                           	opt stack 0
   573  0000AD                     ___ftadd@f1:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x2D
   577  0000AD                     	ds	1
   578  0000AE                     ??___fttol:
   579                           
   580                           ; 1 bytes @ 0x2E
   581  0000AE                     	ds	2
   582  0000B0                     ___ftadd@f2:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x30
   586  0000B0                     	ds	3
   587  0000B3                     ??___ftadd:
   588  0000B3                     ___fttol@sign1:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x33
   592  0000B3                     	ds	1
   593  0000B4                     ___fttol@lval:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x34
   597  0000B4                     	ds	2
   598  0000B6                     ___ftadd@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x36
   602  0000B6                     	ds	1
   603  0000B7                     ___ftadd@exp2:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x37
   607  0000B7                     	ds	1
   608  0000B8                     ___ftadd@exp1:
   609                           	opt stack 0
   610  0000B8                     ___fttol@exp1:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x38
   614  0000B8                     	ds	1
   615  0000B9                     ?___ftsub:
   616                           	opt stack 0
   617  0000B9                     ___ftsub@f1:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x39
   621  0000B9                     	ds	3
   622  0000BC                     ___ftsub@f2:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x3C
   626  0000BC                     	ds	3
   627  0000BF                     ?_sprintf:
   628                           	opt stack 0
   629  0000BF                     sprintf@sp:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x3F
   633  0000BF                     	ds	2
   634  0000C1                     sprintf@f:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x41
   638  0000C1                     	ds	5
   639  0000C6                     ??_sprintf:
   640                           
   641                           ; 1 bytes @ 0x46
   642  0000C6                     	ds	6
   643  0000CC                     _sprintf$1062:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x4C
   647  0000CC                     	ds	3
   648  0000CF                     sprintf@ap:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x4F
   652  0000CF                     	ds	2
   653  0000D1                     sprintf@val:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x51
   657  0000D1                     	ds	4
   658  0000D5                     sprintf@flag:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x55
   662  0000D5                     	ds	2
   663  0000D7                     sprintf@width:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x57
   667  0000D7                     	ds	2
   668  0000D9                     sprintf@tmpval:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x59
   672  0000D9                     	ds	4
   673  0000DD                     sprintf@exp:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x5D
   677  0000DD                     	ds	2
   678  0000DF                     sprintf@fval:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x5F
   682  0000DF                     	ds	3
   683  0000E2                     sprintf@prec:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x62
   687  0000E2                     	ds	2
   688  0000E4                     sprintf@c:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x64
   692  0000E4                     	ds	1
   693  0000E5                     ??_main:
   694                           
   695                           ; 1 bytes @ 0x65
   696  0000E5                     	ds	2
   697                           tblptru	equ	0xFF8
   698                           postinc0	equ	0xFEE
   699                           wreg	equ	0xFE8
   700                           
   701                           	psect	cstackCOMRAM
   702  000001                     __pcstackCOMRAM:
   703                           	opt stack 0
   704  000001                     ??_high_isr:
   705  000001                     
   706                           ; 1 bytes @ 0x0
   707  000001                     	ds	18
   708  000013                     ?i1___ftpack:
   709                           	opt stack 0
   710  000013                     i1___ftpack@arg:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x12
   714  000013                     	ds	3
   715  000016                     i1___ftpack@exp:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x15
   719  000016                     	ds	1
   720  000017                     i1___ftpack@sign:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x16
   724  000017                     	ds	1
   725  000018                     ??i1___ftpack:
   726                           
   727                           ; 1 bytes @ 0x17
   728  000018                     	ds	3
   729  00001B                     ?___ftdiv:
   730                           	opt stack 0
   731  00001B                     ?___awtoft:
   732                           	opt stack 0
   733  00001B                     ___awtoft@c:
   734                           	opt stack 0
   735  00001B                     ___ftdiv@f1:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x1A
   739  00001B                     	ds	3
   740  00001E                     ___awtoft@sign:
   741                           	opt stack 0
   742  00001E                     ___ftdiv@f2:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x1D
   746  00001E                     	ds	1
   747  00001F                     ?i1___ftmul:
   748                           	opt stack 0
   749  00001F                     i1___ftmul@f1:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x1E
   753  00001F                     	ds	2
   754  000021                     ??___ftdiv:
   755                           
   756                           ; 1 bytes @ 0x20
   757  000021                     	ds	1
   758  000022                     i1___ftmul@f2:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x21
   762  000022                     	ds	2
   763  000024                     ___ftdiv@cntr:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x23
   767  000024                     	ds	1
   768  000025                     ??i1___ftmul:
   769  000025                     ___ftdiv@f3:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0x24
   773  000025                     	ds	3
   774  000028                     ___ftdiv@exp:
   775                           	opt stack 0
   776  000028                     i1___ftmul@exp:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x27
   780  000028                     	ds	1
   781  000029                     ___ftdiv@sign:
   782                           	opt stack 0
   783  000029                     i1___ftmul@f3_as_product:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x28
   787  000029                     	ds	3
   788  00002C                     i1___ftmul@cntr:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x2B
   792  00002C                     	ds	1
   793  00002D                     i1___ftmul@sign:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x2C
   797  00002D                     	ds	1
   798  00002E                     ??_low_isr:
   799                           
   800                           ; 1 bytes @ 0x2D
   801  00002E                     	ds	21
   802                           tblptru	equ	0xFF8
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           
   806 ;;
   807 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   808 ;;
   809 ;; *************** function _main *****************
   810 ;; Defined at:
   811 ;;		line 172 in file "enc2.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   825 ;;      Params:         0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0
   827 ;;      Temps:          0       2       0       0       0       0       0
   828 ;;      Totals:         0       2       0       0       0       0       0
   829 ;;Total ram usage:        2 bytes
   830 ;; Hardware stack levels required when called:    8
   831 ;; This function calls:
   832 ;;		_Adelante
   833 ;;		_lcd_gotoxy
   834 ;;		_lcd_init
   835 ;;		_lcd_msg
   836 ;;		_sprintf
   837 ;; This function is called by:
   838 ;;		Startup code after reset
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text0
   843  0020AE                     __ptext0:
   844                           	opt stack 0
   845  0020AE                     _main:
   846                           	opt stack 23
   847                           
   848                           ;enc2.c: 174: contM1 = 0;
   849                           
   850                           ;incstack = 0
   851  0020AE  0E00               	movlw	0
   852  0020B0  6E4A               	movwf	_contM1+1,c	;volatile
   853  0020B2  0E00               	movlw	0
   854  0020B4  6E49               	movwf	_contM1,c	;volatile
   855                           
   856                           ;enc2.c: 175: TRISB = 0x03;
   857  0020B6  0E03               	movlw	3
   858  0020B8  6E93               	movwf	3987,c	;volatile
   859                           
   860                           ;enc2.c: 176: (*(&(*(&PORTD + 0x12))) |= (1<<(0)));
   861  0020BA  8095               	bsf	3989,0,c	;volatile
   862                           
   863                           ;enc2.c: 177: (*(&(*(&PORTD + 0x12))) |= (1<<(1)));
   864  0020BC  8295               	bsf	3989,1,c	;volatile
   865                           
   866                           ;enc2.c: 178: TRISCbits.TRISC0 = 0;
   867  0020BE  9094               	bcf	3988,0,c	;volatile
   868                           
   869                           ;enc2.c: 179: TRISCbits.TRISC1 = 0;
   870  0020C0  9294               	bcf	3988,1,c	;volatile
   871                           
   872                           ;enc2.c: 180: PORTCbits.RC0 = 0;
   873  0020C2  9082               	bcf	3970,0,c	;volatile
   874                           
   875                           ;enc2.c: 181: PORTCbits.RC1 = 0;
   876  0020C4  9282               	bcf	3970,1,c	;volatile
   877                           
   878                           ;enc2.c: 182: lcd_init();
   879  0020C6  EC48  F00F         	call	_lcd_init	;wreg free
   880                           
   881                           ;enc2.c: 183: lcd_msg(" Habilita int's");
   882  0020CA  0E77               	movlw	low STR_1
   883  0020CC  0100               	movlb	0	; () banked
   884  0020CE  6F84               	movwf	lcd_msg@c& (0+255),b
   885  0020D0  0E06               	movlw	high STR_1
   886  0020D2  6F85               	movwf	(lcd_msg@c+1)& (0+255),b
   887  0020D4  EC17  F012         	call	_lcd_msg	;wreg free
   888                           
   889                           ;enc2.c: 189: INT0IE = 1;
   890  0020D8  88F2               	bsf	intcon,4,c	;volatile
   891                           
   892                           ;enc2.c: 190: INTEDG0 = 1;
   893  0020DA  8CF1               	bsf	intcon2,6,c	;volatile
   894                           
   895                           ;enc2.c: 196: INT1IE = 1;
   896  0020DC  86F0               	bsf	intcon3,3,c	;volatile
   897                           
   898                           ;enc2.c: 197: INTEDG1 = 1;
   899  0020DE  8AF1               	bsf	intcon2,5,c	;volatile
   900                           
   901                           ;enc2.c: 198: INT1IP = 1;
   902  0020E0  8CF0               	bsf	intcon3,6,c	;volatile
   903                           
   904                           ;enc2.c: 205: TMR1IP = 0;
   905  0020E2  909F               	bcf	3999,0,c	;volatile
   906                           
   907                           ;enc2.c: 208: PIE1bits.TMR1IE = 1;
   908  0020E4  809D               	bsf	3997,0,c	;volatile
   909                           
   910                           ;enc2.c: 209: T1CONbits.RD16 = 1;
   911  0020E6  8ECD               	bsf	4045,7,c	;volatile
   912                           
   913                           ;enc2.c: 210: T1CKPS1 = 1;
   914  0020E8  8ACD               	bsf	4045,5,c	;volatile
   915                           
   916                           ;enc2.c: 211: T1CKPS0 = 1;
   917  0020EA  88CD               	bsf	4045,4,c	;volatile
   918                           
   919                           ;enc2.c: 212: TMR1CS = 0;
   920  0020EC  92CD               	bcf	4045,1,c	;volatile
   921                           
   922                           ;enc2.c: 213: TMR1ON = 0;
   923  0020EE  90CD               	bcf	4045,0,c	;volatile
   924                           
   925                           ;enc2.c: 214: TMR1 = 53036;
   926  0020F0  0ECF               	movlw	207
   927  0020F2  6ECF               	movwf	4047,c	;volatile
   928  0020F4  0E2C               	movlw	44
   929  0020F6  6ECE               	movwf	4046,c	;volatile
   930                           
   931                           ;enc2.c: 218: IPEN = 1;
   932  0020F8  8ED0               	bsf	4048,7,c	;volatile
   933                           
   934                           ;enc2.c: 219: GIEH = 1;
   935  0020FA  8EF2               	bsf	intcon,7,c	;volatile
   936                           
   937                           ;enc2.c: 220: GIEL = 1;
   938  0020FC  8CF2               	bsf	intcon,6,c	;volatile
   939                           
   940                           ;enc2.c: 223: Adelante();
   941  0020FE  EC88  F013         	call	_Adelante	;wreg free
   942                           
   943                           ;enc2.c: 225: TMR1ON = 1;
   944  002102  80CD               	bsf	4045,0,c	;volatile
   945  002104                     
   946                           ;enc2.c: 228: {
   947                           ;enc2.c: 229: _delay((unsigned long)((980)*(4000000/4000.0)));
   948  002104  0E05               	movlw	5
   949  002106  0100               	movlb	0	; () banked
   950  002108  6FE6               	movwf	(??_main+1)& (0+255),b
   951  00210A  0EF9               	movlw	249
   952  00210C  6FE5               	movwf	??_main& (0+255),b
   953  00210E  0EB5               	movlw	181
   954  002110                     u3407:
   955  002110  2EE8               	decfsz	wreg,f,c
   956  002112  D7FE               	bra	u3407
   957  002114  2FE5               	decfsz	??_main& (0+255),f,b
   958  002116  D7FC               	bra	u3407
   959  002118  2FE6               	decfsz	(??_main+1)& (0+255),f,b
   960  00211A  D7FA               	bra	u3407
   961                           
   962                           ;enc2.c: 230: sprintf(value,"%4.3f",rpm2);
   963  00211C  0EEA               	movlw	low _value
   964  00211E  0100               	movlb	0	; () banked
   965  002120  6FBF               	movwf	sprintf@sp& (0+255),b
   966  002122  0E00               	movlw	high _value
   967  002124  6FC0               	movwf	(sprintf@sp+1)& (0+255),b
   968  002126  0E87               	movlw	low STR_2
   969  002128  6FC1               	movwf	sprintf@f& (0+255),b
   970  00212A  0E06               	movlw	high STR_2
   971  00212C  6FC2               	movwf	(sprintf@f+1)& (0+255),b
   972  00212E  C0E7  F0C3         	movff	_rpm2,?_sprintf+4	;volatile
   973  002132  C0E8  F0C4         	movff	_rpm2+1,?_sprintf+5	;volatile
   974  002136  C0E9  F0C5         	movff	_rpm2+2,?_sprintf+6	;volatile
   975  00213A  EC47  F003         	call	_sprintf	;wreg free
   976                           
   977                           ;enc2.c: 231: lcd_gotoxy(5,2);
   978  00213E  0E02               	movlw	2
   979  002140  0100               	movlb	0	; () banked
   980  002142  6F83               	movwf	lcd_gotoxy@y& (0+255),b
   981  002144  0E05               	movlw	5
   982  002146  ECD2  F012         	call	_lcd_gotoxy
   983                           
   984                           ;enc2.c: 232: lcd_msg(value);
   985  00214A  0EEA               	movlw	low _value
   986  00214C  0100               	movlb	0	; () banked
   987  00214E  6F84               	movwf	lcd_msg@c& (0+255),b
   988  002150  0E00               	movlw	high _value
   989  002152  6F85               	movwf	(lcd_msg@c+1)& (0+255),b
   990  002154  EC17  F012         	call	_lcd_msg	;wreg free
   991  002158  D7D5               	goto	l98
   992  00215A                     __end_of_main:
   993                           	opt stack 0
   994                           tblptru	equ	0xFF8
   995                           intcon	equ	0xFF2
   996                           intcon2	equ	0xFF1
   997                           intcon3	equ	0xFF0
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           
  1001 ;; *************** function _sprintf *****************
  1002 ;; Defined at:
  1003 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  1006 ;;		 -> value(8), 
  1007 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1008 ;;		 -> STR_2(6), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  tmpval          4   89[BANK0 ] struct .
  1011 ;;  val             4   81[BANK0 ] unsigned long 
  1012 ;;  fval            3   95[BANK0 ] unsigned long 
  1013 ;;  cp              3    0        PTR const unsigned char 
  1014 ;;  prec            2   98[BANK0 ] int 
  1015 ;;  exp             2   93[BANK0 ] int 
  1016 ;;  width           2   87[BANK0 ] int 
  1017 ;;  flag            2   85[BANK0 ] unsigned short 
  1018 ;;  ap              2   79[BANK0 ] PTR void [1]
  1019 ;;		 -> ?_sprintf(2), 
  1020 ;;  len             2    0        unsigned int 
  1021 ;;  c               1  100[BANK0 ] char 
  1022 ;;  d               1    0        unsigned char 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  2   63[BANK0 ] int 
  1025 ;; Registers used:
  1026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1032 ;;      Params:         0       7       0       0       0       0       0
  1033 ;;      Locals:         0      25       0       0       0       0       0
  1034 ;;      Temps:          0       6       0       0       0       0       0
  1035 ;;      Totals:         0      38       0       0       0       0       0
  1036 ;;Total ram usage:       38 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    7
  1039 ;; This function calls:
  1040 ;;		___awdiv
  1041 ;;		___ftadd
  1042 ;;		___ftge
  1043 ;;		___ftmul
  1044 ;;		___ftneg
  1045 ;;		___ftsub
  1046 ;;		___fttol
  1047 ;;		___lldiv
  1048 ;;		___llmod
  1049 ;;		___lltoft
  1050 ;;		___wmul
  1051 ;;		__div_to_l_
  1052 ;;		__tdiv_to_l_
  1053 ;;		_fround
  1054 ;;		_isdigit
  1055 ;;		_scale
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text1
  1062  00068E                     __ptext1:
  1063                           	opt stack 0
  1064  00068E                     _sprintf:
  1065                           	opt stack 23
  1066                           
  1067                           ;doprnt.c: 494: va_list ap;
  1068                           ;doprnt.c: 499: signed char c;
  1069                           ;doprnt.c: 501: int width;
  1070                           ;doprnt.c: 504: int prec;
  1071                           ;doprnt.c: 508: unsigned short flag;
  1072                           ;doprnt.c: 515: char d;
  1073                           ;doprnt.c: 516: double fval;
  1074                           ;doprnt.c: 517: int exp;
  1075                           ;doprnt.c: 523: union {
  1076                           ;doprnt.c: 524: unsigned long vd;
  1077                           ;doprnt.c: 525: double integ;
  1078                           ;doprnt.c: 526: } tmpval;
  1079                           ;doprnt.c: 528: unsigned long val;
  1080                           ;doprnt.c: 529: unsigned len;
  1081                           ;doprnt.c: 530: const char * cp;
  1082                           ;doprnt.c: 533: *ap = __va_start();
  1083                           
  1084                           ;incstack = 0
  1085  00068E  0EC3               	movlw	low (?_sprintf+4)
  1086  000690  0100               	movlb	0	; () banked
  1087  000692  6FCF               	movwf	sprintf@ap& (0+255),b
  1088  000694  0E00               	movlw	high (?_sprintf+4)
  1089  000696  6FD0               	movwf	(sprintf@ap+1)& (0+255),b
  1090                           
  1091                           ;doprnt.c: 536: while(c = *f++) {
  1092  000698  EF84  F007         	goto	l300
  1093  00069C                     
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 538: if(c != '%')
  1096                           
  1097                           ; BSR set to: 0
  1098  00069C  0E25               	movlw	37
  1099  00069E  19E4               	xorwf	sprintf@c& (0+255),w,b
  1100  0006A0  B4D8               	btfsc	status,2,c
  1101  0006A2  D008               	goto	l229
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;doprnt.c: 540: {
  1105                           ;doprnt.c: 541: ((*sp++ = (c)));
  1106  0006A4  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  1107  0006A8  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  1108  0006AC  C0E4  FFDF         	movff	sprintf@c,indf2
  1109  0006B0  EF82  F007         	goto	l3219
  1110  0006B4                     l229:
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;doprnt.c: 543: }
  1114                           ;doprnt.c: 546: width = 0;
  1115                           
  1116                           ; BSR set to: 0
  1117  0006B4  0E00               	movlw	0
  1118  0006B6  6FD8               	movwf	(sprintf@width+1)& (0+255),b
  1119  0006B8  0E00               	movlw	0
  1120  0006BA  6FD7               	movwf	sprintf@width& (0+255),b
  1121                           
  1122                           ;doprnt.c: 548: flag = 0;
  1123  0006BC  0E00               	movlw	0
  1124  0006BE  6FD6               	movwf	(sprintf@flag+1)& (0+255),b
  1125  0006C0  0E00               	movlw	0
  1126  0006C2  6FD5               	movwf	sprintf@flag& (0+255),b
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1130  0006C4  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1131  0006C8  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1132  0006CC                     	if	0	;tblptru may be non-zero
  1133  0006CC                     	endif
  1134  0006CC                     	if	0	;tblptru may be non-zero
  1135  0006CC                     	endif
  1136  0006CC  0008               	tblrd		*
  1137  0006CE  50F5               	movf	tablat,w,c
  1138  0006D0  EC5C  F013         	call	_isdigit
  1139  0006D4  A0D8               	btfss	status,0,c
  1140  0006D6  D035               	goto	u2840
  1141                           
  1142                           ;doprnt.c: 598: width = 0;
  1143  0006D8  0E00               	movlw	0
  1144  0006DA  0100               	movlb	0	; () banked
  1145  0006DC  6FD8               	movwf	(sprintf@width+1)& (0+255),b
  1146  0006DE  0E00               	movlw	0
  1147  0006E0  6FD7               	movwf	sprintf@width& (0+255),b
  1148  0006E2                     
  1149                           ;doprnt.c: 600: width *= 10;
  1150                           
  1151                           ; BSR set to: 0
  1152  0006E2  C0D7  F08E         	movff	sprintf@width,___wmul@multiplier
  1153  0006E6  C0D8  F08F         	movff	sprintf@width+1,___wmul@multiplier+1
  1154  0006EA  0E00               	movlw	0
  1155  0006EC  0100               	movlb	0	; () banked
  1156  0006EE  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1157  0006F0  0E0A               	movlw	10
  1158  0006F2  6F90               	movwf	___wmul@multiplicand& (0+255),b
  1159  0006F4  EC22  F013         	call	___wmul	;wreg free
  1160  0006F8  C08E  F0D7         	movff	?___wmul,sprintf@width
  1161  0006FC  C08F  F0D8         	movff	?___wmul+1,sprintf@width+1
  1162                           
  1163                           ;doprnt.c: 601: width += *f++ - '0';
  1164  000700  0ED0               	movlw	208
  1165  000702  0100               	movlb	0	; () banked
  1166  000704  6FC6               	movwf	??_sprintf& (0+255),b
  1167  000706  0EFF               	movlw	255
  1168  000708  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  1169  00070A  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1170  00070E  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1171  000712                     	if	0	;tblptru may be non-zero
  1172  000712                     	endif
  1173  000712                     	if	0	;tblptru may be non-zero
  1174  000712                     	endif
  1175  000712  0008               	tblrd		*
  1176  000714  50F5               	movf	tablat,w,c
  1177  000716  6FC8               	movwf	(??_sprintf+2)& (0+255),b
  1178  000718  6BC9               	clrf	(??_sprintf+3)& (0+255),b
  1179  00071A  51C6               	movf	??_sprintf& (0+255),w,b
  1180  00071C  27C8               	addwf	(??_sprintf+2)& (0+255),f,b
  1181  00071E  51C7               	movf	(??_sprintf+1)& (0+255),w,b
  1182  000720  23C9               	addwfc	(??_sprintf+3)& (0+255),f,b
  1183  000722  51C8               	movf	(??_sprintf+2)& (0+255),w,b
  1184  000724  27D7               	addwf	sprintf@width& (0+255),f,b
  1185  000726  51C9               	movf	(??_sprintf+3)& (0+255),w,b
  1186  000728  23D8               	addwfc	(sprintf@width+1)& (0+255),f,b
  1187                           
  1188                           ; BSR set to: 0
  1189  00072A  4BC1               	infsnz	sprintf@f& (0+255),f,b
  1190  00072C  2BC2               	incf	(sprintf@f+1)& (0+255),f,b
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1194  00072E  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1195  000732  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1196  000736                     	if	0	;tblptru may be non-zero
  1197  000736                     	endif
  1198  000736                     	if	0	;tblptru may be non-zero
  1199  000736                     	endif
  1200  000736  0008               	tblrd		*
  1201  000738  50F5               	movf	tablat,w,c
  1202  00073A  EC5C  F013         	call	_isdigit
  1203  00073E  B0D8               	btfsc	status,0,c
  1204  000740  D7D0               	goto	l231
  1205  000742                     u2840:
  1206                           
  1207                           ;doprnt.c: 608: }
  1208                           ;doprnt.c: 611: if(*f == '.') {
  1209  000742  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1210  000746  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1211  00074A                     	if	0	;tblptru may be non-zero
  1212  00074A                     	endif
  1213  00074A                     	if	0	;tblptru may be non-zero
  1214  00074A                     	endif
  1215  00074A  0008               	tblrd		*
  1216  00074C  50F5               	movf	tablat,w,c
  1217  00074E  0A2E               	xorlw	46
  1218  000750  A4D8               	btfss	status,2,c
  1219  000752  D031               	goto	l233
  1220                           
  1221                           ;doprnt.c: 612: flag |= 0x4000;
  1222  000754  0100               	movlb	0	; () banked
  1223  000756  8DD6               	bsf	(sprintf@flag+1)& (0+255),6,b
  1224                           
  1225                           ;doprnt.c: 613: f++;
  1226  000758  4BC1               	infsnz	sprintf@f& (0+255),f,b
  1227  00075A  2BC2               	incf	(sprintf@f+1)& (0+255),f,b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;doprnt.c: 620: {
  1231                           ;doprnt.c: 621: prec = 0;
  1232  00075C  0E00               	movlw	0
  1233  00075E  6FE3               	movwf	(sprintf@prec+1)& (0+255),b
  1234  000760  0E00               	movlw	0
  1235  000762  6FE2               	movwf	sprintf@prec& (0+255),b
  1236                           
  1237                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1238  000764  D01D               	goto	l234
  1239  000766                     
  1240                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1241                           
  1242                           ; BSR set to: 0
  1243  000766  C0E2  F08E         	movff	sprintf@prec,___wmul@multiplier
  1244  00076A  C0E3  F08F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1245  00076E  0E00               	movlw	0
  1246  000770  0100               	movlb	0	; () banked
  1247  000772  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1248  000774  0E0A               	movlw	10
  1249  000776  6F90               	movwf	___wmul@multiplicand& (0+255),b
  1250  000778  EC22  F013         	call	___wmul	;wreg free
  1251  00077C  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1252  000780  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1253  000784                     	if	0	;tblptru may be non-zero
  1254  000784                     	endif
  1255  000784                     	if	0	;tblptru may be non-zero
  1256  000784                     	endif
  1257  000784  0008               	tblrd		*
  1258  000786  50F5               	movf	tablat,w,c
  1259  000788  0100               	movlb	0	; () banked
  1260  00078A  278E               	addwf	?___wmul& (0+255),f,b
  1261  00078C  0E00               	movlw	0
  1262  00078E  238F               	addwfc	(?___wmul+1)& (0+255),f,b
  1263  000790  0ED0               	movlw	208
  1264  000792  258E               	addwf	?___wmul& (0+255),w,b
  1265  000794  6FE2               	movwf	sprintf@prec& (0+255),b
  1266  000796  0EFF               	movlw	255
  1267  000798  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  1268  00079A  6FE3               	movwf	(sprintf@prec+1)& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271  00079C  4BC1               	infsnz	sprintf@f& (0+255),f,b
  1272  00079E  2BC2               	incf	(sprintf@f+1)& (0+255),f,b
  1273  0007A0                     l234:
  1274                           
  1275                           ; BSR set to: 0
  1276                           
  1277                           ; BSR set to: 0
  1278  0007A0  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1279  0007A4  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1280  0007A8                     	if	0	;tblptru may be non-zero
  1281  0007A8                     	endif
  1282  0007A8                     	if	0	;tblptru may be non-zero
  1283  0007A8                     	endif
  1284  0007A8  0008               	tblrd		*
  1285  0007AA  50F5               	movf	tablat,w,c
  1286  0007AC  EC5C  F013         	call	_isdigit
  1287  0007B0  A0D8               	btfss	status,0,c
  1288  0007B2  D00A               	goto	l238
  1289  0007B4  D7D8               	goto	l235
  1290  0007B6                     l233:
  1291                           
  1292                           ;doprnt.c: 626: prec = 0;
  1293  0007B6  0E00               	movlw	0
  1294  0007B8  0100               	movlb	0	; () banked
  1295  0007BA  6FE3               	movwf	(sprintf@prec+1)& (0+255),b
  1296  0007BC  0E00               	movlw	0
  1297  0007BE  6FE2               	movwf	sprintf@prec& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;doprnt.c: 628: flag |= 0x1000;
  1301  0007C0  89D6               	bsf	(sprintf@flag+1)& (0+255),4,b
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;doprnt.c: 630: }
  1305                           ;doprnt.c: 635: switch(c = *f++) {
  1306  0007C2  D002               	goto	l238
  1307  0007C4                     
  1308                           ; BSR set to: 0
  1309                           ;doprnt.c: 663: flag |= 0x400;
  1310                           
  1311                           ; BSR set to: 0
  1312  0007C4  85D6               	bsf	(sprintf@flag+1)& (0+255),2,b
  1313                           
  1314                           ;doprnt.c: 664: break;
  1315  0007C6  D012               	goto	l242
  1316  0007C8                     l238:
  1317                           
  1318                           ; BSR set to: 0
  1319  0007C8  C0C1  FFF6         	movff	sprintf@f,tblptrl
  1320  0007CC  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  1321  0007D0  0100               	movlb	0	; () banked
  1322  0007D2  4BC1               	infsnz	sprintf@f& (0+255),f,b
  1323  0007D4  2BC2               	incf	(sprintf@f+1)& (0+255),f,b
  1324  0007D6                     	if	0	;tblptru may be non-zero
  1325  0007D6                     	endif
  1326  0007D6                     	if	0	;tblptru may be non-zero
  1327  0007D6                     	endif
  1328  0007D6  0008               	tblrd		*
  1329  0007D8  CFF5 F0E4          	movff	tablat,sprintf@c
  1330  0007DC  51E4               	movf	sprintf@c& (0+255),w,b
  1331                           
  1332                           ; Switch size 1, requested type "space"
  1333                           ; Number of cases is 2, Range of values is 0 to 102
  1334                           ; switch strategies available:
  1335                           ; Name         Instructions Cycles
  1336                           ; simple_byte            7     4 (average)
  1337                           ;	Chosen strategy is simple_byte
  1338  0007DE  0A00               	xorlw	0	; case 0
  1339  0007E0  B4D8               	btfsc	status,2,c
  1340  0007E2  D39F               	goto	u3260
  1341  0007E4  0A66               	xorlw	102	; case 102
  1342  0007E6  B4D8               	btfsc	status,2,c
  1343  0007E8  D7ED               	goto	l241
  1344  0007EA  D38E               	goto	l300
  1345  0007EC                     l242:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 825: if(flag & (0x700)) {
  1349                           
  1350                           ; BSR set to: 0
  1351  0007EC  0E07               	movlw	7
  1352  0007EE  15D6               	andwf	(sprintf@flag+1)& (0+255),w,b
  1353  0007F0  B4D8               	btfsc	status,2,c
  1354  0007F2  D2FF               	goto	l244
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;doprnt.c: 827: if(flag & 0x1000)
  1358  0007F4  A9D6               	btfss	(sprintf@flag+1)& (0+255),4,b
  1359  0007F6  D004               	goto	l245
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;doprnt.c: 829: prec = 6;
  1363  0007F8  0E00               	movlw	0
  1364  0007FA  6FE3               	movwf	(sprintf@prec+1)& (0+255),b
  1365  0007FC  0E06               	movlw	6
  1366  0007FE  6FE2               	movwf	sprintf@prec& (0+255),b
  1367  000800                     l245:
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1371                           
  1372                           ; BSR set to: 0
  1373  000800  C0CF  FFD9         	movff	sprintf@ap,fsr2l
  1374  000804  C0D0  FFDA         	movff	sprintf@ap+1,fsr2h
  1375  000808  CFDE F0DF          	movff	postinc2,sprintf@fval
  1376  00080C  CFDE F0E0          	movff	postinc2,sprintf@fval+1
  1377  000810  CFDD F0E1          	movff	postdec2,sprintf@fval+2
  1378                           
  1379                           ; BSR set to: 0
  1380  000814  0E03               	movlw	3
  1381  000816  27CF               	addwf	sprintf@ap& (0+255),f,b
  1382  000818  0E00               	movlw	0
  1383  00081A  23D0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;doprnt.c: 831: if(fval < 0.0) {
  1387  00081C  AFE1               	btfss	(sprintf@fval+2)& (0+255),7,b
  1388  00081E  D011               	goto	l246
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;doprnt.c: 832: fval = -fval;
  1392  000820  C0DF  F080         	movff	sprintf@fval,___ftneg@f1
  1393  000824  C0E0  F081         	movff	sprintf@fval+1,___ftneg@f1+1
  1394  000828  C0E1  F082         	movff	sprintf@fval+2,___ftneg@f1+2
  1395  00082C  EC49  F013         	call	___ftneg	;wreg free
  1396  000830  C080  F0DF         	movff	?___ftneg,sprintf@fval
  1397  000834  C081  F0E0         	movff	?___ftneg+1,sprintf@fval+1
  1398  000838  C082  F0E1         	movff	?___ftneg+2,sprintf@fval+2
  1399                           
  1400                           ;doprnt.c: 833: flag |= 0x03;
  1401  00083C  0E03               	movlw	3
  1402  00083E  0100               	movlb	0	; () banked
  1403  000840  13D5               	iorwf	sprintf@flag& (0+255),f,b
  1404  000842                     l246:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;doprnt.c: 834: }
  1408                           ;doprnt.c: 835: exp = 0;
  1409                           
  1410                           ; BSR set to: 0
  1411  000842  0E00               	movlw	0
  1412  000844  6FDE               	movwf	(sprintf@exp+1)& (0+255),b
  1413  000846  0E00               	movlw	0
  1414  000848  6FDD               	movwf	sprintf@exp& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 836: if( fval!=0) {
  1418  00084A  51DF               	movf	sprintf@fval& (0+255),w,b
  1419  00084C  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1420  00084E  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1421  000850  B4D8               	btfsc	status,2,c
  1422  000852  D088               	goto	l251
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1426  000854  0E82               	movlw	130
  1427  000856  6FC6               	movwf	??_sprintf& (0+255),b
  1428  000858  0EFF               	movlw	255
  1429  00085A  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  1430  00085C  C0DF  F0C8         	movff	sprintf@fval,??_sprintf+2
  1431  000860  C0E0  F0C9         	movff	sprintf@fval+1,??_sprintf+3
  1432  000864  C0E1  F0CA         	movff	sprintf@fval+2,??_sprintf+4
  1433  000868  C0E2  F0CB         	movff	sprintf@fval+3,??_sprintf+5
  1434  00086C  0E10               	movlw	16
  1435  00086E  D005               	goto	u2910
  1436  000870                     u2915:
  1437  000870  90D8               	bcf	status,0,c
  1438  000872  33CB               	rrcf	(??_sprintf+5)& (0+255),f,b
  1439  000874  33CA               	rrcf	(??_sprintf+4)& (0+255),f,b
  1440  000876  33C9               	rrcf	(??_sprintf+3)& (0+255),f,b
  1441  000878  33C8               	rrcf	(??_sprintf+2)& (0+255),f,b
  1442  00087A                     u2910:
  1443  00087A  2EE8               	decfsz	wreg,f,c
  1444  00087C  D7F9               	goto	u2915
  1445  00087E  51C8               	movf	(??_sprintf+2)& (0+255),w,b
  1446  000880  25C6               	addwf	??_sprintf& (0+255),w,b
  1447  000882  6FDD               	movwf	sprintf@exp& (0+255),b
  1448  000884  0E00               	movlw	0
  1449  000886  21C7               	addwfc	(??_sprintf+1)& (0+255),w,b
  1450  000888  6FDE               	movwf	(sprintf@exp+1)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 838: exp--;
  1454  00088A  07DD               	decf	sprintf@exp& (0+255),f,b
  1455  00088C  A0D8               	btfss	status,0,c
  1456  00088E  07DE               	decf	(sprintf@exp+1)& (0+255),f,b
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;doprnt.c: 839: exp *= 3;
  1460  000890  C0DD  F08E         	movff	sprintf@exp,___wmul@multiplier
  1461  000894  C0DE  F08F         	movff	sprintf@exp+1,___wmul@multiplier+1
  1462  000898  0E00               	movlw	0
  1463  00089A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1464  00089C  0E03               	movlw	3
  1465  00089E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  1466  0008A0  EC22  F013         	call	___wmul	;wreg free
  1467  0008A4  C08E  F0DD         	movff	?___wmul,sprintf@exp
  1468  0008A8  C08F  F0DE         	movff	?___wmul+1,sprintf@exp+1
  1469                           
  1470                           ;doprnt.c: 840: exp /= 10;
  1471  0008AC  C0DD  F086         	movff	sprintf@exp,___awdiv@dividend
  1472  0008B0  C0DE  F087         	movff	sprintf@exp+1,___awdiv@dividend+1
  1473  0008B4  0E00               	movlw	0
  1474  0008B6  0100               	movlb	0	; () banked
  1475  0008B8  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  1476  0008BA  0E0A               	movlw	10
  1477  0008BC  6F88               	movwf	___awdiv@divisor& (0+255),b
  1478  0008BE  ECF6  F010         	call	___awdiv	;wreg free
  1479  0008C2  C086  F0DD         	movff	?___awdiv,sprintf@exp
  1480  0008C6  C087  F0DE         	movff	?___awdiv+1,sprintf@exp+1
  1481                           
  1482                           ;doprnt.c: 841: if(exp < 0)
  1483  0008CA  0100               	movlb	0	; () banked
  1484  0008CC  AFDE               	btfss	(sprintf@exp+1)& (0+255),7,b
  1485  0008CE  D003               	goto	l248
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;doprnt.c: 842: exp--;
  1489  0008D0  07DD               	decf	sprintf@exp& (0+255),f,b
  1490  0008D2  A0D8               	btfss	status,0,c
  1491  0008D4  07DE               	decf	(sprintf@exp+1)& (0+255),f,b
  1492  0008D6                     l248:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1496                           
  1497                           ; BSR set to: 0
  1498  0008D6  51DD               	movf	sprintf@exp& (0+255),w,b
  1499  0008D8  0800               	sublw	0
  1500  0008DA  EC98  F007         	call	_scale
  1501  0008DE  C0A3  F0D9         	movff	?_scale,sprintf@tmpval
  1502  0008E2  C0A4  F0DA         	movff	?_scale+1,sprintf@tmpval+1
  1503  0008E6  C0A5  F0DB         	movff	?_scale+2,sprintf@tmpval+2
  1504                           
  1505                           ;doprnt.c: 847: tmpval.integ *= fval;
  1506  0008EA  C0D9  F094         	movff	sprintf@tmpval,___ftmul@f1
  1507  0008EE  C0DA  F095         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1508  0008F2  C0DB  F096         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1509  0008F6  C0DF  F097         	movff	sprintf@fval,___ftmul@f2
  1510  0008FA  C0E0  F098         	movff	sprintf@fval+1,___ftmul@f2+1
  1511  0008FE  C0E1  F099         	movff	sprintf@fval+2,___ftmul@f2+2
  1512  000902  EC6E  F00D         	call	___ftmul	;wreg free
  1513  000906  C094  F0D9         	movff	?___ftmul,sprintf@tmpval
  1514  00090A  C095  F0DA         	movff	?___ftmul+1,sprintf@tmpval+1
  1515  00090E  C096  F0DB         	movff	?___ftmul+2,sprintf@tmpval+2
  1516                           
  1517                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1518  000912  C0D9  F080         	movff	sprintf@tmpval,___ftge@ff1
  1519  000916  C0DA  F081         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1520  00091A  C0DB  F082         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1521  00091E  0E00               	movlw	0
  1522  000920  0100               	movlb	0	; () banked
  1523  000922  6F83               	movwf	___ftge@ff2& (0+255),b
  1524  000924  0E80               	movlw	128
  1525  000926  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  1526  000928  0E3F               	movlw	63
  1527  00092A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  1528  00092C  ECAD  F010         	call	___ftge	;wreg free
  1529  000930  0100               	movlb	0	; () banked
  1530  000932  B0D8               	btfsc	status,0,c
  1531  000934  D004               	goto	l249
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 849: exp--;
  1535  000936  07DD               	decf	sprintf@exp& (0+255),f,b
  1536  000938  A0D8               	btfss	status,0,c
  1537  00093A  07DE               	decf	(sprintf@exp+1)& (0+255),f,b
  1538  00093C  D013               	goto	l251
  1539  00093E                     l249:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1543                           
  1544                           ; BSR set to: 0
  1545  00093E  C0D9  F080         	movff	sprintf@tmpval,___ftge@ff1
  1546  000942  C0DA  F081         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1547  000946  C0DB  F082         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1548  00094A  0E00               	movlw	0
  1549  00094C  6F83               	movwf	___ftge@ff2& (0+255),b
  1550  00094E  0E20               	movlw	32
  1551  000950  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  1552  000952  0E41               	movlw	65
  1553  000954  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  1554  000956  ECAD  F010         	call	___ftge	;wreg free
  1555  00095A  0100               	movlb	0	; () banked
  1556  00095C  A0D8               	btfss	status,0,c
  1557  00095E  D002               	goto	l251
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;doprnt.c: 851: exp++;
  1561  000960  4BDD               	infsnz	sprintf@exp& (0+255),f,b
  1562  000962  2BDE               	incf	(sprintf@exp+1)& (0+255),f,b
  1563  000964                     l251:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 852: }
  1567                           ;doprnt.c: 1112: if(prec <= 12)
  1568                           
  1569                           ; BSR set to: 0
  1570                           
  1571                           ; BSR set to: 0
  1572                           
  1573                           ; BSR set to: 0
  1574  000964  BFE3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1575  000966  D006               	goto	u2950
  1576  000968  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  1577  00096A  E11B               	bnz	l3057
  1578  00096C  0E0D               	movlw	13
  1579  00096E  5DE2               	subwf	sprintf@prec& (0+255),w,b
  1580  000970  B0D8               	btfsc	status,0,c
  1581  000972  D017               	goto	l252
  1582  000974                     u2950:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;doprnt.c: 1113: fval += fround(prec);
  1586  000974  C0DF  F0AD         	movff	sprintf@fval,___ftadd@f1
  1587  000978  C0E0  F0AE         	movff	sprintf@fval+1,___ftadd@f1+1
  1588  00097C  C0E1  F0AF         	movff	sprintf@fval+2,___ftadd@f1+2
  1589  000980  51E2               	movf	sprintf@prec& (0+255),w,b
  1590  000982  ECB4  F009         	call	_fround
  1591  000986  C0A3  F0B0         	movff	?_fround,___ftadd@f2
  1592  00098A  C0A4  F0B1         	movff	?_fround+1,___ftadd@f2+1
  1593  00098E  C0A5  F0B2         	movff	?_fround+2,___ftadd@f2+2
  1594  000992  ECEC  F00A         	call	___ftadd	;wreg free
  1595  000996  C0AD  F0DF         	movff	?___ftadd,sprintf@fval
  1596  00099A  C0AE  F0E0         	movff	?___ftadd+1,sprintf@fval+1
  1597  00099E  C0AF  F0E1         	movff	?___ftadd+2,sprintf@fval+2
  1598  0009A2                     l252:
  1599  0009A2                     l3057:
  1600                           
  1601                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1602  0009A2  0100               	movlb	0	; () banked
  1603  0009A4  BFDE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1604  0009A6  D006               	goto	u2960
  1605  0009A8  51DE               	movf	(sprintf@exp+1)& (0+255),w,b
  1606  0009AA  E11F               	bnz	l3065
  1607  0009AC  0E0A               	movlw	10
  1608  0009AE  5DDD               	subwf	sprintf@exp& (0+255),w,b
  1609  0009B0  B0D8               	btfsc	status,0,c
  1610  0009B2  D01B               	goto	u2990
  1611  0009B4                     u2960:
  1612                           
  1613                           ; BSR set to: 0
  1614  0009B4  51DF               	movf	sprintf@fval& (0+255),w,b
  1615  0009B6  11E0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1616  0009B8  11E1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1617  0009BA  B4D8               	btfsc	status,2,c
  1618  0009BC  D054               	goto	l253
  1619                           
  1620                           ; BSR set to: 0
  1621  0009BE  C0DF  F0AA         	movff	sprintf@fval,___fttol@f1
  1622  0009C2  C0E0  F0AB         	movff	sprintf@fval+1,___fttol@f1+1
  1623  0009C6  C0E1  F0AC         	movff	sprintf@fval+2,___fttol@f1+2
  1624  0009CA  ECF2  F00C         	call	___fttol	;wreg free
  1625  0009CE  0100               	movlb	0	; () banked
  1626  0009D0  51AA               	movf	?___fttol& (0+255),w,b
  1627  0009D2  11AB               	iorwf	(?___fttol+1)& (0+255),w,b
  1628  0009D4  11AC               	iorwf	(?___fttol+2)& (0+255),w,b
  1629  0009D6  11AD               	iorwf	(?___fttol+3)& (0+255),w,b
  1630  0009D8  B4D8               	btfsc	status,2,c
  1631                           
  1632                           ; BSR set to: 0
  1633  0009DA  BFDE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1634  0009DC  D044               	goto	l253
  1635  0009DE  51DE               	movf	(sprintf@exp+1)& (0+255),w,b
  1636  0009E0  E104               	bnz	l3065
  1637  0009E2  0E02               	movlw	2
  1638  0009E4  5DDD               	subwf	sprintf@exp& (0+255),w,b
  1639  0009E6  A0D8               	btfss	status,0,c
  1640  0009E8  D03E               	goto	l253
  1641  0009EA                     u2990:
  1642  0009EA                     l3065:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1646  0009EA  C0D9  F080         	movff	sprintf@tmpval,___ftge@ff1
  1647  0009EE  C0DA  F081         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1648  0009F2  C0DB  F082         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1649  0009F6  0E70               	movlw	112
  1650  0009F8  6F83               	movwf	___ftge@ff2& (0+255),b
  1651  0009FA  0E89               	movlw	137
  1652  0009FC  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  1653  0009FE  0E40               	movlw	64
  1654  000A00  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  1655  000A02  ECAD  F010         	call	___ftge	;wreg free
  1656  000A06  0100               	movlb	0	; () banked
  1657  000A08  B0D8               	btfsc	status,0,c
  1658  000A0A  D002               	goto	l256
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1662  000A0C  0EF7               	movlw	247
  1663  000A0E  D001               	goto	L1
  1664  000A10                     l256:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1668                           
  1669                           ; BSR set to: 0
  1670  000A10  0EF8               	movlw	248
  1671  000A12                     L1:
  1672  000A12  27DD               	addwf	sprintf@exp& (0+255),f,b
  1673  000A14  0EFF               	movlw	255
  1674  000A16  23DE               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;doprnt.c: 1124: }
  1678                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1679                           
  1680                           ; BSR set to: 0
  1681  000A18  51DD               	movf	sprintf@exp& (0+255),w,b
  1682  000A1A  EC98  F007         	call	_scale
  1683  000A1E  C0A3  F0D9         	movff	?_scale,sprintf@tmpval
  1684  000A22  C0A4  F0DA         	movff	?_scale+1,sprintf@tmpval+1
  1685  000A26  C0A5  F0DB         	movff	?_scale+2,sprintf@tmpval+2
  1686                           
  1687                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1688  000A2A  C0DF  F080         	movff	sprintf@fval,__tdiv_to_l_@f1
  1689  000A2E  C0E0  F081         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1690  000A32  C0E1  F082         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1691  000A36  C0D9  F083         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1692  000A3A  C0DA  F084         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1693  000A3E  C0DB  F085         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1694  000A42  ECC3  F00B         	call	__tdiv_to_l_	;wreg free
  1695  000A46  C080  F0D1         	movff	?__tdiv_to_l_,sprintf@val
  1696  000A4A  C081  F0D2         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1697  000A4E  C082  F0D3         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1698  000A52  C083  F0D4         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1699                           
  1700                           ;doprnt.c: 1129: fval = 0.0;
  1701  000A56  0E00               	movlw	0
  1702  000A58  0100               	movlb	0	; () banked
  1703  000A5A  6FDF               	movwf	sprintf@fval& (0+255),b
  1704  000A5C  0E00               	movlw	0
  1705  000A5E  6FE0               	movwf	(sprintf@fval+1)& (0+255),b
  1706  000A60  0E00               	movlw	0
  1707  000A62  6FE1               	movwf	(sprintf@fval+2)& (0+255),b
  1708                           
  1709                           ;doprnt.c: 1130: } else {
  1710  000A64  D033               	goto	l262
  1711  000A66                     l253:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1715                           
  1716                           ; BSR set to: 0
  1717  000A66  C0DF  F0AA         	movff	sprintf@fval,___fttol@f1
  1718  000A6A  C0E0  F0AB         	movff	sprintf@fval+1,___fttol@f1+1
  1719  000A6E  C0E1  F0AC         	movff	sprintf@fval+2,___fttol@f1+2
  1720  000A72  ECF2  F00C         	call	___fttol	;wreg free
  1721  000A76  C0AA  F0D1         	movff	?___fttol,sprintf@val
  1722  000A7A  C0AB  F0D2         	movff	?___fttol+1,sprintf@val+1
  1723  000A7E  C0AC  F0D3         	movff	?___fttol+2,sprintf@val+2
  1724  000A82  C0AD  F0D4         	movff	?___fttol+3,sprintf@val+3
  1725                           
  1726                           ;doprnt.c: 1132: fval -= (double)val;
  1727  000A86  C0DF  F0B9         	movff	sprintf@fval,___ftsub@f1
  1728  000A8A  C0E0  F0BA         	movff	sprintf@fval+1,___ftsub@f1+1
  1729  000A8E  C0E1  F0BB         	movff	sprintf@fval+2,___ftsub@f1+2
  1730  000A92  C0D1  F088         	movff	sprintf@val,___lltoft@c
  1731  000A96  C0D2  F089         	movff	sprintf@val+1,___lltoft@c+1
  1732  000A9A  C0D3  F08A         	movff	sprintf@val+2,___lltoft@c+2
  1733  000A9E  C0D4  F08B         	movff	sprintf@val+3,___lltoft@c+3
  1734  000AA2  ECE8  F011         	call	___lltoft	;wreg free
  1735  000AA6  C088  F0BC         	movff	?___lltoft,___ftsub@f2
  1736  000AAA  C089  F0BD         	movff	?___lltoft+1,___ftsub@f2+1
  1737  000AAE  C08A  F0BE         	movff	?___lltoft+2,___ftsub@f2+2
  1738  000AB2  EC91  F012         	call	___ftsub	;wreg free
  1739  000AB6  C0B9  F0DF         	movff	?___ftsub,sprintf@fval
  1740  000ABA  C0BA  F0E0         	movff	?___ftsub+1,sprintf@fval+1
  1741  000ABE  C0BB  F0E1         	movff	?___ftsub+2,sprintf@fval+2
  1742                           
  1743                           ;doprnt.c: 1133: exp = 0;
  1744  000AC2  0E00               	movlw	0
  1745  000AC4  0100               	movlb	0	; () banked
  1746  000AC6  6FDE               	movwf	(sprintf@exp+1)& (0+255),b
  1747  000AC8  0E00               	movlw	0
  1748  000ACA  6FDD               	movwf	sprintf@exp& (0+255),b
  1749  000ACC                     l262:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;doprnt.c: 1134: }
  1753                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1754                           
  1755                           ; BSR set to: 0
  1756  000ACC  0E01               	movlw	1
  1757  000ACE  6FE4               	movwf	sprintf@c& (0+255),b
  1758  000AD0                     l3085:
  1759                           
  1760                           ; BSR set to: 0
  1761  000AD0  0E0A               	movlw	10
  1762  000AD2  19E4               	xorwf	sprintf@c& (0+255),w,b
  1763  000AD4  B4D8               	btfsc	status,2,c
  1764  000AD6  D018               	goto	u3030
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;doprnt.c: 1137: if(val < dpowers[c])
  1768                           
  1769                           ; BSR set to: 0
  1770                           
  1771                           ; BSR set to: 0
  1772  000AD8  51E4               	movf	sprintf@c& (0+255),w,b
  1773  000ADA  0D04               	mullw	4
  1774  000ADC  0E01               	movlw	low _dpowers
  1775  000ADE  24F3               	addwf	prodl,w,c
  1776  000AE0  6EF6               	movwf	tblptrl,c
  1777  000AE2  0E06               	movlw	high _dpowers
  1778  000AE4  20F4               	addwfc	prodh,w,c
  1779  000AE6  6EF7               	movwf	tblptrh,c
  1780  000AE8                     	if	0	;There are less than 3 active tblptr bytes
  1781  000AE8                     	endif
  1782  000AE8  0009               	tblrd		*+
  1783  000AEA  50F5               	movf	tablat,w,c
  1784  000AEC  5DD1               	subwf	sprintf@val& (0+255),w,b
  1785  000AEE  0009               	tblrd		*+
  1786  000AF0  50F5               	movf	tablat,w,c
  1787  000AF2  59D2               	subwfb	(sprintf@val+1)& (0+255),w,b
  1788  000AF4  0009               	tblrd		*+
  1789  000AF6  50F5               	movf	tablat,w,c
  1790  000AF8  59D3               	subwfb	(sprintf@val+2)& (0+255),w,b
  1791  000AFA  0009               	tblrd		*+
  1792  000AFC  50F5               	movf	tablat,w,c
  1793  000AFE  59D4               	subwfb	(sprintf@val+3)& (0+255),w,b
  1794  000B00  A0D8               	btfss	status,0,c
  1795  000B02  D002               	goto	u3030
  1796                           
  1797                           ; BSR set to: 0
  1798                           
  1799                           ; BSR set to: 0
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;doprnt.c: 1138: break;
  1803  000B04  2BE4               	incf	sprintf@c& (0+255),f,b
  1804  000B06  D7E4               	goto	l3085
  1805  000B08                     u3030:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 1142: width -= prec + c + exp;
  1809                           
  1810                           ; BSR set to: 0
  1811  000B08  C0E4  F0C6         	movff	sprintf@c,??_sprintf
  1812  000B0C  6BC7               	clrf	(??_sprintf+1)& (0+255),b
  1813  000B0E  BFC6               	btfsc	??_sprintf& (0+255),7,b
  1814  000B10  07C7               	decf	(??_sprintf+1)& (0+255),f,b
  1815  000B12  51E2               	movf	sprintf@prec& (0+255),w,b
  1816  000B14  27C6               	addwf	??_sprintf& (0+255),f,b
  1817  000B16  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  1818  000B18  23C7               	addwfc	(??_sprintf+1)& (0+255),f,b
  1819  000B1A  51DD               	movf	sprintf@exp& (0+255),w,b
  1820  000B1C  27C6               	addwf	??_sprintf& (0+255),f,b
  1821  000B1E  51DE               	movf	(sprintf@exp+1)& (0+255),w,b
  1822  000B20  23C7               	addwfc	(??_sprintf+1)& (0+255),f,b
  1823  000B22  51C6               	movf	??_sprintf& (0+255),w,b
  1824  000B24  5FD7               	subwf	sprintf@width& (0+255),f,b
  1825  000B26  51C7               	movf	(??_sprintf+1)& (0+255),w,b
  1826  000B28  5BD8               	subwfb	(sprintf@width+1)& (0+255),f,b
  1827                           
  1828                           ;doprnt.c: 1143: if(
  1829                           ;doprnt.c: 1147: prec)
  1830  000B2A  51E2               	movf	sprintf@prec& (0+255),w,b
  1831  000B2C  11E3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1832  000B2E  B4D8               	btfsc	status,2,c
  1833  000B30  D003               	goto	l266
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;doprnt.c: 1148: width--;
  1837  000B32  07D7               	decf	sprintf@width& (0+255),f,b
  1838  000B34  A0D8               	btfss	status,0,c
  1839  000B36  07D8               	decf	(sprintf@width+1)& (0+255),f,b
  1840  000B38                     l266:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 1149: if(flag & 0x03)
  1844                           
  1845                           ; BSR set to: 0
  1846  000B38  0E03               	movlw	3
  1847  000B3A  15D5               	andwf	sprintf@flag& (0+255),w,b
  1848  000B3C  6FC6               	movwf	??_sprintf& (0+255),b
  1849  000B3E  0E00               	movlw	0
  1850  000B40  15D6               	andwf	(sprintf@flag+1)& (0+255),w,b
  1851  000B42  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  1852  000B44  51C6               	movf	??_sprintf& (0+255),w,b
  1853  000B46  11C7               	iorwf	(??_sprintf+1)& (0+255),w,b
  1854  000B48  B4D8               	btfsc	status,2,c
  1855  000B4A  D00C               	goto	l268
  1856  000B4C  D008               	goto	l3109
  1857  000B4E                     l3105:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1861  000B4E  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  1862  000B52  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  1863  000B56  0E20               	movlw	32
  1864  000B58  6EDF               	movwf	indf2,c
  1865                           
  1866                           ; BSR set to: 0
  1867  000B5A  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  1868  000B5C  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  1869  000B5E                     l3109:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;doprnt.c: 1182: width--;
  1873  000B5E  07D7               	decf	sprintf@width& (0+255),f,b
  1874  000B60  A0D8               	btfss	status,0,c
  1875  000B62  07D8               	decf	(sprintf@width+1)& (0+255),f,b
  1876  000B64                     l268:
  1877                           
  1878                           ; BSR set to: 0
  1879                           
  1880                           ; BSR set to: 0
  1881  000B64  BFD8               	btfsc	(sprintf@width+1)& (0+255),7,b
  1882  000B66  D005               	goto	u3060
  1883  000B68  51D8               	movf	(sprintf@width+1)& (0+255),w,b
  1884  000B6A  E1F1               	bnz	l3105
  1885  000B6C  05D7               	decf	sprintf@width& (0+255),w,b
  1886  000B6E  B0D8               	btfsc	status,0,c
  1887  000B70  D7EE               	goto	l269
  1888  000B72                     u3060:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;doprnt.c: 1183: }
  1892                           ;doprnt.c: 1188: if(flag & 0x03)
  1893                           
  1894                           ; BSR set to: 0
  1895  000B72  0E03               	movlw	3
  1896  000B74  15D5               	andwf	sprintf@flag& (0+255),w,b
  1897  000B76  6FC6               	movwf	??_sprintf& (0+255),b
  1898  000B78  0E00               	movlw	0
  1899  000B7A  15D6               	andwf	(sprintf@flag+1)& (0+255),w,b
  1900  000B7C  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  1901  000B7E  51C6               	movf	??_sprintf& (0+255),w,b
  1902  000B80  11C7               	iorwf	(??_sprintf+1)& (0+255),w,b
  1903  000B82  B4D8               	btfsc	status,2,c
  1904  000B84  D051               	goto	l272
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1908  000B86  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  1909  000B8A  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  1910  000B8E  0E2D               	movlw	45
  1911  000B90  D048               	goto	L2
  1912  000B92                     
  1913                           ; BSR set to: 0
  1914                           ;doprnt.c: 1200: {
  1915                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1916                           
  1917                           ; BSR set to: 0
  1918  000B92  C0D1  F080         	movff	sprintf@val,___lldiv@dividend
  1919  000B96  C0D2  F081         	movff	sprintf@val+1,___lldiv@dividend+1
  1920  000B9A  C0D3  F082         	movff	sprintf@val+2,___lldiv@dividend+2
  1921  000B9E  C0D4  F083         	movff	sprintf@val+3,___lldiv@dividend+3
  1922  000BA2  51E4               	movf	sprintf@c& (0+255),w,b
  1923  000BA4  0D04               	mullw	4
  1924  000BA6  0E01               	movlw	low _dpowers
  1925  000BA8  24F3               	addwf	prodl,w,c
  1926  000BAA  6EF6               	movwf	tblptrl,c
  1927  000BAC  0E06               	movlw	high _dpowers
  1928  000BAE  20F4               	addwfc	prodh,w,c
  1929  000BB0  6EF7               	movwf	tblptrh,c
  1930  000BB2                     	if	0	;There are less than 3 active tblptr bytes
  1931  000BB2                     	endif
  1932  000BB2  0009               	tblrd		*+
  1933  000BB4  CFF5 F084          	movff	tablat,___lldiv@divisor
  1934  000BB8  0009               	tblrd		*+
  1935  000BBA  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  1936  000BBE  0009               	tblrd		*+
  1937  000BC0  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  1938  000BC4  000A               	tblrd		*-
  1939  000BC6  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  1940  000BCA  EC39  F011         	call	___lldiv	;wreg free
  1941  000BCE  C080  F0D9         	movff	?___lldiv,sprintf@tmpval
  1942  000BD2  C081  F0DA         	movff	?___lldiv+1,sprintf@tmpval+1
  1943  000BD6  C082  F0DB         	movff	?___lldiv+2,sprintf@tmpval+2
  1944  000BDA  C083  F0DC         	movff	?___lldiv+3,sprintf@tmpval+3
  1945                           
  1946                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1947  000BDE  C0D9  F080         	movff	sprintf@tmpval,___llmod@dividend
  1948  000BE2  C0DA  F081         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1949  000BE6  C0DB  F082         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1950  000BEA  C0DC  F083         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1951  000BEE  0E0A               	movlw	10
  1952  000BF0  0100               	movlb	0	; () banked
  1953  000BF2  6F84               	movwf	___llmod@divisor& (0+255),b
  1954  000BF4  0E00               	movlw	0
  1955  000BF6  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  1956  000BF8  0E00               	movlw	0
  1957  000BFA  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  1958  000BFC  0E00               	movlw	0
  1959  000BFE  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  1960  000C00  ECB4  F011         	call	___llmod	;wreg free
  1961  000C04  C080  F0D9         	movff	?___llmod,sprintf@tmpval
  1962  000C08  C081  F0DA         	movff	?___llmod+1,sprintf@tmpval+1
  1963  000C0C  C082  F0DB         	movff	?___llmod+2,sprintf@tmpval+2
  1964  000C10  C083  F0DC         	movff	?___llmod+3,sprintf@tmpval+3
  1965                           
  1966                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1967  000C14  0100               	movlb	0	; () banked
  1968  000C16  51D9               	movf	sprintf@tmpval& (0+255),w,b
  1969  000C18  0F30               	addlw	48
  1970  000C1A  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  1971  000C1E  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  1972  000C22                     L2:
  1973  000C22  6EDF               	movwf	indf2,c
  1974                           
  1975                           ; BSR set to: 0
  1976  000C24  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  1977  000C26  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  1978  000C28                     l272:
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  000C28  07E4               	decf	sprintf@c& (0+255),f,b
  1984  000C2A  29E4               	incf	sprintf@c& (0+255),w,b
  1985  000C2C  B4D8               	btfsc	status,2,c
  1986  000C2E  D00C               	goto	l275
  1987  000C30  D7B0               	goto	l273
  1988  000C32                     l3129:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1992  000C32  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  1993  000C36  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  1994  000C3A  0E30               	movlw	48
  1995  000C3C  6EDF               	movwf	indf2,c
  1996                           
  1997                           ; BSR set to: 0
  1998  000C3E  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  1999  000C40  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 1209: exp--;
  2003  000C42  07DD               	decf	sprintf@exp& (0+255),f,b
  2004  000C44  A0D8               	btfss	status,0,c
  2005  000C46  07DE               	decf	(sprintf@exp+1)& (0+255),f,b
  2006  000C48                     l275:
  2007                           
  2008                           ; BSR set to: 0
  2009                           
  2010                           ; BSR set to: 0
  2011  000C48  BFDE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2012  000C4A  D005               	goto	u3090
  2013  000C4C  51DE               	movf	(sprintf@exp+1)& (0+255),w,b
  2014  000C4E  E1F1               	bnz	l3129
  2015  000C50  05DD               	decf	sprintf@exp& (0+255),w,b
  2016  000C52  B0D8               	btfsc	status,0,c
  2017  000C54  D7EE               	goto	l276
  2018  000C56                     u3090:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;doprnt.c: 1210: }
  2022                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2023                           
  2024                           ; BSR set to: 0
  2025  000C56  BFE3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2026  000C58  D009               	goto	l278
  2027  000C5A  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  2028  000C5C  E104               	bnz	u3100
  2029  000C5E  0E09               	movlw	9
  2030  000C60  5DE2               	subwf	sprintf@prec& (0+255),w,b
  2031  000C62  A0D8               	btfss	status,0,c
  2032  000C64  D003               	goto	l278
  2033  000C66                     u3100:
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2037  000C66  0E08               	movlw	8
  2038  000C68  6FE4               	movwf	sprintf@c& (0+255),b
  2039  000C6A  D002               	goto	l279
  2040  000C6C                     l278:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;doprnt.c: 1213: else
  2044                           ;doprnt.c: 1214: c = prec;
  2045  000C6C  C0E2  F0E4         	movff	sprintf@prec,sprintf@c
  2046  000C70                     l279:
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 1215: prec -= c;
  2050                           
  2051                           ; BSR set to: 0
  2052  000C70  51E4               	movf	sprintf@c& (0+255),w,b
  2053  000C72  5FE2               	subwf	sprintf@prec& (0+255),f,b
  2054  000C74  0E00               	movlw	0
  2055  000C76  BFE4               	btfsc	sprintf@c& (0+255),7,b
  2056  000C78  0EFF               	movlw	255
  2057  000C7A  5BE3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;doprnt.c: 1219: if(c)
  2061  000C7C  51E4               	movf	sprintf@c& (0+255),w,b
  2062  000C7E  B4D8               	btfsc	status,2,c
  2063  000C80  D008               	goto	l280
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2067  000C82  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2068  000C86  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2069  000C8A  0E2E               	movlw	46
  2070  000C8C  6EDF               	movwf	indf2,c
  2071                           
  2072                           ; BSR set to: 0
  2073  000C8E  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  2074  000C90  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2075  000C92                     l280:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2079                           
  2080                           ; BSR set to: 0
  2081  000C92  51E4               	movf	sprintf@c& (0+255),w,b
  2082  000C94  EC98  F007         	call	_scale
  2083  000C98  C0A3  F0CC         	movff	?_scale,_sprintf$1062
  2084  000C9C  C0A4  F0CD         	movff	?_scale+1,_sprintf$1062+1
  2085  000CA0  C0A5  F0CE         	movff	?_scale+2,_sprintf$1062+2
  2086                           
  2087                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2088  000CA4  C0DF  F097         	movff	sprintf@fval,___ftmul@f2
  2089  000CA8  C0E0  F098         	movff	sprintf@fval+1,___ftmul@f2+1
  2090  000CAC  C0E1  F099         	movff	sprintf@fval+2,___ftmul@f2+2
  2091  000CB0  C0CC  F094         	movff	_sprintf$1062,___ftmul@f1
  2092  000CB4  C0CD  F095         	movff	_sprintf$1062+1,___ftmul@f1+1
  2093  000CB8  C0CE  F096         	movff	_sprintf$1062+2,___ftmul@f1+2
  2094  000CBC  EC6E  F00D         	call	___ftmul	;wreg free
  2095  000CC0  C094  F0AA         	movff	?___ftmul,___fttol@f1
  2096  000CC4  C095  F0AB         	movff	?___ftmul+1,___fttol@f1+1
  2097  000CC8  C096  F0AC         	movff	?___ftmul+2,___fttol@f1+2
  2098  000CCC  ECF2  F00C         	call	___fttol	;wreg free
  2099  000CD0  C0AA  F0D1         	movff	?___fttol,sprintf@val
  2100  000CD4  C0AB  F0D2         	movff	?___fttol+1,sprintf@val+1
  2101  000CD8  C0AC  F0D3         	movff	?___fttol+2,sprintf@val+2
  2102  000CDC  C0AD  F0D4         	movff	?___fttol+3,sprintf@val+3
  2103                           
  2104                           ;doprnt.c: 1228: while(c--) {
  2105  000CE0  D072               	goto	l281
  2106  000CE2                     
  2107                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2108  000CE2  C0D1  F080         	movff	sprintf@val,___lldiv@dividend
  2109  000CE6  C0D2  F081         	movff	sprintf@val+1,___lldiv@dividend+1
  2110  000CEA  C0D3  F082         	movff	sprintf@val+2,___lldiv@dividend+2
  2111  000CEE  C0D4  F083         	movff	sprintf@val+3,___lldiv@dividend+3
  2112  000CF2  0100               	movlb	0	; () banked
  2113  000CF4  51E4               	movf	sprintf@c& (0+255),w,b
  2114  000CF6  0D04               	mullw	4
  2115  000CF8  0E01               	movlw	low _dpowers
  2116  000CFA  24F3               	addwf	prodl,w,c
  2117  000CFC  6EF6               	movwf	tblptrl,c
  2118  000CFE  0E06               	movlw	high _dpowers
  2119  000D00  20F4               	addwfc	prodh,w,c
  2120  000D02  6EF7               	movwf	tblptrh,c
  2121  000D04                     	if	0	;There are less than 3 active tblptr bytes
  2122  000D04                     	endif
  2123  000D04  0009               	tblrd		*+
  2124  000D06  CFF5 F084          	movff	tablat,___lldiv@divisor
  2125  000D0A  0009               	tblrd		*+
  2126  000D0C  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2127  000D10  0009               	tblrd		*+
  2128  000D12  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2129  000D16  000A               	tblrd		*-
  2130  000D18  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2131  000D1C  EC39  F011         	call	___lldiv	;wreg free
  2132  000D20  C080  F0D9         	movff	?___lldiv,sprintf@tmpval
  2133  000D24  C081  F0DA         	movff	?___lldiv+1,sprintf@tmpval+1
  2134  000D28  C082  F0DB         	movff	?___lldiv+2,sprintf@tmpval+2
  2135  000D2C  C083  F0DC         	movff	?___lldiv+3,sprintf@tmpval+3
  2136                           
  2137                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2138  000D30  C0D9  F080         	movff	sprintf@tmpval,___llmod@dividend
  2139  000D34  C0DA  F081         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2140  000D38  C0DB  F082         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2141  000D3C  C0DC  F083         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2142  000D40  0E0A               	movlw	10
  2143  000D42  0100               	movlb	0	; () banked
  2144  000D44  6F84               	movwf	___llmod@divisor& (0+255),b
  2145  000D46  0E00               	movlw	0
  2146  000D48  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  2147  000D4A  0E00               	movlw	0
  2148  000D4C  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  2149  000D4E  0E00               	movlw	0
  2150  000D50  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  2151  000D52  ECB4  F011         	call	___llmod	;wreg free
  2152  000D56  C080  F0D9         	movff	?___llmod,sprintf@tmpval
  2153  000D5A  C081  F0DA         	movff	?___llmod+1,sprintf@tmpval+1
  2154  000D5E  C082  F0DB         	movff	?___llmod+2,sprintf@tmpval+2
  2155  000D62  C083  F0DC         	movff	?___llmod+3,sprintf@tmpval+3
  2156                           
  2157                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2158  000D66  0100               	movlb	0	; () banked
  2159  000D68  51D9               	movf	sprintf@tmpval& (0+255),w,b
  2160  000D6A  0F30               	addlw	48
  2161  000D6C  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2162  000D70  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2163  000D74  6EDF               	movwf	indf2,c
  2164                           
  2165                           ; BSR set to: 0
  2166  000D76  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  2167  000D78  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;doprnt.c: 1232: val %= dpowers[c];
  2171  000D7A  C0D1  F080         	movff	sprintf@val,___llmod@dividend
  2172  000D7E  C0D2  F081         	movff	sprintf@val+1,___llmod@dividend+1
  2173  000D82  C0D3  F082         	movff	sprintf@val+2,___llmod@dividend+2
  2174  000D86  C0D4  F083         	movff	sprintf@val+3,___llmod@dividend+3
  2175  000D8A  51E4               	movf	sprintf@c& (0+255),w,b
  2176  000D8C  0D04               	mullw	4
  2177  000D8E  0E01               	movlw	low _dpowers
  2178  000D90  24F3               	addwf	prodl,w,c
  2179  000D92  6EF6               	movwf	tblptrl,c
  2180  000D94  0E06               	movlw	high _dpowers
  2181  000D96  20F4               	addwfc	prodh,w,c
  2182  000D98  6EF7               	movwf	tblptrh,c
  2183  000D9A                     	if	0	;There are less than 3 active tblptr bytes
  2184  000D9A                     	endif
  2185  000D9A  0009               	tblrd		*+
  2186  000D9C  CFF5 F084          	movff	tablat,___llmod@divisor
  2187  000DA0  0009               	tblrd		*+
  2188  000DA2  CFF5 F085          	movff	tablat,___llmod@divisor+1
  2189  000DA6  0009               	tblrd		*+
  2190  000DA8  CFF5 F086          	movff	tablat,___llmod@divisor+2
  2191  000DAC  000A               	tblrd		*-
  2192  000DAE  CFF5 F087          	movff	tablat,___llmod@divisor+3
  2193  000DB2  ECB4  F011         	call	___llmod	;wreg free
  2194  000DB6  C080  F0D1         	movff	?___llmod,sprintf@val
  2195  000DBA  C081  F0D2         	movff	?___llmod+1,sprintf@val+1
  2196  000DBE  C082  F0D3         	movff	?___llmod+2,sprintf@val+2
  2197  000DC2  C083  F0D4         	movff	?___llmod+3,sprintf@val+3
  2198  000DC6                     l281:
  2199  000DC6  0100               	movlb	0	; () banked
  2200  000DC8  07E4               	decf	sprintf@c& (0+255),f,b
  2201  000DCA  29E4               	incf	sprintf@c& (0+255),w,b
  2202  000DCC  B4D8               	btfsc	status,2,c
  2203  000DCE  D00C               	goto	l284
  2204  000DD0  D788               	goto	l282
  2205  000DD2                     
  2206                           ; BSR set to: 0
  2207                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2208                           
  2209                           ; BSR set to: 0
  2210  000DD2  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2211  000DD6  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2212  000DDA  0E30               	movlw	48
  2213  000DDC  6EDF               	movwf	indf2,c
  2214                           
  2215                           ; BSR set to: 0
  2216  000DDE  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  2217  000DE0  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;doprnt.c: 1237: prec--;
  2221  000DE2  07E2               	decf	sprintf@prec& (0+255),f,b
  2222  000DE4  A0D8               	btfss	status,0,c
  2223  000DE6  07E3               	decf	(sprintf@prec+1)& (0+255),f,b
  2224  000DE8                     l284:
  2225                           
  2226                           ; BSR set to: 0
  2227                           
  2228                           ; BSR set to: 0
  2229  000DE8  51E2               	movf	sprintf@prec& (0+255),w,b
  2230  000DEA  11E3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2231  000DEC  B4D8               	btfsc	status,2,c
  2232  000DEE  D08C               	goto	l300
  2233  000DF0  D7F0               	goto	l285
  2234  000DF2                     l244:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;doprnt.c: 1246: }
  2238                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2239                           
  2240                           ; BSR set to: 0
  2241  000DF2  51E2               	movf	sprintf@prec& (0+255),w,b
  2242  000DF4  11E3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2243  000DF6  A4D8               	btfss	status,2,c
  2244  000DF8  D008               	goto	l287
  2245                           
  2246                           ; BSR set to: 0
  2247  000DFA  51D1               	movf	sprintf@val& (0+255),w,b
  2248  000DFC  11D2               	iorwf	(sprintf@val+1)& (0+255),w,b
  2249  000DFE  11D3               	iorwf	(sprintf@val+2)& (0+255),w,b
  2250  000E00  11D4               	iorwf	(sprintf@val+3)& (0+255),w,b
  2251  000E02  A4D8               	btfss	status,2,c
  2252  000E04  D002               	goto	l287
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;doprnt.c: 1291: prec++;
  2256  000E06  4BE2               	infsnz	sprintf@prec& (0+255),f,b
  2257  000E08  2BE3               	incf	(sprintf@prec+1)& (0+255),f,b
  2258  000E0A                     l287:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;doprnt.c: 1339: if(c < prec)
  2262                           
  2263                           ; BSR set to: 0
  2264  000E0A  0E80               	movlw	128
  2265  000E0C  BFE4               	btfsc	sprintf@c& (0+255),7,b
  2266  000E0E  0E7F               	movlw	127
  2267  000E10  6FC6               	movwf	??_sprintf& (0+255),b
  2268  000E12  51E2               	movf	sprintf@prec& (0+255),w,b
  2269  000E14  5DE4               	subwf	sprintf@c& (0+255),w,b
  2270  000E16  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  2271  000E18  0A80               	xorlw	128
  2272  000E1A  59C6               	subwfb	??_sprintf& (0+255),w,b
  2273  000E1C  B0D8               	btfsc	status,0,c
  2274  000E1E  D003               	goto	l288
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1340: c = prec;
  2278  000E20  C0E2  F0E4         	movff	sprintf@prec,sprintf@c
  2279  000E24  D010               	goto	l290
  2280  000E26                     l288:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 1341: else if(prec < c)
  2284                           
  2285                           ; BSR set to: 0
  2286  000E26  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  2287  000E28  0A80               	xorlw	128
  2288  000E2A  6FC6               	movwf	??_sprintf& (0+255),b
  2289  000E2C  51E4               	movf	sprintf@c& (0+255),w,b
  2290  000E2E  5DE2               	subwf	sprintf@prec& (0+255),w,b
  2291  000E30  0E80               	movlw	128
  2292  000E32  BFE4               	btfsc	sprintf@c& (0+255),7,b
  2293  000E34  0E7F               	movlw	127
  2294  000E36  59C6               	subwfb	??_sprintf& (0+255),w,b
  2295  000E38  B0D8               	btfsc	status,0,c
  2296  000E3A  D005               	goto	l290
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;doprnt.c: 1342: prec = c;
  2300  000E3C  51E4               	movf	sprintf@c& (0+255),w,b
  2301  000E3E  6FE2               	movwf	sprintf@prec& (0+255),b
  2302  000E40  6BE3               	clrf	(sprintf@prec+1)& (0+255),b
  2303  000E42  BFE2               	btfsc	sprintf@prec& (0+255),7,b
  2304  000E44  07E3               	decf	(sprintf@prec+1)& (0+255),f,b
  2305  000E46                     l290:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2309                           
  2310                           ; BSR set to: 0
  2311                           
  2312                           ; BSR set to: 0
  2313  000E46  51D7               	movf	sprintf@width& (0+255),w,b
  2314  000E48  11D8               	iorwf	(sprintf@width+1)& (0+255),w,b
  2315  000E4A  B4D8               	btfsc	status,2,c
  2316  000E4C  D00D               	goto	l291
  2317                           
  2318                           ; BSR set to: 0
  2319  000E4E  0E03               	movlw	3
  2320  000E50  15D5               	andwf	sprintf@flag& (0+255),w,b
  2321  000E52  6FC6               	movwf	??_sprintf& (0+255),b
  2322  000E54  0E00               	movlw	0
  2323  000E56  15D6               	andwf	(sprintf@flag+1)& (0+255),w,b
  2324  000E58  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  2325  000E5A  51C6               	movf	??_sprintf& (0+255),w,b
  2326  000E5C  11C7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2327  000E5E  B4D8               	btfsc	status,2,c
  2328  000E60  D003               	goto	l291
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1346: width--;
  2332  000E62  07D7               	decf	sprintf@width& (0+255),f,b
  2333  000E64  A0D8               	btfss	status,0,c
  2334  000E66  07D8               	decf	(sprintf@width+1)& (0+255),f,b
  2335  000E68                     l291:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2339                           
  2340                           ; BSR set to: 0
  2341  000E68  ADD6               	btfss	(sprintf@flag+1)& (0+255),6,b
  2342  000E6A  D013               	goto	l294
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;doprnt.c: 1349: if(width > prec)
  2346  000E6C  51D7               	movf	sprintf@width& (0+255),w,b
  2347  000E6E  5DE2               	subwf	sprintf@prec& (0+255),w,b
  2348  000E70  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  2349  000E72  0A80               	xorlw	128
  2350  000E74  6FC6               	movwf	??_sprintf& (0+255),b
  2351  000E76  51D8               	movf	(sprintf@width+1)& (0+255),w,b
  2352  000E78  0A80               	xorlw	128
  2353  000E7A  59C6               	subwfb	??_sprintf& (0+255),w,b
  2354  000E7C  B0D8               	btfsc	status,0,c
  2355  000E7E  D005               	goto	l293
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;doprnt.c: 1350: width -= prec;
  2359  000E80  51E2               	movf	sprintf@prec& (0+255),w,b
  2360  000E82  5FD7               	subwf	sprintf@width& (0+255),f,b
  2361  000E84  51E3               	movf	(sprintf@prec+1)& (0+255),w,b
  2362  000E86  5BD8               	subwfb	(sprintf@width+1)& (0+255),f,b
  2363  000E88  D004               	goto	l294
  2364  000E8A                     l293:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;doprnt.c: 1351: else
  2368                           ;doprnt.c: 1352: width = 0;
  2369                           
  2370                           ; BSR set to: 0
  2371  000E8A  0E00               	movlw	0
  2372  000E8C  6FD8               	movwf	(sprintf@width+1)& (0+255),b
  2373  000E8E  0E00               	movlw	0
  2374  000E90  6FD7               	movwf	sprintf@width& (0+255),b
  2375  000E92                     l294:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1353: }
  2379                           ;doprnt.c: 1381: if(width > c)
  2380                           
  2381                           ; BSR set to: 0
  2382                           
  2383                           ; BSR set to: 0
  2384  000E92  0E80               	movlw	128
  2385  000E94  BFE4               	btfsc	sprintf@c& (0+255),7,b
  2386  000E96  0E7F               	movlw	127
  2387  000E98  6FC6               	movwf	??_sprintf& (0+255),b
  2388  000E9A  51D7               	movf	sprintf@width& (0+255),w,b
  2389  000E9C  5DE4               	subwf	sprintf@c& (0+255),w,b
  2390  000E9E  51D8               	movf	(sprintf@width+1)& (0+255),w,b
  2391  000EA0  0A80               	xorlw	128
  2392  000EA2  59C6               	subwfb	??_sprintf& (0+255),w,b
  2393  000EA4  B0D8               	btfsc	status,0,c
  2394  000EA6  D007               	goto	l295
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;doprnt.c: 1382: width -= c;
  2398  000EA8  51E4               	movf	sprintf@c& (0+255),w,b
  2399  000EAA  5FD7               	subwf	sprintf@width& (0+255),f,b
  2400  000EAC  0E00               	movlw	0
  2401  000EAE  BFE4               	btfsc	sprintf@c& (0+255),7,b
  2402  000EB0  0EFF               	movlw	255
  2403  000EB2  5BD8               	subwfb	(sprintf@width+1)& (0+255),f,b
  2404  000EB4  D004               	goto	l296
  2405  000EB6                     l295:
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;doprnt.c: 1383: else
  2409                           ;doprnt.c: 1384: width = 0;
  2410                           
  2411                           ; BSR set to: 0
  2412  000EB6  0E00               	movlw	0
  2413  000EB8  6FD8               	movwf	(sprintf@width+1)& (0+255),b
  2414  000EBA  0E00               	movlw	0
  2415  000EBC  6FD7               	movwf	sprintf@width& (0+255),b
  2416  000EBE                     l296:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1422: {
  2420                           ;doprnt.c: 1424: if(width
  2421                           ;doprnt.c: 1428: )
  2422                           
  2423                           ; BSR set to: 0
  2424  000EBE  51D7               	movf	sprintf@width& (0+255),w,b
  2425  000EC0  11D8               	iorwf	(sprintf@width+1)& (0+255),w,b
  2426  000EC2  B4D8               	btfsc	status,2,c
  2427  000EC4  D00F               	goto	u3240
  2428  000EC6                     u3230:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2432                           
  2433                           ; BSR set to: 0
  2434                           
  2435                           ;doprnt.c: 1429: do
  2436  000EC6  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2437  000ECA  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2438  000ECE  0E20               	movlw	32
  2439  000ED0  6EDF               	movwf	indf2,c
  2440                           
  2441                           ; BSR set to: 0
  2442  000ED2  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  2443  000ED4  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1431: while(--width);
  2447  000ED6  07D7               	decf	sprintf@width& (0+255),f,b
  2448  000ED8  A0D8               	btfss	status,0,c
  2449  000EDA  07D8               	decf	(sprintf@width+1)& (0+255),f,b
  2450  000EDC  51D7               	movf	sprintf@width& (0+255),w,b
  2451  000EDE  11D8               	iorwf	(sprintf@width+1)& (0+255),w,b
  2452  000EE0  A4D8               	btfss	status,2,c
  2453  000EE2  D7F1               	goto	u3230
  2454  000EE4                     u3240:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;doprnt.c: 1438: if(flag & 0x03)
  2458                           
  2459                           ; BSR set to: 0
  2460                           
  2461                           ; BSR set to: 0
  2462  000EE4  0E03               	movlw	3
  2463  000EE6  15D5               	andwf	sprintf@flag& (0+255),w,b
  2464  000EE8  6FC6               	movwf	??_sprintf& (0+255),b
  2465  000EEA  0E00               	movlw	0
  2466  000EEC  15D6               	andwf	(sprintf@flag+1)& (0+255),w,b
  2467  000EEE  6FC7               	movwf	(??_sprintf+1)& (0+255),b
  2468  000EF0  51C6               	movf	??_sprintf& (0+255),w,b
  2469  000EF2  11C7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2470  000EF4  B4D8               	btfsc	status,2,c
  2471  000EF6  D008               	goto	l300
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2475  000EF8  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2476  000EFC  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2477  000F00  0E2D               	movlw	45
  2478  000F02  6EDF               	movwf	indf2,c
  2479  000F04                     l3219:
  2480                           
  2481                           ; BSR set to: 0
  2482  000F04  4BBF               	infsnz	sprintf@sp& (0+255),f,b
  2483  000F06  2BC0               	incf	(sprintf@sp+1)& (0+255),f,b
  2484  000F08                     l300:
  2485                           
  2486                           ; BSR set to: 0
  2487                           
  2488                           ; BSR set to: 0
  2489                           
  2490                           ; BSR set to: 0
  2491  000F08  C0C1  FFF6         	movff	sprintf@f,tblptrl
  2492  000F0C  C0C2  FFF7         	movff	sprintf@f+1,tblptrh
  2493  000F10  4BC1               	infsnz	sprintf@f& (0+255),f,b
  2494  000F12  2BC2               	incf	(sprintf@f+1)& (0+255),f,b
  2495  000F14                     	if	0	;tblptru may be non-zero
  2496  000F14                     	endif
  2497  000F14                     	if	0	;tblptru may be non-zero
  2498  000F14                     	endif
  2499  000F14  0008               	tblrd		*
  2500  000F16  CFF5 F0E4          	movff	tablat,sprintf@c
  2501  000F1A  51E4               	movf	sprintf@c& (0+255),w,b
  2502  000F1C  A4D8               	btfss	status,2,c
  2503  000F1E  EF4E  F003         	goto	l228
  2504  000F22                     u3260:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1538: *sp = 0;
  2508                           
  2509                           ; BSR set to: 0
  2510                           
  2511                           ;doprnt.c: 1469: }
  2512                           ;doprnt.c: 1533: }
  2513                           ;doprnt.c: 1535: alldone:
  2514                           
  2515                           ; BSR set to: 0
  2516  000F22  C0BF  FFD9         	movff	sprintf@sp,fsr2l
  2517  000F26  C0C0  FFDA         	movff	sprintf@sp+1,fsr2h
  2518  000F2A  0E00               	movlw	0
  2519  000F2C  6EDF               	movwf	indf2,c
  2520  000F2E  0012               	return	
  2521  000F30                     __end_of_sprintf:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon2	equ	0xFF1
  2531                           intcon3	equ	0xFF0
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _scale *****************
  2542 ;; Defined at:
  2543 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  scl             1    wreg     char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  scl             1   41[BANK0 ] char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  3   35[BANK0 ] char 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2557 ;;      Params:         0       3       0       0       0       0       0
  2558 ;;      Locals:         0       4       0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0
  2560 ;;      Totals:         0       7       0       0       0       0       0
  2561 ;;Total ram usage:        7 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    6
  2564 ;; This function calls:
  2565 ;;		___awdiv
  2566 ;;		___awmod
  2567 ;;		___ftmul
  2568 ;;		___wmul
  2569 ;; This function is called by:
  2570 ;;		_sprintf
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text2
  2575  000F30                     __ptext2:
  2576                           	opt stack 0
  2577  000F30                     _scale:
  2578                           	opt stack 23
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;incstack = 0
  2582                           ;scale@scl stored from wreg
  2583  000F30  0100               	movlb	0	; () banked
  2584  000F32  6FA9               	movwf	scale@scl& (0+255),b
  2585                           
  2586                           ;doprnt.c: 428: if(scl < 0) {
  2587  000F34  0100               	movlb	0	; () banked
  2588  000F36  AFA9               	btfss	scale@scl& (0+255),7,b
  2589  000F38  D10C               	goto	l217
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 429: scl = -scl;
  2593  000F3A  6DA9               	negf	scale@scl& (0+255),b
  2594                           
  2595                           ;doprnt.c: 430: if(scl>=110)
  2596  000F3C  51A9               	movf	scale@scl& (0+255),w,b
  2597  000F3E  0A80               	xorlw	128
  2598  000F40  0F12               	addlw	-238
  2599  000F42  A0D8               	btfss	status,0,c
  2600  000F44  D097               	goto	l218
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2604  000F46  0E00               	movlw	0
  2605  000F48  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2606  000F4A  0E03               	movlw	3
  2607  000F4C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2608  000F4E  0E00               	movlw	0
  2609  000F50  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2610  000F52  0E0A               	movlw	10
  2611  000F54  6F88               	movwf	___awdiv@divisor& (0+255),b
  2612  000F56  0E00               	movlw	0
  2613  000F58  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2614  000F5A  0E64               	movlw	100
  2615  000F5C  6F82               	movwf	___awmod@divisor& (0+255),b
  2616  000F5E  51A9               	movf	scale@scl& (0+255),w,b
  2617  000F60  6F80               	movwf	___awmod@dividend& (0+255),b
  2618  000F62  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  2619  000F64  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  2620  000F66  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  2621  000F68  EC7B  F011         	call	___awmod	;wreg free
  2622  000F6C  C080  F086         	movff	?___awmod,___awdiv@dividend
  2623  000F70  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  2624  000F74  ECF6  F010         	call	___awdiv	;wreg free
  2625  000F78  0E09               	movlw	9
  2626  000F7A  0100               	movlb	0	; () banked
  2627  000F7C  2586               	addwf	?___awdiv& (0+255),w,b
  2628  000F7E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  2629  000F80  0E00               	movlw	0
  2630  000F82  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  2631  000F84  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2632  000F86  EC22  F013         	call	___wmul	;wreg free
  2633  000F8A  0E50               	movlw	low __npowers_
  2634  000F8C  0100               	movlb	0	; () banked
  2635  000F8E  258E               	addwf	?___wmul& (0+255),w,b
  2636  000F90  6EF6               	movwf	tblptrl,c
  2637  000F92  0E06               	movlw	high __npowers_
  2638  000F94  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2639  000F96  6EF7               	movwf	tblptrh,c
  2640  000F98                     	if	0	;There are less than 3 active tblptr bytes
  2641  000F98                     	endif
  2642  000F98  0009               	tblrd		*+
  2643  000F9A  CFF5 F097          	movff	tablat,___ftmul@f2
  2644  000F9E  0009               	tblrd		*+
  2645  000FA0  CFF5 F098          	movff	tablat,___ftmul@f2+1
  2646  000FA4  000A               	tblrd		*-
  2647  000FA6  CFF5 F099          	movff	tablat,___ftmul@f2+2
  2648  000FAA  0E00               	movlw	0
  2649  000FAC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2650  000FAE  0E64               	movlw	100
  2651  000FB0  6F88               	movwf	___awdiv@divisor& (0+255),b
  2652  000FB2  51A9               	movf	scale@scl& (0+255),w,b
  2653  000FB4  6F86               	movwf	___awdiv@dividend& (0+255),b
  2654  000FB6  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  2655  000FB8  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  2656  000FBA  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2657  000FBC  ECF6  F010         	call	___awdiv	;wreg free
  2658  000FC0  0E12               	movlw	18
  2659  000FC2  0100               	movlb	0	; () banked
  2660  000FC4  2586               	addwf	?___awdiv& (0+255),w,b
  2661  000FC6  6F8E               	movwf	___wmul@multiplier& (0+255),b
  2662  000FC8  0E00               	movlw	0
  2663  000FCA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  2664  000FCC  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2665  000FCE  0E00               	movlw	0
  2666  000FD0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2667  000FD2  0E03               	movlw	3
  2668  000FD4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2669  000FD6  EC22  F013         	call	___wmul	;wreg free
  2670  000FDA  0E50               	movlw	low __npowers_
  2671  000FDC  0100               	movlb	0	; () banked
  2672  000FDE  258E               	addwf	?___wmul& (0+255),w,b
  2673  000FE0  6EF6               	movwf	tblptrl,c
  2674  000FE2  0E06               	movlw	high __npowers_
  2675  000FE4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2676  000FE6  6EF7               	movwf	tblptrh,c
  2677  000FE8                     	if	0	;There are less than 3 active tblptr bytes
  2678  000FE8                     	endif
  2679  000FE8  0009               	tblrd		*+
  2680  000FEA  CFF5 F094          	movff	tablat,___ftmul@f1
  2681  000FEE  0009               	tblrd		*+
  2682  000FF0  CFF5 F095          	movff	tablat,___ftmul@f1+1
  2683  000FF4  000A               	tblrd		*-
  2684  000FF6  CFF5 F096          	movff	tablat,___ftmul@f1+2
  2685  000FFA  EC6E  F00D         	call	___ftmul	;wreg free
  2686  000FFE  C094  F0A6         	movff	?___ftmul,_scale$1061
  2687  001002  C095  F0A7         	movff	?___ftmul+1,_scale$1061+1
  2688  001006  C096  F0A8         	movff	?___ftmul+2,_scale$1061+2
  2689                           
  2690                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2691  00100A  C0A6  F094         	movff	_scale$1061,___ftmul@f1
  2692  00100E  C0A7  F095         	movff	_scale$1061+1,___ftmul@f1+1
  2693  001012  C0A8  F096         	movff	_scale$1061+2,___ftmul@f1+2
  2694  001016  0E00               	movlw	0
  2695  001018  0100               	movlb	0	; () banked
  2696  00101A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2697  00101C  0E03               	movlw	3
  2698  00101E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2699  001020  0E00               	movlw	0
  2700  001022  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2701  001024  0E0A               	movlw	10
  2702  001026  6F82               	movwf	___awmod@divisor& (0+255),b
  2703  001028  51A9               	movf	scale@scl& (0+255),w,b
  2704  00102A  6F80               	movwf	___awmod@dividend& (0+255),b
  2705  00102C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  2706  00102E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  2707  001030  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  2708  001032  EC7B  F011         	call	___awmod	;wreg free
  2709  001036  C080  F08E         	movff	?___awmod,___wmul@multiplier
  2710  00103A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  2711  00103E  EC22  F013         	call	___wmul	;wreg free
  2712  001042  0E50               	movlw	low __npowers_
  2713  001044  0100               	movlb	0	; () banked
  2714  001046  258E               	addwf	?___wmul& (0+255),w,b
  2715  001048  6EF6               	movwf	tblptrl,c
  2716  00104A  0E06               	movlw	high __npowers_
  2717  00104C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2718  00104E  6EF7               	movwf	tblptrh,c
  2719  001050                     	if	0	;There are less than 3 active tblptr bytes
  2720  001050                     	endif
  2721  001050  0009               	tblrd		*+
  2722  001052  CFF5 F097          	movff	tablat,___ftmul@f2
  2723  001056  0009               	tblrd		*+
  2724  001058  CFF5 F098          	movff	tablat,___ftmul@f2+1
  2725  00105C  000A               	tblrd		*-
  2726  00105E  CFF5 F099          	movff	tablat,___ftmul@f2+2
  2727  001062  EC6E  F00D         	call	___ftmul	;wreg free
  2728  001066  C094  F0A3         	movff	?___ftmul,?_scale
  2729  00106A  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  2730  00106E  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  2731  001072  0012               	return	
  2732  001074                     l218:
  2733                           
  2734                           ;doprnt.c: 432: else if(scl > 10)
  2735  001074  0100               	movlb	0	; () banked
  2736  001076  51A9               	movf	scale@scl& (0+255),w,b
  2737  001078  0A80               	xorlw	128
  2738  00107A  0F75               	addlw	-139
  2739  00107C  A0D8               	btfss	status,0,c
  2740  00107E  D056               	goto	l221
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2744  001080  0E00               	movlw	0
  2745  001082  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2746  001084  0E0A               	movlw	10
  2747  001086  6F88               	movwf	___awdiv@divisor& (0+255),b
  2748  001088  51A9               	movf	scale@scl& (0+255),w,b
  2749  00108A  6F86               	movwf	___awdiv@dividend& (0+255),b
  2750  00108C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  2751  00108E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  2752  001090  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2753  001092  ECF6  F010         	call	___awdiv	;wreg free
  2754  001096  0E09               	movlw	9
  2755  001098  0100               	movlb	0	; () banked
  2756  00109A  2586               	addwf	?___awdiv& (0+255),w,b
  2757  00109C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  2758  00109E  0E00               	movlw	0
  2759  0010A0  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  2760  0010A2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2761  0010A4  0E00               	movlw	0
  2762  0010A6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2763  0010A8  0E03               	movlw	3
  2764  0010AA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2765  0010AC  EC22  F013         	call	___wmul	;wreg free
  2766  0010B0  0E50               	movlw	low __npowers_
  2767  0010B2  0100               	movlb	0	; () banked
  2768  0010B4  258E               	addwf	?___wmul& (0+255),w,b
  2769  0010B6  6EF6               	movwf	tblptrl,c
  2770  0010B8  0E06               	movlw	high __npowers_
  2771  0010BA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2772  0010BC  6EF7               	movwf	tblptrh,c
  2773  0010BE                     	if	0	;There are less than 3 active tblptr bytes
  2774  0010BE                     	endif
  2775  0010BE  0009               	tblrd		*+
  2776  0010C0  CFF5 F094          	movff	tablat,___ftmul@f1
  2777  0010C4  0009               	tblrd		*+
  2778  0010C6  CFF5 F095          	movff	tablat,___ftmul@f1+1
  2779  0010CA  000A               	tblrd		*-
  2780  0010CC  CFF5 F096          	movff	tablat,___ftmul@f1+2
  2781  0010D0  0E00               	movlw	0
  2782  0010D2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2783  0010D4  0E03               	movlw	3
  2784  0010D6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2785  0010D8  0E00               	movlw	0
  2786  0010DA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2787  0010DC  0E0A               	movlw	10
  2788  0010DE  6F82               	movwf	___awmod@divisor& (0+255),b
  2789  0010E0  51A9               	movf	scale@scl& (0+255),w,b
  2790  0010E2  6F80               	movwf	___awmod@dividend& (0+255),b
  2791  0010E4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  2792  0010E6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  2793  0010E8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  2794  0010EA  EC7B  F011         	call	___awmod	;wreg free
  2795  0010EE  C080  F08E         	movff	?___awmod,___wmul@multiplier
  2796  0010F2  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  2797  0010F6  EC22  F013         	call	___wmul	;wreg free
  2798  0010FA  0E50               	movlw	low __npowers_
  2799  0010FC  0100               	movlb	0	; () banked
  2800  0010FE  258E               	addwf	?___wmul& (0+255),w,b
  2801  001100  6EF6               	movwf	tblptrl,c
  2802  001102  0E06               	movlw	high __npowers_
  2803  001104  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2804  001106  6EF7               	movwf	tblptrh,c
  2805  001108                     	if	0	;There are less than 3 active tblptr bytes
  2806  001108                     	endif
  2807  001108  0009               	tblrd		*+
  2808  00110A  CFF5 F097          	movff	tablat,___ftmul@f2
  2809  00110E  0009               	tblrd		*+
  2810  001110  CFF5 F098          	movff	tablat,___ftmul@f2+1
  2811  001114  000A               	tblrd		*-
  2812  001116  CFF5 F099          	movff	tablat,___ftmul@f2+2
  2813  00111A  EC6E  F00D         	call	___ftmul	;wreg free
  2814  00111E  C094  F0A3         	movff	?___ftmul,?_scale
  2815  001122  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  2816  001126  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  2817  00112A  0012               	return	
  2818  00112C                     l221:
  2819                           
  2820                           ;doprnt.c: 434: return _npowers_[scl];
  2821  00112C  0100               	movlb	0	; () banked
  2822  00112E  51A9               	movf	scale@scl& (0+255),w,b
  2823  001130  0D03               	mullw	3
  2824  001132  0E50               	movlw	low __npowers_
  2825  001134  24F3               	addwf	prodl,w,c
  2826  001136  6EF6               	movwf	tblptrl,c
  2827  001138  0E06               	movlw	high __npowers_
  2828  00113A  20F4               	addwfc	prodh,w,c
  2829  00113C  6EF7               	movwf	tblptrh,c
  2830  00113E                     	if	0	;There are less than 3 active tblptr bytes
  2831  00113E                     	endif
  2832  00113E  0009               	tblrd		*+
  2833  001140  CFF5 F0A3          	movff	tablat,?_scale
  2834  001144  0009               	tblrd		*+
  2835  001146  CFF5 F0A4          	movff	tablat,?_scale+1
  2836  00114A  000A               	tblrd		*-
  2837  00114C  CFF5 F0A5          	movff	tablat,?_scale+2
  2838                           
  2839                           ; BSR set to: 0
  2840  001150  0012               	return	
  2841  001152                     l217:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;doprnt.c: 435: }
  2845                           ;doprnt.c: 436: if(scl>=110)
  2846                           
  2847                           ; BSR set to: 0
  2848  001152  51A9               	movf	scale@scl& (0+255),w,b
  2849  001154  0A80               	xorlw	128
  2850  001156  0F12               	addlw	-238
  2851  001158  A0D8               	btfss	status,0,c
  2852  00115A  D097               	goto	l222
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2856  00115C  0E00               	movlw	0
  2857  00115E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2858  001160  0E03               	movlw	3
  2859  001162  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2860  001164  0E00               	movlw	0
  2861  001166  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2862  001168  0E0A               	movlw	10
  2863  00116A  6F88               	movwf	___awdiv@divisor& (0+255),b
  2864  00116C  0E00               	movlw	0
  2865  00116E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2866  001170  0E64               	movlw	100
  2867  001172  6F82               	movwf	___awmod@divisor& (0+255),b
  2868  001174  51A9               	movf	scale@scl& (0+255),w,b
  2869  001176  6F80               	movwf	___awmod@dividend& (0+255),b
  2870  001178  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  2871  00117A  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  2872  00117C  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  2873  00117E  EC7B  F011         	call	___awmod	;wreg free
  2874  001182  C080  F086         	movff	?___awmod,___awdiv@dividend
  2875  001186  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  2876  00118A  ECF6  F010         	call	___awdiv	;wreg free
  2877  00118E  0E09               	movlw	9
  2878  001190  0100               	movlb	0	; () banked
  2879  001192  2586               	addwf	?___awdiv& (0+255),w,b
  2880  001194  6F8E               	movwf	___wmul@multiplier& (0+255),b
  2881  001196  0E00               	movlw	0
  2882  001198  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  2883  00119A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2884  00119C  EC22  F013         	call	___wmul	;wreg free
  2885  0011A0  0E29               	movlw	low __powers_
  2886  0011A2  0100               	movlb	0	; () banked
  2887  0011A4  258E               	addwf	?___wmul& (0+255),w,b
  2888  0011A6  6EF6               	movwf	tblptrl,c
  2889  0011A8  0E06               	movlw	high __powers_
  2890  0011AA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2891  0011AC  6EF7               	movwf	tblptrh,c
  2892  0011AE                     	if	0	;There are less than 3 active tblptr bytes
  2893  0011AE                     	endif
  2894  0011AE  0009               	tblrd		*+
  2895  0011B0  CFF5 F097          	movff	tablat,___ftmul@f2
  2896  0011B4  0009               	tblrd		*+
  2897  0011B6  CFF5 F098          	movff	tablat,___ftmul@f2+1
  2898  0011BA  000A               	tblrd		*-
  2899  0011BC  CFF5 F099          	movff	tablat,___ftmul@f2+2
  2900  0011C0  0E00               	movlw	0
  2901  0011C2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2902  0011C4  0E64               	movlw	100
  2903  0011C6  6F88               	movwf	___awdiv@divisor& (0+255),b
  2904  0011C8  51A9               	movf	scale@scl& (0+255),w,b
  2905  0011CA  6F86               	movwf	___awdiv@dividend& (0+255),b
  2906  0011CC  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  2907  0011CE  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  2908  0011D0  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2909  0011D2  ECF6  F010         	call	___awdiv	;wreg free
  2910  0011D6  0E12               	movlw	18
  2911  0011D8  0100               	movlb	0	; () banked
  2912  0011DA  2586               	addwf	?___awdiv& (0+255),w,b
  2913  0011DC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  2914  0011DE  0E00               	movlw	0
  2915  0011E0  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  2916  0011E2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2917  0011E4  0E00               	movlw	0
  2918  0011E6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2919  0011E8  0E03               	movlw	3
  2920  0011EA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2921  0011EC  EC22  F013         	call	___wmul	;wreg free
  2922  0011F0  0E29               	movlw	low __powers_
  2923  0011F2  0100               	movlb	0	; () banked
  2924  0011F4  258E               	addwf	?___wmul& (0+255),w,b
  2925  0011F6  6EF6               	movwf	tblptrl,c
  2926  0011F8  0E06               	movlw	high __powers_
  2927  0011FA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2928  0011FC  6EF7               	movwf	tblptrh,c
  2929  0011FE                     	if	0	;There are less than 3 active tblptr bytes
  2930  0011FE                     	endif
  2931  0011FE  0009               	tblrd		*+
  2932  001200  CFF5 F094          	movff	tablat,___ftmul@f1
  2933  001204  0009               	tblrd		*+
  2934  001206  CFF5 F095          	movff	tablat,___ftmul@f1+1
  2935  00120A  000A               	tblrd		*-
  2936  00120C  CFF5 F096          	movff	tablat,___ftmul@f1+2
  2937  001210  EC6E  F00D         	call	___ftmul	;wreg free
  2938  001214  C094  F0A6         	movff	?___ftmul,_scale$1061
  2939  001218  C095  F0A7         	movff	?___ftmul+1,_scale$1061+1
  2940  00121C  C096  F0A8         	movff	?___ftmul+2,_scale$1061+2
  2941                           
  2942                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2943  001220  C0A6  F094         	movff	_scale$1061,___ftmul@f1
  2944  001224  C0A7  F095         	movff	_scale$1061+1,___ftmul@f1+1
  2945  001228  C0A8  F096         	movff	_scale$1061+2,___ftmul@f1+2
  2946  00122C  0E00               	movlw	0
  2947  00122E  0100               	movlb	0	; () banked
  2948  001230  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2949  001232  0E03               	movlw	3
  2950  001234  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2951  001236  0E00               	movlw	0
  2952  001238  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2953  00123A  0E0A               	movlw	10
  2954  00123C  6F82               	movwf	___awmod@divisor& (0+255),b
  2955  00123E  51A9               	movf	scale@scl& (0+255),w,b
  2956  001240  6F80               	movwf	___awmod@dividend& (0+255),b
  2957  001242  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  2958  001244  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  2959  001246  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  2960  001248  EC7B  F011         	call	___awmod	;wreg free
  2961  00124C  C080  F08E         	movff	?___awmod,___wmul@multiplier
  2962  001250  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  2963  001254  EC22  F013         	call	___wmul	;wreg free
  2964  001258  0E29               	movlw	low __powers_
  2965  00125A  0100               	movlb	0	; () banked
  2966  00125C  258E               	addwf	?___wmul& (0+255),w,b
  2967  00125E  6EF6               	movwf	tblptrl,c
  2968  001260  0E06               	movlw	high __powers_
  2969  001262  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  2970  001264  6EF7               	movwf	tblptrh,c
  2971  001266                     	if	0	;There are less than 3 active tblptr bytes
  2972  001266                     	endif
  2973  001266  0009               	tblrd		*+
  2974  001268  CFF5 F097          	movff	tablat,___ftmul@f2
  2975  00126C  0009               	tblrd		*+
  2976  00126E  CFF5 F098          	movff	tablat,___ftmul@f2+1
  2977  001272  000A               	tblrd		*-
  2978  001274  CFF5 F099          	movff	tablat,___ftmul@f2+2
  2979  001278  EC6E  F00D         	call	___ftmul	;wreg free
  2980  00127C  C094  F0A3         	movff	?___ftmul,?_scale
  2981  001280  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  2982  001284  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  2983  001288  0012               	return	
  2984  00128A                     l222:
  2985                           
  2986                           ;doprnt.c: 438: else if(scl > 10)
  2987  00128A  0100               	movlb	0	; () banked
  2988  00128C  51A9               	movf	scale@scl& (0+255),w,b
  2989  00128E  0A80               	xorlw	128
  2990  001290  0F75               	addlw	-139
  2991  001292  A0D8               	btfss	status,0,c
  2992  001294  D056               	goto	l224
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2996  001296  0E00               	movlw	0
  2997  001298  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2998  00129A  0E0A               	movlw	10
  2999  00129C  6F88               	movwf	___awdiv@divisor& (0+255),b
  3000  00129E  51A9               	movf	scale@scl& (0+255),w,b
  3001  0012A0  6F86               	movwf	___awdiv@dividend& (0+255),b
  3002  0012A2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3003  0012A4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  3004  0012A6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3005  0012A8  ECF6  F010         	call	___awdiv	;wreg free
  3006  0012AC  0E09               	movlw	9
  3007  0012AE  0100               	movlb	0	; () banked
  3008  0012B0  2586               	addwf	?___awdiv& (0+255),w,b
  3009  0012B2  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3010  0012B4  0E00               	movlw	0
  3011  0012B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3012  0012B8  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3013  0012BA  0E00               	movlw	0
  3014  0012BC  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3015  0012BE  0E03               	movlw	3
  3016  0012C0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3017  0012C2  EC22  F013         	call	___wmul	;wreg free
  3018  0012C6  0E29               	movlw	low __powers_
  3019  0012C8  0100               	movlb	0	; () banked
  3020  0012CA  258E               	addwf	?___wmul& (0+255),w,b
  3021  0012CC  6EF6               	movwf	tblptrl,c
  3022  0012CE  0E06               	movlw	high __powers_
  3023  0012D0  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3024  0012D2  6EF7               	movwf	tblptrh,c
  3025  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  3026  0012D4                     	endif
  3027  0012D4  0009               	tblrd		*+
  3028  0012D6  CFF5 F094          	movff	tablat,___ftmul@f1
  3029  0012DA  0009               	tblrd		*+
  3030  0012DC  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3031  0012E0  000A               	tblrd		*-
  3032  0012E2  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3033  0012E6  0E00               	movlw	0
  3034  0012E8  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3035  0012EA  0E03               	movlw	3
  3036  0012EC  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3037  0012EE  0E00               	movlw	0
  3038  0012F0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3039  0012F2  0E0A               	movlw	10
  3040  0012F4  6F82               	movwf	___awmod@divisor& (0+255),b
  3041  0012F6  51A9               	movf	scale@scl& (0+255),w,b
  3042  0012F8  6F80               	movwf	___awmod@dividend& (0+255),b
  3043  0012FA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3044  0012FC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3045  0012FE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3046  001300  EC7B  F011         	call	___awmod	;wreg free
  3047  001304  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3048  001308  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3049  00130C  EC22  F013         	call	___wmul	;wreg free
  3050  001310  0E29               	movlw	low __powers_
  3051  001312  0100               	movlb	0	; () banked
  3052  001314  258E               	addwf	?___wmul& (0+255),w,b
  3053  001316  6EF6               	movwf	tblptrl,c
  3054  001318  0E06               	movlw	high __powers_
  3055  00131A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3056  00131C  6EF7               	movwf	tblptrh,c
  3057  00131E                     	if	0	;There are less than 3 active tblptr bytes
  3058  00131E                     	endif
  3059  00131E  0009               	tblrd		*+
  3060  001320  CFF5 F097          	movff	tablat,___ftmul@f2
  3061  001324  0009               	tblrd		*+
  3062  001326  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3063  00132A  000A               	tblrd		*-
  3064  00132C  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3065  001330  EC6E  F00D         	call	___ftmul	;wreg free
  3066  001334  C094  F0A3         	movff	?___ftmul,?_scale
  3067  001338  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  3068  00133C  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  3069  001340  0012               	return	
  3070  001342                     l224:
  3071                           
  3072                           ;doprnt.c: 440: return _powers_[scl];
  3073  001342  0100               	movlb	0	; () banked
  3074  001344  51A9               	movf	scale@scl& (0+255),w,b
  3075  001346  0D03               	mullw	3
  3076  001348  0E29               	movlw	low __powers_
  3077  00134A  24F3               	addwf	prodl,w,c
  3078  00134C  6EF6               	movwf	tblptrl,c
  3079  00134E  0E06               	movlw	high __powers_
  3080  001350  20F4               	addwfc	prodh,w,c
  3081  001352  6EF7               	movwf	tblptrh,c
  3082  001354                     	if	0	;There are less than 3 active tblptr bytes
  3083  001354                     	endif
  3084  001354  0009               	tblrd		*+
  3085  001356  CFF5 F0A3          	movff	tablat,?_scale
  3086  00135A  0009               	tblrd		*+
  3087  00135C  CFF5 F0A4          	movff	tablat,?_scale+1
  3088  001360  000A               	tblrd		*-
  3089  001362  CFF5 F0A5          	movff	tablat,?_scale+2
  3090  001366  0012               	return	
  3091  001368                     __end_of_scale:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           intcon2	equ	0xFF1
  3101                           intcon3	equ	0xFF0
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _isdigit *****************
  3112 ;; Defined at:
  3113 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  c               1    wreg     unsigned char 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  c               1    2[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3127 ;;      Params:         0       0       0       0       0       0       0
  3128 ;;      Locals:         0       2       0       0       0       0       0
  3129 ;;      Temps:          0       1       0       0       0       0       0
  3130 ;;      Totals:         0       3       0       0       0       0       0
  3131 ;;Total ram usage:        3 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    4
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_sprintf
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text3
  3142  0026B8                     __ptext3:
  3143                           	opt stack 0
  3144  0026B8                     _isdigit:
  3145                           	opt stack 25
  3146                           
  3147                           ;incstack = 0
  3148                           ;isdigit@c stored from wreg
  3149  0026B8  0100               	movlb	0	; () banked
  3150  0026BA  6F82               	movwf	isdigit@c& (0+255),b
  3151  0026BC  0E00               	movlw	0
  3152  0026BE  0100               	movlb	0	; () banked
  3153  0026C0  6F81               	movwf	_isdigit$695& (0+255),b
  3154                           
  3155                           ; BSR set to: 0
  3156  0026C2  0E3A               	movlw	58
  3157  0026C4  6182               	cpfslt	isdigit@c& (0+255),b
  3158  0026C6  D005               	goto	l666
  3159                           
  3160                           ; BSR set to: 0
  3161  0026C8  0E2F               	movlw	47
  3162  0026CA  6582               	cpfsgt	isdigit@c& (0+255),b
  3163  0026CC  D002               	goto	l666
  3164                           
  3165                           ; BSR set to: 0
  3166  0026CE  0E01               	movlw	1
  3167  0026D0  6F81               	movwf	_isdigit$695& (0+255),b
  3168  0026D2                     l666:
  3169                           
  3170                           ; BSR set to: 0
  3171                           
  3172                           ; BSR set to: 0
  3173  0026D2  C081  F080         	movff	_isdigit$695,??_isdigit
  3174  0026D6  3180               	rrcf	??_isdigit& (0+255),w,b
  3175  0026D8  0012               	return	
  3176  0026DA                     __end_of_isdigit:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           intcon2	equ	0xFF1
  3186                           intcon3	equ	0xFF0
  3187                           postinc0	equ	0xFEE
  3188                           wreg	equ	0xFE8
  3189                           indf2	equ	0xFDF
  3190                           postinc2	equ	0xFDE
  3191                           postdec2	equ	0xFDD
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _fround *****************
  3197 ;; Defined at:
  3198 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  prec            1    wreg     unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  prec            1   44[BANK0 ] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  3   35[BANK0 ] unsigned char 
  3205 ;; Registers used:
  3206 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3212 ;;      Params:         0       3       0       0       0       0       0
  3213 ;;      Locals:         0       7       0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0
  3215 ;;      Totals:         0      10       0       0       0       0       0
  3216 ;;Total ram usage:       10 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    6
  3219 ;; This function calls:
  3220 ;;		___awdiv
  3221 ;;		___awmod
  3222 ;;		___ftmul
  3223 ;;		___wmul
  3224 ;; This function is called by:
  3225 ;;		_sprintf
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text4
  3230  001368                     __ptext4:
  3231                           	opt stack 0
  3232  001368                     _fround:
  3233                           	opt stack 23
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;incstack = 0
  3237                           ;fround@prec stored from wreg
  3238  001368  0100               	movlb	0	; () banked
  3239  00136A  6FAC               	movwf	fround@prec& (0+255),b
  3240                           
  3241                           ;doprnt.c: 413: if(prec>=110)
  3242  00136C  0E6D               	movlw	109
  3243  00136E  0100               	movlb	0	; () banked
  3244  001370  65AC               	cpfsgt	fround@prec& (0+255),b
  3245  001372  D0A6               	goto	l211
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3249  001374  0E00               	movlw	0
  3250  001376  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3251  001378  0E03               	movlw	3
  3252  00137A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3253  00137C  0E00               	movlw	0
  3254  00137E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3255  001380  0E0A               	movlw	10
  3256  001382  6F88               	movwf	___awdiv@divisor& (0+255),b
  3257  001384  0E00               	movlw	0
  3258  001386  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3259  001388  0E64               	movlw	100
  3260  00138A  6F82               	movwf	___awmod@divisor& (0+255),b
  3261  00138C  C0AC  F080         	movff	fround@prec,___awmod@dividend
  3262  001390  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3263  001392  EC7B  F011         	call	___awmod	;wreg free
  3264  001396  C080  F086         	movff	?___awmod,___awdiv@dividend
  3265  00139A  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3266  00139E  ECF6  F010         	call	___awdiv	;wreg free
  3267  0013A2  0E09               	movlw	9
  3268  0013A4  0100               	movlb	0	; () banked
  3269  0013A6  2586               	addwf	?___awdiv& (0+255),w,b
  3270  0013A8  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3271  0013AA  0E00               	movlw	0
  3272  0013AC  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3273  0013AE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3274  0013B0  EC22  F013         	call	___wmul	;wreg free
  3275  0013B4  0E50               	movlw	low __npowers_
  3276  0013B6  0100               	movlb	0	; () banked
  3277  0013B8  258E               	addwf	?___wmul& (0+255),w,b
  3278  0013BA  6EF6               	movwf	tblptrl,c
  3279  0013BC  0E06               	movlw	high __npowers_
  3280  0013BE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3281  0013C0  6EF7               	movwf	tblptrh,c
  3282  0013C2                     	if	0	;There are less than 3 active tblptr bytes
  3283  0013C2                     	endif
  3284  0013C2  0009               	tblrd		*+
  3285  0013C4  CFF5 F097          	movff	tablat,___ftmul@f2
  3286  0013C8  0009               	tblrd		*+
  3287  0013CA  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3288  0013CE  000A               	tblrd		*-
  3289  0013D0  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3290  0013D4  0E00               	movlw	0
  3291  0013D6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3292  0013D8  0E64               	movlw	100
  3293  0013DA  6F88               	movwf	___awdiv@divisor& (0+255),b
  3294  0013DC  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  3295  0013E0  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3296  0013E2  ECF6  F010         	call	___awdiv	;wreg free
  3297  0013E6  0E12               	movlw	18
  3298  0013E8  0100               	movlb	0	; () banked
  3299  0013EA  2586               	addwf	?___awdiv& (0+255),w,b
  3300  0013EC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3301  0013EE  0E00               	movlw	0
  3302  0013F0  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3303  0013F2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3304  0013F4  0E00               	movlw	0
  3305  0013F6  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3306  0013F8  0E03               	movlw	3
  3307  0013FA  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3308  0013FC  EC22  F013         	call	___wmul	;wreg free
  3309  001400  0E50               	movlw	low __npowers_
  3310  001402  0100               	movlb	0	; () banked
  3311  001404  258E               	addwf	?___wmul& (0+255),w,b
  3312  001406  6EF6               	movwf	tblptrl,c
  3313  001408  0E06               	movlw	high __npowers_
  3314  00140A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3315  00140C  6EF7               	movwf	tblptrh,c
  3316  00140E                     	if	0	;There are less than 3 active tblptr bytes
  3317  00140E                     	endif
  3318  00140E  0009               	tblrd		*+
  3319  001410  CFF5 F094          	movff	tablat,___ftmul@f1
  3320  001414  0009               	tblrd		*+
  3321  001416  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3322  00141A  000A               	tblrd		*-
  3323  00141C  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3324  001420  EC6E  F00D         	call	___ftmul	;wreg free
  3325  001424  C094  F0A9         	movff	?___ftmul,_fround$1059
  3326  001428  C095  F0AA         	movff	?___ftmul+1,_fround$1059+1
  3327  00142C  C096  F0AB         	movff	?___ftmul+2,_fround$1059+2
  3328                           
  3329                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3330  001430  0E00               	movlw	0
  3331  001432  0100               	movlb	0	; () banked
  3332  001434  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3333  001436  0E03               	movlw	3
  3334  001438  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3335  00143A  0E00               	movlw	0
  3336  00143C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3337  00143E  0E0A               	movlw	10
  3338  001440  6F82               	movwf	___awmod@divisor& (0+255),b
  3339  001442  C0AC  F080         	movff	fround@prec,___awmod@dividend
  3340  001446  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3341  001448  EC7B  F011         	call	___awmod	;wreg free
  3342  00144C  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3343  001450  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3344  001454  EC22  F013         	call	___wmul	;wreg free
  3345  001458  0E50               	movlw	low __npowers_
  3346  00145A  0100               	movlb	0	; () banked
  3347  00145C  258E               	addwf	?___wmul& (0+255),w,b
  3348  00145E  6EF6               	movwf	tblptrl,c
  3349  001460  0E06               	movlw	high __npowers_
  3350  001462  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3351  001464  6EF7               	movwf	tblptrh,c
  3352  001466                     	if	0	;There are less than 3 active tblptr bytes
  3353  001466                     	endif
  3354  001466  0009               	tblrd		*+
  3355  001468  CFF5 F097          	movff	tablat,___ftmul@f2
  3356  00146C  0009               	tblrd		*+
  3357  00146E  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3358  001472  000A               	tblrd		*-
  3359  001474  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3360  001478  C0A9  F094         	movff	_fround$1059,___ftmul@f1
  3361  00147C  C0AA  F095         	movff	_fround$1059+1,___ftmul@f1+1
  3362  001480  C0AB  F096         	movff	_fround$1059+2,___ftmul@f1+2
  3363  001484  EC6E  F00D         	call	___ftmul	;wreg free
  3364  001488  C094  F0A6         	movff	?___ftmul,_fround$1060
  3365  00148C  C095  F0A7         	movff	?___ftmul+1,_fround$1060+1
  3366  001490  C096  F0A8         	movff	?___ftmul+2,_fround$1060+2
  3367                           
  3368                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3369  001494  C0A6  F094         	movff	_fround$1060,___ftmul@f1
  3370  001498  C0A7  F095         	movff	_fround$1060+1,___ftmul@f1+1
  3371  00149C  C0A8  F096         	movff	_fround$1060+2,___ftmul@f1+2
  3372  0014A0  0E00               	movlw	0
  3373  0014A2  0100               	movlb	0	; () banked
  3374  0014A4  6F97               	movwf	___ftmul@f2& (0+255),b
  3375  0014A6  0E00               	movlw	0
  3376  0014A8  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  3377  0014AA  0E3F               	movlw	63
  3378  0014AC  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  3379  0014AE  EC6E  F00D         	call	___ftmul	;wreg free
  3380  0014B2  C094  F0A3         	movff	?___ftmul,?_fround
  3381  0014B6  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  3382  0014BA  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  3383  0014BE  0012               	return	
  3384  0014C0                     l211:
  3385                           
  3386                           ;doprnt.c: 415: else if(prec > 10)
  3387  0014C0  0E0A               	movlw	10
  3388  0014C2  0100               	movlb	0	; () banked
  3389  0014C4  65AC               	cpfsgt	fround@prec& (0+255),b
  3390  0014C6  D067               	goto	l214
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3394  0014C8  0E00               	movlw	0
  3395  0014CA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3396  0014CC  0E03               	movlw	3
  3397  0014CE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3398  0014D0  0E00               	movlw	0
  3399  0014D2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3400  0014D4  0E0A               	movlw	10
  3401  0014D6  6F82               	movwf	___awmod@divisor& (0+255),b
  3402  0014D8  C0AC  F080         	movff	fround@prec,___awmod@dividend
  3403  0014DC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3404  0014DE  EC7B  F011         	call	___awmod	;wreg free
  3405  0014E2  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3406  0014E6  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3407  0014EA  EC22  F013         	call	___wmul	;wreg free
  3408  0014EE  0E50               	movlw	low __npowers_
  3409  0014F0  0100               	movlb	0	; () banked
  3410  0014F2  258E               	addwf	?___wmul& (0+255),w,b
  3411  0014F4  6EF6               	movwf	tblptrl,c
  3412  0014F6  0E06               	movlw	high __npowers_
  3413  0014F8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3414  0014FA  6EF7               	movwf	tblptrh,c
  3415  0014FC                     	if	0	;There are less than 3 active tblptr bytes
  3416  0014FC                     	endif
  3417  0014FC  0009               	tblrd		*+
  3418  0014FE  CFF5 F097          	movff	tablat,___ftmul@f2
  3419  001502  0009               	tblrd		*+
  3420  001504  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3421  001508  000A               	tblrd		*-
  3422  00150A  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3423  00150E  0E00               	movlw	0
  3424  001510  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3425  001512  0E0A               	movlw	10
  3426  001514  6F88               	movwf	___awdiv@divisor& (0+255),b
  3427  001516  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  3428  00151A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3429  00151C  ECF6  F010         	call	___awdiv	;wreg free
  3430  001520  0E09               	movlw	9
  3431  001522  0100               	movlb	0	; () banked
  3432  001524  2586               	addwf	?___awdiv& (0+255),w,b
  3433  001526  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3434  001528  0E00               	movlw	0
  3435  00152A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3436  00152C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3437  00152E  0E00               	movlw	0
  3438  001530  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3439  001532  0E03               	movlw	3
  3440  001534  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3441  001536  EC22  F013         	call	___wmul	;wreg free
  3442  00153A  0E50               	movlw	low __npowers_
  3443  00153C  0100               	movlb	0	; () banked
  3444  00153E  258E               	addwf	?___wmul& (0+255),w,b
  3445  001540  6EF6               	movwf	tblptrl,c
  3446  001542  0E06               	movlw	high __npowers_
  3447  001544  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3448  001546  6EF7               	movwf	tblptrh,c
  3449  001548                     	if	0	;There are less than 3 active tblptr bytes
  3450  001548                     	endif
  3451  001548  0009               	tblrd		*+
  3452  00154A  CFF5 F094          	movff	tablat,___ftmul@f1
  3453  00154E  0009               	tblrd		*+
  3454  001550  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3455  001554  000A               	tblrd		*-
  3456  001556  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3457  00155A  EC6E  F00D         	call	___ftmul	;wreg free
  3458  00155E  C094  F0A9         	movff	?___ftmul,_fround$1059
  3459  001562  C095  F0AA         	movff	?___ftmul+1,_fround$1059+1
  3460  001566  C096  F0AB         	movff	?___ftmul+2,_fround$1059+2
  3461                           
  3462                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3463  00156A  C0A9  F094         	movff	_fround$1059,___ftmul@f1
  3464  00156E  C0AA  F095         	movff	_fround$1059+1,___ftmul@f1+1
  3465  001572  C0AB  F096         	movff	_fround$1059+2,___ftmul@f1+2
  3466  001576  0E00               	movlw	0
  3467  001578  0100               	movlb	0	; () banked
  3468  00157A  6F97               	movwf	___ftmul@f2& (0+255),b
  3469  00157C  0E00               	movlw	0
  3470  00157E  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  3471  001580  0E3F               	movlw	63
  3472  001582  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  3473  001584  EC6E  F00D         	call	___ftmul	;wreg free
  3474  001588  C094  F0A3         	movff	?___ftmul,?_fround
  3475  00158C  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  3476  001590  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  3477  001594  0012               	return	
  3478  001596                     l214:
  3479                           
  3480                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3481  001596  0100               	movlb	0	; () banked
  3482  001598  51AC               	movf	fround@prec& (0+255),w,b
  3483  00159A  0D03               	mullw	3
  3484  00159C  0E50               	movlw	low __npowers_
  3485  00159E  24F3               	addwf	prodl,w,c
  3486  0015A0  6EF6               	movwf	tblptrl,c
  3487  0015A2  0E06               	movlw	high __npowers_
  3488  0015A4  20F4               	addwfc	prodh,w,c
  3489  0015A6  6EF7               	movwf	tblptrh,c
  3490  0015A8                     	if	0	;There are less than 3 active tblptr bytes
  3491  0015A8                     	endif
  3492  0015A8  0009               	tblrd		*+
  3493  0015AA  CFF5 F094          	movff	tablat,___ftmul@f1
  3494  0015AE  0009               	tblrd		*+
  3495  0015B0  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3496  0015B4  000A               	tblrd		*-
  3497  0015B6  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3498  0015BA  0E00               	movlw	0
  3499  0015BC  6F97               	movwf	___ftmul@f2& (0+255),b
  3500  0015BE  0E00               	movlw	0
  3501  0015C0  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  3502  0015C2  0E3F               	movlw	63
  3503  0015C4  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  3504  0015C6  EC6E  F00D         	call	___ftmul	;wreg free
  3505  0015CA  C094  F0A3         	movff	?___ftmul,?_fround
  3506  0015CE  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  3507  0015D2  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  3508  0015D6  0012               	return	
  3509  0015D8                     __end_of_fround:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           intcon2	equ	0xFF1
  3519                           intcon3	equ	0xFF0
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           indf2	equ	0xFDF
  3523                           postinc2	equ	0xFDE
  3524                           postdec2	equ	0xFDD
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function ___wmul *****************
  3530 ;; Defined at:
  3531 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  multiplier      2   14[BANK0 ] unsigned int 
  3534 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  product         2   18[BANK0 ] unsigned int 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  2   14[BANK0 ] unsigned int 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, prodl, prodh
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3546 ;;      Params:         0       4       0       0       0       0       0
  3547 ;;      Locals:         0       2       0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0
  3549 ;;      Totals:         0       6       0       0       0       0       0
  3550 ;;Total ram usage:        6 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    4
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_fround
  3557 ;;		_scale
  3558 ;;		_sprintf
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text5
  3563  002644                     __ptext5:
  3564                           	opt stack 0
  3565  002644                     ___wmul:
  3566                           	opt stack 24
  3567                           
  3568                           ;incstack = 0
  3569  002644  0100               	movlb	0	; () banked
  3570  002646  518E               	movf	___wmul@multiplier& (0+255),w,b
  3571  002648  0390               	mulwf	___wmul@multiplicand& (0+255),b
  3572  00264A  CFF3 F092          	movff	prodl,___wmul@product
  3573  00264E  CFF4 F093          	movff	prodh,___wmul@product+1
  3574  002652  518E               	movf	___wmul@multiplier& (0+255),w,b
  3575  002654  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3576  002656  50F3               	movf	prodl,w,c
  3577  002658  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  3578  00265A  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3579  00265C  0390               	mulwf	___wmul@multiplicand& (0+255),b
  3580  00265E  50F3               	movf	prodl,w,c
  3581  002660  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  3582                           
  3583                           ; BSR set to: 0
  3584  002662  C092  F08E         	movff	___wmul@product,?___wmul
  3585  002666  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  3586  00266A  0012               	return	
  3587  00266C                     __end_of___wmul:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           intcon2	equ	0xFF1
  3597                           intcon3	equ	0xFF0
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function ___ftmul *****************
  3608 ;; Defined at:
  3609 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  f1              3   20[BANK0 ] float 
  3612 ;;  f2              3   23[BANK0 ] float 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  3615 ;;  sign            1   34[BANK0 ] unsigned char 
  3616 ;;  cntr            1   33[BANK0 ] unsigned char 
  3617 ;;  exp             1   29[BANK0 ] unsigned char 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  3   20[BANK0 ] float 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3627 ;;      Params:         0       6       0       0       0       0       0
  3628 ;;      Locals:         0       6       0       0       0       0       0
  3629 ;;      Temps:          0       3       0       0       0       0       0
  3630 ;;      Totals:         0      15       0       0       0       0       0
  3631 ;;Total ram usage:       15 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    5
  3634 ;; This function calls:
  3635 ;;		___ftpack
  3636 ;; This function is called by:
  3637 ;;		_fround
  3638 ;;		_scale
  3639 ;;		_sprintf
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text6
  3644  001ADC                     __ptext6:
  3645                           	opt stack 0
  3646  001ADC                     ___ftmul:
  3647                           	opt stack 23
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;incstack = 0
  3651  001ADC  C096  F09A         	movff	___ftmul@f1+2,??___ftmul
  3652  001AE0  0100               	movlb	0	; () banked
  3653  001AE2  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  3654  001AE4  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  3655  001AE6  3595               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3656  001AE8  379A               	rlcf	??___ftmul& (0+255),f,b
  3657  001AEA  E301               	bnc	u2081
  3658  001AEC  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  3659  001AEE                     u2081:
  3660  001AEE  519A               	movf	??___ftmul& (0+255),w,b
  3661  001AF0  6F9D               	movwf	___ftmul@exp& (0+255),b
  3662  001AF2  519D               	movf	___ftmul@exp& (0+255),w,b
  3663  001AF4  A4D8               	btfss	status,2,c
  3664  001AF6  D007               	goto	l630
  3665                           
  3666                           ; BSR set to: 0
  3667  001AF8  0E00               	movlw	0
  3668  001AFA  6F94               	movwf	?___ftmul& (0+255),b
  3669  001AFC  0E00               	movlw	0
  3670  001AFE  6F95               	movwf	(?___ftmul+1)& (0+255),b
  3671  001B00  0E00               	movlw	0
  3672  001B02  6F96               	movwf	(?___ftmul+2)& (0+255),b
  3673                           
  3674                           ; BSR set to: 0
  3675  001B04  0012               	return	
  3676  001B06                     l630:
  3677                           
  3678                           ; BSR set to: 0
  3679                           
  3680                           ; BSR set to: 0
  3681  001B06  C099  F09A         	movff	___ftmul@f2+2,??___ftmul
  3682  001B0A  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  3683  001B0C  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  3684  001B0E  3598               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3685  001B10  379A               	rlcf	??___ftmul& (0+255),f,b
  3686  001B12  E301               	bnc	u2101
  3687  001B14  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  3688  001B16                     u2101:
  3689  001B16  519A               	movf	??___ftmul& (0+255),w,b
  3690  001B18  6FA2               	movwf	___ftmul@sign& (0+255),b
  3691  001B1A  51A2               	movf	___ftmul@sign& (0+255),w,b
  3692  001B1C  A4D8               	btfss	status,2,c
  3693  001B1E  D007               	goto	l632
  3694                           
  3695                           ; BSR set to: 0
  3696  001B20  0E00               	movlw	0
  3697  001B22  6F94               	movwf	?___ftmul& (0+255),b
  3698  001B24  0E00               	movlw	0
  3699  001B26  6F95               	movwf	(?___ftmul+1)& (0+255),b
  3700  001B28  0E00               	movlw	0
  3701  001B2A  6F96               	movwf	(?___ftmul+2)& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704  001B2C  0012               	return	
  3705  001B2E                     l632:
  3706                           
  3707                           ; BSR set to: 0
  3708                           
  3709                           ; BSR set to: 0
  3710  001B2E  51A2               	movf	___ftmul@sign& (0+255),w,b
  3711  001B30  0F7B               	addlw	123
  3712  001B32  279D               	addwf	___ftmul@exp& (0+255),f,b
  3713                           
  3714                           ; BSR set to: 0
  3715  001B34  C096  F0A2         	movff	___ftmul@f1+2,___ftmul@sign
  3716  001B38  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  3717  001B3A  1BA2               	xorwf	___ftmul@sign& (0+255),f,b
  3718  001B3C  0E80               	movlw	128
  3719  001B3E  17A2               	andwf	___ftmul@sign& (0+255),f,b
  3720                           
  3721                           ; BSR set to: 0
  3722  001B40  8F95               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3723                           
  3724                           ; BSR set to: 0
  3725  001B42  8F98               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3726                           
  3727                           ; BSR set to: 0
  3728  001B44  0EFF               	movlw	255
  3729  001B46  1797               	andwf	___ftmul@f2& (0+255),f,b
  3730  001B48  0EFF               	movlw	255
  3731  001B4A  1798               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3732  001B4C  0E00               	movlw	0
  3733  001B4E  1799               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3734                           
  3735                           ; BSR set to: 0
  3736  001B50  0E00               	movlw	0
  3737  001B52  6F9E               	movwf	___ftmul@f3_as_product& (0+255),b
  3738  001B54  0E00               	movlw	0
  3739  001B56  6F9F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3740  001B58  0E00               	movlw	0
  3741  001B5A  6FA0               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744  001B5C  0E07               	movlw	7
  3745  001B5E  6FA1               	movwf	___ftmul@cntr& (0+255),b
  3746  001B60                     
  3747                           ; BSR set to: 0
  3748                           
  3749                           ; BSR set to: 0
  3750  001B60  A194               	btfss	___ftmul@f1& (0+255),0,b
  3751  001B62  D006               	goto	l634
  3752                           
  3753                           ; BSR set to: 0
  3754  001B64  5197               	movf	___ftmul@f2& (0+255),w,b
  3755  001B66  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3756  001B68  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  3757  001B6A  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3758  001B6C  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  3759  001B6E  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3760  001B70                     l634:
  3761                           
  3762                           ; BSR set to: 0
  3763                           
  3764                           ; BSR set to: 0
  3765  001B70  90D8               	bcf	status,0,c
  3766  001B72  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3767  001B74  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3768  001B76  3394               	rrcf	___ftmul@f1& (0+255),f,b
  3769  001B78  90D8               	bcf	status,0,c
  3770  001B7A  3797               	rlcf	___ftmul@f2& (0+255),f,b
  3771  001B7C  3798               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3772  001B7E  3799               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3773                           
  3774                           ; BSR set to: 0
  3775  001B80  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  3776  001B82  D7EE               	goto	l633
  3777                           
  3778                           ; BSR set to: 0
  3779                           
  3780                           ; BSR set to: 0
  3781  001B84  0E09               	movlw	9
  3782  001B86  6FA1               	movwf	___ftmul@cntr& (0+255),b
  3783  001B88                     
  3784                           ; BSR set to: 0
  3785                           
  3786                           ; BSR set to: 0
  3787  001B88  A194               	btfss	___ftmul@f1& (0+255),0,b
  3788  001B8A  D006               	goto	l637
  3789                           
  3790                           ; BSR set to: 0
  3791  001B8C  5197               	movf	___ftmul@f2& (0+255),w,b
  3792  001B8E  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3793  001B90  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  3794  001B92  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3795  001B94  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  3796  001B96  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3797  001B98                     l637:
  3798                           
  3799                           ; BSR set to: 0
  3800                           
  3801                           ; BSR set to: 0
  3802  001B98  90D8               	bcf	status,0,c
  3803  001B9A  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3804  001B9C  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3805  001B9E  3394               	rrcf	___ftmul@f1& (0+255),f,b
  3806  001BA0  90D8               	bcf	status,0,c
  3807  001BA2  33A0               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3808  001BA4  339F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3809  001BA6  339E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3810                           
  3811                           ; BSR set to: 0
  3812  001BA8  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  3813  001BAA  D7EE               	goto	l636
  3814                           
  3815                           ; BSR set to: 0
  3816                           
  3817                           ; BSR set to: 0
  3818  001BAC  C09E  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  3819  001BB0  C09F  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3820  001BB4  C0A0  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3821  001BB8  C09D  F083         	movff	___ftmul@exp,___ftpack@exp
  3822  001BBC  C0A2  F084         	movff	___ftmul@sign,___ftpack@sign
  3823  001BC0  ECA8  F00F         	call	___ftpack	;wreg free
  3824  001BC4  C080  F094         	movff	?___ftpack,?___ftmul
  3825  001BC8  C081  F095         	movff	?___ftpack+1,?___ftmul+1
  3826  001BCC  C082  F096         	movff	?___ftpack+2,?___ftmul+2
  3827  001BD0  0012               	return	
  3828  001BD2                     __end_of___ftmul:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           intcon2	equ	0xFF1
  3838                           intcon3	equ	0xFF0
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function ___awmod *****************
  3849 ;; Defined at:
  3850 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  dividend        2    0[BANK0 ] int 
  3853 ;;  divisor         2    2[BANK0 ] int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  sign            1    5[BANK0 ] unsigned char 
  3856 ;;  counter         1    4[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  2    0[BANK0 ] int 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         0       4       0       0       0       0       0
  3867 ;;      Locals:         0       2       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0
  3869 ;;      Totals:         0       6       0       0       0       0       0
  3870 ;;Total ram usage:        6 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    4
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_fround
  3877 ;;		_scale
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text7
  3882  0022F6                     __ptext7:
  3883                           	opt stack 0
  3884  0022F6                     ___awmod:
  3885                           	opt stack 24
  3886                           
  3887                           ;incstack = 0
  3888  0022F6  0E00               	movlw	0
  3889  0022F8  0100               	movlb	0	; () banked
  3890  0022FA  6F85               	movwf	___awmod@sign& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893  0022FC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3894  0022FE  D006               	goto	l483
  3895                           
  3896                           ; BSR set to: 0
  3897  002300  6D80               	negf	___awmod@dividend& (0+255),b
  3898  002302  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  3899  002304  B0D8               	btfsc	status,0,c
  3900  002306  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  3901                           
  3902                           ; BSR set to: 0
  3903  002308  0E01               	movlw	1
  3904  00230A  6F85               	movwf	___awmod@sign& (0+255),b
  3905  00230C                     l483:
  3906                           
  3907                           ; BSR set to: 0
  3908                           
  3909                           ; BSR set to: 0
  3910  00230C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3911  00230E  D004               	goto	l484
  3912                           
  3913                           ; BSR set to: 0
  3914  002310  6D82               	negf	___awmod@divisor& (0+255),b
  3915  002312  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  3916  002314  B0D8               	btfsc	status,0,c
  3917  002316  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  3918  002318                     l484:
  3919                           
  3920                           ; BSR set to: 0
  3921                           
  3922                           ; BSR set to: 0
  3923  002318  5182               	movf	___awmod@divisor& (0+255),w,b
  3924  00231A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3925  00231C  B4D8               	btfsc	status,2,c
  3926  00231E  D018               	goto	l491
  3927                           
  3928                           ; BSR set to: 0
  3929  002320  0E01               	movlw	1
  3930  002322  6F84               	movwf	___awmod@counter& (0+255),b
  3931  002324  D004               	goto	l486
  3932  002326                     
  3933                           ; BSR set to: 0
  3934                           
  3935                           ; BSR set to: 0
  3936  002326  90D8               	bcf	status,0,c
  3937  002328  3782               	rlcf	___awmod@divisor& (0+255),f,b
  3938  00232A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3939  00232C  2B84               	incf	___awmod@counter& (0+255),f,b
  3940  00232E                     l486:
  3941                           
  3942                           ; BSR set to: 0
  3943                           
  3944                           ; BSR set to: 0
  3945  00232E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3946  002330  D7FA               	goto	l487
  3947  002332                     u2230:
  3948                           
  3949                           ; BSR set to: 0
  3950                           
  3951                           ; BSR set to: 0
  3952                           
  3953                           ; BSR set to: 0
  3954  002332  5182               	movf	___awmod@divisor& (0+255),w,b
  3955  002334  5D80               	subwf	___awmod@dividend& (0+255),w,b
  3956  002336  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  3957  002338  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3958  00233A  A0D8               	btfss	status,0,c
  3959  00233C  D004               	goto	l490
  3960                           
  3961                           ; BSR set to: 0
  3962  00233E  5182               	movf	___awmod@divisor& (0+255),w,b
  3963  002340  5F80               	subwf	___awmod@dividend& (0+255),f,b
  3964  002342  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  3965  002344  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3966  002346                     l490:
  3967                           
  3968                           ; BSR set to: 0
  3969                           
  3970                           ; BSR set to: 0
  3971  002346  90D8               	bcf	status,0,c
  3972  002348  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3973  00234A  3382               	rrcf	___awmod@divisor& (0+255),f,b
  3974                           
  3975                           ; BSR set to: 0
  3976  00234C  2F84               	decfsz	___awmod@counter& (0+255),f,b
  3977  00234E  D7F1               	goto	u2230
  3978  002350                     l491:
  3979                           
  3980                           ; BSR set to: 0
  3981                           
  3982                           ; BSR set to: 0
  3983                           
  3984                           ; BSR set to: 0
  3985  002350  5185               	movf	___awmod@sign& (0+255),w,b
  3986  002352  B4D8               	btfsc	status,2,c
  3987  002354  D004               	goto	l492
  3988                           
  3989                           ; BSR set to: 0
  3990  002356  6D80               	negf	___awmod@dividend& (0+255),b
  3991  002358  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  3992  00235A  B0D8               	btfsc	status,0,c
  3993  00235C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  3994  00235E                     l492:
  3995                           
  3996                           ; BSR set to: 0
  3997                           
  3998                           ; BSR set to: 0
  3999  00235E  C080  F080         	movff	___awmod@dividend,?___awmod
  4000  002362  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  4001  002366  0012               	return	
  4002  002368                     __end_of___awmod:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function ___awdiv *****************
  4023 ;; Defined at:
  4024 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  dividend        2    6[BANK0 ] int 
  4027 ;;  divisor         2    8[BANK0 ] int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  quotient        2   12[BANK0 ] int 
  4030 ;;  sign            1   11[BANK0 ] unsigned char 
  4031 ;;  counter         1   10[BANK0 ] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  2    6[BANK0 ] int 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4041 ;;      Params:         0       4       0       0       0       0       0
  4042 ;;      Locals:         0       4       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0
  4044 ;;      Totals:         0       8       0       0       0       0       0
  4045 ;;Total ram usage:        8 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    4
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_fround
  4052 ;;		_scale
  4053 ;;		_sprintf
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text8
  4058  0021EC                     __ptext8:
  4059                           	opt stack 0
  4060  0021EC                     ___awdiv:
  4061                           	opt stack 24
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;incstack = 0
  4065  0021EC  0E00               	movlw	0
  4066  0021EE  0100               	movlb	0	; () banked
  4067  0021F0  6F8B               	movwf	___awdiv@sign& (0+255),b
  4068                           
  4069                           ; BSR set to: 0
  4070  0021F2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4071  0021F4  D006               	goto	l470
  4072                           
  4073                           ; BSR set to: 0
  4074  0021F6  6D88               	negf	___awdiv@divisor& (0+255),b
  4075  0021F8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4076  0021FA  B0D8               	btfsc	status,0,c
  4077  0021FC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4078                           
  4079                           ; BSR set to: 0
  4080  0021FE  0E01               	movlw	1
  4081  002200  6F8B               	movwf	___awdiv@sign& (0+255),b
  4082  002202                     l470:
  4083                           
  4084                           ; BSR set to: 0
  4085                           
  4086                           ; BSR set to: 0
  4087  002202  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4088  002204  D006               	goto	l471
  4089                           
  4090                           ; BSR set to: 0
  4091  002206  6D86               	negf	___awdiv@dividend& (0+255),b
  4092  002208  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4093  00220A  B0D8               	btfsc	status,0,c
  4094  00220C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4095                           
  4096                           ; BSR set to: 0
  4097  00220E  0E01               	movlw	1
  4098  002210  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  4099  002212                     l471:
  4100                           
  4101                           ; BSR set to: 0
  4102                           
  4103                           ; BSR set to: 0
  4104  002212  0E00               	movlw	0
  4105  002214  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4106  002216  0E00               	movlw	0
  4107  002218  6F8C               	movwf	___awdiv@quotient& (0+255),b
  4108                           
  4109                           ; BSR set to: 0
  4110  00221A  5188               	movf	___awdiv@divisor& (0+255),w,b
  4111  00221C  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4112  00221E  B4D8               	btfsc	status,2,c
  4113  002220  D01C               	goto	l478
  4114                           
  4115                           ; BSR set to: 0
  4116  002222  0E01               	movlw	1
  4117  002224  6F8A               	movwf	___awdiv@counter& (0+255),b
  4118  002226  D004               	goto	l473
  4119  002228                     
  4120                           ; BSR set to: 0
  4121                           
  4122                           ; BSR set to: 0
  4123  002228  90D8               	bcf	status,0,c
  4124  00222A  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  4125  00222C  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4126  00222E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  4127  002230                     l473:
  4128                           
  4129                           ; BSR set to: 0
  4130                           
  4131                           ; BSR set to: 0
  4132  002230  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4133  002232  D7FA               	goto	l474
  4134  002234                     u2170:
  4135                           
  4136                           ; BSR set to: 0
  4137                           
  4138                           ; BSR set to: 0
  4139                           
  4140                           ; BSR set to: 0
  4141  002234  90D8               	bcf	status,0,c
  4142  002236  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  4143  002238  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4144                           
  4145                           ; BSR set to: 0
  4146  00223A  5188               	movf	___awdiv@divisor& (0+255),w,b
  4147  00223C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  4148  00223E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4149  002240  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4150  002242  A0D8               	btfss	status,0,c
  4151  002244  D005               	goto	l477
  4152                           
  4153                           ; BSR set to: 0
  4154  002246  5188               	movf	___awdiv@divisor& (0+255),w,b
  4155  002248  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  4156  00224A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4157  00224C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4158                           
  4159                           ; BSR set to: 0
  4160  00224E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  4161  002250                     l477:
  4162                           
  4163                           ; BSR set to: 0
  4164                           
  4165                           ; BSR set to: 0
  4166  002250  90D8               	bcf	status,0,c
  4167  002252  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4168  002254  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  4169                           
  4170                           ; BSR set to: 0
  4171  002256  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  4172  002258  D7ED               	goto	u2170
  4173  00225A                     l478:
  4174                           
  4175                           ; BSR set to: 0
  4176                           
  4177                           ; BSR set to: 0
  4178                           
  4179                           ; BSR set to: 0
  4180  00225A  518B               	movf	___awdiv@sign& (0+255),w,b
  4181  00225C  B4D8               	btfsc	status,2,c
  4182  00225E  D004               	goto	l479
  4183                           
  4184                           ; BSR set to: 0
  4185  002260  6D8C               	negf	___awdiv@quotient& (0+255),b
  4186  002262  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4187  002264  B0D8               	btfsc	status,0,c
  4188  002266  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4189  002268                     l479:
  4190                           
  4191                           ; BSR set to: 0
  4192                           
  4193                           ; BSR set to: 0
  4194  002268  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  4195  00226C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  4196  002270  0012               	return	
  4197  002272                     __end_of___awdiv:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon2	equ	0xFF1
  4207                           intcon3	equ	0xFF0
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function __tdiv_to_l_ *****************
  4218 ;; Defined at:
  4219 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  f1              3    0[BANK0 ] float 
  4222 ;;  f2              3    3[BANK0 ] float 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  quot            4    9[BANK0 ] unsigned long 
  4225 ;;  exp1            1   14[BANK0 ] unsigned char 
  4226 ;;  cntr            1   13[BANK0 ] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  4    0[BANK0 ] unsigned long 
  4229 ;; Registers used:
  4230 ;;		wreg, status,2, status,0
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4236 ;;      Params:         0       6       0       0       0       0       0
  4237 ;;      Locals:         0       6       0       0       0       0       0
  4238 ;;      Temps:          0       3       0       0       0       0       0
  4239 ;;      Totals:         0      15       0       0       0       0       0
  4240 ;;Total ram usage:       15 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    4
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_sprintf
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text9
  4251  001786                     __ptext9:
  4252                           	opt stack 0
  4253  001786                     __tdiv_to_l_:
  4254                           	opt stack 25
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;incstack = 0
  4258  001786  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4259  00178A  0100               	movlb	0	; () banked
  4260  00178C  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4261  00178E  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4262  001790  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4263  001792  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4264  001794  E301               	bnc	u2351
  4265  001796  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4266  001798                     u2351:
  4267  001798  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  4268  00179A  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  4269  00179C  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4270  00179E  A4D8               	btfss	status,2,c
  4271  0017A0  D009               	goto	l606
  4272                           
  4273                           ; BSR set to: 0
  4274  0017A2  0E00               	movlw	0
  4275  0017A4  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  4276  0017A6  0E00               	movlw	0
  4277  0017A8  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4278  0017AA  0E00               	movlw	0
  4279  0017AC  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4280  0017AE  0E00               	movlw	0
  4281  0017B0  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4282                           
  4283                           ; BSR set to: 0
  4284  0017B2  0012               	return	
  4285  0017B4                     l606:
  4286                           
  4287                           ; BSR set to: 0
  4288                           
  4289                           ; BSR set to: 0
  4290  0017B4  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4291  0017B8  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4292  0017BA  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4293  0017BC  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4294  0017BE  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4295  0017C0  E301               	bnc	u2371
  4296  0017C2  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4297  0017C4                     u2371:
  4298  0017C4  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  4299  0017C6  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4300  0017C8  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4301  0017CA  A4D8               	btfss	status,2,c
  4302  0017CC  D009               	goto	l608
  4303                           
  4304                           ; BSR set to: 0
  4305  0017CE  0E00               	movlw	0
  4306  0017D0  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  4307  0017D2  0E00               	movlw	0
  4308  0017D4  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4309  0017D6  0E00               	movlw	0
  4310  0017D8  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4311  0017DA  0E00               	movlw	0
  4312  0017DC  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4313                           
  4314                           ; BSR set to: 0
  4315  0017DE  0012               	return	
  4316  0017E0                     l608:
  4317                           
  4318                           ; BSR set to: 0
  4319                           
  4320                           ; BSR set to: 0
  4321  0017E0  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  4322                           
  4323                           ; BSR set to: 0
  4324  0017E2  0EFF               	movlw	255
  4325  0017E4  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  4326  0017E6  0EFF               	movlw	255
  4327  0017E8  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4328  0017EA  0E00               	movlw	0
  4329  0017EC  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4330  0017EE  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  4331                           
  4332                           ; BSR set to: 0
  4333  0017F0  0EFF               	movlw	255
  4334  0017F2  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  4335  0017F4  0EFF               	movlw	255
  4336  0017F6  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  4337  0017F8  0E00               	movlw	0
  4338  0017FA  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  4339                           
  4340                           ; BSR set to: 0
  4341  0017FC  0E00               	movlw	0
  4342  0017FE  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  4343  001800  0E00               	movlw	0
  4344  001802  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  4345  001804  0E00               	movlw	0
  4346  001806  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  4347  001808  0E00               	movlw	0
  4348  00180A  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  4349                           
  4350                           ; BSR set to: 0
  4351  00180C  0E7F               	movlw	127
  4352  00180E  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4353                           
  4354                           ; BSR set to: 0
  4355  001810  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4356  001812  0F98               	addlw	152
  4357  001814  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4358                           
  4359                           ; BSR set to: 0
  4360  001816  0E18               	movlw	24
  4361  001818  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4362  00181A                     l609:
  4363                           
  4364                           ; BSR set to: 0
  4365  00181A  90D8               	bcf	status,0,c
  4366  00181C  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4367  00181E  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4368  001820  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4369  001822  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4370                           
  4371                           ; BSR set to: 0
  4372  001824  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4373  001826  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  4374  001828  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4375  00182A  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4376  00182C  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4377  00182E  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  4378  001830  A0D8               	btfss	status,0,c
  4379  001832  D007               	goto	l610
  4380                           
  4381                           ; BSR set to: 0
  4382  001834  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4383  001836  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  4384  001838  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4385  00183A  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4386  00183C  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4387  00183E  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4388                           
  4389                           ; BSR set to: 0
  4390  001840  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  4391  001842                     l610:
  4392                           
  4393                           ; BSR set to: 0
  4394  001842  90D8               	bcf	status,0,c
  4395  001844  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  4396  001846  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4397  001848  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4398                           
  4399                           ; BSR set to: 0
  4400  00184A  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  4401  00184C  D7E6               	goto	l609
  4402                           
  4403                           ; BSR set to: 0
  4404                           
  4405                           ; BSR set to: 0
  4406  00184E  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  4407  001850  D016               	goto	l612
  4408                           
  4409                           ; BSR set to: 0
  4410  001852  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4411  001854  0A80               	xorlw	128
  4412  001856  0F97               	addlw	151
  4413  001858  B0D8               	btfsc	status,0,c
  4414  00185A  D009               	goto	l613
  4415                           
  4416                           ; BSR set to: 0
  4417  00185C  0E00               	movlw	0
  4418  00185E  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  4419  001860  0E00               	movlw	0
  4420  001862  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4421  001864  0E00               	movlw	0
  4422  001866  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4423  001868  0E00               	movlw	0
  4424  00186A  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427  00186C  0012               	return	
  4428  00186E                     l613:
  4429                           
  4430                           ; BSR set to: 0
  4431                           
  4432                           ; BSR set to: 0
  4433                           
  4434                           ; BSR set to: 0
  4435  00186E  90D8               	bcf	status,0,c
  4436  001870  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4437  001872  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4438  001874  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4439  001876  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  4440                           
  4441                           ; BSR set to: 0
  4442  001878  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  4443  00187A  D7F9               	goto	l613
  4444                           
  4445                           ; BSR set to: 0
  4446  00187C  D015               	goto	u2430
  4447  00187E                     l612:
  4448                           
  4449                           ; BSR set to: 0
  4450                           
  4451                           ; BSR set to: 0
  4452  00187E  0E17               	movlw	23
  4453  001880  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  4454  001882  D00F               	goto	l618
  4455                           
  4456                           ; BSR set to: 0
  4457  001884  0E00               	movlw	0
  4458  001886  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  4459  001888  0E00               	movlw	0
  4460  00188A  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4461  00188C  0E00               	movlw	0
  4462  00188E  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4463  001890  0E00               	movlw	0
  4464  001892  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4465                           
  4466                           ; BSR set to: 0
  4467  001894  0012               	return	
  4468  001896                     
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472  001896  90D8               	bcf	status,0,c
  4473  001898  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4474  00189A  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4475  00189C  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4476  00189E  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4477  0018A0  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  4478  0018A2                     l618:
  4479                           
  4480                           ; BSR set to: 0
  4481                           
  4482                           ; BSR set to: 0
  4483  0018A2  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4484  0018A4  A4D8               	btfss	status,2,c
  4485  0018A6  D7F7               	goto	l619
  4486  0018A8                     u2430:
  4487                           
  4488                           ; BSR set to: 0
  4489                           
  4490                           ; BSR set to: 0
  4491  0018A8  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4492  0018AC  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4493  0018B0  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4494  0018B4  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4495                           
  4496                           ; BSR set to: 0
  4497  0018B8  0012               	return		;funcret
  4498  0018BA                     __end_of__tdiv_to_l_:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           intcon	equ	0xFF2
  4507                           intcon2	equ	0xFF1
  4508                           intcon3	equ	0xFF0
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           indf2	equ	0xFDF
  4512                           postinc2	equ	0xFDE
  4513                           postdec2	equ	0xFDD
  4514                           fsr2h	equ	0xFDA
  4515                           fsr2l	equ	0xFD9
  4516                           status	equ	0xFD8
  4517                           
  4518 ;; *************** function __div_to_l_ *****************
  4519 ;; Defined at:
  4520 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  f1              3    0[BANK0 ] unsigned long 
  4523 ;;  f2              3    3[BANK0 ] unsigned long 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  quot            4    6[BANK0 ] unsigned long 
  4526 ;;  exp1            1   11[BANK0 ] unsigned char 
  4527 ;;  cntr            1   10[BANK0 ] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  4    0[BANK0 ] unsigned long 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4537 ;;      Params:         0       6       0       0       0       0       0
  4538 ;;      Locals:         0       6       0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0
  4540 ;;      Totals:         0      12       0       0       0       0       0
  4541 ;;Total ram usage:       12 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    4
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_sprintf
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text10
  4552  0018BA                     __ptext10:
  4553                           	opt stack 0
  4554  0018BA                     __div_to_l_:
  4555                           	opt stack 25
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;incstack = 0
  4559  0018BA  0100               	movlb	0	; () banked
  4560  0018BC  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  4561  0018BE  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  4562  0018C0  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  4563  0018C2  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  4564  0018C4  A4D8               	btfss	status,2,c
  4565  0018C6  D009               	goto	l502
  4566                           
  4567                           ; BSR set to: 0
  4568  0018C8  0E00               	movlw	0
  4569  0018CA  6F80               	movwf	?__div_to_l_& (0+255),b
  4570  0018CC  0E00               	movlw	0
  4571  0018CE  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  4572  0018D0  0E00               	movlw	0
  4573  0018D2  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  4574  0018D4  0E00               	movlw	0
  4575  0018D6  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  4576                           
  4577                           ; BSR set to: 0
  4578  0018D8  0012               	return	
  4579  0018DA                     l502:
  4580                           
  4581                           ; BSR set to: 0
  4582                           
  4583                           ; BSR set to: 0
  4584  0018DA  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  4585  0018DC  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  4586  0018DE  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  4587  0018E0  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  4588  0018E2  A4D8               	btfss	status,2,c
  4589  0018E4  D009               	goto	l504
  4590                           
  4591                           ; BSR set to: 0
  4592  0018E6  0E00               	movlw	0
  4593  0018E8  6F80               	movwf	?__div_to_l_& (0+255),b
  4594  0018EA  0E00               	movlw	0
  4595  0018EC  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  4596  0018EE  0E00               	movlw	0
  4597  0018F0  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  4598  0018F2  0E00               	movlw	0
  4599  0018F4  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602  0018F6  0012               	return	
  4603  0018F8                     l504:
  4604                           
  4605                           ; BSR set to: 0
  4606                           
  4607                           ; BSR set to: 0
  4608  0018F8  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  4609                           
  4610                           ; BSR set to: 0
  4611  0018FA  0EFF               	movlw	255
  4612  0018FC  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  4613  0018FE  0EFF               	movlw	255
  4614  001900  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  4615  001902  0EFF               	movlw	255
  4616  001904  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  4617  001906  0E00               	movlw	0
  4618  001908  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  4619                           
  4620                           ; BSR set to: 0
  4621  00190A  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  4622  00190C  0EFF               	movlw	255
  4623  00190E  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  4624  001910  0EFF               	movlw	255
  4625  001912  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  4626  001914  0EFF               	movlw	255
  4627  001916  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  4628  001918  0E00               	movlw	0
  4629  00191A  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  4630                           
  4631                           ; BSR set to: 0
  4632  00191C  0E00               	movlw	0
  4633  00191E  6F86               	movwf	__div_to_l_@quot& (0+255),b
  4634  001920  0E00               	movlw	0
  4635  001922  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  4636  001924  0E00               	movlw	0
  4637  001926  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  4638  001928  0E00               	movlw	0
  4639  00192A  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  4640                           
  4641                           ; BSR set to: 0
  4642  00192C  0E7F               	movlw	127
  4643  00192E  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4644                           
  4645                           ; BSR set to: 0
  4646  001930  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  4647  001932  0FA0               	addlw	160
  4648  001934  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4649                           
  4650                           ; BSR set to: 0
  4651  001936  0E20               	movlw	32
  4652  001938  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  4653  00193A                     
  4654                           ; BSR set to: 0
  4655                           
  4656                           ; BSR set to: 0
  4657  00193A  90D8               	bcf	status,0,c
  4658  00193C  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  4659  00193E  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4660  001940  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4661  001942  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4662                           
  4663                           ; BSR set to: 0
  4664  001944  5183               	movf	__div_to_l_@f2& (0+255),w,b
  4665  001946  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  4666  001948  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4667  00194A  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  4668  00194C  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4669  00194E  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  4670  001950  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4671  001952  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  4672  001954  A0D8               	btfss	status,0,c
  4673  001956  D009               	goto	l506
  4674                           
  4675                           ; BSR set to: 0
  4676  001958  5183               	movf	__div_to_l_@f2& (0+255),w,b
  4677  00195A  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  4678  00195C  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4679  00195E  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  4680  001960  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4681  001962  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  4682  001964  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4683  001966  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  4684                           
  4685                           ; BSR set to: 0
  4686  001968  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  4687  00196A                     l506:
  4688                           
  4689                           ; BSR set to: 0
  4690                           
  4691                           ; BSR set to: 0
  4692  00196A  90D8               	bcf	status,0,c
  4693  00196C  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  4694  00196E  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  4695  001970  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  4696  001972  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  4697                           
  4698                           ; BSR set to: 0
  4699  001974  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  4700  001976  D7E1               	goto	l505
  4701                           
  4702                           ; BSR set to: 0
  4703                           
  4704                           ; BSR set to: 0
  4705  001978  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  4706  00197A  D016               	goto	l508
  4707                           
  4708                           ; BSR set to: 0
  4709  00197C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  4710  00197E  0A80               	xorlw	128
  4711  001980  0F9F               	addlw	159
  4712  001982  B0D8               	btfsc	status,0,c
  4713  001984  D009               	goto	l509
  4714                           
  4715                           ; BSR set to: 0
  4716  001986  0E00               	movlw	0
  4717  001988  6F80               	movwf	?__div_to_l_& (0+255),b
  4718  00198A  0E00               	movlw	0
  4719  00198C  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  4720  00198E  0E00               	movlw	0
  4721  001990  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  4722  001992  0E00               	movlw	0
  4723  001994  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726  001996  0012               	return	
  4727  001998                     l509:
  4728                           
  4729                           ; BSR set to: 0
  4730                           
  4731                           ; BSR set to: 0
  4732                           
  4733                           ; BSR set to: 0
  4734  001998  90D8               	bcf	status,0,c
  4735  00199A  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  4736  00199C  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  4737  00199E  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  4738  0019A0  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  4739                           
  4740                           ; BSR set to: 0
  4741  0019A2  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  4742  0019A4  D7F9               	goto	l509
  4743                           
  4744                           ; BSR set to: 0
  4745  0019A6  D015               	goto	u2500
  4746  0019A8                     l508:
  4747                           
  4748                           ; BSR set to: 0
  4749                           
  4750                           ; BSR set to: 0
  4751  0019A8  0E1F               	movlw	31
  4752  0019AA  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  4753  0019AC  D00F               	goto	l514
  4754                           
  4755                           ; BSR set to: 0
  4756  0019AE  0E00               	movlw	0
  4757  0019B0  6F80               	movwf	?__div_to_l_& (0+255),b
  4758  0019B2  0E00               	movlw	0
  4759  0019B4  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  4760  0019B6  0E00               	movlw	0
  4761  0019B8  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  4762  0019BA  0E00               	movlw	0
  4763  0019BC  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  4764                           
  4765                           ; BSR set to: 0
  4766  0019BE  0012               	return	
  4767  0019C0                     
  4768                           ; BSR set to: 0
  4769                           
  4770                           ; BSR set to: 0
  4771  0019C0  90D8               	bcf	status,0,c
  4772  0019C2  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  4773  0019C4  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4774  0019C6  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4775  0019C8  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4776  0019CA  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  4777  0019CC                     l514:
  4778                           
  4779                           ; BSR set to: 0
  4780                           
  4781                           ; BSR set to: 0
  4782  0019CC  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  4783  0019CE  A4D8               	btfss	status,2,c
  4784  0019D0  D7F7               	goto	l515
  4785  0019D2                     u2500:
  4786                           
  4787                           ; BSR set to: 0
  4788                           
  4789                           ; BSR set to: 0
  4790  0019D2  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  4791  0019D6  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4792  0019DA  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4793  0019DE  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4794                           
  4795                           ; BSR set to: 0
  4796  0019E2  0012               	return		;funcret
  4797  0019E4                     __end_of__div_to_l_:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           intcon	equ	0xFF2
  4806                           intcon2	equ	0xFF1
  4807                           intcon3	equ	0xFF0
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function ___lltoft *****************
  4818 ;; Defined at:
  4819 ;;		line 35 in file "/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  c               4    8[BANK0 ] unsigned long 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  exp             1   16[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  3    8[BANK0 ] float 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4833 ;;      Params:         0       4       0       0       0       0       0
  4834 ;;      Locals:         0       1       0       0       0       0       0
  4835 ;;      Temps:          0       4       0       0       0       0       0
  4836 ;;      Totals:         0       9       0       0       0       0       0
  4837 ;;Total ram usage:        9 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    5
  4840 ;; This function calls:
  4841 ;;		___ftpack
  4842 ;; This function is called by:
  4843 ;;		_sprintf
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text11
  4848  0023D0                     __ptext11:
  4849                           	opt stack 0
  4850  0023D0                     ___lltoft:
  4851                           	opt stack 24
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;incstack = 0
  4855  0023D0  0E8E               	movlw	142
  4856  0023D2  0100               	movlb	0	; () banked
  4857  0023D4  6F90               	movwf	___lltoft@exp& (0+255),b
  4858  0023D6  D006               	goto	l713
  4859  0023D8                     
  4860                           ; BSR set to: 0
  4861                           
  4862                           ; BSR set to: 0
  4863  0023D8  90D8               	bcf	status,0,c
  4864  0023DA  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  4865  0023DC  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  4866  0023DE  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  4867  0023E0  3388               	rrcf	___lltoft@c& (0+255),f,b
  4868  0023E2  2B90               	incf	___lltoft@exp& (0+255),f,b
  4869  0023E4                     l713:
  4870                           
  4871                           ; BSR set to: 0
  4872                           
  4873                           ; BSR set to: 0
  4874  0023E4  0E00               	movlw	0
  4875  0023E6  1588               	andwf	___lltoft@c& (0+255),w,b
  4876  0023E8  6F8C               	movwf	??___lltoft& (0+255),b
  4877  0023EA  0E00               	movlw	0
  4878  0023EC  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  4879  0023EE  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  4880  0023F0  0E00               	movlw	0
  4881  0023F2  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  4882  0023F4  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  4883  0023F6  0EFF               	movlw	255
  4884  0023F8  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  4885  0023FA  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  4886  0023FC  518C               	movf	??___lltoft& (0+255),w,b
  4887  0023FE  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  4888  002400  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  4889  002402  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  4890  002404  A4D8               	btfss	status,2,c
  4891  002406  D7E8               	goto	l714
  4892                           
  4893                           ; BSR set to: 0
  4894                           
  4895                           ; BSR set to: 0
  4896  002408  C088  F080         	movff	___lltoft@c,___ftpack@arg
  4897  00240C  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  4898  002410  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  4899  002414  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  4900  002418  0E00               	movlw	0
  4901  00241A  6F84               	movwf	___ftpack@sign& (0+255),b
  4902  00241C  ECA8  F00F         	call	___ftpack	;wreg free
  4903  002420  C080  F088         	movff	?___ftpack,?___lltoft
  4904  002424  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  4905  002428  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  4906  00242C  0012               	return	
  4907  00242E                     __end_of___lltoft:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           intcon2	equ	0xFF1
  4917                           intcon3	equ	0xFF0
  4918                           postinc0	equ	0xFEE
  4919                           wreg	equ	0xFE8
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           fsr2h	equ	0xFDA
  4924                           fsr2l	equ	0xFD9
  4925                           status	equ	0xFD8
  4926                           
  4927 ;; *************** function ___llmod *****************
  4928 ;; Defined at:
  4929 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  dividend        4    0[BANK0 ] unsigned long 
  4932 ;;  divisor         4    4[BANK0 ] unsigned long 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;  counter         1    8[BANK0 ] unsigned char 
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  4    0[BANK0 ] unsigned long 
  4937 ;; Registers used:
  4938 ;;		wreg, status,2, status,0
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4944 ;;      Params:         0       8       0       0       0       0       0
  4945 ;;      Locals:         0       1       0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0       0       0
  4947 ;;      Totals:         0       9       0       0       0       0       0
  4948 ;;Total ram usage:        9 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    4
  4951 ;; This function calls:
  4952 ;;		Nothing
  4953 ;; This function is called by:
  4954 ;;		_sprintf
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text12
  4959  002368                     __ptext12:
  4960                           	opt stack 0
  4961  002368                     ___llmod:
  4962                           	opt stack 25
  4963                           
  4964                           ;incstack = 0
  4965  002368  0100               	movlb	0	; () banked
  4966  00236A  5184               	movf	___llmod@divisor& (0+255),w,b
  4967  00236C  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4968  00236E  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4969  002370  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4970  002372  B4D8               	btfsc	status,2,c
  4971  002374  D024               	goto	l707
  4972                           
  4973                           ; BSR set to: 0
  4974  002376  0E01               	movlw	1
  4975  002378  6F88               	movwf	___llmod@counter& (0+255),b
  4976  00237A  D006               	goto	l702
  4977  00237C                     
  4978                           ; BSR set to: 0
  4979                           
  4980                           ; BSR set to: 0
  4981  00237C  90D8               	bcf	status,0,c
  4982  00237E  3784               	rlcf	___llmod@divisor& (0+255),f,b
  4983  002380  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4984  002382  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4985  002384  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4986  002386  2B88               	incf	___llmod@counter& (0+255),f,b
  4987  002388                     l702:
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ; BSR set to: 0
  4992  002388  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4993  00238A  D7F8               	goto	l703
  4994  00238C                     u2680:
  4995                           
  4996                           ; BSR set to: 0
  4997                           
  4998                           ; BSR set to: 0
  4999                           
  5000                           ; BSR set to: 0
  5001  00238C  5184               	movf	___llmod@divisor& (0+255),w,b
  5002  00238E  5D80               	subwf	___llmod@dividend& (0+255),w,b
  5003  002390  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  5004  002392  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5005  002394  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  5006  002396  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5007  002398  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  5008  00239A  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5009  00239C  A0D8               	btfss	status,0,c
  5010  00239E  D008               	goto	l706
  5011                           
  5012                           ; BSR set to: 0
  5013  0023A0  5184               	movf	___llmod@divisor& (0+255),w,b
  5014  0023A2  5F80               	subwf	___llmod@dividend& (0+255),f,b
  5015  0023A4  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  5016  0023A6  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5017  0023A8  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  5018  0023AA  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5019  0023AC  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  5020  0023AE  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5021  0023B0                     l706:
  5022                           
  5023                           ; BSR set to: 0
  5024                           
  5025                           ; BSR set to: 0
  5026  0023B0  90D8               	bcf	status,0,c
  5027  0023B2  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5028  0023B4  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5029  0023B6  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5030  0023B8  3384               	rrcf	___llmod@divisor& (0+255),f,b
  5031                           
  5032                           ; BSR set to: 0
  5033  0023BA  2F88               	decfsz	___llmod@counter& (0+255),f,b
  5034  0023BC  D7E7               	goto	u2680
  5035  0023BE                     l707:
  5036                           
  5037                           ; BSR set to: 0
  5038                           
  5039                           ; BSR set to: 0
  5040  0023BE  C080  F080         	movff	___llmod@dividend,?___llmod
  5041  0023C2  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  5042  0023C6  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  5043  0023CA  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  5044                           
  5045                           ; BSR set to: 0
  5046  0023CE  0012               	return		;funcret
  5047  0023D0                     __end_of___llmod:
  5048                           	opt stack 0
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           intcon	equ	0xFF2
  5056                           intcon2	equ	0xFF1
  5057                           intcon3	equ	0xFF0
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function ___lldiv *****************
  5068 ;; Defined at:
  5069 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  dividend        4    0[BANK0 ] unsigned long 
  5072 ;;  divisor         4    4[BANK0 ] unsigned long 
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  quotient        4    8[BANK0 ] unsigned long 
  5075 ;;  counter         1   12[BANK0 ] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  4    0[BANK0 ] unsigned long 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5085 ;;      Params:         0       8       0       0       0       0       0
  5086 ;;      Locals:         0       5       0       0       0       0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0
  5088 ;;      Totals:         0      13       0       0       0       0       0
  5089 ;;Total ram usage:       13 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    4
  5092 ;; This function calls:
  5093 ;;		Nothing
  5094 ;; This function is called by:
  5095 ;;		_sprintf
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           	psect	text13
  5100  002272                     __ptext13:
  5101                           	opt stack 0
  5102  002272                     ___lldiv:
  5103                           	opt stack 25
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;incstack = 0
  5107  002272  0E00               	movlw	0
  5108  002274  0100               	movlb	0	; () banked
  5109  002276  6F88               	movwf	___lldiv@quotient& (0+255),b
  5110  002278  0E00               	movlw	0
  5111  00227A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5112  00227C  0E00               	movlw	0
  5113  00227E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5114  002280  0E00               	movlw	0
  5115  002282  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5116                           
  5117                           ; BSR set to: 0
  5118  002284  5184               	movf	___lldiv@divisor& (0+255),w,b
  5119  002286  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5120  002288  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5121  00228A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5122  00228C  B4D8               	btfsc	status,2,c
  5123  00228E  D02A               	goto	l697
  5124                           
  5125                           ; BSR set to: 0
  5126  002290  0E01               	movlw	1
  5127  002292  6F8C               	movwf	___lldiv@counter& (0+255),b
  5128  002294  D006               	goto	l692
  5129  002296                     
  5130                           ; BSR set to: 0
  5131                           
  5132                           ; BSR set to: 0
  5133  002296  90D8               	bcf	status,0,c
  5134  002298  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5135  00229A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5136  00229C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5137  00229E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5138  0022A0  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5139  0022A2                     l692:
  5140                           
  5141                           ; BSR set to: 0
  5142                           
  5143                           ; BSR set to: 0
  5144  0022A2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5145  0022A4  D7F8               	goto	l693
  5146  0022A6                     u2650:
  5147                           
  5148                           ; BSR set to: 0
  5149                           
  5150                           ; BSR set to: 0
  5151                           
  5152                           ; BSR set to: 0
  5153  0022A6  90D8               	bcf	status,0,c
  5154  0022A8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5155  0022AA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5156  0022AC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5157  0022AE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5158                           
  5159                           ; BSR set to: 0
  5160  0022B0  5184               	movf	___lldiv@divisor& (0+255),w,b
  5161  0022B2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5162  0022B4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5163  0022B6  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5164  0022B8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5165  0022BA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5166  0022BC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5167  0022BE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5168  0022C0  A0D8               	btfss	status,0,c
  5169  0022C2  D009               	goto	l696
  5170                           
  5171                           ; BSR set to: 0
  5172  0022C4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5173  0022C6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5174  0022C8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5175  0022CA  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5176  0022CC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5177  0022CE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5178  0022D0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5179  0022D2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5180                           
  5181                           ; BSR set to: 0
  5182  0022D4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5183  0022D6                     l696:
  5184                           
  5185                           ; BSR set to: 0
  5186                           
  5187                           ; BSR set to: 0
  5188  0022D6  90D8               	bcf	status,0,c
  5189  0022D8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5190  0022DA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5191  0022DC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5192  0022DE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5193                           
  5194                           ; BSR set to: 0
  5195  0022E0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5196  0022E2  D7E1               	goto	u2650
  5197  0022E4                     l697:
  5198                           
  5199                           ; BSR set to: 0
  5200                           
  5201                           ; BSR set to: 0
  5202  0022E4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5203  0022E8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5204  0022EC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5205  0022F0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5206                           
  5207                           ; BSR set to: 0
  5208  0022F4  0012               	return		;funcret
  5209  0022F6                     __end_of___lldiv:
  5210                           	opt stack 0
  5211                           tblptru	equ	0xFF8
  5212                           tblptrh	equ	0xFF7
  5213                           tblptrl	equ	0xFF6
  5214                           tablat	equ	0xFF5
  5215                           prodh	equ	0xFF4
  5216                           prodl	equ	0xFF3
  5217                           intcon	equ	0xFF2
  5218                           intcon2	equ	0xFF1
  5219                           intcon3	equ	0xFF0
  5220                           postinc0	equ	0xFEE
  5221                           wreg	equ	0xFE8
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function ___fttol *****************
  5230 ;; Defined at:
  5231 ;;		line 44 in file "/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  f1              3   42[BANK0 ] float 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  lval            4   52[BANK0 ] unsigned long 
  5236 ;;  exp1            1   56[BANK0 ] unsigned char 
  5237 ;;  sign1           1   51[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  4   42[BANK0 ] long 
  5240 ;; Registers used:
  5241 ;;		wreg, status,2, status,0
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5247 ;;      Params:         0       4       0       0       0       0       0
  5248 ;;      Locals:         0       6       0       0       0       0       0
  5249 ;;      Temps:          0       5       0       0       0       0       0
  5250 ;;      Totals:         0      15       0       0       0       0       0
  5251 ;;Total ram usage:       15 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    4
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_sprintf
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text14
  5262  0019E4                     __ptext14:
  5263                           	opt stack 0
  5264  0019E4                     ___fttol:
  5265                           	opt stack 25
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;incstack = 0
  5269  0019E4  C0AC  F0AE         	movff	___fttol@f1+2,??___fttol
  5270  0019E8  0100               	movlb	0	; () banked
  5271  0019EA  6BAF               	clrf	(??___fttol+1)& (0+255),b
  5272  0019EC  6BB0               	clrf	(??___fttol+2)& (0+255),b
  5273  0019EE  35AB               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5274  0019F0  37AE               	rlcf	??___fttol& (0+255),f,b
  5275  0019F2  E301               	bnc	u2561
  5276  0019F4  81AF               	bsf	(??___fttol+1)& (0+255),0,b
  5277  0019F6                     u2561:
  5278  0019F6  51AE               	movf	??___fttol& (0+255),w,b
  5279  0019F8  6FB8               	movwf	___fttol@exp1& (0+255),b
  5280  0019FA  51B8               	movf	___fttol@exp1& (0+255),w,b
  5281  0019FC  A4D8               	btfss	status,2,c
  5282  0019FE  D009               	goto	l651
  5283                           
  5284                           ; BSR set to: 0
  5285  001A00  0E00               	movlw	0
  5286  001A02  6FAA               	movwf	?___fttol& (0+255),b
  5287  001A04  0E00               	movlw	0
  5288  001A06  6FAB               	movwf	(?___fttol+1)& (0+255),b
  5289  001A08  0E00               	movlw	0
  5290  001A0A  6FAC               	movwf	(?___fttol+2)& (0+255),b
  5291  001A0C  0E00               	movlw	0
  5292  001A0E  6FAD               	movwf	(?___fttol+3)& (0+255),b
  5293                           
  5294                           ; BSR set to: 0
  5295  001A10  0012               	return	
  5296  001A12                     l651:
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ; BSR set to: 0
  5301  001A12  0E17               	movlw	23
  5302  001A14  6FAE               	movwf	??___fttol& (0+255),b
  5303  001A16  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
  5304  001A1A  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
  5305  001A1E  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
  5306  001A22  29AE               	incf	??___fttol& (0+255),w,b
  5307  001A24  6FB2               	movwf	(??___fttol+4)& (0+255),b
  5308  001A26  D004               	goto	u2580
  5309  001A28                     u2585:
  5310  001A28  90D8               	bcf	status,0,c
  5311  001A2A  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
  5312  001A2C  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
  5313  001A2E  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
  5314  001A30                     u2580:
  5315  001A30  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
  5316  001A32  D7FA               	goto	u2585
  5317  001A34  0100               	movlb	0	; () banked
  5318  001A36  51AF               	movf	(??___fttol+1)& (0+255),w,b
  5319  001A38  6FB3               	movwf	___fttol@sign1& (0+255),b
  5320                           
  5321                           ; BSR set to: 0
  5322  001A3A  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
  5323                           
  5324                           ; BSR set to: 0
  5325  001A3C  0EFF               	movlw	255
  5326  001A3E  17AA               	andwf	___fttol@f1& (0+255),f,b
  5327  001A40  0EFF               	movlw	255
  5328  001A42  17AB               	andwf	(___fttol@f1+1)& (0+255),f,b
  5329  001A44  0E00               	movlw	0
  5330  001A46  17AC               	andwf	(___fttol@f1+2)& (0+255),f,b
  5331                           
  5332                           ; BSR set to: 0
  5333  001A48  51AA               	movf	___fttol@f1& (0+255),w,b
  5334  001A4A  6FB4               	movwf	___fttol@lval& (0+255),b
  5335  001A4C  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
  5336  001A4E  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
  5337  001A50  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
  5338  001A52  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
  5339  001A54  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
  5340                           
  5341                           ; BSR set to: 0
  5342  001A56  0E8E               	movlw	142
  5343  001A58  5FB8               	subwf	___fttol@exp1& (0+255),f,b
  5344                           
  5345                           ; BSR set to: 0
  5346  001A5A  AFB8               	btfss	___fttol@exp1& (0+255),7,b
  5347  001A5C  D016               	goto	l653
  5348                           
  5349                           ; BSR set to: 0
  5350  001A5E  51B8               	movf	___fttol@exp1& (0+255),w,b
  5351  001A60  0A80               	xorlw	128
  5352  001A62  0F8F               	addlw	143
  5353  001A64  B0D8               	btfsc	status,0,c
  5354  001A66  D009               	goto	l654
  5355                           
  5356                           ; BSR set to: 0
  5357  001A68  0E00               	movlw	0
  5358  001A6A  6FAA               	movwf	?___fttol& (0+255),b
  5359  001A6C  0E00               	movlw	0
  5360  001A6E  6FAB               	movwf	(?___fttol+1)& (0+255),b
  5361  001A70  0E00               	movlw	0
  5362  001A72  6FAC               	movwf	(?___fttol+2)& (0+255),b
  5363  001A74  0E00               	movlw	0
  5364  001A76  6FAD               	movwf	(?___fttol+3)& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367  001A78  0012               	return	
  5368  001A7A                     l654:
  5369                           
  5370                           ; BSR set to: 0
  5371                           
  5372                           ; BSR set to: 0
  5373                           
  5374                           ; BSR set to: 0
  5375  001A7A  90D8               	bcf	status,0,c
  5376  001A7C  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5377  001A7E  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5378  001A80  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5379  001A82  33B4               	rrcf	___fttol@lval& (0+255),f,b
  5380                           
  5381                           ; BSR set to: 0
  5382  001A84  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
  5383  001A86  D7F9               	goto	l654
  5384                           
  5385                           ; BSR set to: 0
  5386  001A88  D015               	goto	u2620
  5387  001A8A                     l653:
  5388                           
  5389                           ; BSR set to: 0
  5390                           
  5391                           ; BSR set to: 0
  5392  001A8A  0E17               	movlw	23
  5393  001A8C  65B8               	cpfsgt	___fttol@exp1& (0+255),b
  5394  001A8E  D00F               	goto	l659
  5395                           
  5396                           ; BSR set to: 0
  5397  001A90  0E00               	movlw	0
  5398  001A92  6FAA               	movwf	?___fttol& (0+255),b
  5399  001A94  0E00               	movlw	0
  5400  001A96  6FAB               	movwf	(?___fttol+1)& (0+255),b
  5401  001A98  0E00               	movlw	0
  5402  001A9A  6FAC               	movwf	(?___fttol+2)& (0+255),b
  5403  001A9C  0E00               	movlw	0
  5404  001A9E  6FAD               	movwf	(?___fttol+3)& (0+255),b
  5405                           
  5406                           ; BSR set to: 0
  5407  001AA0  0012               	return	
  5408  001AA2                     
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  001AA2  90D8               	bcf	status,0,c
  5413  001AA4  37B4               	rlcf	___fttol@lval& (0+255),f,b
  5414  001AA6  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5415  001AA8  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5416  001AAA  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5417  001AAC  07B8               	decf	___fttol@exp1& (0+255),f,b
  5418  001AAE                     l659:
  5419                           
  5420                           ; BSR set to: 0
  5421                           
  5422                           ; BSR set to: 0
  5423  001AAE  51B8               	movf	___fttol@exp1& (0+255),w,b
  5424  001AB0  A4D8               	btfss	status,2,c
  5425  001AB2  D7F7               	goto	l660
  5426  001AB4                     u2620:
  5427                           
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431                           
  5432                           ; BSR set to: 0
  5433  001AB4  51B3               	movf	___fttol@sign1& (0+255),w,b
  5434  001AB6  B4D8               	btfsc	status,2,c
  5435  001AB8  D008               	goto	l662
  5436                           
  5437                           ; BSR set to: 0
  5438  001ABA  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
  5439  001ABC  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
  5440  001ABE  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
  5441  001AC0  6DB4               	negf	___fttol@lval& (0+255),b
  5442  001AC2  0E00               	movlw	0
  5443  001AC4  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5444  001AC6  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5445  001AC8  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5446  001ACA                     l662:
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ; BSR set to: 0
  5451  001ACA  C0B4  F0AA         	movff	___fttol@lval,?___fttol
  5452  001ACE  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
  5453  001AD2  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
  5454  001AD6  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
  5455  001ADA  0012               	return	
  5456  001ADC                     __end_of___fttol:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           intcon2	equ	0xFF1
  5466                           intcon3	equ	0xFF0
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function ___ftsub *****************
  5477 ;; Defined at:
  5478 ;;		line 20 in file "/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  f1              3   57[BANK0 ] float 
  5481 ;;  f2              3   60[BANK0 ] float 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  3   57[BANK0 ] float 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5493 ;;      Params:         0       6       0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0
  5496 ;;      Totals:         0       6       0       0       0       0       0
  5497 ;;Total ram usage:        6 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    6
  5500 ;; This function calls:
  5501 ;;		___ftadd
  5502 ;; This function is called by:
  5503 ;;		_sprintf
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text15
  5508  002522                     __ptext15:
  5509                           	opt stack 0
  5510  002522                     ___ftsub:
  5511                           	opt stack 23
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;incstack = 0
  5515  002522  0100               	movlb	0	; () banked
  5516  002524  51BC               	movf	___ftsub@f2& (0+255),w,b
  5517  002526  11BD               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5518  002528  11BE               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5519  00252A  B4D8               	btfsc	status,2,c
  5520  00252C  D006               	goto	l647
  5521                           
  5522                           ; BSR set to: 0
  5523  00252E  0E00               	movlw	0
  5524  002530  1BBC               	xorwf	___ftsub@f2& (0+255),f,b
  5525  002532  0E00               	movlw	0
  5526  002534  1BBD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5527  002536  0E80               	movlw	128
  5528  002538  1BBE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5529  00253A                     l647:
  5530                           
  5531                           ; BSR set to: 0
  5532                           
  5533                           ; BSR set to: 0
  5534  00253A  C0B9  F0AD         	movff	___ftsub@f1,___ftadd@f1
  5535  00253E  C0BA  F0AE         	movff	___ftsub@f1+1,___ftadd@f1+1
  5536  002542  C0BB  F0AF         	movff	___ftsub@f1+2,___ftadd@f1+2
  5537  002546  C0BC  F0B0         	movff	___ftsub@f2,___ftadd@f2
  5538  00254A  C0BD  F0B1         	movff	___ftsub@f2+1,___ftadd@f2+1
  5539  00254E  C0BE  F0B2         	movff	___ftsub@f2+2,___ftadd@f2+2
  5540  002552  ECEC  F00A         	call	___ftadd	;wreg free
  5541  002556  C0AD  F0B9         	movff	?___ftadd,?___ftsub
  5542  00255A  C0AE  F0BA         	movff	?___ftadd+1,?___ftsub+1
  5543  00255E  C0AF  F0BB         	movff	?___ftadd+2,?___ftsub+2
  5544  002562  0012               	return	
  5545  002564                     __end_of___ftsub:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           intcon3	equ	0xFF0
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function ___ftadd *****************
  5566 ;; Defined at:
  5567 ;;		line 86 in file "/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  f1              3   45[BANK0 ] float 
  5570 ;;  f2              3   48[BANK0 ] float 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  exp1            1   56[BANK0 ] unsigned char 
  5573 ;;  exp2            1   55[BANK0 ] unsigned char 
  5574 ;;  sign            1   54[BANK0 ] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  3   45[BANK0 ] float 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5584 ;;      Params:         0       6       0       0       0       0       0
  5585 ;;      Locals:         0       3       0       0       0       0       0
  5586 ;;      Temps:          0       3       0       0       0       0       0
  5587 ;;      Totals:         0      12       0       0       0       0       0
  5588 ;;Total ram usage:       12 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    5
  5591 ;; This function calls:
  5592 ;;		___ftpack
  5593 ;; This function is called by:
  5594 ;;		_sprintf
  5595 ;;		___ftsub
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text16
  5600  0015D8                     __ptext16:
  5601                           	opt stack 0
  5602  0015D8                     ___ftadd:
  5603                           	opt stack 23
  5604                           
  5605                           ;incstack = 0
  5606  0015D8  C0AF  F0B3         	movff	___ftadd@f1+2,??___ftadd
  5607  0015DC  0100               	movlb	0	; () banked
  5608  0015DE  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  5609  0015E0  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  5610  0015E2  35AE               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5611  0015E4  37B3               	rlcf	??___ftadd& (0+255),f,b
  5612  0015E6  E301               	bnc	u1871
  5613  0015E8  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  5614  0015EA                     u1871:
  5615  0015EA  51B3               	movf	??___ftadd& (0+255),w,b
  5616  0015EC  6FB8               	movwf	___ftadd@exp1& (0+255),b
  5617  0015EE  C0B2  F0B3         	movff	___ftadd@f2+2,??___ftadd
  5618  0015F2  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  5619  0015F4  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  5620  0015F6  35B1               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5621  0015F8  37B3               	rlcf	??___ftadd& (0+255),f,b
  5622  0015FA  E301               	bnc	u1881
  5623  0015FC  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  5624  0015FE                     u1881:
  5625  0015FE  51B3               	movf	??___ftadd& (0+255),w,b
  5626  001600  6FB7               	movwf	___ftadd@exp2& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629  001602  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5630  001604  B4D8               	btfsc	status,2,c
  5631  001606  D00B               	goto	u1910
  5632                           
  5633                           ; BSR set to: 0
  5634  001608  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5635  00160A  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  5636  00160C  B0D8               	btfsc	status,0,c
  5637  00160E  D00E               	goto	l565
  5638                           
  5639                           ; BSR set to: 0
  5640  001610  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5641  001612  0800               	sublw	0
  5642  001614  25B7               	addwf	___ftadd@exp2& (0+255),w,b
  5643  001616  6FB3               	movwf	??___ftadd& (0+255),b
  5644  001618  0E18               	movlw	24
  5645  00161A  65B3               	cpfsgt	??___ftadd& (0+255),b
  5646  00161C  D007               	goto	l565
  5647  00161E                     u1910:
  5648                           
  5649                           ; BSR set to: 0
  5650  00161E  C0B0  F0AD         	movff	___ftadd@f2,?___ftadd
  5651  001622  C0B1  F0AE         	movff	___ftadd@f2+1,?___ftadd+1
  5652  001626  C0B2  F0AF         	movff	___ftadd@f2+2,?___ftadd+2
  5653  00162A  0012               	return	
  5654  00162C                     l565:
  5655                           
  5656                           ; BSR set to: 0
  5657                           
  5658                           ; BSR set to: 0
  5659  00162C  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5660  00162E  B4D8               	btfsc	status,2,c
  5661  001630  D00B               	goto	u1940
  5662                           
  5663                           ; BSR set to: 0
  5664  001632  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5665  001634  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  5666  001636  B0D8               	btfsc	status,0,c
  5667  001638  D00E               	goto	l569
  5668                           
  5669                           ; BSR set to: 0
  5670  00163A  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5671  00163C  0800               	sublw	0
  5672  00163E  25B8               	addwf	___ftadd@exp1& (0+255),w,b
  5673  001640  6FB3               	movwf	??___ftadd& (0+255),b
  5674  001642  0E18               	movlw	24
  5675  001644  65B3               	cpfsgt	??___ftadd& (0+255),b
  5676  001646  D007               	goto	l569
  5677  001648                     u1940:
  5678                           
  5679                           ; BSR set to: 0
  5680  001648  C0AD  F0AD         	movff	___ftadd@f1,?___ftadd
  5681  00164C  C0AE  F0AE         	movff	___ftadd@f1+1,?___ftadd+1
  5682  001650  C0AF  F0AF         	movff	___ftadd@f1+2,?___ftadd+2
  5683  001654  0012               	return	
  5684  001656                     l569:
  5685                           
  5686                           ; BSR set to: 0
  5687                           
  5688                           ; BSR set to: 0
  5689  001656  0E06               	movlw	6
  5690  001658  6FB6               	movwf	___ftadd@sign& (0+255),b
  5691                           
  5692                           ; BSR set to: 0
  5693  00165A  BFAF               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5694                           
  5695                           ; BSR set to: 0
  5696  00165C  8FB6               	bsf	___ftadd@sign& (0+255),7,b
  5697                           
  5698                           ; BSR set to: 0
  5699                           
  5700                           ; BSR set to: 0
  5701  00165E  BFB2               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5702                           
  5703                           ; BSR set to: 0
  5704  001660  8DB6               	bsf	___ftadd@sign& (0+255),6,b
  5705                           
  5706                           ; BSR set to: 0
  5707  001662  8FAE               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5708                           
  5709                           ; BSR set to: 0
  5710  001664  0EFF               	movlw	255
  5711  001666  17AD               	andwf	___ftadd@f1& (0+255),f,b
  5712  001668  0EFF               	movlw	255
  5713  00166A  17AE               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5714  00166C  0E00               	movlw	0
  5715  00166E  17AF               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5716  001670  8FB1               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5717                           
  5718                           ; BSR set to: 0
  5719  001672  0EFF               	movlw	255
  5720  001674  17B0               	andwf	___ftadd@f2& (0+255),f,b
  5721  001676  0EFF               	movlw	255
  5722  001678  17B1               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5723  00167A  0E00               	movlw	0
  5724  00167C  17B2               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5725                           
  5726                           ; BSR set to: 0
  5727  00167E  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5728  001680  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  5729  001682  B0D8               	btfsc	status,0,c
  5730  001684  D01B               	goto	l574
  5731  001686                     u1970:
  5732                           
  5733                           ; BSR set to: 0
  5734                           
  5735                           ; BSR set to: 0
  5736  001686  90D8               	bcf	status,0,c
  5737  001688  37B0               	rlcf	___ftadd@f2& (0+255),f,b
  5738  00168A  37B1               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5739  00168C  37B2               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5740  00168E  07B7               	decf	___ftadd@exp2& (0+255),f,b
  5741                           
  5742                           ; BSR set to: 0
  5743  001690  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5744  001692  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  5745  001694  B4D8               	btfsc	status,2,c
  5746  001696  D00D               	goto	l579
  5747                           
  5748                           ; BSR set to: 0
  5749  001698  07B6               	decf	___ftadd@sign& (0+255),f,b
  5750  00169A  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  5751  00169E  0E07               	movlw	7
  5752  0016A0  17B3               	andwf	??___ftadd& (0+255),f,b
  5753  0016A2  B4D8               	btfsc	status,2,c
  5754  0016A4  D006               	goto	l579
  5755  0016A6  D7EF               	goto	u1970
  5756  0016A8                     
  5757                           ; BSR set to: 0
  5758                           
  5759                           ; BSR set to: 0
  5760  0016A8  90D8               	bcf	status,0,c
  5761  0016AA  33AF               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5762  0016AC  33AE               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5763  0016AE  33AD               	rrcf	___ftadd@f1& (0+255),f,b
  5764  0016B0  2BB8               	incf	___ftadd@exp1& (0+255),f,b
  5765  0016B2                     l579:
  5766                           
  5767                           ; BSR set to: 0
  5768                           
  5769                           ; BSR set to: 0
  5770  0016B2  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5771  0016B4  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  5772  0016B6  B4D8               	btfsc	status,2,c
  5773  0016B8  D01F               	goto	u2040
  5774  0016BA  D7F6               	goto	l580
  5775  0016BC                     l574:
  5776                           
  5777                           ; BSR set to: 0
  5778                           
  5779                           ; BSR set to: 0
  5780  0016BC  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5781  0016BE  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  5782  0016C0  B0D8               	btfsc	status,0,c
  5783  0016C2  D01A               	goto	u2040
  5784  0016C4                     u2010:
  5785                           
  5786                           ; BSR set to: 0
  5787                           
  5788                           ; BSR set to: 0
  5789  0016C4  90D8               	bcf	status,0,c
  5790  0016C6  37AD               	rlcf	___ftadd@f1& (0+255),f,b
  5791  0016C8  37AE               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5792  0016CA  37AF               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5793  0016CC  07B8               	decf	___ftadd@exp1& (0+255),f,b
  5794                           
  5795                           ; BSR set to: 0
  5796  0016CE  51B8               	movf	___ftadd@exp1& (0+255),w,b
  5797  0016D0  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  5798  0016D2  B4D8               	btfsc	status,2,c
  5799  0016D4  D00D               	goto	l588
  5800                           
  5801                           ; BSR set to: 0
  5802  0016D6  07B6               	decf	___ftadd@sign& (0+255),f,b
  5803  0016D8  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  5804  0016DC  0E07               	movlw	7
  5805  0016DE  17B3               	andwf	??___ftadd& (0+255),f,b
  5806  0016E0  B4D8               	btfsc	status,2,c
  5807  0016E2  D006               	goto	l588
  5808  0016E4  D7EF               	goto	u2010
  5809  0016E6                     
  5810                           ; BSR set to: 0
  5811                           
  5812                           ; BSR set to: 0
  5813  0016E6  90D8               	bcf	status,0,c
  5814  0016E8  33B2               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5815  0016EA  33B1               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5816  0016EC  33B0               	rrcf	___ftadd@f2& (0+255),f,b
  5817  0016EE  2BB7               	incf	___ftadd@exp2& (0+255),f,b
  5818  0016F0                     l588:
  5819                           
  5820                           ; BSR set to: 0
  5821                           
  5822                           ; BSR set to: 0
  5823  0016F0  51B7               	movf	___ftadd@exp2& (0+255),w,b
  5824  0016F2  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  5825  0016F4  A4D8               	btfss	status,2,c
  5826  0016F6  D7F7               	goto	l589
  5827  0016F8                     u2040:
  5828                           
  5829                           ; BSR set to: 0
  5830                           
  5831                           ; BSR set to: 0
  5832                           
  5833                           ; BSR set to: 0
  5834  0016F8  AFB6               	btfss	___ftadd@sign& (0+255),7,b
  5835  0016FA  D00C               	goto	l591
  5836                           
  5837                           ; BSR set to: 0
  5838  0016FC  0EFF               	movlw	255
  5839  0016FE  1BAD               	xorwf	___ftadd@f1& (0+255),f,b
  5840  001700  0EFF               	movlw	255
  5841  001702  1BAE               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5842  001704  0EFF               	movlw	255
  5843  001706  1BAF               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5844  001708  0E01               	movlw	1
  5845  00170A  27AD               	addwf	___ftadd@f1& (0+255),f,b
  5846  00170C  0E00               	movlw	0
  5847  00170E  23AE               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5848  001710  0E00               	movlw	0
  5849  001712  23AF               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5850  001714                     l591:
  5851                           
  5852                           ; BSR set to: 0
  5853  001714  ADB6               	btfss	___ftadd@sign& (0+255),6,b
  5854  001716  D00C               	goto	l592
  5855                           
  5856                           ; BSR set to: 0
  5857  001718  0EFF               	movlw	255
  5858  00171A  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  5859  00171C  0EFF               	movlw	255
  5860  00171E  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5861  001720  0EFF               	movlw	255
  5862  001722  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5863  001724  0E01               	movlw	1
  5864  001726  27B0               	addwf	___ftadd@f2& (0+255),f,b
  5865  001728  0E00               	movlw	0
  5866  00172A  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5867  00172C  0E00               	movlw	0
  5868  00172E  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5869  001730                     l592:
  5870                           
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874  001730  0E00               	movlw	0
  5875  001732  6FB6               	movwf	___ftadd@sign& (0+255),b
  5876                           
  5877                           ; BSR set to: 0
  5878  001734  51AD               	movf	___ftadd@f1& (0+255),w,b
  5879  001736  27B0               	addwf	___ftadd@f2& (0+255),f,b
  5880  001738  51AE               	movf	(___ftadd@f1+1)& (0+255),w,b
  5881  00173A  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5882  00173C  51AF               	movf	(___ftadd@f1+2)& (0+255),w,b
  5883  00173E  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5884                           
  5885                           ; BSR set to: 0
  5886  001740  AFB2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5887  001742  D00E               	goto	l593
  5888                           
  5889                           ; BSR set to: 0
  5890  001744  0EFF               	movlw	255
  5891  001746  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  5892  001748  0EFF               	movlw	255
  5893  00174A  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5894  00174C  0EFF               	movlw	255
  5895  00174E  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5896  001750  0E01               	movlw	1
  5897  001752  27B0               	addwf	___ftadd@f2& (0+255),f,b
  5898  001754  0E00               	movlw	0
  5899  001756  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5900  001758  0E00               	movlw	0
  5901  00175A  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904  00175C  0E01               	movlw	1
  5905  00175E  6FB6               	movwf	___ftadd@sign& (0+255),b
  5906  001760                     l593:
  5907                           
  5908                           ; BSR set to: 0
  5909                           
  5910                           ; BSR set to: 0
  5911  001760  C0B0  F080         	movff	___ftadd@f2,___ftpack@arg
  5912  001764  C0B1  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  5913  001768  C0B2  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  5914  00176C  C0B8  F083         	movff	___ftadd@exp1,___ftpack@exp
  5915  001770  C0B6  F084         	movff	___ftadd@sign,___ftpack@sign
  5916  001774  ECA8  F00F         	call	___ftpack	;wreg free
  5917  001778  C080  F0AD         	movff	?___ftpack,?___ftadd
  5918  00177C  C081  F0AE         	movff	?___ftpack+1,?___ftadd+1
  5919  001780  C082  F0AF         	movff	?___ftpack+2,?___ftadd+2
  5920  001784  0012               	return	
  5921  001786                     __end_of___ftadd:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           intcon2	equ	0xFF1
  5931                           intcon3	equ	0xFF0
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           indf2	equ	0xFDF
  5935                           postinc2	equ	0xFDE
  5936                           postdec2	equ	0xFDD
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function ___ftpack *****************
  5942 ;; Defined at:
  5943 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  arg             3    0[BANK0 ] unsigned um
  5946 ;;  exp             1    3[BANK0 ] unsigned char 
  5947 ;;  sign            1    4[BANK0 ] unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  3    0[BANK0 ] float 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5959 ;;      Params:         0       5       0       0       0       0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0
  5961 ;;      Temps:          0       3       0       0       0       0       0
  5962 ;;      Totals:         0       8       0       0       0       0       0
  5963 ;;Total ram usage:        8 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    4
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		___ftadd
  5970 ;;		___ftmul
  5971 ;;		___lltoft
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text17
  5976  001F50                     __ptext17:
  5977                           	opt stack 0
  5978  001F50                     ___ftpack:
  5979                           	opt stack 23
  5980                           
  5981                           ;incstack = 0
  5982  001F50  0100               	movlb	0	; () banked
  5983  001F52  5183               	movf	___ftpack@exp& (0+255),w,b
  5984  001F54  B4D8               	btfsc	status,2,c
  5985  001F56  D005               	goto	u1800
  5986                           
  5987                           ; BSR set to: 0
  5988  001F58  5180               	movf	___ftpack@arg& (0+255),w,b
  5989  001F5A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5990  001F5C  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5991  001F5E  A4D8               	btfss	status,2,c
  5992  001F60  D00C               	goto	l534
  5993  001F62                     u1800:
  5994                           
  5995                           ; BSR set to: 0
  5996                           
  5997                           ; BSR set to: 0
  5998  001F62  0E00               	movlw	0
  5999  001F64  6F80               	movwf	?___ftpack& (0+255),b
  6000  001F66  0E00               	movlw	0
  6001  001F68  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6002  001F6A  0E00               	movlw	0
  6003  001F6C  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6004                           
  6005                           ; BSR set to: 0
  6006  001F6E  0012               	return	
  6007  001F70                     
  6008                           ; BSR set to: 0
  6009                           
  6010                           ; BSR set to: 0
  6011  001F70  2B83               	incf	___ftpack@exp& (0+255),f,b
  6012  001F72  90D8               	bcf	status,0,c
  6013  001F74  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6014  001F76  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6015  001F78  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6016  001F7A                     l534:
  6017                           
  6018                           ; BSR set to: 0
  6019                           
  6020                           ; BSR set to: 0
  6021  001F7A  0E00               	movlw	0
  6022  001F7C  1580               	andwf	___ftpack@arg& (0+255),w,b
  6023  001F7E  6F85               	movwf	??___ftpack& (0+255),b
  6024  001F80  0E00               	movlw	0
  6025  001F82  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6026  001F84  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6027  001F86  0EFE               	movlw	254
  6028  001F88  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6029  001F8A  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6030  001F8C  5185               	movf	??___ftpack& (0+255),w,b
  6031  001F8E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6032  001F90  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6033  001F92  B4D8               	btfsc	status,2,c
  6034  001F94  D00C               	goto	l537
  6035  001F96  D7EC               	goto	l535
  6036  001F98                     
  6037                           ; BSR set to: 0
  6038                           
  6039                           ; BSR set to: 0
  6040  001F98  2B83               	incf	___ftpack@exp& (0+255),f,b
  6041                           
  6042                           ; BSR set to: 0
  6043  001F9A  0E01               	movlw	1
  6044  001F9C  2780               	addwf	___ftpack@arg& (0+255),f,b
  6045  001F9E  0E00               	movlw	0
  6046  001FA0  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6047  001FA2  0E00               	movlw	0
  6048  001FA4  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6049  001FA6  90D8               	bcf	status,0,c
  6050  001FA8  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6051  001FAA  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6052  001FAC  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6053  001FAE                     l537:
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058  001FAE  0E00               	movlw	0
  6059  001FB0  1580               	andwf	___ftpack@arg& (0+255),w,b
  6060  001FB2  6F85               	movwf	??___ftpack& (0+255),b
  6061  001FB4  0E00               	movlw	0
  6062  001FB6  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6063  001FB8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6064  001FBA  0EFF               	movlw	255
  6065  001FBC  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6066  001FBE  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6067  001FC0  5185               	movf	??___ftpack& (0+255),w,b
  6068  001FC2  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6069  001FC4  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6070  001FC6  B4D8               	btfsc	status,2,c
  6071  001FC8  D006               	goto	l540
  6072  001FCA  D7E6               	goto	l538
  6073  001FCC                     
  6074                           ; BSR set to: 0
  6075                           
  6076                           ; BSR set to: 0
  6077  001FCC  0783               	decf	___ftpack@exp& (0+255),f,b
  6078  001FCE  90D8               	bcf	status,0,c
  6079  001FD0  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6080  001FD2  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6081  001FD4  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6082  001FD6                     l540:
  6083                           
  6084                           ; BSR set to: 0
  6085                           
  6086                           ; BSR set to: 0
  6087  001FD6  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6088  001FD8  D003               	goto	u1840
  6089                           
  6090                           ; BSR set to: 0
  6091  001FDA  0E02               	movlw	2
  6092  001FDC  6183               	cpfslt	___ftpack@exp& (0+255),b
  6093  001FDE  D7F6               	goto	l541
  6094  001FE0                     u1840:
  6095                           
  6096                           ; BSR set to: 0
  6097                           
  6098                           ; BSR set to: 0
  6099  001FE0  A183               	btfss	___ftpack@exp& (0+255),0,b
  6100                           
  6101                           ; BSR set to: 0
  6102  001FE2  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6103                           
  6104                           ; BSR set to: 0
  6105                           
  6106                           ; BSR set to: 0
  6107  001FE4  90D8               	bcf	status,0,c
  6108  001FE6  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6109  001FE8  5183               	movf	___ftpack@exp& (0+255),w,b
  6110  001FEA  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6111                           
  6112                           ; BSR set to: 0
  6113  001FEC  5184               	movf	___ftpack@sign& (0+255),w,b
  6114  001FEE  A4D8               	btfss	status,2,c
  6115                           
  6116                           ; BSR set to: 0
  6117  001FF0  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6118                           
  6119                           ; BSR set to: 0
  6120                           
  6121                           ; BSR set to: 0
  6122  001FF2  C080  F080         	movff	___ftpack@arg,?___ftpack
  6123  001FF6  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6124  001FFA  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6125  001FFE  0012               	return	
  6126  002000                     __end_of___ftpack:
  6127                           	opt stack 0
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           intcon	equ	0xFF2
  6135                           intcon2	equ	0xFF1
  6136                           intcon3	equ	0xFF0
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           indf2	equ	0xFDF
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           fsr2h	equ	0xFDA
  6143                           fsr2l	equ	0xFD9
  6144                           status	equ	0xFD8
  6145                           
  6146 ;; *************** function ___ftneg *****************
  6147 ;; Defined at:
  6148 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  f1              3    0[BANK0 ] float 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;		None
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  3    0[BANK0 ] float 
  6155 ;; Registers used:
  6156 ;;		wreg, status,2, status,0
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6162 ;;      Params:         0       3       0       0       0       0       0
  6163 ;;      Locals:         0       0       0       0       0       0       0
  6164 ;;      Temps:          0       0       0       0       0       0       0
  6165 ;;      Totals:         0       3       0       0       0       0       0
  6166 ;;Total ram usage:        3 bytes
  6167 ;; Hardware stack levels used:    1
  6168 ;; Hardware stack levels required when called:    4
  6169 ;; This function calls:
  6170 ;;		Nothing
  6171 ;; This function is called by:
  6172 ;;		_sprintf
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           	psect	text18
  6177  002692                     __ptext18:
  6178                           	opt stack 0
  6179  002692                     ___ftneg:
  6180                           	opt stack 25
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;incstack = 0
  6184  002692  0100               	movlb	0	; () banked
  6185  002694  5180               	movf	___ftneg@f1& (0+255),w,b
  6186  002696  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6187  002698  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6188  00269A  B4D8               	btfsc	status,2,c
  6189  00269C  D006               	goto	l641
  6190                           
  6191                           ; BSR set to: 0
  6192  00269E  0E00               	movlw	0
  6193  0026A0  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  6194  0026A2  0E00               	movlw	0
  6195  0026A4  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6196  0026A6  0E80               	movlw	128
  6197  0026A8  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6198  0026AA                     l641:
  6199                           
  6200                           ; BSR set to: 0
  6201  0026AA  C080  F080         	movff	___ftneg@f1,?___ftneg
  6202  0026AE  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  6203  0026B2  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  6204                           
  6205                           ; BSR set to: 0
  6206  0026B6  0012               	return		;funcret
  6207  0026B8                     __end_of___ftneg:
  6208                           	opt stack 0
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           prodh	equ	0xFF4
  6214                           prodl	equ	0xFF3
  6215                           intcon	equ	0xFF2
  6216                           intcon2	equ	0xFF1
  6217                           intcon3	equ	0xFF0
  6218                           postinc0	equ	0xFEE
  6219                           wreg	equ	0xFE8
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function ___ftge *****************
  6228 ;; Defined at:
  6229 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  ff1             3    0[BANK0 ] float 
  6232 ;;  ff2             3    3[BANK0 ] float 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;		None               void
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6244 ;;      Params:         0       6       0       0       0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0
  6246 ;;      Temps:          0       3       0       0       0       0       0
  6247 ;;      Totals:         0       9       0       0       0       0       0
  6248 ;;Total ram usage:        9 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    4
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_sprintf
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text19
  6259  00215A                     __ptext19:
  6260                           	opt stack 0
  6261  00215A                     ___ftge:
  6262                           	opt stack 25
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;incstack = 0
  6266  00215A  0100               	movlb	0	; () banked
  6267  00215C  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6268  00215E  D016               	goto	l623
  6269                           
  6270                           ; BSR set to: 0
  6271  002160  C080  F086         	movff	___ftge@ff1,??___ftge
  6272  002164  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  6273  002168  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  6274  00216C  1F86               	comf	??___ftge& (0+255),f,b
  6275  00216E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  6276  002170  1F88               	comf	(??___ftge+2)& (0+255),f,b
  6277  002172  2B86               	incf	??___ftge& (0+255),f,b
  6278  002174  0E00               	movlw	0
  6279  002176  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  6280  002178  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  6281  00217A  0E00               	movlw	0
  6282  00217C  2586               	addwf	??___ftge& (0+255),w,b
  6283  00217E  6F80               	movwf	___ftge@ff1& (0+255),b
  6284  002180  0E00               	movlw	0
  6285  002182  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  6286  002184  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  6287  002186  0E80               	movlw	128
  6288  002188  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  6289  00218A  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  6290  00218C                     l623:
  6291                           
  6292                           ; BSR set to: 0
  6293                           
  6294                           ; BSR set to: 0
  6295  00218C  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6296  00218E  D016               	goto	l624
  6297                           
  6298                           ; BSR set to: 0
  6299  002190  C083  F086         	movff	___ftge@ff2,??___ftge
  6300  002194  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  6301  002198  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  6302  00219C  1F86               	comf	??___ftge& (0+255),f,b
  6303  00219E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  6304  0021A0  1F88               	comf	(??___ftge+2)& (0+255),f,b
  6305  0021A2  2B86               	incf	??___ftge& (0+255),f,b
  6306  0021A4  0E00               	movlw	0
  6307  0021A6  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  6308  0021A8  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  6309  0021AA  0E00               	movlw	0
  6310  0021AC  2586               	addwf	??___ftge& (0+255),w,b
  6311  0021AE  6F83               	movwf	___ftge@ff2& (0+255),b
  6312  0021B0  0E00               	movlw	0
  6313  0021B2  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  6314  0021B4  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  6315  0021B6  0E80               	movlw	128
  6316  0021B8  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  6317  0021BA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  6318  0021BC                     l624:
  6319                           
  6320                           ; BSR set to: 0
  6321                           
  6322                           ; BSR set to: 0
  6323  0021BC  0E00               	movlw	0
  6324  0021BE  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  6325  0021C0  0E00               	movlw	0
  6326  0021C2  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6327  0021C4  0E80               	movlw	128
  6328  0021C6  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6329                           
  6330                           ; BSR set to: 0
  6331  0021C8  0E00               	movlw	0
  6332  0021CA  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  6333  0021CC  0E00               	movlw	0
  6334  0021CE  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6335  0021D0  0E80               	movlw	128
  6336  0021D2  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6337  0021D4  5183               	movf	___ftge@ff2& (0+255),w,b
  6338  0021D6  5D80               	subwf	___ftge@ff1& (0+255),w,b
  6339  0021D8  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  6340  0021DA  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6341  0021DC  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  6342  0021DE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6343  0021E0  B0D8               	btfsc	status,0,c
  6344  0021E2  D002               	goto	l2231
  6345                           
  6346                           ; BSR set to: 0
  6347  0021E4  90D8               	bcf	status,0,c
  6348  0021E6  0012               	return	
  6349  0021E8                     l2231:
  6350                           
  6351                           ; BSR set to: 0
  6352                           
  6353                           ; BSR set to: 0
  6354  0021E8  80D8               	bsf	status,0,c
  6355                           
  6356                           ; BSR set to: 0
  6357  0021EA  0012               	return	
  6358  0021EC                     __end_of___ftge:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           intcon	equ	0xFF2
  6367                           intcon2	equ	0xFF1
  6368                           intcon3	equ	0xFF0
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _lcd_msg *****************
  6379 ;; Defined at:
  6380 ;;		line 99 in file "../MyLibs/lcd4a.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  c               2    4[BANK0 ] PTR unsigned char 
  6383 ;;		 -> value(8), STR_1(16), 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6395 ;;      Params:         0       2       0       0       0       0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0
  6398 ;;      Totals:         0       2       0       0       0       0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    7
  6402 ;; This function calls:
  6403 ;;		_lcd_putc
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text20
  6410  00242E                     __ptext20:
  6411                           	opt stack 0
  6412  00242E                     _lcd_msg:
  6413                           	opt stack 23
  6414                           
  6415                           ;lcd4a.c: 101: while(*c != 0)
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;incstack = 0
  6419  00242E  D015               	goto	l159
  6420  002430                     
  6421                           ;lcd4a.c: 102: {
  6422                           ;lcd4a.c: 103: lcd_putc(*c++);
  6423  002430  C084  FFF6         	movff	lcd_msg@c,tblptrl
  6424  002434  C085  FFF7         	movff	lcd_msg@c+1,tblptrh
  6425  002438  6AF8               	clrf	tblptru,c
  6426  00243A  0E05               	movlw	(high __ramtop+-1)
  6427  00243C  64F7               	cpfsgt	tblptrh,c
  6428  00243E  D003               	bra	u2797
  6429  002440  0008               	tblrd		*
  6430  002442  50F5               	movf	tablat,w,c
  6431  002444  D005               	bra	u2790
  6432  002446                     u2797:
  6433  002446  CFF6 FFE9          	movff	tblptrl,fsr0l
  6434  00244A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6435  00244E  50EF               	movf	indf0,w,c
  6436  002450                     u2790:
  6437  002450  ECB2  F012         	call	_lcd_putc
  6438  002454  0100               	movlb	0	; () banked
  6439  002456  4B84               	infsnz	lcd_msg@c& (0+255),f,b
  6440  002458  2B85               	incf	(lcd_msg@c+1)& (0+255),f,b
  6441  00245A                     l159:
  6442                           
  6443                           ; BSR set to: 0
  6444  00245A  C084  FFF6         	movff	lcd_msg@c,tblptrl
  6445  00245E  C085  FFF7         	movff	lcd_msg@c+1,tblptrh
  6446  002462  6AF8               	clrf	tblptru,c
  6447  002464  0E05               	movlw	(high __ramtop+-1)
  6448  002466  64F7               	cpfsgt	tblptrh,c
  6449  002468  D003               	bra	u2807
  6450  00246A  0008               	tblrd		*
  6451  00246C  50F5               	movf	tablat,w,c
  6452  00246E  D005               	bra	u2800
  6453  002470                     u2807:
  6454  002470  CFF6 FFE9          	movff	tblptrl,fsr0l
  6455  002474  CFF7 FFEA          	movff	tblptrh,fsr0h
  6456  002478  50EF               	movf	indf0,w,c
  6457  00247A                     u2800:
  6458  00247A  0900               	iorlw	0
  6459  00247C  B4D8               	btfsc	status,2,c
  6460  00247E  0012               	return	
  6461  002480  D7D7               	goto	l160
  6462  002482                     __end_of_lcd_msg:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           intcon	equ	0xFF2
  6471                           intcon2	equ	0xFF1
  6472                           intcon3	equ	0xFF0
  6473                           indf0	equ	0xFEF
  6474                           postinc0	equ	0xFEE
  6475                           fsr0h	equ	0xFEA
  6476                           fsr0l	equ	0xFE9
  6477                           wreg	equ	0xFE8
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _lcd_putc *****************
  6486 ;; Defined at:
  6487 ;;		line 64 in file "../MyLibs/lcd4a.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  c               1    wreg     unsigned char 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  c               1    3[BANK0 ] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, status,0, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6501 ;;      Params:         0       0       0       0       0       0       0
  6502 ;;      Locals:         0       1       0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0
  6504 ;;      Totals:         0       1       0       0       0       0       0
  6505 ;;Total ram usage:        1 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    6
  6508 ;; This function calls:
  6509 ;;		_lcd_cmd
  6510 ;;		_lcd_dwr
  6511 ;; This function is called by:
  6512 ;;		_lcd_msg
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text21
  6517  002564                     __ptext21:
  6518                           	opt stack 0
  6519  002564                     _lcd_putc:
  6520                           	opt stack 23
  6521                           
  6522                           ;incstack = 0
  6523                           ;lcd_putc@c stored from wreg
  6524  002564  0100               	movlb	0	; () banked
  6525  002566  6F83               	movwf	lcd_putc@c& (0+255),b
  6526                           
  6527                           ;lcd4a.c: 66: switch(c)
  6528  002568  D011               	goto	l147
  6529  00256A                     
  6530                           ;lcd4a.c: 69: lcd_cmd(0x01);
  6531  00256A  0E01               	movlw	1
  6532  00256C  EC41  F012         	call	_lcd_cmd
  6533                           
  6534                           ;lcd4a.c: 70: break;
  6535  002570  0012               	return	
  6536  002572                     
  6537                           ;lcd4a.c: 72: lcd_cmd(2);
  6538  002572  0E02               	movlw	2
  6539  002574  EC41  F012         	call	_lcd_cmd
  6540                           
  6541                           ;lcd4a.c: 73: break;
  6542  002578  0012               	return	
  6543  00257A                     
  6544                           ;lcd4a.c: 75: lcd_cmd(0x10);
  6545  00257A  0E10               	movlw	16
  6546  00257C  EC41  F012         	call	_lcd_cmd
  6547                           
  6548                           ;lcd4a.c: 76: break;
  6549  002580  0012               	return	
  6550  002582                     
  6551                           ;lcd4a.c: 78: lcd_dwr(c);
  6552  002582  0100               	movlb	0	; () banked
  6553  002584  5183               	movf	lcd_putc@c& (0+255),w,b
  6554  002586  EC6A  F012         	call	_lcd_dwr
  6555                           
  6556                           ;lcd4a.c: 80: }
  6557                           
  6558                           ;lcd4a.c: 79: break;
  6559  00258A  0012               	return	
  6560  00258C                     l147:
  6561  00258C  0100               	movlb	0	; () banked
  6562  00258E  5183               	movf	lcd_putc@c& (0+255),w,b
  6563                           
  6564                           ; Switch size 1, requested type "space"
  6565                           ; Number of cases is 3, Range of values is 8 to 12
  6566                           ; switch strategies available:
  6567                           ; Name         Instructions Cycles
  6568                           ; simple_byte           10     6 (average)
  6569                           ;	Chosen strategy is simple_byte
  6570  002590  0A08               	xorlw	8	; case 8
  6571  002592  B4D8               	btfsc	status,2,c
  6572  002594  D7F2               	goto	l151
  6573  002596  0A02               	xorlw	2	; case 10
  6574  002598  B4D8               	btfsc	status,2,c
  6575  00259A  D7EB               	goto	l150
  6576  00259C  0A06               	xorlw	6	; case 12
  6577  00259E  B4D8               	btfsc	status,2,c
  6578  0025A0  D7E4               	goto	l148
  6579  0025A2  D7EF               	goto	l152
  6580  0025A4                     __end_of_lcd_putc:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           indf0	equ	0xFEF
  6592                           postinc0	equ	0xFEE
  6593                           fsr0h	equ	0xFEA
  6594                           fsr0l	equ	0xFE9
  6595                           wreg	equ	0xFE8
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _lcd_dwr *****************
  6604 ;; Defined at:
  6605 ;;		line 84 in file "../MyLibs/lcd4a.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  x               1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  x               1    2[BANK0 ] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      void 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6619 ;;      Params:         0       0       0       0       0       0       0
  6620 ;;      Locals:         0       1       0       0       0       0       0
  6621 ;;      Temps:          0       1       0       0       0       0       0
  6622 ;;      Totals:         0       2       0       0       0       0       0
  6623 ;;Total ram usage:        2 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    5
  6626 ;; This function calls:
  6627 ;;		_lcd_lat
  6628 ;;		_manda
  6629 ;; This function is called by:
  6630 ;;		_lcd_putc
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text22
  6635  0024D4                     __ptext22:
  6636                           	opt stack 0
  6637  0024D4                     _lcd_dwr:
  6638                           	opt stack 23
  6639                           
  6640                           ;incstack = 0
  6641                           ;lcd_dwr@x stored from wreg
  6642  0024D4  0100               	movlb	0	; () banked
  6643  0024D6  6F82               	movwf	lcd_dwr@x& (0+255),b
  6644                           
  6645                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  6646  0024D8  848C               	bsf	3980,2,c	;volatile
  6647                           
  6648                           ;lcd4a.c: 87: lcd &= 0x0F;
  6649  0024DA  0E0F               	movlw	15
  6650  0024DC  1648               	andwf	_lcd,f,c
  6651                           
  6652                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  6653  0024DE  0100               	movlb	0	; () banked
  6654  0024E0  5182               	movf	lcd_dwr@x& (0+255),w,b
  6655  0024E2  0BF0               	andlw	240
  6656  0024E4  1248               	iorwf	_lcd,f,c
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;lcd4a.c: 89: manda(lcd);
  6660  0024E6  5048               	movf	_lcd,w,c
  6661  0024E8  EC0A  F013         	call	_manda
  6662                           
  6663                           ;lcd4a.c: 90: lcd_lat();
  6664  0024EC  EC7C  F013         	call	_lcd_lat	;wreg free
  6665                           
  6666                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  6667  0024F0  0E04               	movlw	4
  6668  0024F2  0100               	movlb	0	; () banked
  6669  0024F4  6F81               	movwf	??_lcd_dwr& (0+255),b
  6670  0024F6  0EE4               	movlw	228
  6671  0024F8                     u3417:
  6672  0024F8  2EE8               	decfsz	wreg,f,c
  6673  0024FA  D7FE               	bra	u3417
  6674  0024FC  2F81               	decfsz	??_lcd_dwr& (0+255),f,b
  6675  0024FE  D7FC               	bra	u3417
  6676  002500  F000               	nop	
  6677                           
  6678                           ;lcd4a.c: 93: lcd &= 0x0F;
  6679  002502  0E0F               	movlw	15
  6680  002504  1648               	andwf	_lcd,f,c
  6681                           
  6682                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  6683  002506  C082  F081         	movff	lcd_dwr@x,??_lcd_dwr
  6684  00250A  0E0F               	movlw	15
  6685  00250C  0100               	movlb	0	; () banked
  6686  00250E  1781               	andwf	??_lcd_dwr& (0+255),f,b
  6687  002510  3981               	swapf	??_lcd_dwr& (0+255),w,b
  6688  002512  0BF0               	andlw	240
  6689  002514  1248               	iorwf	_lcd,f,c
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;lcd4a.c: 95: manda(lcd);
  6693  002516  5048               	movf	_lcd,w,c
  6694  002518  EC0A  F013         	call	_manda
  6695                           
  6696                           ;lcd4a.c: 96: lcd_lat();
  6697  00251C  EC7C  F013         	call	_lcd_lat	;wreg free
  6698  002520  0012               	return		;funcret
  6699  002522                     __end_of_lcd_dwr:
  6700                           	opt stack 0
  6701                           tblptru	equ	0xFF8
  6702                           tblptrh	equ	0xFF7
  6703                           tblptrl	equ	0xFF6
  6704                           tablat	equ	0xFF5
  6705                           prodh	equ	0xFF4
  6706                           prodl	equ	0xFF3
  6707                           intcon	equ	0xFF2
  6708                           intcon2	equ	0xFF1
  6709                           intcon3	equ	0xFF0
  6710                           indf0	equ	0xFEF
  6711                           postinc0	equ	0xFEE
  6712                           fsr0h	equ	0xFEA
  6713                           fsr0l	equ	0xFE9
  6714                           wreg	equ	0xFE8
  6715                           indf2	equ	0xFDF
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           fsr2h	equ	0xFDA
  6719                           fsr2l	equ	0xFD9
  6720                           status	equ	0xFD8
  6721                           
  6722 ;; *************** function _lcd_init *****************
  6723 ;; Defined at:
  6724 ;;		line 133 in file "../MyLibs/lcd4a.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6738 ;;      Params:         0       0       0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0
  6740 ;;      Temps:          0       1       0       0       0       0       0
  6741 ;;      Totals:         0       1       0       0       0       0       0
  6742 ;;Total ram usage:        1 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    6
  6745 ;; This function calls:
  6746 ;;		_lcd_cmd
  6747 ;;		_lcd_cmd_hf
  6748 ;; This function is called by:
  6749 ;;		_main
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text23
  6754  001E90                     __ptext23:
  6755                           	opt stack 0
  6756  001E90                     _lcd_init:
  6757                           	opt stack 24
  6758                           
  6759                           ;lcd4a.c: 141: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  6760                           
  6761                           ;incstack = 0
  6762  001E90  9E95               	bcf	3989,7,c	;volatile
  6763                           
  6764                           ;lcd4a.c: 142: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  6765  001E92  9C95               	bcf	3989,6,c	;volatile
  6766                           
  6767                           ;lcd4a.c: 143: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  6768  001E94  9A95               	bcf	3989,5,c	;volatile
  6769                           
  6770                           ;lcd4a.c: 144: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
  6771  001E96  9895               	bcf	3989,4,c	;volatile
  6772                           
  6773                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
  6774  001E98  9495               	bcf	3989,2,c	;volatile
  6775                           
  6776                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
  6777  001E9A  9695               	bcf	3989,3,c	;volatile
  6778                           
  6779                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
  6780  001E9C  0E30               	movlw	48
  6781  001E9E  EC6D  F013         	call	_lcd_cmd_hf
  6782                           
  6783                           ;lcd4a.c: 152: _delay((unsigned long)((15)*(4000000/4000.0)));
  6784  001EA2  0E14               	movlw	20
  6785  001EA4  0100               	movlb	0	; () banked
  6786  001EA6  6F83               	movwf	??_lcd_init& (0+255),b
  6787  001EA8  0E79               	movlw	121
  6788  001EAA                     u3427:
  6789  001EAA  2EE8               	decfsz	wreg,f,c
  6790  001EAC  D7FE               	bra	u3427
  6791  001EAE  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6792  001EB0  D7FC               	bra	u3427
  6793  001EB2  D000               	nop2	
  6794                           
  6795                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
  6796  001EB4  0E30               	movlw	48
  6797  001EB6  EC6D  F013         	call	_lcd_cmd_hf
  6798                           
  6799                           ;lcd4a.c: 154: _delay((unsigned long)((1)*(4000000/4000.0)));
  6800  001EBA  0EC8               	movlw	200
  6801  001EBC                     u3437:
  6802  001EBC  D000               	nop2	
  6803  001EBE  2EE8               	decfsz	wreg,f,c
  6804  001EC0  D7FD               	bra	u3437
  6805                           
  6806                           ;lcd4a.c: 155: lcd_cmd_hf(0x30);
  6807  001EC2  0E30               	movlw	48
  6808  001EC4  EC6D  F013         	call	_lcd_cmd_hf
  6809                           
  6810                           ;lcd4a.c: 156: _delay((unsigned long)((15)*(4000000/4000.0)));
  6811  001EC8  0E14               	movlw	20
  6812  001ECA  0100               	movlb	0	; () banked
  6813  001ECC  6F83               	movwf	??_lcd_init& (0+255),b
  6814  001ECE  0E79               	movlw	121
  6815  001ED0                     u3447:
  6816  001ED0  2EE8               	decfsz	wreg,f,c
  6817  001ED2  D7FE               	bra	u3447
  6818  001ED4  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6819  001ED6  D7FC               	bra	u3447
  6820  001ED8  D000               	nop2	
  6821                           
  6822                           ;lcd4a.c: 157: lcd_cmd_hf(0x20);
  6823  001EDA  0E20               	movlw	32
  6824  001EDC  EC6D  F013         	call	_lcd_cmd_hf
  6825                           
  6826                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  6827  001EE0  0E07               	movlw	7
  6828  001EE2  0100               	movlb	0	; () banked
  6829  001EE4  6F83               	movwf	??_lcd_init& (0+255),b
  6830  001EE6  0E7D               	movlw	125
  6831  001EE8                     u3457:
  6832  001EE8  2EE8               	decfsz	wreg,f,c
  6833  001EEA  D7FE               	bra	u3457
  6834  001EEC  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6835  001EEE  D7FC               	bra	u3457
  6836                           
  6837                           ;lcd4a.c: 159: lcd_cmd(0x28);
  6838  001EF0  0E28               	movlw	40
  6839  001EF2  EC41  F012         	call	_lcd_cmd
  6840                           
  6841                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
  6842  001EF6  0E07               	movlw	7
  6843  001EF8  0100               	movlb	0	; () banked
  6844  001EFA  6F83               	movwf	??_lcd_init& (0+255),b
  6845  001EFC  0E7D               	movlw	125
  6846  001EFE                     u3467:
  6847  001EFE  2EE8               	decfsz	wreg,f,c
  6848  001F00  D7FE               	bra	u3467
  6849  001F02  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6850  001F04  D7FC               	bra	u3467
  6851                           
  6852                           ;lcd4a.c: 161: lcd_cmd(0x0E);
  6853  001F06  0E0E               	movlw	14
  6854  001F08  EC41  F012         	call	_lcd_cmd
  6855                           
  6856                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  6857  001F0C  0E07               	movlw	7
  6858  001F0E  0100               	movlb	0	; () banked
  6859  001F10  6F83               	movwf	??_lcd_init& (0+255),b
  6860  001F12  0E7D               	movlw	125
  6861  001F14                     u3477:
  6862  001F14  2EE8               	decfsz	wreg,f,c
  6863  001F16  D7FE               	bra	u3477
  6864  001F18  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6865  001F1A  D7FC               	bra	u3477
  6866                           
  6867                           ;lcd4a.c: 163: lcd_cmd(0x01);
  6868  001F1C  0E01               	movlw	1
  6869  001F1E  EC41  F012         	call	_lcd_cmd
  6870                           
  6871                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  6872  001F22  0E07               	movlw	7
  6873  001F24  0100               	movlb	0	; () banked
  6874  001F26  6F83               	movwf	??_lcd_init& (0+255),b
  6875  001F28  0E7D               	movlw	125
  6876  001F2A                     u3487:
  6877  001F2A  2EE8               	decfsz	wreg,f,c
  6878  001F2C  D7FE               	bra	u3487
  6879  001F2E  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6880  001F30  D7FC               	bra	u3487
  6881                           
  6882                           ;lcd4a.c: 165: lcd_cmd(0x06);
  6883  001F32  0E06               	movlw	6
  6884  001F34  EC41  F012         	call	_lcd_cmd
  6885                           
  6886                           ;lcd4a.c: 166: _delay((unsigned long)((5)*(4000000/4000.0)));
  6887  001F38  0E07               	movlw	7
  6888  001F3A  0100               	movlb	0	; () banked
  6889  001F3C  6F83               	movwf	??_lcd_init& (0+255),b
  6890  001F3E  0E7D               	movlw	125
  6891  001F40                     u3497:
  6892  001F40  2EE8               	decfsz	wreg,f,c
  6893  001F42  D7FE               	bra	u3497
  6894  001F44  2F83               	decfsz	??_lcd_init& (0+255),f,b
  6895  001F46  D7FC               	bra	u3497
  6896                           
  6897                           ;lcd4a.c: 167: lcd_cmd(0x80);
  6898  001F48  0E80               	movlw	128
  6899  001F4A  EC41  F012         	call	_lcd_cmd
  6900  001F4E  0012               	return		;funcret
  6901  001F50                     __end_of_lcd_init:
  6902                           	opt stack 0
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           intcon2	equ	0xFF1
  6911                           intcon3	equ	0xFF0
  6912                           indf0	equ	0xFEF
  6913                           postinc0	equ	0xFEE
  6914                           fsr0h	equ	0xFEA
  6915                           fsr0l	equ	0xFE9
  6916                           wreg	equ	0xFE8
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           fsr2h	equ	0xFDA
  6921                           fsr2l	equ	0xFD9
  6922                           status	equ	0xFD8
  6923                           
  6924 ;; *************** function _lcd_cmd_hf *****************
  6925 ;; Defined at:
  6926 ;;		line 54 in file "../MyLibs/lcd4a.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;  x               1    wreg     unsigned char 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  x               1    1[BANK0 ] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  1    wreg      void 
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6940 ;;      Params:         0       0       0       0       0       0       0
  6941 ;;      Locals:         0       1       0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0
  6943 ;;      Totals:         0       1       0       0       0       0       0
  6944 ;;Total ram usage:        1 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    5
  6947 ;; This function calls:
  6948 ;;		_lcd_lat
  6949 ;;		_manda
  6950 ;; This function is called by:
  6951 ;;		_lcd_init
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text24
  6956  0026DA                     __ptext24:
  6957                           	opt stack 0
  6958  0026DA                     _lcd_cmd_hf:
  6959                           	opt stack 24
  6960                           
  6961                           ;incstack = 0
  6962                           ;lcd_cmd_hf@x stored from wreg
  6963  0026DA  0100               	movlb	0	; () banked
  6964  0026DC  6F81               	movwf	lcd_cmd_hf@x& (0+255),b
  6965                           
  6966                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  6967  0026DE  948C               	bcf	3980,2,c	;volatile
  6968                           
  6969                           ;lcd4a.c: 57: lcd &= 0x0F;
  6970  0026E0  0E0F               	movlw	15
  6971  0026E2  1648               	andwf	_lcd,f,c
  6972                           
  6973                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  6974  0026E4  0100               	movlb	0	; () banked
  6975  0026E6  5181               	movf	lcd_cmd_hf@x& (0+255),w,b
  6976  0026E8  0BF0               	andlw	240
  6977  0026EA  1248               	iorwf	_lcd,f,c
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;lcd4a.c: 59: manda(lcd);
  6981  0026EC  5048               	movf	_lcd,w,c
  6982  0026EE  EC0A  F013         	call	_manda
  6983                           
  6984                           ;lcd4a.c: 60: lcd_lat();
  6985  0026F2  EC7C  F013         	call	_lcd_lat	;wreg free
  6986  0026F6  0012               	return		;funcret
  6987  0026F8                     __end_of_lcd_cmd_hf:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           intcon3	equ	0xFF0
  6998                           indf0	equ	0xFEF
  6999                           postinc0	equ	0xFEE
  7000                           fsr0h	equ	0xFEA
  7001                           fsr0l	equ	0xFE9
  7002                           wreg	equ	0xFE8
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _lcd_gotoxy *****************
  7011 ;; Defined at:
  7012 ;;		line 112 in file "../MyLibs/lcd4a.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  x               1    wreg     unsigned char 
  7015 ;;  y               1    3[BANK0 ] unsigned char 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  x               1    5[BANK0 ] unsigned char 
  7018 ;;  ADDRESS         1    6[BANK0 ] unsigned char 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      void 
  7021 ;; Registers used:
  7022 ;;		wreg, status,2, status,0, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7028 ;;      Params:         0       1       0       0       0       0       0
  7029 ;;      Locals:         0       2       0       0       0       0       0
  7030 ;;      Temps:          0       1       0       0       0       0       0
  7031 ;;      Totals:         0       4       0       0       0       0       0
  7032 ;;Total ram usage:        4 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    6
  7035 ;; This function calls:
  7036 ;;		_lcd_cmd
  7037 ;; This function is called by:
  7038 ;;		_main
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text25
  7043  0025A4                     __ptext25:
  7044                           	opt stack 0
  7045  0025A4                     _lcd_gotoxy:
  7046                           	opt stack 24
  7047                           
  7048                           ;incstack = 0
  7049                           ;lcd_gotoxy@x stored from wreg
  7050  0025A4  0100               	movlb	0	; () banked
  7051  0025A6  6F85               	movwf	lcd_gotoxy@x& (0+255),b
  7052                           
  7053                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  7054  0025A8  0E00               	movlw	0
  7055  0025AA  0100               	movlb	0	; () banked
  7056  0025AC  6F86               	movwf	lcd_gotoxy@ADDRESS& (0+255),b
  7057                           
  7058                           ;lcd4a.c: 116: switch(y)
  7059  0025AE  D005               	goto	l165
  7060  0025B0                     
  7061                           ; BSR set to: 0
  7062                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  7063                           
  7064                           ; BSR set to: 0
  7065  0025B0  0EC0               	movlw	192
  7066  0025B2  D001               	goto	L4
  7067  0025B4                     
  7068                           ; BSR set to: 0
  7069                           ;lcd4a.c: 125: ADDRESS = 0x80;
  7070                           
  7071                           ; BSR set to: 0
  7072  0025B4  0E80               	movlw	128
  7073  0025B6                     L4:
  7074  0025B6  6F86               	movwf	lcd_gotoxy@ADDRESS& (0+255),b
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;lcd4a.c: 128: }
  7078                           
  7079                           ;lcd4a.c: 126: break;
  7080  0025B8  D008               	goto	l167
  7081  0025BA                     l165:
  7082                           
  7083                           ; BSR set to: 0
  7084                           
  7085                           ; BSR set to: 0
  7086  0025BA  5183               	movf	lcd_gotoxy@y& (0+255),w,b
  7087                           
  7088                           ; Switch size 1, requested type "space"
  7089                           ; Number of cases is 2, Range of values is 1 to 2
  7090                           ; switch strategies available:
  7091                           ; Name         Instructions Cycles
  7092                           ; simple_byte            7     4 (average)
  7093                           ;	Chosen strategy is simple_byte
  7094  0025BC  0A01               	xorlw	1	; case 1
  7095  0025BE  B4D8               	btfsc	status,2,c
  7096  0025C0  D7F9               	goto	l169
  7097  0025C2  0A03               	xorlw	3	; case 2
  7098  0025C4  B4D8               	btfsc	status,2,c
  7099  0025C6  D7F4               	goto	l168
  7100  0025C8  D7F5               	goto	l169
  7101  0025CA                     l167:
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  7105                           
  7106                           ; BSR set to: 0
  7107  0025CA  5186               	movf	lcd_gotoxy@ADDRESS& (0+255),w,b
  7108  0025CC  2585               	addwf	lcd_gotoxy@x& (0+255),w,b
  7109  0025CE  6F84               	movwf	??_lcd_gotoxy& (0+255),b
  7110  0025D0  0584               	decf	??_lcd_gotoxy& (0+255),w,b
  7111  0025D2  6F86               	movwf	lcd_gotoxy@ADDRESS& (0+255),b
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  7115  0025D4  5186               	movf	lcd_gotoxy@ADDRESS& (0+255),w,b
  7116  0025D6  EC41  F012         	call	_lcd_cmd
  7117  0025DA  0012               	return		;funcret
  7118  0025DC                     __end_of_lcd_gotoxy:
  7119                           	opt stack 0
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           intcon2	equ	0xFF1
  7128                           intcon3	equ	0xFF0
  7129                           indf0	equ	0xFEF
  7130                           postinc0	equ	0xFEE
  7131                           fsr0h	equ	0xFEA
  7132                           fsr0l	equ	0xFE9
  7133                           wreg	equ	0xFE8
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _lcd_cmd *****************
  7142 ;; Defined at:
  7143 ;;		line 38 in file "../MyLibs/lcd4a.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  x               1    wreg     unsigned char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  x               1    2[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7157 ;;      Params:         0       0       0       0       0       0       0
  7158 ;;      Locals:         0       1       0       0       0       0       0
  7159 ;;      Temps:          0       1       0       0       0       0       0
  7160 ;;      Totals:         0       2       0       0       0       0       0
  7161 ;;Total ram usage:        2 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    5
  7164 ;; This function calls:
  7165 ;;		_lcd_lat
  7166 ;;		_manda
  7167 ;; This function is called by:
  7168 ;;		_lcd_putc
  7169 ;;		_lcd_gotoxy
  7170 ;;		_lcd_init
  7171 ;;		_lcd_setcursor_vb
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text26
  7176  002482                     __ptext26:
  7177                           	opt stack 0
  7178  002482                     _lcd_cmd:
  7179                           	opt stack 23
  7180                           
  7181                           ;incstack = 0
  7182                           ;lcd_cmd@x stored from wreg
  7183  002482  0100               	movlb	0	; () banked
  7184  002484  6F82               	movwf	lcd_cmd@x& (0+255),b
  7185                           
  7186                           ;lcd4a.c: 40: lcd = 0;
  7187  002486  0E00               	movlw	0
  7188  002488  6E48               	movwf	_lcd,c
  7189                           
  7190                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  7191  00248A  948C               	bcf	3980,2,c	;volatile
  7192                           
  7193                           ;lcd4a.c: 42: lcd &= 0x0F;
  7194  00248C  0E0F               	movlw	15
  7195  00248E  1648               	andwf	_lcd,f,c
  7196                           
  7197                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  7198  002490  0100               	movlb	0	; () banked
  7199  002492  5182               	movf	lcd_cmd@x& (0+255),w,b
  7200  002494  0BF0               	andlw	240
  7201  002496  1248               	iorwf	_lcd,f,c
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;lcd4a.c: 44: manda(lcd);
  7205  002498  5048               	movf	_lcd,w,c
  7206  00249A  EC0A  F013         	call	_manda
  7207                           
  7208                           ;lcd4a.c: 45: lcd_lat();
  7209  00249E  EC7C  F013         	call	_lcd_lat	;wreg free
  7210                           
  7211                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  7212  0024A2  0E04               	movlw	4
  7213  0024A4  0100               	movlb	0	; () banked
  7214  0024A6  6F81               	movwf	??_lcd_cmd& (0+255),b
  7215  0024A8  0EE4               	movlw	228
  7216  0024AA                     u3507:
  7217  0024AA  2EE8               	decfsz	wreg,f,c
  7218  0024AC  D7FE               	bra	u3507
  7219  0024AE  2F81               	decfsz	??_lcd_cmd& (0+255),f,b
  7220  0024B0  D7FC               	bra	u3507
  7221  0024B2  F000               	nop	
  7222                           
  7223                           ;lcd4a.c: 48: lcd &= 0x0F;
  7224  0024B4  0E0F               	movlw	15
  7225  0024B6  1648               	andwf	_lcd,f,c
  7226                           
  7227                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  7228  0024B8  C082  F081         	movff	lcd_cmd@x,??_lcd_cmd
  7229  0024BC  0E0F               	movlw	15
  7230  0024BE  0100               	movlb	0	; () banked
  7231  0024C0  1781               	andwf	??_lcd_cmd& (0+255),f,b
  7232  0024C2  3981               	swapf	??_lcd_cmd& (0+255),w,b
  7233  0024C4  0BF0               	andlw	240
  7234  0024C6  1248               	iorwf	_lcd,f,c
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;lcd4a.c: 50: manda(lcd);
  7238  0024C8  5048               	movf	_lcd,w,c
  7239  0024CA  EC0A  F013         	call	_manda
  7240                           
  7241                           ;lcd4a.c: 51: lcd_lat();
  7242  0024CE  EC7C  F013         	call	_lcd_lat	;wreg free
  7243  0024D2  0012               	return		;funcret
  7244  0024D4                     __end_of_lcd_cmd:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           intcon2	equ	0xFF1
  7254                           intcon3	equ	0xFF0
  7255                           indf0	equ	0xFEF
  7256                           postinc0	equ	0xFEE
  7257                           fsr0h	equ	0xFEA
  7258                           fsr0l	equ	0xFE9
  7259                           wreg	equ	0xFE8
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _manda *****************
  7268 ;; Defined at:
  7269 ;;		line 171 in file "../MyLibs/lcd4a.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  dato            1    wreg     unsigned char 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  dato            1    0[BANK0 ] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7283 ;;      Params:         0       0       0       0       0       0       0
  7284 ;;      Locals:         0       1       0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0
  7286 ;;      Totals:         0       1       0       0       0       0       0
  7287 ;;Total ram usage:        1 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    4
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_lcd_cmd
  7294 ;;		_lcd_cmd_hf
  7295 ;;		_lcd_dwr
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text27
  7300  002614                     __ptext27:
  7301                           	opt stack 0
  7302  002614                     _manda:
  7303                           	opt stack 23
  7304                           
  7305                           ;incstack = 0
  7306                           ;manda@dato stored from wreg
  7307  002614  0100               	movlb	0	; () banked
  7308  002616  6F80               	movwf	manda@dato& (0+255),b
  7309                           
  7310                           ;lcd4a.c: 173: if(dato & (1 << 4)) (*(&(*(&PORTD + 0x09))) |= (1<<(4)));
  7311  002618  0100               	movlb	0	; () banked
  7312  00261A  A980               	btfss	manda@dato& (0+255),4,b
  7313  00261C  D002               	goto	l176
  7314                           
  7315                           ; BSR set to: 0
  7316  00261E  888C               	bsf	3980,4,c	;volatile
  7317  002620  D001               	goto	l177
  7318  002622                     l176:
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;lcd4a.c: 174: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(4)));
  7322                           
  7323                           ; BSR set to: 0
  7324  002622  988C               	bcf	3980,4,c	;volatile
  7325  002624                     l177:
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;lcd4a.c: 175: if(dato & (1 << 5)) (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  7329                           
  7330                           ; BSR set to: 0
  7331  002624  AB80               	btfss	manda@dato& (0+255),5,b
  7332  002626  D002               	goto	l178
  7333                           
  7334                           ; BSR set to: 0
  7335  002628  8A8C               	bsf	3980,5,c	;volatile
  7336  00262A  D001               	goto	l179
  7337  00262C                     l178:
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;lcd4a.c: 176: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  7341                           
  7342                           ; BSR set to: 0
  7343  00262C  9A8C               	bcf	3980,5,c	;volatile
  7344  00262E                     l179:
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;lcd4a.c: 177: if(dato & (1 << 6)) (*(&(*(&PORTD + 0x09))) |= (1<<(6)));
  7348                           
  7349                           ; BSR set to: 0
  7350  00262E  AD80               	btfss	manda@dato& (0+255),6,b
  7351  002630  D002               	goto	l180
  7352                           
  7353                           ; BSR set to: 0
  7354  002632  8C8C               	bsf	3980,6,c	;volatile
  7355  002634  D001               	goto	l181
  7356  002636                     l180:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;lcd4a.c: 178: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  7360                           
  7361                           ; BSR set to: 0
  7362  002636  9C8C               	bcf	3980,6,c	;volatile
  7363  002638                     l181:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;lcd4a.c: 179: if(dato & (1 << 7)) (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  7367                           
  7368                           ; BSR set to: 0
  7369  002638  AF80               	btfss	manda@dato& (0+255),7,b
  7370  00263A  D002               	goto	l182
  7371                           
  7372                           ; BSR set to: 0
  7373  00263C  8E8C               	bsf	3980,7,c	;volatile
  7374  00263E  0012               	return	
  7375  002640                     l182:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;lcd4a.c: 180: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  7379                           
  7380                           ; BSR set to: 0
  7381  002640  9E8C               	bcf	3980,7,c	;volatile
  7382  002642  0012               	return	
  7383  002644                     __end_of_manda:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           intcon2	equ	0xFF1
  7393                           intcon3	equ	0xFF0
  7394                           indf0	equ	0xFEF
  7395                           postinc0	equ	0xFEE
  7396                           fsr0h	equ	0xFEA
  7397                           fsr0l	equ	0xFE9
  7398                           wreg	equ	0xFE8
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406 ;; *************** function _lcd_lat *****************
  7407 ;; Defined at:
  7408 ;;		line 27 in file "../MyLibs/lcd4a.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      void 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2, status,0
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7422 ;;      Params:         0       0       0       0       0       0       0
  7423 ;;      Locals:         0       0       0       0       0       0       0
  7424 ;;      Temps:          0       1       0       0       0       0       0
  7425 ;;      Totals:         0       1       0       0       0       0       0
  7426 ;;Total ram usage:        1 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    4
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_lcd_cmd
  7433 ;;		_lcd_cmd_hf
  7434 ;;		_lcd_dwr
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           	psect	text28
  7439  0026F8                     __ptext28:
  7440                           	opt stack 0
  7441  0026F8                     _lcd_lat:
  7442                           	opt stack 23
  7443                           
  7444                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;incstack = 0
  7448  0026F8  868C               	bsf	3980,3,c	;volatile
  7449                           
  7450                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  7451  0026FA  0E03               	movlw	3
  7452  0026FC  0100               	movlb	0	; () banked
  7453  0026FE  6F80               	movwf	??_lcd_lat& (0+255),b
  7454  002700  0E97               	movlw	151
  7455  002702                     u3517:
  7456  002702  2EE8               	decfsz	wreg,f,c
  7457  002704  D7FE               	bra	u3517
  7458  002706  2F80               	decfsz	??_lcd_lat& (0+255),f,b
  7459  002708  D7FC               	bra	u3517
  7460  00270A  D000               	nop2	
  7461                           
  7462                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  7463  00270C  968C               	bcf	3980,3,c	;volatile
  7464  00270E  0012               	return		;funcret
  7465  002710                     __end_of_lcd_lat:
  7466                           	opt stack 0
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           intcon	equ	0xFF2
  7474                           intcon2	equ	0xFF1
  7475                           intcon3	equ	0xFF0
  7476                           indf0	equ	0xFEF
  7477                           postinc0	equ	0xFEE
  7478                           fsr0h	equ	0xFEA
  7479                           fsr0l	equ	0xFE9
  7480                           wreg	equ	0xFE8
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           postdec2	equ	0xFDD
  7484                           fsr2h	equ	0xFDA
  7485                           fsr2l	equ	0xFD9
  7486                           status	equ	0xFD8
  7487                           
  7488 ;; *************** function _Adelante *****************
  7489 ;; Defined at:
  7490 ;;		line 281 in file "enc2.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;		None
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		status,2, status,0, cstack
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7504 ;;      Params:         0       0       0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0
  7507 ;;      Totals:         0       0       0       0       0       0       0
  7508 ;;Total ram usage:        0 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    5
  7511 ;; This function calls:
  7512 ;;		_ccwM2
  7513 ;;		_cwM1
  7514 ;; This function is called by:
  7515 ;;		_main
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text29
  7520  002710                     __ptext29:
  7521                           	opt stack 0
  7522  002710                     _Adelante:
  7523                           	opt stack 25
  7524                           
  7525                           ;enc2.c: 283: cwM1();
  7526                           
  7527                           ;incstack = 0
  7528  002710  EC8D  F013         	call	_cwM1	;wreg free
  7529                           
  7530                           ;enc2.c: 284: ccwM2();
  7531  002714  EC91  F013         	call	_ccwM2	;wreg free
  7532  002718  0012               	return		;funcret
  7533  00271A                     __end_of_Adelante:
  7534                           	opt stack 0
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           intcon2	equ	0xFF1
  7543                           intcon3	equ	0xFF0
  7544                           indf0	equ	0xFEF
  7545                           postinc0	equ	0xFEE
  7546                           fsr0h	equ	0xFEA
  7547                           fsr0l	equ	0xFE9
  7548                           wreg	equ	0xFE8
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _cwM1 *****************
  7557 ;; Defined at:
  7558 ;;		line 239 in file "enc2.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;		None
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		status,2, status,0
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7572 ;;      Params:         0       0       0       0       0       0       0
  7573 ;;      Locals:         0       0       0       0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0
  7575 ;;      Totals:         0       0       0       0       0       0       0
  7576 ;;Total ram usage:        0 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    4
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_Adelante
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           	psect	text30
  7587  00271A                     __ptext30:
  7588                           	opt stack 0
  7589  00271A                     _cwM1:
  7590                           	opt stack 25
  7591                           
  7592                           ;enc2.c: 241: (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  7593                           
  7594                           ;incstack = 0
  7595  00271A  888A               	bsf	3978,4,c	;volatile
  7596                           
  7597                           ;enc2.c: 242: (*(&(*(&PORTB + 0x09))) |= (1<<(2)));
  7598  00271C  848A               	bsf	3978,2,c	;volatile
  7599                           
  7600                           ;enc2.c: 243: (*(&(*(&PORTB + 0x09))) &=~ (1<<(3)));
  7601  00271E  968A               	bcf	3978,3,c	;volatile
  7602  002720  0012               	return		;funcret
  7603  002722                     __end_of_cwM1:
  7604                           	opt stack 0
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           intcon	equ	0xFF2
  7612                           intcon2	equ	0xFF1
  7613                           intcon3	equ	0xFF0
  7614                           indf0	equ	0xFEF
  7615                           postinc0	equ	0xFEE
  7616                           fsr0h	equ	0xFEA
  7617                           fsr0l	equ	0xFE9
  7618                           wreg	equ	0xFE8
  7619                           indf2	equ	0xFDF
  7620                           postinc2	equ	0xFDE
  7621                           postdec2	equ	0xFDD
  7622                           fsr2h	equ	0xFDA
  7623                           fsr2l	equ	0xFD9
  7624                           status	equ	0xFD8
  7625                           
  7626 ;; *************** function _ccwM2 *****************
  7627 ;; Defined at:
  7628 ;;		line 267 in file "enc2.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;		None
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;		None
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  1    wreg      void 
  7635 ;; Registers used:
  7636 ;;		status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7642 ;;      Params:         0       0       0       0       0       0       0
  7643 ;;      Locals:         0       0       0       0       0       0       0
  7644 ;;      Temps:          0       0       0       0       0       0       0
  7645 ;;      Totals:         0       0       0       0       0       0       0
  7646 ;;Total ram usage:        0 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; Hardware stack levels required when called:    4
  7649 ;; This function calls:
  7650 ;;		Nothing
  7651 ;; This function is called by:
  7652 ;;		_Adelante
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text31
  7657  002722                     __ptext31:
  7658                           	opt stack 0
  7659  002722                     _ccwM2:
  7660                           	opt stack 25
  7661                           
  7662                           ;enc2.c: 269: (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  7663                           
  7664                           ;incstack = 0
  7665  002722  8E8A               	bsf	3978,7,c	;volatile
  7666                           
  7667                           ;enc2.c: 270: (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  7668  002724  9A8A               	bcf	3978,5,c	;volatile
  7669                           
  7670                           ;enc2.c: 271: (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  7671  002726  8C8A               	bsf	3978,6,c	;volatile
  7672  002728  0012               	return		;funcret
  7673  00272A                     __end_of_ccwM2:
  7674                           	opt stack 0
  7675                           tblptru	equ	0xFF8
  7676                           tblptrh	equ	0xFF7
  7677                           tblptrl	equ	0xFF6
  7678                           tablat	equ	0xFF5
  7679                           prodh	equ	0xFF4
  7680                           prodl	equ	0xFF3
  7681                           intcon	equ	0xFF2
  7682                           intcon2	equ	0xFF1
  7683                           intcon3	equ	0xFF0
  7684                           indf0	equ	0xFEF
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _low_isr *****************
  7697 ;; Defined at:
  7698 ;;		line 88 in file "enc2.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      void 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7712 ;;      Params:         0       0       0       0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0
  7714 ;;      Temps:         21       0       0       0       0       0       0
  7715 ;;      Totals:        21       0       0       0       0       0       0
  7716 ;;Total ram usage:       21 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    3
  7719 ;; This function calls:
  7720 ;;		___awtoft
  7721 ;;		___ftdiv
  7722 ;;		i1___ftmul
  7723 ;; This function is called by:
  7724 ;;		Interrupt level 1
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	intcodelo
  7729  000018                     __pintcodelo:
  7730                           	opt stack 0
  7731  000018                     _low_isr:
  7732                           	opt stack 23
  7733                           
  7734                           ;incstack = 0
  7735  000018  804B               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7736  00001A  CFD8 F02E          	movff	status,??_low_isr
  7737  00001E  CFE8 F02F          	movff	wreg,??_low_isr+1
  7738  000022  CFE0 F030          	movff	bsr,??_low_isr+2
  7739  000026  CFFA F031          	movff	pclath,??_low_isr+3
  7740  00002A  CFFB F032          	movff	pclatu,??_low_isr+4
  7741  00002E  CFE9 F033          	movff	fsr0l,??_low_isr+5
  7742  000032  CFEA F034          	movff	fsr0h,??_low_isr+6
  7743  000036  CFE1 F035          	movff	fsr1l,??_low_isr+7
  7744  00003A  CFE2 F036          	movff	fsr1h,??_low_isr+8
  7745  00003E  CFD9 F037          	movff	fsr2l,??_low_isr+9
  7746  000042  CFDA F038          	movff	fsr2h,??_low_isr+10
  7747  000046  CFF3 F039          	movff	prodl,??_low_isr+11
  7748  00004A  CFF4 F03A          	movff	prodh,??_low_isr+12
  7749  00004E  CFF6 F03B          	movff	tblptrl,??_low_isr+13
  7750  000052  CFF7 F03C          	movff	tblptrh,??_low_isr+14
  7751  000056  CFF8 F03D          	movff	tblptru,??_low_isr+15
  7752  00005A  CFF5 F03E          	movff	tablat,??_low_isr+16
  7753  00005E  C04B  F03F         	movff	btemp,??_low_isr+17
  7754  000062  C04C  F040         	movff	btemp+1,??_low_isr+18
  7755  000066  C04D  F041         	movff	btemp+2,??_low_isr+19
  7756  00006A  C04E  F042         	movff	btemp+3,??_low_isr+20
  7757                           
  7758                           ;enc2.c: 91: if(PIR1bits.TMR1IF == 1)
  7759  00006E  A09E               	btfss	3998,0,c	;volatile
  7760  000070  D049               	goto	i1l3369
  7761                           
  7762                           ;enc2.c: 92: {
  7763                           ;enc2.c: 93: TMR1ON = 0;
  7764  000072  90CD               	bcf	4045,0,c	;volatile
  7765                           
  7766                           ;enc2.c: 94: TMR1 = 53036;
  7767  000074  0ECF               	movlw	207
  7768  000076  6ECF               	movwf	4047,c	;volatile
  7769  000078  0E2C               	movlw	44
  7770  00007A  6ECE               	movwf	4046,c	;volatile
  7771                           
  7772                           ;enc2.c: 95: rpm1 = contM1*10.0*60.0;
  7773  00007C  C049  F01B         	movff	_contM1,___awtoft@c	;volatile
  7774  000080  C04A  F01C         	movff	_contM1+1,___awtoft@c+1	;volatile
  7775  000084  ECEE  F012         	call	___awtoft	;wreg free
  7776  000088  C01B  F01F         	movff	?___awtoft,i1___ftmul@f1
  7777  00008C  C01C  F020         	movff	?___awtoft+1,i1___ftmul@f1+1
  7778  000090  C01D  F021         	movff	?___awtoft+2,i1___ftmul@f1+2
  7779  000094  0E00               	movlw	0
  7780  000096  6E22               	movwf	i1___ftmul@f2,c
  7781  000098  0E16               	movlw	22
  7782  00009A  6E23               	movwf	i1___ftmul@f2+1,c
  7783  00009C  0E44               	movlw	68
  7784  00009E  6E24               	movwf	i1___ftmul@f2+2,c
  7785  0000A0  ECE9  F00D         	call	i1___ftmul	;wreg free
  7786  0000A4  C01F  F043         	movff	?i1___ftmul,_rpm1	;volatile
  7787  0000A8  C020  F044         	movff	?i1___ftmul+1,_rpm1+1	;volatile
  7788  0000AC  C021  F045         	movff	?i1___ftmul+2,_rpm1+2	;volatile
  7789                           
  7790                           ;enc2.c: 96: rpm1= rpm1/48.0;
  7791  0000B0  C043  F01B         	movff	_rpm1,___ftdiv@f1	;volatile
  7792  0000B4  C044  F01C         	movff	_rpm1+1,___ftdiv@f1+1	;volatile
  7793  0000B8  C045  F01D         	movff	_rpm1+2,___ftdiv@f1+2	;volatile
  7794  0000BC  0E00               	movlw	0
  7795  0000BE  6E1E               	movwf	___ftdiv@f2,c
  7796  0000C0  0E40               	movlw	64
  7797  0000C2  6E1F               	movwf	___ftdiv@f2+1,c
  7798  0000C4  0E42               	movlw	66
  7799  0000C6  6E20               	movwf	___ftdiv@f2+2,c
  7800  0000C8  EC63  F00E         	call	___ftdiv	;wreg free
  7801  0000CC  C01B  F043         	movff	?___ftdiv,_rpm1	;volatile
  7802  0000D0  C01C  F044         	movff	?___ftdiv+1,_rpm1+1	;volatile
  7803  0000D4  C01D  F045         	movff	?___ftdiv+2,_rpm1+2	;volatile
  7804                           
  7805                           ;enc2.c: 97: rpm2 = contM2;
  7806  0000D8  C046  F01B         	movff	_contM2,___awtoft@c	;volatile
  7807  0000DC  C047  F01C         	movff	_contM2+1,___awtoft@c+1	;volatile
  7808  0000E0  ECEE  F012         	call	___awtoft	;wreg free
  7809  0000E4  C01B  F0E7         	movff	?___awtoft,_rpm2	;volatile
  7810  0000E8  C01C  F0E8         	movff	?___awtoft+1,_rpm2+1	;volatile
  7811  0000EC  C01D  F0E9         	movff	?___awtoft+2,_rpm2+2	;volatile
  7812                           
  7813                           ;enc2.c: 98: contM1 = 0;
  7814  0000F0  0E00               	movlw	0
  7815  0000F2  6E4A               	movwf	_contM1+1,c	;volatile
  7816  0000F4  0E00               	movlw	0
  7817  0000F6  6E49               	movwf	_contM1,c	;volatile
  7818                           
  7819                           ;enc2.c: 99: contM2 = 0;
  7820  0000F8  0E00               	movlw	0
  7821  0000FA  6E47               	movwf	_contM2+1,c	;volatile
  7822  0000FC  0E00               	movlw	0
  7823  0000FE  6E46               	movwf	_contM2,c	;volatile
  7824                           
  7825                           ;enc2.c: 100: TMR1IF = 0;
  7826  000100  909E               	bcf	3998,0,c	;volatile
  7827                           
  7828                           ;enc2.c: 101: TMR1ON = 1;
  7829  000102  80CD               	bsf	4045,0,c	;volatile
  7830  000104                     i1l3369:
  7831                           
  7832                           ;enc2.c: 102: return;
  7833  000104  C042  F04E         	movff	??_low_isr+20,btemp+3
  7834  000108  C041  F04D         	movff	??_low_isr+19,btemp+2
  7835  00010C  C040  F04C         	movff	??_low_isr+18,btemp+1
  7836  000110  C03F  F04B         	movff	??_low_isr+17,btemp
  7837  000114  C03E  FFF5         	movff	??_low_isr+16,tablat
  7838  000118  C03D  FFF8         	movff	??_low_isr+15,tblptru
  7839  00011C  C03C  FFF7         	movff	??_low_isr+14,tblptrh
  7840  000120  C03B  FFF6         	movff	??_low_isr+13,tblptrl
  7841  000124  C03A  FFF4         	movff	??_low_isr+12,prodh
  7842  000128  C039  FFF3         	movff	??_low_isr+11,prodl
  7843  00012C  C038  FFDA         	movff	??_low_isr+10,fsr2h
  7844  000130  C037  FFD9         	movff	??_low_isr+9,fsr2l
  7845  000134  C036  FFE2         	movff	??_low_isr+8,fsr1h
  7846  000138  C035  FFE1         	movff	??_low_isr+7,fsr1l
  7847  00013C  C034  FFEA         	movff	??_low_isr+6,fsr0h
  7848  000140  C033  FFE9         	movff	??_low_isr+5,fsr0l
  7849  000144  C032  FFFB         	movff	??_low_isr+4,pclatu
  7850  000148  C031  FFFA         	movff	??_low_isr+3,pclath
  7851  00014C  C030  FFE0         	movff	??_low_isr+2,bsr
  7852  000150  C02F  FFE8         	movff	??_low_isr+1,wreg
  7853  000154  C02E  FFD8         	movff	??_low_isr,status
  7854  000158  904B               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7855  00015A  0010               	retfie	
  7856  00015C                     __end_of_low_isr:
  7857                           	opt stack 0
  7858                           pclatu	equ	0xFFB
  7859                           pclath	equ	0xFFA
  7860                           tblptru	equ	0xFF8
  7861                           tblptrh	equ	0xFF7
  7862                           tblptrl	equ	0xFF6
  7863                           tablat	equ	0xFF5
  7864                           prodh	equ	0xFF4
  7865                           prodl	equ	0xFF3
  7866                           intcon	equ	0xFF2
  7867                           intcon2	equ	0xFF1
  7868                           intcon3	equ	0xFF0
  7869                           indf0	equ	0xFEF
  7870                           postinc0	equ	0xFEE
  7871                           fsr0h	equ	0xFEA
  7872                           fsr0l	equ	0xFE9
  7873                           wreg	equ	0xFE8
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           bsr	equ	0xFE0
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           postdec2	equ	0xFDD
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function i1___ftmul *****************
  7885 ;; Defined at:
  7886 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  f1              3   30[COMRAM] float 
  7889 ;;  f2              3   33[COMRAM] float 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  __ftmul         3   40[COMRAM] unsigned um
  7892 ;;  __ftmul         1   44[COMRAM] unsigned char 
  7893 ;;  __ftmul         1   43[COMRAM] unsigned char 
  7894 ;;  __ftmul         1   39[COMRAM] unsigned char 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  3   30[COMRAM] float 
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0, cstack
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7904 ;;      Params:         6       0       0       0       0       0       0
  7905 ;;      Locals:         6       0       0       0       0       0       0
  7906 ;;      Temps:          3       0       0       0       0       0       0
  7907 ;;      Totals:        15       0       0       0       0       0       0
  7908 ;;Total ram usage:       15 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:    2
  7911 ;; This function calls:
  7912 ;;		i1___ftpack
  7913 ;; This function is called by:
  7914 ;;		_low_isr
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text33
  7919  001BD2                     __ptext33:
  7920                           	opt stack 0
  7921  001BD2                     i1___ftmul:
  7922                           	opt stack 23
  7923                           
  7924                           ;incstack = 0
  7925  001BD2  C021  F025         	movff	i1___ftmul@f1+2,??i1___ftmul
  7926  001BD6  6A26               	clrf	(??i1___ftmul+1)& (0+255),c
  7927  001BD8  6A27               	clrf	(??i1___ftmul+2)& (0+255),c
  7928  001BDA  3420               	rlcf	i1___ftmul@f1+1,w,c
  7929  001BDC  3625               	rlcf	??i1___ftmul& (0+255),f,c
  7930  001BDE  E301               	bnc	u333_21
  7931  001BE0  8026               	bsf	(??i1___ftmul+1)& (0+255),0,c
  7932  001BE2                     u333_21:
  7933  001BE2  5025               	movf	??i1___ftmul,w,c
  7934  001BE4  6E28               	movwf	i1___ftmul@exp,c
  7935  001BE6  5028               	movf	i1___ftmul@exp,w,c
  7936  001BE8  A4D8               	btfss	status,2,c
  7937  001BEA  D007               	goto	i1l630
  7938  001BEC  0E00               	movlw	0
  7939  001BEE  6E1F               	movwf	?i1___ftmul,c
  7940  001BF0  0E00               	movlw	0
  7941  001BF2  6E20               	movwf	?i1___ftmul+1,c
  7942  001BF4  0E00               	movlw	0
  7943  001BF6  6E21               	movwf	?i1___ftmul+2,c
  7944  001BF8  0012               	return	
  7945  001BFA                     i1l630:
  7946  001BFA  C024  F025         	movff	i1___ftmul@f2+2,??i1___ftmul
  7947  001BFE  6A26               	clrf	(??i1___ftmul+1)& (0+255),c
  7948  001C00  6A27               	clrf	(??i1___ftmul+2)& (0+255),c
  7949  001C02  3423               	rlcf	i1___ftmul@f2+1,w,c
  7950  001C04  3625               	rlcf	??i1___ftmul& (0+255),f,c
  7951  001C06  E301               	bnc	u335_21
  7952  001C08  8026               	bsf	(??i1___ftmul+1)& (0+255),0,c
  7953  001C0A                     u335_21:
  7954  001C0A  5025               	movf	??i1___ftmul,w,c
  7955  001C0C  6E2D               	movwf	i1___ftmul@sign,c
  7956  001C0E  502D               	movf	i1___ftmul@sign,w,c
  7957  001C10  A4D8               	btfss	status,2,c
  7958  001C12  D007               	goto	i1l632
  7959  001C14  0E00               	movlw	0
  7960  001C16  6E1F               	movwf	?i1___ftmul,c
  7961  001C18  0E00               	movlw	0
  7962  001C1A  6E20               	movwf	?i1___ftmul+1,c
  7963  001C1C  0E00               	movlw	0
  7964  001C1E  6E21               	movwf	?i1___ftmul+2,c
  7965  001C20  0012               	return	
  7966  001C22                     i1l632:
  7967  001C22  502D               	movf	i1___ftmul@sign,w,c
  7968  001C24  0F7B               	addlw	123
  7969  001C26  2628               	addwf	i1___ftmul@exp,f,c
  7970  001C28  C021  F02D         	movff	i1___ftmul@f1+2,i1___ftmul@sign
  7971  001C2C  5024               	movf	i1___ftmul@f2+2,w,c
  7972  001C2E  1A2D               	xorwf	i1___ftmul@sign,f,c
  7973  001C30  0E80               	movlw	128
  7974  001C32  162D               	andwf	i1___ftmul@sign,f,c
  7975  001C34  8E20               	bsf	i1___ftmul@f1+1,7,c
  7976  001C36  8E23               	bsf	i1___ftmul@f2+1,7,c
  7977  001C38  0EFF               	movlw	255
  7978  001C3A  1622               	andwf	i1___ftmul@f2,f,c
  7979  001C3C  0EFF               	movlw	255
  7980  001C3E  1623               	andwf	i1___ftmul@f2+1,f,c
  7981  001C40  0E00               	movlw	0
  7982  001C42  1624               	andwf	i1___ftmul@f2+2,f,c
  7983  001C44  0E00               	movlw	0
  7984  001C46  6E29               	movwf	i1___ftmul@f3_as_product,c
  7985  001C48  0E00               	movlw	0
  7986  001C4A  6E2A               	movwf	i1___ftmul@f3_as_product+1,c
  7987  001C4C  0E00               	movlw	0
  7988  001C4E  6E2B               	movwf	i1___ftmul@f3_as_product+2,c
  7989  001C50  0E07               	movlw	7
  7990  001C52  6E2C               	movwf	i1___ftmul@cntr,c
  7991  001C54  A01F               	btfss	i1___ftmul@f1,0,c
  7992  001C56  D006               	goto	i1l634
  7993  001C58  5022               	movf	i1___ftmul@f2,w,c
  7994  001C5A  2629               	addwf	i1___ftmul@f3_as_product,f,c
  7995  001C5C  5023               	movf	i1___ftmul@f2+1,w,c
  7996  001C5E  222A               	addwfc	i1___ftmul@f3_as_product+1,f,c
  7997  001C60  5024               	movf	i1___ftmul@f2+2,w,c
  7998  001C62  222B               	addwfc	i1___ftmul@f3_as_product+2,f,c
  7999  001C64                     i1l634:
  8000  001C64  90D8               	bcf	status,0,c
  8001  001C66  3221               	rrcf	i1___ftmul@f1+2,f,c
  8002  001C68  3220               	rrcf	i1___ftmul@f1+1,f,c
  8003  001C6A  321F               	rrcf	i1___ftmul@f1,f,c
  8004  001C6C  90D8               	bcf	status,0,c
  8005  001C6E  3622               	rlcf	i1___ftmul@f2,f,c
  8006  001C70  3623               	rlcf	i1___ftmul@f2+1,f,c
  8007  001C72  3624               	rlcf	i1___ftmul@f2+2,f,c
  8008  001C74  2E2C               	decfsz	i1___ftmul@cntr,f,c
  8009  001C76  D7EE               	goto	i1l633
  8010  001C78  0E09               	movlw	9
  8011  001C7A  6E2C               	movwf	i1___ftmul@cntr,c
  8012  001C7C  A01F               	btfss	i1___ftmul@f1,0,c
  8013  001C7E  D006               	goto	i1l637
  8014  001C80  5022               	movf	i1___ftmul@f2,w,c
  8015  001C82  2629               	addwf	i1___ftmul@f3_as_product,f,c
  8016  001C84  5023               	movf	i1___ftmul@f2+1,w,c
  8017  001C86  222A               	addwfc	i1___ftmul@f3_as_product+1,f,c
  8018  001C88  5024               	movf	i1___ftmul@f2+2,w,c
  8019  001C8A  222B               	addwfc	i1___ftmul@f3_as_product+2,f,c
  8020  001C8C                     i1l637:
  8021  001C8C  90D8               	bcf	status,0,c
  8022  001C8E  3221               	rrcf	i1___ftmul@f1+2,f,c
  8023  001C90  3220               	rrcf	i1___ftmul@f1+1,f,c
  8024  001C92  321F               	rrcf	i1___ftmul@f1,f,c
  8025  001C94  90D8               	bcf	status,0,c
  8026  001C96  322B               	rrcf	i1___ftmul@f3_as_product+2,f,c
  8027  001C98  322A               	rrcf	i1___ftmul@f3_as_product+1,f,c
  8028  001C9A  3229               	rrcf	i1___ftmul@f3_as_product,f,c
  8029  001C9C  2E2C               	decfsz	i1___ftmul@cntr,f,c
  8030  001C9E  D7EE               	goto	i1l636
  8031  001CA0  C029  F013         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
  8032  001CA4  C02A  F014         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
  8033  001CA8  C02B  F015         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
  8034  001CAC  C028  F016         	movff	i1___ftmul@exp,i1___ftpack@exp
  8035  001CB0  C02D  F017         	movff	i1___ftmul@sign,i1___ftpack@sign
  8036  001CB4  EC00  F010         	call	i1___ftpack	;wreg free
  8037  001CB8  C013  F01F         	movff	?i1___ftpack,?i1___ftmul
  8038  001CBC  C014  F020         	movff	?i1___ftpack+1,?i1___ftmul+1
  8039  001CC0  C015  F021         	movff	?i1___ftpack+2,?i1___ftmul+2
  8040  001CC4  0012               	return	
  8041  001CC6                     __end_ofi1___ftmul:
  8042                           	opt stack 0
  8043                           pclatu	equ	0xFFB
  8044                           pclath	equ	0xFFA
  8045                           tblptru	equ	0xFF8
  8046                           tblptrh	equ	0xFF7
  8047                           tblptrl	equ	0xFF6
  8048                           tablat	equ	0xFF5
  8049                           prodh	equ	0xFF4
  8050                           prodl	equ	0xFF3
  8051                           intcon	equ	0xFF2
  8052                           intcon2	equ	0xFF1
  8053                           intcon3	equ	0xFF0
  8054                           indf0	equ	0xFEF
  8055                           postinc0	equ	0xFEE
  8056                           fsr0h	equ	0xFEA
  8057                           fsr0l	equ	0xFE9
  8058                           wreg	equ	0xFE8
  8059                           fsr1h	equ	0xFE2
  8060                           fsr1l	equ	0xFE1
  8061                           bsr	equ	0xFE0
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function ___ftdiv *****************
  8070 ;; Defined at:
  8071 ;;		line 54 in file "/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  f1              3   26[COMRAM] float 
  8074 ;;  f2              3   29[COMRAM] float 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  f3              3   36[COMRAM] float 
  8077 ;;  sign            1   40[COMRAM] unsigned char 
  8078 ;;  exp             1   39[COMRAM] unsigned char 
  8079 ;;  cntr            1   35[COMRAM] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  3   26[COMRAM] float 
  8082 ;; Registers used:
  8083 ;;		wreg, status,2, status,0, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8089 ;;      Params:         6       0       0       0       0       0       0
  8090 ;;      Locals:         6       0       0       0       0       0       0
  8091 ;;      Temps:          3       0       0       0       0       0       0
  8092 ;;      Totals:        15       0       0       0       0       0       0
  8093 ;;Total ram usage:       15 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    2
  8096 ;; This function calls:
  8097 ;;		i1___ftpack
  8098 ;; This function is called by:
  8099 ;;		_low_isr
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text34
  8104  001CC6                     __ptext34:
  8105                           	opt stack 0
  8106  001CC6                     ___ftdiv:
  8107                           	opt stack 23
  8108                           
  8109                           ;incstack = 0
  8110  001CC6  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  8111  001CCA  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8112  001CCC  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8113  001CCE  341C               	rlcf	___ftdiv@f1+1,w,c
  8114  001CD0  3621               	rlcf	??___ftdiv& (0+255),f,c
  8115  001CD2  E301               	bnc	u327_21
  8116  001CD4  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8117  001CD6                     u327_21:
  8118  001CD6  5021               	movf	??___ftdiv,w,c
  8119  001CD8  6E28               	movwf	___ftdiv@exp,c
  8120  001CDA  5028               	movf	___ftdiv@exp,w,c
  8121  001CDC  A4D8               	btfss	status,2,c
  8122  001CDE  D007               	goto	i1l598
  8123  001CE0  0E00               	movlw	0
  8124  001CE2  6E1B               	movwf	?___ftdiv,c
  8125  001CE4  0E00               	movlw	0
  8126  001CE6  6E1C               	movwf	?___ftdiv+1,c
  8127  001CE8  0E00               	movlw	0
  8128  001CEA  6E1D               	movwf	?___ftdiv+2,c
  8129  001CEC  0012               	return	
  8130  001CEE                     i1l598:
  8131  001CEE  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  8132  001CF2  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8133  001CF4  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8134  001CF6  341F               	rlcf	___ftdiv@f2+1,w,c
  8135  001CF8  3621               	rlcf	??___ftdiv& (0+255),f,c
  8136  001CFA  E301               	bnc	u329_21
  8137  001CFC  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8138  001CFE                     u329_21:
  8139  001CFE  5021               	movf	??___ftdiv,w,c
  8140  001D00  6E29               	movwf	___ftdiv@sign,c
  8141  001D02  5029               	movf	___ftdiv@sign,w,c
  8142  001D04  A4D8               	btfss	status,2,c
  8143  001D06  D007               	goto	i1l600
  8144  001D08  0E00               	movlw	0
  8145  001D0A  6E1B               	movwf	?___ftdiv,c
  8146  001D0C  0E00               	movlw	0
  8147  001D0E  6E1C               	movwf	?___ftdiv+1,c
  8148  001D10  0E00               	movlw	0
  8149  001D12  6E1D               	movwf	?___ftdiv+2,c
  8150  001D14  0012               	return	
  8151  001D16                     i1l600:
  8152  001D16  0E00               	movlw	0
  8153  001D18  6E25               	movwf	___ftdiv@f3,c
  8154  001D1A  0E00               	movlw	0
  8155  001D1C  6E26               	movwf	___ftdiv@f3+1,c
  8156  001D1E  0E00               	movlw	0
  8157  001D20  6E27               	movwf	___ftdiv@f3+2,c
  8158  001D22  5029               	movf	___ftdiv@sign,w,c
  8159  001D24  0F89               	addlw	137
  8160  001D26  5E28               	subwf	___ftdiv@exp,f,c
  8161  001D28  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  8162  001D2C  5020               	movf	___ftdiv@f2+2,w,c
  8163  001D2E  1A29               	xorwf	___ftdiv@sign,f,c
  8164  001D30  0E80               	movlw	128
  8165  001D32  1629               	andwf	___ftdiv@sign,f,c
  8166  001D34  8E1C               	bsf	___ftdiv@f1+1,7,c
  8167  001D36  0EFF               	movlw	255
  8168  001D38  161B               	andwf	___ftdiv@f1,f,c
  8169  001D3A  0EFF               	movlw	255
  8170  001D3C  161C               	andwf	___ftdiv@f1+1,f,c
  8171  001D3E  0E00               	movlw	0
  8172  001D40  161D               	andwf	___ftdiv@f1+2,f,c
  8173  001D42  8E1F               	bsf	___ftdiv@f2+1,7,c
  8174  001D44  0EFF               	movlw	255
  8175  001D46  161E               	andwf	___ftdiv@f2,f,c
  8176  001D48  0EFF               	movlw	255
  8177  001D4A  161F               	andwf	___ftdiv@f2+1,f,c
  8178  001D4C  0E00               	movlw	0
  8179  001D4E  1620               	andwf	___ftdiv@f2+2,f,c
  8180  001D50  0E18               	movlw	24
  8181  001D52  6E24               	movwf	___ftdiv@cntr,c
  8182  001D54  90D8               	bcf	status,0,c
  8183  001D56  3625               	rlcf	___ftdiv@f3,f,c
  8184  001D58  3626               	rlcf	___ftdiv@f3+1,f,c
  8185  001D5A  3627               	rlcf	___ftdiv@f3+2,f,c
  8186  001D5C  501E               	movf	___ftdiv@f2,w,c
  8187  001D5E  5C1B               	subwf	___ftdiv@f1,w,c
  8188  001D60  501F               	movf	___ftdiv@f2+1,w,c
  8189  001D62  581C               	subwfb	___ftdiv@f1+1,w,c
  8190  001D64  5020               	movf	___ftdiv@f2+2,w,c
  8191  001D66  581D               	subwfb	___ftdiv@f1+2,w,c
  8192  001D68  A0D8               	btfss	status,0,c
  8193  001D6A  D007               	goto	i1l602
  8194  001D6C  501E               	movf	___ftdiv@f2,w,c
  8195  001D6E  5E1B               	subwf	___ftdiv@f1,f,c
  8196  001D70  501F               	movf	___ftdiv@f2+1,w,c
  8197  001D72  5A1C               	subwfb	___ftdiv@f1+1,f,c
  8198  001D74  5020               	movf	___ftdiv@f2+2,w,c
  8199  001D76  5A1D               	subwfb	___ftdiv@f1+2,f,c
  8200  001D78  8025               	bsf	___ftdiv@f3,0,c
  8201  001D7A                     i1l602:
  8202  001D7A  90D8               	bcf	status,0,c
  8203  001D7C  361B               	rlcf	___ftdiv@f1,f,c
  8204  001D7E  361C               	rlcf	___ftdiv@f1+1,f,c
  8205  001D80  361D               	rlcf	___ftdiv@f1+2,f,c
  8206  001D82  2E24               	decfsz	___ftdiv@cntr,f,c
  8207  001D84  D7E7               	goto	i1l601
  8208  001D86  C025  F013         	movff	___ftdiv@f3,i1___ftpack@arg
  8209  001D8A  C026  F014         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
  8210  001D8E  C027  F015         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
  8211  001D92  C028  F016         	movff	___ftdiv@exp,i1___ftpack@exp
  8212  001D96  C029  F017         	movff	___ftdiv@sign,i1___ftpack@sign
  8213  001D9A  EC00  F010         	call	i1___ftpack	;wreg free
  8214  001D9E  C013  F01B         	movff	?i1___ftpack,?___ftdiv
  8215  001DA2  C014  F01C         	movff	?i1___ftpack+1,?___ftdiv+1
  8216  001DA6  C015  F01D         	movff	?i1___ftpack+2,?___ftdiv+2
  8217  001DAA  0012               	return	
  8218  001DAC                     __end_of___ftdiv:
  8219                           	opt stack 0
  8220                           pclatu	equ	0xFFB
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon2	equ	0xFF1
  8230                           intcon3	equ	0xFF0
  8231                           indf0	equ	0xFEF
  8232                           postinc0	equ	0xFEE
  8233                           fsr0h	equ	0xFEA
  8234                           fsr0l	equ	0xFE9
  8235                           wreg	equ	0xFE8
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           bsr	equ	0xFE0
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function ___awtoft *****************
  8247 ;; Defined at:
  8248 ;;		line 32 in file "/opt/microchip/xc8/v1.45/sources/common/awtoft.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  c               2   26[COMRAM] int 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  sign            1   29[COMRAM] unsigned char 
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  3   26[COMRAM] float 
  8255 ;; Registers used:
  8256 ;;		wreg, status,2, status,0, cstack
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8262 ;;      Params:         3       0       0       0       0       0       0
  8263 ;;      Locals:         1       0       0       0       0       0       0
  8264 ;;      Temps:          0       0       0       0       0       0       0
  8265 ;;      Totals:         4       0       0       0       0       0       0
  8266 ;;Total ram usage:        4 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    2
  8269 ;; This function calls:
  8270 ;;		i1___ftpack
  8271 ;; This function is called by:
  8272 ;;		_low_isr
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           	psect	text35
  8277  0025DC                     __ptext35:
  8278                           	opt stack 0
  8279  0025DC                     ___awtoft:
  8280                           	opt stack 23
  8281                           
  8282                           ;incstack = 0
  8283  0025DC  0E00               	movlw	0
  8284  0025DE  6E1E               	movwf	___awtoft@sign,c
  8285  0025E0  AE1C               	btfss	___awtoft@c+1,7,c
  8286  0025E2  D006               	goto	i1l498
  8287  0025E4  6C1B               	negf	___awtoft@c,c
  8288  0025E6  1E1C               	comf	___awtoft@c+1,f,c
  8289  0025E8  B0D8               	btfsc	status,0,c
  8290  0025EA  2A1C               	incf	___awtoft@c+1,f,c
  8291  0025EC  0E01               	movlw	1
  8292  0025EE  6E1E               	movwf	___awtoft@sign,c
  8293  0025F0                     i1l498:
  8294  0025F0  C01B  F013         	movff	___awtoft@c,i1___ftpack@arg
  8295  0025F4  C01C  F014         	movff	___awtoft@c+1,i1___ftpack@arg+1
  8296  0025F8  6A15               	clrf	i1___ftpack@arg+2,c
  8297  0025FA  0E8E               	movlw	142
  8298  0025FC  6E16               	movwf	i1___ftpack@exp,c
  8299  0025FE  C01E  F017         	movff	___awtoft@sign,i1___ftpack@sign
  8300  002602  EC00  F010         	call	i1___ftpack	;wreg free
  8301  002606  C013  F01B         	movff	?i1___ftpack,?___awtoft
  8302  00260A  C014  F01C         	movff	?i1___ftpack+1,?___awtoft+1
  8303  00260E  C015  F01D         	movff	?i1___ftpack+2,?___awtoft+2
  8304  002612  0012               	return	
  8305  002614                     __end_of___awtoft:
  8306                           	opt stack 0
  8307                           pclatu	equ	0xFFB
  8308                           pclath	equ	0xFFA
  8309                           tblptru	equ	0xFF8
  8310                           tblptrh	equ	0xFF7
  8311                           tblptrl	equ	0xFF6
  8312                           tablat	equ	0xFF5
  8313                           prodh	equ	0xFF4
  8314                           prodl	equ	0xFF3
  8315                           intcon	equ	0xFF2
  8316                           intcon2	equ	0xFF1
  8317                           intcon3	equ	0xFF0
  8318                           indf0	equ	0xFEF
  8319                           postinc0	equ	0xFEE
  8320                           fsr0h	equ	0xFEA
  8321                           fsr0l	equ	0xFE9
  8322                           wreg	equ	0xFE8
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           bsr	equ	0xFE0
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function i1___ftpack *****************
  8334 ;; Defined at:
  8335 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  arg             3   18[COMRAM] unsigned um
  8338 ;;  exp             1   21[COMRAM] unsigned char 
  8339 ;;  sign            1   22[COMRAM] unsigned char 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  3   18[COMRAM] float 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8351 ;;      Params:         5       0       0       0       0       0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0
  8353 ;;      Temps:          3       0       0       0       0       0       0
  8354 ;;      Totals:         8       0       0       0       0       0       0
  8355 ;;Total ram usage:        8 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		___awtoft
  8362 ;;		___ftdiv
  8363 ;;		i1___ftmul
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text36
  8368  002000                     __ptext36:
  8369                           	opt stack 0
  8370  002000                     i1___ftpack:
  8371                           	opt stack 23
  8372                           
  8373                           ;incstack = 0
  8374  002000  5016               	movf	i1___ftpack@exp,w,c
  8375  002002  B4D8               	btfsc	status,2,c
  8376  002004  D005               	goto	i1u272_20
  8377  002006  5013               	movf	i1___ftpack@arg,w,c
  8378  002008  1014               	iorwf	i1___ftpack@arg+1,w,c
  8379  00200A  1015               	iorwf	i1___ftpack@arg+2,w,c
  8380  00200C  A4D8               	btfss	status,2,c
  8381  00200E  D00C               	goto	i1l534
  8382  002010                     i1u272_20:
  8383  002010  0E00               	movlw	0
  8384  002012  6E13               	movwf	?i1___ftpack,c
  8385  002014  0E00               	movlw	0
  8386  002016  6E14               	movwf	?i1___ftpack+1,c
  8387  002018  0E00               	movlw	0
  8388  00201A  6E15               	movwf	?i1___ftpack+2,c
  8389  00201C  0012               	return	
  8390  00201E  2A16               	incf	i1___ftpack@exp,f,c
  8391  002020  90D8               	bcf	status,0,c
  8392  002022  3215               	rrcf	i1___ftpack@arg+2,f,c
  8393  002024  3214               	rrcf	i1___ftpack@arg+1,f,c
  8394  002026  3213               	rrcf	i1___ftpack@arg,f,c
  8395  002028                     i1l534:
  8396  002028  0E00               	movlw	0
  8397  00202A  1413               	andwf	i1___ftpack@arg,w,c
  8398  00202C  6E18               	movwf	??i1___ftpack& (0+255),c
  8399  00202E  0E00               	movlw	0
  8400  002030  1414               	andwf	i1___ftpack@arg+1,w,c
  8401  002032  6E19               	movwf	(??i1___ftpack+1)& (0+255),c
  8402  002034  0EFE               	movlw	254
  8403  002036  1415               	andwf	i1___ftpack@arg+2,w,c
  8404  002038  6E1A               	movwf	(??i1___ftpack+2)& (0+255),c
  8405  00203A  5018               	movf	??i1___ftpack,w,c
  8406  00203C  1019               	iorwf	??i1___ftpack+1,w,c
  8407  00203E  101A               	iorwf	??i1___ftpack+2,w,c
  8408  002040  B4D8               	btfsc	status,2,c
  8409  002042  D00C               	goto	i1l537
  8410  002044  D7EC               	goto	i1l535
  8411  002046  2A16               	incf	i1___ftpack@exp,f,c
  8412  002048  0E01               	movlw	1
  8413  00204A  2613               	addwf	i1___ftpack@arg,f,c
  8414  00204C  0E00               	movlw	0
  8415  00204E  2214               	addwfc	i1___ftpack@arg+1,f,c
  8416  002050  0E00               	movlw	0
  8417  002052  2215               	addwfc	i1___ftpack@arg+2,f,c
  8418  002054  90D8               	bcf	status,0,c
  8419  002056  3215               	rrcf	i1___ftpack@arg+2,f,c
  8420  002058  3214               	rrcf	i1___ftpack@arg+1,f,c
  8421  00205A  3213               	rrcf	i1___ftpack@arg,f,c
  8422  00205C                     i1l537:
  8423  00205C  0E00               	movlw	0
  8424  00205E  1413               	andwf	i1___ftpack@arg,w,c
  8425  002060  6E18               	movwf	??i1___ftpack& (0+255),c
  8426  002062  0E00               	movlw	0
  8427  002064  1414               	andwf	i1___ftpack@arg+1,w,c
  8428  002066  6E19               	movwf	(??i1___ftpack+1)& (0+255),c
  8429  002068  0EFF               	movlw	255
  8430  00206A  1415               	andwf	i1___ftpack@arg+2,w,c
  8431  00206C  6E1A               	movwf	(??i1___ftpack+2)& (0+255),c
  8432  00206E  5018               	movf	??i1___ftpack,w,c
  8433  002070  1019               	iorwf	??i1___ftpack+1,w,c
  8434  002072  101A               	iorwf	??i1___ftpack+2,w,c
  8435  002074  B4D8               	btfsc	status,2,c
  8436  002076  D006               	goto	i1l540
  8437  002078  D7E6               	goto	i1l538
  8438  00207A  0616               	decf	i1___ftpack@exp,f,c
  8439  00207C  90D8               	bcf	status,0,c
  8440  00207E  3613               	rlcf	i1___ftpack@arg,f,c
  8441  002080  3614               	rlcf	i1___ftpack@arg+1,f,c
  8442  002082  3615               	rlcf	i1___ftpack@arg+2,f,c
  8443  002084                     i1l540:
  8444  002084  BE14               	btfsc	i1___ftpack@arg+1,7,c
  8445  002086  D003               	goto	i1u276_20
  8446  002088  0E02               	movlw	2
  8447  00208A  6016               	cpfslt	i1___ftpack@exp,c
  8448  00208C  D7F6               	goto	i1l541
  8449  00208E                     i1u276_20:
  8450  00208E  A016               	btfss	i1___ftpack@exp,0,c
  8451  002090  9E14               	bcf	i1___ftpack@arg+1,7,c
  8452  002092  90D8               	bcf	status,0,c
  8453  002094  3216               	rrcf	i1___ftpack@exp,f,c
  8454  002096  5016               	movf	i1___ftpack@exp,w,c
  8455  002098  1215               	iorwf	i1___ftpack@arg+2,f,c
  8456  00209A  5017               	movf	i1___ftpack@sign,w,c
  8457  00209C  A4D8               	btfss	status,2,c
  8458  00209E  8E15               	bsf	i1___ftpack@arg+2,7,c
  8459  0020A0  C013  F013         	movff	i1___ftpack@arg,?i1___ftpack
  8460  0020A4  C014  F014         	movff	i1___ftpack@arg+1,?i1___ftpack+1
  8461  0020A8  C015  F015         	movff	i1___ftpack@arg+2,?i1___ftpack+2
  8462  0020AC  0012               	return	
  8463  0020AE                     __end_ofi1___ftpack:
  8464                           	opt stack 0
  8465                           pclatu	equ	0xFFB
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           intcon3	equ	0xFF0
  8476                           indf0	equ	0xFEF
  8477                           postinc0	equ	0xFEE
  8478                           fsr0h	equ	0xFEA
  8479                           fsr0l	equ	0xFE9
  8480                           wreg	equ	0xFE8
  8481                           fsr1h	equ	0xFE2
  8482                           fsr1l	equ	0xFE1
  8483                           bsr	equ	0xFE0
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _high_isr *****************
  8492 ;; Defined at:
  8493 ;;		line 107 in file "enc2.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8507 ;;      Params:         0       0       0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0
  8509 ;;      Temps:         18       0       0       0       0       0       0
  8510 ;;      Totals:        18       0       0       0       0       0       0
  8511 ;;Total ram usage:       18 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		Interrupt level 2
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	intcode
  8521  000008                     __pintcode:
  8522                           	opt stack 0
  8523  000008                     _high_isr:
  8524                           	opt stack 23
  8525                           
  8526                           ;incstack = 0
  8527  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8528  00000A  EDD6  F00E         	call	int_func,f	;refresh shadow registers
  8529                           pclatu	equ	0xFFB
  8530                           pclath	equ	0xFFA
  8531                           tblptru	equ	0xFF8
  8532                           tblptrh	equ	0xFF7
  8533                           tblptrl	equ	0xFF6
  8534                           tablat	equ	0xFF5
  8535                           prodh	equ	0xFF4
  8536                           prodl	equ	0xFF3
  8537                           intcon	equ	0xFF2
  8538                           intcon2	equ	0xFF1
  8539                           intcon3	equ	0xFF0
  8540                           indf0	equ	0xFEF
  8541                           postinc0	equ	0xFEE
  8542                           fsr0h	equ	0xFEA
  8543                           fsr0l	equ	0xFE9
  8544                           wreg	equ	0xFE8
  8545                           fsr1h	equ	0xFE2
  8546                           fsr1l	equ	0xFE1
  8547                           bsr	equ	0xFE0
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           fsr2h	equ	0xFDA
  8552                           fsr2l	equ	0xFD9
  8553                           status	equ	0xFD8
  8554                           
  8555                           	psect	intcode_body
  8556  001DAC                     __pintcode_body:
  8557                           	opt stack 23
  8558  001DAC                     int_func:
  8559                           	opt stack 23
  8560  001DAC  0006               	pop		; remove dummy address from shadow register refresh
  8561  001DAE  CFFA F001          	movff	pclath,??_high_isr
  8562  001DB2  CFFB F002          	movff	pclatu,??_high_isr+1
  8563  001DB6  CFE9 F003          	movff	fsr0l,??_high_isr+2
  8564  001DBA  CFEA F004          	movff	fsr0h,??_high_isr+3
  8565  001DBE  CFE1 F005          	movff	fsr1l,??_high_isr+4
  8566  001DC2  CFE2 F006          	movff	fsr1h,??_high_isr+5
  8567  001DC6  CFD9 F007          	movff	fsr2l,??_high_isr+6
  8568  001DCA  CFDA F008          	movff	fsr2h,??_high_isr+7
  8569  001DCE  CFF3 F009          	movff	prodl,??_high_isr+8
  8570  001DD2  CFF4 F00A          	movff	prodh,??_high_isr+9
  8571  001DD6  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  8572  001DDA  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  8573  001DDE  CFF8 F00D          	movff	tblptru,??_high_isr+12
  8574  001DE2  CFF5 F00E          	movff	tablat,??_high_isr+13
  8575  001DE6  C04B  F00F         	movff	btemp,??_high_isr+14
  8576  001DEA  C04C  F010         	movff	btemp+1,??_high_isr+15
  8577  001DEE  C04D  F011         	movff	btemp+2,??_high_isr+16
  8578  001DF2  C04E  F012         	movff	btemp+3,??_high_isr+17
  8579                           
  8580                           ;enc2.c: 109: if(INT0IF == 1)
  8581  001DF6  A2F2               	btfss	intcon,1,c	;volatile
  8582  001DF8  D010               	goto	i2l83
  8583                           
  8584                           ;enc2.c: 110: {
  8585                           ;enc2.c: 115: if(PORTB&(1<<0))
  8586  001DFA  A081               	btfss	3969,0,c	;volatile
  8587  001DFC  D006               	goto	i2l84
  8588                           
  8589                           ;enc2.c: 116: {
  8590                           ;enc2.c: 117: INTEDG0 = 0;
  8591  001DFE  9CF1               	bcf	intcon2,6,c	;volatile
  8592                           
  8593                           ;enc2.c: 118: if((PORTD&(1<<0)))
  8594  001E00  A083               	btfss	3971,0,c	;volatile
  8595  001E02  D009               	goto	i2l87
  8596                           
  8597                           ;enc2.c: 119: {
  8598                           ;enc2.c: 120: contM1++;
  8599  001E04  4A49               	infsnz	_contM1,f,c	;volatile
  8600  001E06  2A4A               	incf	_contM1+1,f,c	;volatile
  8601                           
  8602                           ;enc2.c: 123: }
  8603                           ;enc2.c: 124: }
  8604  001E08  D006               	goto	i2l87
  8605  001E0A                     i2l84:
  8606                           
  8607                           ;enc2.c: 125: else
  8608                           ;enc2.c: 126: {
  8609                           ;enc2.c: 127: INTEDG0 = 1;
  8610  001E0A  8CF1               	bsf	intcon2,6,c	;volatile
  8611                           
  8612                           ;enc2.c: 128: if((PORTD & (1<<0)))
  8613  001E0C  A083               	btfss	3971,0,c	;volatile
  8614  001E0E  D003               	goto	i2l87
  8615                           
  8616                           ;enc2.c: 129: {
  8617                           ;enc2.c: 130: contM1--;
  8618  001E10  0649               	decf	_contM1,f,c	;volatile
  8619  001E12  A0D8               	btfss	status,0,c
  8620  001E14  064A               	decf	_contM1+1,f,c	;volatile
  8621  001E16                     i2l87:
  8622                           
  8623                           ;enc2.c: 133: }
  8624                           ;enc2.c: 134: }
  8625                           ;enc2.c: 135: INT0IF = 0;
  8626  001E16  92F2               	bcf	intcon,1,c	;volatile
  8627                           
  8628                           ;enc2.c: 136: return;
  8629  001E18  D015               	goto	i2l2151
  8630  001E1A                     i2l83:
  8631                           
  8632                           ;enc2.c: 137: }
  8633                           ;enc2.c: 139: if(INT1IF == 1)
  8634  001E1A  A0F0               	btfss	intcon3,0,c	;volatile
  8635  001E1C  D013               	goto	i2l2151
  8636                           
  8637                           ;enc2.c: 140: {
  8638                           ;enc2.c: 145: if(PORTB&(1<<1))
  8639  001E1E  A281               	btfss	3969,1,c	;volatile
  8640  001E20  D008               	goto	i2l90
  8641                           
  8642                           ;enc2.c: 146: {
  8643                           ;enc2.c: 147: INTEDG1 = 0;
  8644  001E22  9AF1               	bcf	intcon2,5,c	;volatile
  8645                           
  8646                           ;enc2.c: 148: if((PORTD&(1<<1)))
  8647  001E24  A283               	btfss	3971,1,c	;volatile
  8648  001E26  D00D               	goto	i2l93
  8649                           
  8650                           ;enc2.c: 149: {
  8651                           ;enc2.c: 150: contM2++;
  8652  001E28  4A46               	infsnz	_contM2,f,c	;volatile
  8653  001E2A  2A47               	incf	_contM2+1,f,c	;volatile
  8654                           
  8655                           ;enc2.c: 151: PORTCbits.RC0 = 1;
  8656  001E2C  8082               	bsf	3970,0,c	;volatile
  8657                           
  8658                           ;enc2.c: 152: PORTCbits.RC1 = 0;
  8659  001E2E  9282               	bcf	3970,1,c	;volatile
  8660                           
  8661                           ;enc2.c: 153: }
  8662                           ;enc2.c: 154: }
  8663  001E30  D008               	goto	i2l93
  8664  001E32                     i2l90:
  8665                           
  8666                           ;enc2.c: 155: else
  8667                           ;enc2.c: 156: {
  8668                           ;enc2.c: 157: INTEDG1 = 1;
  8669  001E32  8AF1               	bsf	intcon2,5,c	;volatile
  8670                           
  8671                           ;enc2.c: 158: if((PORTD & (1<<1)))
  8672  001E34  A283               	btfss	3971,1,c	;volatile
  8673  001E36  D005               	goto	i2l93
  8674                           
  8675                           ;enc2.c: 159: {
  8676                           ;enc2.c: 160: contM2--;
  8677  001E38  0646               	decf	_contM2,f,c	;volatile
  8678  001E3A  A0D8               	btfss	status,0,c
  8679  001E3C  0647               	decf	_contM2+1,f,c	;volatile
  8680                           
  8681                           ;enc2.c: 161: PORTCbits.RC0 = 0;
  8682  001E3E  9082               	bcf	3970,0,c	;volatile
  8683                           
  8684                           ;enc2.c: 162: PORTCbits.RC1 = 1;
  8685  001E40  8282               	bsf	3970,1,c	;volatile
  8686  001E42                     i2l93:
  8687                           
  8688                           ;enc2.c: 163: }
  8689                           ;enc2.c: 164: }
  8690                           ;enc2.c: 165: INT1IF = 0;
  8691  001E42  90F0               	bcf	intcon3,0,c	;volatile
  8692  001E44                     i2l2151:
  8693                           
  8694                           ;enc2.c: 166: return;
  8695  001E44  C012  F04E         	movff	??_high_isr+17,btemp+3
  8696  001E48  C011  F04D         	movff	??_high_isr+16,btemp+2
  8697  001E4C  C010  F04C         	movff	??_high_isr+15,btemp+1
  8698  001E50  C00F  F04B         	movff	??_high_isr+14,btemp
  8699  001E54  C00E  FFF5         	movff	??_high_isr+13,tablat
  8700  001E58  C00D  FFF8         	movff	??_high_isr+12,tblptru
  8701  001E5C  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  8702  001E60  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  8703  001E64  C00A  FFF4         	movff	??_high_isr+9,prodh
  8704  001E68  C009  FFF3         	movff	??_high_isr+8,prodl
  8705  001E6C  C008  FFDA         	movff	??_high_isr+7,fsr2h
  8706  001E70  C007  FFD9         	movff	??_high_isr+6,fsr2l
  8707  001E74  C006  FFE2         	movff	??_high_isr+5,fsr1h
  8708  001E78  C005  FFE1         	movff	??_high_isr+4,fsr1l
  8709  001E7C  C004  FFEA         	movff	??_high_isr+3,fsr0h
  8710  001E80  C003  FFE9         	movff	??_high_isr+2,fsr0l
  8711  001E84  C002  FFFB         	movff	??_high_isr+1,pclatu
  8712  001E88  C001  FFFA         	movff	??_high_isr,pclath
  8713  001E8C  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8714  001E8E  0011               	retfie		f
  8715  001E90                     __end_of_high_isr:
  8716                           	opt stack 0
  8717                           pclatu	equ	0xFFB
  8718                           pclath	equ	0xFFA
  8719                           tblptru	equ	0xFF8
  8720                           tblptrh	equ	0xFF7
  8721                           tblptrl	equ	0xFF6
  8722                           tablat	equ	0xFF5
  8723                           prodh	equ	0xFF4
  8724                           prodl	equ	0xFF3
  8725                           intcon	equ	0xFF2
  8726                           intcon2	equ	0xFF1
  8727                           intcon3	equ	0xFF0
  8728                           indf0	equ	0xFEF
  8729                           postinc0	equ	0xFEE
  8730                           fsr0h	equ	0xFEA
  8731                           fsr0l	equ	0xFE9
  8732                           wreg	equ	0xFE8
  8733                           fsr1h	equ	0xFE2
  8734                           fsr1l	equ	0xFE1
  8735                           bsr	equ	0xFE0
  8736                           indf2	equ	0xFDF
  8737                           postinc2	equ	0xFDE
  8738                           postdec2	equ	0xFDD
  8739                           fsr2h	equ	0xFDA
  8740                           fsr2l	equ	0xFD9
  8741                           status	equ	0xFD8
  8742                           pclatu	equ	0xFFB
  8743                           pclath	equ	0xFFA
  8744                           tblptru	equ	0xFF8
  8745                           tblptrh	equ	0xFF7
  8746                           tblptrl	equ	0xFF6
  8747                           tablat	equ	0xFF5
  8748                           prodh	equ	0xFF4
  8749                           prodl	equ	0xFF3
  8750                           intcon	equ	0xFF2
  8751                           intcon2	equ	0xFF1
  8752                           intcon3	equ	0xFF0
  8753                           indf0	equ	0xFEF
  8754                           postinc0	equ	0xFEE
  8755                           fsr0h	equ	0xFEA
  8756                           fsr0l	equ	0xFE9
  8757                           wreg	equ	0xFE8
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           bsr	equ	0xFE0
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768                           	psect	rparam
  8769  0000                     pclatu	equ	0xFFB
  8770                           pclath	equ	0xFFA
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           intcon2	equ	0xFF1
  8779                           intcon3	equ	0xFF0
  8780                           indf0	equ	0xFEF
  8781                           postinc0	equ	0xFEE
  8782                           fsr0h	equ	0xFEA
  8783                           fsr0l	equ	0xFE9
  8784                           wreg	equ	0xFE8
  8785                           fsr1h	equ	0xFE2
  8786                           fsr1l	equ	0xFE1
  8787                           bsr	equ	0xFE0
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795                           	psect	temp
  8796  00004B                     btemp:
  8797                           	opt stack 0
  8798  00004B                     	ds	1
  8799  0000                     int$flags	set	btemp
  8800  0000                     wtemp6	set	btemp+1
  8801                           pclatu	equ	0xFFB
  8802                           pclath	equ	0xFFA
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           intcon2	equ	0xFF1
  8811                           intcon3	equ	0xFF0
  8812                           indf0	equ	0xFEF
  8813                           postinc0	equ	0xFEE
  8814                           fsr0h	equ	0xFEA
  8815                           fsr0l	equ	0xFE9
  8816                           wreg	equ	0xFE8
  8817                           fsr1h	equ	0xFE2
  8818                           fsr1l	equ	0xFE1
  8819                           bsr	equ	0xFE0
  8820                           indf2	equ	0xFDF
  8821                           postinc2	equ	0xFDE
  8822                           postdec2	equ	0xFDD
  8823                           fsr2h	equ	0xFDA
  8824                           fsr2l	equ	0xFD9
  8825                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    118
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      74
    BANK0           128    103     114
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 16
		 -> value(BANK0[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->i1___ftmul
    i1___ftmul->___awtoft
    ___ftdiv->i1___ftpack
    ___awtoft->i1___ftpack

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   50331
                                            101 BANK0      2     2      0
                           _Adelante
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   49283
                                             63 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11851
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11653
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5029
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2494
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3964
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3619
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2349
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     505
                                              4 BANK0      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     308
                                              3 BANK0      1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     132
                                              1 BANK0      2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     242
                                              3 BANK0      1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     110
                                              1 BANK0      1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     301
                                              3 BANK0      4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     132
                                              1 BANK0      2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adelante                                             0     0      0       0
                              _ccwM2
                               _cwM1
 ---------------------------------------------------------------------------------
 (2) _cwM1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ccwM2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0    2574
                                             45 COMRAM    21    21      0
                           ___awtoft
                            ___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (6) i1___ftmul                                           15     9      6     843
                                             30 COMRAM    15     9      6
                           ___awtoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    1023
                                             26 COMRAM    15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3     708
                                             26 COMRAM     4     1      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (7) i1___ftpack                                           8     3      5     465
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adelante
     _ccwM2
     _cwM1
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _low_isr (ROOT)
   ___awtoft
     i1___ftpack
   ___ftdiv
     i1___ftpack
   i1___ftmul
     ___awtoft (ARG)
       i1___ftpack
     i1___ftpack (ARG)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     67      72       5       89.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BC      15        0.0%
DATA                 0      0      BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  2 21:29:31 2018

             i1___ftpack 2000              lcd_cmd_hf@x 0081                       l98 2104  
           ___awdiv@sign 008B                       bsr 000FE0      ___wmul@multiplicand 0090  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$XT 000000  
           ___ftadd@exp1 00B8             ___ftadd@exp2 00B7             ___ftadd@sign 00B6  
                    l211 14C0                      l300 0F08                      l221 112C  
                    l150 2572                      l214 1596                      l222 128A  
                    l151 257A                      l231 06E2                      l152 2582  
                    l160 2430                      l224 1342                      l217 1152  
                    l241 07C4                      l233 07B6                      l218 1074  
                    l242 07EC                      l234 07A0                      l147 258C  
                    l251 0964                      l235 0766                      l180 2636  
                    l148 256A                      l244 0DF2                      l252 09A2  
                    l228 069C                      l181 2638                      l165 25BA  
                    l253 0A66                      l245 0800                      l229 06B4  
                    l182 2640                      l502 18DA                      l262 0ACC  
                    l246 0842                      l238 07C8                      l167 25CA  
                    l159 245A                      l176 2622                      l168 25B0  
                    l504 18F8                      l280 0C92                      l272 0C28  
                    l256 0A10                      l248 08D6                      l177 2624  
                    l169 25B4                      l505 193A                      l281 0DC6  
                    l273 0B92                      l249 093E                      l178 262C  
                    l514 19CC                      l506 196A                      l610 1842  
                    l290 0E46                      l282 0CE2                      l266 0B38  
                    l179 262E                      l515 19C0                      l291 0E68  
                    l275 0C48                      l540 1FD6                      l508 19A8  
                    l612 187E                      l284 0DE8                      l276 0C32  
                    l268 0B64                      l541 1FCC                      l509 1998  
                    l613 186E                      l293 0E8A                      l285 0DD2  
                    l269 0B4E                      l534 1F7A                      l702 2388  
                    l606 17B4                      l470 2202                      l630 1B06  
                    l294 0E92                      l278 0C6C                      l623 218C  
                    l535 1F70                      l703 237C                      l471 2212  
                    l295 0EB6                      l287 0E0A                      l279 0C70  
                    l624 21BC                      l608 17E0                      l632 1B2E  
                    l296 0EBE                      l288 0E26                      l641 26AA  
                    l537 1FAE                      l713 23E4                      l609 181A  
                    l473 2230                      l633 1B60                      l538 1F98  
                    l706 23B0                      l714 23D8                      l618 18A2  
                    l474 2228                      l490 2346                      l634 1B70  
                    l651 1A12                      l707 23BE                      l619 1896  
                    l491 2350                      l483 230C                      l580 16A8  
                    l660 1AA2                      l492 235E                      l484 2318  
                    l636 1B88                      l565 162C                      l653 1A8A  
                    l477 2250                      l637 1B98                      l574 16BC  
                    l662 1ACA                      l654 1A7A                      l478 225A  
                    l486 232E                      l591 1714                      l647 253A  
                    l479 2268                      l487 2326                      l592 1730  
                    l593 1760                      l569 1656                      l666 26D2  
                    l579 16B2                      l659 1AAE                      l588 16F0  
                    l692 22A2                      l589 16E6                      l693 2296  
                    l696 22D6                      l697 22E4             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _lcd 0048             ___awmod@sign 0085  
                    wreg 000FE8             i1___ftmul@f1 001F             i1___ftmul@f2 0022  
            lcd_gotoxy@x 0085              lcd_gotoxy@y 0083             __CFG_LVP$OFF 000000  
           ___ftdiv@cntr 0024             ___ftdiv@sign 0029             __CFG_WDT$OFF 000000  
                   l2231 21E8                     l3105 0B4E                     l3109 0B5E  
                   l3129 0C32                     l3065 09EA                     l3057 09A2  
                   l3219 0F04                     l3085 0AD0                     STR_1 0677  
                   STR_2 0687                     _GIEH 007F97                     _GIEL 007F96  
                   u2010 16C4                     u2101 1B16                     u2040 16F8  
                   u3100 0C66                     u2230 2332                     u3030 0B08  
                   u2081 1AEE                     u2170 2234                     u2500 19D2  
                   u3060 0B72                     u2430 18A8                     u3230 0EC6  
                   u2351 1798                     u1800 1F62                     u3240 0EE4  
                   u3090 0C56                     u2371 17C4                     u2620 1AB4  
                   u3260 0F22                     u1910 161E                     u3407 2110  
                   u2800 247A                     u1840 1FE0                     _IPEN 007E87  
                   u3417 24F8                     u2561 19F6                     u2650 22A6  
                   u3507 24AA                     u3427 1EAA                     u1940 1648  
                   u2580 1A30                     u3517 2702                     u3437 1EBC  
                   u2910 087A                     u3447 1ED0                     u2807 2470  
                   u1871 15EA                     u2680 238C                     u2840 0742  
                   u3457 1EE8                     u1881 15FE                     u2585 1A28  
                   u1970 1686                     u3467 1EFE                     u2915 0870  
                   u3477 1F14                     u2790 2450                     u2950 0974  
                   u3487 1F2A                     u2960 09B4                     u3497 1F40  
                   u2797 2446                     u2990 09EA                     i2l90 1E32  
                   i2l83 1E1A                     i2l84 1E0A                     i2l93 1E42  
                   i2l87 1E16                     _TMR1 000FCE             __CFG_PWRT$ON 000000  
                   _cwM1 271A                     _main 20AE             ___ftpack@arg 0080  
                   _rpm1 0043                     _rpm2 00E7             ___ftpack@exp 0083  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 004B  
                   prodh 000FF4                     prodl 000FF3                     start 015C  
          __CFG_IESO$OFF 000000             _sprintf$1062 00CC            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 00A1             ___param_bank 000000             ___ftmul@sign 00A2  
          i1___ftmul@exp 0028             ___fttol@exp1 00B8             ___fttol@lval 00B4  
i1___ftmul@f3_as_product 0029                    ?_cwM1 0001                    ?_main 0001  
        __end_of___awdiv 2272          __end_of___ftadd 1786          __end_of___awmod 2368  
        __end_of___ftdiv 1DAC          __end_of___ftneg 26B8          __end_of___lldiv 22F6  
        __end_of___ftmul 1BD2          ___awdiv@divisor 0088          __end_of___llmod 23D0  
        __end_of___ftsub 2564          __end_of___fttol 1ADC                    i1l600 1D16  
                  i1l601 1D54                    i1l602 1D7A                    i1l540 2084  
                  i1l541 207A                    i1l534 2028                    i1l630 1BFA  
                  i1l535 201E                    i1l632 1C22                    i1l537 205C  
                  i1l633 1C54                    i1l538 2046                    i1l634 1C64  
                  i1l636 1C7C                    i1l637 1C8C                    i1l498 25F0  
                  i1l598 1CEE          ___awdiv@counter 008A                    _PORTB 000F81  
                  _PORTD 000F83                    _TRISB 000F93            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0090           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 24D4          __end_of_lcd_lat 2710          __end_of_lcd_dwr 2522  
        __end_of_lcd_msg 2482            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000                    _ccwM2 2722           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 001E          __end_of_dpowers 0629                    _manda 2614  
                  _scale 0F30          __end_of_isdigit 26DA            ___ftpack@sign 0084  
                  _value 00EA          __end_of_low_isr 015C           __CFG_BOREN$OFF 000000  
                  pclath 000FFA                    tablat 000FF5         __end_of_Adelante 271A  
                  status 000FD8                    wtemp6 004C          __end_of_sprintf 0F30  
     __size_ofi1___ftmul 00F4           i1___ftpack@arg 0013           i1___ftpack@exp 0016  
        __initialization 266C             __end_of_cwM1 2722             __end_of_main 215A  
            ?i1___ftpack 0013           i1___ftmul@cntr 002C           i1___ftmul@sign 002D  
                 ??_cwM1 0080                   ??_main 00E5            ___fttol@sign1 00B3  
          __activetblptr 000002     __size_of__tdiv_to_l_ 0134                   ?_ccwM2 0001  
                 ?_manda 0001         ___llmod@dividend 0080                   ?_scale 00A3  
       ___awdiv@dividend 0086         __end_of___awtoft 2614         __end_of___ftpack 2000  
       __end_of___lltoft 242E                   _INT0IE 007F94                   _INT0IF 007F91  
                 _INT1IE 007F83                   _INT1IF 007F80                   _INT1IP 007F86  
                 i1l3369 0104                   i2l2151 1E44                   u333_21 1BE2  
                 u327_21 1CD6                   u335_21 1C0A                   u329_21 1CFE  
                 _TMR1IF 007CF0                   _TMR1CS 007E69                   _TMR1IP 007CF8  
                 _TMR1ON 007E68           __CFG_XINST$OFF 000000         __end_of__powers_ 0650  
       __end_of_lcd_init 1F50         __end_of_high_isr 1E90         __end_of_lcd_putc 25A4  
                 ___ftge 215A                   ___wmul 2644                ??___awdiv 008A  
              ??___ftadd 00B3           __CFG_STVREN$ON 000000                ??___awmod 0084  
              ??___ftdiv 0021                ??___ftneg 0083                ??___lldiv 0088  
              ??___ftmul 009A                ??___llmod 0088                ??___ftsub 00BF  
              ??___fttol 00AE                   _contM1 0049                   _contM2 0046  
                 _fround 1368                   clear_0 2672                   clear_1 267E  
       ___awdiv@quotient 008C          ___awmod@divisor 0082          ___awmod@counter 0084  
              ??_lcd_cmd 0081                ??_lcd_lat 0080                ??_lcd_dwr 0081  
              ??_lcd_msg 0086    ___ftmul@f3_as_product 009E        __end_ofi1___ftmul 1CC6  
              ??_isdigit 0080             __mediumconst 0000                ??_low_isr 002E  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
      lcd_gotoxy@ADDRESS 0086                ??_sprintf 00C6      __size_ofi1___ftpack 00AE  
             __accesstop 0080  __end_of__initialization 2684          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 00AD               ___ftadd@f2 00B0               ___ftge@ff1 0080  
             ___ftge@ff2 0083          i1___ftpack@sign 0017            ___rparam_used 000001  
             ___ftdiv@f1 001B               ___ftdiv@f2 001E               ___ftdiv@f3 0025  
             ___ftneg@f1 0080               ___awtoft@c 001B               ___ftmul@f1 0094  
             ___ftmul@f2 0097               ___ftsub@f1 00B9               ___ftsub@f2 00BC  
             ___fttol@f1 00AA           __pcstackCOMRAM 0001            __end_of_ccwM2 272A  
             ___lltoft@c 0088            __end_of_manda 2644            __end_of_scale 1368  
              ?_Adelante 0001               __div_to_l_ 18BA                  ??_ccwM2 0080  
                ??_manda 0080          __div_to_l_@exp1 008B          __div_to_l_@cntr 008A  
                ??_scale 00A6          __div_to_l_@quot 0086             sprintf@width 00D7  
             __pbssBANK0 00E7            __div_to_l_@f1 0080            __div_to_l_@f2 0083  
     __CFG_CCP2MX$PORTBE 000000                  ?___ftge 0080                  ?___wmul 008E  
                ?_fround 00A3                ?___awtoft 001B                ?___ftpack 0080  
              ?___lltoft 0088                  _T1CKPS0 007E6C                  _T1CKPS1 007E6D  
             ??_Adelante 0080                  _INTEDG0 007F8E                  _INTEDG1 007F8D  
             _lcd_cmd_hf 26DA               _lcd_gotoxy 25A4                ?_lcd_init 0001  
              ?_high_isr 0001                ?_lcd_putc 0001        __end_of__npowers_ 0677  
                __Hparam 0000               _scale$1061 00A6                  __Lparam 0000  
        __size_of___ftge 0092             ??i1___ftpack 0018                  ___awdiv 21EC  
                ___ftadd 15D8                  ___awmod 22F6                  ___ftdiv 1CC6  
                ___ftneg 2692                  ___lldiv 2272          __size_of___wmul 0028  
                ___ftmul 1ADC                  ___llmod 2368                  ___ftsub 2522  
                ___fttol 19E4             __psmallconst 0600                  __pcinit 266C  
             ??___awtoft 001E               ??___ftpack 0085          __size_of_fround 0270  
                __ramtop 0600               ??___lltoft 008C                  __ptext0 20AE  
                __ptext1 068E                  __ptext2 0F30                  __ptext3 26B8  
                __ptext4 1368                  __ptext5 2644                  __ptext6 1ADC  
                __ptext7 22F6                  __ptext8 21EC                  __ptext9 1786  
                _lcd_cmd 2482                  _lcd_lat 26F8                  _lcd_dwr 24D4  
                _lcd_msg 242E                _T1CONbits 000FCD              ?__div_to_l_ 0080  
                _dpowers 0601                  _isdigit 26B8         ___awmod@dividend 0080  
                _low_isr 0018                  _sprintf 068E               ??_lcd_init 0083  
             ??_high_isr 0001           __pintcode_body 1DAC               ??_lcd_putc 0083  
   end_of_initialization 2684       __end_ofi1___ftpack 20AE            __Lmediumconst 0000  
                int_func 1DAC          ___lldiv@divisor 0084          ___lldiv@counter 008C  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
         __tdiv_to_l_@f1 0080           __tdiv_to_l_@f2 0083            ??__tdiv_to_l_ 0086  
              _PORTCbits 000F82              ?_lcd_cmd_hf 0001                _TRISCbits 000F94  
            ?_lcd_gotoxy 0083                i1___ftmul 1BD2              ___ftdiv@exp 0028  
    __size_of__div_to_l_ 012A              ___ftmul@exp 009D           __end_of___ftge 21EC  
         __end_of___wmul 266C           __end_of_fround 15D8      start_initialization 266C  
      __size_of_Adelante 000A      __end_of__tdiv_to_l_ 18BA               ?i1___ftmul 001F  
        ___llmod@divisor 0084          ___llmod@counter 0088      __size_of_lcd_cmd_hf 001E  
               ??___ftge 0086      __size_of_lcd_gotoxy 0038                 ??___wmul 0092  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 00A6            sprintf@tmpval 00D9  
             fround@prec 00AC        __size_of___awtoft 0038        __size_of___ftpack 00B0  
      __size_of___lltoft 005E              __pbssCOMRAM 0043            __pcstackBANK0 0080  
      __size_of_lcd_init 00C0        __size_of_high_isr 1E88              sprintf@flag 00D5  
      __size_of_lcd_putc 0040              sprintf@fval 00DF              sprintf@prec 00E2  
              __pintcode 0008                 ?___awdiv 0086                 ?___ftadd 00AD  
               ?___awmod 0080                 ?___ftdiv 001B                 ?___ftneg 0080  
               ?___lldiv 0080                 ?___ftmul 0094                 ?___llmod 0080  
               ?___ftsub 00B9                __npowers_ 0650                 ?___fttol 00AA  
            __pintcodelo 0018              __tdiv_to_l_ 1786                 ?_lcd_cmd 0001  
               ?_lcd_lat 0001                 ?_lcd_dwr 0001                 ?_lcd_msg 0084  
           ??__div_to_l_ 0086              __smallconst 0600                 ?_isdigit 0001  
               ?_low_isr 0001           __size_of_ccwM2 0008              ??i1___ftmul 0025  
         __size_of_manda 0030                 ?_sprintf 00BF           __size_of_scale 0438  
         ___wmul@product 0092                 _PIE1bits 000F9D                 i1u272_20 2010  
               i1u276_20 208E                 _PIR1bits 000F9E       __end_of__div_to_l_ 19E4  
       __CFG_WDTPS$32768 000000        ___wmul@multiplier 008E                 _Adelante 2710  
           ??_lcd_cmd_hf 0081                lcd_putc@c 0083             ??_lcd_gotoxy 0084  
              manda@dato 0080                 __Hrparam 0000                 __Lrparam 0000  
     __end_of_lcd_cmd_hf 26F8       __end_of_lcd_gotoxy 25DC         __size_of___awdiv 0086  
       __size_of___ftadd 01AE         __size_of___awmod 0072         __size_of___ftdiv 00E6  
       __size_of___ftneg 0026         __size_of___lldiv 0084         __size_of___ftmul 00F6  
       __size_of___llmod 0068         __size_of___ftsub 0042         __size_of___fttol 00F8  
               ___awtoft 25DC                 ___ftpack 1F50              _fround$1060 00A6  
            _fround$1059 00A9                 ___lltoft 23D0              _isdigit$695 0081  
       __size_of_lcd_cmd 0052         __size_of_lcd_lat 0018         __size_of_lcd_dwr 004E  
       __size_of_lcd_msg 0054               sprintf@exp 00DD               sprintf@val 00D1  
       __size_of_isdigit 0022         __size_of_low_isr 0144                 __ptext10 18BA  
               __ptext11 23D0                 __ptext20 242E                 __ptext12 2368  
               __ptext21 2564                 __ptext13 2272                 __ptext30 271A  
               __ptext22 24D4                 __ptext14 19E4                 __ptext31 2722  
               __ptext23 1E90                 __ptext15 2522                 __ptext24 26DA  
               __ptext16 15D8                 __ptext33 1BD2                 __ptext25 25A4  
               __ptext17 1F50                 __ptext34 1CC6                 __ptext26 2482  
               __ptext18 2692                 __ptext35 25DC                 __ptext27 2614  
               __ptext19 215A                 __ptext36 2000                 __ptext28 26F8  
               __ptext29 2710                 __powers_ 0629                 _lcd_init 1E90  
               _high_isr 0008                 _lcd_putc 2564         __size_of_sprintf 08A2  
          __size_of_cwM1 0008            __size_of_main 00AC                 int$flags 004B  
               lcd_cmd@x 0082                 lcd_dwr@x 0082                 lcd_msg@c 0084  
               isdigit@c 0082                 scale@scl 00A9                 intlevel1 0000  
               intlevel2 0000                sprintf@ap 00CF         __tdiv_to_l_@exp1 008E  
              sprintf@sp 00BF         __tdiv_to_l_@cntr 008D         __tdiv_to_l_@quot 0089  
       ___lldiv@dividend 0080             ?__tdiv_to_l_ 0080                 sprintf@c 00E4  
               sprintf@f 00C1         ___lldiv@quotient 0088  
