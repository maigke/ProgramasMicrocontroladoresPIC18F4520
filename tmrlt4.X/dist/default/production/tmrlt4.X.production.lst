

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Mar 29 19:56:46 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.44
    32                           ; Generated 14/09/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4520 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	smallconst
    67  000600                     __psmallconst:
    68                           	opt stack 0
    69  000600  00                 	db	0
    70  000601                     _dpowers:
    71                           	opt stack 0
    72  000601  0001               	dw	1
    73  000603  000A               	dw	10
    74  000605  0064               	dw	100
    75  000607  03E8               	dw	1000
    76  000609  2710               	dw	10000
    77  00060B                     __end_of_dpowers:
    78                           	opt stack 0
    79  0000                     _TMR0	set	4054
    80  0000                     _PORTB	set	3969
    81  0000                     _PORTD	set	3971
    82  0000                     _RCONbits	set	4048
    83  0000                     _PORTC	set	3970
    84  0000                     _INTCONbits	set	4082
    85  0000                     _GIEL	set	32662
    86  0000                     _GIEH	set	32663
    87  0000                     _TMR0IP	set	32650
    88  0000                     _T0PS0	set	32424
    89  0000                     _T0PS1	set	32425
    90  0000                     _T0PS2	set	32426
    91  0000                     _T08BIT	set	32430
    92  0000                     _TMR0ON	set	32431
    93  0000                     _PSA	set	32427
    94  0000                     _T0CS	set	32429
    95  0000                     _TMR0IE	set	32661
    96  0000                     _TMR0IF	set	32658
    97  00060B                     STR_1:
    98  00060B  43                 	db	67	;'C'
    99  00060C  6F                 	db	111	;'o'
   100  00060D  6E                 	db	110	;'n'
   101  00060E  74                 	db	116	;'t'
   102  00060F  72                 	db	114	;'r'
   103  000610  6F                 	db	111	;'o'
   104  000611  6C                 	db	108	;'l'
   105  000612  20                 	db	32
   106  000613  50                 	db	80	;'P'
   107  000614  57                 	db	87	;'W'
   108  000615  4D                 	db	77	;'M'
   109  000616  00                 	db	0
   110  000617                     STR_2:
   111  000617  50                 	db	80	;'P'
   112  000618  57                 	db	87	;'W'
   113  000619  4D                 	db	77	;'M'
   114  00061A  3D                 	db	61	;'='
   115  00061B  00                 	db	0
   116  00061C                     STR_3:
   117  00061C  25                 	db	37
   118  00061D  33                 	db	51	;'3'
   119  00061E  64                 	db	100	;'d'
   120  00061F  00                 	db	0
   121  0000                     
   122                           ; #config settings
   123  000620  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  000D2A                     __pcinit:
   127                           	opt stack 0
   128  000D2A                     start_initialization:
   129                           	opt stack 0
   130  000D2A                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to COMRAM (12 bytes)
   134  000D2A  EE00  F04B         	lfsr	0,__pbssCOMRAM
   135  000D2E  0E0C               	movlw	12
   136  000D30                     clear_0:
   137  000D30  6AEE               	clrf	postinc0,c
   138  000D32  06E8               	decf	wreg,f,c
   139  000D34  E1FD               	bnz	clear_0
   140  000D36                     end_of_initialization:
   141                           	opt stack 0
   142  000D36                     __end_of__initialization:
   143                           	opt stack 0
   144  000D36  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   145  000D38  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   146  000D3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   147  000D3C  6EF8               	movwf	tblptru,c
   148  000D3E  0100               	movlb	0
   149  000D40  EF2B  F004         	goto	_main	;jump to C main() function
   150                           tblptru	equ	0xFF8
   151                           postinc0	equ	0xFEE
   152                           wreg	equ	0xFE8
   153                           
   154                           	psect	bssCOMRAM
   155  00004B                     __pbssCOMRAM:
   156                           	opt stack 0
   157  00004B                     _lcd:
   158                           	opt stack 0
   159  00004B                     	ds	1
   160  00004C                     _Ton:
   161                           	opt stack 0
   162  00004C                     	ds	1
   163  00004D                     _T0ini:
   164                           	opt stack 0
   165  00004D                     	ds	1
   166  00004E                     _estado:
   167                           	opt stack 0
   168  00004E                     	ds	1
   169  00004F                     _value:
   170                           	opt stack 0
   171  00004F                     	ds	8
   172                           tblptru	equ	0xFF8
   173                           postinc0	equ	0xFEE
   174                           wreg	equ	0xFE8
   175                           
   176                           	psect	cstackCOMRAM
   177  000001                     __pcstackCOMRAM:
   178                           	opt stack 0
   179  000001                     ??_high_isr:
   180  000001                     
   181                           ; 1 bytes @ 0x0
   182  000001                     	ds	19
   183  000014                     ??_low_isr:
   184                           
   185                           ; 1 bytes @ 0x13
   186  000014                     	ds	21
   187  000029                     ??_isdigit:
   188  000029                     ??_lcd_lat:
   189  000029                     ?___wmul:
   190                           	opt stack 0
   191  000029                     ?___lwdiv:
   192                           	opt stack 0
   193  000029                     manda@dato:
   194                           	opt stack 0
   195  000029                     ___wmul@multiplier:
   196                           	opt stack 0
   197  000029                     ___lwdiv@dividend:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x28
   201  000029                     	ds	1
   202  00002A                     ??_lcd_cmd:
   203  00002A                     ??_lcd_dwr:
   204  00002A                     lcd_cmd_hf@x:
   205                           	opt stack 0
   206  00002A                     _isdigit$511:
   207                           	opt stack 0
   208                           
   209                           ; 1 bytes @ 0x29
   210  00002A                     	ds	1
   211  00002B                     lcd_cmd@x:
   212                           	opt stack 0
   213  00002B                     lcd_dwr@x:
   214                           	opt stack 0
   215  00002B                     isdigit@c:
   216                           	opt stack 0
   217  00002B                     ___wmul@multiplicand:
   218                           	opt stack 0
   219  00002B                     ___lwdiv@divisor:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2A
   223  00002B                     	ds	1
   224  00002C                     ??_lcd_init:
   225  00002C                     lcd_putc@c:
   226                           	opt stack 0
   227  00002C                     lcd_gotoxy@y:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0x2B
   231  00002C                     	ds	1
   232  00002D                     ??_lcd_gotoxy:
   233  00002D                     lcd_msg@c:
   234                           	opt stack 0
   235  00002D                     ___wmul@product:
   236                           	opt stack 0
   237  00002D                     ___lwdiv@quotient:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x2C
   241  00002D                     	ds	1
   242  00002E                     lcd_gotoxy@x:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x2D
   246  00002E                     	ds	1
   247  00002F                     lcd_gotoxy@ADDRESS:
   248                           	opt stack 0
   249  00002F                     ___lwdiv@counter:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x2E
   253  00002F                     	ds	1
   254  000030                     ?___lwmod:
   255                           	opt stack 0
   256  000030                     ___lwmod@dividend:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2F
   260  000030                     	ds	2
   261  000032                     ___lwmod@divisor:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x31
   265  000032                     	ds	2
   266  000034                     ___lwmod@counter:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x33
   270  000034                     	ds	1
   271  000035                     ?_sprintf:
   272                           	opt stack 0
   273  000035                     sprintf@sp:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x34
   277  000035                     	ds	2
   278  000037                     sprintf@f:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x36
   282  000037                     	ds	4
   283  00003B                     ??_sprintf:
   284                           
   285                           ; 1 bytes @ 0x3A
   286  00003B                     	ds	4
   287  00003F                     sprintf@ap:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x3E
   291  00003F                     	ds	2
   292  000041                     sprintf@prec:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x40
   296  000041                     	ds	1
   297  000042                     sprintf@flag:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x41
   301  000042                     	ds	1
   302  000043                     sprintf@val:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x42
   306  000043                     	ds	2
   307  000045                     sprintf@width:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x44
   311  000045                     	ds	2
   312  000047                     sprintf@c:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x46
   316  000047                     	ds	1
   317  000048                     main@val:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x47
   321  000048                     	ds	1
   322  000049                     main@i:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x48
   326  000049                     	ds	2
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331 ;;
   332 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   333 ;;
   334 ;; *************** function _main *****************
   335 ;; Defined at:
   336 ;;		line 91 in file "tmrlt4.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;		None
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  i               2   72[COMRAM] int 
   341 ;;  val             1   71[COMRAM] unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   351 ;;      Params:         0       0       0       0       0       0       0
   352 ;;      Locals:         3       0       0       0       0       0       0
   353 ;;      Temps:          0       0       0       0       0       0       0
   354 ;;      Totals:         3       0       0       0       0       0       0
   355 ;;Total ram usage:        3 bytes
   356 ;; Hardware stack levels required when called:    6
   357 ;; This function calls:
   358 ;;		_lcd_cmd
   359 ;;		_lcd_gotoxy
   360 ;;		_lcd_init
   361 ;;		_lcd_msg
   362 ;;		_sprintf
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text0
   369  000856                     __ptext0:
   370                           	opt stack 0
   371  000856                     _main:
   372                           	opt stack 25
   373                           
   374                           ;tmrlt4.c: 93: unsigned char val=0;
   375                           
   376                           ;incstack = 0
   377  000856  0E00               	movlw	0
   378  000858  6E48               	movwf	main@val,c
   379                           
   380                           ;tmrlt4.c: 94: Ton = 0;
   381  00085A  0E00               	movlw	0
   382  00085C  6E4C               	movwf	_Ton,c
   383                           
   384                           ;tmrlt4.c: 95: (*(&(*(&PORTC + 0x12))) &=~ (1<<(2)));
   385  00085E  9494               	bcf	3988,2,c	;volatile
   386                           
   387                           ;tmrlt4.c: 96: (*(&(*(&PORTC + 0x12))) &=~ (1<<(3)));
   388  000860  9694               	bcf	3988,3,c	;volatile
   389                           
   390                           ;tmrlt4.c: 97: (*(&(*(&PORTC + 0x12))) |= (1<<(1)));
   391  000862  8294               	bsf	3988,1,c	;volatile
   392                           
   393                           ;tmrlt4.c: 105: TMR0IE = 1;
   394  000864  8AF2               	bsf	intcon,5,c	;volatile
   395                           
   396                           ;tmrlt4.c: 106: T0CS = 0;
   397  000866  9AD5               	bcf	4053,5,c	;volatile
   398                           
   399                           ;tmrlt4.c: 107: PSA = 0;
   400  000868  96D5               	bcf	4053,3,c	;volatile
   401                           
   402                           ;tmrlt4.c: 108: TMR0ON = 0;
   403  00086A  9ED5               	bcf	4053,7,c	;volatile
   404                           
   405                           ;tmrlt4.c: 109: T08BIT = 1;
   406  00086C  8CD5               	bsf	4053,6,c	;volatile
   407                           
   408                           ;tmrlt4.c: 110: T0PS2 = 0;
   409  00086E  94D5               	bcf	4053,2,c	;volatile
   410                           
   411                           ;tmrlt4.c: 111: T0PS1 = 1;
   412  000870  82D5               	bsf	4053,1,c	;volatile
   413                           
   414                           ;tmrlt4.c: 112: T0PS0 = 1;
   415  000872  80D5               	bsf	4053,0,c	;volatile
   416                           
   417                           ;tmrlt4.c: 113: TMR0IP = 1;
   418  000874  84F1               	bsf	intcon2,2,c	;volatile
   419                           
   420                           ;tmrlt4.c: 115: RCONbits.IPEN = 1;
   421  000876  8ED0               	bsf	4048,7,c	;volatile
   422                           
   423                           ;tmrlt4.c: 116: GIEH = 1;
   424  000878  8EF2               	bsf	intcon,7,c	;volatile
   425                           
   426                           ;tmrlt4.c: 117: GIEL = 0;
   427  00087A  9CF2               	bcf	intcon,6,c	;volatile
   428                           
   429                           ;tmrlt4.c: 120: lcd_init();
   430  00087C  EC0E  F005         	call	_lcd_init	;wreg free
   431                           
   432                           ;tmrlt4.c: 122: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
   433  000880  9C8C               	bcf	3980,6,c	;volatile
   434                           
   435                           ;tmrlt4.c: 123: lcd_cmd(0x01);
   436  000882  0E01               	movlw	1
   437  000884  ECBD  F005         	call	_lcd_cmd
   438                           
   439                           ;tmrlt4.c: 124: lcd_gotoxy(1,1);
   440  000888  0E01               	movlw	1
   441  00088A  6E2C               	movwf	lcd_gotoxy@y,c
   442  00088C  0E01               	movlw	1
   443  00088E  EC43  F006         	call	_lcd_gotoxy
   444                           
   445                           ;tmrlt4.c: 125: lcd_msg("Control PWM");
   446  000892  0E0B               	movlw	low STR_1
   447  000894  6E2D               	movwf	lcd_msg@c,c
   448  000896  0E06               	movlw	high STR_1
   449  000898  6E2E               	movwf	lcd_msg@c+1,c
   450  00089A  EC94  F005         	call	_lcd_msg	;wreg free
   451                           
   452                           ;tmrlt4.c: 126: lcd_gotoxy(1,2);
   453  00089E  0E02               	movlw	2
   454  0008A0  6E2C               	movwf	lcd_gotoxy@y,c
   455  0008A2  0E01               	movlw	1
   456  0008A4  EC43  F006         	call	_lcd_gotoxy
   457                           
   458                           ;tmrlt4.c: 127: lcd_msg("PWM=");
   459  0008A8  0E17               	movlw	low STR_2
   460  0008AA  6E2D               	movwf	lcd_msg@c,c
   461  0008AC  0E06               	movlw	high STR_2
   462  0008AE  6E2E               	movwf	lcd_msg@c+1,c
   463  0008B0  EC94  F005         	call	_lcd_msg	;wreg free
   464                           
   465                           ;tmrlt4.c: 128: sprintf(value,"%3d",val);
   466  0008B4  0E4F               	movlw	low _value
   467  0008B6  6E35               	movwf	sprintf@sp,c
   468  0008B8  0E00               	movlw	high _value
   469  0008BA  6E36               	movwf	sprintf@sp+1,c
   470  0008BC  0E1C               	movlw	low STR_3
   471  0008BE  6E37               	movwf	sprintf@f,c
   472  0008C0  0E06               	movlw	high STR_3
   473  0008C2  6E38               	movwf	sprintf@f+1,c
   474  0008C4  C048  F039         	movff	main@val,?_sprintf+4
   475  0008C8  6A3A               	clrf	?_sprintf+5,c
   476  0008CA  EC11  F003         	call	_sprintf	;wreg free
   477                           
   478                           ;tmrlt4.c: 129: lcd_msg(value);
   479  0008CE  0E4F               	movlw	low _value
   480  0008D0  6E2D               	movwf	lcd_msg@c,c
   481  0008D2  0E00               	movlw	high _value
   482  0008D4  6E2E               	movwf	lcd_msg@c+1,c
   483  0008D6  EC94  F005         	call	_lcd_msg	;wreg free
   484                           
   485                           ;tmrlt4.c: 131: (*(&(*(&PORTC + 0x09))) &=~ (1<<(2)));
   486  0008DA  948B               	bcf	3979,2,c	;volatile
   487                           
   488                           ;tmrlt4.c: 132: (*(&(*(&PORTC + 0x09))) &=~ (1<<(3)));
   489  0008DC  968B               	bcf	3979,3,c	;volatile
   490                           
   491                           ;tmrlt4.c: 133: TMR0ON = 1;
   492  0008DE  8ED5               	bsf	4053,7,c	;volatile
   493  0008E0                     
   494                           ;tmrlt4.c: 135: {
   495                           ;tmrlt4.c: 136: if(!(PORTC & (1<<1))){
   496  0008E0  B282               	btfsc	3970,1,c	;volatile
   497  0008E2  D036               	goto	l71
   498                           
   499                           ;tmrlt4.c: 137: if(Ton >= 255)
   500  0008E4  284C               	incf	_Ton,w,c
   501  0008E6  A4D8               	btfss	status,2,c
   502  0008E8  D017               	goto	l72
   503                           
   504                           ;tmrlt4.c: 138: {
   505                           ;tmrlt4.c: 139: Ton = 0;
   506  0008EA  0E00               	movlw	0
   507  0008EC  6E4C               	movwf	_Ton,c
   508                           
   509                           ;tmrlt4.c: 141: for(int i = 0; i<sizeof(value)/sizeof(char);i++)
   510  0008EE  0E00               	movlw	0
   511  0008F0  6E4A               	movwf	main@i+1,c
   512  0008F2  0E00               	movlw	0
   513  0008F4  6E49               	movwf	main@i,c
   514  0008F6                     l1466:
   515  0008F6  504A               	movf	main@i+1,w,c
   516  0008F8  E110               	bnz	l1478
   517  0008FA  0E08               	movlw	8
   518  0008FC  5C49               	subwf	main@i,w,c
   519  0008FE  B0D8               	btfsc	status,0,c
   520  000900  D00C               	goto	l75
   521                           
   522                           ;tmrlt4.c: 142: value[i]=0;
   523  000902  0E4F               	movlw	low _value
   524  000904  2449               	addwf	main@i,w,c
   525  000906  6ED9               	movwf	fsr2l,c
   526  000908  0E00               	movlw	high _value
   527  00090A  204A               	addwfc	main@i+1,w,c
   528  00090C  6EDA               	movwf	fsr2h,c
   529  00090E  0E00               	movlw	0
   530  000910  6EDF               	movwf	indf2,c
   531  000912  4A49               	infsnz	main@i,f,c
   532  000914  2A4A               	incf	main@i+1,f,c
   533  000916  D7EF               	goto	l1466
   534  000918                     l72:
   535                           
   536                           ;tmrlt4.c: 144: else
   537                           ;tmrlt4.c: 145: {
   538                           ;tmrlt4.c: 146: Ton++;
   539  000918  2A4C               	incf	_Ton,f,c
   540  00091A                     l75:
   541  00091A                     l1478:
   542                           
   543                           ;tmrlt4.c: 147: }
   544                           ;tmrlt4.c: 148: val = Ton;
   545  00091A  C04C  F048         	movff	_Ton,main@val
   546                           
   547                           ;tmrlt4.c: 149: sprintf(value,"%3d",val);
   548  00091E  0E4F               	movlw	low _value
   549  000920  6E35               	movwf	sprintf@sp,c
   550  000922  0E00               	movlw	high _value
   551  000924  6E36               	movwf	sprintf@sp+1,c
   552  000926  0E1C               	movlw	low STR_3
   553  000928  6E37               	movwf	sprintf@f,c
   554  00092A  0E06               	movlw	high STR_3
   555  00092C  6E38               	movwf	sprintf@f+1,c
   556  00092E  C048  F039         	movff	main@val,?_sprintf+4
   557  000932  6A3A               	clrf	?_sprintf+5,c
   558  000934  EC11  F003         	call	_sprintf	;wreg free
   559                           
   560                           ;tmrlt4.c: 150: lcd_gotoxy(6,2);
   561  000938  0E02               	movlw	2
   562  00093A  6E2C               	movwf	lcd_gotoxy@y,c
   563  00093C  0E06               	movlw	6
   564  00093E  EC43  F006         	call	_lcd_gotoxy
   565                           
   566                           ;tmrlt4.c: 151: lcd_msg(value);
   567  000942  0E4F               	movlw	low _value
   568  000944  6E2D               	movwf	lcd_msg@c,c
   569  000946  0E00               	movlw	high _value
   570  000948  6E2E               	movwf	lcd_msg@c+1,c
   571  00094A  EC94  F005         	call	_lcd_msg	;wreg free
   572                           
   573                           ;tmrlt4.c: 152: }
   574  00094E  D7C8               	goto	l70
   575  000950                     l71:
   576                           
   577                           ;tmrlt4.c: 153: else
   578                           ;tmrlt4.c: 154: {
   579                           ;tmrlt4.c: 155: (*(&(*(&PORTC + 0x09))) ^= (1<<(3)));
   580  000950  0E08               	movlw	8
   581  000952  1A8B               	xorwf	3979,f,c	;volatile
   582  000954  D7C5               	goto	l70
   583  000956                     __end_of_main:
   584                           	opt stack 0
   585                           tblptru	equ	0xFF8
   586                           intcon	equ	0xFF2
   587                           intcon2	equ	0xFF1
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           indf2	equ	0xFDF
   591                           fsr2h	equ	0xFDA
   592                           fsr2l	equ	0xFD9
   593                           status	equ	0xFD8
   594                           
   595 ;; *************** function _sprintf *****************
   596 ;; Defined at:
   597 ;;		line 492 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  sp              2   52[COMRAM] PTR unsigned char 
   600 ;;		 -> value(8), 
   601 ;;  f               2   54[COMRAM] PTR const unsigned char 
   602 ;;		 -> STR_4(4), STR_3(4), 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  tmpval          4    0        struct .
   605 ;;  cp              3    0        PTR const unsigned char 
   606 ;;  width           2   68[COMRAM] int 
   607 ;;  val             2   66[COMRAM] unsigned int 
   608 ;;  ap              2   62[COMRAM] PTR void [1]
   609 ;;		 -> ?_sprintf(2), 
   610 ;;  len             2    0        unsigned int 
   611 ;;  c               1   70[COMRAM] char 
   612 ;;  flag            1   65[COMRAM] unsigned char 
   613 ;;  prec            1   64[COMRAM] char 
   614 ;; Return value:  Size  Location     Type
   615 ;;                  2   52[COMRAM] int 
   616 ;; Registers used:
   617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   623 ;;      Params:         6       0       0       0       0       0       0
   624 ;;      Locals:         9       0       0       0       0       0       0
   625 ;;      Temps:          4       0       0       0       0       0       0
   626 ;;      Totals:        19       0       0       0       0       0       0
   627 ;;Total ram usage:       19 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    3
   630 ;; This function calls:
   631 ;;		___lwdiv
   632 ;;		___lwmod
   633 ;;		___wmul
   634 ;;		_isdigit
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text1
   641  000622                     __ptext1:
   642                           	opt stack 0
   643  000622                     _sprintf:
   644                           	opt stack 27
   645                           
   646                           ;doprnt.c: 494: va_list ap;
   647                           ;doprnt.c: 499: signed char c;
   648                           ;doprnt.c: 501: int width;
   649                           ;doprnt.c: 506: signed char prec;
   650                           ;doprnt.c: 508: unsigned char flag;
   651                           ;doprnt.c: 523: union {
   652                           ;doprnt.c: 524: unsigned long vd;
   653                           ;doprnt.c: 525: double integ;
   654                           ;doprnt.c: 526: } tmpval;
   655                           ;doprnt.c: 528: unsigned int val;
   656                           ;doprnt.c: 529: unsigned len;
   657                           ;doprnt.c: 530: const char * cp;
   658                           ;doprnt.c: 533: *ap = __va_start();
   659                           
   660                           ;incstack = 0
   661  000622  0E39               	movlw	low (?_sprintf+4)
   662  000624  6E3F               	movwf	sprintf@ap,c
   663  000626  0E00               	movlw	high (?_sprintf+4)
   664  000628  6E40               	movwf	sprintf@ap+1,c
   665                           
   666                           ;doprnt.c: 536: while(c = *f++) {
   667  00062A  D102               	goto	u620
   668  00062C                     
   669                           ;doprnt.c: 538: if(c != '%')
   670  00062C  0E25               	movlw	37
   671  00062E  1847               	xorwf	sprintf@c,w,c
   672  000630  B4D8               	btfsc	status,2,c
   673  000632  D009               	goto	l161
   674                           
   675                           ;doprnt.c: 540: {
   676                           ;doprnt.c: 541: ((*sp++ = (c)));
   677  000634  C035  FFD9         	movff	sprintf@sp,fsr2l
   678  000638  C036  FFDA         	movff	sprintf@sp+1,fsr2h
   679  00063C  C047  FFDF         	movff	sprintf@c,indf2
   680  000640  4A35               	infsnz	sprintf@sp,f,c
   681  000642  2A36               	incf	sprintf@sp+1,f,c
   682                           
   683                           ;doprnt.c: 542: continue;
   684  000644  D0F5               	goto	u620
   685  000646                     l161:
   686                           
   687                           ;doprnt.c: 543: }
   688                           ;doprnt.c: 546: width = 0;
   689  000646  0E00               	movlw	0
   690  000648  6E46               	movwf	sprintf@width+1,c
   691  00064A  0E00               	movlw	0
   692  00064C  6E45               	movwf	sprintf@width,c
   693                           
   694                           ;doprnt.c: 548: flag = 0;
   695  00064E  0E00               	movlw	0
   696  000650  6E42               	movwf	sprintf@flag,c
   697                           
   698                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   699  000652  C037  FFF6         	movff	sprintf@f,tblptrl
   700  000656  C038  FFF7         	movff	sprintf@f+1,tblptrh
   701  00065A                     	if	0	;tblptru may be non-zero
   702  00065A                     	endif
   703  00065A                     	if	0	;tblptru may be non-zero
   704  00065A                     	endif
   705  00065A  0008               	tblrd		*
   706  00065C  50F5               	movf	tablat,w,c
   707  00065E  EC86  F006         	call	_isdigit
   708  000662  A0D8               	btfss	status,0,c
   709  000664  D032               	goto	l165
   710                           
   711                           ;doprnt.c: 598: width = 0;
   712  000666  0E00               	movlw	0
   713  000668  6E46               	movwf	sprintf@width+1,c
   714  00066A  0E00               	movlw	0
   715  00066C  6E45               	movwf	sprintf@width,c
   716  00066E                     
   717                           ;doprnt.c: 600: width *= 10;
   718  00066E  C045  F029         	movff	sprintf@width,___wmul@multiplier
   719  000672  C046  F02A         	movff	sprintf@width+1,___wmul@multiplier+1
   720  000676  0E00               	movlw	0
   721  000678  6E2C               	movwf	___wmul@multiplicand+1,c
   722  00067A  0E0A               	movlw	10
   723  00067C  6E2B               	movwf	___wmul@multiplicand,c
   724  00067E  EC73  F006         	call	___wmul	;wreg free
   725  000682  C029  F045         	movff	?___wmul,sprintf@width
   726  000686  C02A  F046         	movff	?___wmul+1,sprintf@width+1
   727                           
   728                           ;doprnt.c: 601: width += *f++ - '0';
   729  00068A  0ED0               	movlw	208
   730  00068C  6E3B               	movwf	??_sprintf& (0+255),c
   731  00068E  0EFF               	movlw	255
   732  000690  6E3C               	movwf	(??_sprintf+1)& (0+255),c
   733  000692  C037  FFF6         	movff	sprintf@f,tblptrl
   734  000696  C038  FFF7         	movff	sprintf@f+1,tblptrh
   735  00069A                     	if	0	;tblptru may be non-zero
   736  00069A                     	endif
   737  00069A                     	if	0	;tblptru may be non-zero
   738  00069A                     	endif
   739  00069A  0008               	tblrd		*
   740  00069C  50F5               	movf	tablat,w,c
   741  00069E  6E3D               	movwf	(??_sprintf+2)& (0+255),c
   742  0006A0  6A3E               	clrf	(??_sprintf+3)& (0+255),c
   743  0006A2  503B               	movf	??_sprintf,w,c
   744  0006A4  263D               	addwf	??_sprintf+2,f,c
   745  0006A6  503C               	movf	??_sprintf+1,w,c
   746  0006A8  223E               	addwfc	??_sprintf+3,f,c
   747  0006AA  503D               	movf	??_sprintf+2,w,c
   748  0006AC  2645               	addwf	sprintf@width,f,c
   749  0006AE  503E               	movf	??_sprintf+3,w,c
   750  0006B0  2246               	addwfc	sprintf@width+1,f,c
   751  0006B2  4A37               	infsnz	sprintf@f,f,c
   752  0006B4  2A38               	incf	sprintf@f+1,f,c
   753                           
   754                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   755  0006B6  C037  FFF6         	movff	sprintf@f,tblptrl
   756  0006BA  C038  FFF7         	movff	sprintf@f+1,tblptrh
   757  0006BE                     	if	0	;tblptru may be non-zero
   758  0006BE                     	endif
   759  0006BE                     	if	0	;tblptru may be non-zero
   760  0006BE                     	endif
   761  0006BE  0008               	tblrd		*
   762  0006C0  50F5               	movf	tablat,w,c
   763  0006C2  EC86  F006         	call	_isdigit
   764  0006C6  B0D8               	btfsc	status,0,c
   765  0006C8  D7D2               	goto	l163
   766  0006CA                     l165:
   767  0006CA  C037  FFF6         	movff	sprintf@f,tblptrl
   768  0006CE  C038  FFF7         	movff	sprintf@f+1,tblptrh
   769  0006D2  4A37               	infsnz	sprintf@f,f,c
   770  0006D4  2A38               	incf	sprintf@f+1,f,c
   771  0006D6                     	if	0	;tblptru may be non-zero
   772  0006D6                     	endif
   773  0006D6                     	if	0	;tblptru may be non-zero
   774  0006D6                     	endif
   775  0006D6  0008               	tblrd		*
   776  0006D8  CFF5 F047          	movff	tablat,sprintf@c
   777  0006DC  5047               	movf	sprintf@c,w,c
   778                           
   779                           ; Switch size 1, requested type "space"
   780                           ; Number of cases is 3, Range of values is 0 to 105
   781                           ; switch strategies available:
   782                           ; Name         Instructions Cycles
   783                           ; simple_byte           10     6 (average)
   784                           ;	Chosen strategy is simple_byte
   785  0006DE  0A00               	xorlw	0	; case 0
   786  0006E0  B4D8               	btfsc	status,2,c
   787  0006E2  D0B2               	goto	u630
   788  0006E4  0A64               	xorlw	100	; case 100
   789  0006E6  B4D8               	btfsc	status,2,c
   790  0006E8  D003               	goto	l170
   791  0006EA  0A0D               	xorlw	13	; case 105
   792  0006EC  A4D8               	btfss	status,2,c
   793  0006EE  D0A0               	goto	u620
   794  0006F0                     l170:
   795                           
   796                           ;doprnt.c: 1253: {
   797                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   798  0006F0  C03F  FFD9         	movff	sprintf@ap,fsr2l
   799  0006F4  C040  FFDA         	movff	sprintf@ap+1,fsr2h
   800  0006F8  CFDE F043          	movff	postinc2,sprintf@val
   801  0006FC  CFDD F044          	movff	postdec2,sprintf@val+1
   802  000700  0E02               	movlw	2
   803  000702  263F               	addwf	sprintf@ap,f,c
   804  000704  0E00               	movlw	0
   805  000706  2240               	addwfc	sprintf@ap+1,f,c
   806                           
   807                           ;doprnt.c: 1261: if((int)val < 0) {
   808  000708  AE44               	btfss	sprintf@val+1,7,c
   809  00070A  D006               	goto	l172
   810                           
   811                           ;doprnt.c: 1262: flag |= 0x03;
   812  00070C  0E03               	movlw	3
   813  00070E  1242               	iorwf	sprintf@flag,f,c
   814                           
   815                           ;doprnt.c: 1263: val = -val;
   816  000710  6C43               	negf	sprintf@val,c
   817  000712  1E44               	comf	sprintf@val+1,f,c
   818  000714  B0D8               	btfsc	status,0,c
   819  000716  2A44               	incf	sprintf@val+1,f,c
   820  000718                     l172:
   821                           
   822                           ;doprnt.c: 1264: }
   823                           ;doprnt.c: 1266: }
   824                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   825  000718  0E01               	movlw	1
   826  00071A  6E47               	movwf	sprintf@c,c
   827  00071C                     l1350:
   828  00071C  0E05               	movlw	5
   829  00071E  1847               	xorwf	sprintf@c,w,c
   830  000720  B4D8               	btfsc	status,2,c
   831  000722  D012               	goto	u550
   832                           
   833                           ;doprnt.c: 1306: if(val < dpowers[c])
   834  000724  5047               	movf	sprintf@c,w,c
   835  000726  0D02               	mullw	2
   836  000728  0E01               	movlw	low _dpowers
   837  00072A  24F3               	addwf	prodl,w,c
   838  00072C  6EF6               	movwf	tblptrl,c
   839  00072E  0E06               	movlw	high _dpowers
   840  000730  20F4               	addwfc	prodh,w,c
   841  000732  6EF7               	movwf	tblptrh,c
   842  000734                     	if	0	;There are less than 3 active tblptr bytes
   843  000734                     	endif
   844  000734  0009               	tblrd		*+
   845  000736  50F5               	movf	tablat,w,c
   846  000738  5C43               	subwf	sprintf@val,w,c
   847  00073A  0009               	tblrd		*+
   848  00073C  50F5               	movf	tablat,w,c
   849  00073E  5844               	subwfb	sprintf@val+1,w,c
   850  000740  A0D8               	btfss	status,0,c
   851  000742  D002               	goto	u550
   852                           
   853                           ;doprnt.c: 1307: break;
   854  000744  2A47               	incf	sprintf@c,f,c
   855  000746  D7EA               	goto	l1350
   856  000748                     u550:
   857                           
   858                           ;doprnt.c: 1345: if(width && flag & 0x03)
   859  000748  5045               	movf	sprintf@width,w,c
   860  00074A  1046               	iorwf	sprintf@width+1,w,c
   861  00074C  B4D8               	btfsc	status,2,c
   862  00074E  D009               	goto	l176
   863  000750  C042  F03B         	movff	sprintf@flag,??_sprintf
   864  000754  0E03               	movlw	3
   865  000756  163B               	andwf	??_sprintf,f,c
   866  000758  B4D8               	btfsc	status,2,c
   867  00075A  D003               	goto	l176
   868                           
   869                           ;doprnt.c: 1346: width--;
   870  00075C  0645               	decf	sprintf@width,f,c
   871  00075E  A0D8               	btfss	status,0,c
   872  000760  0646               	decf	sprintf@width+1,f,c
   873  000762                     l176:
   874                           
   875                           ;doprnt.c: 1381: if(width > c)
   876  000762  0E80               	movlw	128
   877  000764  BE47               	btfsc	sprintf@c,7,c
   878  000766  0E7F               	movlw	127
   879  000768  6E3B               	movwf	??_sprintf& (0+255),c
   880  00076A  5045               	movf	sprintf@width,w,c
   881  00076C  5C47               	subwf	sprintf@c,w,c
   882  00076E  5046               	movf	sprintf@width+1,w,c
   883  000770  0A80               	xorlw	128
   884  000772  583B               	subwfb	??_sprintf& (0+255),w,c
   885  000774  B0D8               	btfsc	status,0,c
   886  000776  D007               	goto	l177
   887                           
   888                           ;doprnt.c: 1382: width -= c;
   889  000778  5047               	movf	sprintf@c,w,c
   890  00077A  5E45               	subwf	sprintf@width,f,c
   891  00077C  0E00               	movlw	0
   892  00077E  BE47               	btfsc	sprintf@c,7,c
   893  000780  0EFF               	movlw	255
   894  000782  5A46               	subwfb	sprintf@width+1,f,c
   895  000784  D004               	goto	l178
   896  000786                     l177:
   897                           
   898                           ;doprnt.c: 1383: else
   899                           ;doprnt.c: 1384: width = 0;
   900  000786  0E00               	movlw	0
   901  000788  6E46               	movwf	sprintf@width+1,c
   902  00078A  0E00               	movlw	0
   903  00078C  6E45               	movwf	sprintf@width,c
   904  00078E                     l178:
   905                           
   906                           ;doprnt.c: 1422: {
   907                           ;doprnt.c: 1424: if(width
   908                           ;doprnt.c: 1428: )
   909  00078E  5045               	movf	sprintf@width,w,c
   910  000790  1046               	iorwf	sprintf@width+1,w,c
   911  000792  B4D8               	btfsc	status,2,c
   912  000794  D00F               	goto	u600
   913  000796                     u590:
   914                           
   915                           ;doprnt.c: 1430: ((*sp++ = (' ')));
   916                           
   917                           ;doprnt.c: 1429: do
   918  000796  C035  FFD9         	movff	sprintf@sp,fsr2l
   919  00079A  C036  FFDA         	movff	sprintf@sp+1,fsr2h
   920  00079E  0E20               	movlw	32
   921  0007A0  6EDF               	movwf	indf2,c
   922  0007A2  4A35               	infsnz	sprintf@sp,f,c
   923  0007A4  2A36               	incf	sprintf@sp+1,f,c
   924                           
   925                           ;doprnt.c: 1431: while(--width);
   926  0007A6  0645               	decf	sprintf@width,f,c
   927  0007A8  A0D8               	btfss	status,0,c
   928  0007AA  0646               	decf	sprintf@width+1,f,c
   929  0007AC  5045               	movf	sprintf@width,w,c
   930  0007AE  1046               	iorwf	sprintf@width+1,w,c
   931  0007B0  A4D8               	btfss	status,2,c
   932  0007B2  D7F1               	goto	u590
   933  0007B4                     u600:
   934                           
   935                           ;doprnt.c: 1438: if(flag & 0x03)
   936  0007B4  C042  F03B         	movff	sprintf@flag,??_sprintf
   937  0007B8  0E03               	movlw	3
   938  0007BA  163B               	andwf	??_sprintf,f,c
   939  0007BC  B4D8               	btfsc	status,2,c
   940  0007BE  D008               	goto	l182
   941                           
   942                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   943  0007C0  C035  FFD9         	movff	sprintf@sp,fsr2l
   944  0007C4  C036  FFDA         	movff	sprintf@sp+1,fsr2h
   945  0007C8  0E2D               	movlw	45
   946  0007CA  6EDF               	movwf	indf2,c
   947  0007CC  4A35               	infsnz	sprintf@sp,f,c
   948  0007CE  2A36               	incf	sprintf@sp+1,f,c
   949  0007D0                     l182:
   950                           
   951                           ;doprnt.c: 1469: }
   952                           ;doprnt.c: 1472: prec = c;
   953  0007D0  C047  F041         	movff	sprintf@c,sprintf@prec
   954                           
   955                           ;doprnt.c: 1474: while(prec--) {
   956  0007D4  D029               	goto	l183
   957  0007D6                     
   958                           ;doprnt.c: 1478: {
   959                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   960  0007D6  5041               	movf	sprintf@prec,w,c
   961  0007D8  0D02               	mullw	2
   962  0007DA  0E01               	movlw	low _dpowers
   963  0007DC  24F3               	addwf	prodl,w,c
   964  0007DE  6EF6               	movwf	tblptrl,c
   965  0007E0  0E06               	movlw	high _dpowers
   966  0007E2  20F4               	addwfc	prodh,w,c
   967  0007E4  6EF7               	movwf	tblptrh,c
   968  0007E6                     	if	0	;There are less than 3 active tblptr bytes
   969  0007E6                     	endif
   970  0007E6  0009               	tblrd		*+
   971  0007E8  CFF5 F02B          	movff	tablat,___lwdiv@divisor
   972  0007EC  000A               	tblrd		*-
   973  0007EE  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
   974  0007F2  C043  F029         	movff	sprintf@val,___lwdiv@dividend
   975  0007F6  C044  F02A         	movff	sprintf@val+1,___lwdiv@dividend+1
   976  0007FA  EC6B  F005         	call	___lwdiv	;wreg free
   977  0007FE  C029  F030         	movff	?___lwdiv,___lwmod@dividend
   978  000802  C02A  F031         	movff	?___lwdiv+1,___lwmod@dividend+1
   979  000806  0E00               	movlw	0
   980  000808  6E33               	movwf	___lwmod@divisor+1,c
   981  00080A  0E0A               	movlw	10
   982  00080C  6E32               	movwf	___lwmod@divisor,c
   983  00080E  EC05  F006         	call	___lwmod	;wreg free
   984  000812  5030               	movf	?___lwmod,w,c
   985  000814  0F30               	addlw	48
   986  000816  6E47               	movwf	sprintf@c,c
   987                           
   988                           ;doprnt.c: 1523: }
   989                           ;doprnt.c: 1524: ((*sp++ = (c)));
   990  000818  C035  FFD9         	movff	sprintf@sp,fsr2l
   991  00081C  C036  FFDA         	movff	sprintf@sp+1,fsr2h
   992  000820  C047  FFDF         	movff	sprintf@c,indf2
   993  000824  4A35               	infsnz	sprintf@sp,f,c
   994  000826  2A36               	incf	sprintf@sp+1,f,c
   995  000828                     l183:
   996  000828  0641               	decf	sprintf@prec,f,c
   997  00082A  2841               	incf	sprintf@prec,w,c
   998  00082C  A4D8               	btfss	status,2,c
   999  00082E  D7D3               	goto	l184
  1000  000830                     u620:
  1001  000830  C037  FFF6         	movff	sprintf@f,tblptrl
  1002  000834  C038  FFF7         	movff	sprintf@f+1,tblptrh
  1003  000838  4A37               	infsnz	sprintf@f,f,c
  1004  00083A  2A38               	incf	sprintf@f+1,f,c
  1005  00083C                     	if	0	;tblptru may be non-zero
  1006  00083C                     	endif
  1007  00083C                     	if	0	;tblptru may be non-zero
  1008  00083C                     	endif
  1009  00083C  0008               	tblrd		*
  1010  00083E  CFF5 F047          	movff	tablat,sprintf@c
  1011  000842  5047               	movf	sprintf@c,w,c
  1012  000844  A4D8               	btfss	status,2,c
  1013  000846  D6F2               	goto	l160
  1014  000848                     u630:
  1015                           
  1016                           ;doprnt.c: 1538: *sp = 0;
  1017                           
  1018                           ;doprnt.c: 1525: }
  1019                           ;doprnt.c: 1533: }
  1020                           ;doprnt.c: 1535: alldone:
  1021  000848  C035  FFD9         	movff	sprintf@sp,fsr2l
  1022  00084C  C036  FFDA         	movff	sprintf@sp+1,fsr2h
  1023  000850  0E00               	movlw	0
  1024  000852  6EDF               	movwf	indf2,c
  1025  000854  0012               	return	
  1026  000856                     __end_of_sprintf:
  1027                           	opt stack 0
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           prodh	equ	0xFF4
  1033                           prodl	equ	0xFF3
  1034                           intcon	equ	0xFF2
  1035                           intcon2	equ	0xFF1
  1036                           postinc0	equ	0xFEE
  1037                           wreg	equ	0xFE8
  1038                           indf2	equ	0xFDF
  1039                           postinc2	equ	0xFDE
  1040                           postdec2	equ	0xFDD
  1041                           fsr2h	equ	0xFDA
  1042                           fsr2l	equ	0xFD9
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _isdigit *****************
  1046 ;; Defined at:
  1047 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/isdigit.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  c               1    wreg     unsigned char 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  c               1   42[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;		None               void
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1061 ;;      Params:         0       0       0       0       0       0       0
  1062 ;;      Locals:         2       0       0       0       0       0       0
  1063 ;;      Temps:          1       0       0       0       0       0       0
  1064 ;;      Totals:         3       0       0       0       0       0       0
  1065 ;;Total ram usage:        3 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    2
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_sprintf
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text2
  1076  000D0C                     __ptext2:
  1077                           	opt stack 0
  1078  000D0C                     _isdigit:
  1079                           	opt stack 27
  1080                           
  1081                           ;incstack = 0
  1082                           ;isdigit@c stored from wreg
  1083  000D0C  6E2B               	movwf	isdigit@c,c
  1084  000D0E  0E00               	movlw	0
  1085  000D10  6E2A               	movwf	_isdigit$511,c
  1086  000D12  0E3A               	movlw	58
  1087  000D14  602B               	cpfslt	isdigit@c,c
  1088  000D16  D005               	goto	l517
  1089  000D18  0E2F               	movlw	47
  1090  000D1A  642B               	cpfsgt	isdigit@c,c
  1091  000D1C  D002               	goto	l517
  1092  000D1E  0E01               	movlw	1
  1093  000D20  6E2A               	movwf	_isdigit$511,c
  1094  000D22                     l517:
  1095  000D22  C02A  F029         	movff	_isdigit$511,??_isdigit
  1096  000D26  3029               	rrcf	??_isdigit,w,c
  1097  000D28  0012               	return	
  1098  000D2A                     __end_of_isdigit:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           prodh	equ	0xFF4
  1105                           prodl	equ	0xFF3
  1106                           intcon	equ	0xFF2
  1107                           intcon2	equ	0xFF1
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           indf2	equ	0xFDF
  1111                           postinc2	equ	0xFDE
  1112                           postdec2	equ	0xFDD
  1113                           fsr2h	equ	0xFDA
  1114                           fsr2l	equ	0xFD9
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function ___wmul *****************
  1118 ;; Defined at:
  1119 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  multiplier      2   40[COMRAM] unsigned int 
  1122 ;;  multiplicand    2   42[COMRAM] unsigned int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  product         2   44[COMRAM] unsigned int 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  2   40[COMRAM] unsigned int 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, prodl, prodh
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1134 ;;      Params:         4       0       0       0       0       0       0
  1135 ;;      Locals:         2       0       0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0
  1137 ;;      Totals:         6       0       0       0       0       0       0
  1138 ;;Total ram usage:        6 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    2
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_sprintf
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text3
  1149  000CE6                     __ptext3:
  1150                           	opt stack 0
  1151  000CE6                     ___wmul:
  1152                           	opt stack 27
  1153                           
  1154                           ;incstack = 0
  1155  000CE6  5029               	movf	___wmul@multiplier,w,c
  1156  000CE8  022B               	mulwf	___wmul@multiplicand,c
  1157  000CEA  CFF3 F02D          	movff	prodl,___wmul@product
  1158  000CEE  CFF4 F02E          	movff	prodh,___wmul@product+1
  1159  000CF2  5029               	movf	___wmul@multiplier,w,c
  1160  000CF4  022C               	mulwf	___wmul@multiplicand+1,c
  1161  000CF6  50F3               	movf	prodl,w,c
  1162  000CF8  262E               	addwf	___wmul@product+1,f,c
  1163  000CFA  502A               	movf	___wmul@multiplier+1,w,c
  1164  000CFC  022B               	mulwf	___wmul@multiplicand,c
  1165  000CFE  50F3               	movf	prodl,w,c
  1166  000D00  262E               	addwf	___wmul@product+1,f,c
  1167  000D02  C02D  F029         	movff	___wmul@product,?___wmul
  1168  000D06  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  1169  000D0A  0012               	return	
  1170  000D0C                     __end_of___wmul:
  1171                           	opt stack 0
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           prodh	equ	0xFF4
  1177                           prodl	equ	0xFF3
  1178                           intcon	equ	0xFF2
  1179                           intcon2	equ	0xFF1
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           fsr2h	equ	0xFDA
  1186                           fsr2l	equ	0xFD9
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function ___lwmod *****************
  1190 ;; Defined at:
  1191 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lwmod.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  dividend        2   47[COMRAM] unsigned int 
  1194 ;;  divisor         2   49[COMRAM] unsigned int 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  counter         1   51[COMRAM] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  2   47[COMRAM] unsigned int 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1206 ;;      Params:         4       0       0       0       0       0       0
  1207 ;;      Locals:         1       0       0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0
  1209 ;;      Totals:         5       0       0       0       0       0       0
  1210 ;;Total ram usage:        5 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    2
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_sprintf
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text4
  1221  000C0A                     __ptext4:
  1222                           	opt stack 0
  1223  000C0A                     ___lwmod:
  1224                           	opt stack 27
  1225                           
  1226                           ;incstack = 0
  1227  000C0A  5032               	movf	___lwmod@divisor,w,c
  1228  000C0C  1033               	iorwf	___lwmod@divisor+1,w,c
  1229  000C0E  B4D8               	btfsc	status,2,c
  1230  000C10  D018               	goto	l611
  1231  000C12  0E01               	movlw	1
  1232  000C14  6E34               	movwf	___lwmod@counter,c
  1233  000C16  D004               	goto	l606
  1234  000C18  90D8               	bcf	status,0,c
  1235  000C1A  3632               	rlcf	___lwmod@divisor,f,c
  1236  000C1C  3633               	rlcf	___lwmod@divisor+1,f,c
  1237  000C1E  2A34               	incf	___lwmod@counter,f,c
  1238  000C20                     l606:
  1239  000C20  AE33               	btfss	___lwmod@divisor+1,7,c
  1240  000C22  D7FA               	goto	l607
  1241  000C24                     u440:
  1242  000C24  5032               	movf	___lwmod@divisor,w,c
  1243  000C26  5C30               	subwf	___lwmod@dividend,w,c
  1244  000C28  5033               	movf	___lwmod@divisor+1,w,c
  1245  000C2A  5831               	subwfb	___lwmod@dividend+1,w,c
  1246  000C2C  A0D8               	btfss	status,0,c
  1247  000C2E  D004               	goto	l610
  1248  000C30  5032               	movf	___lwmod@divisor,w,c
  1249  000C32  5E30               	subwf	___lwmod@dividend,f,c
  1250  000C34  5033               	movf	___lwmod@divisor+1,w,c
  1251  000C36  5A31               	subwfb	___lwmod@dividend+1,f,c
  1252  000C38                     l610:
  1253  000C38  90D8               	bcf	status,0,c
  1254  000C3A  3233               	rrcf	___lwmod@divisor+1,f,c
  1255  000C3C  3232               	rrcf	___lwmod@divisor,f,c
  1256  000C3E  2E34               	decfsz	___lwmod@counter,f,c
  1257  000C40  D7F1               	goto	u440
  1258  000C42                     l611:
  1259  000C42  C030  F030         	movff	___lwmod@dividend,?___lwmod
  1260  000C46  C031  F031         	movff	___lwmod@dividend+1,?___lwmod+1
  1261  000C4A  0012               	return		;funcret
  1262  000C4C                     __end_of___lwmod:
  1263                           	opt stack 0
  1264                           tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           prodh	equ	0xFF4
  1269                           prodl	equ	0xFF3
  1270                           intcon	equ	0xFF2
  1271                           intcon2	equ	0xFF1
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           indf2	equ	0xFDF
  1275                           postinc2	equ	0xFDE
  1276                           postdec2	equ	0xFDD
  1277                           fsr2h	equ	0xFDA
  1278                           fsr2l	equ	0xFD9
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function ___lwdiv *****************
  1282 ;; Defined at:
  1283 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lwdiv.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dividend        2   40[COMRAM] unsigned int 
  1286 ;;  divisor         2   42[COMRAM] unsigned int 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  quotient        2   44[COMRAM] unsigned int 
  1289 ;;  counter         1   46[COMRAM] unsigned char 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2   40[COMRAM] unsigned int 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1299 ;;      Params:         4       0       0       0       0       0       0
  1300 ;;      Locals:         3       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0
  1302 ;;      Totals:         7       0       0       0       0       0       0
  1303 ;;Total ram usage:        7 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    2
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_sprintf
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text5
  1314  000AD6                     __ptext5:
  1315                           	opt stack 0
  1316  000AD6                     ___lwdiv:
  1317                           	opt stack 27
  1318                           
  1319                           ;incstack = 0
  1320  000AD6  0E00               	movlw	0
  1321  000AD8  6E2E               	movwf	___lwdiv@quotient+1,c
  1322  000ADA  0E00               	movlw	0
  1323  000ADC  6E2D               	movwf	___lwdiv@quotient,c
  1324  000ADE  502B               	movf	___lwdiv@divisor,w,c
  1325  000AE0  102C               	iorwf	___lwdiv@divisor+1,w,c
  1326  000AE2  B4D8               	btfsc	status,2,c
  1327  000AE4  D01C               	goto	l601
  1328  000AE6  0E01               	movlw	1
  1329  000AE8  6E2F               	movwf	___lwdiv@counter,c
  1330  000AEA  D004               	goto	l596
  1331  000AEC  90D8               	bcf	status,0,c
  1332  000AEE  362B               	rlcf	___lwdiv@divisor,f,c
  1333  000AF0  362C               	rlcf	___lwdiv@divisor+1,f,c
  1334  000AF2  2A2F               	incf	___lwdiv@counter,f,c
  1335  000AF4                     l596:
  1336  000AF4  AE2C               	btfss	___lwdiv@divisor+1,7,c
  1337  000AF6  D7FA               	goto	l597
  1338  000AF8                     u410:
  1339  000AF8  90D8               	bcf	status,0,c
  1340  000AFA  362D               	rlcf	___lwdiv@quotient,f,c
  1341  000AFC  362E               	rlcf	___lwdiv@quotient+1,f,c
  1342  000AFE  502B               	movf	___lwdiv@divisor,w,c
  1343  000B00  5C29               	subwf	___lwdiv@dividend,w,c
  1344  000B02  502C               	movf	___lwdiv@divisor+1,w,c
  1345  000B04  582A               	subwfb	___lwdiv@dividend+1,w,c
  1346  000B06  A0D8               	btfss	status,0,c
  1347  000B08  D005               	goto	l600
  1348  000B0A  502B               	movf	___lwdiv@divisor,w,c
  1349  000B0C  5E29               	subwf	___lwdiv@dividend,f,c
  1350  000B0E  502C               	movf	___lwdiv@divisor+1,w,c
  1351  000B10  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  1352  000B12  802D               	bsf	___lwdiv@quotient,0,c
  1353  000B14                     l600:
  1354  000B14  90D8               	bcf	status,0,c
  1355  000B16  322C               	rrcf	___lwdiv@divisor+1,f,c
  1356  000B18  322B               	rrcf	___lwdiv@divisor,f,c
  1357  000B1A  2E2F               	decfsz	___lwdiv@counter,f,c
  1358  000B1C  D7ED               	goto	u410
  1359  000B1E                     l601:
  1360  000B1E  C02D  F029         	movff	___lwdiv@quotient,?___lwdiv
  1361  000B22  C02E  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1362  000B26  0012               	return		;funcret
  1363  000B28                     __end_of___lwdiv:
  1364                           	opt stack 0
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           prodh	equ	0xFF4
  1370                           prodl	equ	0xFF3
  1371                           intcon	equ	0xFF2
  1372                           intcon2	equ	0xFF1
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           indf2	equ	0xFDF
  1376                           postinc2	equ	0xFDE
  1377                           postdec2	equ	0xFDD
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _lcd_msg *****************
  1383 ;; Defined at:
  1384 ;;		line 99 in file "../MyLibs/lcd4a.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  c               2   44[COMRAM] PTR unsigned char 
  1387 ;;		 -> value(8), STR_2(5), STR_1(12), 
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1399 ;;      Params:         2       0       0       0       0       0       0
  1400 ;;      Locals:         0       0       0       0       0       0       0
  1401 ;;      Temps:          0       0       0       0       0       0       0
  1402 ;;      Totals:         2       0       0       0       0       0       0
  1403 ;;Total ram usage:        2 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    5
  1406 ;; This function calls:
  1407 ;;		_lcd_putc
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text6
  1414  000B28                     __ptext6:
  1415                           	opt stack 0
  1416  000B28                     _lcd_msg:
  1417                           	opt stack 25
  1418                           
  1419                           ;lcd4a.c: 101: while(*c != 0)
  1420                           
  1421                           ;incstack = 0
  1422  000B28  D014               	goto	l115
  1423  000B2A                     
  1424                           ;lcd4a.c: 102: {
  1425                           ;lcd4a.c: 103: lcd_putc(*c++);
  1426  000B2A  C02D  FFF6         	movff	lcd_msg@c,tblptrl
  1427  000B2E  C02E  FFF7         	movff	lcd_msg@c+1,tblptrh
  1428  000B32  6AF8               	clrf	tblptru,c
  1429  000B34  0E05               	movlw	(high __ramtop+-1)
  1430  000B36  64F7               	cpfsgt	tblptrh,c
  1431  000B38  D003               	bra	u467
  1432  000B3A  0008               	tblrd		*
  1433  000B3C  50F5               	movf	tablat,w,c
  1434  000B3E  D005               	bra	u460
  1435  000B40                     u467:
  1436  000B40  CFF6 FFE9          	movff	tblptrl,fsr0l
  1437  000B44  CFF7 FFEA          	movff	tblptrh,fsr0h
  1438  000B48  50EF               	movf	indf0,w,c
  1439  000B4A                     u460:
  1440  000B4A  EC26  F006         	call	_lcd_putc
  1441  000B4E  4A2D               	infsnz	lcd_msg@c,f,c
  1442  000B50  2A2E               	incf	lcd_msg@c+1,f,c
  1443  000B52                     l115:
  1444  000B52  C02D  FFF6         	movff	lcd_msg@c,tblptrl
  1445  000B56  C02E  FFF7         	movff	lcd_msg@c+1,tblptrh
  1446  000B5A  6AF8               	clrf	tblptru,c
  1447  000B5C  0E05               	movlw	(high __ramtop+-1)
  1448  000B5E  64F7               	cpfsgt	tblptrh,c
  1449  000B60  D003               	bra	u477
  1450  000B62  0008               	tblrd		*
  1451  000B64  50F5               	movf	tablat,w,c
  1452  000B66  D005               	bra	u470
  1453  000B68                     u477:
  1454  000B68  CFF6 FFE9          	movff	tblptrl,fsr0l
  1455  000B6C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1456  000B70  50EF               	movf	indf0,w,c
  1457  000B72                     u470:
  1458  000B72  0900               	iorlw	0
  1459  000B74  B4D8               	btfsc	status,2,c
  1460  000B76  0012               	return	
  1461  000B78  D7D8               	goto	l116
  1462  000B7A                     __end_of_lcd_msg:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           prodh	equ	0xFF4
  1469                           prodl	equ	0xFF3
  1470                           intcon	equ	0xFF2
  1471                           intcon2	equ	0xFF1
  1472                           indf0	equ	0xFEF
  1473                           postinc0	equ	0xFEE
  1474                           fsr0h	equ	0xFEA
  1475                           fsr0l	equ	0xFE9
  1476                           wreg	equ	0xFE8
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           postdec2	equ	0xFDD
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _lcd_putc *****************
  1485 ;; Defined at:
  1486 ;;		line 64 in file "../MyLibs/lcd4a.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  c               1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  c               1   43[COMRAM] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1500 ;;      Params:         0       0       0       0       0       0       0
  1501 ;;      Locals:         1       0       0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0
  1503 ;;      Totals:         1       0       0       0       0       0       0
  1504 ;;Total ram usage:        1 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    4
  1507 ;; This function calls:
  1508 ;;		_lcd_cmd
  1509 ;;		_lcd_dwr
  1510 ;; This function is called by:
  1511 ;;		_lcd_msg
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text7
  1516  000C4C                     __ptext7:
  1517                           	opt stack 0
  1518  000C4C                     _lcd_putc:
  1519                           	opt stack 25
  1520                           
  1521                           ;incstack = 0
  1522                           ;lcd_putc@c stored from wreg
  1523  000C4C  6E2C               	movwf	lcd_putc@c,c
  1524                           
  1525                           ;lcd4a.c: 66: switch(c)
  1526  000C4E  D010               	goto	l103
  1527  000C50                     
  1528                           ;lcd4a.c: 69: lcd_cmd(0x01);
  1529  000C50  0E01               	movlw	1
  1530  000C52  ECBD  F005         	call	_lcd_cmd
  1531                           
  1532                           ;lcd4a.c: 70: break;
  1533  000C56  0012               	return	
  1534  000C58                     
  1535                           ;lcd4a.c: 72: lcd_cmd(2);
  1536  000C58  0E02               	movlw	2
  1537  000C5A  ECBD  F005         	call	_lcd_cmd
  1538                           
  1539                           ;lcd4a.c: 73: break;
  1540  000C5E  0012               	return	
  1541  000C60                     
  1542                           ;lcd4a.c: 75: lcd_cmd(0x10);
  1543  000C60  0E10               	movlw	16
  1544  000C62  ECBD  F005         	call	_lcd_cmd
  1545                           
  1546                           ;lcd4a.c: 76: break;
  1547  000C66  0012               	return	
  1548  000C68                     
  1549                           ;lcd4a.c: 78: lcd_dwr(c);
  1550  000C68  502C               	movf	lcd_putc@c,w,c
  1551  000C6A  ECE2  F005         	call	_lcd_dwr
  1552                           
  1553                           ;lcd4a.c: 80: }
  1554                           
  1555                           ;lcd4a.c: 79: break;
  1556  000C6E  0012               	return	
  1557  000C70                     l103:
  1558  000C70  502C               	movf	lcd_putc@c,w,c
  1559                           
  1560                           ; Switch size 1, requested type "space"
  1561                           ; Number of cases is 3, Range of values is 8 to 12
  1562                           ; switch strategies available:
  1563                           ; Name         Instructions Cycles
  1564                           ; simple_byte           10     6 (average)
  1565                           ;	Chosen strategy is simple_byte
  1566  000C72  0A08               	xorlw	8	; case 8
  1567  000C74  B4D8               	btfsc	status,2,c
  1568  000C76  D7F4               	goto	l107
  1569  000C78  0A02               	xorlw	2	; case 10
  1570  000C7A  B4D8               	btfsc	status,2,c
  1571  000C7C  D7ED               	goto	l106
  1572  000C7E  0A06               	xorlw	6	; case 12
  1573  000C80  B4D8               	btfsc	status,2,c
  1574  000C82  D7E6               	goto	l104
  1575  000C84  D7F1               	goto	l108
  1576  000C86                     __end_of_lcd_putc:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           prodh	equ	0xFF4
  1583                           prodl	equ	0xFF3
  1584                           intcon	equ	0xFF2
  1585                           intcon2	equ	0xFF1
  1586                           indf0	equ	0xFEF
  1587                           postinc0	equ	0xFEE
  1588                           fsr0h	equ	0xFEA
  1589                           fsr0l	equ	0xFE9
  1590                           wreg	equ	0xFE8
  1591                           indf2	equ	0xFDF
  1592                           postinc2	equ	0xFDE
  1593                           postdec2	equ	0xFDD
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _lcd_dwr *****************
  1599 ;; Defined at:
  1600 ;;		line 84 in file "../MyLibs/lcd4a.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  x               1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  x               1   42[COMRAM] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1614 ;;      Params:         0       0       0       0       0       0       0
  1615 ;;      Locals:         1       0       0       0       0       0       0
  1616 ;;      Temps:          1       0       0       0       0       0       0
  1617 ;;      Totals:         2       0       0       0       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    3
  1621 ;; This function calls:
  1622 ;;		_lcd_lat
  1623 ;;		_manda
  1624 ;; This function is called by:
  1625 ;;		_lcd_putc
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text8
  1630  000BC4                     __ptext8:
  1631                           	opt stack 0
  1632  000BC4                     _lcd_dwr:
  1633                           	opt stack 25
  1634                           
  1635                           ;incstack = 0
  1636                           ;lcd_dwr@x stored from wreg
  1637  000BC4  6E2B               	movwf	lcd_dwr@x,c
  1638                           
  1639                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  1640  000BC6  8A8C               	bsf	3980,5,c	;volatile
  1641                           
  1642                           ;lcd4a.c: 87: lcd &= 0x0F;
  1643  000BC8  0E0F               	movlw	15
  1644  000BCA  164B               	andwf	_lcd,f,c
  1645                           
  1646                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  1647  000BCC  502B               	movf	lcd_dwr@x,w,c
  1648  000BCE  0BF0               	andlw	240
  1649  000BD0  124B               	iorwf	_lcd,f,c
  1650                           
  1651                           ;lcd4a.c: 89: manda(lcd);
  1652  000BD2  504B               	movf	_lcd,w,c
  1653  000BD4  EC5D  F006         	call	_manda
  1654                           
  1655                           ;lcd4a.c: 90: lcd_lat();
  1656  000BD8  ECAF  F006         	call	_lcd_lat	;wreg free
  1657                           
  1658                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  1659  000BDC  0E04               	movlw	4
  1660  000BDE  6E2A               	movwf	??_lcd_dwr& (0+255),c
  1661  000BE0  0EE4               	movlw	228
  1662  000BE2                     u687:
  1663  000BE2  2EE8               	decfsz	wreg,f,c
  1664  000BE4  D7FE               	bra	u687
  1665  000BE6  2E2A               	decfsz	??_lcd_dwr& (0+255),f,c
  1666  000BE8  D7FC               	bra	u687
  1667  000BEA  D000               	nop2	
  1668                           
  1669                           ;lcd4a.c: 93: lcd &= 0x0F;
  1670  000BEC  0E0F               	movlw	15
  1671  000BEE  164B               	andwf	_lcd,f,c
  1672                           
  1673                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  1674  000BF0  C02B  F02A         	movff	lcd_dwr@x,??_lcd_dwr
  1675  000BF4  0E0F               	movlw	15
  1676  000BF6  162A               	andwf	??_lcd_dwr,f,c
  1677  000BF8  382A               	swapf	??_lcd_dwr,w,c
  1678  000BFA  0BF0               	andlw	240
  1679  000BFC  124B               	iorwf	_lcd,f,c
  1680                           
  1681                           ;lcd4a.c: 95: manda(lcd);
  1682  000BFE  504B               	movf	_lcd,w,c
  1683  000C00  EC5D  F006         	call	_manda
  1684                           
  1685                           ;lcd4a.c: 96: lcd_lat();
  1686  000C04  ECAF  F006         	call	_lcd_lat	;wreg free
  1687  000C08  0012               	return		;funcret
  1688  000C0A                     __end_of_lcd_dwr:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           prodh	equ	0xFF4
  1695                           prodl	equ	0xFF3
  1696                           intcon	equ	0xFF2
  1697                           intcon2	equ	0xFF1
  1698                           indf0	equ	0xFEF
  1699                           postinc0	equ	0xFEE
  1700                           fsr0h	equ	0xFEA
  1701                           fsr0l	equ	0xFE9
  1702                           wreg	equ	0xFE8
  1703                           indf2	equ	0xFDF
  1704                           postinc2	equ	0xFDE
  1705                           postdec2	equ	0xFDD
  1706                           fsr2h	equ	0xFDA
  1707                           fsr2l	equ	0xFD9
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _lcd_init *****************
  1711 ;; Defined at:
  1712 ;;		line 133 in file "../MyLibs/lcd4a.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1726 ;;      Params:         0       0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0
  1728 ;;      Temps:          1       0       0       0       0       0       0
  1729 ;;      Totals:         1       0       0       0       0       0       0
  1730 ;;Total ram usage:        1 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    4
  1733 ;; This function calls:
  1734 ;;		_lcd_cmd
  1735 ;;		_lcd_cmd_hf
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text9
  1742  000A1C                     __ptext9:
  1743                           	opt stack 0
  1744  000A1C                     _lcd_init:
  1745                           	opt stack 26
  1746                           
  1747                           ;lcd4a.c: 141: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  1748                           
  1749                           ;incstack = 0
  1750  000A1C  9E93               	bcf	3987,7,c	;volatile
  1751                           
  1752                           ;lcd4a.c: 142: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  1753  000A1E  9C93               	bcf	3987,6,c	;volatile
  1754                           
  1755                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  1756  000A20  9A93               	bcf	3987,5,c	;volatile
  1757                           
  1758                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  1759  000A22  9893               	bcf	3987,4,c	;volatile
  1760                           
  1761                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  1762  000A24  9A95               	bcf	3989,5,c	;volatile
  1763                           
  1764                           ;lcd4a.c: 146: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  1765  000A26  9C95               	bcf	3989,6,c	;volatile
  1766                           
  1767                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  1768  000A28  9E95               	bcf	3989,7,c	;volatile
  1769                           
  1770                           ;lcd4a.c: 149: lcd_cmd_hf(0x30);
  1771  000A2A  0E30               	movlw	48
  1772  000A2C  ECA2  F006         	call	_lcd_cmd_hf
  1773                           
  1774                           ;lcd4a.c: 150: _delay((unsigned long)((15)*(4000000/4000.0)));
  1775  000A30  0E14               	movlw	20
  1776  000A32  6E2C               	movwf	??_lcd_init& (0+255),c
  1777  000A34  0E7A               	movlw	122
  1778  000A36                     u697:
  1779  000A36  2EE8               	decfsz	wreg,f,c
  1780  000A38  D7FE               	bra	u697
  1781  000A3A  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1782  000A3C  D7FC               	bra	u697
  1783                           
  1784                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
  1785  000A3E  0E30               	movlw	48
  1786  000A40  ECA2  F006         	call	_lcd_cmd_hf
  1787                           
  1788                           ;lcd4a.c: 152: _delay((unsigned long)((1)*(4000000/4000.0)));
  1789  000A44  0EC8               	movlw	200
  1790  000A46                     u707:
  1791  000A46  D000               	nop2	
  1792  000A48  2EE8               	decfsz	wreg,f,c
  1793  000A4A  D7FD               	bra	u707
  1794                           
  1795                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
  1796  000A4C  0E30               	movlw	48
  1797  000A4E  ECA2  F006         	call	_lcd_cmd_hf
  1798                           
  1799                           ;lcd4a.c: 154: _delay((unsigned long)((15)*(4000000/4000.0)));
  1800  000A52  0E14               	movlw	20
  1801  000A54  6E2C               	movwf	??_lcd_init& (0+255),c
  1802  000A56  0E7A               	movlw	122
  1803  000A58                     u717:
  1804  000A58  2EE8               	decfsz	wreg,f,c
  1805  000A5A  D7FE               	bra	u717
  1806  000A5C  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1807  000A5E  D7FC               	bra	u717
  1808                           
  1809                           ;lcd4a.c: 155: lcd_cmd_hf(0x20);
  1810  000A60  0E20               	movlw	32
  1811  000A62  ECA2  F006         	call	_lcd_cmd_hf
  1812                           
  1813                           ;lcd4a.c: 156: _delay((unsigned long)((5)*(4000000/4000.0)));
  1814  000A66  0E07               	movlw	7
  1815  000A68  6E2C               	movwf	??_lcd_init& (0+255),c
  1816  000A6A  0E7D               	movlw	125
  1817  000A6C                     u727:
  1818  000A6C  2EE8               	decfsz	wreg,f,c
  1819  000A6E  D7FE               	bra	u727
  1820  000A70  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1821  000A72  D7FC               	bra	u727
  1822  000A74  F000               	nop	
  1823                           
  1824                           ;lcd4a.c: 157: lcd_cmd(0x28);
  1825  000A76  0E28               	movlw	40
  1826  000A78  ECBD  F005         	call	_lcd_cmd
  1827                           
  1828                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  1829  000A7C  0E07               	movlw	7
  1830  000A7E  6E2C               	movwf	??_lcd_init& (0+255),c
  1831  000A80  0E7D               	movlw	125
  1832  000A82                     u737:
  1833  000A82  2EE8               	decfsz	wreg,f,c
  1834  000A84  D7FE               	bra	u737
  1835  000A86  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1836  000A88  D7FC               	bra	u737
  1837  000A8A  F000               	nop	
  1838                           
  1839                           ;lcd4a.c: 159: lcd_cmd(0x0E);
  1840  000A8C  0E0E               	movlw	14
  1841  000A8E  ECBD  F005         	call	_lcd_cmd
  1842                           
  1843                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
  1844  000A92  0E07               	movlw	7
  1845  000A94  6E2C               	movwf	??_lcd_init& (0+255),c
  1846  000A96  0E7D               	movlw	125
  1847  000A98                     u747:
  1848  000A98  2EE8               	decfsz	wreg,f,c
  1849  000A9A  D7FE               	bra	u747
  1850  000A9C  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1851  000A9E  D7FC               	bra	u747
  1852  000AA0  F000               	nop	
  1853                           
  1854                           ;lcd4a.c: 161: lcd_cmd(0x01);
  1855  000AA2  0E01               	movlw	1
  1856  000AA4  ECBD  F005         	call	_lcd_cmd
  1857                           
  1858                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  1859  000AA8  0E07               	movlw	7
  1860  000AAA  6E2C               	movwf	??_lcd_init& (0+255),c
  1861  000AAC  0E7D               	movlw	125
  1862  000AAE                     u757:
  1863  000AAE  2EE8               	decfsz	wreg,f,c
  1864  000AB0  D7FE               	bra	u757
  1865  000AB2  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1866  000AB4  D7FC               	bra	u757
  1867  000AB6  F000               	nop	
  1868                           
  1869                           ;lcd4a.c: 163: lcd_cmd(0x06);
  1870  000AB8  0E06               	movlw	6
  1871  000ABA  ECBD  F005         	call	_lcd_cmd
  1872                           
  1873                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  1874  000ABE  0E07               	movlw	7
  1875  000AC0  6E2C               	movwf	??_lcd_init& (0+255),c
  1876  000AC2  0E7D               	movlw	125
  1877  000AC4                     u767:
  1878  000AC4  2EE8               	decfsz	wreg,f,c
  1879  000AC6  D7FE               	bra	u767
  1880  000AC8  2E2C               	decfsz	??_lcd_init& (0+255),f,c
  1881  000ACA  D7FC               	bra	u767
  1882  000ACC  F000               	nop	
  1883                           
  1884                           ;lcd4a.c: 165: lcd_cmd(0x80);
  1885  000ACE  0E80               	movlw	128
  1886  000AD0  ECBD  F005         	call	_lcd_cmd
  1887  000AD4  0012               	return		;funcret
  1888  000AD6                     __end_of_lcd_init:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           intcon2	equ	0xFF1
  1898                           indf0	equ	0xFEF
  1899                           postinc0	equ	0xFEE
  1900                           fsr0h	equ	0xFEA
  1901                           fsr0l	equ	0xFE9
  1902                           wreg	equ	0xFE8
  1903                           indf2	equ	0xFDF
  1904                           postinc2	equ	0xFDE
  1905                           postdec2	equ	0xFDD
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _lcd_cmd_hf *****************
  1911 ;; Defined at:
  1912 ;;		line 54 in file "../MyLibs/lcd4a.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  x               1    wreg     unsigned char 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  x               1   41[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1926 ;;      Params:         0       0       0       0       0       0       0
  1927 ;;      Locals:         1       0       0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0
  1929 ;;      Totals:         1       0       0       0       0       0       0
  1930 ;;Total ram usage:        1 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    3
  1933 ;; This function calls:
  1934 ;;		_lcd_lat
  1935 ;;		_manda
  1936 ;; This function is called by:
  1937 ;;		_lcd_init
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text10
  1942  000D44                     __ptext10:
  1943                           	opt stack 0
  1944  000D44                     _lcd_cmd_hf:
  1945                           	opt stack 26
  1946                           
  1947                           ;incstack = 0
  1948                           ;lcd_cmd_hf@x stored from wreg
  1949  000D44  6E2A               	movwf	lcd_cmd_hf@x,c
  1950                           
  1951                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  1952  000D46  9A8C               	bcf	3980,5,c	;volatile
  1953                           
  1954                           ;lcd4a.c: 57: lcd &= 0x0F;
  1955  000D48  0E0F               	movlw	15
  1956  000D4A  164B               	andwf	_lcd,f,c
  1957                           
  1958                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  1959  000D4C  502A               	movf	lcd_cmd_hf@x,w,c
  1960  000D4E  0BF0               	andlw	240
  1961  000D50  124B               	iorwf	_lcd,f,c
  1962                           
  1963                           ;lcd4a.c: 59: manda(lcd);
  1964  000D52  504B               	movf	_lcd,w,c
  1965  000D54  EC5D  F006         	call	_manda
  1966                           
  1967                           ;lcd4a.c: 60: lcd_lat();
  1968  000D58  ECAF  F006         	call	_lcd_lat	;wreg free
  1969  000D5C  0012               	return		;funcret
  1970  000D5E                     __end_of_lcd_cmd_hf:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           prodh	equ	0xFF4
  1977                           prodl	equ	0xFF3
  1978                           intcon	equ	0xFF2
  1979                           intcon2	equ	0xFF1
  1980                           indf0	equ	0xFEF
  1981                           postinc0	equ	0xFEE
  1982                           fsr0h	equ	0xFEA
  1983                           fsr0l	equ	0xFE9
  1984                           wreg	equ	0xFE8
  1985                           indf2	equ	0xFDF
  1986                           postinc2	equ	0xFDE
  1987                           postdec2	equ	0xFDD
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _lcd_gotoxy *****************
  1993 ;; Defined at:
  1994 ;;		line 112 in file "../MyLibs/lcd4a.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  x               1    wreg     unsigned char 
  1997 ;;  y               1   43[COMRAM] unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  x               1   45[COMRAM] unsigned char 
  2000 ;;  ADDRESS         1   46[COMRAM] unsigned char 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         1       0       0       0       0       0       0
  2011 ;;      Locals:         2       0       0       0       0       0       0
  2012 ;;      Temps:          1       0       0       0       0       0       0
  2013 ;;      Totals:         4       0       0       0       0       0       0
  2014 ;;Total ram usage:        4 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    4
  2017 ;; This function calls:
  2018 ;;		_lcd_cmd
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text11
  2025  000C86                     __ptext11:
  2026                           	opt stack 0
  2027  000C86                     _lcd_gotoxy:
  2028                           	opt stack 26
  2029                           
  2030                           ;incstack = 0
  2031                           ;lcd_gotoxy@x stored from wreg
  2032  000C86  6E2E               	movwf	lcd_gotoxy@x,c
  2033                           
  2034                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  2035  000C88  0E00               	movlw	0
  2036  000C8A  6E2F               	movwf	lcd_gotoxy@ADDRESS,c
  2037                           
  2038                           ;lcd4a.c: 116: switch(y)
  2039  000C8C  D005               	goto	l121
  2040  000C8E                     
  2041                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  2042  000C8E  0EC0               	movlw	192
  2043  000C90  D001               	goto	L2
  2044  000C92                     
  2045                           ;lcd4a.c: 125: ADDRESS = 0x80;
  2046  000C92  0E80               	movlw	128
  2047  000C94                     L2:
  2048  000C94  6E2F               	movwf	lcd_gotoxy@ADDRESS,c
  2049                           
  2050                           ;lcd4a.c: 128: }
  2051                           
  2052                           ;lcd4a.c: 126: break;
  2053  000C96  D008               	goto	l123
  2054  000C98                     l121:
  2055  000C98  502C               	movf	lcd_gotoxy@y,w,c
  2056                           
  2057                           ; Switch size 1, requested type "space"
  2058                           ; Number of cases is 2, Range of values is 1 to 2
  2059                           ; switch strategies available:
  2060                           ; Name         Instructions Cycles
  2061                           ; simple_byte            7     4 (average)
  2062                           ;	Chosen strategy is simple_byte
  2063  000C9A  0A01               	xorlw	1	; case 1
  2064  000C9C  B4D8               	btfsc	status,2,c
  2065  000C9E  D7F9               	goto	l125
  2066  000CA0  0A03               	xorlw	3	; case 2
  2067  000CA2  B4D8               	btfsc	status,2,c
  2068  000CA4  D7F4               	goto	l124
  2069  000CA6  D7F5               	goto	l125
  2070  000CA8                     l123:
  2071                           
  2072                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  2073  000CA8  502F               	movf	lcd_gotoxy@ADDRESS,w,c
  2074  000CAA  242E               	addwf	lcd_gotoxy@x,w,c
  2075  000CAC  6E2D               	movwf	??_lcd_gotoxy& (0+255),c
  2076  000CAE  042D               	decf	??_lcd_gotoxy,w,c
  2077  000CB0  6E2F               	movwf	lcd_gotoxy@ADDRESS,c
  2078                           
  2079                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  2080  000CB2  502F               	movf	lcd_gotoxy@ADDRESS,w,c
  2081  000CB4  ECBD  F005         	call	_lcd_cmd
  2082  000CB8  0012               	return		;funcret
  2083  000CBA                     __end_of_lcd_gotoxy:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           prodh	equ	0xFF4
  2090                           prodl	equ	0xFF3
  2091                           intcon	equ	0xFF2
  2092                           intcon2	equ	0xFF1
  2093                           indf0	equ	0xFEF
  2094                           postinc0	equ	0xFEE
  2095                           fsr0h	equ	0xFEA
  2096                           fsr0l	equ	0xFE9
  2097                           wreg	equ	0xFE8
  2098                           indf2	equ	0xFDF
  2099                           postinc2	equ	0xFDE
  2100                           postdec2	equ	0xFDD
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _lcd_cmd *****************
  2106 ;; Defined at:
  2107 ;;		line 38 in file "../MyLibs/lcd4a.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  x               1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  x               1   42[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2121 ;;      Params:         0       0       0       0       0       0       0
  2122 ;;      Locals:         1       0       0       0       0       0       0
  2123 ;;      Temps:          1       0       0       0       0       0       0
  2124 ;;      Totals:         2       0       0       0       0       0       0
  2125 ;;Total ram usage:        2 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    3
  2128 ;; This function calls:
  2129 ;;		_lcd_lat
  2130 ;;		_manda
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;;		_lcd_putc
  2134 ;;		_lcd_gotoxy
  2135 ;;		_lcd_init
  2136 ;;		_lcd_setcursor_vb
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text12
  2141  000B7A                     __ptext12:
  2142                           	opt stack 0
  2143  000B7A                     _lcd_cmd:
  2144                           	opt stack 25
  2145                           
  2146                           ;incstack = 0
  2147                           ;lcd_cmd@x stored from wreg
  2148  000B7A  6E2B               	movwf	lcd_cmd@x,c
  2149                           
  2150                           ;lcd4a.c: 40: lcd = 0;
  2151  000B7C  0E00               	movlw	0
  2152  000B7E  6E4B               	movwf	_lcd,c
  2153                           
  2154                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  2155  000B80  9A8C               	bcf	3980,5,c	;volatile
  2156                           
  2157                           ;lcd4a.c: 42: lcd &= 0x0F;
  2158  000B82  0E0F               	movlw	15
  2159  000B84  164B               	andwf	_lcd,f,c
  2160                           
  2161                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  2162  000B86  502B               	movf	lcd_cmd@x,w,c
  2163  000B88  0BF0               	andlw	240
  2164  000B8A  124B               	iorwf	_lcd,f,c
  2165                           
  2166                           ;lcd4a.c: 44: manda(lcd);
  2167  000B8C  504B               	movf	_lcd,w,c
  2168  000B8E  EC5D  F006         	call	_manda
  2169                           
  2170                           ;lcd4a.c: 45: lcd_lat();
  2171  000B92  ECAF  F006         	call	_lcd_lat	;wreg free
  2172                           
  2173                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  2174  000B96  0E04               	movlw	4
  2175  000B98  6E2A               	movwf	??_lcd_cmd& (0+255),c
  2176  000B9A  0EE4               	movlw	228
  2177  000B9C                     u777:
  2178  000B9C  2EE8               	decfsz	wreg,f,c
  2179  000B9E  D7FE               	bra	u777
  2180  000BA0  2E2A               	decfsz	??_lcd_cmd& (0+255),f,c
  2181  000BA2  D7FC               	bra	u777
  2182  000BA4  D000               	nop2	
  2183                           
  2184                           ;lcd4a.c: 48: lcd &= 0x0F;
  2185  000BA6  0E0F               	movlw	15
  2186  000BA8  164B               	andwf	_lcd,f,c
  2187                           
  2188                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  2189  000BAA  C02B  F02A         	movff	lcd_cmd@x,??_lcd_cmd
  2190  000BAE  0E0F               	movlw	15
  2191  000BB0  162A               	andwf	??_lcd_cmd,f,c
  2192  000BB2  382A               	swapf	??_lcd_cmd,w,c
  2193  000BB4  0BF0               	andlw	240
  2194  000BB6  124B               	iorwf	_lcd,f,c
  2195                           
  2196                           ;lcd4a.c: 50: manda(lcd);
  2197  000BB8  504B               	movf	_lcd,w,c
  2198  000BBA  EC5D  F006         	call	_manda
  2199                           
  2200                           ;lcd4a.c: 51: lcd_lat();
  2201  000BBE  ECAF  F006         	call	_lcd_lat	;wreg free
  2202  000BC2  0012               	return		;funcret
  2203  000BC4                     __end_of_lcd_cmd:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           intcon	equ	0xFF2
  2212                           intcon2	equ	0xFF1
  2213                           indf0	equ	0xFEF
  2214                           postinc0	equ	0xFEE
  2215                           fsr0h	equ	0xFEA
  2216                           fsr0l	equ	0xFE9
  2217                           wreg	equ	0xFE8
  2218                           indf2	equ	0xFDF
  2219                           postinc2	equ	0xFDE
  2220                           postdec2	equ	0xFDD
  2221                           fsr2h	equ	0xFDA
  2222                           fsr2l	equ	0xFD9
  2223                           status	equ	0xFD8
  2224                           
  2225 ;; *************** function _manda *****************
  2226 ;; Defined at:
  2227 ;;		line 169 in file "../MyLibs/lcd4a.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  dato            1    wreg     unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  dato            1   40[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:         0       0       0       0       0       0       0
  2242 ;;      Locals:         1       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0
  2244 ;;      Totals:         1       0       0       0       0       0       0
  2245 ;;Total ram usage:        1 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    2
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_lcd_cmd
  2252 ;;		_lcd_cmd_hf
  2253 ;;		_lcd_dwr
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text13
  2258  000CBA                     __ptext13:
  2259                           	opt stack 0
  2260  000CBA                     _manda:
  2261                           	opt stack 25
  2262                           
  2263                           ;incstack = 0
  2264                           ;manda@dato stored from wreg
  2265  000CBA  6E29               	movwf	manda@dato,c
  2266                           
  2267                           ;lcd4a.c: 171: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  2268  000CBC  A829               	btfss	manda@dato,4,c
  2269  000CBE  D002               	goto	l132
  2270  000CC0  888A               	bsf	3978,4,c	;volatile
  2271  000CC2  D001               	goto	l133
  2272  000CC4                     l132:
  2273                           
  2274                           ;lcd4a.c: 172: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  2275  000CC4  988A               	bcf	3978,4,c	;volatile
  2276  000CC6                     l133:
  2277                           
  2278                           ;lcd4a.c: 173: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  2279  000CC6  AA29               	btfss	manda@dato,5,c
  2280  000CC8  D002               	goto	l134
  2281  000CCA  8A8A               	bsf	3978,5,c	;volatile
  2282  000CCC  D001               	goto	l135
  2283  000CCE                     l134:
  2284                           
  2285                           ;lcd4a.c: 174: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  2286  000CCE  9A8A               	bcf	3978,5,c	;volatile
  2287  000CD0                     l135:
  2288                           
  2289                           ;lcd4a.c: 175: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  2290  000CD0  AC29               	btfss	manda@dato,6,c
  2291  000CD2  D002               	goto	l136
  2292  000CD4  8C8A               	bsf	3978,6,c	;volatile
  2293  000CD6  D001               	goto	l137
  2294  000CD8                     l136:
  2295                           
  2296                           ;lcd4a.c: 176: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  2297  000CD8  9C8A               	bcf	3978,6,c	;volatile
  2298  000CDA                     l137:
  2299                           
  2300                           ;lcd4a.c: 177: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  2301  000CDA  AE29               	btfss	manda@dato,7,c
  2302  000CDC  D002               	goto	l138
  2303  000CDE  8E8A               	bsf	3978,7,c	;volatile
  2304  000CE0  0012               	return	
  2305  000CE2                     l138:
  2306                           
  2307                           ;lcd4a.c: 178: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  2308  000CE2  9E8A               	bcf	3978,7,c	;volatile
  2309  000CE4  0012               	return	
  2310  000CE6                     __end_of_manda:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           intcon	equ	0xFF2
  2319                           intcon2	equ	0xFF1
  2320                           indf0	equ	0xFEF
  2321                           postinc0	equ	0xFEE
  2322                           fsr0h	equ	0xFEA
  2323                           fsr0l	equ	0xFE9
  2324                           wreg	equ	0xFE8
  2325                           indf2	equ	0xFDF
  2326                           postinc2	equ	0xFDE
  2327                           postdec2	equ	0xFDD
  2328                           fsr2h	equ	0xFDA
  2329                           fsr2l	equ	0xFD9
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _lcd_lat *****************
  2333 ;; Defined at:
  2334 ;;		line 27 in file "../MyLibs/lcd4a.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2348 ;;      Params:         0       0       0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0       0
  2350 ;;      Temps:          1       0       0       0       0       0       0
  2351 ;;      Totals:         1       0       0       0       0       0       0
  2352 ;;Total ram usage:        1 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_lcd_cmd
  2359 ;;		_lcd_cmd_hf
  2360 ;;		_lcd_dwr
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text14
  2365  000D5E                     __ptext14:
  2366                           	opt stack 0
  2367  000D5E                     _lcd_lat:
  2368                           	opt stack 25
  2369                           
  2370                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  2371                           
  2372                           ;incstack = 0
  2373  000D5E  8E8C               	bsf	3980,7,c	;volatile
  2374                           
  2375                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  2376  000D60  0E03               	movlw	3
  2377  000D62  6E29               	movwf	??_lcd_lat& (0+255),c
  2378  000D64  0E98               	movlw	152
  2379  000D66                     u787:
  2380  000D66  2EE8               	decfsz	wreg,f,c
  2381  000D68  D7FE               	bra	u787
  2382  000D6A  2E29               	decfsz	??_lcd_lat& (0+255),f,c
  2383  000D6C  D7FC               	bra	u787
  2384                           
  2385                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  2386  000D6E  9E8C               	bcf	3980,7,c	;volatile
  2387  000D70  0012               	return		;funcret
  2388  000D72                     __end_of_lcd_lat:
  2389                           	opt stack 0
  2390                           tblptru	equ	0xFF8
  2391                           tblptrh	equ	0xFF7
  2392                           tblptrl	equ	0xFF6
  2393                           tablat	equ	0xFF5
  2394                           prodh	equ	0xFF4
  2395                           prodl	equ	0xFF3
  2396                           intcon	equ	0xFF2
  2397                           intcon2	equ	0xFF1
  2398                           indf0	equ	0xFEF
  2399                           postinc0	equ	0xFEE
  2400                           fsr0h	equ	0xFEA
  2401                           fsr0l	equ	0xFE9
  2402                           wreg	equ	0xFE8
  2403                           indf2	equ	0xFDF
  2404                           postinc2	equ	0xFDE
  2405                           postdec2	equ	0xFDD
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function _low_isr *****************
  2411 ;; Defined at:
  2412 ;;		line 59 in file "tmrlt4.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		None
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2426 ;;      Params:         0       0       0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0       0       0
  2428 ;;      Temps:         21       0       0       0       0       0       0
  2429 ;;      Totals:        21       0       0       0       0       0       0
  2430 ;;Total ram usage:       21 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    1
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		Interrupt level 1
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	intcodelo
  2441  000018                     __pintcodelo:
  2442                           	opt stack 0
  2443  000018                     _low_isr:
  2444                           	opt stack 25
  2445                           
  2446                           ;incstack = 0
  2447  000018  8057               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2448  00001A  CFD8 F014          	movff	status,??_low_isr
  2449  00001E  CFE8 F015          	movff	wreg,??_low_isr+1
  2450  000022  CFE0 F016          	movff	bsr,??_low_isr+2
  2451  000026  CFFA F017          	movff	pclath,??_low_isr+3
  2452  00002A  CFFB F018          	movff	pclatu,??_low_isr+4
  2453  00002E  CFE9 F019          	movff	fsr0l,??_low_isr+5
  2454  000032  CFEA F01A          	movff	fsr0h,??_low_isr+6
  2455  000036  CFE1 F01B          	movff	fsr1l,??_low_isr+7
  2456  00003A  CFE2 F01C          	movff	fsr1h,??_low_isr+8
  2457  00003E  CFD9 F01D          	movff	fsr2l,??_low_isr+9
  2458  000042  CFDA F01E          	movff	fsr2h,??_low_isr+10
  2459  000046  CFF3 F01F          	movff	prodl,??_low_isr+11
  2460  00004A  CFF4 F020          	movff	prodh,??_low_isr+12
  2461  00004E  CFF6 F021          	movff	tblptrl,??_low_isr+13
  2462  000052  CFF7 F022          	movff	tblptrh,??_low_isr+14
  2463  000056  CFF8 F023          	movff	tblptru,??_low_isr+15
  2464  00005A  CFF5 F024          	movff	tablat,??_low_isr+16
  2465  00005E  C057  F025         	movff	btemp,??_low_isr+17
  2466  000062  C058  F026         	movff	btemp+1,??_low_isr+18
  2467  000066  C059  F027         	movff	btemp+2,??_low_isr+19
  2468  00006A  C05A  F028         	movff	btemp+3,??_low_isr+20
  2469  00006E  C028  F05A         	movff	??_low_isr+20,btemp+3
  2470  000072  C027  F059         	movff	??_low_isr+19,btemp+2
  2471  000076  C026  F058         	movff	??_low_isr+18,btemp+1
  2472  00007A  C025  F057         	movff	??_low_isr+17,btemp
  2473  00007E  C024  FFF5         	movff	??_low_isr+16,tablat
  2474  000082  C023  FFF8         	movff	??_low_isr+15,tblptru
  2475  000086  C022  FFF7         	movff	??_low_isr+14,tblptrh
  2476  00008A  C021  FFF6         	movff	??_low_isr+13,tblptrl
  2477  00008E  C020  FFF4         	movff	??_low_isr+12,prodh
  2478  000092  C01F  FFF3         	movff	??_low_isr+11,prodl
  2479  000096  C01E  FFDA         	movff	??_low_isr+10,fsr2h
  2480  00009A  C01D  FFD9         	movff	??_low_isr+9,fsr2l
  2481  00009E  C01C  FFE2         	movff	??_low_isr+8,fsr1h
  2482  0000A2  C01B  FFE1         	movff	??_low_isr+7,fsr1l
  2483  0000A6  C01A  FFEA         	movff	??_low_isr+6,fsr0h
  2484  0000AA  C019  FFE9         	movff	??_low_isr+5,fsr0l
  2485  0000AE  C018  FFFB         	movff	??_low_isr+4,pclatu
  2486  0000B2  C017  FFFA         	movff	??_low_isr+3,pclath
  2487  0000B6  C016  FFE0         	movff	??_low_isr+2,bsr
  2488  0000BA  C015  FFE8         	movff	??_low_isr+1,wreg
  2489  0000BE  C014  FFD8         	movff	??_low_isr,status
  2490  0000C2  9057               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2491  0000C4  0010               	retfie	
  2492  0000C6                     __end_of_low_isr:
  2493                           	opt stack 0
  2494                           pclatu	equ	0xFFB
  2495                           pclath	equ	0xFFA
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           intcon	equ	0xFF2
  2503                           intcon2	equ	0xFF1
  2504                           indf0	equ	0xFEF
  2505                           postinc0	equ	0xFEE
  2506                           fsr0h	equ	0xFEA
  2507                           fsr0l	equ	0xFE9
  2508                           wreg	equ	0xFE8
  2509                           fsr1h	equ	0xFE2
  2510                           fsr1l	equ	0xFE1
  2511                           bsr	equ	0xFE0
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function _high_isr *****************
  2520 ;; Defined at:
  2521 ;;		line 65 in file "tmrlt4.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      void 
  2528 ;; Registers used:
  2529 ;;		wreg, status,2, status,0
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2535 ;;      Params:         0       0       0       0       0       0       0
  2536 ;;      Locals:         0       0       0       0       0       0       0
  2537 ;;      Temps:         19       0       0       0       0       0       0
  2538 ;;      Totals:        19       0       0       0       0       0       0
  2539 ;;Total ram usage:       19 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		Interrupt level 2
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	intcode
  2549  000008                     __pintcode:
  2550                           	opt stack 0
  2551  000008                     _high_isr:
  2552                           	opt stack 25
  2553                           
  2554                           ;incstack = 0
  2555  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2556  00000A  EDAB  F004         	call	int_func,f	;refresh shadow registers
  2557                           pclatu	equ	0xFFB
  2558                           pclath	equ	0xFFA
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           intcon2	equ	0xFF1
  2567                           indf0	equ	0xFEF
  2568                           postinc0	equ	0xFEE
  2569                           fsr0h	equ	0xFEA
  2570                           fsr0l	equ	0xFE9
  2571                           wreg	equ	0xFE8
  2572                           fsr1h	equ	0xFE2
  2573                           fsr1l	equ	0xFE1
  2574                           bsr	equ	0xFE0
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582                           	psect	intcode_body
  2583  000956                     __pintcode_body:
  2584                           	opt stack 25
  2585  000956                     int_func:
  2586                           	opt stack 25
  2587  000956  0006               	pop		; remove dummy address from shadow register refresh
  2588  000958  CFFA F002          	movff	pclath,??_high_isr+1
  2589  00095C  CFFB F003          	movff	pclatu,??_high_isr+2
  2590  000960  CFE9 F004          	movff	fsr0l,??_high_isr+3
  2591  000964  CFEA F005          	movff	fsr0h,??_high_isr+4
  2592  000968  CFE1 F006          	movff	fsr1l,??_high_isr+5
  2593  00096C  CFE2 F007          	movff	fsr1h,??_high_isr+6
  2594  000970  CFD9 F008          	movff	fsr2l,??_high_isr+7
  2595  000974  CFDA F009          	movff	fsr2h,??_high_isr+8
  2596  000978  CFF3 F00A          	movff	prodl,??_high_isr+9
  2597  00097C  CFF4 F00B          	movff	prodh,??_high_isr+10
  2598  000980  CFF6 F00C          	movff	tblptrl,??_high_isr+11
  2599  000984  CFF7 F00D          	movff	tblptrh,??_high_isr+12
  2600  000988  CFF8 F00E          	movff	tblptru,??_high_isr+13
  2601  00098C  CFF5 F00F          	movff	tablat,??_high_isr+14
  2602  000990  C057  F010         	movff	btemp,??_high_isr+15
  2603  000994  C058  F011         	movff	btemp+1,??_high_isr+16
  2604  000998  C059  F012         	movff	btemp+2,??_high_isr+17
  2605  00099C  C05A  F013         	movff	btemp+3,??_high_isr+18
  2606                           
  2607                           ;tmrlt4.c: 68: if(INTCONbits.T0IF == 1)
  2608  0009A0  A4F2               	btfss	intcon,2,c	;volatile
  2609  0009A2  D016               	goto	i2l1136
  2610                           
  2611                           ;tmrlt4.c: 69: {
  2612                           ;tmrlt4.c: 71: if(estado == 0)
  2613  0009A4  504E               	movf	_estado,w,c
  2614  0009A6  A4D8               	btfss	status,2,c
  2615  0009A8  D008               	goto	i2l63
  2616                           
  2617                           ;tmrlt4.c: 72: {
  2618                           ;tmrlt4.c: 73: (*(&(*(&PORTC + 0x09))) |= (1<<(2)));
  2619  0009AA  848B               	bsf	3979,2,c	;volatile
  2620                           
  2621                           ;tmrlt4.c: 74: T0ini = 255-Ton;
  2622  0009AC  504C               	movf	_Ton,w,c
  2623  0009AE  0800               	sublw	0
  2624  0009B0  6E01               	movwf	??_high_isr& (0+255),c
  2625  0009B2  0401               	decf	??_high_isr,w,c
  2626  0009B4  6E4D               	movwf	_T0ini,c
  2627                           
  2628                           ;tmrlt4.c: 75: estado = 1;
  2629  0009B6  0E01               	movlw	1
  2630  0009B8  D004               	goto	L3
  2631  0009BA                     i2l63:
  2632                           
  2633                           ;tmrlt4.c: 77: else
  2634                           ;tmrlt4.c: 78: {
  2635                           ;tmrlt4.c: 79: (*(&(*(&PORTC + 0x09))) &=~ (1<<(2)));
  2636  0009BA  948B               	bcf	3979,2,c	;volatile
  2637                           
  2638                           ;tmrlt4.c: 80: T0ini = Ton;
  2639  0009BC  C04C  F04D         	movff	_Ton,_T0ini
  2640                           
  2641                           ;tmrlt4.c: 81: estado = 0;
  2642  0009C0  0E00               	movlw	0
  2643  0009C2                     L3:
  2644  0009C2  6E4E               	movwf	_estado,c
  2645                           
  2646                           ;tmrlt4.c: 82: }
  2647                           ;tmrlt4.c: 83: TMR0=T0ini;
  2648  0009C4  C04D  FFD6         	movff	_T0ini,4054	;volatile
  2649  0009C8  6AD7               	clrf	4055,c	;volatile
  2650                           
  2651                           ;tmrlt4.c: 84: TMR0IF = 0;
  2652  0009CA  94F2               	bcf	intcon,2,c	;volatile
  2653                           
  2654                           ;tmrlt4.c: 85: (*(&(*(&PORTC + 0x09))) ^= (1<<(3)));
  2655  0009CC  0E08               	movlw	8
  2656  0009CE  1A8B               	xorwf	3979,f,c	;volatile
  2657  0009D0                     i2l1136:
  2658                           
  2659                           ;tmrlt4.c: 86: return;
  2660  0009D0  C013  F05A         	movff	??_high_isr+18,btemp+3
  2661  0009D4  C012  F059         	movff	??_high_isr+17,btemp+2
  2662  0009D8  C011  F058         	movff	??_high_isr+16,btemp+1
  2663  0009DC  C010  F057         	movff	??_high_isr+15,btemp
  2664  0009E0  C00F  FFF5         	movff	??_high_isr+14,tablat
  2665  0009E4  C00E  FFF8         	movff	??_high_isr+13,tblptru
  2666  0009E8  C00D  FFF7         	movff	??_high_isr+12,tblptrh
  2667  0009EC  C00C  FFF6         	movff	??_high_isr+11,tblptrl
  2668  0009F0  C00B  FFF4         	movff	??_high_isr+10,prodh
  2669  0009F4  C00A  FFF3         	movff	??_high_isr+9,prodl
  2670  0009F8  C009  FFDA         	movff	??_high_isr+8,fsr2h
  2671  0009FC  C008  FFD9         	movff	??_high_isr+7,fsr2l
  2672  000A00  C007  FFE2         	movff	??_high_isr+6,fsr1h
  2673  000A04  C006  FFE1         	movff	??_high_isr+5,fsr1l
  2674  000A08  C005  FFEA         	movff	??_high_isr+4,fsr0h
  2675  000A0C  C004  FFE9         	movff	??_high_isr+3,fsr0l
  2676  000A10  C003  FFFB         	movff	??_high_isr+2,pclatu
  2677  000A14  C002  FFFA         	movff	??_high_isr+1,pclath
  2678  000A18  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2679  000A1A  0011               	retfie		f
  2680  000A1C                     __end_of_high_isr:
  2681                           	opt stack 0
  2682                           pclatu	equ	0xFFB
  2683                           pclath	equ	0xFFA
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           indf0	equ	0xFEF
  2693                           postinc0	equ	0xFEE
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           bsr	equ	0xFE0
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           pclatu	equ	0xFFB
  2707                           pclath	equ	0xFFA
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           intcon	equ	0xFF2
  2715                           intcon2	equ	0xFF1
  2716                           indf0	equ	0xFEF
  2717                           postinc0	equ	0xFEE
  2718                           fsr0h	equ	0xFEA
  2719                           fsr0l	equ	0xFE9
  2720                           wreg	equ	0xFE8
  2721                           fsr1h	equ	0xFE2
  2722                           fsr1l	equ	0xFE1
  2723                           bsr	equ	0xFE0
  2724                           indf2	equ	0xFDF
  2725                           postinc2	equ	0xFDE
  2726                           postdec2	equ	0xFDD
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731                           	psect	rparam
  2732  0000                     pclatu	equ	0xFFB
  2733                           pclath	equ	0xFFA
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           intcon	equ	0xFF2
  2741                           intcon2	equ	0xFF1
  2742                           indf0	equ	0xFEF
  2743                           postinc0	equ	0xFEE
  2744                           fsr0h	equ	0xFEA
  2745                           fsr0l	equ	0xFE9
  2746                           wreg	equ	0xFE8
  2747                           fsr1h	equ	0xFE2
  2748                           fsr1l	equ	0xFE1
  2749                           bsr	equ	0xFE0
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757                           	psect	temp
  2758  000057                     btemp:
  2759                           	opt stack 0
  2760  000057                     	ds	1
  2761  0000                     int$flags	set	btemp
  2762  0000                     wtemp6	set	btemp+1
  2763                           pclatu	equ	0xFFB
  2764                           pclath	equ	0xFFA
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           prodh	equ	0xFF4
  2770                           prodl	equ	0xFF3
  2771                           intcon	equ	0xFF2
  2772                           intcon2	equ	0xFF1
  2773                           indf0	equ	0xFEF
  2774                           postinc0	equ	0xFEE
  2775                           fsr0h	equ	0xFEA
  2776                           fsr0l	equ	0xFE9
  2777                           wreg	equ	0xFE8
  2778                           fsr1h	equ	0xFE2
  2779                           fsr1l	equ	0xFE1
  2780                           bsr	equ	0xFE0
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     74      86
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 12
		 -> value(COMRAM[8]), STR_2(CODE[5]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3397
                                             71 COMRAM     3     3      0
                            _lcd_cmd
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2058
                                             52 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             40 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             40 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     559
                                             44 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     210
                                             43 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0      90
                                             41 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     165
                                             43 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0      75
                                             41 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     411
                                             43 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0      90
                                             41 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      60
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             19 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
     _lcd_lat
     _manda
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4A      56       1       68.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      56      15        0.0%
DATA                 0      0      56       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Mar 29 19:56:46 2018

            lcd_cmd_hf@x 002A                       l70 08E0                       l71 0950  
                     l72 0918                       l75 091A                       bsr 000FE0  
    ___wmul@multiplicand 002B              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$XT 000000                      l103 0C70                      l104 0C50  
                    l121 0C98                      l106 0C58                      l123 0CA8  
                    l107 0C60                      l115 0B52                      l132 0CC4  
                    l124 0C8E                      l108 0C68                      l116 0B2A  
                    l133 0CC6                      l125 0C92                      l134 0CCE  
                    l135 0CD0                      l136 0CD8                      l160 062C  
                    l137 0CDA                      l161 0646                      l138 0CE2  
                    l170 06F0                      l163 066E                      l172 0718  
                    l165 06CA                      l182 07D0                      l183 0828  
                    l600 0B14                      l184 07D6                      l176 0762  
                    l601 0B1E                      l177 0786                      l610 0C38  
                    l178 078E                      l611 0C42                      l517 0D22  
                    l606 0C20                      l607 0C18                      l596 0AF4  
                    l597 0AEC             __CFG_CPB$OFF 000000                      u410 0AF8  
                    u440 0C24                      u600 07B4             __CFG_CPD$OFF 000000  
                    u460 0B4A                      u620 0830                      u470 0B72  
                    u630 0848                      u550 0748                      u707 0A46  
                    u467 0B40                      u717 0A58                      u477 0B68  
                    u590 0796                      u727 0A6C                      _PSA 007EAB  
                    u737 0A82                      u747 0A98                      u757 0AAE  
                    u767 0AC4                      u687 0BE2                      u777 0B9C  
                    u697 0A36                      u787 0D66                      _Ton 004C  
                    _lcd 004B                      wreg 000FE8              lcd_gotoxy@x 002E  
            lcd_gotoxy@y 002C             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1350 071C                     l1466 08F6                     l1478 091A  
                   STR_1 060B                     STR_2 0617                     STR_3 061C  
                   STR_4 061C                     _GIEH 007F97                     _GIEL 007F96  
                   _T0CS 007EAD                     i2l63 09BA                     _TMR0 000FD6  
           __CFG_PWRT$ON 000000                     _main 0856                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0057                     prodh 000FF4  
                   prodl 000FF3                     start 00C6            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
                  _T0PS0 007EA8                    _T0PS1 007EA9                    _T0PS2 007EAA  
        __end_of___lwdiv 0B28          __end_of___lwmod 0C4C                    _T0ini 004D  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 0BC4          __end_of_lcd_lat 0D72          __end_of_lcd_dwr 0C0A  
        __end_of_lcd_msg 0B7A            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 060B  
                  _manda 0CBA          __end_of_isdigit 0D2A                    _value 004F  
                  main@i 0049          __end_of_low_isr 00C6           __CFG_BOREN$OFF 000000  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0058          __end_of_sprintf 0856          __initialization 0D2A  
           __end_of_main 0956                   ??_main 0048            __activetblptr 000002  
                 ?_manda 0001                   _T08BIT 007EAE                   i2l1136 09D0  
                 _TMR0IE 007F95                   _TMR0IF 007F92                   _TMR0IP 007F8A  
                 _TMR0ON 007EAF           __CFG_XINST$OFF 000000         __end_of_lcd_init 0AD6  
       __end_of_high_isr 0A1C         __end_of_lcd_putc 0C86                   ___wmul 0CE6  
         __CFG_STVREN$ON 000000                ??___lwdiv 002D                ??___lwmod 0034  
                 _estado 004E                   clear_0 0D30                ??_lcd_cmd 002A  
              ??_lcd_lat 0029                ??_lcd_dwr 002A                ??_lcd_msg 002F  
              ??_isdigit 0029             __mediumconst 0000                ??_low_isr 0014  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
      lcd_gotoxy@ADDRESS 002F                ??_sprintf 003B               __accesstop 0080  
__end_of__initialization 0D36          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_manda 0CE6                  ??_manda 0029  
           sprintf@width 0045       __CFG_CCP2MX$PORTBE 000000                  ?___wmul 0029  
             _lcd_cmd_hf 0D44               _lcd_gotoxy 0C86                ?_lcd_init 0001  
              ?_high_isr 0001                ?_lcd_putc 0001                  __Hparam 0000  
                __Lparam 0000          __size_of___wmul 0026                  ___lwdiv 0AD6  
                ___lwmod 0C0A             __psmallconst 0600                  __pcinit 0D2A  
                __ramtop 0600                  __ptext0 0856                  __ptext1 0622  
                __ptext2 0D0C                  __ptext3 0CE6                  __ptext4 0C0A  
                __ptext5 0AD6                  __ptext6 0B28                  __ptext7 0C4C  
                __ptext8 0BC4                  __ptext9 0A1C                  _lcd_cmd 0B7A  
                _lcd_lat 0D5E                  _lcd_dwr 0BC4                  _lcd_msg 0B28  
                _dpowers 0601                  _isdigit 0D0C                  _low_isr 0018  
                _sprintf 0622                  main@val 0048               ??_lcd_init 002C  
             ??_high_isr 0001           __pintcode_body 0956               ??_lcd_putc 002C  
   end_of_initialization 0D36            __Lmediumconst 0000                  int_func 0956  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
            ?_lcd_cmd_hf 0001              ?_lcd_gotoxy 002C           __end_of___wmul 0D0C  
    start_initialization 0D2A      __size_of_lcd_cmd_hf 001A      __size_of_lcd_gotoxy 0034  
               ??___wmul 002D         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 004B  
      __size_of_lcd_init 00BA        __size_of_high_isr 0A14              sprintf@flag 0042  
      __size_of_lcd_putc 003A              sprintf@prec 0041         ___lwdiv@dividend 0029  
              __pintcode 0008                 ?___lwdiv 0029                 ?___lwmod 0030  
            __pintcodelo 0018                 ?_lcd_cmd 0001                 ?_lcd_lat 0001  
               ?_lcd_dwr 0001                 ?_lcd_msg 002D              __smallconst 0600  
               ?_isdigit 0001                 ?_low_isr 0001         ___lwdiv@quotient 002D  
         __size_of_manda 002C                 ?_sprintf 0035           ___wmul@product 002D  
               _RCONbits 000FD0         __CFG_WDTPS$32768 000000        ___wmul@multiplier 0029  
           ??_lcd_cmd_hf 002A                lcd_putc@c 002C             ??_lcd_gotoxy 002D  
              manda@dato 0029                 __Hrparam 0000                 __Lrparam 0000  
     __end_of_lcd_cmd_hf 0D5E       __end_of_lcd_gotoxy 0CBA         __size_of___lwdiv 0052  
       __size_of___lwmod 0042              _isdigit$511 002A         __size_of_lcd_cmd 004A  
       __size_of_lcd_lat 0014         __size_of_lcd_dwr 0046         __size_of_lcd_msg 0052  
             sprintf@val 0043         __size_of_isdigit 001E          ___lwdiv@divisor 002B  
        ___lwdiv@counter 002F         __size_of_low_isr 00AE                 __ptext10 0D44  
               __ptext11 0C86                 __ptext12 0B7A                 __ptext13 0CBA  
               __ptext14 0D5E                 _lcd_init 0A1C                 _high_isr 0008  
               _lcd_putc 0C4C         __size_of_sprintf 0234            __size_of_main 0100  
               int$flags 0057                 lcd_cmd@x 002B                 lcd_dwr@x 002B  
               lcd_msg@c 002D               _INTCONbits 000FF2                 isdigit@c 002B  
               intlevel1 0000                 intlevel2 0000                sprintf@ap 003F  
              sprintf@sp 0035         ___lwmod@dividend 0030                 sprintf@c 0047  
               sprintf@f 0037          ___lwmod@divisor 0032          ___lwmod@counter 0034  
