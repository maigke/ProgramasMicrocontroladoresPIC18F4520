

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Feb 18 04:42:41 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 1.44
    15                           ; Generated 14/09/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F45K50 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     _LATCbits	set	3979
    49  0000                     _LATDbits	set	3980
    50  0000                     _TRISCbits	set	3988
    51  0000                     _TRISDbits	set	3989
    52  0000                     _PORTA	set	3968
    53                           
    54                           ; #config settings
    55  0000                     
    56                           	psect	cinit
    57  007DC4                     __pcinit:
    58                           	opt stack 0
    59  007DC4                     start_initialization:
    60                           	opt stack 0
    61  007DC4                     __initialization:
    62                           	opt stack 0
    63  007DC4                     end_of_initialization:
    64                           	opt stack 0
    65  007DC4                     __end_of__initialization:
    66                           	opt stack 0
    67  007DC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
    68  007DC6  6EF8               	movwf	tblptru,c
    69  007DC8  0100               	movlb	0
    70  007DCA  EF85  F03F         	goto	_main	;jump to C main() function
    71                           tblptru	equ	0xFF8
    72                           
    73                           	psect	cstackCOMRAM
    74  000001                     __pcstackCOMRAM:
    75                           	opt stack 0
    76  000001                     display@valor:
    77                           	opt stack 0
    78  000001                     rota@display:
    79                           	opt stack 0
    80  000001                     bin2dec@val:
    81                           	opt stack 0
    82                           
    83                           ; 2 bytes @ 0x0
    84  000001                     	ds	2
    85  000003                     bin2dec@pu:
    86                           	opt stack 0
    87                           
    88                           ; 2 bytes @ 0x2
    89  000003                     	ds	2
    90  000005                     bin2dec@pd:
    91                           	opt stack 0
    92                           
    93                           ; 2 bytes @ 0x4
    94  000005                     	ds	2
    95  000007                     bin2dec@pc:
    96                           	opt stack 0
    97                           
    98                           ; 2 bytes @ 0x6
    99  000007                     	ds	2
   100  000009                     bin2dec@pum:
   101                           	opt stack 0
   102                           
   103                           ; 2 bytes @ 0x8
   104  000009                     	ds	2
   105  00000B                     bin2dec@temp:
   106                           	opt stack 0
   107                           
   108                           ; 2 bytes @ 0xA
   109  00000B                     	ds	2
   110  00000D                     ??_main:
   111                           
   112                           ; 1 bytes @ 0xC
   113  00000D                     	ds	1
   114  00000E                     main@valor:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0xD
   118  00000E                     	ds	2
   119  000010                     main@u:
   120                           	opt stack 0
   121                           
   122                           ; 1 bytes @ 0xF
   123  000010                     	ds	1
   124  000011                     main@d:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x10
   128  000011                     	ds	1
   129  000012                     main@c:
   130                           	opt stack 0
   131                           
   132                           ; 1 bytes @ 0x11
   133  000012                     	ds	1
   134  000013                     main@um:
   135                           	opt stack 0
   136                           
   137                           ; 1 bytes @ 0x12
   138  000013                     	ds	1
   139                           tblptru	equ	0xFF8
   140                           
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 67 in file "Teclado_3.c"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;  valor           2   13[COMRAM] int 
   151 ;;  um              1   18[COMRAM] unsigned char 
   152 ;;  c               1   17[COMRAM] unsigned char 
   153 ;;  d               1   16[COMRAM] unsigned char 
   154 ;;  u               1   15[COMRAM] unsigned char 
   155 ;; Return value:  Size  Location     Type
   156 ;;                  1    wreg      void 
   157 ;; Registers used:
   158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   159 ;; Tracked objects:
   160 ;;		On entry : 0/0
   161 ;;		On exit  : 0/0
   162 ;;		Unchanged: 0/0
   163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   164 ;;      Params:         0       0       0       0       0       0       0       0       0
   165 ;;      Locals:         6       0       0       0       0       0       0       0       0
   166 ;;      Temps:          1       0       0       0       0       0       0       0       0
   167 ;;      Totals:         7       0       0       0       0       0       0       0       0
   168 ;;Total ram usage:        7 bytes
   169 ;; Hardware stack levels required when called:    1
   170 ;; This function calls:
   171 ;;		_bin2dec
   172 ;;		_display
   173 ;;		_rota
   174 ;; This function is called by:
   175 ;;		Startup code after reset
   176 ;; This function uses a non-reentrant model
   177 ;;
   178                           
   179                           	psect	text0
   180  007F0A                     __ptext0:
   181                           	opt stack 0
   182  007F0A                     _main:
   183                           	opt stack 30
   184                           
   185                           ;Teclado_3.c: 69: unsigned char u=0,d=0,c=0,um=0;
   186                           
   187                           ;incstack = 0
   188  007F0A  0E00               	movlw	0
   189  007F0C  6E10               	movwf	main@u,c
   190  007F0E  0E00               	movlw	0
   191  007F10  6E11               	movwf	main@d,c
   192  007F12  0E00               	movlw	0
   193  007F14  6E12               	movwf	main@c,c
   194  007F16  0E00               	movlw	0
   195  007F18  6E13               	movwf	main@um,c
   196                           
   197                           ;Teclado_3.c: 70: int valor = 9347;
   198  007F1A  0E24               	movlw	36
   199  007F1C  6E0F               	movwf	main@valor+1,c
   200  007F1E  0E83               	movlw	131
   201  007F20  6E0E               	movwf	main@valor,c
   202                           
   203                           ;Teclado_3.c: 73: (*(&(*(&PORTA + 0x12))) &=~ (1<<(2)));
   204  007F22  9492               	bcf	3986,2,c	;volatile
   205                           
   206                           ;Teclado_3.c: 74: (*(&(*(&PORTA + 0x12))) &=~ (1<<(3)));
   207  007F24  9692               	bcf	3986,3,c	;volatile
   208                           
   209                           ;Teclado_3.c: 75: (*(&(*(&PORTA + 0x12))) &=~ (1<<(4)));
   210  007F26  9892               	bcf	3986,4,c	;volatile
   211                           
   212                           ;Teclado_3.c: 76: (*(&(*(&PORTA + 0x12))) &=~ (1<<(5)));
   213  007F28  9A92               	bcf	3986,5,c	;volatile
   214                           
   215                           ;Teclado_3.c: 78: TRISDbits.TRISD1 = 0;
   216  007F2A  9295               	bcf	3989,1,c	;volatile
   217                           
   218                           ;Teclado_3.c: 79: TRISCbits.TRISC1 = 0;
   219  007F2C  9294               	bcf	3988,1,c	;volatile
   220                           
   221                           ;Teclado_3.c: 80: TRISCbits.TRISC2 = 0;
   222  007F2E  9494               	bcf	3988,2,c	;volatile
   223                           
   224                           ;Teclado_3.c: 81: TRISDbits.TRISD0 = 0;
   225  007F30  9095               	bcf	3989,0,c	;volatile
   226                           
   227                           ;Teclado_3.c: 82: TRISDbits.TRISD2 = 0;
   228  007F32  9495               	bcf	3989,2,c	;volatile
   229                           
   230                           ;Teclado_3.c: 83: TRISDbits.TRISD3 = 0;
   231  007F34  9695               	bcf	3989,3,c	;volatile
   232                           
   233                           ;Teclado_3.c: 84: TRISCbits.TRISC6 = 0;
   234  007F36  9C94               	bcf	3988,6,c	;volatile
   235                           
   236                           ;Teclado_3.c: 85: TRISCbits.TRISC7 = 0;
   237  007F38  9E94               	bcf	3988,7,c	;volatile
   238                           
   239                           ;Teclado_3.c: 87: bin2dec(valor, &u,&d,&c,&um);
   240  007F3A  C00E  F001         	movff	main@valor,bin2dec@val
   241  007F3E  C00F  F002         	movff	main@valor+1,bin2dec@val+1
   242  007F42  0E10               	movlw	low main@u
   243  007F44  6E03               	movwf	bin2dec@pu,c
   244  007F46  0E00               	movlw	high main@u
   245  007F48  6E04               	movwf	bin2dec@pu+1,c
   246  007F4A  0E11               	movlw	low main@d
   247  007F4C  6E05               	movwf	bin2dec@pd,c
   248  007F4E  0E00               	movlw	high main@d
   249  007F50  6E06               	movwf	bin2dec@pd+1,c
   250  007F52  0E12               	movlw	low main@c
   251  007F54  6E07               	movwf	bin2dec@pc,c
   252  007F56  0E00               	movlw	high main@c
   253  007F58  6E08               	movwf	bin2dec@pc+1,c
   254  007F5A  0E13               	movlw	low main@um
   255  007F5C  6E09               	movwf	bin2dec@pum,c
   256  007F5E  0E00               	movlw	high main@um
   257  007F60  6E0A               	movwf	bin2dec@pum+1,c
   258  007F62  EC3A  F03F         	call	_bin2dec	;wreg free
   259                           
   260                           ;Teclado_3.c: 88: _delay((unsigned long)((5)*(4000000/4000.0)));
   261  007F66  0E07               	movlw	7
   262  007F68  6E0D               	movwf	??_main& (0+255),c
   263  007F6A  0E7D               	movlw	125
   264  007F6C                     u177:
   265  007F6C  2EE8               	decfsz	wreg,f,c
   266  007F6E  D7FE               	bra	u177
   267  007F70  2E0D               	decfsz	??_main& (0+255),f,c
   268  007F72  D7FC               	bra	u177
   269  007F74  F000               	nop	
   270                           
   271                           ;Teclado_3.c: 89: display(um);
   272  007F76  5013               	movf	main@um,w,c
   273  007F78  EC10  F03F         	call	_display
   274                           
   275                           ;Teclado_3.c: 90: rota(3);
   276  007F7C  0E03               	movlw	3
   277  007F7E  ECE7  F03E         	call	_rota
   278                           
   279                           ;Teclado_3.c: 91: _delay((unsigned long)((5)*(4000000/4000.0)));
   280  007F82  0E07               	movlw	7
   281  007F84  6E0D               	movwf	??_main& (0+255),c
   282  007F86  0E7D               	movlw	125
   283  007F88                     u187:
   284  007F88  2EE8               	decfsz	wreg,f,c
   285  007F8A  D7FE               	bra	u187
   286  007F8C  2E0D               	decfsz	??_main& (0+255),f,c
   287  007F8E  D7FC               	bra	u187
   288  007F90  F000               	nop	
   289                           
   290                           ;Teclado_3.c: 92: display(c);
   291  007F92  5012               	movf	main@c,w,c
   292  007F94  EC10  F03F         	call	_display
   293                           
   294                           ;Teclado_3.c: 93: rota(2);
   295  007F98  0E02               	movlw	2
   296  007F9A  ECE7  F03E         	call	_rota
   297                           
   298                           ;Teclado_3.c: 94: _delay((unsigned long)((5)*(4000000/4000.0)));
   299  007F9E  0E07               	movlw	7
   300  007FA0  6E0D               	movwf	??_main& (0+255),c
   301  007FA2  0E7D               	movlw	125
   302  007FA4                     u197:
   303  007FA4  2EE8               	decfsz	wreg,f,c
   304  007FA6  D7FE               	bra	u197
   305  007FA8  2E0D               	decfsz	??_main& (0+255),f,c
   306  007FAA  D7FC               	bra	u197
   307  007FAC  F000               	nop	
   308                           
   309                           ;Teclado_3.c: 95: display(d);
   310  007FAE  5011               	movf	main@d,w,c
   311  007FB0  EC10  F03F         	call	_display
   312                           
   313                           ;Teclado_3.c: 96: rota(1);
   314  007FB4  0E01               	movlw	1
   315  007FB6  ECE7  F03E         	call	_rota
   316                           
   317                           ;Teclado_3.c: 97: _delay((unsigned long)((5)*(4000000/4000.0)));
   318  007FBA  0E07               	movlw	7
   319  007FBC  6E0D               	movwf	??_main& (0+255),c
   320  007FBE  0E7D               	movlw	125
   321  007FC0                     u207:
   322  007FC0  2EE8               	decfsz	wreg,f,c
   323  007FC2  D7FE               	bra	u207
   324  007FC4  2E0D               	decfsz	??_main& (0+255),f,c
   325  007FC6  D7FC               	bra	u207
   326  007FC8  F000               	nop	
   327                           
   328                           ;Teclado_3.c: 98: display(u);
   329  007FCA  5010               	movf	main@u,w,c
   330  007FCC  EC10  F03F         	call	_display
   331                           
   332                           ;Teclado_3.c: 99: rota(0);
   333  007FD0  0E00               	movlw	0
   334  007FD2  ECE7  F03E         	call	_rota
   335                           
   336                           ;Teclado_3.c: 100: _delay((unsigned long)((5)*(4000000/4000.0)));
   337  007FD6  0E07               	movlw	7
   338  007FD8  6E0D               	movwf	??_main& (0+255),c
   339  007FDA  0E7D               	movlw	125
   340  007FDC                     u217:
   341  007FDC  2EE8               	decfsz	wreg,f,c
   342  007FDE  D7FE               	bra	u217
   343  007FE0  2E0D               	decfsz	??_main& (0+255),f,c
   344  007FE2  D7FC               	bra	u217
   345  007FE4  F000               	nop	
   346                           
   347                           ;Teclado_3.c: 101: rota(4);
   348  007FE6  0E04               	movlw	4
   349  007FE8  ECE7  F03E         	call	_rota
   350                           
   351                           ;Teclado_3.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
   352  007FEC  0E07               	movlw	7
   353  007FEE  6E0D               	movwf	??_main& (0+255),c
   354  007FF0  0E7D               	movlw	125
   355  007FF2                     u227:
   356  007FF2  2EE8               	decfsz	wreg,f,c
   357  007FF4  D7FE               	bra	u227
   358  007FF6  2E0D               	decfsz	??_main& (0+255),f,c
   359  007FF8  D7FC               	bra	u227
   360  007FFA  F000               	nop	
   361                           
   362                           ;Teclado_3.c: 103: return;
   363  007FFC  EF00  F000         	goto	start
   364  008000                     __end_of_main:
   365                           	opt stack 0
   366                           tblptru	equ	0xFF8
   367                           wreg	equ	0xFE8
   368                           
   369 ;; *************** function _rota *****************
   370 ;; Defined at:
   371 ;;		line 162 in file "Teclado_3.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;  display         1    wreg     unsigned char 
   374 ;; Auto vars:     Size  Location     Type
   375 ;;  display         1    0[COMRAM] unsigned char 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, status,2, status,0
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   385 ;;      Params:         0       0       0       0       0       0       0       0       0
   386 ;;      Locals:         1       0       0       0       0       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0       0       0       0       0
   388 ;;      Totals:         1       0       0       0       0       0       0       0       0
   389 ;;Total ram usage:        1 bytes
   390 ;; Hardware stack levels used:    1
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text1
   399  007DCE                     __ptext1:
   400                           	opt stack 0
   401  007DCE                     _rota:
   402                           	opt stack 30
   403                           
   404                           ;incstack = 0
   405                           ;rota@display stored from wreg
   406  007DCE  6E01               	movwf	rota@display,c
   407                           
   408                           ;Teclado_3.c: 164: switch (display) {
   409  007DD0  D019               	goto	l60
   410  007DD2                     
   411                           ;Teclado_3.c: 166: (*(&(*(&PORTA + 0x09))) |= (1<<(2)));
   412  007DD2  8489               	bsf	3977,2,c	;volatile
   413                           
   414                           ;Teclado_3.c: 167: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   415  007DD4  9689               	bcf	3977,3,c	;volatile
   416                           
   417                           ;Teclado_3.c: 168: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   418  007DD6  9889               	bcf	3977,4,c	;volatile
   419                           
   420                           ;Teclado_3.c: 169: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   421  007DD8  9A89               	bcf	3977,5,c	;volatile
   422                           
   423                           ;Teclado_3.c: 170: break;
   424  007DDA  0012               	return	
   425  007DDC                     
   426                           ;Teclado_3.c: 172: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   427  007DDC  9489               	bcf	3977,2,c	;volatile
   428                           
   429                           ;Teclado_3.c: 173: (*(&(*(&PORTA + 0x09))) |= (1<<(3)));
   430  007DDE  8689               	bsf	3977,3,c	;volatile
   431                           
   432                           ;Teclado_3.c: 174: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   433  007DE0  9889               	bcf	3977,4,c	;volatile
   434                           
   435                           ;Teclado_3.c: 175: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   436  007DE2  9A89               	bcf	3977,5,c	;volatile
   437                           
   438                           ;Teclado_3.c: 176: break;
   439  007DE4  0012               	return	
   440  007DE6                     
   441                           ;Teclado_3.c: 178: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   442  007DE6  9489               	bcf	3977,2,c	;volatile
   443                           
   444                           ;Teclado_3.c: 179: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   445  007DE8  9689               	bcf	3977,3,c	;volatile
   446                           
   447                           ;Teclado_3.c: 180: (*(&(*(&PORTA + 0x09))) |= (1<<(4)));
   448  007DEA  8889               	bsf	3977,4,c	;volatile
   449                           
   450                           ;Teclado_3.c: 181: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   451  007DEC  9A89               	bcf	3977,5,c	;volatile
   452                           
   453                           ;Teclado_3.c: 182: break;
   454  007DEE  0012               	return	
   455  007DF0                     
   456                           ;Teclado_3.c: 184: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   457  007DF0  9489               	bcf	3977,2,c	;volatile
   458                           
   459                           ;Teclado_3.c: 185: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   460  007DF2  9689               	bcf	3977,3,c	;volatile
   461                           
   462                           ;Teclado_3.c: 186: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   463  007DF4  9889               	bcf	3977,4,c	;volatile
   464                           
   465                           ;Teclado_3.c: 187: (*(&(*(&PORTA + 0x09))) |= (1<<(5)));
   466  007DF6  8A89               	bsf	3977,5,c	;volatile
   467                           
   468                           ;Teclado_3.c: 188: break;
   469  007DF8  0012               	return	
   470  007DFA                     
   471                           ;Teclado_3.c: 190: (*(&(*(&PORTA + 0x09))) &=~ (1<<(2)));
   472  007DFA  9489               	bcf	3977,2,c	;volatile
   473                           
   474                           ;Teclado_3.c: 191: (*(&(*(&PORTA + 0x09))) &=~ (1<<(3)));
   475  007DFC  9689               	bcf	3977,3,c	;volatile
   476                           
   477                           ;Teclado_3.c: 192: (*(&(*(&PORTA + 0x09))) &=~ (1<<(4)));
   478  007DFE  9889               	bcf	3977,4,c	;volatile
   479                           
   480                           ;Teclado_3.c: 193: (*(&(*(&PORTA + 0x09))) &=~ (1<<(5)));
   481  007E00  9A89               	bcf	3977,5,c	;volatile
   482                           
   483                           ;Teclado_3.c: 194: }
   484  007E02  0012               	return	
   485  007E04                     l60:
   486  007E04  5001               	movf	rota@display,w,c
   487                           
   488                           ; Switch size 1, requested type "space"
   489                           ; Number of cases is 4, Range of values is 0 to 3
   490                           ; switch strategies available:
   491                           ; Name         Instructions Cycles
   492                           ; simple_byte           13     7 (average)
   493                           ;	Chosen strategy is simple_byte
   494  007E06  0A00               	xorlw	0	; case 0
   495  007E08  B4D8               	btfsc	status,2,c
   496  007E0A  D7E3               	goto	l61
   497  007E0C  0A01               	xorlw	1	; case 1
   498  007E0E  B4D8               	btfsc	status,2,c
   499  007E10  D7E5               	goto	l63
   500  007E12  0A03               	xorlw	3	; case 2
   501  007E14  B4D8               	btfsc	status,2,c
   502  007E16  D7E7               	goto	l64
   503  007E18  0A01               	xorlw	1	; case 3
   504  007E1A  B4D8               	btfsc	status,2,c
   505  007E1C  D7E9               	goto	l65
   506  007E1E  D7ED               	goto	l66
   507  007E20                     __end_of_rota:
   508                           	opt stack 0
   509                           tblptru	equ	0xFF8
   510                           wreg	equ	0xFE8
   511                           status	equ	0xFD8
   512                           
   513 ;; *************** function _display *****************
   514 ;; Defined at:
   515 ;;		line 135 in file "Teclado_3.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  valor           1    wreg     unsigned char 
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  valor           1    0[COMRAM] unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   529 ;;      Params:         0       0       0       0       0       0       0       0       0
   530 ;;      Locals:         1       0       0       0       0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0
   532 ;;      Totals:         1       0       0       0       0       0       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; This function calls:
   536 ;;		Nothing
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text2
   543  007E20                     __ptext2:
   544                           	opt stack 0
   545  007E20                     _display:
   546                           	opt stack 30
   547                           
   548                           ;incstack = 0
   549                           ;display@valor stored from wreg
   550  007E20  6E01               	movwf	display@valor,c
   551                           
   552                           ;Teclado_3.c: 137: if (valor & (1 << 0)) LATDbits.LATD1 = 1;
   553  007E22  A001               	btfss	display@valor,0,c
   554  007E24  D002               	goto	l41
   555  007E26  828C               	bsf	3980,1,c	;volatile
   556  007E28  D001               	goto	l42
   557  007E2A                     l41:
   558                           
   559                           ;Teclado_3.c: 138: else LATDbits.LATD1 = 0;
   560  007E2A  928C               	bcf	3980,1,c	;volatile
   561  007E2C                     l42:
   562                           
   563                           ;Teclado_3.c: 140: if (valor & (1 << 1)) LATCbits.LATC1 = 1;
   564  007E2C  A201               	btfss	display@valor,1,c
   565  007E2E  D002               	goto	l43
   566  007E30  828B               	bsf	3979,1,c	;volatile
   567  007E32  D001               	goto	l44
   568  007E34                     l43:
   569                           
   570                           ;Teclado_3.c: 141: else LATCbits.LATC1 = 0;
   571  007E34  928B               	bcf	3979,1,c	;volatile
   572  007E36                     l44:
   573                           
   574                           ;Teclado_3.c: 143: if (valor & (1 << 2)) LATCbits.LATC2 = 1;
   575  007E36  A401               	btfss	display@valor,2,c
   576  007E38  D002               	goto	l45
   577  007E3A  848B               	bsf	3979,2,c	;volatile
   578  007E3C  D001               	goto	l46
   579  007E3E                     l45:
   580                           
   581                           ;Teclado_3.c: 144: else LATCbits.LATC2 = 0;
   582  007E3E  948B               	bcf	3979,2,c	;volatile
   583  007E40                     l46:
   584                           
   585                           ;Teclado_3.c: 146: if (valor & (1 << 3)) LATDbits.LATD0 = 1;
   586  007E40  A601               	btfss	display@valor,3,c
   587  007E42  D002               	goto	l47
   588  007E44  808C               	bsf	3980,0,c	;volatile
   589  007E46  D001               	goto	l48
   590  007E48                     l47:
   591                           
   592                           ;Teclado_3.c: 147: else LATDbits.LATD0 = 0;
   593  007E48  908C               	bcf	3980,0,c	;volatile
   594  007E4A                     l48:
   595                           
   596                           ;Teclado_3.c: 149: if (valor & (1 << 4)) LATDbits.LATD2 = 1;
   597  007E4A  A801               	btfss	display@valor,4,c
   598  007E4C  D002               	goto	l49
   599  007E4E  848C               	bsf	3980,2,c	;volatile
   600  007E50  D001               	goto	l50
   601  007E52                     l49:
   602                           
   603                           ;Teclado_3.c: 150: else LATDbits.LATD2 = 0;
   604  007E52  948C               	bcf	3980,2,c	;volatile
   605  007E54                     l50:
   606                           
   607                           ;Teclado_3.c: 152: if (valor & (1 << 5)) LATDbits.LATD3 = 1;
   608  007E54  AA01               	btfss	display@valor,5,c
   609  007E56  D002               	goto	l51
   610  007E58  868C               	bsf	3980,3,c	;volatile
   611  007E5A  D001               	goto	l52
   612  007E5C                     l51:
   613                           
   614                           ;Teclado_3.c: 153: else LATDbits.LATD3 = 0;
   615  007E5C  968C               	bcf	3980,3,c	;volatile
   616  007E5E                     l52:
   617                           
   618                           ;Teclado_3.c: 155: if (valor & (1 << 6)) LATCbits.LATC6 = 1;
   619  007E5E  AC01               	btfss	display@valor,6,c
   620  007E60  D002               	goto	l53
   621  007E62  8C8B               	bsf	3979,6,c	;volatile
   622  007E64  D001               	goto	l54
   623  007E66                     l53:
   624                           
   625                           ;Teclado_3.c: 156: else LATCbits.LATC6 = 0;
   626  007E66  9C8B               	bcf	3979,6,c	;volatile
   627  007E68                     l54:
   628                           
   629                           ;Teclado_3.c: 158: if (valor & (1 << 7)) LATCbits.LATC7 = 1;
   630  007E68  AE01               	btfss	display@valor,7,c
   631  007E6A  D002               	goto	l55
   632  007E6C  8E8B               	bsf	3979,7,c	;volatile
   633  007E6E  0012               	return	
   634  007E70                     l55:
   635                           
   636                           ;Teclado_3.c: 159: else LATCbits.LATC7 = 0;
   637  007E70  9E8B               	bcf	3979,7,c	;volatile
   638  007E72  0012               	return	
   639  007E74                     __end_of_display:
   640                           	opt stack 0
   641                           tblptru	equ	0xFF8
   642                           wreg	equ	0xFE8
   643                           status	equ	0xFD8
   644                           
   645 ;; *************** function _bin2dec *****************
   646 ;; Defined at:
   647 ;;		line 106 in file "Teclado_3.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;  val             2    0[COMRAM] int 
   650 ;;  pu              2    2[COMRAM] PTR unsigned char 
   651 ;;		 -> main@u(1), 
   652 ;;  pd              2    4[COMRAM] PTR unsigned char 
   653 ;;		 -> main@d(1), 
   654 ;;  pc              2    6[COMRAM] PTR unsigned char 
   655 ;;		 -> main@c(1), 
   656 ;;  pum             2    8[COMRAM] PTR unsigned char 
   657 ;;		 -> main@um(1), 
   658 ;; Auto vars:     Size  Location     Type
   659 ;;  temp            2   10[COMRAM] int 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   669 ;;      Params:        10       0       0       0       0       0       0       0       0
   670 ;;      Locals:         2       0       0       0       0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0       0       0       0       0
   672 ;;      Totals:        12       0       0       0       0       0       0       0       0
   673 ;;Total ram usage:       12 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text3
   683  007E74                     __ptext3:
   684                           	opt stack 0
   685  007E74                     _bin2dec:
   686                           	opt stack 30
   687                           
   688                           ;Teclado_3.c: 111: int temp = val;
   689                           
   690                           ;incstack = 0
   691  007E74  C001  F00B         	movff	bin2dec@val,bin2dec@temp
   692  007E78  C002  F00C         	movff	bin2dec@val+1,bin2dec@temp+1
   693                           
   694                           ;Teclado_3.c: 112: while (temp >=1000)
   695  007E7C  D009               	goto	l26
   696  007E7E                     
   697                           ;Teclado_3.c: 113: {
   698                           ;Teclado_3.c: 114: (*pum)++;
   699  007E7E  C009  FFD9         	movff	bin2dec@pum,fsr2l
   700  007E82  C00A  FFDA         	movff	bin2dec@pum+1,fsr2h
   701  007E86  2ADF               	incf	indf2,f,c
   702                           
   703                           ;Teclado_3.c: 115: temp-=1000;
   704  007E88  0E18               	movlw	24
   705  007E8A  260B               	addwf	bin2dec@temp,f,c
   706  007E8C  0EFC               	movlw	252
   707  007E8E  220C               	addwfc	bin2dec@temp+1,f,c
   708  007E90                     l26:
   709  007E90  BE0C               	btfsc	bin2dec@temp+1,7,c
   710  007E92  D010               	goto	l29
   711  007E94  0EE8               	movlw	232
   712  007E96  5C0B               	subwf	bin2dec@temp,w,c
   713  007E98  0E03               	movlw	3
   714  007E9A  580C               	subwfb	bin2dec@temp+1,w,c
   715  007E9C  A0D8               	btfss	status,0,c
   716  007E9E  D00A               	goto	l29
   717  007EA0  D7EE               	goto	l27
   718  007EA2                     l829:
   719                           
   720                           ;Teclado_3.c: 119: {
   721                           ;Teclado_3.c: 120: (*pc)++;
   722  007EA2  C007  FFD9         	movff	bin2dec@pc,fsr2l
   723  007EA6  C008  FFDA         	movff	bin2dec@pc+1,fsr2h
   724  007EAA  2ADF               	incf	indf2,f,c
   725                           
   726                           ;Teclado_3.c: 121: temp-=100;
   727  007EAC  0E9C               	movlw	156
   728  007EAE  260B               	addwf	bin2dec@temp,f,c
   729  007EB0  0EFF               	movlw	255
   730  007EB2  220C               	addwfc	bin2dec@temp+1,f,c
   731  007EB4                     l29:
   732  007EB4  BE0C               	btfsc	bin2dec@temp+1,7,c
   733  007EB6  D010               	goto	l32
   734  007EB8  500C               	movf	bin2dec@temp+1,w,c
   735  007EBA  E1F3               	bnz	l829
   736  007EBC  0E64               	movlw	100
   737  007EBE  5C0B               	subwf	bin2dec@temp,w,c
   738  007EC0  A0D8               	btfss	status,0,c
   739  007EC2  D00A               	goto	l32
   740  007EC4  D7EE               	goto	l30
   741  007EC6                     l835:
   742                           
   743                           ;Teclado_3.c: 124: {
   744                           ;Teclado_3.c: 125: (*pd)++;
   745  007EC6  C005  FFD9         	movff	bin2dec@pd,fsr2l
   746  007ECA  C006  FFDA         	movff	bin2dec@pd+1,fsr2h
   747  007ECE  2ADF               	incf	indf2,f,c
   748                           
   749                           ;Teclado_3.c: 126: temp-=10;
   750  007ED0  0EF6               	movlw	246
   751  007ED2  260B               	addwf	bin2dec@temp,f,c
   752  007ED4  0EFF               	movlw	255
   753  007ED6  220C               	addwfc	bin2dec@temp+1,f,c
   754  007ED8                     l32:
   755  007ED8  BE0C               	btfsc	bin2dec@temp+1,7,c
   756  007EDA  D00F               	goto	l35
   757  007EDC  500C               	movf	bin2dec@temp+1,w,c
   758  007EDE  E1F3               	bnz	l835
   759  007EE0  0E0A               	movlw	10
   760  007EE2  5C0B               	subwf	bin2dec@temp,w,c
   761  007EE4  A0D8               	btfss	status,0,c
   762  007EE6  D009               	goto	l35
   763  007EE8  D7EE               	goto	l33
   764  007EEA                     l841:
   765                           
   766                           ;Teclado_3.c: 129: {
   767                           ;Teclado_3.c: 130: (*pu)++;
   768  007EEA  C003  FFD9         	movff	bin2dec@pu,fsr2l
   769  007EEE  C004  FFDA         	movff	bin2dec@pu+1,fsr2h
   770  007EF2  2ADF               	incf	indf2,f,c
   771                           
   772                           ;Teclado_3.c: 131: temp--;
   773  007EF4  060B               	decf	bin2dec@temp,f,c
   774  007EF6  A0D8               	btfss	status,0,c
   775  007EF8  060C               	decf	bin2dec@temp+1,f,c
   776  007EFA                     l35:
   777  007EFA  BE0C               	btfsc	bin2dec@temp+1,7,c
   778  007EFC  0012               	return	
   779  007EFE  500C               	movf	bin2dec@temp+1,w,c
   780  007F00  E1F4               	bnz	l841
   781  007F02  040B               	decf	bin2dec@temp,w,c
   782  007F04  A0D8               	btfss	status,0,c
   783  007F06  0012               	return	
   784  007F08  D7F0               	goto	l36
   785  007F0A                     __end_of_bin2dec:
   786                           	opt stack 0
   787  0000                     tblptru	equ	0xFF8
   788                           wreg	equ	0xFE8
   789                           indf2	equ	0xFDF
   790                           fsr2h	equ	0xFDA
   791                           fsr2l	equ	0xFD9
   792                           status	equ	0xFD8
   793                           tblptru	equ	0xFF8
   794                           wreg	equ	0xFE8
   795                           indf2	equ	0xFDF
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800                           	psect	rparam
   801  0000                     tblptru	equ	0xFF8
   802                           wreg	equ	0xFE8
   803                           indf2	equ	0xFDF
   804                           fsr2h	equ	0xFDA
   805                           fsr2l	equ	0xFD9
   806                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    bin2dec@pu	PTR unsigned char  size(2) Largest target is 1
		 -> main@u(COMRAM[1]), 

    bin2dec@pd	PTR unsigned char  size(2) Largest target is 1
		 -> main@d(COMRAM[1]), 

    bin2dec@pc	PTR unsigned char  size(2) Largest target is 1
		 -> main@c(COMRAM[1]), 

    bin2dec@pum	PTR unsigned char  size(2) Largest target is 1
		 -> main@um(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_bin2dec

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     929
                                             12 COMRAM     7     7      0
                            _bin2dec
                            _display
                               _rota
 ---------------------------------------------------------------------------------
 (1) _rota                                                 1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0     120
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bin2dec                                             12     2     10     583
                                              0 COMRAM    12     2     10
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bin2dec
   _display
   _rota

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     13      13       1       20.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Feb 18 04:42:41 2018

                     l30 7EA2                       l32 7ED8                       l33 7EC6  
                     l41 7E2A                       l26 7E90                       l50 7E54  
                     l42 7E2C                       l35 7EFA                       l27 7E7E  
                     l51 7E5C                       l43 7E34                       l36 7EEA  
                     l52 7E5E                       l44 7E36                       l60 7E04  
                     l29 7EB4                       l53 7E66                       l45 7E3E  
                     l61 7DD2                       l54 7E68                       l46 7E40  
                     l55 7E70                       l47 7E48                       l63 7DDC  
                     l48 7E4A                       l64 7DE6                       l49 7E52  
                     l65 7DF0                       l66 7DFA             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l841 7EEA                      l835 7EC6  
                    l829 7EA2             __CFG_CPB$OFF 000000                      u207 7FC0  
                    u217 7FDC                      u227 7FF2                      u177 7F6C  
           __CFG_CPD$OFF 000000                      u187 7F88                      u197 7FA4  
                    wreg 000FE8             __CFG_FOSC$XT 000000                     _main 7F0A  
                   _rota 7DCE                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9            __CFG_BORV$190 000000                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    ?_rota 0001          __end_of_bin2dec 7F0A  
                  _PORTA 000F80            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000          __end_of_display 7E74  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000             display@valor 0001  
         __CFG_EBTRB$OFF 000000                    main@c 0012                    main@d 0011  
                  main@u 0010           __CFG_BOREN$OFF 000000                    status 000FD8  
         __CFG_T3CMX$RC0 000000           __CFG_ICPRT$OFF 000000          __initialization 7DC4  
           __end_of_main 8000             __end_of_rota 7E20           __CFG_PCLKEN$ON 000000  
                 ??_main 000D                   ??_rota 0001            __activetblptr 000002  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000           __CFG_WDTEN$OFF 000000  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??_bin2dec 000B  
                 main@um 0013                ??_display 0001                   tblptru 000FF8  
   __CFG_LS48MHZ$SYS24X4 000000               __accesstop 0060  __end_of__initialization 7DC4  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
             bin2dec@val 0001               bin2dec@pum 0009        __CFG_PLLSEL$PLL4X 000000  
                __Hparam 0000                  __Lparam 0000                  _bin2dec 7E74  
                __pcinit 7DC4                  __ramtop 0800                  __ptext0 7F0A  
                __ptext1 7DCE                  __ptext2 7E20                  __ptext3 7E74  
                _display 7E20     end_of_initialization 7DC4            __Lmediumconst 0000  
            rota@display 0001                _TRISCbits 000F94                _TRISDbits 000F95  
    start_initialization 7DC4          __CFG_nLPBOR$OFF 000000          __CFG_nPWRTEN$ON 000000  
            bin2dec@temp 000B                bin2dec@pc 0007                bin2dec@pd 0005  
              bin2dec@pu 0003                 ?_bin2dec 0001                 ?_display 0001  
               _LATCbits 000F8B                 _LATDbits 000F8C         __CFG_WDTPS$32768 000000  
              main@valor 000E        __CFG_CFGPLLEN$OFF 000000                 __Hrparam 0000  
               __Lrparam 0000         __size_of_bin2dec 0096         __size_of_display 0054  
          __size_of_main 00F6            __size_of_rota 0052     __CFG_CPUDIV$NOCLKDIV 000000  
