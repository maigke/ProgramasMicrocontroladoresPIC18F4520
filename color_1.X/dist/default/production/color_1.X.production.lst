

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 12 19:28:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4520 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt stack 0
    88  000600  00                 	db	0
    89  000601                     _dpowers:
    90                           	opt stack 0
    91  000601  0001               	dw	1
    92  000603  0000               	dw	0
    93  000605  000A               	dw	10
    94  000607  0000               	dw	0
    95  000609  0064               	dw	100
    96  00060B  0000               	dw	0
    97  00060D  03E8               	dw	1000
    98  00060F  0000               	dw	0
    99  000611  2710               	dw	10000
   100  000613  0000               	dw	0
   101  000615  86A0               	dw	34464
   102  000617  0001               	dw	1
   103  000619  4240               	dw	16960
   104  00061B  000F               	dw	15
   105  00061D  9680               	dw	38528
   106  00061F  0098               	dw	152
   107  000621  E100               	dw	57600
   108  000623  05F5               	dw	1525
   109  000625  CA00               	dw	51712
   110  000627  3B9A               	dw	15258
   111  000629                     __end_of_dpowers:
   112                           	opt stack 0
   113  000629                     __powers_:
   114                           	opt stack 0
   115  000629  00                 	db	0
   116  00062A  80                 	db	128
   117  00062B  3F                 	db	63
   118  00062C  00                 	db	0
   119  00062D  20                 	db	32
   120  00062E  41                 	db	65
   121  00062F  00                 	db	0
   122  000630  C8                 	db	200
   123  000631  42                 	db	66
   124  000632  00                 	db	0
   125  000633  7A                 	db	122
   126  000634  44                 	db	68
   127  000635  40                 	db	64
   128  000636  1C                 	db	28
   129  000637  46                 	db	70
   130  000638  50                 	db	80
   131  000639  C3                 	db	195
   132  00063A  47                 	db	71
   133  00063B  24                 	db	36
   134  00063C  74                 	db	116
   135  00063D  49                 	db	73
   136  00063E  97                 	db	151
   137  00063F  18                 	db	24
   138  000640  4B                 	db	75
   139  000641  BC                 	db	188
   140  000642  BE                 	db	190
   141  000643  4C                 	db	76
   142  000644  6B                 	db	107
   143  000645  6E                 	db	110
   144  000646  4E                 	db	78
   145  000647  03                 	db	3
   146  000648  15                 	db	21
   147  000649  50                 	db	80
   148  00064A  79                 	db	121
   149  00064B  AD                 	db	173
   150  00064C  60                 	db	96
   151  00064D  F3                 	db	243
   152  00064E  49                 	db	73
   153  00064F  71                 	db	113
   154  000650                     __end_of__powers_:
   155                           	opt stack 0
   156  000650                     __npowers_:
   157                           	opt stack 0
   158  000650  00                 	db	0
   159  000651  80                 	db	128
   160  000652  3F                 	db	63
   161  000653  CD                 	db	205
   162  000654  CC                 	db	204
   163  000655  3D                 	db	61
   164  000656  D7                 	db	215
   165  000657  23                 	db	35
   166  000658  3C                 	db	60
   167  000659  12                 	db	18
   168  00065A  83                 	db	131
   169  00065B  3A                 	db	58
   170  00065C  B7                 	db	183
   171  00065D  D1                 	db	209
   172  00065E  38                 	db	56
   173  00065F  C6                 	db	198
   174  000660  27                 	db	39
   175  000661  37                 	db	55
   176  000662  38                 	db	56
   177  000663  86                 	db	134
   178  000664  35                 	db	53
   179  000665  C0                 	db	192
   180  000666  D6                 	db	214
   181  000667  33                 	db	51
   182  000668  CC                 	db	204
   183  000669  2B                 	db	43
   184  00066A  32                 	db	50
   185  00066B  70                 	db	112
   186  00066C  89                 	db	137
   187  00066D  30                 	db	48
   188  00066E  E7                 	db	231
   189  00066F  DB                 	db	219
   190  000670  2E                 	db	46
   191  000671  E5                 	db	229
   192  000672  3C                 	db	60
   193  000673  1E                 	db	30
   194  000674  42                 	db	66
   195  000675  A2                 	db	162
   196  000676  0D                 	db	13
   197  000677                     __end_of__npowers_:
   198                           	opt stack 0
   199  0000                     _TMR1	set	4046
   200  0000                     _PORTB	set	3969
   201  0000                     _PORTD	set	3971
   202  0000                     _T1CONbits	set	4045
   203  0000                     _INTEDG0	set	32654
   204  0000                     _INT0IE	set	32660
   205  0000                     _GIEL	set	32662
   206  0000                     _GIEH	set	32663
   207  0000                     _IPEN	set	32391
   208  0000                     _TMR1IE	set	31976
   209  0000                     _TMR1IP	set	31992
   210  0000                     _TMR1ON	set	32360
   211  0000                     _TMR1CS	set	32361
   212  0000                     _T1CKPS0	set	32364
   213  0000                     _T1CKPS1	set	32365
   214  0000                     _INT0IF	set	32657
   215  0000                     _TMR1IF	set	31984
   216  000677                     STR_1:
   217  000677  46                 	db	70	;'F'
   218  000678  72                 	db	114	;'r'
   219  000679  65                 	db	101	;'e'
   220  00067A  63                 	db	99	;'c'
   221  00067B  75                 	db	117	;'u'
   222  00067C  65                 	db	101	;'e'
   223  00067D  6E                 	db	110	;'n'
   224  00067E  63                 	db	99	;'c'
   225  00067F  69                 	db	105	;'i'
   226  000680  61                 	db	97	;'a'
   227  000681  00                 	db	0
   228  000682                     STR_3:
   229  000682  25                 	db	37
   230  000683  35                 	db	53	;'5'
   231  000684  2E                 	db	46
   232  000685  33                 	db	51	;'3'
   233  000686  66                 	db	102	;'f'
   234  000687  00                 	db	0
   235  000688                     STR_2:
   236  000688  3A                 	db	58	;':'
   237  000689  29                 	db	41
   238  00068A  00                 	db	0
   239                           
   240                           ; #config settings
   241  00068B  00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           	psect	cinit
   244  002500                     __pcinit:
   245                           	opt stack 0
   246  002500                     start_initialization:
   247                           	opt stack 0
   248  002500                     __initialization:
   249                           	opt stack 0
   250                           
   251                           ; Clear objects allocated to BANK0 (16 bytes)
   252  002500  EE00  F0D9         	lfsr	0,__pbssBANK0
   253  002504  0E10               	movlw	16
   254  002506                     clear_0:
   255  002506  6AEE               	clrf	postinc0,c
   256  002508  06E8               	decf	wreg,f,c
   257  00250A  E1FD               	bnz	clear_0
   258                           
   259                           ; Clear objects allocated to COMRAM (7 bytes)
   260  00250C  EE00  F04B         	lfsr	0,__pbssCOMRAM
   261  002510  0E07               	movlw	7
   262  002512                     clear_1:
   263  002512  6AEE               	clrf	postinc0,c
   264  002514  06E8               	decf	wreg,f,c
   265  002516  E1FD               	bnz	clear_1
   266  002518                     end_of_initialization:
   267                           	opt stack 0
   268  002518                     __end_of__initialization:
   269                           	opt stack 0
   270  002518  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   271  00251A  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   272  00251C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   273  00251E  6EF8               	movwf	tblptru,c
   274  002520  0100               	movlb	0
   275  002522  EFA3  F011         	goto	_main	;jump to C main() function
   276                           tblptru	equ	0xFF8
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	bssCOMRAM
   281  00004B                     __pbssCOMRAM:
   282                           	opt stack 0
   283  00004B                     _overflowCount:
   284                           	opt stack 0
   285  00004B                     	ds	4
   286  00004F                     _lcd:
   287                           	opt stack 0
   288  00004F                     	ds	1
   289  000050                     _triggered:
   290                           	opt stack 0
   291  000050                     	ds	1
   292  000051                     _first:
   293                           	opt stack 0
   294  000051                     	ds	1
   295                           tblptru	equ	0xFF8
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssBANK0
   300  0000D9                     __pbssBANK0:
   301                           	opt stack 0
   302  0000D9                     _finishTime:
   303                           	opt stack 0
   304  0000D9                     	ds	4
   305  0000DD                     _startTime:
   306                           	opt stack 0
   307  0000DD                     	ds	4
   308  0000E1                     _value:
   309                           	opt stack 0
   310  0000E1                     	ds	8
   311                           tblptru	equ	0xFF8
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           
   315                           	psect	cstackBANK0
   316  000080                     __pcstackBANK0:
   317                           	opt stack 0
   318  000080                     ___ftmul@exp:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x0
   322  000080                     	ds	1
   323  000081                     ___ftmul@f3_as_product:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x1
   327  000081                     	ds	3
   328  000084                     ___ftmul@cntr:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x4
   332  000084                     	ds	1
   333  000085                     ___ftmul@sign:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x5
   337  000085                     	ds	1
   338  000086                     ?_fround:
   339                           	opt stack 0
   340  000086                     ?_scale:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x6
   344  000086                     	ds	3
   345  000089                     _fround$833:
   346                           	opt stack 0
   347  000089                     _scale$834:
   348                           	opt stack 0
   349                           
   350                           ; 3 bytes @ 0x9
   351  000089                     	ds	3
   352  00008C                     scale@scl:
   353                           	opt stack 0
   354  00008C                     _fround$832:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0xC
   358  00008C                     	ds	1
   359  00008D                     ?___fttol:
   360                           	opt stack 0
   361  00008D                     ___fttol@f1:
   362                           	opt stack 0
   363                           
   364                           ; 3 bytes @ 0xD
   365  00008D                     	ds	2
   366  00008F                     fround@prec:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xF
   370  00008F                     	ds	1
   371  000090                     ?___ftadd:
   372                           	opt stack 0
   373  000090                     ___ftadd@f1:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x10
   377  000090                     	ds	1
   378  000091                     ??___fttol:
   379                           
   380                           ; 1 bytes @ 0x11
   381  000091                     	ds	2
   382  000093                     ___ftadd@f2:
   383                           	opt stack 0
   384                           
   385                           ; 3 bytes @ 0x13
   386  000093                     	ds	3
   387  000096                     ??___ftadd:
   388  000096                     ___fttol@sign1:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x16
   392  000096                     	ds	1
   393  000097                     ___fttol@lval:
   394                           	opt stack 0
   395                           
   396                           ; 4 bytes @ 0x17
   397  000097                     	ds	2
   398  000099                     ___ftadd@sign:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x19
   402  000099                     	ds	1
   403  00009A                     ___ftadd@exp2:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x1A
   407  00009A                     	ds	1
   408  00009B                     ___ftadd@exp1:
   409                           	opt stack 0
   410  00009B                     ___fttol@exp1:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x1B
   414  00009B                     	ds	1
   415  00009C                     ?___ftsub:
   416                           	opt stack 0
   417  00009C                     ___ftsub@f1:
   418                           	opt stack 0
   419                           
   420                           ; 3 bytes @ 0x1C
   421  00009C                     	ds	3
   422  00009F                     ___ftsub@f2:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x1F
   426  00009F                     	ds	3
   427  0000A2                     ?_sprintf:
   428                           	opt stack 0
   429  0000A2                     sprintf@sp:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x22
   433  0000A2                     	ds	2
   434  0000A4                     sprintf@f:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x24
   438  0000A4                     	ds	5
   439  0000A9                     ??_sprintf:
   440                           
   441                           ; 1 bytes @ 0x29
   442  0000A9                     	ds	6
   443  0000AF                     _sprintf$835:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x2F
   447  0000AF                     	ds	3
   448  0000B2                     sprintf@ap:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x32
   452  0000B2                     	ds	2
   453  0000B4                     sprintf@val:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x34
   457  0000B4                     	ds	4
   458  0000B8                     sprintf@flag:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x38
   462  0000B8                     	ds	2
   463  0000BA                     sprintf@width:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x3A
   467  0000BA                     	ds	2
   468  0000BC                     sprintf@tmpval:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x3C
   472  0000BC                     	ds	4
   473  0000C0                     sprintf@exp:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x40
   477  0000C0                     	ds	2
   478  0000C2                     sprintf@fval:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x42
   482  0000C2                     	ds	3
   483  0000C5                     sprintf@prec:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x45
   487  0000C5                     	ds	2
   488  0000C7                     sprintf@c:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x47
   492  0000C7                     	ds	1
   493  0000C8                     ??_calcula:
   494                           
   495                           ; 1 bytes @ 0x48
   496  0000C8                     	ds	4
   497  0000CC                     calcula@elapsedTime:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x4C
   501  0000CC                     	ds	4
   502  0000D0                     calcula@freq:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x50
   506  0000D0                     	ds	3
   507  0000D3                     calcula@temp:
   508                           	opt stack 0
   509                           
   510                           ; 3 bytes @ 0x53
   511  0000D3                     	ds	3
   512  0000D6                     ??_main:
   513                           
   514                           ; 1 bytes @ 0x56
   515  0000D6                     	ds	2
   516  0000D8                     main@acum:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x58
   520  0000D8                     	ds	1
   521                           tblptru	equ	0xFF8
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	cstackCOMRAM
   526  000001                     __pcstackCOMRAM:
   527                           	opt stack 0
   528  000001                     ??_high_isr:
   529  000001                     
   530                           ; 1 bytes @ 0x0
   531  000001                     	ds	22
   532  000017                     high_isr@counter:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x16
   536  000017                     	ds	2
   537  000019                     ??_low_isr:
   538                           
   539                           ; 1 bytes @ 0x18
   540  000019                     	ds	21
   541  00002E                     ??_isdigit:
   542  00002E                     ??_lcd_lat:
   543  00002E                     ?___awmod:
   544                           	opt stack 0
   545  00002E                     ?___ftpack:
   546                           	opt stack 0
   547  00002E                     ?___ftneg:
   548                           	opt stack 0
   549  00002E                     ?__tdiv_to_l_:
   550                           	opt stack 0
   551  00002E                     ?__div_to_l_:
   552                           	opt stack 0
   553  00002E                     ?___lldiv:
   554                           	opt stack 0
   555  00002E                     ?___llmod:
   556                           	opt stack 0
   557  00002E                     manda@dato:
   558                           	opt stack 0
   559  00002E                     ___awmod@dividend:
   560                           	opt stack 0
   561  00002E                     __div_to_l_@f1:
   562                           	opt stack 0
   563  00002E                     ___ftpack@arg:
   564                           	opt stack 0
   565  00002E                     __tdiv_to_l_@f1:
   566                           	opt stack 0
   567  00002E                     ___ftge@ff1:
   568                           	opt stack 0
   569  00002E                     ___ftneg@f1:
   570                           	opt stack 0
   571  00002E                     ___lldiv@dividend:
   572                           	opt stack 0
   573  00002E                     ___llmod@dividend:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x2D
   577  00002E                     	ds	1
   578  00002F                     ??_lcd_dwr:
   579  00002F                     ??_lcd_cmd:
   580  00002F                     lcd_cmd_hf@x:
   581                           	opt stack 0
   582  00002F                     _isdigit$485:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x2E
   586  00002F                     	ds	1
   587  000030                     lcd_cmd@x:
   588                           	opt stack 0
   589  000030                     lcd_dwr@x:
   590                           	opt stack 0
   591  000030                     isdigit@c:
   592                           	opt stack 0
   593  000030                     ___awmod@divisor:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x2F
   597  000030                     	ds	1
   598  000031                     ??_lcd_init:
   599  000031                     lcd_putc@c:
   600                           	opt stack 0
   601  000031                     lcd_gotoxy@y:
   602                           	opt stack 0
   603  000031                     ___ftpack@exp:
   604                           	opt stack 0
   605  000031                     __div_to_l_@f2:
   606                           	opt stack 0
   607  000031                     __tdiv_to_l_@f2:
   608                           	opt stack 0
   609  000031                     ___ftge@ff2:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x30
   613  000031                     	ds	1
   614  000032                     ??_lcd_gotoxy:
   615  000032                     ___awmod@counter:
   616                           	opt stack 0
   617  000032                     ___ftpack@sign:
   618                           	opt stack 0
   619  000032                     lcd_msg@c:
   620                           	opt stack 0
   621  000032                     ___lldiv@divisor:
   622                           	opt stack 0
   623  000032                     ___llmod@divisor:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x31
   627  000032                     	ds	1
   628  000033                     ??___ftpack:
   629  000033                     lcd_gotoxy@x:
   630                           	opt stack 0
   631  000033                     ___awmod@sign:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x32
   635  000033                     	ds	1
   636  000034                     ??__tdiv_to_l_:
   637  000034                     ??___ftge:
   638  000034                     ?___awdiv:
   639                           	opt stack 0
   640  000034                     lcd_gotoxy@ADDRESS:
   641                           	opt stack 0
   642  000034                     ___awdiv@dividend:
   643                           	opt stack 0
   644  000034                     __div_to_l_@quot:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x33
   648  000034                     	ds	2
   649  000036                     ?___ftdiv:
   650                           	opt stack 0
   651  000036                     ?___lltoft:
   652                           	opt stack 0
   653  000036                     ___llmod@counter:
   654                           	opt stack 0
   655  000036                     ___awdiv@divisor:
   656                           	opt stack 0
   657  000036                     ___ftdiv@f1:
   658                           	opt stack 0
   659  000036                     ___lldiv@quotient:
   660                           	opt stack 0
   661  000036                     ___lltoft@c:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x35
   665  000036                     	ds	1
   666  000037                     __tdiv_to_l_@quot:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x36
   670  000037                     	ds	1
   671  000038                     ___awdiv@counter:
   672                           	opt stack 0
   673  000038                     __div_to_l_@cntr:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x37
   677  000038                     	ds	1
   678  000039                     ___awdiv@sign:
   679                           	opt stack 0
   680  000039                     __div_to_l_@exp1:
   681                           	opt stack 0
   682  000039                     ___ftdiv@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x38
   686  000039                     	ds	1
   687  00003A                     ??___lltoft:
   688  00003A                     ___lldiv@counter:
   689                           	opt stack 0
   690  00003A                     ___awdiv@quotient:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x39
   694  00003A                     	ds	1
   695  00003B                     __tdiv_to_l_@cntr:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x3A
   699  00003B                     	ds	1
   700  00003C                     ??___ftdiv:
   701  00003C                     ?___wmul:
   702                           	opt stack 0
   703  00003C                     __tdiv_to_l_@exp1:
   704                           	opt stack 0
   705  00003C                     ___wmul@multiplier:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x3B
   709  00003C                     	ds	2
   710  00003E                     ___lltoft@exp:
   711                           	opt stack 0
   712  00003E                     ___wmul@multiplicand:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x3D
   716  00003E                     	ds	1
   717  00003F                     ___ftdiv@cntr:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x3E
   721  00003F                     	ds	1
   722  000040                     ___wmul@product:
   723                           	opt stack 0
   724  000040                     ___ftdiv@f3:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x3F
   728  000040                     	ds	2
   729  000042                     ?___ftmul:
   730                           	opt stack 0
   731  000042                     ___ftmul@f1:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x41
   735  000042                     	ds	1
   736  000043                     ___ftdiv@exp:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x42
   740  000043                     	ds	1
   741  000044                     ___ftdiv@sign:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x43
   745  000044                     	ds	1
   746  000045                     ___ftmul@f2:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x44
   750  000045                     	ds	3
   751  000048                     ??___ftmul:
   752                           
   753                           ; 1 bytes @ 0x47
   754  000048                     	ds	3
   755  00004B                     tblptru	equ	0xFF8
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           
   759                           ; 1 bytes @ 0x4A
   760 ;;
   761 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   762 ;;
   763 ;; *************** function _main *****************
   764 ;; Defined at:
   765 ;;		line 111 in file "color_1.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  acum            1   88[BANK0 ] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   779 ;;      Params:         0       0       0       0       0       0       0
   780 ;;      Locals:         0       1       0       0       0       0       0
   781 ;;      Temps:          0       2       0       0       0       0       0
   782 ;;      Totals:         0       3       0       0       0       0       0
   783 ;;Total ram usage:        3 bytes
   784 ;; Hardware stack levels required when called:    7
   785 ;; This function calls:
   786 ;;		_calcula
   787 ;;		_lcd_init
   788 ;;		_lcd_msg
   789 ;;		_prepareForInterrupts
   790 ;; This function is called by:
   791 ;;		Startup code after reset
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text0
   796  002346                     __ptext0:
   797                           	opt stack 0
   798  002346                     _main:
   799                           	opt stack 24
   800                           
   801                           ;color_1.c: 113: char acum= 0;
   802                           
   803                           ;incstack = 0
   804  002346  0E00               	movlw	0
   805  002348  0100               	movlb	0	; () banked
   806  00234A  6FD8               	movwf	main@acum& (0+255),b
   807                           
   808                           ; BSR set to: 0
   809                           ;color_1.c: 117: lcd_init();
   810  00234C  EC62  F00F         	call	_lcd_init	;wreg free
   811                           
   812                           ;color_1.c: 118: lcd_msg("Frecuencia");
   813  002350  0E77               	movlw	low STR_1
   814  002352  6E32               	movwf	lcd_msg@c,c
   815  002354  0E06               	movlw	high STR_1
   816  002356  6E33               	movwf	lcd_msg@c+1,c
   817  002358  EC7A  F011         	call	_lcd_msg	;wreg free
   818                           
   819                           ;color_1.c: 125: T1CONbits.RD16 = 1;
   820  00235C  8ECD               	bsf	4045,7,c	;volatile
   821                           
   822                           ;color_1.c: 126: T1CKPS1 = 0;
   823  00235E  9ACD               	bcf	4045,5,c	;volatile
   824                           
   825                           ;color_1.c: 127: T1CKPS0 = 0;
   826  002360  98CD               	bcf	4045,4,c	;volatile
   827                           
   828                           ;color_1.c: 128: TMR1CS = 0;
   829  002362  92CD               	bcf	4045,1,c	;volatile
   830                           
   831                           ;color_1.c: 129: TMR1ON = 1;
   832  002364  80CD               	bsf	4045,0,c	;volatile
   833                           
   834                           ;color_1.c: 130: TMR1IP = 0;
   835  002366  909F               	bcf	3999,0,c	;volatile
   836                           
   837                           ;color_1.c: 131: TMR1IE = 1;
   838  002368  809D               	bsf	3997,0,c	;volatile
   839                           
   840                           ;color_1.c: 133: prepareForInterrupts ();
   841  00236A  ECDF  F012         	call	_prepareForInterrupts	;wreg free
   842                           
   843                           ;color_1.c: 137: IPEN = 1;
   844  00236E  8ED0               	bsf	4048,7,c	;volatile
   845                           
   846                           ;color_1.c: 138: GIEH = 1;
   847  002370  8EF2               	bsf	intcon,7,c	;volatile
   848                           
   849                           ;color_1.c: 139: GIEL = 1;
   850  002372  8CF2               	bsf	intcon,6,c	;volatile
   851  002374                     
   852                           ;color_1.c: 144: {
   853                           ;color_1.c: 145: _delay((unsigned long)((1000)*(4000000/4000.0)));
   854  002374  0E06               	movlw	6
   855  002376  0100               	movlb	0	; () banked
   856  002378  6FD7               	movwf	(??_main+1)& (0+255),b
   857  00237A  0E13               	movlw	19
   858  00237C  6FD6               	movwf	??_main& (0+255),b
   859  00237E  0EAD               	movlw	173
   860  002380                     u4597:
   861  002380  2EE8               	decfsz	wreg,f,c
   862  002382  D7FE               	bra	u4597
   863  002384  2FD6               	decfsz	??_main& (0+255),f,b
   864  002386  D7FC               	bra	u4597
   865  002388  2FD7               	decfsz	(??_main+1)& (0+255),f,b
   866  00238A  D7FA               	bra	u4597
   867  00238C  D000               	nop2	
   868                           
   869                           ;color_1.c: 146: calcula();
   870  00238E  EC67  F00D         	call	_calcula	;wreg free
   871  002392  D7F0               	goto	l75
   872  002394                     __end_of_main:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           intcon	equ	0xFF2
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           
   879 ;; *************** function _lcd_init *****************
   880 ;; Defined at:
   881 ;;		line 135 in file "../MyLibs/lcd4a.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   895 ;;      Params:         0       0       0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0       0       0
   897 ;;      Temps:          1       0       0       0       0       0       0
   898 ;;      Totals:         1       0       0       0       0       0       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    4
   902 ;; This function calls:
   903 ;;		_lcd_cmd
   904 ;;		_lcd_cmd_hf
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  001EC4                     __ptext1:
   912                           	opt stack 0
   913  001EC4                     _lcd_init:
   914                           	opt stack 26
   915                           
   916                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
   917                           
   918                           ;incstack = 0
   919  001EC4  9E93               	bcf	3987,7,c	;volatile
   920                           
   921                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
   922  001EC6  9C93               	bcf	3987,6,c	;volatile
   923                           
   924                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
   925  001EC8  9A93               	bcf	3987,5,c	;volatile
   926                           
   927                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
   928  001ECA  9893               	bcf	3987,4,c	;volatile
   929                           
   930                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
   931  001ECC  9A95               	bcf	3989,5,c	;volatile
   932                           
   933                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
   934  001ECE  9C95               	bcf	3989,6,c	;volatile
   935                           
   936                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
   937  001ED0  9E95               	bcf	3989,7,c	;volatile
   938                           
   939                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
   940  001ED2  9C8C               	bcf	3980,6,c	;volatile
   941                           
   942                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
   943  001ED4  0E30               	movlw	48
   944  001ED6  ECC7  F012         	call	_lcd_cmd_hf
   945                           
   946                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(4000000/4000.0)));
   947  001EDA  0E14               	movlw	20
   948  001EDC  6E31               	movwf	??_lcd_init& (0+255),c
   949  001EDE  0E7A               	movlw	122
   950  001EE0                     u4607:
   951  001EE0  2EE8               	decfsz	wreg,f,c
   952  001EE2  D7FE               	bra	u4607
   953  001EE4  2E31               	decfsz	??_lcd_init& (0+255),f,c
   954  001EE6  D7FC               	bra	u4607
   955                           
   956                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
   957  001EE8  0E30               	movlw	48
   958  001EEA  ECC7  F012         	call	_lcd_cmd_hf
   959                           
   960                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(4000000/4000.0)));
   961  001EEE  0E04               	movlw	4
   962  001EF0  6E31               	movwf	??_lcd_init& (0+255),c
   963  001EF2  0EE4               	movlw	228
   964  001EF4                     u4617:
   965  001EF4  2EE8               	decfsz	wreg,f,c
   966  001EF6  D7FE               	bra	u4617
   967  001EF8  2E31               	decfsz	??_lcd_init& (0+255),f,c
   968  001EFA  D7FC               	bra	u4617
   969  001EFC  D000               	nop2	
   970                           
   971                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
   972  001EFE  0E30               	movlw	48
   973  001F00  ECC7  F012         	call	_lcd_cmd_hf
   974                           
   975                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(4000000/4000.0)));
   976  001F04  0E14               	movlw	20
   977  001F06  6E31               	movwf	??_lcd_init& (0+255),c
   978  001F08  0E7A               	movlw	122
   979  001F0A                     u4627:
   980  001F0A  2EE8               	decfsz	wreg,f,c
   981  001F0C  D7FE               	bra	u4627
   982  001F0E  2E31               	decfsz	??_lcd_init& (0+255),f,c
   983  001F10  D7FC               	bra	u4627
   984                           
   985                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
   986  001F12  0E20               	movlw	32
   987  001F14  ECC7  F012         	call	_lcd_cmd_hf
   988                           
   989                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(4000000/4000.0)));
   990  001F18  0E08               	movlw	8
   991  001F1A  6E31               	movwf	??_lcd_init& (0+255),c
   992  001F1C  0ECA               	movlw	202
   993  001F1E                     u4637:
   994  001F1E  2EE8               	decfsz	wreg,f,c
   995  001F20  D7FE               	bra	u4637
   996  001F22  2E31               	decfsz	??_lcd_init& (0+255),f,c
   997  001F24  D7FC               	bra	u4637
   998                           
   999                           ;lcd4a.c: 166: lcd_cmd(0x28);
  1000  001F26  0E28               	movlw	40
  1001  001F28  ECCA  F011         	call	_lcd_cmd
  1002                           
  1003                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(4000000/4000.0)));
  1004  001F2C  0E08               	movlw	8
  1005  001F2E  6E31               	movwf	??_lcd_init& (0+255),c
  1006  001F30  0ECA               	movlw	202
  1007  001F32                     u4647:
  1008  001F32  2EE8               	decfsz	wreg,f,c
  1009  001F34  D7FE               	bra	u4647
  1010  001F36  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1011  001F38  D7FC               	bra	u4647
  1012                           
  1013                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  1014  001F3A  0E0E               	movlw	14
  1015  001F3C  ECCA  F011         	call	_lcd_cmd
  1016                           
  1017                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(4000000/4000.0)));
  1018  001F40  0E08               	movlw	8
  1019  001F42  6E31               	movwf	??_lcd_init& (0+255),c
  1020  001F44  0ECA               	movlw	202
  1021  001F46                     u4657:
  1022  001F46  2EE8               	decfsz	wreg,f,c
  1023  001F48  D7FE               	bra	u4657
  1024  001F4A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1025  001F4C  D7FC               	bra	u4657
  1026                           
  1027                           ;lcd4a.c: 170: lcd_cmd(0x01);
  1028  001F4E  0E01               	movlw	1
  1029  001F50  ECCA  F011         	call	_lcd_cmd
  1030                           
  1031                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(4000000/4000.0)));
  1032  001F54  0E08               	movlw	8
  1033  001F56  6E31               	movwf	??_lcd_init& (0+255),c
  1034  001F58  0ECA               	movlw	202
  1035  001F5A                     u4667:
  1036  001F5A  2EE8               	decfsz	wreg,f,c
  1037  001F5C  D7FE               	bra	u4667
  1038  001F5E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1039  001F60  D7FC               	bra	u4667
  1040                           
  1041                           ;lcd4a.c: 172: lcd_cmd(0x06);
  1042  001F62  0E06               	movlw	6
  1043  001F64  ECCA  F011         	call	_lcd_cmd
  1044                           
  1045                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(4000000/4000.0)));
  1046  001F68  0E08               	movlw	8
  1047  001F6A  6E31               	movwf	??_lcd_init& (0+255),c
  1048  001F6C  0ECA               	movlw	202
  1049  001F6E                     u4677:
  1050  001F6E  2EE8               	decfsz	wreg,f,c
  1051  001F70  D7FE               	bra	u4677
  1052  001F72  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1053  001F74  D7FC               	bra	u4677
  1054                           
  1055                           ;lcd4a.c: 174: lcd_cmd(0x80);
  1056  001F76  0E80               	movlw	128
  1057  001F78  ECCA  F011         	call	_lcd_cmd
  1058  001F7C  0012               	return		;funcret
  1059  001F7E                     __end_of_lcd_init:
  1060                           	opt stack 0
  1061                           tblptru	equ	0xFF8
  1062                           intcon	equ	0xFF2
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           
  1066 ;; *************** function _lcd_cmd_hf *****************
  1067 ;; Defined at:
  1068 ;;		line 56 in file "../MyLibs/lcd4a.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  x               1    wreg     unsigned char 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  x               1   46[COMRAM] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1082 ;;      Params:         0       0       0       0       0       0       0
  1083 ;;      Locals:         1       0       0       0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0
  1085 ;;      Totals:         1       0       0       0       0       0       0
  1086 ;;Total ram usage:        1 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    3
  1089 ;; This function calls:
  1090 ;;		_lcd_lat
  1091 ;;		_manda
  1092 ;; This function is called by:
  1093 ;;		_lcd_init
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text2
  1098  00258E                     __ptext2:
  1099                           	opt stack 0
  1100  00258E                     _lcd_cmd_hf:
  1101                           	opt stack 26
  1102                           
  1103                           ;incstack = 0
  1104                           ;lcd_cmd_hf@x stored from wreg
  1105  00258E  6E2F               	movwf	lcd_cmd_hf@x,c
  1106                           
  1107                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  1108  002590  9A8C               	bcf	3980,5,c	;volatile
  1109                           
  1110                           ;lcd4a.c: 59: lcd &= 0x0F;
  1111  002592  0E0F               	movlw	15
  1112  002594  164F               	andwf	_lcd,f,c
  1113                           
  1114                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  1115  002596  502F               	movf	lcd_cmd_hf@x,w,c
  1116  002598  0BF0               	andlw	240
  1117  00259A  124F               	iorwf	_lcd,f,c
  1118                           
  1119                           ;lcd4a.c: 61: manda(lcd);
  1120  00259C  504F               	movf	_lcd,w,c
  1121  00259E  EC6A  F012         	call	_manda
  1122                           
  1123                           ;lcd4a.c: 62: lcd_lat();
  1124  0025A2  ECD4  F012         	call	_lcd_lat	;wreg free
  1125  0025A6  0012               	return		;funcret
  1126  0025A8                     __end_of_lcd_cmd_hf:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           
  1133 ;; *************** function _calcula *****************
  1134 ;; Defined at:
  1135 ;;		line 153 in file "color_1.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  elapsedTime     4   76[BANK0 ] unsigned long 
  1140 ;;  temp            3   83[BANK0 ] float 
  1141 ;;  freq            3   80[BANK0 ] float 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1151 ;;      Params:         0       0       0       0       0       0       0
  1152 ;;      Locals:         0      10       0       0       0       0       0
  1153 ;;      Temps:          0       4       0       0       0       0       0
  1154 ;;      Totals:         0      14       0       0       0       0       0
  1155 ;;Total ram usage:       14 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    6
  1158 ;; This function calls:
  1159 ;;		___ftdiv
  1160 ;;		___ftmul
  1161 ;;		___lltoft
  1162 ;;		_lcd_gotoxy
  1163 ;;		_lcd_msg
  1164 ;;		_prepareForInterrupts
  1165 ;;		_sprintf
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text3
  1172  001ACE                     __ptext3:
  1173                           	opt stack 0
  1174  001ACE                     _calcula:
  1175                           	opt stack 24
  1176                           
  1177                           ;color_1.c: 155: float freq = 0.0;
  1178                           
  1179                           ;incstack = 0
  1180  001ACE  0E00               	movlw	0
  1181  001AD0  0100               	movlb	0	; () banked
  1182  001AD2  6FD0               	movwf	calcula@freq& (0+255),b
  1183  001AD4  0E00               	movlw	0
  1184  001AD6  6FD1               	movwf	(calcula@freq+1)& (0+255),b
  1185  001AD8  0E00               	movlw	0
  1186  001ADA  6FD2               	movwf	(calcula@freq+2)& (0+255),b
  1187                           
  1188                           ;color_1.c: 156: float temp = 0.0;
  1189  001ADC  0E00               	movlw	0
  1190  001ADE  6FD3               	movwf	calcula@temp& (0+255),b
  1191  001AE0  0E00               	movlw	0
  1192  001AE2  6FD4               	movwf	(calcula@temp+1)& (0+255),b
  1193  001AE4  0E00               	movlw	0
  1194  001AE6  6FD5               	movwf	(calcula@temp+2)& (0+255),b
  1195                           
  1196                           ;color_1.c: 157: if (!triggered)
  1197  001AE8  5050               	movf	_triggered,w,c	;volatile
  1198  001AEA  A4D8               	btfss	status,2,c
  1199  001AEC  D00C               	goto	l81
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;color_1.c: 158: {
  1203                           ;color_1.c: 159: lcd_gotoxy(5,2);
  1204  001AEE  0E02               	movlw	2
  1205  001AF0  6E31               	movwf	lcd_gotoxy@y,c
  1206  001AF2  0E05               	movlw	5
  1207  001AF4  EC50  F012         	call	_lcd_gotoxy
  1208                           
  1209                           ;color_1.c: 160: lcd_msg(":)");
  1210  001AF8  0E88               	movlw	low STR_2
  1211  001AFA  6E32               	movwf	lcd_msg@c,c
  1212  001AFC  0E06               	movlw	high STR_2
  1213  001AFE  6E33               	movwf	lcd_msg@c+1,c
  1214  001B00  EC7A  F011         	call	_lcd_msg	;wreg free
  1215                           
  1216                           ;color_1.c: 161: return;
  1217  001B04  0012               	return	
  1218  001B06                     l81:
  1219                           
  1220                           ;color_1.c: 162: }
  1221                           ;color_1.c: 164: unsigned long elapsedTime = finishTime - startTime;
  1222  001B06  C0DD  F0C8         	movff	_startTime,??_calcula	;volatile
  1223  001B0A  C0DE  F0C9         	movff	_startTime+1,??_calcula+1	;volatile
  1224  001B0E  C0DF  F0CA         	movff	_startTime+2,??_calcula+2	;volatile
  1225  001B12  C0E0  F0CB         	movff	_startTime+3,??_calcula+3	;volatile
  1226  001B16  0100               	movlb	0	; () banked
  1227  001B18  1FC8               	comf	??_calcula& (0+255),f,b
  1228  001B1A  1FC9               	comf	(??_calcula+1)& (0+255),f,b
  1229  001B1C  1FCA               	comf	(??_calcula+2)& (0+255),f,b
  1230  001B1E  1FCB               	comf	(??_calcula+3)& (0+255),f,b
  1231  001B20  2BC8               	incf	??_calcula& (0+255),f,b
  1232  001B22  0E00               	movlw	0
  1233  001B24  23C9               	addwfc	(??_calcula+1)& (0+255),f,b
  1234  001B26  23CA               	addwfc	(??_calcula+2)& (0+255),f,b
  1235  001B28  23CB               	addwfc	(??_calcula+3)& (0+255),f,b
  1236  001B2A  51D9               	movf	_finishTime& (0+255),w,b	;volatile
  1237  001B2C  25C8               	addwf	??_calcula& (0+255),w,b
  1238  001B2E  6FCC               	movwf	calcula@elapsedTime& (0+255),b
  1239  001B30  51DA               	movf	(_finishTime+1)& (0+255),w,b	;volatile
  1240  001B32  21C9               	addwfc	(??_calcula+1)& (0+255),w,b
  1241  001B34  6FCD               	movwf	(calcula@elapsedTime+1)& (0+255),b
  1242  001B36  51DB               	movf	(_finishTime+2)& (0+255),w,b	;volatile
  1243  001B38  21CA               	addwfc	(??_calcula+2)& (0+255),w,b
  1244  001B3A  6FCE               	movwf	(calcula@elapsedTime+2)& (0+255),b
  1245  001B3C  51DC               	movf	(_finishTime+3)& (0+255),w,b	;volatile
  1246  001B3E  21CB               	addwfc	(??_calcula+3)& (0+255),w,b
  1247  001B40  6FCF               	movwf	(calcula@elapsedTime+3)& (0+255),b
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;color_1.c: 166: temp = (float) (elapsedTime);
  1251  001B42  C0CC  F036         	movff	calcula@elapsedTime,___lltoft@c
  1252  001B46  C0CD  F037         	movff	calcula@elapsedTime+1,___lltoft@c+1
  1253  001B4A  C0CE  F038         	movff	calcula@elapsedTime+2,___lltoft@c+2
  1254  001B4E  C0CF  F039         	movff	calcula@elapsedTime+3,___lltoft@c+3
  1255  001B52  EC4C  F011         	call	___lltoft	;wreg free
  1256  001B56  C036  F0D3         	movff	?___lltoft,calcula@temp
  1257  001B5A  C037  F0D4         	movff	?___lltoft+1,calcula@temp+1
  1258  001B5E  C038  F0D5         	movff	?___lltoft+2,calcula@temp+2
  1259                           
  1260                           ;color_1.c: 167: temp *= 200e-9;
  1261  001B62  C0D3  F042         	movff	calcula@temp,___ftmul@f1
  1262  001B66  C0D4  F043         	movff	calcula@temp+1,___ftmul@f1+1
  1263  001B6A  C0D5  F044         	movff	calcula@temp+2,___ftmul@f1+2
  1264  001B6E  0EC0               	movlw	192
  1265  001B70  6E45               	movwf	___ftmul@f2,c
  1266  001B72  0E56               	movlw	86
  1267  001B74  6E46               	movwf	___ftmul@f2+1,c
  1268  001B76  0E34               	movlw	52
  1269  001B78  6E47               	movwf	___ftmul@f2+2,c
  1270  001B7A  EC74  F00E         	call	___ftmul	;wreg free
  1271  001B7E  C042  F0D3         	movff	?___ftmul,calcula@temp
  1272  001B82  C043  F0D4         	movff	?___ftmul+1,calcula@temp+1
  1273  001B86  C044  F0D5         	movff	?___ftmul+2,calcula@temp+2
  1274                           
  1275                           ;color_1.c: 168: freq = 1.0/(temp);
  1276  001B8A  0E00               	movlw	0
  1277  001B8C  6E36               	movwf	___ftdiv@f1,c
  1278  001B8E  0E80               	movlw	128
  1279  001B90  6E37               	movwf	___ftdiv@f1+1,c
  1280  001B92  0E3F               	movlw	63
  1281  001B94  6E38               	movwf	___ftdiv@f1+2,c
  1282  001B96  C0D3  F039         	movff	calcula@temp,___ftdiv@f2
  1283  001B9A  C0D4  F03A         	movff	calcula@temp+1,___ftdiv@f2+1
  1284  001B9E  C0D5  F03B         	movff	calcula@temp+2,___ftdiv@f2+2
  1285  001BA2  ECEF  F00E         	call	___ftdiv	;wreg free
  1286  001BA6  C036  F0D0         	movff	?___ftdiv,calcula@freq
  1287  001BAA  C037  F0D1         	movff	?___ftdiv+1,calcula@freq+1
  1288  001BAE  C038  F0D2         	movff	?___ftdiv+2,calcula@freq+2
  1289                           
  1290                           ;color_1.c: 172: sprintf(value,"%5.3f",freq);
  1291  001BB2  0EE1               	movlw	low _value
  1292  001BB4  0100               	movlb	0	; () banked
  1293  001BB6  6FA2               	movwf	sprintf@sp& (0+255),b
  1294  001BB8  0E00               	movlw	high _value
  1295  001BBA  6FA3               	movwf	(sprintf@sp+1)& (0+255),b
  1296  001BBC  0E82               	movlw	low STR_3
  1297  001BBE  6FA4               	movwf	sprintf@f& (0+255),b
  1298  001BC0  0E06               	movlw	high STR_3
  1299  001BC2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  1300  001BC4  C0D0  F0A6         	movff	calcula@freq,?_sprintf+4
  1301  001BC8  C0D1  F0A7         	movff	calcula@freq+1,?_sprintf+5
  1302  001BCC  C0D2  F0A8         	movff	calcula@freq+2,?_sprintf+6
  1303  001BD0  EC46  F003         	call	_sprintf	;wreg free
  1304                           
  1305                           ;color_1.c: 173: lcd_gotoxy(5,2);
  1306  001BD4  0E02               	movlw	2
  1307  001BD6  6E31               	movwf	lcd_gotoxy@y,c
  1308  001BD8  0E05               	movlw	5
  1309  001BDA  EC50  F012         	call	_lcd_gotoxy
  1310                           
  1311                           ;color_1.c: 174: lcd_msg(value);
  1312  001BDE  0EE1               	movlw	low _value
  1313  001BE0  6E32               	movwf	lcd_msg@c,c
  1314  001BE2  0E00               	movlw	high _value
  1315  001BE4  6E33               	movwf	lcd_msg@c+1,c
  1316  001BE6  EC7A  F011         	call	_lcd_msg	;wreg free
  1317                           
  1318                           ;color_1.c: 177: prepareForInterrupts ();
  1319  001BEA  ECDF  F012         	call	_prepareForInterrupts	;wreg free
  1320  001BEE  0012               	return		;funcret
  1321  001BF0                     __end_of_calcula:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _sprintf *****************
  1330 ;; Defined at:
  1331 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  sp              2   34[BANK0 ] PTR unsigned char 
  1334 ;;		 -> value(8), 
  1335 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1336 ;;		 -> STR_3(6), 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  tmpval          4   60[BANK0 ] struct .
  1339 ;;  val             4   52[BANK0 ] unsigned long 
  1340 ;;  fval            3   66[BANK0 ] unsigned long 
  1341 ;;  cp              3    0        PTR const unsigned char 
  1342 ;;  prec            2   69[BANK0 ] int 
  1343 ;;  exp             2   64[BANK0 ] int 
  1344 ;;  width           2   58[BANK0 ] int 
  1345 ;;  flag            2   56[BANK0 ] unsigned short 
  1346 ;;  ap              2   50[BANK0 ] PTR void [1]
  1347 ;;		 -> ?_sprintf(2), 
  1348 ;;  len             2    0        unsigned int 
  1349 ;;  c               1   71[BANK0 ] char 
  1350 ;;  d               1    0        unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  2   34[BANK0 ] int 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1360 ;;      Params:         0       7       0       0       0       0       0
  1361 ;;      Locals:         0      25       0       0       0       0       0
  1362 ;;      Temps:          0       6       0       0       0       0       0
  1363 ;;      Totals:         0      38       0       0       0       0       0
  1364 ;;Total ram usage:       38 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    5
  1367 ;; This function calls:
  1368 ;;		___awdiv
  1369 ;;		___ftadd
  1370 ;;		___ftge
  1371 ;;		___ftmul
  1372 ;;		___ftneg
  1373 ;;		___ftsub
  1374 ;;		___fttol
  1375 ;;		___lldiv
  1376 ;;		___llmod
  1377 ;;		___lltoft
  1378 ;;		___wmul
  1379 ;;		__div_to_l_
  1380 ;;		__tdiv_to_l_
  1381 ;;		_fround
  1382 ;;		_isdigit
  1383 ;;		_scale
  1384 ;; This function is called by:
  1385 ;;		_calcula
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text4
  1390  00068C                     __ptext4:
  1391                           	opt stack 0
  1392  00068C                     _sprintf:
  1393                           	opt stack 24
  1394                           
  1395                           ;doprnt.c: 494: va_list ap;
  1396                           ;doprnt.c: 499: signed char c;
  1397                           ;doprnt.c: 501: int width;
  1398                           ;doprnt.c: 504: int prec;
  1399                           ;doprnt.c: 508: unsigned short flag;
  1400                           ;doprnt.c: 515: char d;
  1401                           ;doprnt.c: 516: double fval;
  1402                           ;doprnt.c: 517: int exp;
  1403                           ;doprnt.c: 523: union {
  1404                           ;doprnt.c: 524: unsigned long vd;
  1405                           ;doprnt.c: 525: double integ;
  1406                           ;doprnt.c: 526: } tmpval;
  1407                           ;doprnt.c: 528: unsigned long val;
  1408                           ;doprnt.c: 529: unsigned len;
  1409                           ;doprnt.c: 530: const char * cp;
  1410                           ;doprnt.c: 533: *ap = __va_start();
  1411                           
  1412                           ;incstack = 0
  1413  00068C  0EA6               	movlw	low (?_sprintf+4)
  1414  00068E  0100               	movlb	0	; () banked
  1415  000690  6FB2               	movwf	sprintf@ap& (0+255),b
  1416  000692  0E00               	movlw	high (?_sprintf+4)
  1417  000694  6FB3               	movwf	(sprintf@ap+1)& (0+255),b
  1418                           
  1419                           ;doprnt.c: 536: while(c = *f++) {
  1420  000696  EF7F  F007         	goto	l262
  1421  00069A                     
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 538: if(c != '%')
  1424                           
  1425                           ; BSR set to: 0
  1426  00069A  0E25               	movlw	37
  1427  00069C  19C7               	xorwf	sprintf@c& (0+255),w,b
  1428  00069E  B4D8               	btfsc	status,2,c
  1429  0006A0  D008               	goto	l191
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;doprnt.c: 540: {
  1433                           ;doprnt.c: 541: ((*sp++ = (c)));
  1434  0006A2  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  1435  0006A6  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  1436  0006AA  C0C7  FFDF         	movff	sprintf@c,indf2
  1437  0006AE  EF7D  F007         	goto	l4093
  1438  0006B2                     l191:
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 543: }
  1442                           ;doprnt.c: 546: width = 0;
  1443                           
  1444                           ; BSR set to: 0
  1445  0006B2  0E00               	movlw	0
  1446  0006B4  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  1447  0006B6  0E00               	movlw	0
  1448  0006B8  6FBA               	movwf	sprintf@width& (0+255),b
  1449                           
  1450                           ;doprnt.c: 548: flag = 0;
  1451  0006BA  0E00               	movlw	0
  1452  0006BC  6FB9               	movwf	(sprintf@flag+1)& (0+255),b
  1453  0006BE  0E00               	movlw	0
  1454  0006C0  6FB8               	movwf	sprintf@flag& (0+255),b
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1458  0006C2  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1459  0006C6  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1460  0006CA                     	if	0	;tblptru may be non-zero
  1461  0006CA                     	endif
  1462  0006CA                     	if	0	;tblptru may be non-zero
  1463  0006CA                     	endif
  1464  0006CA  0008               	tblrd		*
  1465  0006CC  50F5               	movf	tablat,w,c
  1466  0006CE  ECB8  F012         	call	_isdigit
  1467  0006D2  A0D8               	btfss	status,0,c
  1468  0006D4  D034               	goto	u4100
  1469                           
  1470                           ;doprnt.c: 598: width = 0;
  1471  0006D6  0E00               	movlw	0
  1472  0006D8  0100               	movlb	0	; () banked
  1473  0006DA  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  1474  0006DC  0E00               	movlw	0
  1475  0006DE  6FBA               	movwf	sprintf@width& (0+255),b
  1476  0006E0                     
  1477                           ;doprnt.c: 600: width *= 10;
  1478                           
  1479                           ; BSR set to: 0
  1480  0006E0  C0BA  F03C         	movff	sprintf@width,___wmul@multiplier
  1481  0006E4  C0BB  F03D         	movff	sprintf@width+1,___wmul@multiplier+1
  1482  0006E8  0E00               	movlw	0
  1483  0006EA  6E3F               	movwf	___wmul@multiplicand+1,c
  1484  0006EC  0E0A               	movlw	10
  1485  0006EE  6E3E               	movwf	___wmul@multiplicand,c
  1486  0006F0  EC93  F012         	call	___wmul	;wreg free
  1487  0006F4  C03C  F0BA         	movff	?___wmul,sprintf@width
  1488  0006F8  C03D  F0BB         	movff	?___wmul+1,sprintf@width+1
  1489                           
  1490                           ;doprnt.c: 601: width += *f++ - '0';
  1491  0006FC  0ED0               	movlw	208
  1492  0006FE  0100               	movlb	0	; () banked
  1493  000700  6FA9               	movwf	??_sprintf& (0+255),b
  1494  000702  0EFF               	movlw	255
  1495  000704  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  1496  000706  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1497  00070A  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1498  00070E                     	if	0	;tblptru may be non-zero
  1499  00070E                     	endif
  1500  00070E                     	if	0	;tblptru may be non-zero
  1501  00070E                     	endif
  1502  00070E  0008               	tblrd		*
  1503  000710  50F5               	movf	tablat,w,c
  1504  000712  6FAB               	movwf	(??_sprintf+2)& (0+255),b
  1505  000714  6BAC               	clrf	(??_sprintf+3)& (0+255),b
  1506  000716  51A9               	movf	??_sprintf& (0+255),w,b
  1507  000718  27AB               	addwf	(??_sprintf+2)& (0+255),f,b
  1508  00071A  51AA               	movf	(??_sprintf+1)& (0+255),w,b
  1509  00071C  23AC               	addwfc	(??_sprintf+3)& (0+255),f,b
  1510  00071E  51AB               	movf	(??_sprintf+2)& (0+255),w,b
  1511  000720  27BA               	addwf	sprintf@width& (0+255),f,b
  1512  000722  51AC               	movf	(??_sprintf+3)& (0+255),w,b
  1513  000724  23BB               	addwfc	(sprintf@width+1)& (0+255),f,b
  1514                           
  1515                           ; BSR set to: 0
  1516  000726  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1517  000728  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1521  00072A  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1522  00072E  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1523  000732                     	if	0	;tblptru may be non-zero
  1524  000732                     	endif
  1525  000732                     	if	0	;tblptru may be non-zero
  1526  000732                     	endif
  1527  000732  0008               	tblrd		*
  1528  000734  50F5               	movf	tablat,w,c
  1529  000736  ECB8  F012         	call	_isdigit
  1530  00073A  B0D8               	btfsc	status,0,c
  1531  00073C  D7D1               	goto	l193
  1532  00073E                     u4100:
  1533                           
  1534                           ;doprnt.c: 608: }
  1535                           ;doprnt.c: 611: if(*f == '.') {
  1536  00073E  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1537  000742  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1538  000746                     	if	0	;tblptru may be non-zero
  1539  000746                     	endif
  1540  000746                     	if	0	;tblptru may be non-zero
  1541  000746                     	endif
  1542  000746  0008               	tblrd		*
  1543  000748  50F5               	movf	tablat,w,c
  1544  00074A  0A2E               	xorlw	46
  1545  00074C  A4D8               	btfss	status,2,c
  1546  00074E  D030               	goto	l195
  1547                           
  1548                           ;doprnt.c: 612: flag |= 0x4000;
  1549  000750  0100               	movlb	0	; () banked
  1550  000752  8DB9               	bsf	(sprintf@flag+1)& (0+255),6,b
  1551                           
  1552                           ;doprnt.c: 613: f++;
  1553  000754  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1554  000756  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;doprnt.c: 620: {
  1558                           ;doprnt.c: 621: prec = 0;
  1559  000758  0E00               	movlw	0
  1560  00075A  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1561  00075C  0E00               	movlw	0
  1562  00075E  6FC5               	movwf	sprintf@prec& (0+255),b
  1563                           
  1564                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1565  000760  D01C               	goto	l196
  1566  000762                     
  1567                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1568                           
  1569                           ; BSR set to: 0
  1570  000762  C0C5  F03C         	movff	sprintf@prec,___wmul@multiplier
  1571  000766  C0C6  F03D         	movff	sprintf@prec+1,___wmul@multiplier+1
  1572  00076A  0E00               	movlw	0
  1573  00076C  6E3F               	movwf	___wmul@multiplicand+1,c
  1574  00076E  0E0A               	movlw	10
  1575  000770  6E3E               	movwf	___wmul@multiplicand,c
  1576  000772  EC93  F012         	call	___wmul	;wreg free
  1577  000776  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1578  00077A  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1579  00077E                     	if	0	;tblptru may be non-zero
  1580  00077E                     	endif
  1581  00077E                     	if	0	;tblptru may be non-zero
  1582  00077E                     	endif
  1583  00077E  0008               	tblrd		*
  1584  000780  50F5               	movf	tablat,w,c
  1585  000782  263C               	addwf	?___wmul,f,c
  1586  000784  0E00               	movlw	0
  1587  000786  223D               	addwfc	?___wmul+1,f,c
  1588  000788  0ED0               	movlw	208
  1589  00078A  243C               	addwf	?___wmul,w,c
  1590  00078C  0100               	movlb	0	; () banked
  1591  00078E  6FC5               	movwf	sprintf@prec& (0+255),b
  1592  000790  0EFF               	movlw	255
  1593  000792  203D               	addwfc	?___wmul+1,w,c
  1594  000794  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597  000796  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1598  000798  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1599  00079A                     l196:
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604  00079A  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1605  00079E  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1606  0007A2                     	if	0	;tblptru may be non-zero
  1607  0007A2                     	endif
  1608  0007A2                     	if	0	;tblptru may be non-zero
  1609  0007A2                     	endif
  1610  0007A2  0008               	tblrd		*
  1611  0007A4  50F5               	movf	tablat,w,c
  1612  0007A6  ECB8  F012         	call	_isdigit
  1613  0007AA  A0D8               	btfss	status,0,c
  1614  0007AC  D00A               	goto	l200
  1615  0007AE  D7D9               	goto	l197
  1616  0007B0                     l195:
  1617                           
  1618                           ;doprnt.c: 626: prec = 0;
  1619  0007B0  0E00               	movlw	0
  1620  0007B2  0100               	movlb	0	; () banked
  1621  0007B4  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1622  0007B6  0E00               	movlw	0
  1623  0007B8  6FC5               	movwf	sprintf@prec& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;doprnt.c: 628: flag |= 0x1000;
  1627  0007BA  89B9               	bsf	(sprintf@flag+1)& (0+255),4,b
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;doprnt.c: 630: }
  1631                           ;doprnt.c: 635: switch(c = *f++) {
  1632  0007BC  D002               	goto	l200
  1633  0007BE                     
  1634                           ; BSR set to: 0
  1635                           ;doprnt.c: 663: flag |= 0x400;
  1636                           
  1637                           ; BSR set to: 0
  1638  0007BE  85B9               	bsf	(sprintf@flag+1)& (0+255),2,b
  1639                           
  1640                           ;doprnt.c: 664: break;
  1641  0007C0  D012               	goto	l204
  1642  0007C2                     l200:
  1643                           
  1644                           ; BSR set to: 0
  1645  0007C2  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1646  0007C6  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1647  0007CA  0100               	movlb	0	; () banked
  1648  0007CC  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1649  0007CE  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1650  0007D0                     	if	0	;tblptru may be non-zero
  1651  0007D0                     	endif
  1652  0007D0                     	if	0	;tblptru may be non-zero
  1653  0007D0                     	endif
  1654  0007D0  0008               	tblrd		*
  1655  0007D2  CFF5 F0C7          	movff	tablat,sprintf@c
  1656  0007D6  51C7               	movf	sprintf@c& (0+255),w,b
  1657                           
  1658                           ; Switch size 1, requested type "space"
  1659                           ; Number of cases is 2, Range of values is 0 to 102
  1660                           ; switch strategies available:
  1661                           ; Name         Instructions Cycles
  1662                           ; simple_byte            7     4 (average)
  1663                           ;	Chosen strategy is simple_byte
  1664  0007D8  0A00               	xorlw	0	; case 0
  1665  0007DA  B4D8               	btfsc	status,2,c
  1666  0007DC  D39D               	goto	u4520
  1667  0007DE  0A66               	xorlw	102	; case 102
  1668  0007E0  B4D8               	btfsc	status,2,c
  1669  0007E2  D7ED               	goto	l203
  1670  0007E4  D38C               	goto	l262
  1671  0007E6                     l204:
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;doprnt.c: 825: if(flag & (0x700)) {
  1675                           
  1676                           ; BSR set to: 0
  1677  0007E6  0E07               	movlw	7
  1678  0007E8  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  1679  0007EA  B4D8               	btfsc	status,2,c
  1680  0007EC  D2FD               	goto	l206
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;doprnt.c: 827: if(flag & 0x1000)
  1684  0007EE  A9B9               	btfss	(sprintf@flag+1)& (0+255),4,b
  1685  0007F0  D004               	goto	l207
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;doprnt.c: 829: prec = 6;
  1689  0007F2  0E00               	movlw	0
  1690  0007F4  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1691  0007F6  0E06               	movlw	6
  1692  0007F8  6FC5               	movwf	sprintf@prec& (0+255),b
  1693  0007FA                     l207:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1697                           
  1698                           ; BSR set to: 0
  1699  0007FA  C0B2  FFD9         	movff	sprintf@ap,fsr2l
  1700  0007FE  C0B3  FFDA         	movff	sprintf@ap+1,fsr2h
  1701  000802  CFDE F0C2          	movff	postinc2,sprintf@fval
  1702  000806  CFDE F0C3          	movff	postinc2,sprintf@fval+1
  1703  00080A  CFDD F0C4          	movff	postdec2,sprintf@fval+2
  1704                           
  1705                           ; BSR set to: 0
  1706  00080E  0E03               	movlw	3
  1707  000810  27B2               	addwf	sprintf@ap& (0+255),f,b
  1708  000812  0E00               	movlw	0
  1709  000814  23B3               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;doprnt.c: 831: if(fval < 0.0) {
  1713  000816  AFC4               	btfss	(sprintf@fval+2)& (0+255),7,b
  1714  000818  D011               	goto	l208
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 832: fval = -fval;
  1718  00081A  C0C2  F02E         	movff	sprintf@fval,___ftneg@f1
  1719  00081E  C0C3  F02F         	movff	sprintf@fval+1,___ftneg@f1+1
  1720  000822  C0C4  F030         	movff	sprintf@fval+2,___ftneg@f1+2
  1721  000826  ECA6  F012         	call	___ftneg	;wreg free
  1722  00082A  C02E  F0C2         	movff	?___ftneg,sprintf@fval
  1723  00082E  C02F  F0C3         	movff	?___ftneg+1,sprintf@fval+1
  1724  000832  C030  F0C4         	movff	?___ftneg+2,sprintf@fval+2
  1725                           
  1726                           ;doprnt.c: 833: flag |= 0x03;
  1727  000836  0E03               	movlw	3
  1728  000838  0100               	movlb	0	; () banked
  1729  00083A  13B8               	iorwf	sprintf@flag& (0+255),f,b
  1730  00083C                     l208:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;doprnt.c: 834: }
  1734                           ;doprnt.c: 835: exp = 0;
  1735                           
  1736                           ; BSR set to: 0
  1737  00083C  0E00               	movlw	0
  1738  00083E  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  1739  000840  0E00               	movlw	0
  1740  000842  6FC0               	movwf	sprintf@exp& (0+255),b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;doprnt.c: 836: if( fval!=0) {
  1744  000844  51C2               	movf	sprintf@fval& (0+255),w,b
  1745  000846  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1746  000848  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1747  00084A  B4D8               	btfsc	status,2,c
  1748  00084C  D086               	goto	l213
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1752  00084E  0E82               	movlw	130
  1753  000850  6FA9               	movwf	??_sprintf& (0+255),b
  1754  000852  0EFF               	movlw	255
  1755  000854  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  1756  000856  C0C2  F0AB         	movff	sprintf@fval,??_sprintf+2
  1757  00085A  C0C3  F0AC         	movff	sprintf@fval+1,??_sprintf+3
  1758  00085E  C0C4  F0AD         	movff	sprintf@fval+2,??_sprintf+4
  1759  000862  C0C5  F0AE         	movff	sprintf@fval+3,??_sprintf+5
  1760  000866  0E10               	movlw	16
  1761  000868  D005               	goto	u4170
  1762  00086A                     u4175:
  1763  00086A  90D8               	bcf	status,0,c
  1764  00086C  33AE               	rrcf	(??_sprintf+5)& (0+255),f,b
  1765  00086E  33AD               	rrcf	(??_sprintf+4)& (0+255),f,b
  1766  000870  33AC               	rrcf	(??_sprintf+3)& (0+255),f,b
  1767  000872  33AB               	rrcf	(??_sprintf+2)& (0+255),f,b
  1768  000874                     u4170:
  1769  000874  2EE8               	decfsz	wreg,f,c
  1770  000876  D7F9               	goto	u4175
  1771  000878  51AB               	movf	(??_sprintf+2)& (0+255),w,b
  1772  00087A  25A9               	addwf	??_sprintf& (0+255),w,b
  1773  00087C  6FC0               	movwf	sprintf@exp& (0+255),b
  1774  00087E  0E00               	movlw	0
  1775  000880  21AA               	addwfc	(??_sprintf+1)& (0+255),w,b
  1776  000882  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;doprnt.c: 838: exp--;
  1780  000884  07C0               	decf	sprintf@exp& (0+255),f,b
  1781  000886  A0D8               	btfss	status,0,c
  1782  000888  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;doprnt.c: 839: exp *= 3;
  1786  00088A  C0C0  F03C         	movff	sprintf@exp,___wmul@multiplier
  1787  00088E  C0C1  F03D         	movff	sprintf@exp+1,___wmul@multiplier+1
  1788  000892  0E00               	movlw	0
  1789  000894  6E3F               	movwf	___wmul@multiplicand+1,c
  1790  000896  0E03               	movlw	3
  1791  000898  6E3E               	movwf	___wmul@multiplicand,c
  1792  00089A  EC93  F012         	call	___wmul	;wreg free
  1793  00089E  C03C  F0C0         	movff	?___wmul,sprintf@exp
  1794  0008A2  C03D  F0C1         	movff	?___wmul+1,sprintf@exp+1
  1795                           
  1796                           ;doprnt.c: 840: exp /= 10;
  1797  0008A6  C0C0  F034         	movff	sprintf@exp,___awdiv@dividend
  1798  0008AA  C0C1  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  1799  0008AE  0E00               	movlw	0
  1800  0008B0  6E37               	movwf	___awdiv@divisor+1,c
  1801  0008B2  0E0A               	movlw	10
  1802  0008B4  6E36               	movwf	___awdiv@divisor,c
  1803  0008B6  EC5E  F010         	call	___awdiv	;wreg free
  1804  0008BA  C034  F0C0         	movff	?___awdiv,sprintf@exp
  1805  0008BE  C035  F0C1         	movff	?___awdiv+1,sprintf@exp+1
  1806                           
  1807                           ;doprnt.c: 841: if(exp < 0)
  1808  0008C2  0100               	movlb	0	; () banked
  1809  0008C4  AFC1               	btfss	(sprintf@exp+1)& (0+255),7,b
  1810  0008C6  D003               	goto	l210
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 842: exp--;
  1814  0008C8  07C0               	decf	sprintf@exp& (0+255),f,b
  1815  0008CA  A0D8               	btfss	status,0,c
  1816  0008CC  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1817  0008CE                     l210:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1821                           
  1822                           ; BSR set to: 0
  1823  0008CE  51C0               	movf	sprintf@exp& (0+255),w,b
  1824  0008D0  0800               	sublw	0
  1825  0008D2  EC93  F007         	call	_scale
  1826  0008D6  C086  F0BC         	movff	?_scale,sprintf@tmpval
  1827  0008DA  C087  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  1828  0008DE  C088  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  1829                           
  1830                           ;doprnt.c: 847: tmpval.integ *= fval;
  1831  0008E2  C0BC  F042         	movff	sprintf@tmpval,___ftmul@f1
  1832  0008E6  C0BD  F043         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1833  0008EA  C0BE  F044         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1834  0008EE  C0C2  F045         	movff	sprintf@fval,___ftmul@f2
  1835  0008F2  C0C3  F046         	movff	sprintf@fval+1,___ftmul@f2+1
  1836  0008F6  C0C4  F047         	movff	sprintf@fval+2,___ftmul@f2+2
  1837  0008FA  EC74  F00E         	call	___ftmul	;wreg free
  1838  0008FE  C042  F0BC         	movff	?___ftmul,sprintf@tmpval
  1839  000902  C043  F0BD         	movff	?___ftmul+1,sprintf@tmpval+1
  1840  000906  C044  F0BE         	movff	?___ftmul+2,sprintf@tmpval+2
  1841                           
  1842                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1843  00090A  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1844  00090E  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1845  000912  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1846  000916  0E00               	movlw	0
  1847  000918  6E31               	movwf	___ftge@ff2,c
  1848  00091A  0E80               	movlw	128
  1849  00091C  6E32               	movwf	___ftge@ff2+1,c
  1850  00091E  0E3F               	movlw	63
  1851  000920  6E33               	movwf	___ftge@ff2+2,c
  1852  000922  EC16  F010         	call	___ftge	;wreg free
  1853  000926  B0D8               	btfsc	status,0,c
  1854  000928  D005               	goto	l211
  1855                           
  1856                           ;doprnt.c: 849: exp--;
  1857  00092A  0100               	movlb	0	; () banked
  1858  00092C  07C0               	decf	sprintf@exp& (0+255),f,b
  1859  00092E  A0D8               	btfss	status,0,c
  1860  000930  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1861  000932  D013               	goto	l213
  1862  000934                     l211:
  1863                           
  1864                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1865                           
  1866                           ; BSR set to: 0
  1867  000934  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1868  000938  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1869  00093C  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1870  000940  0E00               	movlw	0
  1871  000942  6E31               	movwf	___ftge@ff2,c
  1872  000944  0E20               	movlw	32
  1873  000946  6E32               	movwf	___ftge@ff2+1,c
  1874  000948  0E41               	movlw	65
  1875  00094A  6E33               	movwf	___ftge@ff2+2,c
  1876  00094C  EC16  F010         	call	___ftge	;wreg free
  1877  000950  A0D8               	btfss	status,0,c
  1878  000952  D003               	goto	l213
  1879                           
  1880                           ;doprnt.c: 851: exp++;
  1881  000954  0100               	movlb	0	; () banked
  1882  000956  4BC0               	infsnz	sprintf@exp& (0+255),f,b
  1883  000958  2BC1               	incf	(sprintf@exp+1)& (0+255),f,b
  1884  00095A                     l213:
  1885                           
  1886                           ;doprnt.c: 852: }
  1887                           ;doprnt.c: 1112: if(prec <= 12)
  1888                           
  1889                           ; BSR set to: 0
  1890                           
  1891                           ; BSR set to: 0
  1892                           
  1893                           ; BSR set to: 0
  1894  00095A  0100               	movlb	0	; () banked
  1895  00095C  BFC6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1896  00095E  D006               	goto	u4210
  1897  000960  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  1898  000962  E11B               	bnz	l3931
  1899  000964  0E0D               	movlw	13
  1900  000966  5DC5               	subwf	sprintf@prec& (0+255),w,b
  1901  000968  B0D8               	btfsc	status,0,c
  1902  00096A  D017               	goto	l214
  1903  00096C                     u4210:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;doprnt.c: 1113: fval += fround(prec);
  1907  00096C  C0C2  F090         	movff	sprintf@fval,___ftadd@f1
  1908  000970  C0C3  F091         	movff	sprintf@fval+1,___ftadd@f1+1
  1909  000974  C0C4  F092         	movff	sprintf@fval+2,___ftadd@f1+2
  1910  000978  51C5               	movf	sprintf@prec& (0+255),w,b
  1911  00097A  ECA3  F009         	call	_fround
  1912  00097E  C086  F093         	movff	?_fround,___ftadd@f2
  1913  000982  C087  F094         	movff	?_fround+1,___ftadd@f2+1
  1914  000986  C088  F095         	movff	?_fround+2,___ftadd@f2+2
  1915  00098A  ECD0  F00A         	call	___ftadd	;wreg free
  1916  00098E  C090  F0C2         	movff	?___ftadd,sprintf@fval
  1917  000992  C091  F0C3         	movff	?___ftadd+1,sprintf@fval+1
  1918  000996  C092  F0C4         	movff	?___ftadd+2,sprintf@fval+2
  1919  00099A                     l214:
  1920  00099A                     l3931:
  1921                           
  1922                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1923  00099A  0100               	movlb	0	; () banked
  1924  00099C  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1925  00099E  D006               	goto	u4220
  1926  0009A0  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  1927  0009A2  E11F               	bnz	l3939
  1928  0009A4  0E0A               	movlw	10
  1929  0009A6  5DC0               	subwf	sprintf@exp& (0+255),w,b
  1930  0009A8  B0D8               	btfsc	status,0,c
  1931  0009AA  D01B               	goto	u4250
  1932  0009AC                     u4220:
  1933                           
  1934                           ; BSR set to: 0
  1935  0009AC  51C2               	movf	sprintf@fval& (0+255),w,b
  1936  0009AE  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1937  0009B0  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1938  0009B2  B4D8               	btfsc	status,2,c
  1939  0009B4  D055               	goto	l215
  1940                           
  1941                           ; BSR set to: 0
  1942  0009B6  C0C2  F08D         	movff	sprintf@fval,___fttol@f1
  1943  0009BA  C0C3  F08E         	movff	sprintf@fval+1,___fttol@f1+1
  1944  0009BE  C0C4  F08F         	movff	sprintf@fval+2,___fttol@f1+2
  1945  0009C2  ECF8  F00D         	call	___fttol	;wreg free
  1946  0009C6  0100               	movlb	0	; () banked
  1947  0009C8  518D               	movf	?___fttol& (0+255),w,b
  1948  0009CA  118E               	iorwf	(?___fttol+1)& (0+255),w,b
  1949  0009CC  118F               	iorwf	(?___fttol+2)& (0+255),w,b
  1950  0009CE  1190               	iorwf	(?___fttol+3)& (0+255),w,b
  1951  0009D0  B4D8               	btfsc	status,2,c
  1952                           
  1953                           ; BSR set to: 0
  1954  0009D2  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1955  0009D4  D045               	goto	l215
  1956  0009D6  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  1957  0009D8  E104               	bnz	l3939
  1958  0009DA  0E02               	movlw	2
  1959  0009DC  5DC0               	subwf	sprintf@exp& (0+255),w,b
  1960  0009DE  A0D8               	btfss	status,0,c
  1961  0009E0  D03F               	goto	l215
  1962  0009E2                     u4250:
  1963  0009E2                     l3939:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1967  0009E2  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1968  0009E6  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1969  0009EA  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1970  0009EE  0E70               	movlw	112
  1971  0009F0  6E31               	movwf	___ftge@ff2,c
  1972  0009F2  0E89               	movlw	137
  1973  0009F4  6E32               	movwf	___ftge@ff2+1,c
  1974  0009F6  0E40               	movlw	64
  1975  0009F8  6E33               	movwf	___ftge@ff2+2,c
  1976  0009FA  EC16  F010         	call	___ftge	;wreg free
  1977  0009FE  B0D8               	btfsc	status,0,c
  1978  000A00  D003               	goto	l218
  1979                           
  1980                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1981  000A02  0100               	movlb	0	; () banked
  1982  000A04  0EF7               	movlw	247
  1983  000A06  D002               	goto	L1
  1984  000A08                     l218:
  1985                           
  1986                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1987                           
  1988                           ; BSR set to: 0
  1989  000A08  0100               	movlb	0	; () banked
  1990  000A0A  0EF8               	movlw	248
  1991  000A0C                     L1:
  1992  000A0C  27C0               	addwf	sprintf@exp& (0+255),f,b
  1993  000A0E  0EFF               	movlw	255
  1994  000A10  23C1               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;doprnt.c: 1124: }
  1998                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1999                           
  2000                           ; BSR set to: 0
  2001  000A12  51C0               	movf	sprintf@exp& (0+255),w,b
  2002  000A14  EC93  F007         	call	_scale
  2003  000A18  C086  F0BC         	movff	?_scale,sprintf@tmpval
  2004  000A1C  C087  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  2005  000A20  C088  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  2006                           
  2007                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2008  000A24  C0C2  F02E         	movff	sprintf@fval,__tdiv_to_l_@f1
  2009  000A28  C0C3  F02F         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2010  000A2C  C0C4  F030         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2011  000A30  C0BC  F031         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2012  000A34  C0BD  F032         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2013  000A38  C0BE  F033         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2014  000A3C  ECA7  F00B         	call	__tdiv_to_l_	;wreg free
  2015  000A40  C02E  F0B4         	movff	?__tdiv_to_l_,sprintf@val
  2016  000A44  C02F  F0B5         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2017  000A48  C030  F0B6         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2018  000A4C  C031  F0B7         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2019                           
  2020                           ;doprnt.c: 1129: fval = 0.0;
  2021  000A50  0E00               	movlw	0
  2022  000A52  0100               	movlb	0	; () banked
  2023  000A54  6FC2               	movwf	sprintf@fval& (0+255),b
  2024  000A56  0E00               	movlw	0
  2025  000A58  6FC3               	movwf	(sprintf@fval+1)& (0+255),b
  2026  000A5A  0E00               	movlw	0
  2027  000A5C  6FC4               	movwf	(sprintf@fval+2)& (0+255),b
  2028                           
  2029                           ;doprnt.c: 1130: } else {
  2030  000A5E  D033               	goto	l224
  2031  000A60                     l215:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2035                           
  2036                           ; BSR set to: 0
  2037  000A60  C0C2  F08D         	movff	sprintf@fval,___fttol@f1
  2038  000A64  C0C3  F08E         	movff	sprintf@fval+1,___fttol@f1+1
  2039  000A68  C0C4  F08F         	movff	sprintf@fval+2,___fttol@f1+2
  2040  000A6C  ECF8  F00D         	call	___fttol	;wreg free
  2041  000A70  C08D  F0B4         	movff	?___fttol,sprintf@val
  2042  000A74  C08E  F0B5         	movff	?___fttol+1,sprintf@val+1
  2043  000A78  C08F  F0B6         	movff	?___fttol+2,sprintf@val+2
  2044  000A7C  C090  F0B7         	movff	?___fttol+3,sprintf@val+3
  2045                           
  2046                           ;doprnt.c: 1132: fval -= (double)val;
  2047  000A80  C0C2  F09C         	movff	sprintf@fval,___ftsub@f1
  2048  000A84  C0C3  F09D         	movff	sprintf@fval+1,___ftsub@f1+1
  2049  000A88  C0C4  F09E         	movff	sprintf@fval+2,___ftsub@f1+2
  2050  000A8C  C0B4  F036         	movff	sprintf@val,___lltoft@c
  2051  000A90  C0B5  F037         	movff	sprintf@val+1,___lltoft@c+1
  2052  000A94  C0B6  F038         	movff	sprintf@val+2,___lltoft@c+2
  2053  000A98  C0B7  F039         	movff	sprintf@val+3,___lltoft@c+3
  2054  000A9C  EC4C  F011         	call	___lltoft	;wreg free
  2055  000AA0  C036  F09F         	movff	?___lltoft,___ftsub@f2
  2056  000AA4  C037  F0A0         	movff	?___lltoft+1,___ftsub@f2+1
  2057  000AA8  C038  F0A1         	movff	?___lltoft+2,___ftsub@f2+2
  2058  000AAC  EC12  F012         	call	___ftsub	;wreg free
  2059  000AB0  C09C  F0C2         	movff	?___ftsub,sprintf@fval
  2060  000AB4  C09D  F0C3         	movff	?___ftsub+1,sprintf@fval+1
  2061  000AB8  C09E  F0C4         	movff	?___ftsub+2,sprintf@fval+2
  2062                           
  2063                           ;doprnt.c: 1133: exp = 0;
  2064  000ABC  0E00               	movlw	0
  2065  000ABE  0100               	movlb	0	; () banked
  2066  000AC0  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  2067  000AC2  0E00               	movlw	0
  2068  000AC4  6FC0               	movwf	sprintf@exp& (0+255),b
  2069  000AC6                     l224:
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;doprnt.c: 1134: }
  2073                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2074                           
  2075                           ; BSR set to: 0
  2076  000AC6  0E01               	movlw	1
  2077  000AC8  6FC7               	movwf	sprintf@c& (0+255),b
  2078  000ACA                     l3959:
  2079                           
  2080                           ; BSR set to: 0
  2081  000ACA  0E0A               	movlw	10
  2082  000ACC  19C7               	xorwf	sprintf@c& (0+255),w,b
  2083  000ACE  B4D8               	btfsc	status,2,c
  2084  000AD0  D018               	goto	u4290
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;doprnt.c: 1137: if(val < dpowers[c])
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092  000AD2  51C7               	movf	sprintf@c& (0+255),w,b
  2093  000AD4  0D04               	mullw	4
  2094  000AD6  0E01               	movlw	low _dpowers
  2095  000AD8  24F3               	addwf	prodl,w,c
  2096  000ADA  6EF6               	movwf	tblptrl,c
  2097  000ADC  0E06               	movlw	high _dpowers
  2098  000ADE  20F4               	addwfc	prodh,w,c
  2099  000AE0  6EF7               	movwf	tblptrh,c
  2100  000AE2                     	if	0	;There are less than 3 active tblptr bytes
  2101  000AE2                     	endif
  2102  000AE2  0009               	tblrd		*+
  2103  000AE4  50F5               	movf	tablat,w,c
  2104  000AE6  5DB4               	subwf	sprintf@val& (0+255),w,b
  2105  000AE8  0009               	tblrd		*+
  2106  000AEA  50F5               	movf	tablat,w,c
  2107  000AEC  59B5               	subwfb	(sprintf@val+1)& (0+255),w,b
  2108  000AEE  0009               	tblrd		*+
  2109  000AF0  50F5               	movf	tablat,w,c
  2110  000AF2  59B6               	subwfb	(sprintf@val+2)& (0+255),w,b
  2111  000AF4  0009               	tblrd		*+
  2112  000AF6  50F5               	movf	tablat,w,c
  2113  000AF8  59B7               	subwfb	(sprintf@val+3)& (0+255),w,b
  2114  000AFA  A0D8               	btfss	status,0,c
  2115  000AFC  D002               	goto	u4290
  2116                           
  2117                           ; BSR set to: 0
  2118                           
  2119                           ; BSR set to: 0
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;doprnt.c: 1138: break;
  2123  000AFE  2BC7               	incf	sprintf@c& (0+255),f,b
  2124  000B00  D7E4               	goto	l3959
  2125  000B02                     u4290:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;doprnt.c: 1142: width -= prec + c + exp;
  2129                           
  2130                           ; BSR set to: 0
  2131  000B02  C0C7  F0A9         	movff	sprintf@c,??_sprintf
  2132  000B06  6BAA               	clrf	(??_sprintf+1)& (0+255),b
  2133  000B08  BFA9               	btfsc	??_sprintf& (0+255),7,b
  2134  000B0A  07AA               	decf	(??_sprintf+1)& (0+255),f,b
  2135  000B0C  51C5               	movf	sprintf@prec& (0+255),w,b
  2136  000B0E  27A9               	addwf	??_sprintf& (0+255),f,b
  2137  000B10  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2138  000B12  23AA               	addwfc	(??_sprintf+1)& (0+255),f,b
  2139  000B14  51C0               	movf	sprintf@exp& (0+255),w,b
  2140  000B16  27A9               	addwf	??_sprintf& (0+255),f,b
  2141  000B18  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  2142  000B1A  23AA               	addwfc	(??_sprintf+1)& (0+255),f,b
  2143  000B1C  51A9               	movf	??_sprintf& (0+255),w,b
  2144  000B1E  5FBA               	subwf	sprintf@width& (0+255),f,b
  2145  000B20  51AA               	movf	(??_sprintf+1)& (0+255),w,b
  2146  000B22  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2147                           
  2148                           ;doprnt.c: 1143: if(
  2149                           ;doprnt.c: 1147: prec)
  2150  000B24  51C5               	movf	sprintf@prec& (0+255),w,b
  2151  000B26  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2152  000B28  B4D8               	btfsc	status,2,c
  2153  000B2A  D003               	goto	l228
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;doprnt.c: 1148: width--;
  2157  000B2C  07BA               	decf	sprintf@width& (0+255),f,b
  2158  000B2E  A0D8               	btfss	status,0,c
  2159  000B30  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2160  000B32                     l228:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;doprnt.c: 1149: if(flag & 0x03)
  2164                           
  2165                           ; BSR set to: 0
  2166  000B32  0E03               	movlw	3
  2167  000B34  15B8               	andwf	sprintf@flag& (0+255),w,b
  2168  000B36  6FA9               	movwf	??_sprintf& (0+255),b
  2169  000B38  0E00               	movlw	0
  2170  000B3A  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2171  000B3C  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2172  000B3E  51A9               	movf	??_sprintf& (0+255),w,b
  2173  000B40  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2174  000B42  B4D8               	btfsc	status,2,c
  2175  000B44  D00C               	goto	l230
  2176  000B46  D008               	goto	l3983
  2177  000B48                     l3979:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2181  000B48  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2182  000B4C  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2183  000B50  0E20               	movlw	32
  2184  000B52  6EDF               	movwf	indf2,c
  2185                           
  2186                           ; BSR set to: 0
  2187  000B54  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2188  000B56  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2189  000B58                     l3983:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 1182: width--;
  2193  000B58  07BA               	decf	sprintf@width& (0+255),f,b
  2194  000B5A  A0D8               	btfss	status,0,c
  2195  000B5C  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2196  000B5E                     l230:
  2197                           
  2198                           ; BSR set to: 0
  2199                           
  2200                           ; BSR set to: 0
  2201  000B5E  BFBB               	btfsc	(sprintf@width+1)& (0+255),7,b
  2202  000B60  D005               	goto	u4320
  2203  000B62  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2204  000B64  E1F1               	bnz	l3979
  2205  000B66  05BA               	decf	sprintf@width& (0+255),w,b
  2206  000B68  B0D8               	btfsc	status,0,c
  2207  000B6A  D7EE               	goto	l231
  2208  000B6C                     u4320:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;doprnt.c: 1183: }
  2212                           ;doprnt.c: 1188: if(flag & 0x03)
  2213                           
  2214                           ; BSR set to: 0
  2215  000B6C  0E03               	movlw	3
  2216  000B6E  15B8               	andwf	sprintf@flag& (0+255),w,b
  2217  000B70  6FA9               	movwf	??_sprintf& (0+255),b
  2218  000B72  0E00               	movlw	0
  2219  000B74  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2220  000B76  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2221  000B78  51A9               	movf	??_sprintf& (0+255),w,b
  2222  000B7A  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2223  000B7C  B4D8               	btfsc	status,2,c
  2224  000B7E  D050               	goto	l234
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2228  000B80  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2229  000B84  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2230  000B88  0E2D               	movlw	45
  2231  000B8A  D047               	goto	L2
  2232  000B8C                     
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 1200: {
  2235                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2236                           
  2237                           ; BSR set to: 0
  2238  000B8C  C0B4  F02E         	movff	sprintf@val,___lldiv@dividend
  2239  000B90  C0B5  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2240  000B94  C0B6  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2241  000B98  C0B7  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2242  000B9C  51C7               	movf	sprintf@c& (0+255),w,b
  2243  000B9E  0D04               	mullw	4
  2244  000BA0  0E01               	movlw	low _dpowers
  2245  000BA2  24F3               	addwf	prodl,w,c
  2246  000BA4  6EF6               	movwf	tblptrl,c
  2247  000BA6  0E06               	movlw	high _dpowers
  2248  000BA8  20F4               	addwfc	prodh,w,c
  2249  000BAA  6EF7               	movwf	tblptrh,c
  2250  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  2251  000BAC                     	endif
  2252  000BAC  0009               	tblrd		*+
  2253  000BAE  CFF5 F032          	movff	tablat,___lldiv@divisor
  2254  000BB2  0009               	tblrd		*+
  2255  000BB4  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2256  000BB8  0009               	tblrd		*+
  2257  000BBA  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2258  000BBE  000A               	tblrd		*-
  2259  000BC0  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2260  000BC4  ECA0  F010         	call	___lldiv	;wreg free
  2261  000BC8  C02E  F0BC         	movff	?___lldiv,sprintf@tmpval
  2262  000BCC  C02F  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2263  000BD0  C030  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2264  000BD4  C031  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2265                           
  2266                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2267  000BD8  C0BC  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2268  000BDC  C0BD  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2269  000BE0  C0BE  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2270  000BE4  C0BF  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2271  000BE8  0E0A               	movlw	10
  2272  000BEA  6E32               	movwf	___llmod@divisor,c
  2273  000BEC  0E00               	movlw	0
  2274  000BEE  6E33               	movwf	___llmod@divisor+1,c
  2275  000BF0  0E00               	movlw	0
  2276  000BF2  6E34               	movwf	___llmod@divisor+2,c
  2277  000BF4  0E00               	movlw	0
  2278  000BF6  6E35               	movwf	___llmod@divisor+3,c
  2279  000BF8  EC19  F011         	call	___llmod	;wreg free
  2280  000BFC  C02E  F0BC         	movff	?___llmod,sprintf@tmpval
  2281  000C00  C02F  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2282  000C04  C030  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2283  000C08  C031  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2284                           
  2285                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2286  000C0C  0100               	movlb	0	; () banked
  2287  000C0E  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2288  000C10  0F30               	addlw	48
  2289  000C12  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2290  000C16  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2291  000C1A                     L2:
  2292  000C1A  6EDF               	movwf	indf2,c
  2293                           
  2294                           ; BSR set to: 0
  2295  000C1C  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2296  000C1E  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2297  000C20                     l234:
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302  000C20  07C7               	decf	sprintf@c& (0+255),f,b
  2303  000C22  29C7               	incf	sprintf@c& (0+255),w,b
  2304  000C24  B4D8               	btfsc	status,2,c
  2305  000C26  D00C               	goto	l237
  2306  000C28  D7B1               	goto	l235
  2307  000C2A                     l4003:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2311  000C2A  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2312  000C2E  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2313  000C32  0E30               	movlw	48
  2314  000C34  6EDF               	movwf	indf2,c
  2315                           
  2316                           ; BSR set to: 0
  2317  000C36  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2318  000C38  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;doprnt.c: 1209: exp--;
  2322  000C3A  07C0               	decf	sprintf@exp& (0+255),f,b
  2323  000C3C  A0D8               	btfss	status,0,c
  2324  000C3E  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  2325  000C40                     l237:
  2326                           
  2327                           ; BSR set to: 0
  2328                           
  2329                           ; BSR set to: 0
  2330  000C40  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2331  000C42  D005               	goto	u4350
  2332  000C44  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  2333  000C46  E1F1               	bnz	l4003
  2334  000C48  05C0               	decf	sprintf@exp& (0+255),w,b
  2335  000C4A  B0D8               	btfsc	status,0,c
  2336  000C4C  D7EE               	goto	l238
  2337  000C4E                     u4350:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 1210: }
  2341                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2342                           
  2343                           ; BSR set to: 0
  2344  000C4E  BFC6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2345  000C50  D009               	goto	l240
  2346  000C52  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2347  000C54  E104               	bnz	u4360
  2348  000C56  0E09               	movlw	9
  2349  000C58  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2350  000C5A  A0D8               	btfss	status,0,c
  2351  000C5C  D003               	goto	l240
  2352  000C5E                     u4360:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2356  000C5E  0E08               	movlw	8
  2357  000C60  6FC7               	movwf	sprintf@c& (0+255),b
  2358  000C62  D002               	goto	l241
  2359  000C64                     l240:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 1213: else
  2363                           ;doprnt.c: 1214: c = prec;
  2364  000C64  C0C5  F0C7         	movff	sprintf@prec,sprintf@c
  2365  000C68                     l241:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;doprnt.c: 1215: prec -= c;
  2369                           
  2370                           ; BSR set to: 0
  2371  000C68  51C7               	movf	sprintf@c& (0+255),w,b
  2372  000C6A  5FC5               	subwf	sprintf@prec& (0+255),f,b
  2373  000C6C  0E00               	movlw	0
  2374  000C6E  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2375  000C70  0EFF               	movlw	255
  2376  000C72  5BC6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1219: if(c)
  2380  000C74  51C7               	movf	sprintf@c& (0+255),w,b
  2381  000C76  B4D8               	btfsc	status,2,c
  2382  000C78  D008               	goto	l242
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2386  000C7A  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2387  000C7E  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2388  000C82  0E2E               	movlw	46
  2389  000C84  6EDF               	movwf	indf2,c
  2390                           
  2391                           ; BSR set to: 0
  2392  000C86  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2393  000C88  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2394  000C8A                     l242:
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2398                           
  2399                           ; BSR set to: 0
  2400  000C8A  51C7               	movf	sprintf@c& (0+255),w,b
  2401  000C8C  EC93  F007         	call	_scale
  2402  000C90  C086  F0AF         	movff	?_scale,_sprintf$835
  2403  000C94  C087  F0B0         	movff	?_scale+1,_sprintf$835+1
  2404  000C98  C088  F0B1         	movff	?_scale+2,_sprintf$835+2
  2405                           
  2406                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2407  000C9C  C0C2  F045         	movff	sprintf@fval,___ftmul@f2
  2408  000CA0  C0C3  F046         	movff	sprintf@fval+1,___ftmul@f2+1
  2409  000CA4  C0C4  F047         	movff	sprintf@fval+2,___ftmul@f2+2
  2410  000CA8  C0AF  F042         	movff	_sprintf$835,___ftmul@f1
  2411  000CAC  C0B0  F043         	movff	_sprintf$835+1,___ftmul@f1+1
  2412  000CB0  C0B1  F044         	movff	_sprintf$835+2,___ftmul@f1+2
  2413  000CB4  EC74  F00E         	call	___ftmul	;wreg free
  2414  000CB8  C042  F08D         	movff	?___ftmul,___fttol@f1
  2415  000CBC  C043  F08E         	movff	?___ftmul+1,___fttol@f1+1
  2416  000CC0  C044  F08F         	movff	?___ftmul+2,___fttol@f1+2
  2417  000CC4  ECF8  F00D         	call	___fttol	;wreg free
  2418  000CC8  C08D  F0B4         	movff	?___fttol,sprintf@val
  2419  000CCC  C08E  F0B5         	movff	?___fttol+1,sprintf@val+1
  2420  000CD0  C08F  F0B6         	movff	?___fttol+2,sprintf@val+2
  2421  000CD4  C090  F0B7         	movff	?___fttol+3,sprintf@val+3
  2422                           
  2423                           ;doprnt.c: 1228: while(c--) {
  2424  000CD8  D071               	goto	l243
  2425  000CDA                     
  2426                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2427  000CDA  C0B4  F02E         	movff	sprintf@val,___lldiv@dividend
  2428  000CDE  C0B5  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2429  000CE2  C0B6  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2430  000CE6  C0B7  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2431  000CEA  0100               	movlb	0	; () banked
  2432  000CEC  51C7               	movf	sprintf@c& (0+255),w,b
  2433  000CEE  0D04               	mullw	4
  2434  000CF0  0E01               	movlw	low _dpowers
  2435  000CF2  24F3               	addwf	prodl,w,c
  2436  000CF4  6EF6               	movwf	tblptrl,c
  2437  000CF6  0E06               	movlw	high _dpowers
  2438  000CF8  20F4               	addwfc	prodh,w,c
  2439  000CFA  6EF7               	movwf	tblptrh,c
  2440  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  2441  000CFC                     	endif
  2442  000CFC  0009               	tblrd		*+
  2443  000CFE  CFF5 F032          	movff	tablat,___lldiv@divisor
  2444  000D02  0009               	tblrd		*+
  2445  000D04  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2446  000D08  0009               	tblrd		*+
  2447  000D0A  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2448  000D0E  000A               	tblrd		*-
  2449  000D10  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2450  000D14  ECA0  F010         	call	___lldiv	;wreg free
  2451  000D18  C02E  F0BC         	movff	?___lldiv,sprintf@tmpval
  2452  000D1C  C02F  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2453  000D20  C030  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2454  000D24  C031  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2455                           
  2456                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2457  000D28  C0BC  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2458  000D2C  C0BD  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2459  000D30  C0BE  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2460  000D34  C0BF  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2461  000D38  0E0A               	movlw	10
  2462  000D3A  6E32               	movwf	___llmod@divisor,c
  2463  000D3C  0E00               	movlw	0
  2464  000D3E  6E33               	movwf	___llmod@divisor+1,c
  2465  000D40  0E00               	movlw	0
  2466  000D42  6E34               	movwf	___llmod@divisor+2,c
  2467  000D44  0E00               	movlw	0
  2468  000D46  6E35               	movwf	___llmod@divisor+3,c
  2469  000D48  EC19  F011         	call	___llmod	;wreg free
  2470  000D4C  C02E  F0BC         	movff	?___llmod,sprintf@tmpval
  2471  000D50  C02F  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2472  000D54  C030  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2473  000D58  C031  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2474                           
  2475                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2476  000D5C  0100               	movlb	0	; () banked
  2477  000D5E  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2478  000D60  0F30               	addlw	48
  2479  000D62  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2480  000D66  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2481  000D6A  6EDF               	movwf	indf2,c
  2482                           
  2483                           ; BSR set to: 0
  2484  000D6C  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2485  000D6E  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;doprnt.c: 1232: val %= dpowers[c];
  2489  000D70  C0B4  F02E         	movff	sprintf@val,___llmod@dividend
  2490  000D74  C0B5  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2491  000D78  C0B6  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2492  000D7C  C0B7  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2493  000D80  51C7               	movf	sprintf@c& (0+255),w,b
  2494  000D82  0D04               	mullw	4
  2495  000D84  0E01               	movlw	low _dpowers
  2496  000D86  24F3               	addwf	prodl,w,c
  2497  000D88  6EF6               	movwf	tblptrl,c
  2498  000D8A  0E06               	movlw	high _dpowers
  2499  000D8C  20F4               	addwfc	prodh,w,c
  2500  000D8E  6EF7               	movwf	tblptrh,c
  2501  000D90                     	if	0	;There are less than 3 active tblptr bytes
  2502  000D90                     	endif
  2503  000D90  0009               	tblrd		*+
  2504  000D92  CFF5 F032          	movff	tablat,___llmod@divisor
  2505  000D96  0009               	tblrd		*+
  2506  000D98  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2507  000D9C  0009               	tblrd		*+
  2508  000D9E  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2509  000DA2  000A               	tblrd		*-
  2510  000DA4  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2511  000DA8  EC19  F011         	call	___llmod	;wreg free
  2512  000DAC  C02E  F0B4         	movff	?___llmod,sprintf@val
  2513  000DB0  C02F  F0B5         	movff	?___llmod+1,sprintf@val+1
  2514  000DB4  C030  F0B6         	movff	?___llmod+2,sprintf@val+2
  2515  000DB8  C031  F0B7         	movff	?___llmod+3,sprintf@val+3
  2516  000DBC                     l243:
  2517  000DBC  0100               	movlb	0	; () banked
  2518  000DBE  07C7               	decf	sprintf@c& (0+255),f,b
  2519  000DC0  29C7               	incf	sprintf@c& (0+255),w,b
  2520  000DC2  B4D8               	btfsc	status,2,c
  2521  000DC4  D00C               	goto	l246
  2522  000DC6  D789               	goto	l244
  2523  000DC8                     
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2526                           
  2527                           ; BSR set to: 0
  2528  000DC8  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2529  000DCC  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2530  000DD0  0E30               	movlw	48
  2531  000DD2  6EDF               	movwf	indf2,c
  2532                           
  2533                           ; BSR set to: 0
  2534  000DD4  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2535  000DD6  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;doprnt.c: 1237: prec--;
  2539  000DD8  07C5               	decf	sprintf@prec& (0+255),f,b
  2540  000DDA  A0D8               	btfss	status,0,c
  2541  000DDC  07C6               	decf	(sprintf@prec+1)& (0+255),f,b
  2542  000DDE                     l246:
  2543                           
  2544                           ; BSR set to: 0
  2545                           
  2546                           ; BSR set to: 0
  2547  000DDE  51C5               	movf	sprintf@prec& (0+255),w,b
  2548  000DE0  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2549  000DE2  B4D8               	btfsc	status,2,c
  2550  000DE4  D08C               	goto	l262
  2551  000DE6  D7F0               	goto	l247
  2552  000DE8                     l206:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 1246: }
  2556                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2557                           
  2558                           ; BSR set to: 0
  2559  000DE8  51C5               	movf	sprintf@prec& (0+255),w,b
  2560  000DEA  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2561  000DEC  A4D8               	btfss	status,2,c
  2562  000DEE  D008               	goto	l249
  2563                           
  2564                           ; BSR set to: 0
  2565  000DF0  51B4               	movf	sprintf@val& (0+255),w,b
  2566  000DF2  11B5               	iorwf	(sprintf@val+1)& (0+255),w,b
  2567  000DF4  11B6               	iorwf	(sprintf@val+2)& (0+255),w,b
  2568  000DF6  11B7               	iorwf	(sprintf@val+3)& (0+255),w,b
  2569  000DF8  A4D8               	btfss	status,2,c
  2570  000DFA  D002               	goto	l249
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;doprnt.c: 1291: prec++;
  2574  000DFC  4BC5               	infsnz	sprintf@prec& (0+255),f,b
  2575  000DFE  2BC6               	incf	(sprintf@prec+1)& (0+255),f,b
  2576  000E00                     l249:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;doprnt.c: 1339: if(c < prec)
  2580                           
  2581                           ; BSR set to: 0
  2582  000E00  0E80               	movlw	128
  2583  000E02  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2584  000E04  0E7F               	movlw	127
  2585  000E06  6FA9               	movwf	??_sprintf& (0+255),b
  2586  000E08  51C5               	movf	sprintf@prec& (0+255),w,b
  2587  000E0A  5DC7               	subwf	sprintf@c& (0+255),w,b
  2588  000E0C  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2589  000E0E  0A80               	xorlw	128
  2590  000E10  59A9               	subwfb	??_sprintf& (0+255),w,b
  2591  000E12  B0D8               	btfsc	status,0,c
  2592  000E14  D003               	goto	l250
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1340: c = prec;
  2596  000E16  C0C5  F0C7         	movff	sprintf@prec,sprintf@c
  2597  000E1A  D010               	goto	l252
  2598  000E1C                     l250:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1341: else if(prec < c)
  2602                           
  2603                           ; BSR set to: 0
  2604  000E1C  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2605  000E1E  0A80               	xorlw	128
  2606  000E20  6FA9               	movwf	??_sprintf& (0+255),b
  2607  000E22  51C7               	movf	sprintf@c& (0+255),w,b
  2608  000E24  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2609  000E26  0E80               	movlw	128
  2610  000E28  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2611  000E2A  0E7F               	movlw	127
  2612  000E2C  59A9               	subwfb	??_sprintf& (0+255),w,b
  2613  000E2E  B0D8               	btfsc	status,0,c
  2614  000E30  D005               	goto	l252
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 1342: prec = c;
  2618  000E32  51C7               	movf	sprintf@c& (0+255),w,b
  2619  000E34  6FC5               	movwf	sprintf@prec& (0+255),b
  2620  000E36  6BC6               	clrf	(sprintf@prec+1)& (0+255),b
  2621  000E38  BFC5               	btfsc	sprintf@prec& (0+255),7,b
  2622  000E3A  07C6               	decf	(sprintf@prec+1)& (0+255),f,b
  2623  000E3C                     l252:
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2627                           
  2628                           ; BSR set to: 0
  2629                           
  2630                           ; BSR set to: 0
  2631  000E3C  51BA               	movf	sprintf@width& (0+255),w,b
  2632  000E3E  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2633  000E40  B4D8               	btfsc	status,2,c
  2634  000E42  D00D               	goto	l253
  2635                           
  2636                           ; BSR set to: 0
  2637  000E44  0E03               	movlw	3
  2638  000E46  15B8               	andwf	sprintf@flag& (0+255),w,b
  2639  000E48  6FA9               	movwf	??_sprintf& (0+255),b
  2640  000E4A  0E00               	movlw	0
  2641  000E4C  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2642  000E4E  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2643  000E50  51A9               	movf	??_sprintf& (0+255),w,b
  2644  000E52  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2645  000E54  B4D8               	btfsc	status,2,c
  2646  000E56  D003               	goto	l253
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;doprnt.c: 1346: width--;
  2650  000E58  07BA               	decf	sprintf@width& (0+255),f,b
  2651  000E5A  A0D8               	btfss	status,0,c
  2652  000E5C  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2653  000E5E                     l253:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2657                           
  2658                           ; BSR set to: 0
  2659  000E5E  ADB9               	btfss	(sprintf@flag+1)& (0+255),6,b
  2660  000E60  D013               	goto	l256
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 1349: if(width > prec)
  2664  000E62  51BA               	movf	sprintf@width& (0+255),w,b
  2665  000E64  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2666  000E66  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2667  000E68  0A80               	xorlw	128
  2668  000E6A  6FA9               	movwf	??_sprintf& (0+255),b
  2669  000E6C  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2670  000E6E  0A80               	xorlw	128
  2671  000E70  59A9               	subwfb	??_sprintf& (0+255),w,b
  2672  000E72  B0D8               	btfsc	status,0,c
  2673  000E74  D005               	goto	l255
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 1350: width -= prec;
  2677  000E76  51C5               	movf	sprintf@prec& (0+255),w,b
  2678  000E78  5FBA               	subwf	sprintf@width& (0+255),f,b
  2679  000E7A  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2680  000E7C  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2681  000E7E  D004               	goto	l256
  2682  000E80                     l255:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1351: else
  2686                           ;doprnt.c: 1352: width = 0;
  2687                           
  2688                           ; BSR set to: 0
  2689  000E80  0E00               	movlw	0
  2690  000E82  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  2691  000E84  0E00               	movlw	0
  2692  000E86  6FBA               	movwf	sprintf@width& (0+255),b
  2693  000E88                     l256:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 1353: }
  2697                           ;doprnt.c: 1381: if(width > c)
  2698                           
  2699                           ; BSR set to: 0
  2700                           
  2701                           ; BSR set to: 0
  2702  000E88  0E80               	movlw	128
  2703  000E8A  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2704  000E8C  0E7F               	movlw	127
  2705  000E8E  6FA9               	movwf	??_sprintf& (0+255),b
  2706  000E90  51BA               	movf	sprintf@width& (0+255),w,b
  2707  000E92  5DC7               	subwf	sprintf@c& (0+255),w,b
  2708  000E94  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2709  000E96  0A80               	xorlw	128
  2710  000E98  59A9               	subwfb	??_sprintf& (0+255),w,b
  2711  000E9A  B0D8               	btfsc	status,0,c
  2712  000E9C  D007               	goto	l257
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;doprnt.c: 1382: width -= c;
  2716  000E9E  51C7               	movf	sprintf@c& (0+255),w,b
  2717  000EA0  5FBA               	subwf	sprintf@width& (0+255),f,b
  2718  000EA2  0E00               	movlw	0
  2719  000EA4  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2720  000EA6  0EFF               	movlw	255
  2721  000EA8  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2722  000EAA  D004               	goto	l258
  2723  000EAC                     l257:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 1383: else
  2727                           ;doprnt.c: 1384: width = 0;
  2728                           
  2729                           ; BSR set to: 0
  2730  000EAC  0E00               	movlw	0
  2731  000EAE  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  2732  000EB0  0E00               	movlw	0
  2733  000EB2  6FBA               	movwf	sprintf@width& (0+255),b
  2734  000EB4                     l258:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;doprnt.c: 1422: {
  2738                           ;doprnt.c: 1424: if(width
  2739                           ;doprnt.c: 1428: )
  2740                           
  2741                           ; BSR set to: 0
  2742  000EB4  51BA               	movf	sprintf@width& (0+255),w,b
  2743  000EB6  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2744  000EB8  B4D8               	btfsc	status,2,c
  2745  000EBA  D00F               	goto	u4500
  2746  000EBC                     u4490:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2750                           
  2751                           ; BSR set to: 0
  2752                           
  2753                           ;doprnt.c: 1429: do
  2754  000EBC  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2755  000EC0  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2756  000EC4  0E20               	movlw	32
  2757  000EC6  6EDF               	movwf	indf2,c
  2758                           
  2759                           ; BSR set to: 0
  2760  000EC8  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2761  000ECA  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;doprnt.c: 1431: while(--width);
  2765  000ECC  07BA               	decf	sprintf@width& (0+255),f,b
  2766  000ECE  A0D8               	btfss	status,0,c
  2767  000ED0  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2768  000ED2  51BA               	movf	sprintf@width& (0+255),w,b
  2769  000ED4  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2770  000ED6  A4D8               	btfss	status,2,c
  2771  000ED8  D7F1               	goto	u4490
  2772  000EDA                     u4500:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;doprnt.c: 1438: if(flag & 0x03)
  2776                           
  2777                           ; BSR set to: 0
  2778                           
  2779                           ; BSR set to: 0
  2780  000EDA  0E03               	movlw	3
  2781  000EDC  15B8               	andwf	sprintf@flag& (0+255),w,b
  2782  000EDE  6FA9               	movwf	??_sprintf& (0+255),b
  2783  000EE0  0E00               	movlw	0
  2784  000EE2  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2785  000EE4  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2786  000EE6  51A9               	movf	??_sprintf& (0+255),w,b
  2787  000EE8  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2788  000EEA  B4D8               	btfsc	status,2,c
  2789  000EEC  D008               	goto	l262
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2793  000EEE  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2794  000EF2  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2795  000EF6  0E2D               	movlw	45
  2796  000EF8  6EDF               	movwf	indf2,c
  2797  000EFA                     l4093:
  2798                           
  2799                           ; BSR set to: 0
  2800  000EFA  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2801  000EFC  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2802  000EFE                     l262:
  2803                           
  2804                           ; BSR set to: 0
  2805                           
  2806                           ; BSR set to: 0
  2807                           
  2808                           ; BSR set to: 0
  2809  000EFE  C0A4  FFF6         	movff	sprintf@f,tblptrl
  2810  000F02  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  2811  000F06  4BA4               	infsnz	sprintf@f& (0+255),f,b
  2812  000F08  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  2813  000F0A                     	if	0	;tblptru may be non-zero
  2814  000F0A                     	endif
  2815  000F0A                     	if	0	;tblptru may be non-zero
  2816  000F0A                     	endif
  2817  000F0A  0008               	tblrd		*
  2818  000F0C  CFF5 F0C7          	movff	tablat,sprintf@c
  2819  000F10  51C7               	movf	sprintf@c& (0+255),w,b
  2820  000F12  A4D8               	btfss	status,2,c
  2821  000F14  EF4D  F003         	goto	l190
  2822  000F18                     u4520:
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;doprnt.c: 1538: *sp = 0;
  2826                           
  2827                           ; BSR set to: 0
  2828                           
  2829                           ;doprnt.c: 1469: }
  2830                           ;doprnt.c: 1533: }
  2831                           ;doprnt.c: 1535: alldone:
  2832                           
  2833                           ; BSR set to: 0
  2834  000F18  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2835  000F1C  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2836  000F20  0E00               	movlw	0
  2837  000F22  6EDF               	movwf	indf2,c
  2838  000F24  0012               	return	
  2839  000F26                     __end_of_sprintf:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _scale *****************
  2858 ;; Defined at:
  2859 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  scl             1    wreg     char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  scl             1   12[BANK0 ] char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  3    6[BANK0 ] char 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       3       0       0       0       0       0
  2874 ;;      Locals:         0       4       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0
  2876 ;;      Totals:         0       7       0       0       0       0       0
  2877 ;;Total ram usage:        7 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    4
  2880 ;; This function calls:
  2881 ;;		___awdiv
  2882 ;;		___awmod
  2883 ;;		___ftmul
  2884 ;;		___wmul
  2885 ;; This function is called by:
  2886 ;;		_sprintf
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text5
  2891  000F26                     __ptext5:
  2892                           	opt stack 0
  2893  000F26                     _scale:
  2894                           	opt stack 24
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;incstack = 0
  2898                           ;scale@scl stored from wreg
  2899  000F26  0100               	movlb	0	; () banked
  2900  000F28  6F8C               	movwf	scale@scl& (0+255),b
  2901                           
  2902                           ;doprnt.c: 428: if(scl < 0) {
  2903  000F2A  0100               	movlb	0	; () banked
  2904  000F2C  AF8C               	btfss	scale@scl& (0+255),7,b
  2905  000F2E  D106               	goto	l179
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 429: scl = -scl;
  2909  000F30  6D8C               	negf	scale@scl& (0+255),b
  2910                           
  2911                           ;doprnt.c: 430: if(scl>=110)
  2912  000F32  518C               	movf	scale@scl& (0+255),w,b
  2913  000F34  0A80               	xorlw	128
  2914  000F36  0F12               	addlw	-238
  2915  000F38  A0D8               	btfss	status,0,c
  2916  000F3A  D093               	goto	l180
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2920  000F3C  0E00               	movlw	0
  2921  000F3E  6E3F               	movwf	___wmul@multiplicand+1,c
  2922  000F40  0E03               	movlw	3
  2923  000F42  6E3E               	movwf	___wmul@multiplicand,c
  2924  000F44  0E00               	movlw	0
  2925  000F46  6E37               	movwf	___awdiv@divisor+1,c
  2926  000F48  0E0A               	movlw	10
  2927  000F4A  6E36               	movwf	___awdiv@divisor,c
  2928  000F4C  0E00               	movlw	0
  2929  000F4E  6E31               	movwf	___awmod@divisor+1,c
  2930  000F50  0E64               	movlw	100
  2931  000F52  6E30               	movwf	___awmod@divisor,c
  2932  000F54  518C               	movf	scale@scl& (0+255),w,b
  2933  000F56  6E2E               	movwf	___awmod@dividend,c
  2934  000F58  6A2F               	clrf	___awmod@dividend+1,c
  2935  000F5A  BE2E               	btfsc	___awmod@dividend,7,c
  2936  000F5C  062F               	decf	___awmod@dividend+1,f,c
  2937  000F5E  ECE1  F010         	call	___awmod	;wreg free
  2938  000F62  C02E  F034         	movff	?___awmod,___awdiv@dividend
  2939  000F66  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  2940  000F6A  EC5E  F010         	call	___awdiv	;wreg free
  2941  000F6E  0E09               	movlw	9
  2942  000F70  2434               	addwf	?___awdiv,w,c
  2943  000F72  6E3C               	movwf	___wmul@multiplier,c
  2944  000F74  0E00               	movlw	0
  2945  000F76  2035               	addwfc	?___awdiv+1,w,c
  2946  000F78  6E3D               	movwf	___wmul@multiplier+1,c
  2947  000F7A  EC93  F012         	call	___wmul	;wreg free
  2948  000F7E  0E50               	movlw	low __npowers_
  2949  000F80  243C               	addwf	?___wmul,w,c
  2950  000F82  6EF6               	movwf	tblptrl,c
  2951  000F84  0E06               	movlw	high __npowers_
  2952  000F86  203D               	addwfc	?___wmul+1,w,c
  2953  000F88  6EF7               	movwf	tblptrh,c
  2954  000F8A                     	if	0	;There are less than 3 active tblptr bytes
  2955  000F8A                     	endif
  2956  000F8A  0009               	tblrd		*+
  2957  000F8C  CFF5 F045          	movff	tablat,___ftmul@f2
  2958  000F90  0009               	tblrd		*+
  2959  000F92  CFF5 F046          	movff	tablat,___ftmul@f2+1
  2960  000F96  000A               	tblrd		*-
  2961  000F98  CFF5 F047          	movff	tablat,___ftmul@f2+2
  2962  000F9C  0E00               	movlw	0
  2963  000F9E  6E37               	movwf	___awdiv@divisor+1,c
  2964  000FA0  0E64               	movlw	100
  2965  000FA2  6E36               	movwf	___awdiv@divisor,c
  2966  000FA4  0100               	movlb	0	; () banked
  2967  000FA6  518C               	movf	scale@scl& (0+255),w,b
  2968  000FA8  6E34               	movwf	___awdiv@dividend,c
  2969  000FAA  6A35               	clrf	___awdiv@dividend+1,c
  2970  000FAC  BE34               	btfsc	___awdiv@dividend,7,c
  2971  000FAE  0635               	decf	___awdiv@dividend+1,f,c
  2972  000FB0  EC5E  F010         	call	___awdiv	;wreg free
  2973  000FB4  0E12               	movlw	18
  2974  000FB6  2434               	addwf	?___awdiv,w,c
  2975  000FB8  6E3C               	movwf	___wmul@multiplier,c
  2976  000FBA  0E00               	movlw	0
  2977  000FBC  2035               	addwfc	?___awdiv+1,w,c
  2978  000FBE  6E3D               	movwf	___wmul@multiplier+1,c
  2979  000FC0  0E00               	movlw	0
  2980  000FC2  6E3F               	movwf	___wmul@multiplicand+1,c
  2981  000FC4  0E03               	movlw	3
  2982  000FC6  6E3E               	movwf	___wmul@multiplicand,c
  2983  000FC8  EC93  F012         	call	___wmul	;wreg free
  2984  000FCC  0E50               	movlw	low __npowers_
  2985  000FCE  243C               	addwf	?___wmul,w,c
  2986  000FD0  6EF6               	movwf	tblptrl,c
  2987  000FD2  0E06               	movlw	high __npowers_
  2988  000FD4  203D               	addwfc	?___wmul+1,w,c
  2989  000FD6  6EF7               	movwf	tblptrh,c
  2990  000FD8                     	if	0	;There are less than 3 active tblptr bytes
  2991  000FD8                     	endif
  2992  000FD8  0009               	tblrd		*+
  2993  000FDA  CFF5 F042          	movff	tablat,___ftmul@f1
  2994  000FDE  0009               	tblrd		*+
  2995  000FE0  CFF5 F043          	movff	tablat,___ftmul@f1+1
  2996  000FE4  000A               	tblrd		*-
  2997  000FE6  CFF5 F044          	movff	tablat,___ftmul@f1+2
  2998  000FEA  EC74  F00E         	call	___ftmul	;wreg free
  2999  000FEE  C042  F089         	movff	?___ftmul,_scale$834
  3000  000FF2  C043  F08A         	movff	?___ftmul+1,_scale$834+1
  3001  000FF6  C044  F08B         	movff	?___ftmul+2,_scale$834+2
  3002                           
  3003                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3004  000FFA  C089  F042         	movff	_scale$834,___ftmul@f1
  3005  000FFE  C08A  F043         	movff	_scale$834+1,___ftmul@f1+1
  3006  001002  C08B  F044         	movff	_scale$834+2,___ftmul@f1+2
  3007  001006  0E00               	movlw	0
  3008  001008  6E3F               	movwf	___wmul@multiplicand+1,c
  3009  00100A  0E03               	movlw	3
  3010  00100C  6E3E               	movwf	___wmul@multiplicand,c
  3011  00100E  0E00               	movlw	0
  3012  001010  6E31               	movwf	___awmod@divisor+1,c
  3013  001012  0E0A               	movlw	10
  3014  001014  6E30               	movwf	___awmod@divisor,c
  3015  001016  0100               	movlb	0	; () banked
  3016  001018  518C               	movf	scale@scl& (0+255),w,b
  3017  00101A  6E2E               	movwf	___awmod@dividend,c
  3018  00101C  6A2F               	clrf	___awmod@dividend+1,c
  3019  00101E  BE2E               	btfsc	___awmod@dividend,7,c
  3020  001020  062F               	decf	___awmod@dividend+1,f,c
  3021  001022  ECE1  F010         	call	___awmod	;wreg free
  3022  001026  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3023  00102A  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3024  00102E  EC93  F012         	call	___wmul	;wreg free
  3025  001032  0E50               	movlw	low __npowers_
  3026  001034  243C               	addwf	?___wmul,w,c
  3027  001036  6EF6               	movwf	tblptrl,c
  3028  001038  0E06               	movlw	high __npowers_
  3029  00103A  203D               	addwfc	?___wmul+1,w,c
  3030  00103C  6EF7               	movwf	tblptrh,c
  3031  00103E                     	if	0	;There are less than 3 active tblptr bytes
  3032  00103E                     	endif
  3033  00103E  0009               	tblrd		*+
  3034  001040  CFF5 F045          	movff	tablat,___ftmul@f2
  3035  001044  0009               	tblrd		*+
  3036  001046  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3037  00104A  000A               	tblrd		*-
  3038  00104C  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3039  001050  EC74  F00E         	call	___ftmul	;wreg free
  3040  001054  C042  F086         	movff	?___ftmul,?_scale
  3041  001058  C043  F087         	movff	?___ftmul+1,?_scale+1
  3042  00105C  C044  F088         	movff	?___ftmul+2,?_scale+2
  3043  001060  0012               	return	
  3044  001062                     l180:
  3045                           
  3046                           ;doprnt.c: 432: else if(scl > 10)
  3047  001062  0100               	movlb	0	; () banked
  3048  001064  518C               	movf	scale@scl& (0+255),w,b
  3049  001066  0A80               	xorlw	128
  3050  001068  0F75               	addlw	-139
  3051  00106A  A0D8               	btfss	status,0,c
  3052  00106C  D054               	goto	l183
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3056  00106E  0E00               	movlw	0
  3057  001070  6E37               	movwf	___awdiv@divisor+1,c
  3058  001072  0E0A               	movlw	10
  3059  001074  6E36               	movwf	___awdiv@divisor,c
  3060  001076  518C               	movf	scale@scl& (0+255),w,b
  3061  001078  6E34               	movwf	___awdiv@dividend,c
  3062  00107A  6A35               	clrf	___awdiv@dividend+1,c
  3063  00107C  BE34               	btfsc	___awdiv@dividend,7,c
  3064  00107E  0635               	decf	___awdiv@dividend+1,f,c
  3065  001080  EC5E  F010         	call	___awdiv	;wreg free
  3066  001084  0E09               	movlw	9
  3067  001086  2434               	addwf	?___awdiv,w,c
  3068  001088  6E3C               	movwf	___wmul@multiplier,c
  3069  00108A  0E00               	movlw	0
  3070  00108C  2035               	addwfc	?___awdiv+1,w,c
  3071  00108E  6E3D               	movwf	___wmul@multiplier+1,c
  3072  001090  0E00               	movlw	0
  3073  001092  6E3F               	movwf	___wmul@multiplicand+1,c
  3074  001094  0E03               	movlw	3
  3075  001096  6E3E               	movwf	___wmul@multiplicand,c
  3076  001098  EC93  F012         	call	___wmul	;wreg free
  3077  00109C  0E50               	movlw	low __npowers_
  3078  00109E  243C               	addwf	?___wmul,w,c
  3079  0010A0  6EF6               	movwf	tblptrl,c
  3080  0010A2  0E06               	movlw	high __npowers_
  3081  0010A4  203D               	addwfc	?___wmul+1,w,c
  3082  0010A6  6EF7               	movwf	tblptrh,c
  3083  0010A8                     	if	0	;There are less than 3 active tblptr bytes
  3084  0010A8                     	endif
  3085  0010A8  0009               	tblrd		*+
  3086  0010AA  CFF5 F042          	movff	tablat,___ftmul@f1
  3087  0010AE  0009               	tblrd		*+
  3088  0010B0  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3089  0010B4  000A               	tblrd		*-
  3090  0010B6  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3091  0010BA  0E00               	movlw	0
  3092  0010BC  6E3F               	movwf	___wmul@multiplicand+1,c
  3093  0010BE  0E03               	movlw	3
  3094  0010C0  6E3E               	movwf	___wmul@multiplicand,c
  3095  0010C2  0E00               	movlw	0
  3096  0010C4  6E31               	movwf	___awmod@divisor+1,c
  3097  0010C6  0E0A               	movlw	10
  3098  0010C8  6E30               	movwf	___awmod@divisor,c
  3099  0010CA  0100               	movlb	0	; () banked
  3100  0010CC  518C               	movf	scale@scl& (0+255),w,b
  3101  0010CE  6E2E               	movwf	___awmod@dividend,c
  3102  0010D0  6A2F               	clrf	___awmod@dividend+1,c
  3103  0010D2  BE2E               	btfsc	___awmod@dividend,7,c
  3104  0010D4  062F               	decf	___awmod@dividend+1,f,c
  3105  0010D6  ECE1  F010         	call	___awmod	;wreg free
  3106  0010DA  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3107  0010DE  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3108  0010E2  EC93  F012         	call	___wmul	;wreg free
  3109  0010E6  0E50               	movlw	low __npowers_
  3110  0010E8  243C               	addwf	?___wmul,w,c
  3111  0010EA  6EF6               	movwf	tblptrl,c
  3112  0010EC  0E06               	movlw	high __npowers_
  3113  0010EE  203D               	addwfc	?___wmul+1,w,c
  3114  0010F0  6EF7               	movwf	tblptrh,c
  3115  0010F2                     	if	0	;There are less than 3 active tblptr bytes
  3116  0010F2                     	endif
  3117  0010F2  0009               	tblrd		*+
  3118  0010F4  CFF5 F045          	movff	tablat,___ftmul@f2
  3119  0010F8  0009               	tblrd		*+
  3120  0010FA  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3121  0010FE  000A               	tblrd		*-
  3122  001100  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3123  001104  EC74  F00E         	call	___ftmul	;wreg free
  3124  001108  C042  F086         	movff	?___ftmul,?_scale
  3125  00110C  C043  F087         	movff	?___ftmul+1,?_scale+1
  3126  001110  C044  F088         	movff	?___ftmul+2,?_scale+2
  3127  001114  0012               	return	
  3128  001116                     l183:
  3129                           
  3130                           ;doprnt.c: 434: return _npowers_[scl];
  3131  001116  0100               	movlb	0	; () banked
  3132  001118  518C               	movf	scale@scl& (0+255),w,b
  3133  00111A  0D03               	mullw	3
  3134  00111C  0E50               	movlw	low __npowers_
  3135  00111E  24F3               	addwf	prodl,w,c
  3136  001120  6EF6               	movwf	tblptrl,c
  3137  001122  0E06               	movlw	high __npowers_
  3138  001124  20F4               	addwfc	prodh,w,c
  3139  001126  6EF7               	movwf	tblptrh,c
  3140  001128                     	if	0	;There are less than 3 active tblptr bytes
  3141  001128                     	endif
  3142  001128  0009               	tblrd		*+
  3143  00112A  CFF5 F086          	movff	tablat,?_scale
  3144  00112E  0009               	tblrd		*+
  3145  001130  CFF5 F087          	movff	tablat,?_scale+1
  3146  001134  000A               	tblrd		*-
  3147  001136  CFF5 F088          	movff	tablat,?_scale+2
  3148                           
  3149                           ; BSR set to: 0
  3150  00113A  0012               	return	
  3151  00113C                     l179:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 435: }
  3155                           ;doprnt.c: 436: if(scl>=110)
  3156                           
  3157                           ; BSR set to: 0
  3158  00113C  518C               	movf	scale@scl& (0+255),w,b
  3159  00113E  0A80               	xorlw	128
  3160  001140  0F12               	addlw	-238
  3161  001142  A0D8               	btfss	status,0,c
  3162  001144  D093               	goto	l184
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3166  001146  0E00               	movlw	0
  3167  001148  6E3F               	movwf	___wmul@multiplicand+1,c
  3168  00114A  0E03               	movlw	3
  3169  00114C  6E3E               	movwf	___wmul@multiplicand,c
  3170  00114E  0E00               	movlw	0
  3171  001150  6E37               	movwf	___awdiv@divisor+1,c
  3172  001152  0E0A               	movlw	10
  3173  001154  6E36               	movwf	___awdiv@divisor,c
  3174  001156  0E00               	movlw	0
  3175  001158  6E31               	movwf	___awmod@divisor+1,c
  3176  00115A  0E64               	movlw	100
  3177  00115C  6E30               	movwf	___awmod@divisor,c
  3178  00115E  518C               	movf	scale@scl& (0+255),w,b
  3179  001160  6E2E               	movwf	___awmod@dividend,c
  3180  001162  6A2F               	clrf	___awmod@dividend+1,c
  3181  001164  BE2E               	btfsc	___awmod@dividend,7,c
  3182  001166  062F               	decf	___awmod@dividend+1,f,c
  3183  001168  ECE1  F010         	call	___awmod	;wreg free
  3184  00116C  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3185  001170  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3186  001174  EC5E  F010         	call	___awdiv	;wreg free
  3187  001178  0E09               	movlw	9
  3188  00117A  2434               	addwf	?___awdiv,w,c
  3189  00117C  6E3C               	movwf	___wmul@multiplier,c
  3190  00117E  0E00               	movlw	0
  3191  001180  2035               	addwfc	?___awdiv+1,w,c
  3192  001182  6E3D               	movwf	___wmul@multiplier+1,c
  3193  001184  EC93  F012         	call	___wmul	;wreg free
  3194  001188  0E29               	movlw	low __powers_
  3195  00118A  243C               	addwf	?___wmul,w,c
  3196  00118C  6EF6               	movwf	tblptrl,c
  3197  00118E  0E06               	movlw	high __powers_
  3198  001190  203D               	addwfc	?___wmul+1,w,c
  3199  001192  6EF7               	movwf	tblptrh,c
  3200  001194                     	if	0	;There are less than 3 active tblptr bytes
  3201  001194                     	endif
  3202  001194  0009               	tblrd		*+
  3203  001196  CFF5 F045          	movff	tablat,___ftmul@f2
  3204  00119A  0009               	tblrd		*+
  3205  00119C  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3206  0011A0  000A               	tblrd		*-
  3207  0011A2  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3208  0011A6  0E00               	movlw	0
  3209  0011A8  6E37               	movwf	___awdiv@divisor+1,c
  3210  0011AA  0E64               	movlw	100
  3211  0011AC  6E36               	movwf	___awdiv@divisor,c
  3212  0011AE  0100               	movlb	0	; () banked
  3213  0011B0  518C               	movf	scale@scl& (0+255),w,b
  3214  0011B2  6E34               	movwf	___awdiv@dividend,c
  3215  0011B4  6A35               	clrf	___awdiv@dividend+1,c
  3216  0011B6  BE34               	btfsc	___awdiv@dividend,7,c
  3217  0011B8  0635               	decf	___awdiv@dividend+1,f,c
  3218  0011BA  EC5E  F010         	call	___awdiv	;wreg free
  3219  0011BE  0E12               	movlw	18
  3220  0011C0  2434               	addwf	?___awdiv,w,c
  3221  0011C2  6E3C               	movwf	___wmul@multiplier,c
  3222  0011C4  0E00               	movlw	0
  3223  0011C6  2035               	addwfc	?___awdiv+1,w,c
  3224  0011C8  6E3D               	movwf	___wmul@multiplier+1,c
  3225  0011CA  0E00               	movlw	0
  3226  0011CC  6E3F               	movwf	___wmul@multiplicand+1,c
  3227  0011CE  0E03               	movlw	3
  3228  0011D0  6E3E               	movwf	___wmul@multiplicand,c
  3229  0011D2  EC93  F012         	call	___wmul	;wreg free
  3230  0011D6  0E29               	movlw	low __powers_
  3231  0011D8  243C               	addwf	?___wmul,w,c
  3232  0011DA  6EF6               	movwf	tblptrl,c
  3233  0011DC  0E06               	movlw	high __powers_
  3234  0011DE  203D               	addwfc	?___wmul+1,w,c
  3235  0011E0  6EF7               	movwf	tblptrh,c
  3236  0011E2                     	if	0	;There are less than 3 active tblptr bytes
  3237  0011E2                     	endif
  3238  0011E2  0009               	tblrd		*+
  3239  0011E4  CFF5 F042          	movff	tablat,___ftmul@f1
  3240  0011E8  0009               	tblrd		*+
  3241  0011EA  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3242  0011EE  000A               	tblrd		*-
  3243  0011F0  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3244  0011F4  EC74  F00E         	call	___ftmul	;wreg free
  3245  0011F8  C042  F089         	movff	?___ftmul,_scale$834
  3246  0011FC  C043  F08A         	movff	?___ftmul+1,_scale$834+1
  3247  001200  C044  F08B         	movff	?___ftmul+2,_scale$834+2
  3248                           
  3249                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3250  001204  C089  F042         	movff	_scale$834,___ftmul@f1
  3251  001208  C08A  F043         	movff	_scale$834+1,___ftmul@f1+1
  3252  00120C  C08B  F044         	movff	_scale$834+2,___ftmul@f1+2
  3253  001210  0E00               	movlw	0
  3254  001212  6E3F               	movwf	___wmul@multiplicand+1,c
  3255  001214  0E03               	movlw	3
  3256  001216  6E3E               	movwf	___wmul@multiplicand,c
  3257  001218  0E00               	movlw	0
  3258  00121A  6E31               	movwf	___awmod@divisor+1,c
  3259  00121C  0E0A               	movlw	10
  3260  00121E  6E30               	movwf	___awmod@divisor,c
  3261  001220  0100               	movlb	0	; () banked
  3262  001222  518C               	movf	scale@scl& (0+255),w,b
  3263  001224  6E2E               	movwf	___awmod@dividend,c
  3264  001226  6A2F               	clrf	___awmod@dividend+1,c
  3265  001228  BE2E               	btfsc	___awmod@dividend,7,c
  3266  00122A  062F               	decf	___awmod@dividend+1,f,c
  3267  00122C  ECE1  F010         	call	___awmod	;wreg free
  3268  001230  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3269  001234  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3270  001238  EC93  F012         	call	___wmul	;wreg free
  3271  00123C  0E29               	movlw	low __powers_
  3272  00123E  243C               	addwf	?___wmul,w,c
  3273  001240  6EF6               	movwf	tblptrl,c
  3274  001242  0E06               	movlw	high __powers_
  3275  001244  203D               	addwfc	?___wmul+1,w,c
  3276  001246  6EF7               	movwf	tblptrh,c
  3277  001248                     	if	0	;There are less than 3 active tblptr bytes
  3278  001248                     	endif
  3279  001248  0009               	tblrd		*+
  3280  00124A  CFF5 F045          	movff	tablat,___ftmul@f2
  3281  00124E  0009               	tblrd		*+
  3282  001250  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3283  001254  000A               	tblrd		*-
  3284  001256  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3285  00125A  EC74  F00E         	call	___ftmul	;wreg free
  3286  00125E  C042  F086         	movff	?___ftmul,?_scale
  3287  001262  C043  F087         	movff	?___ftmul+1,?_scale+1
  3288  001266  C044  F088         	movff	?___ftmul+2,?_scale+2
  3289  00126A  0012               	return	
  3290  00126C                     l184:
  3291                           
  3292                           ;doprnt.c: 438: else if(scl > 10)
  3293  00126C  0100               	movlb	0	; () banked
  3294  00126E  518C               	movf	scale@scl& (0+255),w,b
  3295  001270  0A80               	xorlw	128
  3296  001272  0F75               	addlw	-139
  3297  001274  A0D8               	btfss	status,0,c
  3298  001276  D054               	goto	l186
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3302  001278  0E00               	movlw	0
  3303  00127A  6E37               	movwf	___awdiv@divisor+1,c
  3304  00127C  0E0A               	movlw	10
  3305  00127E  6E36               	movwf	___awdiv@divisor,c
  3306  001280  518C               	movf	scale@scl& (0+255),w,b
  3307  001282  6E34               	movwf	___awdiv@dividend,c
  3308  001284  6A35               	clrf	___awdiv@dividend+1,c
  3309  001286  BE34               	btfsc	___awdiv@dividend,7,c
  3310  001288  0635               	decf	___awdiv@dividend+1,f,c
  3311  00128A  EC5E  F010         	call	___awdiv	;wreg free
  3312  00128E  0E09               	movlw	9
  3313  001290  2434               	addwf	?___awdiv,w,c
  3314  001292  6E3C               	movwf	___wmul@multiplier,c
  3315  001294  0E00               	movlw	0
  3316  001296  2035               	addwfc	?___awdiv+1,w,c
  3317  001298  6E3D               	movwf	___wmul@multiplier+1,c
  3318  00129A  0E00               	movlw	0
  3319  00129C  6E3F               	movwf	___wmul@multiplicand+1,c
  3320  00129E  0E03               	movlw	3
  3321  0012A0  6E3E               	movwf	___wmul@multiplicand,c
  3322  0012A2  EC93  F012         	call	___wmul	;wreg free
  3323  0012A6  0E29               	movlw	low __powers_
  3324  0012A8  243C               	addwf	?___wmul,w,c
  3325  0012AA  6EF6               	movwf	tblptrl,c
  3326  0012AC  0E06               	movlw	high __powers_
  3327  0012AE  203D               	addwfc	?___wmul+1,w,c
  3328  0012B0  6EF7               	movwf	tblptrh,c
  3329  0012B2                     	if	0	;There are less than 3 active tblptr bytes
  3330  0012B2                     	endif
  3331  0012B2  0009               	tblrd		*+
  3332  0012B4  CFF5 F042          	movff	tablat,___ftmul@f1
  3333  0012B8  0009               	tblrd		*+
  3334  0012BA  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3335  0012BE  000A               	tblrd		*-
  3336  0012C0  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3337  0012C4  0E00               	movlw	0
  3338  0012C6  6E3F               	movwf	___wmul@multiplicand+1,c
  3339  0012C8  0E03               	movlw	3
  3340  0012CA  6E3E               	movwf	___wmul@multiplicand,c
  3341  0012CC  0E00               	movlw	0
  3342  0012CE  6E31               	movwf	___awmod@divisor+1,c
  3343  0012D0  0E0A               	movlw	10
  3344  0012D2  6E30               	movwf	___awmod@divisor,c
  3345  0012D4  0100               	movlb	0	; () banked
  3346  0012D6  518C               	movf	scale@scl& (0+255),w,b
  3347  0012D8  6E2E               	movwf	___awmod@dividend,c
  3348  0012DA  6A2F               	clrf	___awmod@dividend+1,c
  3349  0012DC  BE2E               	btfsc	___awmod@dividend,7,c
  3350  0012DE  062F               	decf	___awmod@dividend+1,f,c
  3351  0012E0  ECE1  F010         	call	___awmod	;wreg free
  3352  0012E4  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3353  0012E8  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3354  0012EC  EC93  F012         	call	___wmul	;wreg free
  3355  0012F0  0E29               	movlw	low __powers_
  3356  0012F2  243C               	addwf	?___wmul,w,c
  3357  0012F4  6EF6               	movwf	tblptrl,c
  3358  0012F6  0E06               	movlw	high __powers_
  3359  0012F8  203D               	addwfc	?___wmul+1,w,c
  3360  0012FA  6EF7               	movwf	tblptrh,c
  3361  0012FC                     	if	0	;There are less than 3 active tblptr bytes
  3362  0012FC                     	endif
  3363  0012FC  0009               	tblrd		*+
  3364  0012FE  CFF5 F045          	movff	tablat,___ftmul@f2
  3365  001302  0009               	tblrd		*+
  3366  001304  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3367  001308  000A               	tblrd		*-
  3368  00130A  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3369  00130E  EC74  F00E         	call	___ftmul	;wreg free
  3370  001312  C042  F086         	movff	?___ftmul,?_scale
  3371  001316  C043  F087         	movff	?___ftmul+1,?_scale+1
  3372  00131A  C044  F088         	movff	?___ftmul+2,?_scale+2
  3373  00131E  0012               	return	
  3374  001320                     l186:
  3375                           
  3376                           ;doprnt.c: 440: return _powers_[scl];
  3377  001320  0100               	movlb	0	; () banked
  3378  001322  518C               	movf	scale@scl& (0+255),w,b
  3379  001324  0D03               	mullw	3
  3380  001326  0E29               	movlw	low __powers_
  3381  001328  24F3               	addwf	prodl,w,c
  3382  00132A  6EF6               	movwf	tblptrl,c
  3383  00132C  0E06               	movlw	high __powers_
  3384  00132E  20F4               	addwfc	prodh,w,c
  3385  001330  6EF7               	movwf	tblptrh,c
  3386  001332                     	if	0	;There are less than 3 active tblptr bytes
  3387  001332                     	endif
  3388  001332  0009               	tblrd		*+
  3389  001334  CFF5 F086          	movff	tablat,?_scale
  3390  001338  0009               	tblrd		*+
  3391  00133A  CFF5 F087          	movff	tablat,?_scale+1
  3392  00133E  000A               	tblrd		*-
  3393  001340  CFF5 F088          	movff	tablat,?_scale+2
  3394  001344  0012               	return	
  3395  001346                     __end_of_scale:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           indf2	equ	0xFDF
  3407                           postinc2	equ	0xFDE
  3408                           postdec2	equ	0xFDD
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _isdigit *****************
  3414 ;; Defined at:
  3415 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  c               1    wreg     unsigned char 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  c               1   47[COMRAM] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;		None               void
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3429 ;;      Params:         0       0       0       0       0       0       0
  3430 ;;      Locals:         2       0       0       0       0       0       0
  3431 ;;      Temps:          1       0       0       0       0       0       0
  3432 ;;      Totals:         3       0       0       0       0       0       0
  3433 ;;Total ram usage:        3 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    2
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_sprintf
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text6
  3444  002570                     __ptext6:
  3445                           	opt stack 0
  3446  002570                     _isdigit:
  3447                           	opt stack 26
  3448                           
  3449                           ;incstack = 0
  3450                           ;isdigit@c stored from wreg
  3451  002570  6E30               	movwf	isdigit@c,c
  3452  002572  0E00               	movlw	0
  3453  002574  6E2F               	movwf	_isdigit$485,c
  3454  002576  0E3A               	movlw	58
  3455  002578  6030               	cpfslt	isdigit@c,c
  3456  00257A  D005               	goto	l628
  3457  00257C  0E2F               	movlw	47
  3458  00257E  6430               	cpfsgt	isdigit@c,c
  3459  002580  D002               	goto	l628
  3460  002582  0E01               	movlw	1
  3461  002584  6E2F               	movwf	_isdigit$485,c
  3462  002586                     l628:
  3463  002586  C02F  F02E         	movff	_isdigit$485,??_isdigit
  3464  00258A  302E               	rrcf	??_isdigit,w,c
  3465  00258C  0012               	return	
  3466  00258E                     __end_of_isdigit:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           postinc0	equ	0xFEE
  3476                           wreg	equ	0xFE8
  3477                           indf2	equ	0xFDF
  3478                           postinc2	equ	0xFDE
  3479                           postdec2	equ	0xFDD
  3480                           fsr2h	equ	0xFDA
  3481                           fsr2l	equ	0xFD9
  3482                           status	equ	0xFD8
  3483                           
  3484 ;; *************** function _fround *****************
  3485 ;; Defined at:
  3486 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  prec            1    wreg     unsigned char 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  prec            1   15[BANK0 ] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  3    6[BANK0 ] unsigned char 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3500 ;;      Params:         0       3       0       0       0       0       0
  3501 ;;      Locals:         0       7       0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0
  3503 ;;      Totals:         0      10       0       0       0       0       0
  3504 ;;Total ram usage:       10 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    4
  3507 ;; This function calls:
  3508 ;;		___awdiv
  3509 ;;		___awmod
  3510 ;;		___ftmul
  3511 ;;		___wmul
  3512 ;; This function is called by:
  3513 ;;		_sprintf
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text7
  3518  001346                     __ptext7:
  3519                           	opt stack 0
  3520  001346                     _fround:
  3521                           	opt stack 24
  3522                           
  3523                           ;incstack = 0
  3524                           ;fround@prec stored from wreg
  3525  001346  0100               	movlb	0	; () banked
  3526  001348  6F8F               	movwf	fround@prec& (0+255),b
  3527                           
  3528                           ;doprnt.c: 413: if(prec>=110)
  3529  00134A  0E6D               	movlw	109
  3530  00134C  0100               	movlb	0	; () banked
  3531  00134E  658F               	cpfsgt	fround@prec& (0+255),b
  3532  001350  D09F               	goto	l173
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3536  001352  0E00               	movlw	0
  3537  001354  6E3F               	movwf	___wmul@multiplicand+1,c
  3538  001356  0E03               	movlw	3
  3539  001358  6E3E               	movwf	___wmul@multiplicand,c
  3540  00135A  0E00               	movlw	0
  3541  00135C  6E37               	movwf	___awdiv@divisor+1,c
  3542  00135E  0E0A               	movlw	10
  3543  001360  6E36               	movwf	___awdiv@divisor,c
  3544  001362  0E00               	movlw	0
  3545  001364  6E31               	movwf	___awmod@divisor+1,c
  3546  001366  0E64               	movlw	100
  3547  001368  6E30               	movwf	___awmod@divisor,c
  3548  00136A  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3549  00136E  6A2F               	clrf	___awmod@dividend+1,c
  3550  001370  ECE1  F010         	call	___awmod	;wreg free
  3551  001374  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3552  001378  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3553  00137C  EC5E  F010         	call	___awdiv	;wreg free
  3554  001380  0E09               	movlw	9
  3555  001382  2434               	addwf	?___awdiv,w,c
  3556  001384  6E3C               	movwf	___wmul@multiplier,c
  3557  001386  0E00               	movlw	0
  3558  001388  2035               	addwfc	?___awdiv+1,w,c
  3559  00138A  6E3D               	movwf	___wmul@multiplier+1,c
  3560  00138C  EC93  F012         	call	___wmul	;wreg free
  3561  001390  0E50               	movlw	low __npowers_
  3562  001392  243C               	addwf	?___wmul,w,c
  3563  001394  6EF6               	movwf	tblptrl,c
  3564  001396  0E06               	movlw	high __npowers_
  3565  001398  203D               	addwfc	?___wmul+1,w,c
  3566  00139A  6EF7               	movwf	tblptrh,c
  3567  00139C                     	if	0	;There are less than 3 active tblptr bytes
  3568  00139C                     	endif
  3569  00139C  0009               	tblrd		*+
  3570  00139E  CFF5 F045          	movff	tablat,___ftmul@f2
  3571  0013A2  0009               	tblrd		*+
  3572  0013A4  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3573  0013A8  000A               	tblrd		*-
  3574  0013AA  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3575  0013AE  0E00               	movlw	0
  3576  0013B0  6E37               	movwf	___awdiv@divisor+1,c
  3577  0013B2  0E64               	movlw	100
  3578  0013B4  6E36               	movwf	___awdiv@divisor,c
  3579  0013B6  C08F  F034         	movff	fround@prec,___awdiv@dividend
  3580  0013BA  6A35               	clrf	___awdiv@dividend+1,c
  3581  0013BC  EC5E  F010         	call	___awdiv	;wreg free
  3582  0013C0  0E12               	movlw	18
  3583  0013C2  2434               	addwf	?___awdiv,w,c
  3584  0013C4  6E3C               	movwf	___wmul@multiplier,c
  3585  0013C6  0E00               	movlw	0
  3586  0013C8  2035               	addwfc	?___awdiv+1,w,c
  3587  0013CA  6E3D               	movwf	___wmul@multiplier+1,c
  3588  0013CC  0E00               	movlw	0
  3589  0013CE  6E3F               	movwf	___wmul@multiplicand+1,c
  3590  0013D0  0E03               	movlw	3
  3591  0013D2  6E3E               	movwf	___wmul@multiplicand,c
  3592  0013D4  EC93  F012         	call	___wmul	;wreg free
  3593  0013D8  0E50               	movlw	low __npowers_
  3594  0013DA  243C               	addwf	?___wmul,w,c
  3595  0013DC  6EF6               	movwf	tblptrl,c
  3596  0013DE  0E06               	movlw	high __npowers_
  3597  0013E0  203D               	addwfc	?___wmul+1,w,c
  3598  0013E2  6EF7               	movwf	tblptrh,c
  3599  0013E4                     	if	0	;There are less than 3 active tblptr bytes
  3600  0013E4                     	endif
  3601  0013E4  0009               	tblrd		*+
  3602  0013E6  CFF5 F042          	movff	tablat,___ftmul@f1
  3603  0013EA  0009               	tblrd		*+
  3604  0013EC  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3605  0013F0  000A               	tblrd		*-
  3606  0013F2  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3607  0013F6  EC74  F00E         	call	___ftmul	;wreg free
  3608  0013FA  C042  F08C         	movff	?___ftmul,_fround$832
  3609  0013FE  C043  F08D         	movff	?___ftmul+1,_fround$832+1
  3610  001402  C044  F08E         	movff	?___ftmul+2,_fround$832+2
  3611                           
  3612                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3613  001406  0E00               	movlw	0
  3614  001408  6E3F               	movwf	___wmul@multiplicand+1,c
  3615  00140A  0E03               	movlw	3
  3616  00140C  6E3E               	movwf	___wmul@multiplicand,c
  3617  00140E  0E00               	movlw	0
  3618  001410  6E31               	movwf	___awmod@divisor+1,c
  3619  001412  0E0A               	movlw	10
  3620  001414  6E30               	movwf	___awmod@divisor,c
  3621  001416  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3622  00141A  6A2F               	clrf	___awmod@dividend+1,c
  3623  00141C  ECE1  F010         	call	___awmod	;wreg free
  3624  001420  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3625  001424  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3626  001428  EC93  F012         	call	___wmul	;wreg free
  3627  00142C  0E50               	movlw	low __npowers_
  3628  00142E  243C               	addwf	?___wmul,w,c
  3629  001430  6EF6               	movwf	tblptrl,c
  3630  001432  0E06               	movlw	high __npowers_
  3631  001434  203D               	addwfc	?___wmul+1,w,c
  3632  001436  6EF7               	movwf	tblptrh,c
  3633  001438                     	if	0	;There are less than 3 active tblptr bytes
  3634  001438                     	endif
  3635  001438  0009               	tblrd		*+
  3636  00143A  CFF5 F045          	movff	tablat,___ftmul@f2
  3637  00143E  0009               	tblrd		*+
  3638  001440  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3639  001444  000A               	tblrd		*-
  3640  001446  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3641  00144A  C08C  F042         	movff	_fround$832,___ftmul@f1
  3642  00144E  C08D  F043         	movff	_fround$832+1,___ftmul@f1+1
  3643  001452  C08E  F044         	movff	_fround$832+2,___ftmul@f1+2
  3644  001456  EC74  F00E         	call	___ftmul	;wreg free
  3645  00145A  C042  F089         	movff	?___ftmul,_fround$833
  3646  00145E  C043  F08A         	movff	?___ftmul+1,_fround$833+1
  3647  001462  C044  F08B         	movff	?___ftmul+2,_fround$833+2
  3648                           
  3649                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3650  001466  C089  F042         	movff	_fround$833,___ftmul@f1
  3651  00146A  C08A  F043         	movff	_fround$833+1,___ftmul@f1+1
  3652  00146E  C08B  F044         	movff	_fround$833+2,___ftmul@f1+2
  3653  001472  0E00               	movlw	0
  3654  001474  6E45               	movwf	___ftmul@f2,c
  3655  001476  0E00               	movlw	0
  3656  001478  6E46               	movwf	___ftmul@f2+1,c
  3657  00147A  0E3F               	movlw	63
  3658  00147C  6E47               	movwf	___ftmul@f2+2,c
  3659  00147E  EC74  F00E         	call	___ftmul	;wreg free
  3660  001482  C042  F086         	movff	?___ftmul,?_fround
  3661  001486  C043  F087         	movff	?___ftmul+1,?_fround+1
  3662  00148A  C044  F088         	movff	?___ftmul+2,?_fround+2
  3663  00148E  0012               	return	
  3664  001490                     l173:
  3665                           
  3666                           ;doprnt.c: 415: else if(prec > 10)
  3667  001490  0E0A               	movlw	10
  3668  001492  0100               	movlb	0	; () banked
  3669  001494  658F               	cpfsgt	fround@prec& (0+255),b
  3670  001496  D063               	goto	l176
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3674  001498  0E00               	movlw	0
  3675  00149A  6E3F               	movwf	___wmul@multiplicand+1,c
  3676  00149C  0E03               	movlw	3
  3677  00149E  6E3E               	movwf	___wmul@multiplicand,c
  3678  0014A0  0E00               	movlw	0
  3679  0014A2  6E31               	movwf	___awmod@divisor+1,c
  3680  0014A4  0E0A               	movlw	10
  3681  0014A6  6E30               	movwf	___awmod@divisor,c
  3682  0014A8  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3683  0014AC  6A2F               	clrf	___awmod@dividend+1,c
  3684  0014AE  ECE1  F010         	call	___awmod	;wreg free
  3685  0014B2  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3686  0014B6  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3687  0014BA  EC93  F012         	call	___wmul	;wreg free
  3688  0014BE  0E50               	movlw	low __npowers_
  3689  0014C0  243C               	addwf	?___wmul,w,c
  3690  0014C2  6EF6               	movwf	tblptrl,c
  3691  0014C4  0E06               	movlw	high __npowers_
  3692  0014C6  203D               	addwfc	?___wmul+1,w,c
  3693  0014C8  6EF7               	movwf	tblptrh,c
  3694  0014CA                     	if	0	;There are less than 3 active tblptr bytes
  3695  0014CA                     	endif
  3696  0014CA  0009               	tblrd		*+
  3697  0014CC  CFF5 F045          	movff	tablat,___ftmul@f2
  3698  0014D0  0009               	tblrd		*+
  3699  0014D2  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3700  0014D6  000A               	tblrd		*-
  3701  0014D8  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3702  0014DC  0E00               	movlw	0
  3703  0014DE  6E37               	movwf	___awdiv@divisor+1,c
  3704  0014E0  0E0A               	movlw	10
  3705  0014E2  6E36               	movwf	___awdiv@divisor,c
  3706  0014E4  C08F  F034         	movff	fround@prec,___awdiv@dividend
  3707  0014E8  6A35               	clrf	___awdiv@dividend+1,c
  3708  0014EA  EC5E  F010         	call	___awdiv	;wreg free
  3709  0014EE  0E09               	movlw	9
  3710  0014F0  2434               	addwf	?___awdiv,w,c
  3711  0014F2  6E3C               	movwf	___wmul@multiplier,c
  3712  0014F4  0E00               	movlw	0
  3713  0014F6  2035               	addwfc	?___awdiv+1,w,c
  3714  0014F8  6E3D               	movwf	___wmul@multiplier+1,c
  3715  0014FA  0E00               	movlw	0
  3716  0014FC  6E3F               	movwf	___wmul@multiplicand+1,c
  3717  0014FE  0E03               	movlw	3
  3718  001500  6E3E               	movwf	___wmul@multiplicand,c
  3719  001502  EC93  F012         	call	___wmul	;wreg free
  3720  001506  0E50               	movlw	low __npowers_
  3721  001508  243C               	addwf	?___wmul,w,c
  3722  00150A  6EF6               	movwf	tblptrl,c
  3723  00150C  0E06               	movlw	high __npowers_
  3724  00150E  203D               	addwfc	?___wmul+1,w,c
  3725  001510  6EF7               	movwf	tblptrh,c
  3726  001512                     	if	0	;There are less than 3 active tblptr bytes
  3727  001512                     	endif
  3728  001512  0009               	tblrd		*+
  3729  001514  CFF5 F042          	movff	tablat,___ftmul@f1
  3730  001518  0009               	tblrd		*+
  3731  00151A  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3732  00151E  000A               	tblrd		*-
  3733  001520  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3734  001524  EC74  F00E         	call	___ftmul	;wreg free
  3735  001528  C042  F08C         	movff	?___ftmul,_fround$832
  3736  00152C  C043  F08D         	movff	?___ftmul+1,_fround$832+1
  3737  001530  C044  F08E         	movff	?___ftmul+2,_fround$832+2
  3738                           
  3739                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3740  001534  C08C  F042         	movff	_fround$832,___ftmul@f1
  3741  001538  C08D  F043         	movff	_fround$832+1,___ftmul@f1+1
  3742  00153C  C08E  F044         	movff	_fround$832+2,___ftmul@f1+2
  3743  001540  0E00               	movlw	0
  3744  001542  6E45               	movwf	___ftmul@f2,c
  3745  001544  0E00               	movlw	0
  3746  001546  6E46               	movwf	___ftmul@f2+1,c
  3747  001548  0E3F               	movlw	63
  3748  00154A  6E47               	movwf	___ftmul@f2+2,c
  3749  00154C  EC74  F00E         	call	___ftmul	;wreg free
  3750  001550  C042  F086         	movff	?___ftmul,?_fround
  3751  001554  C043  F087         	movff	?___ftmul+1,?_fround+1
  3752  001558  C044  F088         	movff	?___ftmul+2,?_fround+2
  3753  00155C  0012               	return	
  3754  00155E                     l176:
  3755                           
  3756                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3757  00155E  0100               	movlb	0	; () banked
  3758  001560  518F               	movf	fround@prec& (0+255),w,b
  3759  001562  0D03               	mullw	3
  3760  001564  0E50               	movlw	low __npowers_
  3761  001566  24F3               	addwf	prodl,w,c
  3762  001568  6EF6               	movwf	tblptrl,c
  3763  00156A  0E06               	movlw	high __npowers_
  3764  00156C  20F4               	addwfc	prodh,w,c
  3765  00156E  6EF7               	movwf	tblptrh,c
  3766  001570                     	if	0	;There are less than 3 active tblptr bytes
  3767  001570                     	endif
  3768  001570  0009               	tblrd		*+
  3769  001572  CFF5 F042          	movff	tablat,___ftmul@f1
  3770  001576  0009               	tblrd		*+
  3771  001578  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3772  00157C  000A               	tblrd		*-
  3773  00157E  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3774  001582  0E00               	movlw	0
  3775  001584  6E45               	movwf	___ftmul@f2,c
  3776  001586  0E00               	movlw	0
  3777  001588  6E46               	movwf	___ftmul@f2+1,c
  3778  00158A  0E3F               	movlw	63
  3779  00158C  6E47               	movwf	___ftmul@f2+2,c
  3780  00158E  EC74  F00E         	call	___ftmul	;wreg free
  3781  001592  C042  F086         	movff	?___ftmul,?_fround
  3782  001596  C043  F087         	movff	?___ftmul+1,?_fround+1
  3783  00159A  C044  F088         	movff	?___ftmul+2,?_fround+2
  3784  00159E  0012               	return	
  3785  0015A0                     __end_of_fround:
  3786                           	opt stack 0
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function ___wmul *****************
  3804 ;; Defined at:
  3805 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  multiplier      2   59[COMRAM] unsigned int 
  3808 ;;  multiplicand    2   61[COMRAM] unsigned int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  product         2   63[COMRAM] unsigned int 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  2   59[COMRAM] unsigned int 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0, prodl, prodh
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3820 ;;      Params:         4       0       0       0       0       0       0
  3821 ;;      Locals:         2       0       0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0
  3823 ;;      Totals:         6       0       0       0       0       0       0
  3824 ;;Total ram usage:        6 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    2
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_fround
  3831 ;;		_scale
  3832 ;;		_sprintf
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text8
  3837  002526                     __ptext8:
  3838                           	opt stack 0
  3839  002526                     ___wmul:
  3840                           	opt stack 25
  3841                           
  3842                           ;incstack = 0
  3843  002526  503C               	movf	___wmul@multiplier,w,c
  3844  002528  023E               	mulwf	___wmul@multiplicand,c
  3845  00252A  CFF3 F040          	movff	prodl,___wmul@product
  3846  00252E  CFF4 F041          	movff	prodh,___wmul@product+1
  3847  002532  503C               	movf	___wmul@multiplier,w,c
  3848  002534  023F               	mulwf	___wmul@multiplicand+1,c
  3849  002536  50F3               	movf	prodl,w,c
  3850  002538  2641               	addwf	___wmul@product+1,f,c
  3851  00253A  503D               	movf	___wmul@multiplier+1,w,c
  3852  00253C  023E               	mulwf	___wmul@multiplicand,c
  3853  00253E  50F3               	movf	prodl,w,c
  3854  002540  2641               	addwf	___wmul@product+1,f,c
  3855  002542  C040  F03C         	movff	___wmul@product,?___wmul
  3856  002546  C041  F03D         	movff	___wmul@product+1,?___wmul+1
  3857  00254A  0012               	return	
  3858  00254C                     __end_of___wmul:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function ___ftmul *****************
  3877 ;; Defined at:
  3878 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  f1              3   65[COMRAM] float 
  3881 ;;  f2              3   68[COMRAM] float 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3884 ;;  sign            1    5[BANK0 ] unsigned char 
  3885 ;;  cntr            1    4[BANK0 ] unsigned char 
  3886 ;;  exp             1    0[BANK0 ] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  3   65[COMRAM] float 
  3889 ;; Registers used:
  3890 ;;		wreg, status,2, status,0, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3896 ;;      Params:         6       0       0       0       0       0       0
  3897 ;;      Locals:         0       6       0       0       0       0       0
  3898 ;;      Temps:          3       0       0       0       0       0       0
  3899 ;;      Totals:         9       6       0       0       0       0       0
  3900 ;;Total ram usage:       15 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    3
  3903 ;; This function calls:
  3904 ;;		___ftpack
  3905 ;; This function is called by:
  3906 ;;		_calcula
  3907 ;;		_fround
  3908 ;;		_scale
  3909 ;;		_sprintf
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text9
  3914  001CE8                     __ptext9:
  3915                           	opt stack 0
  3916  001CE8                     ___ftmul:
  3917                           	opt stack 24
  3918                           
  3919                           ;incstack = 0
  3920  001CE8  C044  F048         	movff	___ftmul@f1+2,??___ftmul
  3921  001CEC  6A49               	clrf	(??___ftmul+1)& (0+255),c
  3922  001CEE  6A4A               	clrf	(??___ftmul+2)& (0+255),c
  3923  001CF0  3443               	rlcf	___ftmul@f1+1,w,c
  3924  001CF2  3648               	rlcf	??___ftmul& (0+255),f,c
  3925  001CF4  E301               	bnc	u3421
  3926  001CF6  8049               	bsf	(??___ftmul+1)& (0+255),0,c
  3927  001CF8                     u3421:
  3928  001CF8  5048               	movf	??___ftmul,w,c
  3929  001CFA  0100               	movlb	0	; () banked
  3930  001CFC  6F80               	movwf	___ftmul@exp& (0+255),b
  3931  001CFE  5180               	movf	___ftmul@exp& (0+255),w,b
  3932  001D00  A4D8               	btfss	status,2,c
  3933  001D02  D007               	goto	l592
  3934                           
  3935                           ; BSR set to: 0
  3936  001D04  0E00               	movlw	0
  3937  001D06  6E42               	movwf	?___ftmul,c
  3938  001D08  0E00               	movlw	0
  3939  001D0A  6E43               	movwf	?___ftmul+1,c
  3940  001D0C  0E00               	movlw	0
  3941  001D0E  6E44               	movwf	?___ftmul+2,c
  3942                           
  3943                           ; BSR set to: 0
  3944  001D10  0012               	return	
  3945  001D12                     l592:
  3946                           
  3947                           ; BSR set to: 0
  3948                           
  3949                           ; BSR set to: 0
  3950  001D12  C047  F048         	movff	___ftmul@f2+2,??___ftmul
  3951  001D16  6A49               	clrf	(??___ftmul+1)& (0+255),c
  3952  001D18  6A4A               	clrf	(??___ftmul+2)& (0+255),c
  3953  001D1A  3446               	rlcf	___ftmul@f2+1,w,c
  3954  001D1C  3648               	rlcf	??___ftmul& (0+255),f,c
  3955  001D1E  E301               	bnc	u3441
  3956  001D20  8049               	bsf	(??___ftmul+1)& (0+255),0,c
  3957  001D22                     u3441:
  3958  001D22  5048               	movf	??___ftmul,w,c
  3959  001D24  6F85               	movwf	___ftmul@sign& (0+255),b
  3960  001D26  5185               	movf	___ftmul@sign& (0+255),w,b
  3961  001D28  A4D8               	btfss	status,2,c
  3962  001D2A  D007               	goto	l594
  3963                           
  3964                           ; BSR set to: 0
  3965  001D2C  0E00               	movlw	0
  3966  001D2E  6E42               	movwf	?___ftmul,c
  3967  001D30  0E00               	movlw	0
  3968  001D32  6E43               	movwf	?___ftmul+1,c
  3969  001D34  0E00               	movlw	0
  3970  001D36  6E44               	movwf	?___ftmul+2,c
  3971                           
  3972                           ; BSR set to: 0
  3973  001D38  0012               	return	
  3974  001D3A                     l594:
  3975                           
  3976                           ; BSR set to: 0
  3977                           
  3978                           ; BSR set to: 0
  3979  001D3A  5185               	movf	___ftmul@sign& (0+255),w,b
  3980  001D3C  0F7B               	addlw	123
  3981  001D3E  2780               	addwf	___ftmul@exp& (0+255),f,b
  3982                           
  3983                           ; BSR set to: 0
  3984  001D40  C044  F085         	movff	___ftmul@f1+2,___ftmul@sign
  3985  001D44  5047               	movf	___ftmul@f2+2,w,c
  3986  001D46  1B85               	xorwf	___ftmul@sign& (0+255),f,b
  3987  001D48  0E80               	movlw	128
  3988  001D4A  1785               	andwf	___ftmul@sign& (0+255),f,b
  3989                           
  3990                           ; BSR set to: 0
  3991  001D4C  8E43               	bsf	___ftmul@f1+1,7,c
  3992                           
  3993                           ; BSR set to: 0
  3994  001D4E  8E46               	bsf	___ftmul@f2+1,7,c
  3995                           
  3996                           ; BSR set to: 0
  3997  001D50  0EFF               	movlw	255
  3998  001D52  1645               	andwf	___ftmul@f2,f,c
  3999  001D54  0EFF               	movlw	255
  4000  001D56  1646               	andwf	___ftmul@f2+1,f,c
  4001  001D58  0E00               	movlw	0
  4002  001D5A  1647               	andwf	___ftmul@f2+2,f,c
  4003                           
  4004                           ; BSR set to: 0
  4005  001D5C  0E00               	movlw	0
  4006  001D5E  6F81               	movwf	___ftmul@f3_as_product& (0+255),b
  4007  001D60  0E00               	movlw	0
  4008  001D62  6F82               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4009  001D64  0E00               	movlw	0
  4010  001D66  6F83               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4011                           
  4012                           ; BSR set to: 0
  4013  001D68  0E07               	movlw	7
  4014  001D6A  6F84               	movwf	___ftmul@cntr& (0+255),b
  4015  001D6C                     
  4016                           ; BSR set to: 0
  4017                           
  4018                           ; BSR set to: 0
  4019  001D6C  A042               	btfss	___ftmul@f1,0,c
  4020  001D6E  D006               	goto	l596
  4021                           
  4022                           ; BSR set to: 0
  4023  001D70  5045               	movf	___ftmul@f2,w,c
  4024  001D72  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4025  001D74  5046               	movf	___ftmul@f2+1,w,c
  4026  001D76  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4027  001D78  5047               	movf	___ftmul@f2+2,w,c
  4028  001D7A  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4029  001D7C                     l596:
  4030                           
  4031                           ; BSR set to: 0
  4032                           
  4033                           ; BSR set to: 0
  4034  001D7C  90D8               	bcf	status,0,c
  4035  001D7E  3244               	rrcf	___ftmul@f1+2,f,c
  4036  001D80  3243               	rrcf	___ftmul@f1+1,f,c
  4037  001D82  3242               	rrcf	___ftmul@f1,f,c
  4038  001D84  90D8               	bcf	status,0,c
  4039  001D86  3645               	rlcf	___ftmul@f2,f,c
  4040  001D88  3646               	rlcf	___ftmul@f2+1,f,c
  4041  001D8A  3647               	rlcf	___ftmul@f2+2,f,c
  4042                           
  4043                           ; BSR set to: 0
  4044  001D8C  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  4045  001D8E  D7EE               	goto	l595
  4046                           
  4047                           ; BSR set to: 0
  4048                           
  4049                           ; BSR set to: 0
  4050  001D90  0E09               	movlw	9
  4051  001D92  6F84               	movwf	___ftmul@cntr& (0+255),b
  4052  001D94                     
  4053                           ; BSR set to: 0
  4054                           
  4055                           ; BSR set to: 0
  4056  001D94  A042               	btfss	___ftmul@f1,0,c
  4057  001D96  D006               	goto	l599
  4058                           
  4059                           ; BSR set to: 0
  4060  001D98  5045               	movf	___ftmul@f2,w,c
  4061  001D9A  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4062  001D9C  5046               	movf	___ftmul@f2+1,w,c
  4063  001D9E  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4064  001DA0  5047               	movf	___ftmul@f2+2,w,c
  4065  001DA2  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4066  001DA4                     l599:
  4067                           
  4068                           ; BSR set to: 0
  4069                           
  4070                           ; BSR set to: 0
  4071  001DA4  90D8               	bcf	status,0,c
  4072  001DA6  3244               	rrcf	___ftmul@f1+2,f,c
  4073  001DA8  3243               	rrcf	___ftmul@f1+1,f,c
  4074  001DAA  3242               	rrcf	___ftmul@f1,f,c
  4075  001DAC  90D8               	bcf	status,0,c
  4076  001DAE  3383               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4077  001DB0  3382               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4078  001DB2  3381               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4079                           
  4080                           ; BSR set to: 0
  4081  001DB4  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  4082  001DB6  D7EE               	goto	l598
  4083                           
  4084                           ; BSR set to: 0
  4085                           
  4086                           ; BSR set to: 0
  4087  001DB8  C081  F02E         	movff	___ftmul@f3_as_product,___ftpack@arg
  4088  001DBC  C082  F02F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4089  001DC0  C083  F030         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4090  001DC4  C080  F031         	movff	___ftmul@exp,___ftpack@exp
  4091  001DC8  C085  F032         	movff	___ftmul@sign,___ftpack@sign
  4092  001DCC  ECBF  F00F         	call	___ftpack	;wreg free
  4093  001DD0  C02E  F042         	movff	?___ftpack,?___ftmul
  4094  001DD4  C02F  F043         	movff	?___ftpack+1,?___ftmul+1
  4095  001DD8  C030  F044         	movff	?___ftpack+2,?___ftmul+2
  4096  001DDC  0012               	return	
  4097  001DDE                     __end_of___ftmul:
  4098                           	opt stack 0
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon	equ	0xFF2
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function ___awmod *****************
  4116 ;; Defined at:
  4117 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  dividend        2   45[COMRAM] int 
  4120 ;;  divisor         2   47[COMRAM] int 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  sign            1   50[COMRAM] unsigned char 
  4123 ;;  counter         1   49[COMRAM] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  2   45[COMRAM] int 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         4       0       0       0       0       0       0
  4134 ;;      Locals:         2       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         6       0       0       0       0       0       0
  4137 ;;Total ram usage:        6 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    2
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_fround
  4144 ;;		_scale
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text10
  4149  0021C2                     __ptext10:
  4150                           	opt stack 0
  4151  0021C2                     ___awmod:
  4152                           	opt stack 25
  4153                           
  4154                           ;incstack = 0
  4155  0021C2  0E00               	movlw	0
  4156  0021C4  6E33               	movwf	___awmod@sign,c
  4157  0021C6  AE2F               	btfss	___awmod@dividend+1,7,c
  4158  0021C8  D006               	goto	l445
  4159  0021CA  6C2E               	negf	___awmod@dividend,c
  4160  0021CC  1E2F               	comf	___awmod@dividend+1,f,c
  4161  0021CE  B0D8               	btfsc	status,0,c
  4162  0021D0  2A2F               	incf	___awmod@dividend+1,f,c
  4163  0021D2  0E01               	movlw	1
  4164  0021D4  6E33               	movwf	___awmod@sign,c
  4165  0021D6                     l445:
  4166  0021D6  AE31               	btfss	___awmod@divisor+1,7,c
  4167  0021D8  D004               	goto	l446
  4168  0021DA  6C30               	negf	___awmod@divisor,c
  4169  0021DC  1E31               	comf	___awmod@divisor+1,f,c
  4170  0021DE  B0D8               	btfsc	status,0,c
  4171  0021E0  2A31               	incf	___awmod@divisor+1,f,c
  4172  0021E2                     l446:
  4173  0021E2  5030               	movf	___awmod@divisor,w,c
  4174  0021E4  1031               	iorwf	___awmod@divisor+1,w,c
  4175  0021E6  B4D8               	btfsc	status,2,c
  4176  0021E8  D018               	goto	l453
  4177  0021EA  0E01               	movlw	1
  4178  0021EC  6E32               	movwf	___awmod@counter,c
  4179  0021EE  D004               	goto	l448
  4180  0021F0  90D8               	bcf	status,0,c
  4181  0021F2  3630               	rlcf	___awmod@divisor,f,c
  4182  0021F4  3631               	rlcf	___awmod@divisor+1,f,c
  4183  0021F6  2A32               	incf	___awmod@counter,f,c
  4184  0021F8                     l448:
  4185  0021F8  AE31               	btfss	___awmod@divisor+1,7,c
  4186  0021FA  D7FA               	goto	l449
  4187  0021FC                     u3570:
  4188  0021FC  5030               	movf	___awmod@divisor,w,c
  4189  0021FE  5C2E               	subwf	___awmod@dividend,w,c
  4190  002200  5031               	movf	___awmod@divisor+1,w,c
  4191  002202  582F               	subwfb	___awmod@dividend+1,w,c
  4192  002204  A0D8               	btfss	status,0,c
  4193  002206  D004               	goto	l452
  4194  002208  5030               	movf	___awmod@divisor,w,c
  4195  00220A  5E2E               	subwf	___awmod@dividend,f,c
  4196  00220C  5031               	movf	___awmod@divisor+1,w,c
  4197  00220E  5A2F               	subwfb	___awmod@dividend+1,f,c
  4198  002210                     l452:
  4199  002210  90D8               	bcf	status,0,c
  4200  002212  3231               	rrcf	___awmod@divisor+1,f,c
  4201  002214  3230               	rrcf	___awmod@divisor,f,c
  4202  002216  2E32               	decfsz	___awmod@counter,f,c
  4203  002218  D7F1               	goto	u3570
  4204  00221A                     l453:
  4205  00221A  5033               	movf	___awmod@sign,w,c
  4206  00221C  B4D8               	btfsc	status,2,c
  4207  00221E  D004               	goto	l454
  4208  002220  6C2E               	negf	___awmod@dividend,c
  4209  002222  1E2F               	comf	___awmod@dividend+1,f,c
  4210  002224  B0D8               	btfsc	status,0,c
  4211  002226  2A2F               	incf	___awmod@dividend+1,f,c
  4212  002228                     l454:
  4213  002228  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4214  00222C  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4215  002230  0012               	return	
  4216  002232                     __end_of___awmod:
  4217                           	opt stack 0
  4218                           tblptru	equ	0xFF8
  4219                           tblptrh	equ	0xFF7
  4220                           tblptrl	equ	0xFF6
  4221                           tablat	equ	0xFF5
  4222                           prodh	equ	0xFF4
  4223                           prodl	equ	0xFF3
  4224                           intcon	equ	0xFF2
  4225                           postinc0	equ	0xFEE
  4226                           wreg	equ	0xFE8
  4227                           indf2	equ	0xFDF
  4228                           postinc2	equ	0xFDE
  4229                           postdec2	equ	0xFDD
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function ___awdiv *****************
  4235 ;; Defined at:
  4236 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  dividend        2   51[COMRAM] int 
  4239 ;;  divisor         2   53[COMRAM] int 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  quotient        2   57[COMRAM] int 
  4242 ;;  sign            1   56[COMRAM] unsigned char 
  4243 ;;  counter         1   55[COMRAM] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  2   51[COMRAM] int 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4253 ;;      Params:         4       0       0       0       0       0       0
  4254 ;;      Locals:         4       0       0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0
  4256 ;;      Totals:         8       0       0       0       0       0       0
  4257 ;;Total ram usage:        8 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    2
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_fround
  4264 ;;		_scale
  4265 ;;		_sprintf
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text11
  4270  0020BC                     __ptext11:
  4271                           	opt stack 0
  4272  0020BC                     ___awdiv:
  4273                           	opt stack 25
  4274                           
  4275                           ;incstack = 0
  4276  0020BC  0E00               	movlw	0
  4277  0020BE  6E39               	movwf	___awdiv@sign,c
  4278  0020C0  AE37               	btfss	___awdiv@divisor+1,7,c
  4279  0020C2  D006               	goto	l432
  4280  0020C4  6C36               	negf	___awdiv@divisor,c
  4281  0020C6  1E37               	comf	___awdiv@divisor+1,f,c
  4282  0020C8  B0D8               	btfsc	status,0,c
  4283  0020CA  2A37               	incf	___awdiv@divisor+1,f,c
  4284  0020CC  0E01               	movlw	1
  4285  0020CE  6E39               	movwf	___awdiv@sign,c
  4286  0020D0                     l432:
  4287  0020D0  AE35               	btfss	___awdiv@dividend+1,7,c
  4288  0020D2  D006               	goto	l433
  4289  0020D4  6C34               	negf	___awdiv@dividend,c
  4290  0020D6  1E35               	comf	___awdiv@dividend+1,f,c
  4291  0020D8  B0D8               	btfsc	status,0,c
  4292  0020DA  2A35               	incf	___awdiv@dividend+1,f,c
  4293  0020DC  0E01               	movlw	1
  4294  0020DE  1A39               	xorwf	___awdiv@sign,f,c
  4295  0020E0                     l433:
  4296  0020E0  0E00               	movlw	0
  4297  0020E2  6E3B               	movwf	___awdiv@quotient+1,c
  4298  0020E4  0E00               	movlw	0
  4299  0020E6  6E3A               	movwf	___awdiv@quotient,c
  4300  0020E8  5036               	movf	___awdiv@divisor,w,c
  4301  0020EA  1037               	iorwf	___awdiv@divisor+1,w,c
  4302  0020EC  B4D8               	btfsc	status,2,c
  4303  0020EE  D01C               	goto	l440
  4304  0020F0  0E01               	movlw	1
  4305  0020F2  6E38               	movwf	___awdiv@counter,c
  4306  0020F4  D004               	goto	l435
  4307  0020F6  90D8               	bcf	status,0,c
  4308  0020F8  3636               	rlcf	___awdiv@divisor,f,c
  4309  0020FA  3637               	rlcf	___awdiv@divisor+1,f,c
  4310  0020FC  2A38               	incf	___awdiv@counter,f,c
  4311  0020FE                     l435:
  4312  0020FE  AE37               	btfss	___awdiv@divisor+1,7,c
  4313  002100  D7FA               	goto	l436
  4314  002102                     u3510:
  4315  002102  90D8               	bcf	status,0,c
  4316  002104  363A               	rlcf	___awdiv@quotient,f,c
  4317  002106  363B               	rlcf	___awdiv@quotient+1,f,c
  4318  002108  5036               	movf	___awdiv@divisor,w,c
  4319  00210A  5C34               	subwf	___awdiv@dividend,w,c
  4320  00210C  5037               	movf	___awdiv@divisor+1,w,c
  4321  00210E  5835               	subwfb	___awdiv@dividend+1,w,c
  4322  002110  A0D8               	btfss	status,0,c
  4323  002112  D005               	goto	l439
  4324  002114  5036               	movf	___awdiv@divisor,w,c
  4325  002116  5E34               	subwf	___awdiv@dividend,f,c
  4326  002118  5037               	movf	___awdiv@divisor+1,w,c
  4327  00211A  5A35               	subwfb	___awdiv@dividend+1,f,c
  4328  00211C  803A               	bsf	___awdiv@quotient,0,c
  4329  00211E                     l439:
  4330  00211E  90D8               	bcf	status,0,c
  4331  002120  3237               	rrcf	___awdiv@divisor+1,f,c
  4332  002122  3236               	rrcf	___awdiv@divisor,f,c
  4333  002124  2E38               	decfsz	___awdiv@counter,f,c
  4334  002126  D7ED               	goto	u3510
  4335  002128                     l440:
  4336  002128  5039               	movf	___awdiv@sign,w,c
  4337  00212A  B4D8               	btfsc	status,2,c
  4338  00212C  D004               	goto	l441
  4339  00212E  6C3A               	negf	___awdiv@quotient,c
  4340  002130  1E3B               	comf	___awdiv@quotient+1,f,c
  4341  002132  B0D8               	btfsc	status,0,c
  4342  002134  2A3B               	incf	___awdiv@quotient+1,f,c
  4343  002136                     l441:
  4344  002136  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4345  00213A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4346  00213E  0012               	return	
  4347  002140                     __end_of___awdiv:
  4348                           	opt stack 0
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           prodh	equ	0xFF4
  4354                           prodl	equ	0xFF3
  4355                           intcon	equ	0xFF2
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function __tdiv_to_l_ *****************
  4366 ;; Defined at:
  4367 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  f1              3   45[COMRAM] float 
  4370 ;;  f2              3   48[COMRAM] float 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  quot            4   54[COMRAM] unsigned long 
  4373 ;;  exp1            1   59[COMRAM] unsigned char 
  4374 ;;  cntr            1   58[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  4   45[COMRAM] unsigned long 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4384 ;;      Params:         6       0       0       0       0       0       0
  4385 ;;      Locals:         6       0       0       0       0       0       0
  4386 ;;      Temps:          3       0       0       0       0       0       0
  4387 ;;      Totals:        15       0       0       0       0       0       0
  4388 ;;Total ram usage:       15 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    2
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_sprintf
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text12
  4399  00174E                     __ptext12:
  4400                           	opt stack 0
  4401  00174E                     __tdiv_to_l_:
  4402                           	opt stack 26
  4403                           
  4404                           ;incstack = 0
  4405  00174E  C030  F034         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4406  001752  6A35               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4407  001754  6A36               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4408  001756  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4409  001758  3634               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4410  00175A  E301               	bnc	u3691
  4411  00175C  8035               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4412  00175E                     u3691:
  4413  00175E  5034               	movf	??__tdiv_to_l_,w,c
  4414  001760  6E3C               	movwf	__tdiv_to_l_@exp1,c
  4415  001762  503C               	movf	__tdiv_to_l_@exp1,w,c
  4416  001764  A4D8               	btfss	status,2,c
  4417  001766  D009               	goto	l568
  4418  001768  0E00               	movlw	0
  4419  00176A  6E2E               	movwf	?__tdiv_to_l_,c
  4420  00176C  0E00               	movlw	0
  4421  00176E  6E2F               	movwf	?__tdiv_to_l_+1,c
  4422  001770  0E00               	movlw	0
  4423  001772  6E30               	movwf	?__tdiv_to_l_+2,c
  4424  001774  0E00               	movlw	0
  4425  001776  6E31               	movwf	?__tdiv_to_l_+3,c
  4426  001778  0012               	return	
  4427  00177A                     l568:
  4428  00177A  C033  F034         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4429  00177E  6A35               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4430  001780  6A36               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4431  001782  3432               	rlcf	__tdiv_to_l_@f2+1,w,c
  4432  001784  3634               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4433  001786  E301               	bnc	u3711
  4434  001788  8035               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4435  00178A                     u3711:
  4436  00178A  5034               	movf	??__tdiv_to_l_,w,c
  4437  00178C  6E3B               	movwf	__tdiv_to_l_@cntr,c
  4438  00178E  503B               	movf	__tdiv_to_l_@cntr,w,c
  4439  001790  A4D8               	btfss	status,2,c
  4440  001792  D009               	goto	l570
  4441  001794  0E00               	movlw	0
  4442  001796  6E2E               	movwf	?__tdiv_to_l_,c
  4443  001798  0E00               	movlw	0
  4444  00179A  6E2F               	movwf	?__tdiv_to_l_+1,c
  4445  00179C  0E00               	movlw	0
  4446  00179E  6E30               	movwf	?__tdiv_to_l_+2,c
  4447  0017A0  0E00               	movlw	0
  4448  0017A2  6E31               	movwf	?__tdiv_to_l_+3,c
  4449  0017A4  0012               	return	
  4450  0017A6                     l570:
  4451  0017A6  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4452  0017A8  0EFF               	movlw	255
  4453  0017AA  162E               	andwf	__tdiv_to_l_@f1,f,c
  4454  0017AC  0EFF               	movlw	255
  4455  0017AE  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4456  0017B0  0E00               	movlw	0
  4457  0017B2  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4458  0017B4  8E32               	bsf	__tdiv_to_l_@f2+1,7,c
  4459  0017B6  0EFF               	movlw	255
  4460  0017B8  1631               	andwf	__tdiv_to_l_@f2,f,c
  4461  0017BA  0EFF               	movlw	255
  4462  0017BC  1632               	andwf	__tdiv_to_l_@f2+1,f,c
  4463  0017BE  0E00               	movlw	0
  4464  0017C0  1633               	andwf	__tdiv_to_l_@f2+2,f,c
  4465  0017C2  0E00               	movlw	0
  4466  0017C4  6E37               	movwf	__tdiv_to_l_@quot,c
  4467  0017C6  0E00               	movlw	0
  4468  0017C8  6E38               	movwf	__tdiv_to_l_@quot+1,c
  4469  0017CA  0E00               	movlw	0
  4470  0017CC  6E39               	movwf	__tdiv_to_l_@quot+2,c
  4471  0017CE  0E00               	movlw	0
  4472  0017D0  6E3A               	movwf	__tdiv_to_l_@quot+3,c
  4473  0017D2  0E7F               	movlw	127
  4474  0017D4  5E3C               	subwf	__tdiv_to_l_@exp1,f,c
  4475  0017D6  503B               	movf	__tdiv_to_l_@cntr,w,c
  4476  0017D8  0F98               	addlw	152
  4477  0017DA  5E3C               	subwf	__tdiv_to_l_@exp1,f,c
  4478  0017DC  0E18               	movlw	24
  4479  0017DE  6E3B               	movwf	__tdiv_to_l_@cntr,c
  4480  0017E0                     l571:
  4481  0017E0  90D8               	bcf	status,0,c
  4482  0017E2  3637               	rlcf	__tdiv_to_l_@quot,f,c
  4483  0017E4  3638               	rlcf	__tdiv_to_l_@quot+1,f,c
  4484  0017E6  3639               	rlcf	__tdiv_to_l_@quot+2,f,c
  4485  0017E8  363A               	rlcf	__tdiv_to_l_@quot+3,f,c
  4486  0017EA  5031               	movf	__tdiv_to_l_@f2,w,c
  4487  0017EC  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4488  0017EE  5032               	movf	__tdiv_to_l_@f2+1,w,c
  4489  0017F0  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4490  0017F2  5033               	movf	__tdiv_to_l_@f2+2,w,c
  4491  0017F4  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4492  0017F6  A0D8               	btfss	status,0,c
  4493  0017F8  D007               	goto	l572
  4494  0017FA  5031               	movf	__tdiv_to_l_@f2,w,c
  4495  0017FC  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4496  0017FE  5032               	movf	__tdiv_to_l_@f2+1,w,c
  4497  001800  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4498  001802  5033               	movf	__tdiv_to_l_@f2+2,w,c
  4499  001804  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4500  001806  8037               	bsf	__tdiv_to_l_@quot,0,c
  4501  001808                     l572:
  4502  001808  90D8               	bcf	status,0,c
  4503  00180A  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4504  00180C  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4505  00180E  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4506  001810  2E3B               	decfsz	__tdiv_to_l_@cntr,f,c
  4507  001812  D7E6               	goto	l571
  4508  001814  AE3C               	btfss	__tdiv_to_l_@exp1,7,c
  4509  001816  D016               	goto	l574
  4510  001818  503C               	movf	__tdiv_to_l_@exp1,w,c
  4511  00181A  0A80               	xorlw	128
  4512  00181C  0F97               	addlw	151
  4513  00181E  B0D8               	btfsc	status,0,c
  4514  001820  D009               	goto	l575
  4515  001822  0E00               	movlw	0
  4516  001824  6E2E               	movwf	?__tdiv_to_l_,c
  4517  001826  0E00               	movlw	0
  4518  001828  6E2F               	movwf	?__tdiv_to_l_+1,c
  4519  00182A  0E00               	movlw	0
  4520  00182C  6E30               	movwf	?__tdiv_to_l_+2,c
  4521  00182E  0E00               	movlw	0
  4522  001830  6E31               	movwf	?__tdiv_to_l_+3,c
  4523  001832  0012               	return	
  4524  001834                     l575:
  4525  001834  90D8               	bcf	status,0,c
  4526  001836  323A               	rrcf	__tdiv_to_l_@quot+3,f,c
  4527  001838  3239               	rrcf	__tdiv_to_l_@quot+2,f,c
  4528  00183A  3238               	rrcf	__tdiv_to_l_@quot+1,f,c
  4529  00183C  3237               	rrcf	__tdiv_to_l_@quot,f,c
  4530  00183E  3E3C               	incfsz	__tdiv_to_l_@exp1,f,c
  4531  001840  D7F9               	goto	l575
  4532  001842  D015               	goto	u3770
  4533  001844                     l574:
  4534  001844  0E17               	movlw	23
  4535  001846  643C               	cpfsgt	__tdiv_to_l_@exp1,c
  4536  001848  D00F               	goto	l580
  4537  00184A  0E00               	movlw	0
  4538  00184C  6E2E               	movwf	?__tdiv_to_l_,c
  4539  00184E  0E00               	movlw	0
  4540  001850  6E2F               	movwf	?__tdiv_to_l_+1,c
  4541  001852  0E00               	movlw	0
  4542  001854  6E30               	movwf	?__tdiv_to_l_+2,c
  4543  001856  0E00               	movlw	0
  4544  001858  6E31               	movwf	?__tdiv_to_l_+3,c
  4545  00185A  0012               	return	
  4546  00185C  90D8               	bcf	status,0,c
  4547  00185E  3637               	rlcf	__tdiv_to_l_@quot,f,c
  4548  001860  3638               	rlcf	__tdiv_to_l_@quot+1,f,c
  4549  001862  3639               	rlcf	__tdiv_to_l_@quot+2,f,c
  4550  001864  363A               	rlcf	__tdiv_to_l_@quot+3,f,c
  4551  001866  063C               	decf	__tdiv_to_l_@exp1,f,c
  4552  001868                     l580:
  4553  001868  503C               	movf	__tdiv_to_l_@exp1,w,c
  4554  00186A  A4D8               	btfss	status,2,c
  4555  00186C  D7F7               	goto	l581
  4556  00186E                     u3770:
  4557  00186E  C037  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4558  001872  C038  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4559  001876  C039  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4560  00187A  C03A  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4561  00187E  0012               	return		;funcret
  4562  001880                     __end_of__tdiv_to_l_:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function __div_to_l_ *****************
  4581 ;; Defined at:
  4582 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  f1              3   45[COMRAM] unsigned long 
  4585 ;;  f2              3   48[COMRAM] unsigned long 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  quot            4   51[COMRAM] unsigned long 
  4588 ;;  exp1            1   56[COMRAM] unsigned char 
  4589 ;;  cntr            1   55[COMRAM] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  4   45[COMRAM] unsigned long 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4599 ;;      Params:         6       0       0       0       0       0       0
  4600 ;;      Locals:         6       0       0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0
  4602 ;;      Totals:        12       0       0       0       0       0       0
  4603 ;;Total ram usage:       12 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    2
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_sprintf
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text13
  4614  001880                     __ptext13:
  4615                           	opt stack 0
  4616  001880                     __div_to_l_:
  4617                           	opt stack 26
  4618                           
  4619                           ;incstack = 0
  4620  001880  3430               	rlcf	__div_to_l_@f1+2,w,c
  4621  001882  3431               	rlcf	__div_to_l_@f1+3,w,c
  4622  001884  6E39               	movwf	__div_to_l_@exp1,c
  4623  001886  5039               	movf	__div_to_l_@exp1,w,c
  4624  001888  A4D8               	btfss	status,2,c
  4625  00188A  D009               	goto	l464
  4626  00188C  0E00               	movlw	0
  4627  00188E  6E2E               	movwf	?__div_to_l_,c
  4628  001890  0E00               	movlw	0
  4629  001892  6E2F               	movwf	?__div_to_l_+1,c
  4630  001894  0E00               	movlw	0
  4631  001896  6E30               	movwf	?__div_to_l_+2,c
  4632  001898  0E00               	movlw	0
  4633  00189A  6E31               	movwf	?__div_to_l_+3,c
  4634  00189C  0012               	return	
  4635  00189E                     l464:
  4636  00189E  3433               	rlcf	__div_to_l_@f2+2,w,c
  4637  0018A0  3434               	rlcf	__div_to_l_@f2+3,w,c
  4638  0018A2  6E38               	movwf	__div_to_l_@cntr,c
  4639  0018A4  5038               	movf	__div_to_l_@cntr,w,c
  4640  0018A6  A4D8               	btfss	status,2,c
  4641  0018A8  D009               	goto	l466
  4642  0018AA  0E00               	movlw	0
  4643  0018AC  6E2E               	movwf	?__div_to_l_,c
  4644  0018AE  0E00               	movlw	0
  4645  0018B0  6E2F               	movwf	?__div_to_l_+1,c
  4646  0018B2  0E00               	movlw	0
  4647  0018B4  6E30               	movwf	?__div_to_l_+2,c
  4648  0018B6  0E00               	movlw	0
  4649  0018B8  6E31               	movwf	?__div_to_l_+3,c
  4650  0018BA  0012               	return	
  4651  0018BC                     l466:
  4652  0018BC  8E30               	bsf	__div_to_l_@f1+2,7,c
  4653  0018BE  0EFF               	movlw	255
  4654  0018C0  162E               	andwf	__div_to_l_@f1,f,c
  4655  0018C2  0EFF               	movlw	255
  4656  0018C4  162F               	andwf	__div_to_l_@f1+1,f,c
  4657  0018C6  0EFF               	movlw	255
  4658  0018C8  1630               	andwf	__div_to_l_@f1+2,f,c
  4659  0018CA  0E00               	movlw	0
  4660  0018CC  1631               	andwf	__div_to_l_@f1+3,f,c
  4661  0018CE  8E33               	bsf	__div_to_l_@f2+2,7,c
  4662  0018D0  0EFF               	movlw	255
  4663  0018D2  1631               	andwf	__div_to_l_@f2,f,c
  4664  0018D4  0EFF               	movlw	255
  4665  0018D6  1632               	andwf	__div_to_l_@f2+1,f,c
  4666  0018D8  0EFF               	movlw	255
  4667  0018DA  1633               	andwf	__div_to_l_@f2+2,f,c
  4668  0018DC  0E00               	movlw	0
  4669  0018DE  1634               	andwf	__div_to_l_@f2+3,f,c
  4670  0018E0  0E00               	movlw	0
  4671  0018E2  6E34               	movwf	__div_to_l_@quot,c
  4672  0018E4  0E00               	movlw	0
  4673  0018E6  6E35               	movwf	__div_to_l_@quot+1,c
  4674  0018E8  0E00               	movlw	0
  4675  0018EA  6E36               	movwf	__div_to_l_@quot+2,c
  4676  0018EC  0E00               	movlw	0
  4677  0018EE  6E37               	movwf	__div_to_l_@quot+3,c
  4678  0018F0  0E7F               	movlw	127
  4679  0018F2  5E39               	subwf	__div_to_l_@exp1,f,c
  4680  0018F4  5038               	movf	__div_to_l_@cntr,w,c
  4681  0018F6  0FA0               	addlw	160
  4682  0018F8  5E39               	subwf	__div_to_l_@exp1,f,c
  4683  0018FA  0E20               	movlw	32
  4684  0018FC  6E38               	movwf	__div_to_l_@cntr,c
  4685  0018FE  90D8               	bcf	status,0,c
  4686  001900  3634               	rlcf	__div_to_l_@quot,f,c
  4687  001902  3635               	rlcf	__div_to_l_@quot+1,f,c
  4688  001904  3636               	rlcf	__div_to_l_@quot+2,f,c
  4689  001906  3637               	rlcf	__div_to_l_@quot+3,f,c
  4690  001908  5031               	movf	__div_to_l_@f2,w,c
  4691  00190A  5C2E               	subwf	__div_to_l_@f1,w,c
  4692  00190C  5032               	movf	__div_to_l_@f2+1,w,c
  4693  00190E  582F               	subwfb	__div_to_l_@f1+1,w,c
  4694  001910  5033               	movf	__div_to_l_@f2+2,w,c
  4695  001912  5830               	subwfb	__div_to_l_@f1+2,w,c
  4696  001914  5034               	movf	__div_to_l_@f2+3,w,c
  4697  001916  5831               	subwfb	__div_to_l_@f1+3,w,c
  4698  001918  A0D8               	btfss	status,0,c
  4699  00191A  D009               	goto	l468
  4700  00191C  5031               	movf	__div_to_l_@f2,w,c
  4701  00191E  5E2E               	subwf	__div_to_l_@f1,f,c
  4702  001920  5032               	movf	__div_to_l_@f2+1,w,c
  4703  001922  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4704  001924  5033               	movf	__div_to_l_@f2+2,w,c
  4705  001926  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4706  001928  5034               	movf	__div_to_l_@f2+3,w,c
  4707  00192A  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4708  00192C  8034               	bsf	__div_to_l_@quot,0,c
  4709  00192E                     l468:
  4710  00192E  90D8               	bcf	status,0,c
  4711  001930  362E               	rlcf	__div_to_l_@f1,f,c
  4712  001932  362F               	rlcf	__div_to_l_@f1+1,f,c
  4713  001934  3630               	rlcf	__div_to_l_@f1+2,f,c
  4714  001936  3631               	rlcf	__div_to_l_@f1+3,f,c
  4715  001938  2E38               	decfsz	__div_to_l_@cntr,f,c
  4716  00193A  D7E1               	goto	l467
  4717  00193C  AE39               	btfss	__div_to_l_@exp1,7,c
  4718  00193E  D016               	goto	l470
  4719  001940  5039               	movf	__div_to_l_@exp1,w,c
  4720  001942  0A80               	xorlw	128
  4721  001944  0F9F               	addlw	159
  4722  001946  B0D8               	btfsc	status,0,c
  4723  001948  D009               	goto	l471
  4724  00194A  0E00               	movlw	0
  4725  00194C  6E2E               	movwf	?__div_to_l_,c
  4726  00194E  0E00               	movlw	0
  4727  001950  6E2F               	movwf	?__div_to_l_+1,c
  4728  001952  0E00               	movlw	0
  4729  001954  6E30               	movwf	?__div_to_l_+2,c
  4730  001956  0E00               	movlw	0
  4731  001958  6E31               	movwf	?__div_to_l_+3,c
  4732  00195A  0012               	return	
  4733  00195C                     l471:
  4734  00195C  90D8               	bcf	status,0,c
  4735  00195E  3237               	rrcf	__div_to_l_@quot+3,f,c
  4736  001960  3236               	rrcf	__div_to_l_@quot+2,f,c
  4737  001962  3235               	rrcf	__div_to_l_@quot+1,f,c
  4738  001964  3234               	rrcf	__div_to_l_@quot,f,c
  4739  001966  3E39               	incfsz	__div_to_l_@exp1,f,c
  4740  001968  D7F9               	goto	l471
  4741  00196A  D015               	goto	u3840
  4742  00196C                     l470:
  4743  00196C  0E1F               	movlw	31
  4744  00196E  6439               	cpfsgt	__div_to_l_@exp1,c
  4745  001970  D00F               	goto	l476
  4746  001972  0E00               	movlw	0
  4747  001974  6E2E               	movwf	?__div_to_l_,c
  4748  001976  0E00               	movlw	0
  4749  001978  6E2F               	movwf	?__div_to_l_+1,c
  4750  00197A  0E00               	movlw	0
  4751  00197C  6E30               	movwf	?__div_to_l_+2,c
  4752  00197E  0E00               	movlw	0
  4753  001980  6E31               	movwf	?__div_to_l_+3,c
  4754  001982  0012               	return	
  4755  001984  90D8               	bcf	status,0,c
  4756  001986  3634               	rlcf	__div_to_l_@quot,f,c
  4757  001988  3635               	rlcf	__div_to_l_@quot+1,f,c
  4758  00198A  3636               	rlcf	__div_to_l_@quot+2,f,c
  4759  00198C  3637               	rlcf	__div_to_l_@quot+3,f,c
  4760  00198E  0639               	decf	__div_to_l_@exp1,f,c
  4761  001990                     l476:
  4762  001990  5039               	movf	__div_to_l_@exp1,w,c
  4763  001992  A4D8               	btfss	status,2,c
  4764  001994  D7F7               	goto	l477
  4765  001996                     u3840:
  4766  001996  C034  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4767  00199A  C035  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4768  00199E  C036  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4769  0019A2  C037  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4770  0019A6  0012               	return		;funcret
  4771  0019A8                     __end_of__div_to_l_:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           postdec2	equ	0xFDD
  4785                           fsr2h	equ	0xFDA
  4786                           fsr2l	equ	0xFD9
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function ___lltoft *****************
  4790 ;; Defined at:
  4791 ;;		line 35 in file "/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  c               4   53[COMRAM] unsigned long 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  exp             1   61[COMRAM] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  3   53[COMRAM] float 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4805 ;;      Params:         4       0       0       0       0       0       0
  4806 ;;      Locals:         1       0       0       0       0       0       0
  4807 ;;      Temps:          4       0       0       0       0       0       0
  4808 ;;      Totals:         9       0       0       0       0       0       0
  4809 ;;Total ram usage:        9 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    3
  4812 ;; This function calls:
  4813 ;;		___ftpack
  4814 ;; This function is called by:
  4815 ;;		_calcula
  4816 ;;		_sprintf
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text14
  4821  002298                     __ptext14:
  4822                           	opt stack 0
  4823  002298                     ___lltoft:
  4824                           	opt stack 25
  4825                           
  4826                           ;incstack = 0
  4827  002298  0E8E               	movlw	142
  4828  00229A  6E3E               	movwf	___lltoft@exp,c
  4829  00229C  D006               	goto	l675
  4830  00229E  90D8               	bcf	status,0,c
  4831  0022A0  3239               	rrcf	___lltoft@c+3,f,c
  4832  0022A2  3238               	rrcf	___lltoft@c+2,f,c
  4833  0022A4  3237               	rrcf	___lltoft@c+1,f,c
  4834  0022A6  3236               	rrcf	___lltoft@c,f,c
  4835  0022A8  2A3E               	incf	___lltoft@exp,f,c
  4836  0022AA                     l675:
  4837  0022AA  0E00               	movlw	0
  4838  0022AC  1436               	andwf	___lltoft@c,w,c
  4839  0022AE  6E3A               	movwf	??___lltoft& (0+255),c
  4840  0022B0  0E00               	movlw	0
  4841  0022B2  1437               	andwf	___lltoft@c+1,w,c
  4842  0022B4  6E3B               	movwf	(??___lltoft+1)& (0+255),c
  4843  0022B6  0E00               	movlw	0
  4844  0022B8  1438               	andwf	___lltoft@c+2,w,c
  4845  0022BA  6E3C               	movwf	(??___lltoft+2)& (0+255),c
  4846  0022BC  0EFF               	movlw	255
  4847  0022BE  1439               	andwf	___lltoft@c+3,w,c
  4848  0022C0  6E3D               	movwf	(??___lltoft+3)& (0+255),c
  4849  0022C2  503A               	movf	??___lltoft,w,c
  4850  0022C4  103B               	iorwf	??___lltoft+1,w,c
  4851  0022C6  103C               	iorwf	??___lltoft+2,w,c
  4852  0022C8  103D               	iorwf	??___lltoft+3,w,c
  4853  0022CA  A4D8               	btfss	status,2,c
  4854  0022CC  D7E8               	goto	l676
  4855  0022CE  C036  F02E         	movff	___lltoft@c,___ftpack@arg
  4856  0022D2  C037  F02F         	movff	___lltoft@c+1,___ftpack@arg+1
  4857  0022D6  C038  F030         	movff	___lltoft@c+2,___ftpack@arg+2
  4858  0022DA  C03E  F031         	movff	___lltoft@exp,___ftpack@exp
  4859  0022DE  0E00               	movlw	0
  4860  0022E0  6E32               	movwf	___ftpack@sign,c
  4861  0022E2  ECBF  F00F         	call	___ftpack	;wreg free
  4862  0022E6  C02E  F036         	movff	?___ftpack,?___lltoft
  4863  0022EA  C02F  F037         	movff	?___ftpack+1,?___lltoft+1
  4864  0022EE  C030  F038         	movff	?___ftpack+2,?___lltoft+2
  4865  0022F2  0012               	return	
  4866  0022F4                     __end_of___lltoft:
  4867                           	opt stack 0
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           postdec2	equ	0xFDD
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function ___llmod *****************
  4885 ;; Defined at:
  4886 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  dividend        4   45[COMRAM] unsigned long 
  4889 ;;  divisor         4   49[COMRAM] unsigned long 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  counter         1   53[COMRAM] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  4   45[COMRAM] unsigned long 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4901 ;;      Params:         8       0       0       0       0       0       0
  4902 ;;      Locals:         1       0       0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0
  4904 ;;      Totals:         9       0       0       0       0       0       0
  4905 ;;Total ram usage:        9 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    2
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_sprintf
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text15
  4916  002232                     __ptext15:
  4917                           	opt stack 0
  4918  002232                     ___llmod:
  4919                           	opt stack 26
  4920                           
  4921                           ;incstack = 0
  4922  002232  5032               	movf	___llmod@divisor,w,c
  4923  002234  1033               	iorwf	___llmod@divisor+1,w,c
  4924  002236  1034               	iorwf	___llmod@divisor+2,w,c
  4925  002238  1035               	iorwf	___llmod@divisor+3,w,c
  4926  00223A  B4D8               	btfsc	status,2,c
  4927  00223C  D024               	goto	l669
  4928  00223E  0E01               	movlw	1
  4929  002240  6E36               	movwf	___llmod@counter,c
  4930  002242  D006               	goto	l664
  4931  002244  90D8               	bcf	status,0,c
  4932  002246  3632               	rlcf	___llmod@divisor,f,c
  4933  002248  3633               	rlcf	___llmod@divisor+1,f,c
  4934  00224A  3634               	rlcf	___llmod@divisor+2,f,c
  4935  00224C  3635               	rlcf	___llmod@divisor+3,f,c
  4936  00224E  2A36               	incf	___llmod@counter,f,c
  4937  002250                     l664:
  4938  002250  AE35               	btfss	___llmod@divisor+3,7,c
  4939  002252  D7F8               	goto	l665
  4940  002254                     u4020:
  4941  002254  5032               	movf	___llmod@divisor,w,c
  4942  002256  5C2E               	subwf	___llmod@dividend,w,c
  4943  002258  5033               	movf	___llmod@divisor+1,w,c
  4944  00225A  582F               	subwfb	___llmod@dividend+1,w,c
  4945  00225C  5034               	movf	___llmod@divisor+2,w,c
  4946  00225E  5830               	subwfb	___llmod@dividend+2,w,c
  4947  002260  5035               	movf	___llmod@divisor+3,w,c
  4948  002262  5831               	subwfb	___llmod@dividend+3,w,c
  4949  002264  A0D8               	btfss	status,0,c
  4950  002266  D008               	goto	l668
  4951  002268  5032               	movf	___llmod@divisor,w,c
  4952  00226A  5E2E               	subwf	___llmod@dividend,f,c
  4953  00226C  5033               	movf	___llmod@divisor+1,w,c
  4954  00226E  5A2F               	subwfb	___llmod@dividend+1,f,c
  4955  002270  5034               	movf	___llmod@divisor+2,w,c
  4956  002272  5A30               	subwfb	___llmod@dividend+2,f,c
  4957  002274  5035               	movf	___llmod@divisor+3,w,c
  4958  002276  5A31               	subwfb	___llmod@dividend+3,f,c
  4959  002278                     l668:
  4960  002278  90D8               	bcf	status,0,c
  4961  00227A  3235               	rrcf	___llmod@divisor+3,f,c
  4962  00227C  3234               	rrcf	___llmod@divisor+2,f,c
  4963  00227E  3233               	rrcf	___llmod@divisor+1,f,c
  4964  002280  3232               	rrcf	___llmod@divisor,f,c
  4965  002282  2E36               	decfsz	___llmod@counter,f,c
  4966  002284  D7E7               	goto	u4020
  4967  002286                     l669:
  4968  002286  C02E  F02E         	movff	___llmod@dividend,?___llmod
  4969  00228A  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  4970  00228E  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  4971  002292  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  4972  002296  0012               	return		;funcret
  4973  002298                     __end_of___llmod:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           indf2	equ	0xFDF
  4985                           postinc2	equ	0xFDE
  4986                           postdec2	equ	0xFDD
  4987                           fsr2h	equ	0xFDA
  4988                           fsr2l	equ	0xFD9
  4989                           status	equ	0xFD8
  4990                           
  4991 ;; *************** function ___lldiv *****************
  4992 ;; Defined at:
  4993 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  dividend        4   45[COMRAM] unsigned long 
  4996 ;;  divisor         4   49[COMRAM] unsigned long 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  quotient        4   53[COMRAM] unsigned long 
  4999 ;;  counter         1   57[COMRAM] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  4   45[COMRAM] unsigned long 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5009 ;;      Params:         8       0       0       0       0       0       0
  5010 ;;      Locals:         5       0       0       0       0       0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0
  5012 ;;      Totals:        13       0       0       0       0       0       0
  5013 ;;Total ram usage:       13 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    2
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_sprintf
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text16
  5024  002140                     __ptext16:
  5025                           	opt stack 0
  5026  002140                     ___lldiv:
  5027                           	opt stack 26
  5028                           
  5029                           ;incstack = 0
  5030  002140  0E00               	movlw	0
  5031  002142  6E36               	movwf	___lldiv@quotient,c
  5032  002144  0E00               	movlw	0
  5033  002146  6E37               	movwf	___lldiv@quotient+1,c
  5034  002148  0E00               	movlw	0
  5035  00214A  6E38               	movwf	___lldiv@quotient+2,c
  5036  00214C  0E00               	movlw	0
  5037  00214E  6E39               	movwf	___lldiv@quotient+3,c
  5038  002150  5032               	movf	___lldiv@divisor,w,c
  5039  002152  1033               	iorwf	___lldiv@divisor+1,w,c
  5040  002154  1034               	iorwf	___lldiv@divisor+2,w,c
  5041  002156  1035               	iorwf	___lldiv@divisor+3,w,c
  5042  002158  B4D8               	btfsc	status,2,c
  5043  00215A  D02A               	goto	l659
  5044  00215C  0E01               	movlw	1
  5045  00215E  6E3A               	movwf	___lldiv@counter,c
  5046  002160  D006               	goto	l654
  5047  002162  90D8               	bcf	status,0,c
  5048  002164  3632               	rlcf	___lldiv@divisor,f,c
  5049  002166  3633               	rlcf	___lldiv@divisor+1,f,c
  5050  002168  3634               	rlcf	___lldiv@divisor+2,f,c
  5051  00216A  3635               	rlcf	___lldiv@divisor+3,f,c
  5052  00216C  2A3A               	incf	___lldiv@counter,f,c
  5053  00216E                     l654:
  5054  00216E  AE35               	btfss	___lldiv@divisor+3,7,c
  5055  002170  D7F8               	goto	l655
  5056  002172                     u3990:
  5057  002172  90D8               	bcf	status,0,c
  5058  002174  3636               	rlcf	___lldiv@quotient,f,c
  5059  002176  3637               	rlcf	___lldiv@quotient+1,f,c
  5060  002178  3638               	rlcf	___lldiv@quotient+2,f,c
  5061  00217A  3639               	rlcf	___lldiv@quotient+3,f,c
  5062  00217C  5032               	movf	___lldiv@divisor,w,c
  5063  00217E  5C2E               	subwf	___lldiv@dividend,w,c
  5064  002180  5033               	movf	___lldiv@divisor+1,w,c
  5065  002182  582F               	subwfb	___lldiv@dividend+1,w,c
  5066  002184  5034               	movf	___lldiv@divisor+2,w,c
  5067  002186  5830               	subwfb	___lldiv@dividend+2,w,c
  5068  002188  5035               	movf	___lldiv@divisor+3,w,c
  5069  00218A  5831               	subwfb	___lldiv@dividend+3,w,c
  5070  00218C  A0D8               	btfss	status,0,c
  5071  00218E  D009               	goto	l658
  5072  002190  5032               	movf	___lldiv@divisor,w,c
  5073  002192  5E2E               	subwf	___lldiv@dividend,f,c
  5074  002194  5033               	movf	___lldiv@divisor+1,w,c
  5075  002196  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5076  002198  5034               	movf	___lldiv@divisor+2,w,c
  5077  00219A  5A30               	subwfb	___lldiv@dividend+2,f,c
  5078  00219C  5035               	movf	___lldiv@divisor+3,w,c
  5079  00219E  5A31               	subwfb	___lldiv@dividend+3,f,c
  5080  0021A0  8036               	bsf	___lldiv@quotient,0,c
  5081  0021A2                     l658:
  5082  0021A2  90D8               	bcf	status,0,c
  5083  0021A4  3235               	rrcf	___lldiv@divisor+3,f,c
  5084  0021A6  3234               	rrcf	___lldiv@divisor+2,f,c
  5085  0021A8  3233               	rrcf	___lldiv@divisor+1,f,c
  5086  0021AA  3232               	rrcf	___lldiv@divisor,f,c
  5087  0021AC  2E3A               	decfsz	___lldiv@counter,f,c
  5088  0021AE  D7E1               	goto	u3990
  5089  0021B0                     l659:
  5090  0021B0  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5091  0021B4  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5092  0021B8  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5093  0021BC  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5094  0021C0  0012               	return		;funcret
  5095  0021C2                     __end_of___lldiv:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function ___fttol *****************
  5114 ;; Defined at:
  5115 ;;		line 44 in file "/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  f1              3   13[BANK0 ] float 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  lval            4   23[BANK0 ] unsigned long 
  5120 ;;  exp1            1   27[BANK0 ] unsigned char 
  5121 ;;  sign1           1   22[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  4   13[BANK0 ] long 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5131 ;;      Params:         0       4       0       0       0       0       0
  5132 ;;      Locals:         0       6       0       0       0       0       0
  5133 ;;      Temps:          0       5       0       0       0       0       0
  5134 ;;      Totals:         0      15       0       0       0       0       0
  5135 ;;Total ram usage:       15 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    2
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_sprintf
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text17
  5146  001BF0                     __ptext17:
  5147                           	opt stack 0
  5148  001BF0                     ___fttol:
  5149                           	opt stack 26
  5150                           
  5151                           ;incstack = 0
  5152  001BF0  C08F  F091         	movff	___fttol@f1+2,??___fttol
  5153  001BF4  0100               	movlb	0	; () banked
  5154  001BF6  6B92               	clrf	(??___fttol+1)& (0+255),b
  5155  001BF8  6B93               	clrf	(??___fttol+2)& (0+255),b
  5156  001BFA  358E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5157  001BFC  3791               	rlcf	??___fttol& (0+255),f,b
  5158  001BFE  E301               	bnc	u3901
  5159  001C00  8192               	bsf	(??___fttol+1)& (0+255),0,b
  5160  001C02                     u3901:
  5161  001C02  5191               	movf	??___fttol& (0+255),w,b
  5162  001C04  6F9B               	movwf	___fttol@exp1& (0+255),b
  5163  001C06  519B               	movf	___fttol@exp1& (0+255),w,b
  5164  001C08  A4D8               	btfss	status,2,c
  5165  001C0A  D009               	goto	l613
  5166                           
  5167                           ; BSR set to: 0
  5168  001C0C  0E00               	movlw	0
  5169  001C0E  6F8D               	movwf	?___fttol& (0+255),b
  5170  001C10  0E00               	movlw	0
  5171  001C12  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5172  001C14  0E00               	movlw	0
  5173  001C16  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5174  001C18  0E00               	movlw	0
  5175  001C1A  6F90               	movwf	(?___fttol+3)& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178  001C1C  0012               	return	
  5179  001C1E                     l613:
  5180                           
  5181                           ; BSR set to: 0
  5182                           
  5183                           ; BSR set to: 0
  5184  001C1E  0E17               	movlw	23
  5185  001C20  6F91               	movwf	??___fttol& (0+255),b
  5186  001C22  C08D  F092         	movff	___fttol@f1,??___fttol+1
  5187  001C26  C08E  F093         	movff	___fttol@f1+1,??___fttol+2
  5188  001C2A  C08F  F094         	movff	___fttol@f1+2,??___fttol+3
  5189  001C2E  2991               	incf	??___fttol& (0+255),w,b
  5190  001C30  6F95               	movwf	(??___fttol+4)& (0+255),b
  5191  001C32  D004               	goto	u3920
  5192  001C34                     u3925:
  5193  001C34  90D8               	bcf	status,0,c
  5194  001C36  3394               	rrcf	(??___fttol+3)& (0+255),f,b
  5195  001C38  3393               	rrcf	(??___fttol+2)& (0+255),f,b
  5196  001C3A  3392               	rrcf	(??___fttol+1)& (0+255),f,b
  5197  001C3C                     u3920:
  5198  001C3C  2F95               	decfsz	(??___fttol+4)& (0+255),f,b
  5199  001C3E  D7FA               	goto	u3925
  5200  001C40  0100               	movlb	0	; () banked
  5201  001C42  5192               	movf	(??___fttol+1)& (0+255),w,b
  5202  001C44  6F96               	movwf	___fttol@sign1& (0+255),b
  5203                           
  5204                           ; BSR set to: 0
  5205  001C46  8F8E               	bsf	(___fttol@f1+1)& (0+255),7,b
  5206                           
  5207                           ; BSR set to: 0
  5208  001C48  0EFF               	movlw	255
  5209  001C4A  178D               	andwf	___fttol@f1& (0+255),f,b
  5210  001C4C  0EFF               	movlw	255
  5211  001C4E  178E               	andwf	(___fttol@f1+1)& (0+255),f,b
  5212  001C50  0E00               	movlw	0
  5213  001C52  178F               	andwf	(___fttol@f1+2)& (0+255),f,b
  5214                           
  5215                           ; BSR set to: 0
  5216  001C54  518D               	movf	___fttol@f1& (0+255),w,b
  5217  001C56  6F97               	movwf	___fttol@lval& (0+255),b
  5218  001C58  518E               	movf	(___fttol@f1+1)& (0+255),w,b
  5219  001C5A  6F98               	movwf	(___fttol@lval+1)& (0+255),b
  5220  001C5C  518F               	movf	(___fttol@f1+2)& (0+255),w,b
  5221  001C5E  6F99               	movwf	(___fttol@lval+2)& (0+255),b
  5222  001C60  6B9A               	clrf	(___fttol@lval+3)& (0+255),b
  5223                           
  5224                           ; BSR set to: 0
  5225  001C62  0E8E               	movlw	142
  5226  001C64  5F9B               	subwf	___fttol@exp1& (0+255),f,b
  5227                           
  5228                           ; BSR set to: 0
  5229  001C66  AF9B               	btfss	___fttol@exp1& (0+255),7,b
  5230  001C68  D016               	goto	l615
  5231                           
  5232                           ; BSR set to: 0
  5233  001C6A  519B               	movf	___fttol@exp1& (0+255),w,b
  5234  001C6C  0A80               	xorlw	128
  5235  001C6E  0F8F               	addlw	143
  5236  001C70  B0D8               	btfsc	status,0,c
  5237  001C72  D009               	goto	l616
  5238                           
  5239                           ; BSR set to: 0
  5240  001C74  0E00               	movlw	0
  5241  001C76  6F8D               	movwf	?___fttol& (0+255),b
  5242  001C78  0E00               	movlw	0
  5243  001C7A  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5244  001C7C  0E00               	movlw	0
  5245  001C7E  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5246  001C80  0E00               	movlw	0
  5247  001C82  6F90               	movwf	(?___fttol+3)& (0+255),b
  5248                           
  5249                           ; BSR set to: 0
  5250  001C84  0012               	return	
  5251  001C86                     l616:
  5252                           
  5253                           ; BSR set to: 0
  5254                           
  5255                           ; BSR set to: 0
  5256                           
  5257                           ; BSR set to: 0
  5258  001C86  90D8               	bcf	status,0,c
  5259  001C88  339A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5260  001C8A  3399               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5261  001C8C  3398               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5262  001C8E  3397               	rrcf	___fttol@lval& (0+255),f,b
  5263                           
  5264                           ; BSR set to: 0
  5265  001C90  3F9B               	incfsz	___fttol@exp1& (0+255),f,b
  5266  001C92  D7F9               	goto	l616
  5267                           
  5268                           ; BSR set to: 0
  5269  001C94  D015               	goto	u3960
  5270  001C96                     l615:
  5271                           
  5272                           ; BSR set to: 0
  5273                           
  5274                           ; BSR set to: 0
  5275  001C96  0E17               	movlw	23
  5276  001C98  659B               	cpfsgt	___fttol@exp1& (0+255),b
  5277  001C9A  D00F               	goto	l621
  5278                           
  5279                           ; BSR set to: 0
  5280  001C9C  0E00               	movlw	0
  5281  001C9E  6F8D               	movwf	?___fttol& (0+255),b
  5282  001CA0  0E00               	movlw	0
  5283  001CA2  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5284  001CA4  0E00               	movlw	0
  5285  001CA6  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5286  001CA8  0E00               	movlw	0
  5287  001CAA  6F90               	movwf	(?___fttol+3)& (0+255),b
  5288                           
  5289                           ; BSR set to: 0
  5290  001CAC  0012               	return	
  5291  001CAE                     
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  001CAE  90D8               	bcf	status,0,c
  5296  001CB0  3797               	rlcf	___fttol@lval& (0+255),f,b
  5297  001CB2  3798               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5298  001CB4  3799               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5299  001CB6  379A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5300  001CB8  079B               	decf	___fttol@exp1& (0+255),f,b
  5301  001CBA                     l621:
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  001CBA  519B               	movf	___fttol@exp1& (0+255),w,b
  5307  001CBC  A4D8               	btfss	status,2,c
  5308  001CBE  D7F7               	goto	l622
  5309  001CC0                     u3960:
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314                           
  5315                           ; BSR set to: 0
  5316  001CC0  5196               	movf	___fttol@sign1& (0+255),w,b
  5317  001CC2  B4D8               	btfsc	status,2,c
  5318  001CC4  D008               	goto	l624
  5319                           
  5320                           ; BSR set to: 0
  5321  001CC6  1F9A               	comf	(___fttol@lval+3)& (0+255),f,b
  5322  001CC8  1F99               	comf	(___fttol@lval+2)& (0+255),f,b
  5323  001CCA  1F98               	comf	(___fttol@lval+1)& (0+255),f,b
  5324  001CCC  6D97               	negf	___fttol@lval& (0+255),b
  5325  001CCE  0E00               	movlw	0
  5326  001CD0  2398               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5327  001CD2  2399               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5328  001CD4  239A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5329  001CD6                     l624:
  5330                           
  5331                           ; BSR set to: 0
  5332                           
  5333                           ; BSR set to: 0
  5334  001CD6  C097  F08D         	movff	___fttol@lval,?___fttol
  5335  001CDA  C098  F08E         	movff	___fttol@lval+1,?___fttol+1
  5336  001CDE  C099  F08F         	movff	___fttol@lval+2,?___fttol+2
  5337  001CE2  C09A  F090         	movff	___fttol@lval+3,?___fttol+3
  5338  001CE6  0012               	return	
  5339  001CE8                     __end_of___fttol:
  5340                           	opt stack 0
  5341                           tblptru	equ	0xFF8
  5342                           tblptrh	equ	0xFF7
  5343                           tblptrl	equ	0xFF6
  5344                           tablat	equ	0xFF5
  5345                           prodh	equ	0xFF4
  5346                           prodl	equ	0xFF3
  5347                           intcon	equ	0xFF2
  5348                           postinc0	equ	0xFEE
  5349                           wreg	equ	0xFE8
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function ___ftsub *****************
  5358 ;; Defined at:
  5359 ;;		line 20 in file "/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  f1              3   28[BANK0 ] float 
  5362 ;;  f2              3   31[BANK0 ] float 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  3   28[BANK0 ] float 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5374 ;;      Params:         0       6       0       0       0       0       0
  5375 ;;      Locals:         0       0       0       0       0       0       0
  5376 ;;      Temps:          0       0       0       0       0       0       0
  5377 ;;      Totals:         0       6       0       0       0       0       0
  5378 ;;Total ram usage:        6 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    4
  5381 ;; This function calls:
  5382 ;;		___ftadd
  5383 ;; This function is called by:
  5384 ;;		_sprintf
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text18
  5389  002424                     __ptext18:
  5390                           	opt stack 0
  5391  002424                     ___ftsub:
  5392                           	opt stack 24
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;incstack = 0
  5396  002424  0100               	movlb	0	; () banked
  5397  002426  519F               	movf	___ftsub@f2& (0+255),w,b
  5398  002428  11A0               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5399  00242A  11A1               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5400  00242C  B4D8               	btfsc	status,2,c
  5401  00242E  D006               	goto	l609
  5402                           
  5403                           ; BSR set to: 0
  5404  002430  0E00               	movlw	0
  5405  002432  1B9F               	xorwf	___ftsub@f2& (0+255),f,b
  5406  002434  0E00               	movlw	0
  5407  002436  1BA0               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5408  002438  0E80               	movlw	128
  5409  00243A  1BA1               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5410  00243C                     l609:
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ; BSR set to: 0
  5415  00243C  C09C  F090         	movff	___ftsub@f1,___ftadd@f1
  5416  002440  C09D  F091         	movff	___ftsub@f1+1,___ftadd@f1+1
  5417  002444  C09E  F092         	movff	___ftsub@f1+2,___ftadd@f1+2
  5418  002448  C09F  F093         	movff	___ftsub@f2,___ftadd@f2
  5419  00244C  C0A0  F094         	movff	___ftsub@f2+1,___ftadd@f2+1
  5420  002450  C0A1  F095         	movff	___ftsub@f2+2,___ftadd@f2+2
  5421  002454  ECD0  F00A         	call	___ftadd	;wreg free
  5422  002458  C090  F09C         	movff	?___ftadd,?___ftsub
  5423  00245C  C091  F09D         	movff	?___ftadd+1,?___ftsub+1
  5424  002460  C092  F09E         	movff	?___ftadd+2,?___ftsub+2
  5425  002464  0012               	return	
  5426  002466                     __end_of___ftsub:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function ___ftadd *****************
  5445 ;; Defined at:
  5446 ;;		line 86 in file "/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  f1              3   16[BANK0 ] float 
  5449 ;;  f2              3   19[BANK0 ] float 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  exp1            1   27[BANK0 ] unsigned char 
  5452 ;;  exp2            1   26[BANK0 ] unsigned char 
  5453 ;;  sign            1   25[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  3   16[BANK0 ] float 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5463 ;;      Params:         0       6       0       0       0       0       0
  5464 ;;      Locals:         0       3       0       0       0       0       0
  5465 ;;      Temps:          0       3       0       0       0       0       0
  5466 ;;      Totals:         0      12       0       0       0       0       0
  5467 ;;Total ram usage:       12 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    3
  5470 ;; This function calls:
  5471 ;;		___ftpack
  5472 ;; This function is called by:
  5473 ;;		_sprintf
  5474 ;;		___ftsub
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text19
  5479  0015A0                     __ptext19:
  5480                           	opt stack 0
  5481  0015A0                     ___ftadd:
  5482                           	opt stack 24
  5483                           
  5484                           ;incstack = 0
  5485  0015A0  C092  F096         	movff	___ftadd@f1+2,??___ftadd
  5486  0015A4  0100               	movlb	0	; () banked
  5487  0015A6  6B97               	clrf	(??___ftadd+1)& (0+255),b
  5488  0015A8  6B98               	clrf	(??___ftadd+2)& (0+255),b
  5489  0015AA  3591               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5490  0015AC  3796               	rlcf	??___ftadd& (0+255),f,b
  5491  0015AE  E301               	bnc	u3211
  5492  0015B0  8197               	bsf	(??___ftadd+1)& (0+255),0,b
  5493  0015B2                     u3211:
  5494  0015B2  5196               	movf	??___ftadd& (0+255),w,b
  5495  0015B4  6F9B               	movwf	___ftadd@exp1& (0+255),b
  5496  0015B6  C095  F096         	movff	___ftadd@f2+2,??___ftadd
  5497  0015BA  6B97               	clrf	(??___ftadd+1)& (0+255),b
  5498  0015BC  6B98               	clrf	(??___ftadd+2)& (0+255),b
  5499  0015BE  3594               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5500  0015C0  3796               	rlcf	??___ftadd& (0+255),f,b
  5501  0015C2  E301               	bnc	u3221
  5502  0015C4  8197               	bsf	(??___ftadd+1)& (0+255),0,b
  5503  0015C6                     u3221:
  5504  0015C6  5196               	movf	??___ftadd& (0+255),w,b
  5505  0015C8  6F9A               	movwf	___ftadd@exp2& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508  0015CA  519B               	movf	___ftadd@exp1& (0+255),w,b
  5509  0015CC  B4D8               	btfsc	status,2,c
  5510  0015CE  D00B               	goto	u3250
  5511                           
  5512                           ; BSR set to: 0
  5513  0015D0  519A               	movf	___ftadd@exp2& (0+255),w,b
  5514  0015D2  5D9B               	subwf	___ftadd@exp1& (0+255),w,b
  5515  0015D4  B0D8               	btfsc	status,0,c
  5516  0015D6  D00E               	goto	l527
  5517                           
  5518                           ; BSR set to: 0
  5519  0015D8  519B               	movf	___ftadd@exp1& (0+255),w,b
  5520  0015DA  0800               	sublw	0
  5521  0015DC  259A               	addwf	___ftadd@exp2& (0+255),w,b
  5522  0015DE  6F96               	movwf	??___ftadd& (0+255),b
  5523  0015E0  0E18               	movlw	24
  5524  0015E2  6596               	cpfsgt	??___ftadd& (0+255),b
  5525  0015E4  D007               	goto	l527
  5526  0015E6                     u3250:
  5527                           
  5528                           ; BSR set to: 0
  5529  0015E6  C093  F090         	movff	___ftadd@f2,?___ftadd
  5530  0015EA  C094  F091         	movff	___ftadd@f2+1,?___ftadd+1
  5531  0015EE  C095  F092         	movff	___ftadd@f2+2,?___ftadd+2
  5532  0015F2  0012               	return	
  5533  0015F4                     l527:
  5534                           
  5535                           ; BSR set to: 0
  5536                           
  5537                           ; BSR set to: 0
  5538  0015F4  519A               	movf	___ftadd@exp2& (0+255),w,b
  5539  0015F6  B4D8               	btfsc	status,2,c
  5540  0015F8  D00B               	goto	u3280
  5541                           
  5542                           ; BSR set to: 0
  5543  0015FA  519B               	movf	___ftadd@exp1& (0+255),w,b
  5544  0015FC  5D9A               	subwf	___ftadd@exp2& (0+255),w,b
  5545  0015FE  B0D8               	btfsc	status,0,c
  5546  001600  D00E               	goto	l531
  5547                           
  5548                           ; BSR set to: 0
  5549  001602  519A               	movf	___ftadd@exp2& (0+255),w,b
  5550  001604  0800               	sublw	0
  5551  001606  259B               	addwf	___ftadd@exp1& (0+255),w,b
  5552  001608  6F96               	movwf	??___ftadd& (0+255),b
  5553  00160A  0E18               	movlw	24
  5554  00160C  6596               	cpfsgt	??___ftadd& (0+255),b
  5555  00160E  D007               	goto	l531
  5556  001610                     u3280:
  5557                           
  5558                           ; BSR set to: 0
  5559  001610  C090  F090         	movff	___ftadd@f1,?___ftadd
  5560  001614  C091  F091         	movff	___ftadd@f1+1,?___ftadd+1
  5561  001618  C092  F092         	movff	___ftadd@f1+2,?___ftadd+2
  5562  00161C  0012               	return	
  5563  00161E                     l531:
  5564                           
  5565                           ; BSR set to: 0
  5566                           
  5567                           ; BSR set to: 0
  5568  00161E  0E06               	movlw	6
  5569  001620  6F99               	movwf	___ftadd@sign& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572  001622  BF92               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5573                           
  5574                           ; BSR set to: 0
  5575  001624  8F99               	bsf	___ftadd@sign& (0+255),7,b
  5576                           
  5577                           ; BSR set to: 0
  5578                           
  5579                           ; BSR set to: 0
  5580  001626  BF95               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5581                           
  5582                           ; BSR set to: 0
  5583  001628  8D99               	bsf	___ftadd@sign& (0+255),6,b
  5584                           
  5585                           ; BSR set to: 0
  5586  00162A  8F91               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5587                           
  5588                           ; BSR set to: 0
  5589  00162C  0EFF               	movlw	255
  5590  00162E  1790               	andwf	___ftadd@f1& (0+255),f,b
  5591  001630  0EFF               	movlw	255
  5592  001632  1791               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5593  001634  0E00               	movlw	0
  5594  001636  1792               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5595  001638  8F94               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5596                           
  5597                           ; BSR set to: 0
  5598  00163A  0EFF               	movlw	255
  5599  00163C  1793               	andwf	___ftadd@f2& (0+255),f,b
  5600  00163E  0EFF               	movlw	255
  5601  001640  1794               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5602  001642  0E00               	movlw	0
  5603  001644  1795               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5604                           
  5605                           ; BSR set to: 0
  5606  001646  519A               	movf	___ftadd@exp2& (0+255),w,b
  5607  001648  5D9B               	subwf	___ftadd@exp1& (0+255),w,b
  5608  00164A  B0D8               	btfsc	status,0,c
  5609  00164C  D01B               	goto	l536
  5610  00164E                     u3310:
  5611                           
  5612                           ; BSR set to: 0
  5613                           
  5614                           ; BSR set to: 0
  5615  00164E  90D8               	bcf	status,0,c
  5616  001650  3793               	rlcf	___ftadd@f2& (0+255),f,b
  5617  001652  3794               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5618  001654  3795               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5619  001656  079A               	decf	___ftadd@exp2& (0+255),f,b
  5620                           
  5621                           ; BSR set to: 0
  5622  001658  519B               	movf	___ftadd@exp1& (0+255),w,b
  5623  00165A  199A               	xorwf	___ftadd@exp2& (0+255),w,b
  5624  00165C  B4D8               	btfsc	status,2,c
  5625  00165E  D00D               	goto	l541
  5626                           
  5627                           ; BSR set to: 0
  5628  001660  0799               	decf	___ftadd@sign& (0+255),f,b
  5629  001662  C099  F096         	movff	___ftadd@sign,??___ftadd
  5630  001666  0E07               	movlw	7
  5631  001668  1796               	andwf	??___ftadd& (0+255),f,b
  5632  00166A  B4D8               	btfsc	status,2,c
  5633  00166C  D006               	goto	l541
  5634  00166E  D7EF               	goto	u3310
  5635  001670                     
  5636                           ; BSR set to: 0
  5637                           
  5638                           ; BSR set to: 0
  5639  001670  90D8               	bcf	status,0,c
  5640  001672  3392               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5641  001674  3391               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5642  001676  3390               	rrcf	___ftadd@f1& (0+255),f,b
  5643  001678  2B9B               	incf	___ftadd@exp1& (0+255),f,b
  5644  00167A                     l541:
  5645                           
  5646                           ; BSR set to: 0
  5647                           
  5648                           ; BSR set to: 0
  5649  00167A  519A               	movf	___ftadd@exp2& (0+255),w,b
  5650  00167C  199B               	xorwf	___ftadd@exp1& (0+255),w,b
  5651  00167E  B4D8               	btfsc	status,2,c
  5652  001680  D01F               	goto	u3380
  5653  001682  D7F6               	goto	l542
  5654  001684                     l536:
  5655                           
  5656                           ; BSR set to: 0
  5657                           
  5658                           ; BSR set to: 0
  5659  001684  519B               	movf	___ftadd@exp1& (0+255),w,b
  5660  001686  5D9A               	subwf	___ftadd@exp2& (0+255),w,b
  5661  001688  B0D8               	btfsc	status,0,c
  5662  00168A  D01A               	goto	u3380
  5663  00168C                     u3350:
  5664                           
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668  00168C  90D8               	bcf	status,0,c
  5669  00168E  3790               	rlcf	___ftadd@f1& (0+255),f,b
  5670  001690  3791               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5671  001692  3792               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5672  001694  079B               	decf	___ftadd@exp1& (0+255),f,b
  5673                           
  5674                           ; BSR set to: 0
  5675  001696  519B               	movf	___ftadd@exp1& (0+255),w,b
  5676  001698  199A               	xorwf	___ftadd@exp2& (0+255),w,b
  5677  00169A  B4D8               	btfsc	status,2,c
  5678  00169C  D00D               	goto	l550
  5679                           
  5680                           ; BSR set to: 0
  5681  00169E  0799               	decf	___ftadd@sign& (0+255),f,b
  5682  0016A0  C099  F096         	movff	___ftadd@sign,??___ftadd
  5683  0016A4  0E07               	movlw	7
  5684  0016A6  1796               	andwf	??___ftadd& (0+255),f,b
  5685  0016A8  B4D8               	btfsc	status,2,c
  5686  0016AA  D006               	goto	l550
  5687  0016AC  D7EF               	goto	u3350
  5688  0016AE                     
  5689                           ; BSR set to: 0
  5690                           
  5691                           ; BSR set to: 0
  5692  0016AE  90D8               	bcf	status,0,c
  5693  0016B0  3395               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5694  0016B2  3394               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5695  0016B4  3393               	rrcf	___ftadd@f2& (0+255),f,b
  5696  0016B6  2B9A               	incf	___ftadd@exp2& (0+255),f,b
  5697  0016B8                     l550:
  5698                           
  5699                           ; BSR set to: 0
  5700                           
  5701                           ; BSR set to: 0
  5702  0016B8  519A               	movf	___ftadd@exp2& (0+255),w,b
  5703  0016BA  199B               	xorwf	___ftadd@exp1& (0+255),w,b
  5704  0016BC  A4D8               	btfss	status,2,c
  5705  0016BE  D7F7               	goto	l551
  5706  0016C0                     u3380:
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711                           
  5712                           ; BSR set to: 0
  5713  0016C0  AF99               	btfss	___ftadd@sign& (0+255),7,b
  5714  0016C2  D00C               	goto	l553
  5715                           
  5716                           ; BSR set to: 0
  5717  0016C4  0EFF               	movlw	255
  5718  0016C6  1B90               	xorwf	___ftadd@f1& (0+255),f,b
  5719  0016C8  0EFF               	movlw	255
  5720  0016CA  1B91               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5721  0016CC  0EFF               	movlw	255
  5722  0016CE  1B92               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5723  0016D0  0E01               	movlw	1
  5724  0016D2  2790               	addwf	___ftadd@f1& (0+255),f,b
  5725  0016D4  0E00               	movlw	0
  5726  0016D6  2391               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5727  0016D8  0E00               	movlw	0
  5728  0016DA  2392               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5729  0016DC                     l553:
  5730                           
  5731                           ; BSR set to: 0
  5732  0016DC  AD99               	btfss	___ftadd@sign& (0+255),6,b
  5733  0016DE  D00C               	goto	l554
  5734                           
  5735                           ; BSR set to: 0
  5736  0016E0  0EFF               	movlw	255
  5737  0016E2  1B93               	xorwf	___ftadd@f2& (0+255),f,b
  5738  0016E4  0EFF               	movlw	255
  5739  0016E6  1B94               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5740  0016E8  0EFF               	movlw	255
  5741  0016EA  1B95               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5742  0016EC  0E01               	movlw	1
  5743  0016EE  2793               	addwf	___ftadd@f2& (0+255),f,b
  5744  0016F0  0E00               	movlw	0
  5745  0016F2  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5746  0016F4  0E00               	movlw	0
  5747  0016F6  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5748  0016F8                     l554:
  5749                           
  5750                           ; BSR set to: 0
  5751                           
  5752                           ; BSR set to: 0
  5753  0016F8  0E00               	movlw	0
  5754  0016FA  6F99               	movwf	___ftadd@sign& (0+255),b
  5755                           
  5756                           ; BSR set to: 0
  5757  0016FC  5190               	movf	___ftadd@f1& (0+255),w,b
  5758  0016FE  2793               	addwf	___ftadd@f2& (0+255),f,b
  5759  001700  5191               	movf	(___ftadd@f1+1)& (0+255),w,b
  5760  001702  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5761  001704  5192               	movf	(___ftadd@f1+2)& (0+255),w,b
  5762  001706  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5763                           
  5764                           ; BSR set to: 0
  5765  001708  AF95               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5766  00170A  D00E               	goto	l555
  5767                           
  5768                           ; BSR set to: 0
  5769  00170C  0EFF               	movlw	255
  5770  00170E  1B93               	xorwf	___ftadd@f2& (0+255),f,b
  5771  001710  0EFF               	movlw	255
  5772  001712  1B94               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5773  001714  0EFF               	movlw	255
  5774  001716  1B95               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5775  001718  0E01               	movlw	1
  5776  00171A  2793               	addwf	___ftadd@f2& (0+255),f,b
  5777  00171C  0E00               	movlw	0
  5778  00171E  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5779  001720  0E00               	movlw	0
  5780  001722  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5781                           
  5782                           ; BSR set to: 0
  5783  001724  0E01               	movlw	1
  5784  001726  6F99               	movwf	___ftadd@sign& (0+255),b
  5785  001728                     l555:
  5786                           
  5787                           ; BSR set to: 0
  5788                           
  5789                           ; BSR set to: 0
  5790  001728  C093  F02E         	movff	___ftadd@f2,___ftpack@arg
  5791  00172C  C094  F02F         	movff	___ftadd@f2+1,___ftpack@arg+1
  5792  001730  C095  F030         	movff	___ftadd@f2+2,___ftpack@arg+2
  5793  001734  C09B  F031         	movff	___ftadd@exp1,___ftpack@exp
  5794  001738  C099  F032         	movff	___ftadd@sign,___ftpack@sign
  5795  00173C  ECBF  F00F         	call	___ftpack	;wreg free
  5796  001740  C02E  F090         	movff	?___ftpack,?___ftadd
  5797  001744  C02F  F091         	movff	?___ftpack+1,?___ftadd+1
  5798  001748  C030  F092         	movff	?___ftpack+2,?___ftadd+2
  5799  00174C  0012               	return	
  5800  00174E                     __end_of___ftadd:
  5801                           	opt stack 0
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           intcon	equ	0xFF2
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function ___ftneg *****************
  5819 ;; Defined at:
  5820 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  f1              3   45[COMRAM] float 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  3   45[COMRAM] float 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5834 ;;      Params:         3       0       0       0       0       0       0
  5835 ;;      Locals:         0       0       0       0       0       0       0
  5836 ;;      Temps:          0       0       0       0       0       0       0
  5837 ;;      Totals:         3       0       0       0       0       0       0
  5838 ;;Total ram usage:        3 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    2
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_sprintf
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text20
  5849  00254C                     __ptext20:
  5850                           	opt stack 0
  5851  00254C                     ___ftneg:
  5852                           	opt stack 26
  5853                           
  5854                           ;incstack = 0
  5855  00254C  502E               	movf	___ftneg@f1,w,c
  5856  00254E  102F               	iorwf	___ftneg@f1+1,w,c
  5857  002550  1030               	iorwf	___ftneg@f1+2,w,c
  5858  002552  B4D8               	btfsc	status,2,c
  5859  002554  D006               	goto	l603
  5860  002556  0E00               	movlw	0
  5861  002558  1A2E               	xorwf	___ftneg@f1,f,c
  5862  00255A  0E00               	movlw	0
  5863  00255C  1A2F               	xorwf	___ftneg@f1+1,f,c
  5864  00255E  0E80               	movlw	128
  5865  002560  1A30               	xorwf	___ftneg@f1+2,f,c
  5866  002562                     l603:
  5867  002562  C02E  F02E         	movff	___ftneg@f1,?___ftneg
  5868  002566  C02F  F02F         	movff	___ftneg@f1+1,?___ftneg+1
  5869  00256A  C030  F030         	movff	___ftneg@f1+2,?___ftneg+2
  5870  00256E  0012               	return		;funcret
  5871  002570                     __end_of___ftneg:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function ___ftge *****************
  5890 ;; Defined at:
  5891 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  ff1             3   45[COMRAM] float 
  5894 ;;  ff2             3   48[COMRAM] float 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;		None
  5897 ;; Return value:  Size  Location     Type
  5898 ;;		None               void
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5906 ;;      Params:         6       0       0       0       0       0       0
  5907 ;;      Locals:         0       0       0       0       0       0       0
  5908 ;;      Temps:          3       0       0       0       0       0       0
  5909 ;;      Totals:         9       0       0       0       0       0       0
  5910 ;;Total ram usage:        9 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    2
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_sprintf
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text21
  5921  00202C                     __ptext21:
  5922                           	opt stack 0
  5923  00202C                     ___ftge:
  5924                           	opt stack 26
  5925                           
  5926                           ;incstack = 0
  5927  00202C  AE30               	btfss	___ftge@ff1+2,7,c
  5928  00202E  D016               	goto	l585
  5929  002030  C02E  F034         	movff	___ftge@ff1,??___ftge
  5930  002034  C02F  F035         	movff	___ftge@ff1+1,??___ftge+1
  5931  002038  C030  F036         	movff	___ftge@ff1+2,??___ftge+2
  5932  00203C  1E34               	comf	??___ftge,f,c
  5933  00203E  1E35               	comf	??___ftge+1,f,c
  5934  002040  1E36               	comf	??___ftge+2,f,c
  5935  002042  2A34               	incf	??___ftge,f,c
  5936  002044  0E00               	movlw	0
  5937  002046  2235               	addwfc	??___ftge+1,f,c
  5938  002048  2236               	addwfc	??___ftge+2,f,c
  5939  00204A  0E00               	movlw	0
  5940  00204C  2434               	addwf	??___ftge,w,c
  5941  00204E  6E2E               	movwf	___ftge@ff1,c
  5942  002050  0E00               	movlw	0
  5943  002052  2035               	addwfc	??___ftge+1,w,c
  5944  002054  6E2F               	movwf	___ftge@ff1+1,c
  5945  002056  0E80               	movlw	128
  5946  002058  2036               	addwfc	??___ftge+2,w,c
  5947  00205A  6E30               	movwf	___ftge@ff1+2,c
  5948  00205C                     l585:
  5949  00205C  AE33               	btfss	___ftge@ff2+2,7,c
  5950  00205E  D016               	goto	l586
  5951  002060  C031  F034         	movff	___ftge@ff2,??___ftge
  5952  002064  C032  F035         	movff	___ftge@ff2+1,??___ftge+1
  5953  002068  C033  F036         	movff	___ftge@ff2+2,??___ftge+2
  5954  00206C  1E34               	comf	??___ftge,f,c
  5955  00206E  1E35               	comf	??___ftge+1,f,c
  5956  002070  1E36               	comf	??___ftge+2,f,c
  5957  002072  2A34               	incf	??___ftge,f,c
  5958  002074  0E00               	movlw	0
  5959  002076  2235               	addwfc	??___ftge+1,f,c
  5960  002078  2236               	addwfc	??___ftge+2,f,c
  5961  00207A  0E00               	movlw	0
  5962  00207C  2434               	addwf	??___ftge,w,c
  5963  00207E  6E31               	movwf	___ftge@ff2,c
  5964  002080  0E00               	movlw	0
  5965  002082  2035               	addwfc	??___ftge+1,w,c
  5966  002084  6E32               	movwf	___ftge@ff2+1,c
  5967  002086  0E80               	movlw	128
  5968  002088  2036               	addwfc	??___ftge+2,w,c
  5969  00208A  6E33               	movwf	___ftge@ff2+2,c
  5970  00208C                     l586:
  5971  00208C  0E00               	movlw	0
  5972  00208E  1A2E               	xorwf	___ftge@ff1,f,c
  5973  002090  0E00               	movlw	0
  5974  002092  1A2F               	xorwf	___ftge@ff1+1,f,c
  5975  002094  0E80               	movlw	128
  5976  002096  1A30               	xorwf	___ftge@ff1+2,f,c
  5977  002098  0E00               	movlw	0
  5978  00209A  1A31               	xorwf	___ftge@ff2,f,c
  5979  00209C  0E00               	movlw	0
  5980  00209E  1A32               	xorwf	___ftge@ff2+1,f,c
  5981  0020A0  0E80               	movlw	128
  5982  0020A2  1A33               	xorwf	___ftge@ff2+2,f,c
  5983  0020A4  5031               	movf	___ftge@ff2,w,c
  5984  0020A6  5C2E               	subwf	___ftge@ff1,w,c
  5985  0020A8  5032               	movf	___ftge@ff2+1,w,c
  5986  0020AA  582F               	subwfb	___ftge@ff1+1,w,c
  5987  0020AC  5033               	movf	___ftge@ff2+2,w,c
  5988  0020AE  5830               	subwfb	___ftge@ff1+2,w,c
  5989  0020B0  B0D8               	btfsc	status,0,c
  5990  0020B2  D002               	goto	l3169
  5991  0020B4  90D8               	bcf	status,0,c
  5992  0020B6  0012               	return	
  5993  0020B8                     l3169:
  5994  0020B8  80D8               	bsf	status,0,c
  5995  0020BA  0012               	return	
  5996  0020BC                     __end_of___ftge:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           prodh	equ	0xFF4
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           indf2	equ	0xFDF
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function _prepareForInterrupts *****************
  6015 ;; Defined at:
  6016 ;;		line 180 in file "color_1.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      void 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6030 ;;      Params:         0       0       0       0       0       0       0
  6031 ;;      Locals:         0       0       0       0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0
  6033 ;;      Totals:         0       0       0       0       0       0       0
  6034 ;;Total ram usage:        0 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    2
  6037 ;; This function calls:
  6038 ;;		Nothing
  6039 ;; This function is called by:
  6040 ;;		_main
  6041 ;;		_calcula
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text22
  6046  0025BE                     __ptext22:
  6047                           	opt stack 0
  6048  0025BE                     _prepareForInterrupts:
  6049                           	opt stack 28
  6050                           
  6051                           ;color_1.c: 184: first = true;
  6052                           
  6053                           ;color_1.c: 183: INT0IF == 0;
  6054                           
  6055                           ;incstack = 0
  6056  0025BE  0E01               	movlw	1
  6057  0025C0  6E51               	movwf	_first,c	;volatile
  6058                           
  6059                           ;color_1.c: 185: triggered = false;
  6060  0025C2  0E00               	movlw	0
  6061  0025C4  6E50               	movwf	_triggered,c	;volatile
  6062                           
  6063                           ;color_1.c: 190: INT0IE = 1;
  6064  0025C6  88F2               	bsf	intcon,4,c	;volatile
  6065                           
  6066                           ;color_1.c: 191: INTEDG0 = 1;
  6067  0025C8  8CF1               	bsf	intcon2,6,c	;volatile
  6068  0025CA  0012               	return		;funcret
  6069  0025CC                     __end_of_prepareForInterrupts:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _lcd_msg *****************
  6089 ;; Defined at:
  6090 ;;		line 101 in file "../MyLibs/lcd4a.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  c               2   49[COMRAM] PTR unsigned char 
  6093 ;;		 -> value(8), STR_2(3), STR_1(11), 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;		None
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6105 ;;      Params:         2       0       0       0       0       0       0
  6106 ;;      Locals:         0       0       0       0       0       0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0
  6108 ;;      Totals:         2       0       0       0       0       0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    5
  6112 ;; This function calls:
  6113 ;;		_lcd_putc
  6114 ;; This function is called by:
  6115 ;;		_main
  6116 ;;		_calcula
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text23
  6121  0022F4                     __ptext23:
  6122                           	opt stack 0
  6123  0022F4                     _lcd_msg:
  6124                           	opt stack 25
  6125                           
  6126                           ;lcd4a.c: 103: while(*c != 0)
  6127                           
  6128                           ;incstack = 0
  6129  0022F4  D014               	goto	l121
  6130  0022F6                     
  6131                           ;lcd4a.c: 104: {
  6132                           ;lcd4a.c: 105: lcd_putc(*c++);
  6133  0022F6  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6134  0022FA  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6135  0022FE  6AF8               	clrf	tblptru,c
  6136  002300  0E05               	movlw	(high __ramtop+-1)
  6137  002302  64F7               	cpfsgt	tblptrh,c
  6138  002304  D003               	bra	u4057
  6139  002306  0008               	tblrd		*
  6140  002308  50F5               	movf	tablat,w,c
  6141  00230A  D005               	bra	u4050
  6142  00230C                     u4057:
  6143  00230C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6144  002310  CFF7 FFEA          	movff	tblptrh,fsr0h
  6145  002314  50EF               	movf	indf0,w,c
  6146  002316                     u4050:
  6147  002316  EC33  F012         	call	_lcd_putc
  6148  00231A  4A32               	infsnz	lcd_msg@c,f,c
  6149  00231C  2A33               	incf	lcd_msg@c+1,f,c
  6150  00231E                     l121:
  6151  00231E  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6152  002322  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6153  002326  6AF8               	clrf	tblptru,c
  6154  002328  0E05               	movlw	(high __ramtop+-1)
  6155  00232A  64F7               	cpfsgt	tblptrh,c
  6156  00232C  D003               	bra	u4067
  6157  00232E  0008               	tblrd		*
  6158  002330  50F5               	movf	tablat,w,c
  6159  002332  D005               	bra	u4060
  6160  002334                     u4067:
  6161  002334  CFF6 FFE9          	movff	tblptrl,fsr0l
  6162  002338  CFF7 FFEA          	movff	tblptrh,fsr0h
  6163  00233C  50EF               	movf	indf0,w,c
  6164  00233E                     u4060:
  6165  00233E  0900               	iorlw	0
  6166  002340  B4D8               	btfsc	status,2,c
  6167  002342  0012               	return	
  6168  002344  D7D8               	goto	l122
  6169  002346                     __end_of_lcd_msg:
  6170                           	opt stack 0
  6171                           tblptru	equ	0xFF8
  6172                           tblptrh	equ	0xFF7
  6173                           tblptrl	equ	0xFF6
  6174                           tablat	equ	0xFF5
  6175                           prodh	equ	0xFF4
  6176                           prodl	equ	0xFF3
  6177                           intcon	equ	0xFF2
  6178                           intcon2	equ	0xFF1
  6179                           indf0	equ	0xFEF
  6180                           postinc0	equ	0xFEE
  6181                           fsr0h	equ	0xFEA
  6182                           fsr0l	equ	0xFE9
  6183                           wreg	equ	0xFE8
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           fsr2h	equ	0xFDA
  6188                           fsr2l	equ	0xFD9
  6189                           status	equ	0xFD8
  6190                           
  6191 ;; *************** function _lcd_putc *****************
  6192 ;; Defined at:
  6193 ;;		line 66 in file "../MyLibs/lcd4a.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  c               1    wreg     unsigned char 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  c               1   48[COMRAM] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6207 ;;      Params:         0       0       0       0       0       0       0
  6208 ;;      Locals:         1       0       0       0       0       0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0
  6210 ;;      Totals:         1       0       0       0       0       0       0
  6211 ;;Total ram usage:        1 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    4
  6214 ;; This function calls:
  6215 ;;		_lcd_cmd
  6216 ;;		_lcd_dwr
  6217 ;; This function is called by:
  6218 ;;		_lcd_msg
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text24
  6223  002466                     __ptext24:
  6224                           	opt stack 0
  6225  002466                     _lcd_putc:
  6226                           	opt stack 25
  6227                           
  6228                           ;incstack = 0
  6229                           ;lcd_putc@c stored from wreg
  6230  002466  6E31               	movwf	lcd_putc@c,c
  6231                           
  6232                           ;lcd4a.c: 68: switch(c)
  6233  002468  D010               	goto	l109
  6234  00246A                     
  6235                           ;lcd4a.c: 71: lcd_cmd(0x01);
  6236  00246A  0E01               	movlw	1
  6237  00246C  ECCA  F011         	call	_lcd_cmd
  6238                           
  6239                           ;lcd4a.c: 72: break;
  6240  002470  0012               	return	
  6241  002472                     
  6242                           ;lcd4a.c: 74: lcd_cmd(3);
  6243  002472  0E03               	movlw	3
  6244  002474  ECCA  F011         	call	_lcd_cmd
  6245                           
  6246                           ;lcd4a.c: 75: break;
  6247  002478  0012               	return	
  6248  00247A                     
  6249                           ;lcd4a.c: 77: lcd_cmd(0x10);
  6250  00247A  0E10               	movlw	16
  6251  00247C  ECCA  F011         	call	_lcd_cmd
  6252                           
  6253                           ;lcd4a.c: 78: break;
  6254  002480  0012               	return	
  6255  002482                     
  6256                           ;lcd4a.c: 80: lcd_dwr(c);
  6257  002482  5031               	movf	lcd_putc@c,w,c
  6258  002484  ECEF  F011         	call	_lcd_dwr
  6259                           
  6260                           ;lcd4a.c: 82: }
  6261                           
  6262                           ;lcd4a.c: 81: break;
  6263  002488  0012               	return	
  6264  00248A                     l109:
  6265  00248A  5031               	movf	lcd_putc@c,w,c
  6266                           
  6267                           ; Switch size 1, requested type "space"
  6268                           ; Number of cases is 3, Range of values is 8 to 12
  6269                           ; switch strategies available:
  6270                           ; Name         Instructions Cycles
  6271                           ; simple_byte           10     6 (average)
  6272                           ;	Chosen strategy is simple_byte
  6273  00248C  0A08               	xorlw	8	; case 8
  6274  00248E  B4D8               	btfsc	status,2,c
  6275  002490  D7F4               	goto	l113
  6276  002492  0A02               	xorlw	2	; case 10
  6277  002494  B4D8               	btfsc	status,2,c
  6278  002496  D7ED               	goto	l112
  6279  002498  0A06               	xorlw	6	; case 12
  6280  00249A  B4D8               	btfsc	status,2,c
  6281  00249C  D7E6               	goto	l110
  6282  00249E  D7F1               	goto	l114
  6283  0024A0                     __end_of_lcd_putc:
  6284                           	opt stack 0
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           intcon2	equ	0xFF1
  6293                           indf0	equ	0xFEF
  6294                           postinc0	equ	0xFEE
  6295                           fsr0h	equ	0xFEA
  6296                           fsr0l	equ	0xFE9
  6297                           wreg	equ	0xFE8
  6298                           indf2	equ	0xFDF
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           
  6305 ;; *************** function _lcd_dwr *****************
  6306 ;; Defined at:
  6307 ;;		line 86 in file "../MyLibs/lcd4a.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  x               1    wreg     unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  x               1   47[COMRAM] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6321 ;;      Params:         0       0       0       0       0       0       0
  6322 ;;      Locals:         1       0       0       0       0       0       0
  6323 ;;      Temps:          1       0       0       0       0       0       0
  6324 ;;      Totals:         2       0       0       0       0       0       0
  6325 ;;Total ram usage:        2 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    3
  6328 ;; This function calls:
  6329 ;;		_lcd_lat
  6330 ;;		_manda
  6331 ;; This function is called by:
  6332 ;;		_lcd_putc
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text25
  6337  0023DE                     __ptext25:
  6338                           	opt stack 0
  6339  0023DE                     _lcd_dwr:
  6340                           	opt stack 25
  6341                           
  6342                           ;incstack = 0
  6343                           ;lcd_dwr@x stored from wreg
  6344  0023DE  6E30               	movwf	lcd_dwr@x,c
  6345                           
  6346                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6347  0023E0  8A8C               	bsf	3980,5,c	;volatile
  6348                           
  6349                           ;lcd4a.c: 89: lcd &= 0x0F;
  6350  0023E2  0E0F               	movlw	15
  6351  0023E4  164F               	andwf	_lcd,f,c
  6352                           
  6353                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  6354  0023E6  5030               	movf	lcd_dwr@x,w,c
  6355  0023E8  0BF0               	andlw	240
  6356  0023EA  124F               	iorwf	_lcd,f,c
  6357                           
  6358                           ;lcd4a.c: 91: manda(lcd);
  6359  0023EC  504F               	movf	_lcd,w,c
  6360  0023EE  EC6A  F012         	call	_manda
  6361                           
  6362                           ;lcd4a.c: 92: lcd_lat();
  6363  0023F2  ECD4  F012         	call	_lcd_lat	;wreg free
  6364                           
  6365                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(4000000/4000.0)));
  6366  0023F6  0E06               	movlw	6
  6367  0023F8  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6368  0023FA  0E30               	movlw	48
  6369  0023FC                     u4687:
  6370  0023FC  2EE8               	decfsz	wreg,f,c
  6371  0023FE  D7FE               	bra	u4687
  6372  002400  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6373  002402  D7FC               	bra	u4687
  6374  002404  D000               	nop2	
  6375                           
  6376                           ;lcd4a.c: 95: lcd &= 0x0F;
  6377  002406  0E0F               	movlw	15
  6378  002408  164F               	andwf	_lcd,f,c
  6379                           
  6380                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  6381  00240A  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6382  00240E  0E0F               	movlw	15
  6383  002410  162F               	andwf	??_lcd_dwr,f,c
  6384  002412  382F               	swapf	??_lcd_dwr,w,c
  6385  002414  0BF0               	andlw	240
  6386  002416  124F               	iorwf	_lcd,f,c
  6387                           
  6388                           ;lcd4a.c: 97: manda(lcd);
  6389  002418  504F               	movf	_lcd,w,c
  6390  00241A  EC6A  F012         	call	_manda
  6391                           
  6392                           ;lcd4a.c: 98: lcd_lat();
  6393  00241E  ECD4  F012         	call	_lcd_lat	;wreg free
  6394  002422  0012               	return		;funcret
  6395  002424                     __end_of_lcd_dwr:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           intcon2	equ	0xFF1
  6405                           indf0	equ	0xFEF
  6406                           postinc0	equ	0xFEE
  6407                           fsr0h	equ	0xFEA
  6408                           fsr0l	equ	0xFE9
  6409                           wreg	equ	0xFE8
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _lcd_gotoxy *****************
  6418 ;; Defined at:
  6419 ;;		line 114 in file "../MyLibs/lcd4a.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  x               1    wreg     unsigned char 
  6422 ;;  y               1   48[COMRAM] unsigned char 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  x               1   50[COMRAM] unsigned char 
  6425 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6435 ;;      Params:         1       0       0       0       0       0       0
  6436 ;;      Locals:         2       0       0       0       0       0       0
  6437 ;;      Temps:          1       0       0       0       0       0       0
  6438 ;;      Totals:         4       0       0       0       0       0       0
  6439 ;;Total ram usage:        4 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    4
  6442 ;; This function calls:
  6443 ;;		_lcd_cmd
  6444 ;; This function is called by:
  6445 ;;		_calcula
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text26
  6450  0024A0                     __ptext26:
  6451                           	opt stack 0
  6452  0024A0                     _lcd_gotoxy:
  6453                           	opt stack 25
  6454                           
  6455                           ;incstack = 0
  6456                           ;lcd_gotoxy@x stored from wreg
  6457  0024A0  6E33               	movwf	lcd_gotoxy@x,c
  6458                           
  6459                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  6460  0024A2  0E00               	movlw	0
  6461  0024A4  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6462                           
  6463                           ;lcd4a.c: 118: switch(y)
  6464  0024A6  D005               	goto	l127
  6465  0024A8                     
  6466                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  6467  0024A8  0EC0               	movlw	192
  6468  0024AA  D001               	goto	L4
  6469  0024AC                     
  6470                           ;lcd4a.c: 127: ADDRESS = 0x80;
  6471  0024AC  0E80               	movlw	128
  6472  0024AE                     L4:
  6473  0024AE  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6474                           
  6475                           ;lcd4a.c: 130: }
  6476                           
  6477                           ;lcd4a.c: 128: break;
  6478  0024B0  D008               	goto	l129
  6479  0024B2                     l127:
  6480  0024B2  5031               	movf	lcd_gotoxy@y,w,c
  6481                           
  6482                           ; Switch size 1, requested type "space"
  6483                           ; Number of cases is 2, Range of values is 1 to 2
  6484                           ; switch strategies available:
  6485                           ; Name         Instructions Cycles
  6486                           ; simple_byte            7     4 (average)
  6487                           ;	Chosen strategy is simple_byte
  6488  0024B4  0A01               	xorlw	1	; case 1
  6489  0024B6  B4D8               	btfsc	status,2,c
  6490  0024B8  D7F9               	goto	l131
  6491  0024BA  0A03               	xorlw	3	; case 2
  6492  0024BC  B4D8               	btfsc	status,2,c
  6493  0024BE  D7F4               	goto	l130
  6494  0024C0  D7F5               	goto	l131
  6495  0024C2                     l129:
  6496                           
  6497                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6498  0024C2  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6499  0024C4  2433               	addwf	lcd_gotoxy@x,w,c
  6500  0024C6  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6501  0024C8  0432               	decf	??_lcd_gotoxy,w,c
  6502  0024CA  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6503                           
  6504                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  6505  0024CC  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6506  0024CE  ECCA  F011         	call	_lcd_cmd
  6507  0024D2  0012               	return		;funcret
  6508  0024D4                     __end_of_lcd_gotoxy:
  6509                           	opt stack 0
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           prodh	equ	0xFF4
  6515                           prodl	equ	0xFF3
  6516                           intcon	equ	0xFF2
  6517                           intcon2	equ	0xFF1
  6518                           indf0	equ	0xFEF
  6519                           postinc0	equ	0xFEE
  6520                           fsr0h	equ	0xFEA
  6521                           fsr0l	equ	0xFE9
  6522                           wreg	equ	0xFE8
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _lcd_cmd *****************
  6531 ;; Defined at:
  6532 ;;		line 40 in file "../MyLibs/lcd4a.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  x               1    wreg     unsigned char 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  x               1   47[COMRAM] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      void 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2, status,0, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6546 ;;      Params:         0       0       0       0       0       0       0
  6547 ;;      Locals:         1       0       0       0       0       0       0
  6548 ;;      Temps:          1       0       0       0       0       0       0
  6549 ;;      Totals:         2       0       0       0       0       0       0
  6550 ;;Total ram usage:        2 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    3
  6553 ;; This function calls:
  6554 ;;		_lcd_lat
  6555 ;;		_manda
  6556 ;; This function is called by:
  6557 ;;		_lcd_putc
  6558 ;;		_lcd_gotoxy
  6559 ;;		_lcd_init
  6560 ;;		_lcd_setcursor_vb
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text27
  6565  002394                     __ptext27:
  6566                           	opt stack 0
  6567  002394                     _lcd_cmd:
  6568                           	opt stack 25
  6569                           
  6570                           ;incstack = 0
  6571                           ;lcd_cmd@x stored from wreg
  6572  002394  6E30               	movwf	lcd_cmd@x,c
  6573                           
  6574                           ;lcd4a.c: 42: lcd = 0;
  6575  002396  0E00               	movlw	0
  6576  002398  6E4F               	movwf	_lcd,c
  6577                           
  6578                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6579  00239A  9A8C               	bcf	3980,5,c	;volatile
  6580                           
  6581                           ;lcd4a.c: 44: lcd &= 0x0F;
  6582  00239C  0E0F               	movlw	15
  6583  00239E  164F               	andwf	_lcd,f,c
  6584                           
  6585                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  6586  0023A0  5030               	movf	lcd_cmd@x,w,c
  6587  0023A2  0BF0               	andlw	240
  6588  0023A4  124F               	iorwf	_lcd,f,c
  6589                           
  6590                           ;lcd4a.c: 46: manda(lcd);
  6591  0023A6  504F               	movf	_lcd,w,c
  6592  0023A8  EC6A  F012         	call	_manda
  6593                           
  6594                           ;lcd4a.c: 47: lcd_lat();
  6595  0023AC  ECD4  F012         	call	_lcd_lat	;wreg free
  6596                           
  6597                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(4000000/4000.0)));
  6598  0023B0  0E06               	movlw	6
  6599  0023B2  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6600  0023B4  0E30               	movlw	48
  6601  0023B6                     u4697:
  6602  0023B6  2EE8               	decfsz	wreg,f,c
  6603  0023B8  D7FE               	bra	u4697
  6604  0023BA  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6605  0023BC  D7FC               	bra	u4697
  6606  0023BE  D000               	nop2	
  6607                           
  6608                           ;lcd4a.c: 50: lcd &= 0x0F;
  6609  0023C0  0E0F               	movlw	15
  6610  0023C2  164F               	andwf	_lcd,f,c
  6611                           
  6612                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  6613  0023C4  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6614  0023C8  0E0F               	movlw	15
  6615  0023CA  162F               	andwf	??_lcd_cmd,f,c
  6616  0023CC  382F               	swapf	??_lcd_cmd,w,c
  6617  0023CE  0BF0               	andlw	240
  6618  0023D0  124F               	iorwf	_lcd,f,c
  6619                           
  6620                           ;lcd4a.c: 52: manda(lcd);
  6621  0023D2  504F               	movf	_lcd,w,c
  6622  0023D4  EC6A  F012         	call	_manda
  6623                           
  6624                           ;lcd4a.c: 53: lcd_lat();
  6625  0023D8  ECD4  F012         	call	_lcd_lat	;wreg free
  6626  0023DC  0012               	return		;funcret
  6627  0023DE                     __end_of_lcd_cmd:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           intcon	equ	0xFF2
  6636                           intcon2	equ	0xFF1
  6637                           indf0	equ	0xFEF
  6638                           postinc0	equ	0xFEE
  6639                           fsr0h	equ	0xFEA
  6640                           fsr0l	equ	0xFE9
  6641                           wreg	equ	0xFE8
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function _manda *****************
  6650 ;; Defined at:
  6651 ;;		line 178 in file "../MyLibs/lcd4a.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  dato            1    wreg     unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  dato            1   45[COMRAM] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      void 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2, status,0
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6665 ;;      Params:         0       0       0       0       0       0       0
  6666 ;;      Locals:         1       0       0       0       0       0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0
  6668 ;;      Totals:         1       0       0       0       0       0       0
  6669 ;;Total ram usage:        1 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    2
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_lcd_cmd
  6676 ;;		_lcd_cmd_hf
  6677 ;;		_lcd_dwr
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text28
  6682  0024D4                     __ptext28:
  6683                           	opt stack 0
  6684  0024D4                     _manda:
  6685                           	opt stack 25
  6686                           
  6687                           ;incstack = 0
  6688                           ;manda@dato stored from wreg
  6689  0024D4  6E2E               	movwf	manda@dato,c
  6690                           
  6691                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6692  0024D6  A82E               	btfss	manda@dato,4,c
  6693  0024D8  D002               	goto	l138
  6694  0024DA  888A               	bsf	3978,4,c	;volatile
  6695  0024DC  D001               	goto	l139
  6696  0024DE                     l138:
  6697                           
  6698                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6699  0024DE  988A               	bcf	3978,4,c	;volatile
  6700  0024E0                     l139:
  6701                           
  6702                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6703  0024E0  AA2E               	btfss	manda@dato,5,c
  6704  0024E2  D002               	goto	l140
  6705  0024E4  8A8A               	bsf	3978,5,c	;volatile
  6706  0024E6  D001               	goto	l141
  6707  0024E8                     l140:
  6708                           
  6709                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6710  0024E8  9A8A               	bcf	3978,5,c	;volatile
  6711  0024EA                     l141:
  6712                           
  6713                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6714  0024EA  AC2E               	btfss	manda@dato,6,c
  6715  0024EC  D002               	goto	l142
  6716  0024EE  8C8A               	bsf	3978,6,c	;volatile
  6717  0024F0  D001               	goto	l143
  6718  0024F2                     l142:
  6719                           
  6720                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6721  0024F2  9C8A               	bcf	3978,6,c	;volatile
  6722  0024F4                     l143:
  6723                           
  6724                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6725  0024F4  AE2E               	btfss	manda@dato,7,c
  6726  0024F6  D002               	goto	l144
  6727  0024F8  8E8A               	bsf	3978,7,c	;volatile
  6728  0024FA  0012               	return	
  6729  0024FC                     l144:
  6730                           
  6731                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6732  0024FC  9E8A               	bcf	3978,7,c	;volatile
  6733  0024FE  0012               	return	
  6734  002500                     __end_of_manda:
  6735                           	opt stack 0
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           intcon2	equ	0xFF1
  6744                           indf0	equ	0xFEF
  6745                           postinc0	equ	0xFEE
  6746                           fsr0h	equ	0xFEA
  6747                           fsr0l	equ	0xFE9
  6748                           wreg	equ	0xFE8
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _lcd_lat *****************
  6757 ;; Defined at:
  6758 ;;		line 29 in file "../MyLibs/lcd4a.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6772 ;;      Params:         0       0       0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0
  6774 ;;      Temps:          1       0       0       0       0       0       0
  6775 ;;      Totals:         1       0       0       0       0       0       0
  6776 ;;Total ram usage:        1 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    2
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_lcd_cmd
  6783 ;;		_lcd_cmd_hf
  6784 ;;		_lcd_dwr
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text29
  6789  0025A8                     __ptext29:
  6790                           	opt stack 0
  6791  0025A8                     _lcd_lat:
  6792                           	opt stack 25
  6793                           
  6794                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  6795                           
  6796                           ;incstack = 0
  6797  0025A8  8E8C               	bsf	3980,7,c	;volatile
  6798                           
  6799                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(4000000/4000.0)));
  6800  0025AA  0E04               	movlw	4
  6801  0025AC  6E2E               	movwf	??_lcd_lat& (0+255),c
  6802  0025AE  0EE4               	movlw	228
  6803  0025B0                     u4707:
  6804  0025B0  2EE8               	decfsz	wreg,f,c
  6805  0025B2  D7FE               	bra	u4707
  6806  0025B4  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  6807  0025B6  D7FC               	bra	u4707
  6808  0025B8  D000               	nop2	
  6809                           
  6810                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  6811  0025BA  9E8C               	bcf	3980,7,c	;volatile
  6812  0025BC  0012               	return		;funcret
  6813  0025BE                     __end_of_lcd_lat:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           intcon2	equ	0xFF1
  6823                           indf0	equ	0xFEF
  6824                           postinc0	equ	0xFEE
  6825                           fsr0h	equ	0xFEA
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function ___ftdiv *****************
  6836 ;; Defined at:
  6837 ;;		line 54 in file "/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  f1              3   53[COMRAM] float 
  6840 ;;  f2              3   56[COMRAM] float 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  f3              3   63[COMRAM] float 
  6843 ;;  sign            1   67[COMRAM] unsigned char 
  6844 ;;  exp             1   66[COMRAM] unsigned char 
  6845 ;;  cntr            1   62[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  3   53[COMRAM] float 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6855 ;;      Params:         6       0       0       0       0       0       0
  6856 ;;      Locals:         6       0       0       0       0       0       0
  6857 ;;      Temps:          3       0       0       0       0       0       0
  6858 ;;      Totals:        15       0       0       0       0       0       0
  6859 ;;Total ram usage:       15 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    3
  6862 ;; This function calls:
  6863 ;;		___ftpack
  6864 ;; This function is called by:
  6865 ;;		_calcula
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text30
  6870  001DDE                     __ptext30:
  6871                           	opt stack 0
  6872  001DDE                     ___ftdiv:
  6873                           	opt stack 26
  6874                           
  6875                           ;incstack = 0
  6876  001DDE  C038  F03C         	movff	___ftdiv@f1+2,??___ftdiv
  6877  001DE2  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  6878  001DE4  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  6879  001DE6  3437               	rlcf	___ftdiv@f1+1,w,c
  6880  001DE8  363C               	rlcf	??___ftdiv& (0+255),f,c
  6881  001DEA  E301               	bnc	u4531
  6882  001DEC  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6883  001DEE                     u4531:
  6884  001DEE  503C               	movf	??___ftdiv,w,c
  6885  001DF0  6E43               	movwf	___ftdiv@exp,c
  6886  001DF2  5043               	movf	___ftdiv@exp,w,c
  6887  001DF4  A4D8               	btfss	status,2,c
  6888  001DF6  D007               	goto	l560
  6889  001DF8  0E00               	movlw	0
  6890  001DFA  6E36               	movwf	?___ftdiv,c
  6891  001DFC  0E00               	movlw	0
  6892  001DFE  6E37               	movwf	?___ftdiv+1,c
  6893  001E00  0E00               	movlw	0
  6894  001E02  6E38               	movwf	?___ftdiv+2,c
  6895  001E04  0012               	return	
  6896  001E06                     l560:
  6897  001E06  C03B  F03C         	movff	___ftdiv@f2+2,??___ftdiv
  6898  001E0A  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  6899  001E0C  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  6900  001E0E  343A               	rlcf	___ftdiv@f2+1,w,c
  6901  001E10  363C               	rlcf	??___ftdiv& (0+255),f,c
  6902  001E12  E301               	bnc	u4551
  6903  001E14  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6904  001E16                     u4551:
  6905  001E16  503C               	movf	??___ftdiv,w,c
  6906  001E18  6E44               	movwf	___ftdiv@sign,c
  6907  001E1A  5044               	movf	___ftdiv@sign,w,c
  6908  001E1C  A4D8               	btfss	status,2,c
  6909  001E1E  D007               	goto	l562
  6910  001E20  0E00               	movlw	0
  6911  001E22  6E36               	movwf	?___ftdiv,c
  6912  001E24  0E00               	movlw	0
  6913  001E26  6E37               	movwf	?___ftdiv+1,c
  6914  001E28  0E00               	movlw	0
  6915  001E2A  6E38               	movwf	?___ftdiv+2,c
  6916  001E2C  0012               	return	
  6917  001E2E                     l562:
  6918  001E2E  0E00               	movlw	0
  6919  001E30  6E40               	movwf	___ftdiv@f3,c
  6920  001E32  0E00               	movlw	0
  6921  001E34  6E41               	movwf	___ftdiv@f3+1,c
  6922  001E36  0E00               	movlw	0
  6923  001E38  6E42               	movwf	___ftdiv@f3+2,c
  6924  001E3A  5044               	movf	___ftdiv@sign,w,c
  6925  001E3C  0F89               	addlw	137
  6926  001E3E  5E43               	subwf	___ftdiv@exp,f,c
  6927  001E40  C038  F044         	movff	___ftdiv@f1+2,___ftdiv@sign
  6928  001E44  503B               	movf	___ftdiv@f2+2,w,c
  6929  001E46  1A44               	xorwf	___ftdiv@sign,f,c
  6930  001E48  0E80               	movlw	128
  6931  001E4A  1644               	andwf	___ftdiv@sign,f,c
  6932  001E4C  8E37               	bsf	___ftdiv@f1+1,7,c
  6933  001E4E  0EFF               	movlw	255
  6934  001E50  1636               	andwf	___ftdiv@f1,f,c
  6935  001E52  0EFF               	movlw	255
  6936  001E54  1637               	andwf	___ftdiv@f1+1,f,c
  6937  001E56  0E00               	movlw	0
  6938  001E58  1638               	andwf	___ftdiv@f1+2,f,c
  6939  001E5A  8E3A               	bsf	___ftdiv@f2+1,7,c
  6940  001E5C  0EFF               	movlw	255
  6941  001E5E  1639               	andwf	___ftdiv@f2,f,c
  6942  001E60  0EFF               	movlw	255
  6943  001E62  163A               	andwf	___ftdiv@f2+1,f,c
  6944  001E64  0E00               	movlw	0
  6945  001E66  163B               	andwf	___ftdiv@f2+2,f,c
  6946  001E68  0E18               	movlw	24
  6947  001E6A  6E3F               	movwf	___ftdiv@cntr,c
  6948  001E6C  90D8               	bcf	status,0,c
  6949  001E6E  3640               	rlcf	___ftdiv@f3,f,c
  6950  001E70  3641               	rlcf	___ftdiv@f3+1,f,c
  6951  001E72  3642               	rlcf	___ftdiv@f3+2,f,c
  6952  001E74  5039               	movf	___ftdiv@f2,w,c
  6953  001E76  5C36               	subwf	___ftdiv@f1,w,c
  6954  001E78  503A               	movf	___ftdiv@f2+1,w,c
  6955  001E7A  5837               	subwfb	___ftdiv@f1+1,w,c
  6956  001E7C  503B               	movf	___ftdiv@f2+2,w,c
  6957  001E7E  5838               	subwfb	___ftdiv@f1+2,w,c
  6958  001E80  A0D8               	btfss	status,0,c
  6959  001E82  D007               	goto	l564
  6960  001E84  5039               	movf	___ftdiv@f2,w,c
  6961  001E86  5E36               	subwf	___ftdiv@f1,f,c
  6962  001E88  503A               	movf	___ftdiv@f2+1,w,c
  6963  001E8A  5A37               	subwfb	___ftdiv@f1+1,f,c
  6964  001E8C  503B               	movf	___ftdiv@f2+2,w,c
  6965  001E8E  5A38               	subwfb	___ftdiv@f1+2,f,c
  6966  001E90  8040               	bsf	___ftdiv@f3,0,c
  6967  001E92                     l564:
  6968  001E92  90D8               	bcf	status,0,c
  6969  001E94  3636               	rlcf	___ftdiv@f1,f,c
  6970  001E96  3637               	rlcf	___ftdiv@f1+1,f,c
  6971  001E98  3638               	rlcf	___ftdiv@f1+2,f,c
  6972  001E9A  2E3F               	decfsz	___ftdiv@cntr,f,c
  6973  001E9C  D7E7               	goto	l563
  6974  001E9E  C040  F02E         	movff	___ftdiv@f3,___ftpack@arg
  6975  001EA2  C041  F02F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6976  001EA6  C042  F030         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6977  001EAA  C043  F031         	movff	___ftdiv@exp,___ftpack@exp
  6978  001EAE  C044  F032         	movff	___ftdiv@sign,___ftpack@sign
  6979  001EB2  ECBF  F00F         	call	___ftpack	;wreg free
  6980  001EB6  C02E  F036         	movff	?___ftpack,?___ftdiv
  6981  001EBA  C02F  F037         	movff	?___ftpack+1,?___ftdiv+1
  6982  001EBE  C030  F038         	movff	?___ftpack+2,?___ftdiv+2
  6983  001EC2  0012               	return	
  6984  001EC4                     __end_of___ftdiv:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           intcon2	equ	0xFF1
  6994                           indf0	equ	0xFEF
  6995                           postinc0	equ	0xFEE
  6996                           fsr0h	equ	0xFEA
  6997                           fsr0l	equ	0xFE9
  6998                           wreg	equ	0xFE8
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function ___ftpack *****************
  7007 ;; Defined at:
  7008 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  arg             3   45[COMRAM] unsigned um
  7011 ;;  exp             1   48[COMRAM] unsigned char 
  7012 ;;  sign            1   49[COMRAM] unsigned char 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  3   45[COMRAM] float 
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, status,0
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7024 ;;      Params:         5       0       0       0       0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0
  7026 ;;      Temps:          3       0       0       0       0       0       0
  7027 ;;      Totals:         8       0       0       0       0       0       0
  7028 ;;Total ram usage:        8 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    2
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		___ftadd
  7035 ;;		___ftdiv
  7036 ;;		___ftmul
  7037 ;;		___lltoft
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text31
  7042  001F7E                     __ptext31:
  7043                           	opt stack 0
  7044  001F7E                     ___ftpack:
  7045                           	opt stack 24
  7046                           
  7047                           ;incstack = 0
  7048  001F7E  5031               	movf	___ftpack@exp,w,c
  7049  001F80  B4D8               	btfsc	status,2,c
  7050  001F82  D005               	goto	u3140
  7051  001F84  502E               	movf	___ftpack@arg,w,c
  7052  001F86  102F               	iorwf	___ftpack@arg+1,w,c
  7053  001F88  1030               	iorwf	___ftpack@arg+2,w,c
  7054  001F8A  A4D8               	btfss	status,2,c
  7055  001F8C  D00C               	goto	l496
  7056  001F8E                     u3140:
  7057  001F8E  0E00               	movlw	0
  7058  001F90  6E2E               	movwf	?___ftpack,c
  7059  001F92  0E00               	movlw	0
  7060  001F94  6E2F               	movwf	?___ftpack+1,c
  7061  001F96  0E00               	movlw	0
  7062  001F98  6E30               	movwf	?___ftpack+2,c
  7063  001F9A  0012               	return	
  7064  001F9C  2A31               	incf	___ftpack@exp,f,c
  7065  001F9E  90D8               	bcf	status,0,c
  7066  001FA0  3230               	rrcf	___ftpack@arg+2,f,c
  7067  001FA2  322F               	rrcf	___ftpack@arg+1,f,c
  7068  001FA4  322E               	rrcf	___ftpack@arg,f,c
  7069  001FA6                     l496:
  7070  001FA6  0E00               	movlw	0
  7071  001FA8  142E               	andwf	___ftpack@arg,w,c
  7072  001FAA  6E33               	movwf	??___ftpack& (0+255),c
  7073  001FAC  0E00               	movlw	0
  7074  001FAE  142F               	andwf	___ftpack@arg+1,w,c
  7075  001FB0  6E34               	movwf	(??___ftpack+1)& (0+255),c
  7076  001FB2  0EFE               	movlw	254
  7077  001FB4  1430               	andwf	___ftpack@arg+2,w,c
  7078  001FB6  6E35               	movwf	(??___ftpack+2)& (0+255),c
  7079  001FB8  5033               	movf	??___ftpack,w,c
  7080  001FBA  1034               	iorwf	??___ftpack+1,w,c
  7081  001FBC  1035               	iorwf	??___ftpack+2,w,c
  7082  001FBE  B4D8               	btfsc	status,2,c
  7083  001FC0  D00C               	goto	l499
  7084  001FC2  D7EC               	goto	l497
  7085  001FC4  2A31               	incf	___ftpack@exp,f,c
  7086  001FC6  0E01               	movlw	1
  7087  001FC8  262E               	addwf	___ftpack@arg,f,c
  7088  001FCA  0E00               	movlw	0
  7089  001FCC  222F               	addwfc	___ftpack@arg+1,f,c
  7090  001FCE  0E00               	movlw	0
  7091  001FD0  2230               	addwfc	___ftpack@arg+2,f,c
  7092  001FD2  90D8               	bcf	status,0,c
  7093  001FD4  3230               	rrcf	___ftpack@arg+2,f,c
  7094  001FD6  322F               	rrcf	___ftpack@arg+1,f,c
  7095  001FD8  322E               	rrcf	___ftpack@arg,f,c
  7096  001FDA                     l499:
  7097  001FDA  0E00               	movlw	0
  7098  001FDC  142E               	andwf	___ftpack@arg,w,c
  7099  001FDE  6E33               	movwf	??___ftpack& (0+255),c
  7100  001FE0  0E00               	movlw	0
  7101  001FE2  142F               	andwf	___ftpack@arg+1,w,c
  7102  001FE4  6E34               	movwf	(??___ftpack+1)& (0+255),c
  7103  001FE6  0EFF               	movlw	255
  7104  001FE8  1430               	andwf	___ftpack@arg+2,w,c
  7105  001FEA  6E35               	movwf	(??___ftpack+2)& (0+255),c
  7106  001FEC  5033               	movf	??___ftpack,w,c
  7107  001FEE  1034               	iorwf	??___ftpack+1,w,c
  7108  001FF0  1035               	iorwf	??___ftpack+2,w,c
  7109  001FF2  B4D8               	btfsc	status,2,c
  7110  001FF4  D006               	goto	l502
  7111  001FF6  D7E6               	goto	l500
  7112  001FF8  0631               	decf	___ftpack@exp,f,c
  7113  001FFA  90D8               	bcf	status,0,c
  7114  001FFC  362E               	rlcf	___ftpack@arg,f,c
  7115  001FFE  362F               	rlcf	___ftpack@arg+1,f,c
  7116  002000  3630               	rlcf	___ftpack@arg+2,f,c
  7117  002002                     l502:
  7118  002002  BE2F               	btfsc	___ftpack@arg+1,7,c
  7119  002004  D003               	goto	u3180
  7120  002006  0E02               	movlw	2
  7121  002008  6031               	cpfslt	___ftpack@exp,c
  7122  00200A  D7F6               	goto	l503
  7123  00200C                     u3180:
  7124  00200C  A031               	btfss	___ftpack@exp,0,c
  7125  00200E  9E2F               	bcf	___ftpack@arg+1,7,c
  7126  002010  90D8               	bcf	status,0,c
  7127  002012  3231               	rrcf	___ftpack@exp,f,c
  7128  002014  5031               	movf	___ftpack@exp,w,c
  7129  002016  1230               	iorwf	___ftpack@arg+2,f,c
  7130  002018  5032               	movf	___ftpack@sign,w,c
  7131  00201A  A4D8               	btfss	status,2,c
  7132  00201C  8E30               	bsf	___ftpack@arg+2,7,c
  7133  00201E  C02E  F02E         	movff	___ftpack@arg,?___ftpack
  7134  002022  C02F  F02F         	movff	___ftpack@arg+1,?___ftpack+1
  7135  002026  C030  F030         	movff	___ftpack@arg+2,?___ftpack+2
  7136  00202A  0012               	return	
  7137  00202C                     __end_of___ftpack:
  7138                           	opt stack 0
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           intcon2	equ	0xFF1
  7147                           indf0	equ	0xFEF
  7148                           postinc0	equ	0xFEE
  7149                           fsr0h	equ	0xFEA
  7150                           fsr0l	equ	0xFE9
  7151                           wreg	equ	0xFE8
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function _low_isr *****************
  7160 ;; Defined at:
  7161 ;;		line 70 in file "color_1.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;		None
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;		None
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7175 ;;      Params:         0       0       0       0       0       0       0
  7176 ;;      Locals:         0       0       0       0       0       0       0
  7177 ;;      Temps:         21       0       0       0       0       0       0
  7178 ;;      Totals:        21       0       0       0       0       0       0
  7179 ;;Total ram usage:       21 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    1
  7182 ;; This function calls:
  7183 ;;		Nothing
  7184 ;; This function is called by:
  7185 ;;		Interrupt level 1
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	intcodelo
  7190  000018                     __pintcodelo:
  7191                           	opt stack 0
  7192  000018                     _low_isr:
  7193                           	opt stack 24
  7194                           
  7195                           ;incstack = 0
  7196  000018  8052               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7197  00001A  CFD8 F019          	movff	status,??_low_isr
  7198  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  7199  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  7200  000026  CFFA F01C          	movff	pclath,??_low_isr+3
  7201  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
  7202  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
  7203  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
  7204  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
  7205  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
  7206  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
  7207  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
  7208  000046  CFF3 F024          	movff	prodl,??_low_isr+11
  7209  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
  7210  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
  7211  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
  7212  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
  7213  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
  7214  00005E  C052  F02A         	movff	btemp,??_low_isr+17
  7215  000062  C053  F02B         	movff	btemp+1,??_low_isr+18
  7216  000066  C054  F02C         	movff	btemp+2,??_low_isr+19
  7217  00006A  C055  F02D         	movff	btemp+3,??_low_isr+20
  7218                           
  7219                           ;color_1.c: 72: if(TMR1IF == 1)
  7220  00006E  A09E               	btfss	3998,0,c	;volatile
  7221  000070  D007               	goto	i1l1991
  7222                           
  7223                           ;color_1.c: 73: {
  7224                           ;color_1.c: 74: overflowCount++;
  7225  000072  0E01               	movlw	1
  7226  000074  264B               	addwf	_overflowCount,f,c	;volatile
  7227  000076  0E00               	movlw	0
  7228  000078  224C               	addwfc	_overflowCount+1,f,c	;volatile
  7229  00007A  224D               	addwfc	_overflowCount+2,f,c	;volatile
  7230  00007C  224E               	addwfc	_overflowCount+3,f,c	;volatile
  7231                           
  7232                           ;color_1.c: 75: TMR1IF =0;
  7233  00007E  909E               	bcf	3998,0,c	;volatile
  7234  000080                     i1l1991:
  7235                           
  7236                           ;color_1.c: 76: return;
  7237  000080  C02D  F055         	movff	??_low_isr+20,btemp+3
  7238  000084  C02C  F054         	movff	??_low_isr+19,btemp+2
  7239  000088  C02B  F053         	movff	??_low_isr+18,btemp+1
  7240  00008C  C02A  F052         	movff	??_low_isr+17,btemp
  7241  000090  C029  FFF5         	movff	??_low_isr+16,tablat
  7242  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
  7243  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
  7244  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
  7245  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
  7246  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
  7247  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
  7248  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
  7249  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
  7250  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
  7251  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
  7252  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
  7253  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
  7254  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
  7255  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
  7256  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
  7257  0000D0  C019  FFD8         	movff	??_low_isr,status
  7258  0000D4  9052               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7259  0000D6  0010               	retfie	
  7260  0000D8                     __end_of_low_isr:
  7261                           	opt stack 0
  7262                           pclatu	equ	0xFFB
  7263                           pclath	equ	0xFFA
  7264                           tblptru	equ	0xFF8
  7265                           tblptrh	equ	0xFF7
  7266                           tblptrl	equ	0xFF6
  7267                           tablat	equ	0xFF5
  7268                           prodh	equ	0xFF4
  7269                           prodl	equ	0xFF3
  7270                           intcon	equ	0xFF2
  7271                           intcon2	equ	0xFF1
  7272                           indf0	equ	0xFEF
  7273                           postinc0	equ	0xFEE
  7274                           fsr0h	equ	0xFEA
  7275                           fsr0l	equ	0xFE9
  7276                           wreg	equ	0xFE8
  7277                           fsr1h	equ	0xFE2
  7278                           fsr1l	equ	0xFE1
  7279                           bsr	equ	0xFE0
  7280                           indf2	equ	0xFDF
  7281                           postinc2	equ	0xFDE
  7282                           postdec2	equ	0xFDD
  7283                           fsr2h	equ	0xFDA
  7284                           fsr2l	equ	0xFD9
  7285                           status	equ	0xFD8
  7286                           
  7287 ;; *************** function _high_isr *****************
  7288 ;; Defined at:
  7289 ;;		line 80 in file "color_1.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  counter         2   22[COMRAM] unsigned int 
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, status,2, status,0
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7303 ;;      Params:         0       0       0       0       0       0       0
  7304 ;;      Locals:         2       0       0       0       0       0       0
  7305 ;;      Temps:         22       0       0       0       0       0       0
  7306 ;;      Totals:        24       0       0       0       0       0       0
  7307 ;;Total ram usage:       24 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; This function calls:
  7310 ;;		Nothing
  7311 ;; This function is called by:
  7312 ;;		Interrupt level 2
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	intcode
  7317  000008                     __pintcode:
  7318                           	opt stack 0
  7319  000008                     _high_isr:
  7320                           	opt stack 24
  7321                           
  7322                           ;incstack = 0
  7323  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7324  00000A  EDD4  F00C         	call	int_func,f	;refresh shadow registers
  7325                           pclatu	equ	0xFFB
  7326                           pclath	equ	0xFFA
  7327                           tblptru	equ	0xFF8
  7328                           tblptrh	equ	0xFF7
  7329                           tblptrl	equ	0xFF6
  7330                           tablat	equ	0xFF5
  7331                           prodh	equ	0xFF4
  7332                           prodl	equ	0xFF3
  7333                           intcon	equ	0xFF2
  7334                           intcon2	equ	0xFF1
  7335                           indf0	equ	0xFEF
  7336                           postinc0	equ	0xFEE
  7337                           fsr0h	equ	0xFEA
  7338                           fsr0l	equ	0xFE9
  7339                           wreg	equ	0xFE8
  7340                           fsr1h	equ	0xFE2
  7341                           fsr1l	equ	0xFE1
  7342                           bsr	equ	0xFE0
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350                           	psect	intcode_body
  7351  0019A8                     __pintcode_body:
  7352                           	opt stack 24
  7353  0019A8                     int_func:
  7354                           	opt stack 24
  7355  0019A8  0006               	pop		; remove dummy address from shadow register refresh
  7356  0019AA  CFFA F005          	movff	pclath,??_high_isr+4
  7357  0019AE  CFFB F006          	movff	pclatu,??_high_isr+5
  7358  0019B2  CFE9 F007          	movff	fsr0l,??_high_isr+6
  7359  0019B6  CFEA F008          	movff	fsr0h,??_high_isr+7
  7360  0019BA  CFE1 F009          	movff	fsr1l,??_high_isr+8
  7361  0019BE  CFE2 F00A          	movff	fsr1h,??_high_isr+9
  7362  0019C2  CFD9 F00B          	movff	fsr2l,??_high_isr+10
  7363  0019C6  CFDA F00C          	movff	fsr2h,??_high_isr+11
  7364  0019CA  CFF3 F00D          	movff	prodl,??_high_isr+12
  7365  0019CE  CFF4 F00E          	movff	prodh,??_high_isr+13
  7366  0019D2  CFF6 F00F          	movff	tblptrl,??_high_isr+14
  7367  0019D6  CFF7 F010          	movff	tblptrh,??_high_isr+15
  7368  0019DA  CFF8 F011          	movff	tblptru,??_high_isr+16
  7369  0019DE  CFF5 F012          	movff	tablat,??_high_isr+17
  7370  0019E2  C052  F013         	movff	btemp,??_high_isr+18
  7371  0019E6  C053  F014         	movff	btemp+1,??_high_isr+19
  7372  0019EA  C054  F015         	movff	btemp+2,??_high_isr+20
  7373  0019EE  C055  F016         	movff	btemp+3,??_high_isr+21
  7374                           
  7375                           ;color_1.c: 83: if(INT0IF == 1)
  7376  0019F2  A2F2               	btfss	intcon,1,c	;volatile
  7377  0019F4  D046               	goto	i2l3133
  7378                           
  7379                           ;color_1.c: 84: {
  7380                           ;color_1.c: 85: unsigned int counter = TMR1;
  7381  0019F6  CFCE F017          	movff	4046,high_isr@counter	;volatile
  7382  0019FA  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
  7383                           
  7384                           ;color_1.c: 88: if (triggered)
  7385  0019FE  5050               	movf	_triggered,w,c	;volatile
  7386  001A00  A4D8               	btfss	status,2,c
  7387  001A02  D03E               	goto	i2l3131
  7388                           
  7389                           ;color_1.c: 92: }
  7390                           ;color_1.c: 94: if (first)
  7391                           
  7392                           ;color_1.c: 91: return;
  7393                           
  7394                           ;color_1.c: 89: {
  7395                           ;color_1.c: 90: INT0IF = 0;
  7396  001A04  5051               	movf	_first,w,c	;volatile
  7397  001A06  B4D8               	btfsc	status,2,c
  7398  001A08  D01E               	goto	i2l70
  7399                           
  7400                           ;color_1.c: 95: {
  7401                           ;color_1.c: 96: startTime = (overflowCount << 16) + counter;
  7402  001A0A  C04B  F001         	movff	_overflowCount,??_high_isr	;volatile
  7403  001A0E  C04C  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  7404  001A12  C04D  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  7405  001A16  C04E  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  7406  001A1A  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  7407  001A1E  C001  F003         	movff	??_high_isr,??_high_isr+2
  7408  001A22  6A02               	clrf	??_high_isr+1,c
  7409  001A24  6A01               	clrf	??_high_isr,c
  7410  001A26  5017               	movf	high_isr@counter,w,c
  7411  001A28  2401               	addwf	??_high_isr,w,c
  7412  001A2A  0100               	movlb	0	; () banked
  7413  001A2C  6FDD               	movwf	_startTime& (0+255),b	;volatile
  7414  001A2E  5018               	movf	high_isr@counter+1,w,c
  7415  001A30  2002               	addwfc	??_high_isr+1,w,c
  7416  001A32  6FDE               	movwf	(_startTime+1)& (0+255),b	;volatile
  7417  001A34  0E00               	movlw	0
  7418  001A36  2003               	addwfc	??_high_isr+2,w,c
  7419  001A38  6FDF               	movwf	(_startTime+2)& (0+255),b	;volatile
  7420  001A3A  0E00               	movlw	0
  7421  001A3C  2004               	addwfc	??_high_isr+3,w,c
  7422  001A3E  6FE0               	movwf	(_startTime+3)& (0+255),b	;volatile
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;color_1.c: 97: first = false;
  7426  001A40  0E00               	movlw	0
  7427  001A42  6E51               	movwf	_first,c	;volatile
  7428  001A44  D01D               	goto	i2l3131
  7429  001A46                     i2l70:
  7430                           
  7431                           ;color_1.c: 100: }
  7432                           ;color_1.c: 102: finishTime = (overflowCount << 16) + counter;
  7433                           
  7434                           ; BSR set to: 0
  7435  001A46  C04B  F001         	movff	_overflowCount,??_high_isr	;volatile
  7436  001A4A  C04C  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  7437  001A4E  C04D  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  7438  001A52  C04E  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  7439  001A56  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  7440  001A5A  C001  F003         	movff	??_high_isr,??_high_isr+2
  7441  001A5E  6A02               	clrf	??_high_isr+1,c
  7442  001A60  6A01               	clrf	??_high_isr,c
  7443  001A62  5017               	movf	high_isr@counter,w,c
  7444  001A64  2401               	addwf	??_high_isr,w,c
  7445  001A66  0100               	movlb	0	; () banked
  7446  001A68  6FD9               	movwf	_finishTime& (0+255),b	;volatile
  7447  001A6A  5018               	movf	high_isr@counter+1,w,c
  7448  001A6C  2002               	addwfc	??_high_isr+1,w,c
  7449  001A6E  6FDA               	movwf	(_finishTime+1)& (0+255),b	;volatile
  7450  001A70  0E00               	movlw	0
  7451  001A72  2003               	addwfc	??_high_isr+2,w,c
  7452  001A74  6FDB               	movwf	(_finishTime+2)& (0+255),b	;volatile
  7453  001A76  0E00               	movlw	0
  7454  001A78  2004               	addwfc	??_high_isr+3,w,c
  7455  001A7A  6FDC               	movwf	(_finishTime+3)& (0+255),b	;volatile
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;color_1.c: 103: triggered = true;
  7459  001A7C  0E01               	movlw	1
  7460  001A7E  6E50               	movwf	_triggered,c	;volatile
  7461  001A80                     i2l3131:
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;color_1.c: 104: INT0IF = 0;
  7465  001A80  92F2               	bcf	intcon,1,c	;volatile
  7466  001A82                     i2l3133:
  7467                           
  7468                           ; BSR set to: 0
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;color_1.c: 105: return;
  7472  001A82  C016  F055         	movff	??_high_isr+21,btemp+3
  7473  001A86  C015  F054         	movff	??_high_isr+20,btemp+2
  7474  001A8A  C014  F053         	movff	??_high_isr+19,btemp+1
  7475  001A8E  C013  F052         	movff	??_high_isr+18,btemp
  7476  001A92  C012  FFF5         	movff	??_high_isr+17,tablat
  7477  001A96  C011  FFF8         	movff	??_high_isr+16,tblptru
  7478  001A9A  C010  FFF7         	movff	??_high_isr+15,tblptrh
  7479  001A9E  C00F  FFF6         	movff	??_high_isr+14,tblptrl
  7480  001AA2  C00E  FFF4         	movff	??_high_isr+13,prodh
  7481  001AA6  C00D  FFF3         	movff	??_high_isr+12,prodl
  7482  001AAA  C00C  FFDA         	movff	??_high_isr+11,fsr2h
  7483  001AAE  C00B  FFD9         	movff	??_high_isr+10,fsr2l
  7484  001AB2  C00A  FFE2         	movff	??_high_isr+9,fsr1h
  7485  001AB6  C009  FFE1         	movff	??_high_isr+8,fsr1l
  7486  001ABA  C008  FFEA         	movff	??_high_isr+7,fsr0h
  7487  001ABE  C007  FFE9         	movff	??_high_isr+6,fsr0l
  7488  001AC2  C006  FFFB         	movff	??_high_isr+5,pclatu
  7489  001AC6  C005  FFFA         	movff	??_high_isr+4,pclath
  7490  001ACA  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7491  001ACC  0011               	retfie		f
  7492  001ACE                     __end_of_high_isr:
  7493                           	opt stack 0
  7494                           pclatu	equ	0xFFB
  7495                           pclath	equ	0xFFA
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           intcon	equ	0xFF2
  7503                           intcon2	equ	0xFF1
  7504                           indf0	equ	0xFEF
  7505                           postinc0	equ	0xFEE
  7506                           fsr0h	equ	0xFEA
  7507                           fsr0l	equ	0xFE9
  7508                           wreg	equ	0xFE8
  7509                           fsr1h	equ	0xFE2
  7510                           fsr1l	equ	0xFE1
  7511                           bsr	equ	0xFE0
  7512                           indf2	equ	0xFDF
  7513                           postinc2	equ	0xFDE
  7514                           postdec2	equ	0xFDD
  7515                           fsr2h	equ	0xFDA
  7516                           fsr2l	equ	0xFD9
  7517                           status	equ	0xFD8
  7518                           pclatu	equ	0xFFB
  7519                           pclath	equ	0xFFA
  7520                           tblptru	equ	0xFF8
  7521                           tblptrh	equ	0xFF7
  7522                           tblptrl	equ	0xFF6
  7523                           tablat	equ	0xFF5
  7524                           prodh	equ	0xFF4
  7525                           prodl	equ	0xFF3
  7526                           intcon	equ	0xFF2
  7527                           intcon2	equ	0xFF1
  7528                           indf0	equ	0xFEF
  7529                           postinc0	equ	0xFEE
  7530                           fsr0h	equ	0xFEA
  7531                           fsr0l	equ	0xFE9
  7532                           wreg	equ	0xFE8
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           bsr	equ	0xFE0
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543                           	psect	rparam
  7544  0000                     pclatu	equ	0xFFB
  7545                           pclath	equ	0xFFA
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           intcon2	equ	0xFF1
  7554                           indf0	equ	0xFEF
  7555                           postinc0	equ	0xFEE
  7556                           fsr0h	equ	0xFEA
  7557                           fsr0l	equ	0xFE9
  7558                           wreg	equ	0xFE8
  7559                           fsr1h	equ	0xFE2
  7560                           fsr1l	equ	0xFE1
  7561                           bsr	equ	0xFE0
  7562                           indf2	equ	0xFDF
  7563                           postinc2	equ	0xFDE
  7564                           postdec2	equ	0xFDD
  7565                           fsr2h	equ	0xFDA
  7566                           fsr2l	equ	0xFD9
  7567                           status	equ	0xFD8
  7568                           
  7569                           	psect	temp
  7570  000052                     btemp:
  7571                           	opt stack 0
  7572  000052                     	ds	1
  7573  0000                     int$flags	set	btemp
  7574  0000                     wtemp6	set	btemp+1
  7575                           pclatu	equ	0xFFB
  7576                           pclath	equ	0xFFA
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           indf0	equ	0xFEF
  7586                           postinc0	equ	0xFEE
  7587                           fsr0h	equ	0xFEA
  7588                           fsr0l	equ	0xFE9
  7589                           wreg	equ	0xFE8
  7590                           fsr1h	equ	0xFE2
  7591                           fsr1l	equ	0xFE1
  7592                           bsr	equ	0xFE0
  7593                           indf2	equ	0xFDF
  7594                           postinc2	equ	0xFDE
  7595                           postdec2	equ	0xFDD
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     74      81
    BANK0           128     89     105
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 11
		 -> value(BANK0[8]), STR_2(CODE[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _calcula->___ftmul
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    ___ftdiv->___ftpack

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calcula
    _calcula->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   77480
                                             86 BANK0      3     3      0
                            _calcula
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     341
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     155
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _calcula                                             14    14      0   76367
                                             72 BANK0     14    14      0
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                         _lcd_gotoxy
                            _lcd_msg
               _prepareForInterrupts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   61922
                                             34 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   14620
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   14341
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3472
                                             59 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6221
                                             65 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             45 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             45 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3175
                                             53 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5034
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4618
                                             16 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     155
                                             45 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     738
                                             45 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     769
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     434
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           4     3      1     505
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0     124
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3633
                                             53 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2893
                                             45 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calcula
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft
       ___ftpack
     _lcd_gotoxy
       _lcd_cmd
         _lcd_lat
         _manda
     _lcd_msg
       _lcd_putc
         _lcd_cmd
           _lcd_lat
           _manda
         _lcd_dwr
           _lcd_lat
           _manda
     _prepareForInterrupts
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      69       5       82.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4A      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      15        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 12 19:28:53 2018

                  lcd_cmd_hf@x 002F                             l81 1B06                             l75 2374  
                 ___awdiv@sign 0039                             bsr 000FE0            ___wmul@multiplicand 003E  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_OSC$XT 000000  
                 ___ftadd@exp1 009B                   ___ftadd@exp2 009A                   ___ftadd@sign 0099  
                          l110 246A                            l112 2472                            l200 07C2  
                          l113 247A                            l121 231E                            l130 24A8  
                          l114 2482                            l122 22F6                            l210 08CE  
                          l131 24AC                            l211 0934                            l203 07BE  
                          l140 24E8                            l204 07E6                            l141 24EA  
                          l109 248A                            l213 095A                            l142 24F2  
                          l206 0DE8                            l230 0B5E                            l214 099A  
                          l143 24F4                            l127 24B2                            l231 0B48  
                          l215 0A60                            l207 07FA                            l144 24FC  
                          l240 0C64                            l224 0AC6                            l208 083C  
                          l129 24C2                            l241 0C68                            l138 24DE  
                          l250 0E1C                            l242 0C8A                            l234 0C20  
                          l218 0A08                            l139 24E0                            l243 0DBC  
                          l235 0B8C                            l500 1FC4                            l180 1062  
                          l252 0E3C                            l244 0CDA                            l228 0B32  
                          l173 1490                            l253 0E5E                            l237 0C40  
                          l502 2002                            l262 0EFE                            l246 0DDE  
                          l238 0C2A                            l190 069A                            l503 1FF8  
                          l183 1116                            l255 0E80                            l247 0DC8  
                          l191 06B2                            l440 2128                            l432 20D0  
                          l176 155E                            l184 126C                            l256 0E88  
                          l441 2136                            l433 20E0                            l257 0EAC  
                          l249 0E00                            l193 06E0                            l186 1320  
                          l258 0EB4                            l603 2562                            l531 161E  
                          l435 20FE                            l179 113C                            l195 07B0  
                          l436 20F6                            l452 2210                            l196 079A  
                          l541 167A                            l621 1CBA                            l613 1C1E  
                          l453 221A                            l445 21D6                            l197 0762  
                          l550 16B8                            l542 1670                            l622 1CAE  
                          l470 196C                            l454 2228                            l446 21E2  
                          l551 16AE                            l527 15F4                            l615 1C96  
                          l471 195C                            l439 211E                            l560 1E06  
                          l536 1684                            l624 1CD6                            l616 1C86  
                          l464 189E                            l448 21F8                            l553 16DC  
                          l609 243C                            l449 21F0                            l562 1E2E  
                          l554 16F8                            l466 18BC                            l570 17A6  
                          l563 1E6C                            l555 1728                            l467 18FE  
                          l571 17E0                            l564 1E92                            l476 1990  
                          l468 192E                            l580 1868                            l572 1808  
                          l628 2586                            l477 1984                            l581 185C  
                          l654 216E                            l574 1844                            l655 2162  
                          l575 1834                            l496 1FA6                            l664 2250  
                          l568 177A                            l592 1D12                            l497 1F9C  
                          l585 205C                            l665 2244                            l586 208C  
                          l658 21A2                            l594 1D3A                            l499 1FDA  
                          l659 21B0                            l675 22AA                            l595 1D6C  
                          l668 2278                            l676 229E                            l596 1D7C  
                          l669 2286                            l598 1D94                            l599 1DA4  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _lcd 004F  
                 ___awmod@sign 0033                            wreg 000FE8                    _sprintf$835 00AF  
                  lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031                   __CFG_LVP$OFF 000000  
                 ___ftdiv@cntr 003F                   ___ftdiv@sign 0044                   __CFG_WDT$OFF 000000  
                         l4003 0C2A                           l3169 20B8                           l4093 0EFA  
                         l3931 099A                           l3939 09E2                           l3983 0B58  
                         l3959 0ACA                           l3979 0B48                           STR_1 0677  
                         STR_2 0688                           STR_3 0682                           _GIEH 007F97  
                         _GIEL 007F96                           u3211 15B2                           u3140 1F8E  
                         u4020 2254                           u4100 073E                           u3221 15C6  
                         u3310 164E                           u4050 2316                           u3250 15E6  
                         u4210 096C                           u3180 200C                           u4060 233E  
                         u4220 09AC                           u3421 1CF8                           u3350 168C  
                         u3510 2102                           u3280 1610                           u4320 0B6C  
                         _IPEN 007E87                           u4057 230C                           u3441 1D22  
                         u4250 09E2                           u4170 0874                           u4067 2334  
                         u3380 16C0                           u4500 0EDA                           u4350 0C4E  
                         u3711 178A                           u4175 086A                           u4520 0F18  
                         u4360 0C5E                           u3570 21FC                           u4290 0B02  
                         u4531 1DEE                           u3901 1C02                           u4551 1E16  
                         u4607 1EE0                           u3920 1C3C                           u3840 1996  
                         u4617 1EF4                           u3770 186E                           u4490 0EBC  
                         u4707 25B0                           u3691 175E                           u4627 1F0A  
                         u3925 1C34                           u4637 1F1E                           u4647 1F32  
                         u3960 1CC0                           u4657 1F46                           u4667 1F5A  
                         u4677 1F6E                           u4597 2380                           i2l70 1A46  
                         u3990 2172                           u4687 23FC                           u4697 23B6  
                         _TMR1 000FCE                   __CFG_PWRT$ON 000000                           _main 2346  
                 ___ftpack@arg 002E                   ___ftpack@exp 0031                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0052                           prodh 000FF4  
                         prodl 000FF3                           start 00D8                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 0084                   ___param_bank 000000  
                 ___ftmul@sign 0085                   ___fttol@exp1 009B                   ___fttol@lval 0097  
                        ?_main 0001                __end_of___awdiv 2140                __end_of___ftadd 174E  
              __end_of___awmod 2232                __end_of___ftdiv 1EC4                __end_of___ftneg 2570  
              __end_of___lldiv 21C2                __end_of___ftmul 1DDE                ___awdiv@divisor 0036  
              __end_of___llmod 2298                __end_of___ftsub 2466                __end_of___fttol 1CE8  
              ___awdiv@counter 0038                          _PORTB 000F81                          _PORTD 000F83  
              __end_of_calcula 1BF0                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                   ___lltoft@exp 003E  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 23DE  
              __end_of_lcd_lat 25BE                __end_of_lcd_dwr 2424                __end_of_lcd_msg 2346  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers 0629                          _manda 24D4  
                        _first 0051                          _scale 0F26                __end_of_isdigit 258E  
                ___ftpack@sign 0032                          _value 00E1                __end_of_low_isr 00D8  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                          wtemp6 0053                __end_of_sprintf 0F26  
              __initialization 2500                   __end_of_main 2394                         ??_main 00D6  
                ___fttol@sign1 0096                  __activetblptr 000002           __size_of__tdiv_to_l_ 0132  
                       ?_manda 0001               ___llmod@dividend 002E                         ?_scale 0086  
             ___awdiv@dividend 0034               __end_of___ftpack 202C               __end_of___lltoft 22F4  
                       _INT0IE 007F94                         _INT0IF 007F91                         i1l1991 0080  
                       i2l3131 1A80                         i2l3133 1A82                         _TMR1IE 007CE8  
                       _TMR1IF 007CF0                         _TMR1CS 007E69                         _TMR1IP 007CF8  
                       _TMR1ON 007E68                 __CFG_XINST$OFF 000000               __end_of__powers_ 0650  
             __end_of_lcd_init 1F7E               __end_of_high_isr 1ACE               __end_of_lcd_putc 24A0  
                       ___ftge 202C                         ___wmul 2526                      ??___awdiv 0038  
                    ??___ftadd 0096                 __CFG_STVREN$ON 000000                      ??___awmod 0032  
                    ??___ftdiv 003C                      ??___ftneg 0031                      ??___lldiv 0036  
                    ??___ftmul 0048                      ??___llmod 0036                      ??___ftsub 004B  
                    ??___fttol 0091                      ??_calcula 00C8                         _fround 1346  
__size_of_prepareForInterrupts 000E                         clear_0 2506                         clear_1 2512  
             ___awdiv@quotient 003A                ___awmod@divisor 0030                ___awmod@counter 0032  
                    ??_lcd_cmd 002F                      ??_lcd_lat 002E                      ??_lcd_dwr 002F  
                    ??_lcd_msg 0034          ___ftmul@f3_as_product 0081                      ??_isdigit 002E  
                 __mediumconst 0000                      ??_low_isr 0019                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8              lcd_gotoxy@ADDRESS 0034  
                    ??_sprintf 00A9                     __accesstop 0080        __end_of__initialization 2518  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0090                     ___ftadd@f2 0093  
                   ___ftge@ff1 002E                     ___ftge@ff2 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0036                     ___ftdiv@f2 0039                     ___ftdiv@f3 0040  
                   ___ftneg@f1 002E                     ___ftmul@f1 0042                     ___ftmul@f2 0045  
                   ___ftsub@f1 009C                     ___ftsub@f2 009F                     ___fttol@f1 008D  
               __pcstackCOMRAM 0001                     ___lltoft@c 0036                  __end_of_manda 2500  
                __end_of_scale 1346                     __div_to_l_ 1880                        ??_manda 002E  
              __div_to_l_@exp1 0039                __div_to_l_@cntr 0038                        ??_scale 004B  
              __div_to_l_@quot 0034                   sprintf@width 00BA                     __pbssBANK0 00D9  
                __div_to_l_@f1 002E                  __div_to_l_@f2 0031             __CFG_CCP2MX$PORTBE 000000  
                      ?___ftge 002E                        ?___wmul 003C                        ?_fround 0086  
                    ?___ftpack 002E                      ?___lltoft 0036                        _T1CKPS0 007E6C  
                      _T1CKPS1 007E6D                        _INTEDG0 007F8E                     _lcd_cmd_hf 258E  
           calcula@elapsedTime 00CC                     _lcd_gotoxy 24A0                     _finishTime 00D9  
                    ?_lcd_init 0001                      ?_high_isr 0001                      ?_lcd_putc 0001  
            __end_of__npowers_ 0677                        __Hparam 0000                        __Lparam 0000  
              __size_of___ftge 0090                        ___awdiv 20BC                        ___ftadd 15A0  
                      ___awmod 21C2                        ___ftdiv 1DDE                        ___ftneg 254C  
                      ___lldiv 2140                __size_of___wmul 0026                        ___ftmul 1CE8  
                      ___llmod 2232                        ___ftsub 2424                        ___fttol 1BF0  
                   _fround$832 008C                     _fround$833 0089                   __psmallconst 0600  
                      _calcula 1ACE                        __pcinit 2500                     ??___ftpack 0033  
              __size_of_fround 025A                        __ramtop 0600                     ??___lltoft 003A  
                      __ptext0 2346                        __ptext1 1EC4                        __ptext2 258E  
                      __ptext3 1ACE                        __ptext4 068C                        __ptext5 0F26  
                      __ptext6 2570                        __ptext7 1346                        __ptext8 2526  
                      __ptext9 1CE8                        _lcd_cmd 2394                        _lcd_lat 25A8  
                      _lcd_dwr 23DE                        _lcd_msg 22F4                      _T1CONbits 000FCD  
                  ?__div_to_l_ 002E                        _dpowers 0601                        _isdigit 2570  
             ___awmod@dividend 002E                        _low_isr 0018                        _sprintf 068C  
                   ??_lcd_init 0031                     ??_high_isr 0001                 __pintcode_body 19A8  
                   ??_lcd_putc 0031           end_of_initialization 2518                  __Lmediumconst 0000  
                      int_func 19A8                ___lldiv@divisor 0032                ___lldiv@counter 003A  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
               __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0031                  ??__tdiv_to_l_ 0034  
                  ?_lcd_cmd_hf 0001                    ?_lcd_gotoxy 0031   __end_of_prepareForInterrupts 25CC  
                  ___ftdiv@exp 0043            __size_of__div_to_l_ 0128                    ___ftmul@exp 0080  
               __end_of___ftge 20BC                 __end_of___wmul 254C                 __end_of_fround 15A0  
          start_initialization 2500            __end_of__tdiv_to_l_ 1880                high_isr@counter 0017  
              ___llmod@divisor 0032                ___llmod@counter 0036            __size_of_lcd_cmd_hf 001A  
                     ??___ftge 0034            __size_of_lcd_gotoxy 0034                       ??___wmul 0040  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 004B                  sprintf@tmpval 00BC  
                   fround@prec 008F              __size_of___ftpack 00AE              __size_of___lltoft 005C  
                  __pbssCOMRAM 004B                  __pcstackBANK0 0080              __size_of_lcd_init 00BA  
            __size_of_high_isr 1AC6                    sprintf@flag 00B8              __size_of_lcd_putc 003A  
                  sprintf@fval 00C2                    sprintf@prec 00C5                      __pintcode 0008  
                     ?___awdiv 0034                       ?___ftadd 0090                       ?___awmod 002E  
                     ?___ftdiv 0036                       ?___ftneg 002E                       ?___lldiv 002E  
                     ?___ftmul 0042                       ?___llmod 002E                       ?___ftsub 009C  
                    __npowers_ 0650                       ?___fttol 008D                       ?_calcula 0001  
                  __pintcodelo 0018           _prepareForInterrupts 25BE                    __tdiv_to_l_ 174E  
                     ?_lcd_cmd 0001                       ?_lcd_lat 0001                       ?_lcd_dwr 0001  
                     ?_lcd_msg 0032                   ??__div_to_l_ 0034                    __smallconst 0600  
                     ?_isdigit 0001                       ?_low_isr 0001                      _scale$834 0089  
               __size_of_manda 002C                       ?_sprintf 00A2                 __size_of_scale 0420  
               ___wmul@product 0040             __end_of__div_to_l_ 19A8               __CFG_WDTPS$32768 000000  
        ?_prepareForInterrupts 0001              ___wmul@multiplier 003C                      _startTime 00DD  
                    _triggered 0050                   ??_lcd_cmd_hf 002F                      lcd_putc@c 0031  
                 ??_lcd_gotoxy 0032                      manda@dato 002E                    calcula@freq 00D0  
                  calcula@temp 00D3                       __Hrparam 0000                       __Lrparam 0000  
           __end_of_lcd_cmd_hf 25A8             __end_of_lcd_gotoxy 24D4               __size_of___awdiv 0084  
             __size_of___ftadd 01AE               __size_of___awmod 0070               __size_of___ftdiv 00E6  
             __size_of___ftneg 0024               __size_of___lldiv 0082               __size_of___ftmul 00F6  
             __size_of___llmod 0066               __size_of___ftsub 0042               __size_of___fttol 00F8  
                     ___ftpack 1F7E               __size_of_calcula 0122                       ___lltoft 2298  
                  _isdigit$485 002F               __size_of_lcd_cmd 004A               __size_of_lcd_lat 0016  
             __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052                     sprintf@exp 00C0  
                   sprintf@val 00B4               __size_of_isdigit 001E               __size_of_low_isr 00C0  
                     __ptext10 21C2                       __ptext11 20BC                       __ptext20 254C  
                     __ptext12 174E                       __ptext21 202C                       __ptext13 1880  
                     __ptext30 1DDE                       __ptext22 25BE                       __ptext14 2298  
                     __ptext31 1F7E                       __ptext23 22F4                       __ptext15 2232  
                     __ptext24 2466                       __ptext16 2140                       __ptext25 23DE  
                     __ptext17 1BF0                       __ptext26 24A0                       __ptext18 2424  
                     __ptext27 2394                       __ptext19 15A0                       __ptext28 24D4  
                     __ptext29 25A8                       __powers_ 0629                       _lcd_init 1EC4  
                     _high_isr 0008                       _lcd_putc 2466               __size_of_sprintf 089A  
                __size_of_main 004E         ??_prepareForInterrupts 002E                       int$flags 0052  
                     lcd_cmd@x 0030                       lcd_dwr@x 0030                       lcd_msg@c 0032  
                     main@acum 00D8                       isdigit@c 0030                       scale@scl 008C  
                     intlevel1 0000                       intlevel2 0000                      sprintf@ap 00B2  
             __tdiv_to_l_@exp1 003C               __tdiv_to_l_@cntr 003B                      sprintf@sp 00A2  
             __tdiv_to_l_@quot 0037               ___lldiv@dividend 002E                  _overflowCount 004B  
                 ?__tdiv_to_l_ 002E                       sprintf@c 00C7                       sprintf@f 00A4  
             ___lldiv@quotient 0036  
