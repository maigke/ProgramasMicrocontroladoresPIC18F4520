

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 12 04:35:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4520 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt stack 0
    88  000600  00                 	db	0
    89  000601                     _dpowers:
    90                           	opt stack 0
    91  000601  0001               	dw	1
    92  000603  0000               	dw	0
    93  000605  000A               	dw	10
    94  000607  0000               	dw	0
    95  000609  0064               	dw	100
    96  00060B  0000               	dw	0
    97  00060D  03E8               	dw	1000
    98  00060F  0000               	dw	0
    99  000611  2710               	dw	10000
   100  000613  0000               	dw	0
   101  000615  86A0               	dw	34464
   102  000617  0001               	dw	1
   103  000619  4240               	dw	16960
   104  00061B  000F               	dw	15
   105  00061D  9680               	dw	38528
   106  00061F  0098               	dw	152
   107  000621  E100               	dw	57600
   108  000623  05F5               	dw	1525
   109  000625  CA00               	dw	51712
   110  000627  3B9A               	dw	15258
   111  000629                     __end_of_dpowers:
   112                           	opt stack 0
   113  000629                     __powers_:
   114                           	opt stack 0
   115  000629  00                 	db	0
   116  00062A  80                 	db	128
   117  00062B  3F                 	db	63
   118  00062C  00                 	db	0
   119  00062D  20                 	db	32
   120  00062E  41                 	db	65
   121  00062F  00                 	db	0
   122  000630  C8                 	db	200
   123  000631  42                 	db	66
   124  000632  00                 	db	0
   125  000633  7A                 	db	122
   126  000634  44                 	db	68
   127  000635  40                 	db	64
   128  000636  1C                 	db	28
   129  000637  46                 	db	70
   130  000638  50                 	db	80
   131  000639  C3                 	db	195
   132  00063A  47                 	db	71
   133  00063B  24                 	db	36
   134  00063C  74                 	db	116
   135  00063D  49                 	db	73
   136  00063E  97                 	db	151
   137  00063F  18                 	db	24
   138  000640  4B                 	db	75
   139  000641  BC                 	db	188
   140  000642  BE                 	db	190
   141  000643  4C                 	db	76
   142  000644  6B                 	db	107
   143  000645  6E                 	db	110
   144  000646  4E                 	db	78
   145  000647  03                 	db	3
   146  000648  15                 	db	21
   147  000649  50                 	db	80
   148  00064A  79                 	db	121
   149  00064B  AD                 	db	173
   150  00064C  60                 	db	96
   151  00064D  F3                 	db	243
   152  00064E  49                 	db	73
   153  00064F  71                 	db	113
   154  000650                     __end_of__powers_:
   155                           	opt stack 0
   156  000650                     __npowers_:
   157                           	opt stack 0
   158  000650  00                 	db	0
   159  000651  80                 	db	128
   160  000652  3F                 	db	63
   161  000653  CD                 	db	205
   162  000654  CC                 	db	204
   163  000655  3D                 	db	61
   164  000656  D7                 	db	215
   165  000657  23                 	db	35
   166  000658  3C                 	db	60
   167  000659  12                 	db	18
   168  00065A  83                 	db	131
   169  00065B  3A                 	db	58
   170  00065C  B7                 	db	183
   171  00065D  D1                 	db	209
   172  00065E  38                 	db	56
   173  00065F  C6                 	db	198
   174  000660  27                 	db	39
   175  000661  37                 	db	55
   176  000662  38                 	db	56
   177  000663  86                 	db	134
   178  000664  35                 	db	53
   179  000665  C0                 	db	192
   180  000666  D6                 	db	214
   181  000667  33                 	db	51
   182  000668  CC                 	db	204
   183  000669  2B                 	db	43
   184  00066A  32                 	db	50
   185  00066B  70                 	db	112
   186  00066C  89                 	db	137
   187  00066D  30                 	db	48
   188  00066E  E7                 	db	231
   189  00066F  DB                 	db	219
   190  000670  2E                 	db	46
   191  000671  E5                 	db	229
   192  000672  3C                 	db	60
   193  000673  1E                 	db	30
   194  000674  42                 	db	66
   195  000675  A2                 	db	162
   196  000676  0D                 	db	13
   197  000677                     __end_of__npowers_:
   198                           	opt stack 0
   199  0000                     _TMR1	set	4046
   200  0000                     _PORTB	set	3969
   201  0000                     _PORTD	set	3971
   202  0000                     _T1CONbits	set	4045
   203  0000                     _INTEDG0	set	32654
   204  0000                     _INT0IE	set	32660
   205  0000                     _GIEL	set	32662
   206  0000                     _GIEH	set	32663
   207  0000                     _IPEN	set	32391
   208  0000                     _TMR1IE	set	31976
   209  0000                     _TMR1IP	set	31992
   210  0000                     _TMR1ON	set	32360
   211  0000                     _TMR1CS	set	32361
   212  0000                     _T1CKPS0	set	32364
   213  0000                     _T1CKPS1	set	32365
   214  0000                     _INT0IF	set	32657
   215  0000                     _TMR1IF	set	31984
   216  000677                     STR_1:
   217  000677  46                 	db	70	;'F'
   218  000678  72                 	db	114	;'r'
   219  000679  65                 	db	101	;'e'
   220  00067A  63                 	db	99	;'c'
   221  00067B  75                 	db	117	;'u'
   222  00067C  65                 	db	101	;'e'
   223  00067D  6E                 	db	110	;'n'
   224  00067E  63                 	db	99	;'c'
   225  00067F  69                 	db	105	;'i'
   226  000680  61                 	db	97	;'a'
   227  000681  00                 	db	0
   228  000682                     STR_3:
   229  000682  25                 	db	37
   230  000683  35                 	db	53	;'5'
   231  000684  2E                 	db	46
   232  000685  33                 	db	51	;'3'
   233  000686  66                 	db	102	;'f'
   234  000687  00                 	db	0
   235  000688                     STR_2:
   236  000688  3A                 	db	58	;':'
   237  000689  29                 	db	41
   238  00068A  00                 	db	0
   239                           
   240                           ; #config settings
   241  00068B  00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           	psect	cinit
   244  002500                     __pcinit:
   245                           	opt stack 0
   246  002500                     start_initialization:
   247                           	opt stack 0
   248  002500                     __initialization:
   249                           	opt stack 0
   250                           
   251                           ; Clear objects allocated to BANK0 (16 bytes)
   252  002500  EE00  F0D9         	lfsr	0,__pbssBANK0
   253  002504  0E10               	movlw	16
   254  002506                     clear_0:
   255  002506  6AEE               	clrf	postinc0,c
   256  002508  06E8               	decf	wreg,f,c
   257  00250A  E1FD               	bnz	clear_0
   258                           
   259                           ; Clear objects allocated to COMRAM (7 bytes)
   260  00250C  EE00  F04B         	lfsr	0,__pbssCOMRAM
   261  002510  0E07               	movlw	7
   262  002512                     clear_1:
   263  002512  6AEE               	clrf	postinc0,c
   264  002514  06E8               	decf	wreg,f,c
   265  002516  E1FD               	bnz	clear_1
   266  002518                     end_of_initialization:
   267                           	opt stack 0
   268  002518                     __end_of__initialization:
   269                           	opt stack 0
   270  002518  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   271  00251A  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   272  00251C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   273  00251E  6EF8               	movwf	tblptru,c
   274  002520  0100               	movlb	0
   275  002522  EFA3  F011         	goto	_main	;jump to C main() function
   276                           tblptru	equ	0xFF8
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	bssCOMRAM
   281  00004B                     __pbssCOMRAM:
   282                           	opt stack 0
   283  00004B                     _overflowCount:
   284                           	opt stack 0
   285  00004B                     	ds	4
   286  00004F                     _lcd:
   287                           	opt stack 0
   288  00004F                     	ds	1
   289  000050                     _triggered:
   290                           	opt stack 0
   291  000050                     	ds	1
   292  000051                     _first:
   293                           	opt stack 0
   294  000051                     	ds	1
   295                           tblptru	equ	0xFF8
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssBANK0
   300  0000D9                     __pbssBANK0:
   301                           	opt stack 0
   302  0000D9                     _finishTime:
   303                           	opt stack 0
   304  0000D9                     	ds	4
   305  0000DD                     _startTime:
   306                           	opt stack 0
   307  0000DD                     	ds	4
   308  0000E1                     _value:
   309                           	opt stack 0
   310  0000E1                     	ds	8
   311                           tblptru	equ	0xFF8
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           
   315                           	psect	cstackBANK0
   316  000080                     __pcstackBANK0:
   317                           	opt stack 0
   318  000080                     ___ftmul@exp:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x0
   322  000080                     	ds	1
   323  000081                     ___ftmul@f3_as_product:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x1
   327  000081                     	ds	3
   328  000084                     ___ftmul@cntr:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x4
   332  000084                     	ds	1
   333  000085                     ___ftmul@sign:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x5
   337  000085                     	ds	1
   338  000086                     ?_fround:
   339                           	opt stack 0
   340  000086                     ?_scale:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x6
   344  000086                     	ds	3
   345  000089                     _fround$833:
   346                           	opt stack 0
   347  000089                     _scale$834:
   348                           	opt stack 0
   349                           
   350                           ; 3 bytes @ 0x9
   351  000089                     	ds	3
   352  00008C                     scale@scl:
   353                           	opt stack 0
   354  00008C                     _fround$832:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0xC
   358  00008C                     	ds	1
   359  00008D                     ?___fttol:
   360                           	opt stack 0
   361  00008D                     ___fttol@f1:
   362                           	opt stack 0
   363                           
   364                           ; 3 bytes @ 0xD
   365  00008D                     	ds	2
   366  00008F                     fround@prec:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xF
   370  00008F                     	ds	1
   371  000090                     ?___ftadd:
   372                           	opt stack 0
   373  000090                     ___ftadd@f1:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x10
   377  000090                     	ds	1
   378  000091                     ??___fttol:
   379                           
   380                           ; 1 bytes @ 0x11
   381  000091                     	ds	2
   382  000093                     ___ftadd@f2:
   383                           	opt stack 0
   384                           
   385                           ; 3 bytes @ 0x13
   386  000093                     	ds	3
   387  000096                     ??___ftadd:
   388  000096                     ___fttol@sign1:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x16
   392  000096                     	ds	1
   393  000097                     ___fttol@lval:
   394                           	opt stack 0
   395                           
   396                           ; 4 bytes @ 0x17
   397  000097                     	ds	2
   398  000099                     ___ftadd@sign:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x19
   402  000099                     	ds	1
   403  00009A                     ___ftadd@exp2:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x1A
   407  00009A                     	ds	1
   408  00009B                     ___ftadd@exp1:
   409                           	opt stack 0
   410  00009B                     ___fttol@exp1:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x1B
   414  00009B                     	ds	1
   415  00009C                     ?___ftsub:
   416                           	opt stack 0
   417  00009C                     ___ftsub@f1:
   418                           	opt stack 0
   419                           
   420                           ; 3 bytes @ 0x1C
   421  00009C                     	ds	3
   422  00009F                     ___ftsub@f2:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x1F
   426  00009F                     	ds	3
   427  0000A2                     ?_sprintf:
   428                           	opt stack 0
   429  0000A2                     sprintf@sp:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x22
   433  0000A2                     	ds	2
   434  0000A4                     sprintf@f:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x24
   438  0000A4                     	ds	5
   439  0000A9                     ??_sprintf:
   440                           
   441                           ; 1 bytes @ 0x29
   442  0000A9                     	ds	6
   443  0000AF                     _sprintf$835:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x2F
   447  0000AF                     	ds	3
   448  0000B2                     sprintf@ap:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x32
   452  0000B2                     	ds	2
   453  0000B4                     sprintf@val:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x34
   457  0000B4                     	ds	4
   458  0000B8                     sprintf@flag:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x38
   462  0000B8                     	ds	2
   463  0000BA                     sprintf@width:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x3A
   467  0000BA                     	ds	2
   468  0000BC                     sprintf@tmpval:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x3C
   472  0000BC                     	ds	4
   473  0000C0                     sprintf@exp:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x40
   477  0000C0                     	ds	2
   478  0000C2                     sprintf@fval:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x42
   482  0000C2                     	ds	3
   483  0000C5                     sprintf@prec:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x45
   487  0000C5                     	ds	2
   488  0000C7                     sprintf@c:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x47
   492  0000C7                     	ds	1
   493  0000C8                     ??_calcula:
   494                           
   495                           ; 1 bytes @ 0x48
   496  0000C8                     	ds	4
   497  0000CC                     calcula@elapsedTime:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x4C
   501  0000CC                     	ds	4
   502  0000D0                     calcula@freq:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x50
   506  0000D0                     	ds	3
   507  0000D3                     calcula@temp:
   508                           	opt stack 0
   509                           
   510                           ; 3 bytes @ 0x53
   511  0000D3                     	ds	3
   512  0000D6                     ??_main:
   513                           
   514                           ; 1 bytes @ 0x56
   515  0000D6                     	ds	2
   516  0000D8                     main@acum:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x58
   520  0000D8                     	ds	1
   521                           tblptru	equ	0xFF8
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           
   525                           	psect	cstackCOMRAM
   526  000001                     __pcstackCOMRAM:
   527                           	opt stack 0
   528  000001                     ??_high_isr:
   529  000001                     
   530                           ; 1 bytes @ 0x0
   531  000001                     	ds	22
   532  000017                     high_isr@counter:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x16
   536  000017                     	ds	2
   537  000019                     ??_low_isr:
   538                           
   539                           ; 1 bytes @ 0x18
   540  000019                     	ds	21
   541  00002E                     ??_isdigit:
   542  00002E                     ??_lcd_lat:
   543  00002E                     ?___awmod:
   544                           	opt stack 0
   545  00002E                     ?___ftpack:
   546                           	opt stack 0
   547  00002E                     ?___ftneg:
   548                           	opt stack 0
   549  00002E                     ?__tdiv_to_l_:
   550                           	opt stack 0
   551  00002E                     ?__div_to_l_:
   552                           	opt stack 0
   553  00002E                     ?___lldiv:
   554                           	opt stack 0
   555  00002E                     ?___llmod:
   556                           	opt stack 0
   557  00002E                     manda@dato:
   558                           	opt stack 0
   559  00002E                     ___awmod@dividend:
   560                           	opt stack 0
   561  00002E                     __div_to_l_@f1:
   562                           	opt stack 0
   563  00002E                     ___ftpack@arg:
   564                           	opt stack 0
   565  00002E                     __tdiv_to_l_@f1:
   566                           	opt stack 0
   567  00002E                     ___ftge@ff1:
   568                           	opt stack 0
   569  00002E                     ___ftneg@f1:
   570                           	opt stack 0
   571  00002E                     ___lldiv@dividend:
   572                           	opt stack 0
   573  00002E                     ___llmod@dividend:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x2D
   577  00002E                     	ds	1
   578  00002F                     ??_lcd_dwr:
   579  00002F                     ??_lcd_cmd:
   580  00002F                     lcd_cmd_hf@x:
   581                           	opt stack 0
   582  00002F                     _isdigit$485:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x2E
   586  00002F                     	ds	1
   587  000030                     lcd_cmd@x:
   588                           	opt stack 0
   589  000030                     lcd_dwr@x:
   590                           	opt stack 0
   591  000030                     isdigit@c:
   592                           	opt stack 0
   593  000030                     ___awmod@divisor:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x2F
   597  000030                     	ds	1
   598  000031                     ??_lcd_init:
   599  000031                     lcd_putc@c:
   600                           	opt stack 0
   601  000031                     lcd_gotoxy@y:
   602                           	opt stack 0
   603  000031                     ___ftpack@exp:
   604                           	opt stack 0
   605  000031                     __div_to_l_@f2:
   606                           	opt stack 0
   607  000031                     __tdiv_to_l_@f2:
   608                           	opt stack 0
   609  000031                     ___ftge@ff2:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x30
   613  000031                     	ds	1
   614  000032                     ??_lcd_gotoxy:
   615  000032                     ___awmod@counter:
   616                           	opt stack 0
   617  000032                     ___ftpack@sign:
   618                           	opt stack 0
   619  000032                     lcd_msg@c:
   620                           	opt stack 0
   621  000032                     ___lldiv@divisor:
   622                           	opt stack 0
   623  000032                     ___llmod@divisor:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x31
   627  000032                     	ds	1
   628  000033                     ??___ftpack:
   629  000033                     lcd_gotoxy@x:
   630                           	opt stack 0
   631  000033                     ___awmod@sign:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x32
   635  000033                     	ds	1
   636  000034                     ??__tdiv_to_l_:
   637  000034                     ??___ftge:
   638  000034                     ?___awdiv:
   639                           	opt stack 0
   640  000034                     lcd_gotoxy@ADDRESS:
   641                           	opt stack 0
   642  000034                     ___awdiv@dividend:
   643                           	opt stack 0
   644  000034                     __div_to_l_@quot:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x33
   648  000034                     	ds	2
   649  000036                     ?___ftdiv:
   650                           	opt stack 0
   651  000036                     ?___lltoft:
   652                           	opt stack 0
   653  000036                     ___llmod@counter:
   654                           	opt stack 0
   655  000036                     ___awdiv@divisor:
   656                           	opt stack 0
   657  000036                     ___ftdiv@f1:
   658                           	opt stack 0
   659  000036                     ___lldiv@quotient:
   660                           	opt stack 0
   661  000036                     ___lltoft@c:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x35
   665  000036                     	ds	1
   666  000037                     __tdiv_to_l_@quot:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x36
   670  000037                     	ds	1
   671  000038                     ___awdiv@counter:
   672                           	opt stack 0
   673  000038                     __div_to_l_@cntr:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x37
   677  000038                     	ds	1
   678  000039                     ___awdiv@sign:
   679                           	opt stack 0
   680  000039                     __div_to_l_@exp1:
   681                           	opt stack 0
   682  000039                     ___ftdiv@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x38
   686  000039                     	ds	1
   687  00003A                     ??___lltoft:
   688  00003A                     ___lldiv@counter:
   689                           	opt stack 0
   690  00003A                     ___awdiv@quotient:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x39
   694  00003A                     	ds	1
   695  00003B                     __tdiv_to_l_@cntr:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x3A
   699  00003B                     	ds	1
   700  00003C                     ??___ftdiv:
   701  00003C                     ?___wmul:
   702                           	opt stack 0
   703  00003C                     __tdiv_to_l_@exp1:
   704                           	opt stack 0
   705  00003C                     ___wmul@multiplier:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x3B
   709  00003C                     	ds	2
   710  00003E                     ___lltoft@exp:
   711                           	opt stack 0
   712  00003E                     ___wmul@multiplicand:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x3D
   716  00003E                     	ds	1
   717  00003F                     ___ftdiv@cntr:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x3E
   721  00003F                     	ds	1
   722  000040                     ___wmul@product:
   723                           	opt stack 0
   724  000040                     ___ftdiv@f3:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x3F
   728  000040                     	ds	2
   729  000042                     ?___ftmul:
   730                           	opt stack 0
   731  000042                     ___ftmul@f1:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x41
   735  000042                     	ds	1
   736  000043                     ___ftdiv@exp:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x42
   740  000043                     	ds	1
   741  000044                     ___ftdiv@sign:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x43
   745  000044                     	ds	1
   746  000045                     ___ftmul@f2:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x44
   750  000045                     	ds	3
   751  000048                     ??___ftmul:
   752                           
   753                           ; 1 bytes @ 0x47
   754  000048                     	ds	3
   755  00004B                     tblptru	equ	0xFF8
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           
   759                           ; 1 bytes @ 0x4A
   760 ;;
   761 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   762 ;;
   763 ;; *************** function _main *****************
   764 ;; Defined at:
   765 ;;		line 111 in file "color_1.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  acum            1   88[BANK0 ] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   779 ;;      Params:         0       0       0       0       0       0       0
   780 ;;      Locals:         0       1       0       0       0       0       0
   781 ;;      Temps:          0       2       0       0       0       0       0
   782 ;;      Totals:         0       3       0       0       0       0       0
   783 ;;Total ram usage:        3 bytes
   784 ;; Hardware stack levels required when called:    7
   785 ;; This function calls:
   786 ;;		_calcula
   787 ;;		_lcd_init
   788 ;;		_lcd_msg
   789 ;;		_prepareForInterrupts
   790 ;; This function is called by:
   791 ;;		Startup code after reset
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text0
   796  002346                     __ptext0:
   797                           	opt stack 0
   798  002346                     _main:
   799                           	opt stack 24
   800                           
   801                           ;color_1.c: 113: char acum= 0;
   802                           
   803                           ;incstack = 0
   804  002346  0E00               	movlw	0
   805  002348  0100               	movlb	0	; () banked
   806  00234A  6FD8               	movwf	main@acum& (0+255),b
   807                           
   808                           ; BSR set to: 0
   809                           ;color_1.c: 117: lcd_init();
   810  00234C  EC62  F00F         	call	_lcd_init	;wreg free
   811                           
   812                           ;color_1.c: 118: lcd_msg("Frecuencia");
   813  002350  0E77               	movlw	low STR_1
   814  002352  6E32               	movwf	lcd_msg@c,c
   815  002354  0E06               	movlw	high STR_1
   816  002356  6E33               	movwf	lcd_msg@c+1,c
   817  002358  EC7A  F011         	call	_lcd_msg	;wreg free
   818                           
   819                           ;color_1.c: 125: T1CONbits.RD16 = 1;
   820  00235C  8ECD               	bsf	4045,7,c	;volatile
   821                           
   822                           ;color_1.c: 126: T1CKPS1 = 0;
   823  00235E  9ACD               	bcf	4045,5,c	;volatile
   824                           
   825                           ;color_1.c: 127: T1CKPS0 = 0;
   826  002360  98CD               	bcf	4045,4,c	;volatile
   827                           
   828                           ;color_1.c: 128: TMR1CS = 0;
   829  002362  92CD               	bcf	4045,1,c	;volatile
   830                           
   831                           ;color_1.c: 129: TMR1ON = 1;
   832  002364  80CD               	bsf	4045,0,c	;volatile
   833                           
   834                           ;color_1.c: 130: TMR1IP = 0;
   835  002366  909F               	bcf	3999,0,c	;volatile
   836                           
   837                           ;color_1.c: 131: TMR1IE = 1;
   838  002368  809D               	bsf	3997,0,c	;volatile
   839                           
   840                           ;color_1.c: 133: prepareForInterrupts ();
   841  00236A  ECDE  F012         	call	_prepareForInterrupts	;wreg free
   842                           
   843                           ;color_1.c: 137: IPEN = 1;
   844  00236E  8ED0               	bsf	4048,7,c	;volatile
   845                           
   846                           ;color_1.c: 138: GIEH = 1;
   847  002370  8EF2               	bsf	intcon,7,c	;volatile
   848                           
   849                           ;color_1.c: 139: GIEL = 1;
   850  002372  8CF2               	bsf	intcon,6,c	;volatile
   851  002374                     
   852                           ;color_1.c: 144: {
   853                           ;color_1.c: 145: _delay((unsigned long)((1000)*(4000000/4000.0)));
   854  002374  0E06               	movlw	6
   855  002376  0100               	movlb	0	; () banked
   856  002378  6FD7               	movwf	(??_main+1)& (0+255),b
   857  00237A  0E13               	movlw	19
   858  00237C  6FD6               	movwf	??_main& (0+255),b
   859  00237E  0EAD               	movlw	173
   860  002380                     u4597:
   861  002380  2EE8               	decfsz	wreg,f,c
   862  002382  D7FE               	bra	u4597
   863  002384  2FD6               	decfsz	??_main& (0+255),f,b
   864  002386  D7FC               	bra	u4597
   865  002388  2FD7               	decfsz	(??_main+1)& (0+255),f,b
   866  00238A  D7FA               	bra	u4597
   867  00238C  D000               	nop2	
   868                           
   869                           ;color_1.c: 146: calcula();
   870  00238E  EC67  F00D         	call	_calcula	;wreg free
   871  002392  D7F0               	goto	l75
   872  002394                     __end_of_main:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           intcon	equ	0xFF2
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           
   879 ;; *************** function _lcd_init *****************
   880 ;; Defined at:
   881 ;;		line 133 in file "../MyLibs/lcd4a.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   895 ;;      Params:         0       0       0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0       0       0
   897 ;;      Temps:          1       0       0       0       0       0       0
   898 ;;      Totals:         1       0       0       0       0       0       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    4
   902 ;; This function calls:
   903 ;;		_lcd_cmd
   904 ;;		_lcd_cmd_hf
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  001EC4                     __ptext1:
   912                           	opt stack 0
   913  001EC4                     _lcd_init:
   914                           	opt stack 26
   915                           
   916                           ;lcd4a.c: 141: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
   917                           
   918                           ;incstack = 0
   919  001EC4  9E93               	bcf	3987,7,c	;volatile
   920                           
   921                           ;lcd4a.c: 142: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
   922  001EC6  9C93               	bcf	3987,6,c	;volatile
   923                           
   924                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
   925  001EC8  9A93               	bcf	3987,5,c	;volatile
   926                           
   927                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
   928  001ECA  9893               	bcf	3987,4,c	;volatile
   929                           
   930                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
   931  001ECC  9A95               	bcf	3989,5,c	;volatile
   932                           
   933                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
   934  001ECE  9C95               	bcf	3989,6,c	;volatile
   935                           
   936                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
   937  001ED0  9E95               	bcf	3989,7,c	;volatile
   938                           
   939                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
   940  001ED2  0E30               	movlw	48
   941  001ED4  ECC7  F012         	call	_lcd_cmd_hf
   942                           
   943                           ;lcd4a.c: 152: _delay((unsigned long)((15)*(4000000/4000.0)));
   944  001ED8  0E14               	movlw	20
   945  001EDA  6E31               	movwf	??_lcd_init& (0+255),c
   946  001EDC  0E7A               	movlw	122
   947  001EDE                     u4607:
   948  001EDE  2EE8               	decfsz	wreg,f,c
   949  001EE0  D7FE               	bra	u4607
   950  001EE2  2E31               	decfsz	??_lcd_init& (0+255),f,c
   951  001EE4  D7FC               	bra	u4607
   952                           
   953                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
   954  001EE6  0E30               	movlw	48
   955  001EE8  ECC7  F012         	call	_lcd_cmd_hf
   956                           
   957                           ;lcd4a.c: 154: _delay((unsigned long)((1)*(4000000/4000.0)));
   958  001EEC  0EC8               	movlw	200
   959  001EEE                     u4617:
   960  001EEE  D000               	nop2	
   961  001EF0  2EE8               	decfsz	wreg,f,c
   962  001EF2  D7FD               	bra	u4617
   963                           
   964                           ;lcd4a.c: 155: lcd_cmd_hf(0x30);
   965  001EF4  0E30               	movlw	48
   966  001EF6  ECC7  F012         	call	_lcd_cmd_hf
   967                           
   968                           ;lcd4a.c: 156: _delay((unsigned long)((15)*(4000000/4000.0)));
   969  001EFA  0E14               	movlw	20
   970  001EFC  6E31               	movwf	??_lcd_init& (0+255),c
   971  001EFE  0E7A               	movlw	122
   972  001F00                     u4627:
   973  001F00  2EE8               	decfsz	wreg,f,c
   974  001F02  D7FE               	bra	u4627
   975  001F04  2E31               	decfsz	??_lcd_init& (0+255),f,c
   976  001F06  D7FC               	bra	u4627
   977                           
   978                           ;lcd4a.c: 157: lcd_cmd_hf(0x20);
   979  001F08  0E20               	movlw	32
   980  001F0A  ECC7  F012         	call	_lcd_cmd_hf
   981                           
   982                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
   983  001F0E  0E07               	movlw	7
   984  001F10  6E31               	movwf	??_lcd_init& (0+255),c
   985  001F12  0E7D               	movlw	125
   986  001F14                     u4637:
   987  001F14  2EE8               	decfsz	wreg,f,c
   988  001F16  D7FE               	bra	u4637
   989  001F18  2E31               	decfsz	??_lcd_init& (0+255),f,c
   990  001F1A  D7FC               	bra	u4637
   991  001F1C  F000               	nop	
   992                           
   993                           ;lcd4a.c: 159: lcd_cmd(0x28);
   994  001F1E  0E28               	movlw	40
   995  001F20  ECCA  F011         	call	_lcd_cmd
   996                           
   997                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
   998  001F24  0E07               	movlw	7
   999  001F26  6E31               	movwf	??_lcd_init& (0+255),c
  1000  001F28  0E7D               	movlw	125
  1001  001F2A                     u4647:
  1002  001F2A  2EE8               	decfsz	wreg,f,c
  1003  001F2C  D7FE               	bra	u4647
  1004  001F2E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1005  001F30  D7FC               	bra	u4647
  1006  001F32  F000               	nop	
  1007                           
  1008                           ;lcd4a.c: 161: lcd_cmd(0x0E);
  1009  001F34  0E0E               	movlw	14
  1010  001F36  ECCA  F011         	call	_lcd_cmd
  1011                           
  1012                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  1013  001F3A  0E07               	movlw	7
  1014  001F3C  6E31               	movwf	??_lcd_init& (0+255),c
  1015  001F3E  0E7D               	movlw	125
  1016  001F40                     u4657:
  1017  001F40  2EE8               	decfsz	wreg,f,c
  1018  001F42  D7FE               	bra	u4657
  1019  001F44  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1020  001F46  D7FC               	bra	u4657
  1021  001F48  F000               	nop	
  1022                           
  1023                           ;lcd4a.c: 163: lcd_cmd(0x01);
  1024  001F4A  0E01               	movlw	1
  1025  001F4C  ECCA  F011         	call	_lcd_cmd
  1026                           
  1027                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  1028  001F50  0E07               	movlw	7
  1029  001F52  6E31               	movwf	??_lcd_init& (0+255),c
  1030  001F54  0E7D               	movlw	125
  1031  001F56                     u4667:
  1032  001F56  2EE8               	decfsz	wreg,f,c
  1033  001F58  D7FE               	bra	u4667
  1034  001F5A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1035  001F5C  D7FC               	bra	u4667
  1036  001F5E  F000               	nop	
  1037                           
  1038                           ;lcd4a.c: 165: lcd_cmd(0x06);
  1039  001F60  0E06               	movlw	6
  1040  001F62  ECCA  F011         	call	_lcd_cmd
  1041                           
  1042                           ;lcd4a.c: 166: _delay((unsigned long)((5)*(4000000/4000.0)));
  1043  001F66  0E07               	movlw	7
  1044  001F68  6E31               	movwf	??_lcd_init& (0+255),c
  1045  001F6A  0E7D               	movlw	125
  1046  001F6C                     u4677:
  1047  001F6C  2EE8               	decfsz	wreg,f,c
  1048  001F6E  D7FE               	bra	u4677
  1049  001F70  2E31               	decfsz	??_lcd_init& (0+255),f,c
  1050  001F72  D7FC               	bra	u4677
  1051  001F74  F000               	nop	
  1052                           
  1053                           ;lcd4a.c: 167: lcd_cmd(0x80);
  1054  001F76  0E80               	movlw	128
  1055  001F78  ECCA  F011         	call	_lcd_cmd
  1056  001F7C  0012               	return		;funcret
  1057  001F7E                     __end_of_lcd_init:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           intcon	equ	0xFF2
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           
  1064 ;; *************** function _lcd_cmd_hf *****************
  1065 ;; Defined at:
  1066 ;;		line 54 in file "../MyLibs/lcd4a.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  x               1    wreg     unsigned char 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  x               1   46[COMRAM] unsigned char 
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1080 ;;      Params:         0       0       0       0       0       0       0
  1081 ;;      Locals:         1       0       0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0
  1083 ;;      Totals:         1       0       0       0       0       0       0
  1084 ;;Total ram usage:        1 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; Hardware stack levels required when called:    3
  1087 ;; This function calls:
  1088 ;;		_lcd_lat
  1089 ;;		_manda
  1090 ;; This function is called by:
  1091 ;;		_lcd_init
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text2
  1096  00258E                     __ptext2:
  1097                           	opt stack 0
  1098  00258E                     _lcd_cmd_hf:
  1099                           	opt stack 26
  1100                           
  1101                           ;incstack = 0
  1102                           ;lcd_cmd_hf@x stored from wreg
  1103  00258E  6E2F               	movwf	lcd_cmd_hf@x,c
  1104                           
  1105                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  1106  002590  9A8C               	bcf	3980,5,c	;volatile
  1107                           
  1108                           ;lcd4a.c: 57: lcd &= 0x0F;
  1109  002592  0E0F               	movlw	15
  1110  002594  164F               	andwf	_lcd,f,c
  1111                           
  1112                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  1113  002596  502F               	movf	lcd_cmd_hf@x,w,c
  1114  002598  0BF0               	andlw	240
  1115  00259A  124F               	iorwf	_lcd,f,c
  1116                           
  1117                           ;lcd4a.c: 59: manda(lcd);
  1118  00259C  504F               	movf	_lcd,w,c
  1119  00259E  EC6A  F012         	call	_manda
  1120                           
  1121                           ;lcd4a.c: 60: lcd_lat();
  1122  0025A2  ECD4  F012         	call	_lcd_lat	;wreg free
  1123  0025A6  0012               	return		;funcret
  1124  0025A8                     __end_of_lcd_cmd_hf:
  1125                           	opt stack 0
  1126                           tblptru	equ	0xFF8
  1127                           intcon	equ	0xFF2
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           
  1131 ;; *************** function _calcula *****************
  1132 ;; Defined at:
  1133 ;;		line 153 in file "color_1.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  elapsedTime     4   76[BANK0 ] unsigned long 
  1138 ;;  temp            3   83[BANK0 ] float 
  1139 ;;  freq            3   80[BANK0 ] float 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1149 ;;      Params:         0       0       0       0       0       0       0
  1150 ;;      Locals:         0      10       0       0       0       0       0
  1151 ;;      Temps:          0       4       0       0       0       0       0
  1152 ;;      Totals:         0      14       0       0       0       0       0
  1153 ;;Total ram usage:       14 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    6
  1156 ;; This function calls:
  1157 ;;		___ftdiv
  1158 ;;		___ftmul
  1159 ;;		___lltoft
  1160 ;;		_lcd_gotoxy
  1161 ;;		_lcd_msg
  1162 ;;		_prepareForInterrupts
  1163 ;;		_sprintf
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text3
  1170  001ACE                     __ptext3:
  1171                           	opt stack 0
  1172  001ACE                     _calcula:
  1173                           	opt stack 24
  1174                           
  1175                           ;color_1.c: 155: float freq = 0.0;
  1176                           
  1177                           ;incstack = 0
  1178  001ACE  0E00               	movlw	0
  1179  001AD0  0100               	movlb	0	; () banked
  1180  001AD2  6FD0               	movwf	calcula@freq& (0+255),b
  1181  001AD4  0E00               	movlw	0
  1182  001AD6  6FD1               	movwf	(calcula@freq+1)& (0+255),b
  1183  001AD8  0E00               	movlw	0
  1184  001ADA  6FD2               	movwf	(calcula@freq+2)& (0+255),b
  1185                           
  1186                           ;color_1.c: 156: float temp = 0.0;
  1187  001ADC  0E00               	movlw	0
  1188  001ADE  6FD3               	movwf	calcula@temp& (0+255),b
  1189  001AE0  0E00               	movlw	0
  1190  001AE2  6FD4               	movwf	(calcula@temp+1)& (0+255),b
  1191  001AE4  0E00               	movlw	0
  1192  001AE6  6FD5               	movwf	(calcula@temp+2)& (0+255),b
  1193                           
  1194                           ;color_1.c: 157: if (!triggered)
  1195  001AE8  5050               	movf	_triggered,w,c	;volatile
  1196  001AEA  A4D8               	btfss	status,2,c
  1197  001AEC  D00C               	goto	l81
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;color_1.c: 158: {
  1201                           ;color_1.c: 159: lcd_gotoxy(5,2);
  1202  001AEE  0E02               	movlw	2
  1203  001AF0  6E31               	movwf	lcd_gotoxy@y,c
  1204  001AF2  0E05               	movlw	5
  1205  001AF4  EC50  F012         	call	_lcd_gotoxy
  1206                           
  1207                           ;color_1.c: 160: lcd_msg(":)");
  1208  001AF8  0E88               	movlw	low STR_2
  1209  001AFA  6E32               	movwf	lcd_msg@c,c
  1210  001AFC  0E06               	movlw	high STR_2
  1211  001AFE  6E33               	movwf	lcd_msg@c+1,c
  1212  001B00  EC7A  F011         	call	_lcd_msg	;wreg free
  1213                           
  1214                           ;color_1.c: 161: return;
  1215  001B04  0012               	return	
  1216  001B06                     l81:
  1217                           
  1218                           ;color_1.c: 162: }
  1219                           ;color_1.c: 164: unsigned long elapsedTime = finishTime - startTime;
  1220  001B06  C0DD  F0C8         	movff	_startTime,??_calcula	;volatile
  1221  001B0A  C0DE  F0C9         	movff	_startTime+1,??_calcula+1	;volatile
  1222  001B0E  C0DF  F0CA         	movff	_startTime+2,??_calcula+2	;volatile
  1223  001B12  C0E0  F0CB         	movff	_startTime+3,??_calcula+3	;volatile
  1224  001B16  0100               	movlb	0	; () banked
  1225  001B18  1FC8               	comf	??_calcula& (0+255),f,b
  1226  001B1A  1FC9               	comf	(??_calcula+1)& (0+255),f,b
  1227  001B1C  1FCA               	comf	(??_calcula+2)& (0+255),f,b
  1228  001B1E  1FCB               	comf	(??_calcula+3)& (0+255),f,b
  1229  001B20  2BC8               	incf	??_calcula& (0+255),f,b
  1230  001B22  0E00               	movlw	0
  1231  001B24  23C9               	addwfc	(??_calcula+1)& (0+255),f,b
  1232  001B26  23CA               	addwfc	(??_calcula+2)& (0+255),f,b
  1233  001B28  23CB               	addwfc	(??_calcula+3)& (0+255),f,b
  1234  001B2A  51D9               	movf	_finishTime& (0+255),w,b	;volatile
  1235  001B2C  25C8               	addwf	??_calcula& (0+255),w,b
  1236  001B2E  6FCC               	movwf	calcula@elapsedTime& (0+255),b
  1237  001B30  51DA               	movf	(_finishTime+1)& (0+255),w,b	;volatile
  1238  001B32  21C9               	addwfc	(??_calcula+1)& (0+255),w,b
  1239  001B34  6FCD               	movwf	(calcula@elapsedTime+1)& (0+255),b
  1240  001B36  51DB               	movf	(_finishTime+2)& (0+255),w,b	;volatile
  1241  001B38  21CA               	addwfc	(??_calcula+2)& (0+255),w,b
  1242  001B3A  6FCE               	movwf	(calcula@elapsedTime+2)& (0+255),b
  1243  001B3C  51DC               	movf	(_finishTime+3)& (0+255),w,b	;volatile
  1244  001B3E  21CB               	addwfc	(??_calcula+3)& (0+255),w,b
  1245  001B40  6FCF               	movwf	(calcula@elapsedTime+3)& (0+255),b
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;color_1.c: 166: temp = (float) (elapsedTime);
  1249  001B42  C0CC  F036         	movff	calcula@elapsedTime,___lltoft@c
  1250  001B46  C0CD  F037         	movff	calcula@elapsedTime+1,___lltoft@c+1
  1251  001B4A  C0CE  F038         	movff	calcula@elapsedTime+2,___lltoft@c+2
  1252  001B4E  C0CF  F039         	movff	calcula@elapsedTime+3,___lltoft@c+3
  1253  001B52  EC4C  F011         	call	___lltoft	;wreg free
  1254  001B56  C036  F0D3         	movff	?___lltoft,calcula@temp
  1255  001B5A  C037  F0D4         	movff	?___lltoft+1,calcula@temp+1
  1256  001B5E  C038  F0D5         	movff	?___lltoft+2,calcula@temp+2
  1257                           
  1258                           ;color_1.c: 167: temp *= 1e-6;
  1259  001B62  C0D3  F042         	movff	calcula@temp,___ftmul@f1
  1260  001B66  C0D4  F043         	movff	calcula@temp+1,___ftmul@f1+1
  1261  001B6A  C0D5  F044         	movff	calcula@temp+2,___ftmul@f1+2
  1262  001B6E  0E38               	movlw	56
  1263  001B70  6E45               	movwf	___ftmul@f2,c
  1264  001B72  0E86               	movlw	134
  1265  001B74  6E46               	movwf	___ftmul@f2+1,c
  1266  001B76  0E35               	movlw	53
  1267  001B78  6E47               	movwf	___ftmul@f2+2,c
  1268  001B7A  EC74  F00E         	call	___ftmul	;wreg free
  1269  001B7E  C042  F0D3         	movff	?___ftmul,calcula@temp
  1270  001B82  C043  F0D4         	movff	?___ftmul+1,calcula@temp+1
  1271  001B86  C044  F0D5         	movff	?___ftmul+2,calcula@temp+2
  1272                           
  1273                           ;color_1.c: 168: freq = 1.0/(temp);
  1274  001B8A  0E00               	movlw	0
  1275  001B8C  6E36               	movwf	___ftdiv@f1,c
  1276  001B8E  0E80               	movlw	128
  1277  001B90  6E37               	movwf	___ftdiv@f1+1,c
  1278  001B92  0E3F               	movlw	63
  1279  001B94  6E38               	movwf	___ftdiv@f1+2,c
  1280  001B96  C0D3  F039         	movff	calcula@temp,___ftdiv@f2
  1281  001B9A  C0D4  F03A         	movff	calcula@temp+1,___ftdiv@f2+1
  1282  001B9E  C0D5  F03B         	movff	calcula@temp+2,___ftdiv@f2+2
  1283  001BA2  ECEF  F00E         	call	___ftdiv	;wreg free
  1284  001BA6  C036  F0D0         	movff	?___ftdiv,calcula@freq
  1285  001BAA  C037  F0D1         	movff	?___ftdiv+1,calcula@freq+1
  1286  001BAE  C038  F0D2         	movff	?___ftdiv+2,calcula@freq+2
  1287                           
  1288                           ;color_1.c: 172: sprintf(value,"%5.3f",freq);
  1289  001BB2  0EE1               	movlw	low _value
  1290  001BB4  0100               	movlb	0	; () banked
  1291  001BB6  6FA2               	movwf	sprintf@sp& (0+255),b
  1292  001BB8  0E00               	movlw	high _value
  1293  001BBA  6FA3               	movwf	(sprintf@sp+1)& (0+255),b
  1294  001BBC  0E82               	movlw	low STR_3
  1295  001BBE  6FA4               	movwf	sprintf@f& (0+255),b
  1296  001BC0  0E06               	movlw	high STR_3
  1297  001BC2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  1298  001BC4  C0D0  F0A6         	movff	calcula@freq,?_sprintf+4
  1299  001BC8  C0D1  F0A7         	movff	calcula@freq+1,?_sprintf+5
  1300  001BCC  C0D2  F0A8         	movff	calcula@freq+2,?_sprintf+6
  1301  001BD0  EC46  F003         	call	_sprintf	;wreg free
  1302                           
  1303                           ;color_1.c: 173: lcd_gotoxy(5,2);
  1304  001BD4  0E02               	movlw	2
  1305  001BD6  6E31               	movwf	lcd_gotoxy@y,c
  1306  001BD8  0E05               	movlw	5
  1307  001BDA  EC50  F012         	call	_lcd_gotoxy
  1308                           
  1309                           ;color_1.c: 174: lcd_msg(value);
  1310  001BDE  0EE1               	movlw	low _value
  1311  001BE0  6E32               	movwf	lcd_msg@c,c
  1312  001BE2  0E00               	movlw	high _value
  1313  001BE4  6E33               	movwf	lcd_msg@c+1,c
  1314  001BE6  EC7A  F011         	call	_lcd_msg	;wreg free
  1315                           
  1316                           ;color_1.c: 177: prepareForInterrupts ();
  1317  001BEA  ECDE  F012         	call	_prepareForInterrupts	;wreg free
  1318  001BEE  0012               	return		;funcret
  1319  001BF0                     __end_of_calcula:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           intcon	equ	0xFF2
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           status	equ	0xFD8
  1326                           
  1327 ;; *************** function _sprintf *****************
  1328 ;; Defined at:
  1329 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  sp              2   34[BANK0 ] PTR unsigned char 
  1332 ;;		 -> value(8), 
  1333 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1334 ;;		 -> STR_3(6), 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  tmpval          4   60[BANK0 ] struct .
  1337 ;;  val             4   52[BANK0 ] unsigned long 
  1338 ;;  fval            3   66[BANK0 ] unsigned long 
  1339 ;;  cp              3    0        PTR const unsigned char 
  1340 ;;  prec            2   69[BANK0 ] int 
  1341 ;;  exp             2   64[BANK0 ] int 
  1342 ;;  width           2   58[BANK0 ] int 
  1343 ;;  flag            2   56[BANK0 ] unsigned short 
  1344 ;;  ap              2   50[BANK0 ] PTR void [1]
  1345 ;;		 -> ?_sprintf(2), 
  1346 ;;  len             2    0        unsigned int 
  1347 ;;  c               1   71[BANK0 ] char 
  1348 ;;  d               1    0        unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  2   34[BANK0 ] int 
  1351 ;; Registers used:
  1352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1358 ;;      Params:         0       7       0       0       0       0       0
  1359 ;;      Locals:         0      25       0       0       0       0       0
  1360 ;;      Temps:          0       6       0       0       0       0       0
  1361 ;;      Totals:         0      38       0       0       0       0       0
  1362 ;;Total ram usage:       38 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    5
  1365 ;; This function calls:
  1366 ;;		___awdiv
  1367 ;;		___ftadd
  1368 ;;		___ftge
  1369 ;;		___ftmul
  1370 ;;		___ftneg
  1371 ;;		___ftsub
  1372 ;;		___fttol
  1373 ;;		___lldiv
  1374 ;;		___llmod
  1375 ;;		___lltoft
  1376 ;;		___wmul
  1377 ;;		__div_to_l_
  1378 ;;		__tdiv_to_l_
  1379 ;;		_fround
  1380 ;;		_isdigit
  1381 ;;		_scale
  1382 ;; This function is called by:
  1383 ;;		_calcula
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text4
  1388  00068C                     __ptext4:
  1389                           	opt stack 0
  1390  00068C                     _sprintf:
  1391                           	opt stack 24
  1392                           
  1393                           ;doprnt.c: 494: va_list ap;
  1394                           ;doprnt.c: 499: signed char c;
  1395                           ;doprnt.c: 501: int width;
  1396                           ;doprnt.c: 504: int prec;
  1397                           ;doprnt.c: 508: unsigned short flag;
  1398                           ;doprnt.c: 515: char d;
  1399                           ;doprnt.c: 516: double fval;
  1400                           ;doprnt.c: 517: int exp;
  1401                           ;doprnt.c: 523: union {
  1402                           ;doprnt.c: 524: unsigned long vd;
  1403                           ;doprnt.c: 525: double integ;
  1404                           ;doprnt.c: 526: } tmpval;
  1405                           ;doprnt.c: 528: unsigned long val;
  1406                           ;doprnt.c: 529: unsigned len;
  1407                           ;doprnt.c: 530: const char * cp;
  1408                           ;doprnt.c: 533: *ap = __va_start();
  1409                           
  1410                           ;incstack = 0
  1411  00068C  0EA6               	movlw	low (?_sprintf+4)
  1412  00068E  0100               	movlb	0	; () banked
  1413  000690  6FB2               	movwf	sprintf@ap& (0+255),b
  1414  000692  0E00               	movlw	high (?_sprintf+4)
  1415  000694  6FB3               	movwf	(sprintf@ap+1)& (0+255),b
  1416                           
  1417                           ;doprnt.c: 536: while(c = *f++) {
  1418  000696  EF7F  F007         	goto	l262
  1419  00069A                     
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 538: if(c != '%')
  1422                           
  1423                           ; BSR set to: 0
  1424  00069A  0E25               	movlw	37
  1425  00069C  19C7               	xorwf	sprintf@c& (0+255),w,b
  1426  00069E  B4D8               	btfsc	status,2,c
  1427  0006A0  D008               	goto	l191
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;doprnt.c: 540: {
  1431                           ;doprnt.c: 541: ((*sp++ = (c)));
  1432  0006A2  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  1433  0006A6  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  1434  0006AA  C0C7  FFDF         	movff	sprintf@c,indf2
  1435  0006AE  EF7D  F007         	goto	l4093
  1436  0006B2                     l191:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 543: }
  1440                           ;doprnt.c: 546: width = 0;
  1441                           
  1442                           ; BSR set to: 0
  1443  0006B2  0E00               	movlw	0
  1444  0006B4  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  1445  0006B6  0E00               	movlw	0
  1446  0006B8  6FBA               	movwf	sprintf@width& (0+255),b
  1447                           
  1448                           ;doprnt.c: 548: flag = 0;
  1449  0006BA  0E00               	movlw	0
  1450  0006BC  6FB9               	movwf	(sprintf@flag+1)& (0+255),b
  1451  0006BE  0E00               	movlw	0
  1452  0006C0  6FB8               	movwf	sprintf@flag& (0+255),b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1456  0006C2  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1457  0006C6  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1458  0006CA                     	if	0	;tblptru may be non-zero
  1459  0006CA                     	endif
  1460  0006CA                     	if	0	;tblptru may be non-zero
  1461  0006CA                     	endif
  1462  0006CA  0008               	tblrd		*
  1463  0006CC  50F5               	movf	tablat,w,c
  1464  0006CE  ECB8  F012         	call	_isdigit
  1465  0006D2  A0D8               	btfss	status,0,c
  1466  0006D4  D034               	goto	u4100
  1467                           
  1468                           ;doprnt.c: 598: width = 0;
  1469  0006D6  0E00               	movlw	0
  1470  0006D8  0100               	movlb	0	; () banked
  1471  0006DA  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  1472  0006DC  0E00               	movlw	0
  1473  0006DE  6FBA               	movwf	sprintf@width& (0+255),b
  1474  0006E0                     
  1475                           ;doprnt.c: 600: width *= 10;
  1476                           
  1477                           ; BSR set to: 0
  1478  0006E0  C0BA  F03C         	movff	sprintf@width,___wmul@multiplier
  1479  0006E4  C0BB  F03D         	movff	sprintf@width+1,___wmul@multiplier+1
  1480  0006E8  0E00               	movlw	0
  1481  0006EA  6E3F               	movwf	___wmul@multiplicand+1,c
  1482  0006EC  0E0A               	movlw	10
  1483  0006EE  6E3E               	movwf	___wmul@multiplicand,c
  1484  0006F0  EC93  F012         	call	___wmul	;wreg free
  1485  0006F4  C03C  F0BA         	movff	?___wmul,sprintf@width
  1486  0006F8  C03D  F0BB         	movff	?___wmul+1,sprintf@width+1
  1487                           
  1488                           ;doprnt.c: 601: width += *f++ - '0';
  1489  0006FC  0ED0               	movlw	208
  1490  0006FE  0100               	movlb	0	; () banked
  1491  000700  6FA9               	movwf	??_sprintf& (0+255),b
  1492  000702  0EFF               	movlw	255
  1493  000704  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  1494  000706  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1495  00070A  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1496  00070E                     	if	0	;tblptru may be non-zero
  1497  00070E                     	endif
  1498  00070E                     	if	0	;tblptru may be non-zero
  1499  00070E                     	endif
  1500  00070E  0008               	tblrd		*
  1501  000710  50F5               	movf	tablat,w,c
  1502  000712  6FAB               	movwf	(??_sprintf+2)& (0+255),b
  1503  000714  6BAC               	clrf	(??_sprintf+3)& (0+255),b
  1504  000716  51A9               	movf	??_sprintf& (0+255),w,b
  1505  000718  27AB               	addwf	(??_sprintf+2)& (0+255),f,b
  1506  00071A  51AA               	movf	(??_sprintf+1)& (0+255),w,b
  1507  00071C  23AC               	addwfc	(??_sprintf+3)& (0+255),f,b
  1508  00071E  51AB               	movf	(??_sprintf+2)& (0+255),w,b
  1509  000720  27BA               	addwf	sprintf@width& (0+255),f,b
  1510  000722  51AC               	movf	(??_sprintf+3)& (0+255),w,b
  1511  000724  23BB               	addwfc	(sprintf@width+1)& (0+255),f,b
  1512                           
  1513                           ; BSR set to: 0
  1514  000726  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1515  000728  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1519  00072A  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1520  00072E  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1521  000732                     	if	0	;tblptru may be non-zero
  1522  000732                     	endif
  1523  000732                     	if	0	;tblptru may be non-zero
  1524  000732                     	endif
  1525  000732  0008               	tblrd		*
  1526  000734  50F5               	movf	tablat,w,c
  1527  000736  ECB8  F012         	call	_isdigit
  1528  00073A  B0D8               	btfsc	status,0,c
  1529  00073C  D7D1               	goto	l193
  1530  00073E                     u4100:
  1531                           
  1532                           ;doprnt.c: 608: }
  1533                           ;doprnt.c: 611: if(*f == '.') {
  1534  00073E  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1535  000742  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1536  000746                     	if	0	;tblptru may be non-zero
  1537  000746                     	endif
  1538  000746                     	if	0	;tblptru may be non-zero
  1539  000746                     	endif
  1540  000746  0008               	tblrd		*
  1541  000748  50F5               	movf	tablat,w,c
  1542  00074A  0A2E               	xorlw	46
  1543  00074C  A4D8               	btfss	status,2,c
  1544  00074E  D030               	goto	l195
  1545                           
  1546                           ;doprnt.c: 612: flag |= 0x4000;
  1547  000750  0100               	movlb	0	; () banked
  1548  000752  8DB9               	bsf	(sprintf@flag+1)& (0+255),6,b
  1549                           
  1550                           ;doprnt.c: 613: f++;
  1551  000754  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1552  000756  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;doprnt.c: 620: {
  1556                           ;doprnt.c: 621: prec = 0;
  1557  000758  0E00               	movlw	0
  1558  00075A  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1559  00075C  0E00               	movlw	0
  1560  00075E  6FC5               	movwf	sprintf@prec& (0+255),b
  1561                           
  1562                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1563  000760  D01C               	goto	l196
  1564  000762                     
  1565                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1566                           
  1567                           ; BSR set to: 0
  1568  000762  C0C5  F03C         	movff	sprintf@prec,___wmul@multiplier
  1569  000766  C0C6  F03D         	movff	sprintf@prec+1,___wmul@multiplier+1
  1570  00076A  0E00               	movlw	0
  1571  00076C  6E3F               	movwf	___wmul@multiplicand+1,c
  1572  00076E  0E0A               	movlw	10
  1573  000770  6E3E               	movwf	___wmul@multiplicand,c
  1574  000772  EC93  F012         	call	___wmul	;wreg free
  1575  000776  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1576  00077A  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1577  00077E                     	if	0	;tblptru may be non-zero
  1578  00077E                     	endif
  1579  00077E                     	if	0	;tblptru may be non-zero
  1580  00077E                     	endif
  1581  00077E  0008               	tblrd		*
  1582  000780  50F5               	movf	tablat,w,c
  1583  000782  263C               	addwf	?___wmul,f,c
  1584  000784  0E00               	movlw	0
  1585  000786  223D               	addwfc	?___wmul+1,f,c
  1586  000788  0ED0               	movlw	208
  1587  00078A  243C               	addwf	?___wmul,w,c
  1588  00078C  0100               	movlb	0	; () banked
  1589  00078E  6FC5               	movwf	sprintf@prec& (0+255),b
  1590  000790  0EFF               	movlw	255
  1591  000792  203D               	addwfc	?___wmul+1,w,c
  1592  000794  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1593                           
  1594                           ; BSR set to: 0
  1595  000796  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1596  000798  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1597  00079A                     l196:
  1598                           
  1599                           ; BSR set to: 0
  1600                           
  1601                           ; BSR set to: 0
  1602  00079A  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1603  00079E  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1604  0007A2                     	if	0	;tblptru may be non-zero
  1605  0007A2                     	endif
  1606  0007A2                     	if	0	;tblptru may be non-zero
  1607  0007A2                     	endif
  1608  0007A2  0008               	tblrd		*
  1609  0007A4  50F5               	movf	tablat,w,c
  1610  0007A6  ECB8  F012         	call	_isdigit
  1611  0007AA  A0D8               	btfss	status,0,c
  1612  0007AC  D00A               	goto	l200
  1613  0007AE  D7D9               	goto	l197
  1614  0007B0                     l195:
  1615                           
  1616                           ;doprnt.c: 626: prec = 0;
  1617  0007B0  0E00               	movlw	0
  1618  0007B2  0100               	movlb	0	; () banked
  1619  0007B4  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1620  0007B6  0E00               	movlw	0
  1621  0007B8  6FC5               	movwf	sprintf@prec& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;doprnt.c: 628: flag |= 0x1000;
  1625  0007BA  89B9               	bsf	(sprintf@flag+1)& (0+255),4,b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;doprnt.c: 630: }
  1629                           ;doprnt.c: 635: switch(c = *f++) {
  1630  0007BC  D002               	goto	l200
  1631  0007BE                     
  1632                           ; BSR set to: 0
  1633                           ;doprnt.c: 663: flag |= 0x400;
  1634                           
  1635                           ; BSR set to: 0
  1636  0007BE  85B9               	bsf	(sprintf@flag+1)& (0+255),2,b
  1637                           
  1638                           ;doprnt.c: 664: break;
  1639  0007C0  D012               	goto	l204
  1640  0007C2                     l200:
  1641                           
  1642                           ; BSR set to: 0
  1643  0007C2  C0A4  FFF6         	movff	sprintf@f,tblptrl
  1644  0007C6  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  1645  0007CA  0100               	movlb	0	; () banked
  1646  0007CC  4BA4               	infsnz	sprintf@f& (0+255),f,b
  1647  0007CE  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  1648  0007D0                     	if	0	;tblptru may be non-zero
  1649  0007D0                     	endif
  1650  0007D0                     	if	0	;tblptru may be non-zero
  1651  0007D0                     	endif
  1652  0007D0  0008               	tblrd		*
  1653  0007D2  CFF5 F0C7          	movff	tablat,sprintf@c
  1654  0007D6  51C7               	movf	sprintf@c& (0+255),w,b
  1655                           
  1656                           ; Switch size 1, requested type "space"
  1657                           ; Number of cases is 2, Range of values is 0 to 102
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte            7     4 (average)
  1661                           ;	Chosen strategy is simple_byte
  1662  0007D8  0A00               	xorlw	0	; case 0
  1663  0007DA  B4D8               	btfsc	status,2,c
  1664  0007DC  D39D               	goto	u4520
  1665  0007DE  0A66               	xorlw	102	; case 102
  1666  0007E0  B4D8               	btfsc	status,2,c
  1667  0007E2  D7ED               	goto	l203
  1668  0007E4  D38C               	goto	l262
  1669  0007E6                     l204:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 825: if(flag & (0x700)) {
  1673                           
  1674                           ; BSR set to: 0
  1675  0007E6  0E07               	movlw	7
  1676  0007E8  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  1677  0007EA  B4D8               	btfsc	status,2,c
  1678  0007EC  D2FD               	goto	l206
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;doprnt.c: 827: if(flag & 0x1000)
  1682  0007EE  A9B9               	btfss	(sprintf@flag+1)& (0+255),4,b
  1683  0007F0  D004               	goto	l207
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;doprnt.c: 829: prec = 6;
  1687  0007F2  0E00               	movlw	0
  1688  0007F4  6FC6               	movwf	(sprintf@prec+1)& (0+255),b
  1689  0007F6  0E06               	movlw	6
  1690  0007F8  6FC5               	movwf	sprintf@prec& (0+255),b
  1691  0007FA                     l207:
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1695                           
  1696                           ; BSR set to: 0
  1697  0007FA  C0B2  FFD9         	movff	sprintf@ap,fsr2l
  1698  0007FE  C0B3  FFDA         	movff	sprintf@ap+1,fsr2h
  1699  000802  CFDE F0C2          	movff	postinc2,sprintf@fval
  1700  000806  CFDE F0C3          	movff	postinc2,sprintf@fval+1
  1701  00080A  CFDD F0C4          	movff	postdec2,sprintf@fval+2
  1702                           
  1703                           ; BSR set to: 0
  1704  00080E  0E03               	movlw	3
  1705  000810  27B2               	addwf	sprintf@ap& (0+255),f,b
  1706  000812  0E00               	movlw	0
  1707  000814  23B3               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 831: if(fval < 0.0) {
  1711  000816  AFC4               	btfss	(sprintf@fval+2)& (0+255),7,b
  1712  000818  D011               	goto	l208
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;doprnt.c: 832: fval = -fval;
  1716  00081A  C0C2  F02E         	movff	sprintf@fval,___ftneg@f1
  1717  00081E  C0C3  F02F         	movff	sprintf@fval+1,___ftneg@f1+1
  1718  000822  C0C4  F030         	movff	sprintf@fval+2,___ftneg@f1+2
  1719  000826  ECA6  F012         	call	___ftneg	;wreg free
  1720  00082A  C02E  F0C2         	movff	?___ftneg,sprintf@fval
  1721  00082E  C02F  F0C3         	movff	?___ftneg+1,sprintf@fval+1
  1722  000832  C030  F0C4         	movff	?___ftneg+2,sprintf@fval+2
  1723                           
  1724                           ;doprnt.c: 833: flag |= 0x03;
  1725  000836  0E03               	movlw	3
  1726  000838  0100               	movlb	0	; () banked
  1727  00083A  13B8               	iorwf	sprintf@flag& (0+255),f,b
  1728  00083C                     l208:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;doprnt.c: 834: }
  1732                           ;doprnt.c: 835: exp = 0;
  1733                           
  1734                           ; BSR set to: 0
  1735  00083C  0E00               	movlw	0
  1736  00083E  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  1737  000840  0E00               	movlw	0
  1738  000842  6FC0               	movwf	sprintf@exp& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;doprnt.c: 836: if( fval!=0) {
  1742  000844  51C2               	movf	sprintf@fval& (0+255),w,b
  1743  000846  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1744  000848  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1745  00084A  B4D8               	btfsc	status,2,c
  1746  00084C  D086               	goto	l213
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1750  00084E  0E82               	movlw	130
  1751  000850  6FA9               	movwf	??_sprintf& (0+255),b
  1752  000852  0EFF               	movlw	255
  1753  000854  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  1754  000856  C0C2  F0AB         	movff	sprintf@fval,??_sprintf+2
  1755  00085A  C0C3  F0AC         	movff	sprintf@fval+1,??_sprintf+3
  1756  00085E  C0C4  F0AD         	movff	sprintf@fval+2,??_sprintf+4
  1757  000862  C0C5  F0AE         	movff	sprintf@fval+3,??_sprintf+5
  1758  000866  0E10               	movlw	16
  1759  000868  D005               	goto	u4170
  1760  00086A                     u4175:
  1761  00086A  90D8               	bcf	status,0,c
  1762  00086C  33AE               	rrcf	(??_sprintf+5)& (0+255),f,b
  1763  00086E  33AD               	rrcf	(??_sprintf+4)& (0+255),f,b
  1764  000870  33AC               	rrcf	(??_sprintf+3)& (0+255),f,b
  1765  000872  33AB               	rrcf	(??_sprintf+2)& (0+255),f,b
  1766  000874                     u4170:
  1767  000874  2EE8               	decfsz	wreg,f,c
  1768  000876  D7F9               	goto	u4175
  1769  000878  51AB               	movf	(??_sprintf+2)& (0+255),w,b
  1770  00087A  25A9               	addwf	??_sprintf& (0+255),w,b
  1771  00087C  6FC0               	movwf	sprintf@exp& (0+255),b
  1772  00087E  0E00               	movlw	0
  1773  000880  21AA               	addwfc	(??_sprintf+1)& (0+255),w,b
  1774  000882  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;doprnt.c: 838: exp--;
  1778  000884  07C0               	decf	sprintf@exp& (0+255),f,b
  1779  000886  A0D8               	btfss	status,0,c
  1780  000888  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;doprnt.c: 839: exp *= 3;
  1784  00088A  C0C0  F03C         	movff	sprintf@exp,___wmul@multiplier
  1785  00088E  C0C1  F03D         	movff	sprintf@exp+1,___wmul@multiplier+1
  1786  000892  0E00               	movlw	0
  1787  000894  6E3F               	movwf	___wmul@multiplicand+1,c
  1788  000896  0E03               	movlw	3
  1789  000898  6E3E               	movwf	___wmul@multiplicand,c
  1790  00089A  EC93  F012         	call	___wmul	;wreg free
  1791  00089E  C03C  F0C0         	movff	?___wmul,sprintf@exp
  1792  0008A2  C03D  F0C1         	movff	?___wmul+1,sprintf@exp+1
  1793                           
  1794                           ;doprnt.c: 840: exp /= 10;
  1795  0008A6  C0C0  F034         	movff	sprintf@exp,___awdiv@dividend
  1796  0008AA  C0C1  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  1797  0008AE  0E00               	movlw	0
  1798  0008B0  6E37               	movwf	___awdiv@divisor+1,c
  1799  0008B2  0E0A               	movlw	10
  1800  0008B4  6E36               	movwf	___awdiv@divisor,c
  1801  0008B6  EC5E  F010         	call	___awdiv	;wreg free
  1802  0008BA  C034  F0C0         	movff	?___awdiv,sprintf@exp
  1803  0008BE  C035  F0C1         	movff	?___awdiv+1,sprintf@exp+1
  1804                           
  1805                           ;doprnt.c: 841: if(exp < 0)
  1806  0008C2  0100               	movlb	0	; () banked
  1807  0008C4  AFC1               	btfss	(sprintf@exp+1)& (0+255),7,b
  1808  0008C6  D003               	goto	l210
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;doprnt.c: 842: exp--;
  1812  0008C8  07C0               	decf	sprintf@exp& (0+255),f,b
  1813  0008CA  A0D8               	btfss	status,0,c
  1814  0008CC  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1815  0008CE                     l210:
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1819                           
  1820                           ; BSR set to: 0
  1821  0008CE  51C0               	movf	sprintf@exp& (0+255),w,b
  1822  0008D0  0800               	sublw	0
  1823  0008D2  EC93  F007         	call	_scale
  1824  0008D6  C086  F0BC         	movff	?_scale,sprintf@tmpval
  1825  0008DA  C087  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  1826  0008DE  C088  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  1827                           
  1828                           ;doprnt.c: 847: tmpval.integ *= fval;
  1829  0008E2  C0BC  F042         	movff	sprintf@tmpval,___ftmul@f1
  1830  0008E6  C0BD  F043         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1831  0008EA  C0BE  F044         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1832  0008EE  C0C2  F045         	movff	sprintf@fval,___ftmul@f2
  1833  0008F2  C0C3  F046         	movff	sprintf@fval+1,___ftmul@f2+1
  1834  0008F6  C0C4  F047         	movff	sprintf@fval+2,___ftmul@f2+2
  1835  0008FA  EC74  F00E         	call	___ftmul	;wreg free
  1836  0008FE  C042  F0BC         	movff	?___ftmul,sprintf@tmpval
  1837  000902  C043  F0BD         	movff	?___ftmul+1,sprintf@tmpval+1
  1838  000906  C044  F0BE         	movff	?___ftmul+2,sprintf@tmpval+2
  1839                           
  1840                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1841  00090A  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1842  00090E  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1843  000912  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1844  000916  0E00               	movlw	0
  1845  000918  6E31               	movwf	___ftge@ff2,c
  1846  00091A  0E80               	movlw	128
  1847  00091C  6E32               	movwf	___ftge@ff2+1,c
  1848  00091E  0E3F               	movlw	63
  1849  000920  6E33               	movwf	___ftge@ff2+2,c
  1850  000922  EC16  F010         	call	___ftge	;wreg free
  1851  000926  B0D8               	btfsc	status,0,c
  1852  000928  D005               	goto	l211
  1853                           
  1854                           ;doprnt.c: 849: exp--;
  1855  00092A  0100               	movlb	0	; () banked
  1856  00092C  07C0               	decf	sprintf@exp& (0+255),f,b
  1857  00092E  A0D8               	btfss	status,0,c
  1858  000930  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  1859  000932  D013               	goto	l213
  1860  000934                     l211:
  1861                           
  1862                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1863                           
  1864                           ; BSR set to: 0
  1865  000934  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1866  000938  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1867  00093C  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1868  000940  0E00               	movlw	0
  1869  000942  6E31               	movwf	___ftge@ff2,c
  1870  000944  0E20               	movlw	32
  1871  000946  6E32               	movwf	___ftge@ff2+1,c
  1872  000948  0E41               	movlw	65
  1873  00094A  6E33               	movwf	___ftge@ff2+2,c
  1874  00094C  EC16  F010         	call	___ftge	;wreg free
  1875  000950  A0D8               	btfss	status,0,c
  1876  000952  D003               	goto	l213
  1877                           
  1878                           ;doprnt.c: 851: exp++;
  1879  000954  0100               	movlb	0	; () banked
  1880  000956  4BC0               	infsnz	sprintf@exp& (0+255),f,b
  1881  000958  2BC1               	incf	(sprintf@exp+1)& (0+255),f,b
  1882  00095A                     l213:
  1883                           
  1884                           ;doprnt.c: 852: }
  1885                           ;doprnt.c: 1112: if(prec <= 12)
  1886                           
  1887                           ; BSR set to: 0
  1888                           
  1889                           ; BSR set to: 0
  1890                           
  1891                           ; BSR set to: 0
  1892  00095A  0100               	movlb	0	; () banked
  1893  00095C  BFC6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1894  00095E  D006               	goto	u4210
  1895  000960  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  1896  000962  E11B               	bnz	l3931
  1897  000964  0E0D               	movlw	13
  1898  000966  5DC5               	subwf	sprintf@prec& (0+255),w,b
  1899  000968  B0D8               	btfsc	status,0,c
  1900  00096A  D017               	goto	l214
  1901  00096C                     u4210:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 1113: fval += fround(prec);
  1905  00096C  C0C2  F090         	movff	sprintf@fval,___ftadd@f1
  1906  000970  C0C3  F091         	movff	sprintf@fval+1,___ftadd@f1+1
  1907  000974  C0C4  F092         	movff	sprintf@fval+2,___ftadd@f1+2
  1908  000978  51C5               	movf	sprintf@prec& (0+255),w,b
  1909  00097A  ECA3  F009         	call	_fround
  1910  00097E  C086  F093         	movff	?_fround,___ftadd@f2
  1911  000982  C087  F094         	movff	?_fround+1,___ftadd@f2+1
  1912  000986  C088  F095         	movff	?_fround+2,___ftadd@f2+2
  1913  00098A  ECD0  F00A         	call	___ftadd	;wreg free
  1914  00098E  C090  F0C2         	movff	?___ftadd,sprintf@fval
  1915  000992  C091  F0C3         	movff	?___ftadd+1,sprintf@fval+1
  1916  000996  C092  F0C4         	movff	?___ftadd+2,sprintf@fval+2
  1917  00099A                     l214:
  1918  00099A                     l3931:
  1919                           
  1920                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1921  00099A  0100               	movlb	0	; () banked
  1922  00099C  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1923  00099E  D006               	goto	u4220
  1924  0009A0  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  1925  0009A2  E11F               	bnz	l3939
  1926  0009A4  0E0A               	movlw	10
  1927  0009A6  5DC0               	subwf	sprintf@exp& (0+255),w,b
  1928  0009A8  B0D8               	btfsc	status,0,c
  1929  0009AA  D01B               	goto	u4250
  1930  0009AC                     u4220:
  1931                           
  1932                           ; BSR set to: 0
  1933  0009AC  51C2               	movf	sprintf@fval& (0+255),w,b
  1934  0009AE  11C3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1935  0009B0  11C4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1936  0009B2  B4D8               	btfsc	status,2,c
  1937  0009B4  D055               	goto	l215
  1938                           
  1939                           ; BSR set to: 0
  1940  0009B6  C0C2  F08D         	movff	sprintf@fval,___fttol@f1
  1941  0009BA  C0C3  F08E         	movff	sprintf@fval+1,___fttol@f1+1
  1942  0009BE  C0C4  F08F         	movff	sprintf@fval+2,___fttol@f1+2
  1943  0009C2  ECF8  F00D         	call	___fttol	;wreg free
  1944  0009C6  0100               	movlb	0	; () banked
  1945  0009C8  518D               	movf	?___fttol& (0+255),w,b
  1946  0009CA  118E               	iorwf	(?___fttol+1)& (0+255),w,b
  1947  0009CC  118F               	iorwf	(?___fttol+2)& (0+255),w,b
  1948  0009CE  1190               	iorwf	(?___fttol+3)& (0+255),w,b
  1949  0009D0  B4D8               	btfsc	status,2,c
  1950                           
  1951                           ; BSR set to: 0
  1952  0009D2  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1953  0009D4  D045               	goto	l215
  1954  0009D6  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  1955  0009D8  E104               	bnz	l3939
  1956  0009DA  0E02               	movlw	2
  1957  0009DC  5DC0               	subwf	sprintf@exp& (0+255),w,b
  1958  0009DE  A0D8               	btfss	status,0,c
  1959  0009E0  D03F               	goto	l215
  1960  0009E2                     u4250:
  1961  0009E2                     l3939:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1965  0009E2  C0BC  F02E         	movff	sprintf@tmpval,___ftge@ff1
  1966  0009E6  C0BD  F02F         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1967  0009EA  C0BE  F030         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1968  0009EE  0E70               	movlw	112
  1969  0009F0  6E31               	movwf	___ftge@ff2,c
  1970  0009F2  0E89               	movlw	137
  1971  0009F4  6E32               	movwf	___ftge@ff2+1,c
  1972  0009F6  0E40               	movlw	64
  1973  0009F8  6E33               	movwf	___ftge@ff2+2,c
  1974  0009FA  EC16  F010         	call	___ftge	;wreg free
  1975  0009FE  B0D8               	btfsc	status,0,c
  1976  000A00  D003               	goto	l218
  1977                           
  1978                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1979  000A02  0100               	movlb	0	; () banked
  1980  000A04  0EF7               	movlw	247
  1981  000A06  D002               	goto	L1
  1982  000A08                     l218:
  1983                           
  1984                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1985                           
  1986                           ; BSR set to: 0
  1987  000A08  0100               	movlb	0	; () banked
  1988  000A0A  0EF8               	movlw	248
  1989  000A0C                     L1:
  1990  000A0C  27C0               	addwf	sprintf@exp& (0+255),f,b
  1991  000A0E  0EFF               	movlw	255
  1992  000A10  23C1               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;doprnt.c: 1124: }
  1996                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1997                           
  1998                           ; BSR set to: 0
  1999  000A12  51C0               	movf	sprintf@exp& (0+255),w,b
  2000  000A14  EC93  F007         	call	_scale
  2001  000A18  C086  F0BC         	movff	?_scale,sprintf@tmpval
  2002  000A1C  C087  F0BD         	movff	?_scale+1,sprintf@tmpval+1
  2003  000A20  C088  F0BE         	movff	?_scale+2,sprintf@tmpval+2
  2004                           
  2005                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2006  000A24  C0C2  F02E         	movff	sprintf@fval,__tdiv_to_l_@f1
  2007  000A28  C0C3  F02F         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2008  000A2C  C0C4  F030         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2009  000A30  C0BC  F031         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2010  000A34  C0BD  F032         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2011  000A38  C0BE  F033         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2012  000A3C  ECA7  F00B         	call	__tdiv_to_l_	;wreg free
  2013  000A40  C02E  F0B4         	movff	?__tdiv_to_l_,sprintf@val
  2014  000A44  C02F  F0B5         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2015  000A48  C030  F0B6         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2016  000A4C  C031  F0B7         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2017                           
  2018                           ;doprnt.c: 1129: fval = 0.0;
  2019  000A50  0E00               	movlw	0
  2020  000A52  0100               	movlb	0	; () banked
  2021  000A54  6FC2               	movwf	sprintf@fval& (0+255),b
  2022  000A56  0E00               	movlw	0
  2023  000A58  6FC3               	movwf	(sprintf@fval+1)& (0+255),b
  2024  000A5A  0E00               	movlw	0
  2025  000A5C  6FC4               	movwf	(sprintf@fval+2)& (0+255),b
  2026                           
  2027                           ;doprnt.c: 1130: } else {
  2028  000A5E  D033               	goto	l224
  2029  000A60                     l215:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2033                           
  2034                           ; BSR set to: 0
  2035  000A60  C0C2  F08D         	movff	sprintf@fval,___fttol@f1
  2036  000A64  C0C3  F08E         	movff	sprintf@fval+1,___fttol@f1+1
  2037  000A68  C0C4  F08F         	movff	sprintf@fval+2,___fttol@f1+2
  2038  000A6C  ECF8  F00D         	call	___fttol	;wreg free
  2039  000A70  C08D  F0B4         	movff	?___fttol,sprintf@val
  2040  000A74  C08E  F0B5         	movff	?___fttol+1,sprintf@val+1
  2041  000A78  C08F  F0B6         	movff	?___fttol+2,sprintf@val+2
  2042  000A7C  C090  F0B7         	movff	?___fttol+3,sprintf@val+3
  2043                           
  2044                           ;doprnt.c: 1132: fval -= (double)val;
  2045  000A80  C0C2  F09C         	movff	sprintf@fval,___ftsub@f1
  2046  000A84  C0C3  F09D         	movff	sprintf@fval+1,___ftsub@f1+1
  2047  000A88  C0C4  F09E         	movff	sprintf@fval+2,___ftsub@f1+2
  2048  000A8C  C0B4  F036         	movff	sprintf@val,___lltoft@c
  2049  000A90  C0B5  F037         	movff	sprintf@val+1,___lltoft@c+1
  2050  000A94  C0B6  F038         	movff	sprintf@val+2,___lltoft@c+2
  2051  000A98  C0B7  F039         	movff	sprintf@val+3,___lltoft@c+3
  2052  000A9C  EC4C  F011         	call	___lltoft	;wreg free
  2053  000AA0  C036  F09F         	movff	?___lltoft,___ftsub@f2
  2054  000AA4  C037  F0A0         	movff	?___lltoft+1,___ftsub@f2+1
  2055  000AA8  C038  F0A1         	movff	?___lltoft+2,___ftsub@f2+2
  2056  000AAC  EC12  F012         	call	___ftsub	;wreg free
  2057  000AB0  C09C  F0C2         	movff	?___ftsub,sprintf@fval
  2058  000AB4  C09D  F0C3         	movff	?___ftsub+1,sprintf@fval+1
  2059  000AB8  C09E  F0C4         	movff	?___ftsub+2,sprintf@fval+2
  2060                           
  2061                           ;doprnt.c: 1133: exp = 0;
  2062  000ABC  0E00               	movlw	0
  2063  000ABE  0100               	movlb	0	; () banked
  2064  000AC0  6FC1               	movwf	(sprintf@exp+1)& (0+255),b
  2065  000AC2  0E00               	movlw	0
  2066  000AC4  6FC0               	movwf	sprintf@exp& (0+255),b
  2067  000AC6                     l224:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 1134: }
  2071                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2072                           
  2073                           ; BSR set to: 0
  2074  000AC6  0E01               	movlw	1
  2075  000AC8  6FC7               	movwf	sprintf@c& (0+255),b
  2076  000ACA                     l3959:
  2077                           
  2078                           ; BSR set to: 0
  2079  000ACA  0E0A               	movlw	10
  2080  000ACC  19C7               	xorwf	sprintf@c& (0+255),w,b
  2081  000ACE  B4D8               	btfsc	status,2,c
  2082  000AD0  D018               	goto	u4290
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 1137: if(val < dpowers[c])
  2086                           
  2087                           ; BSR set to: 0
  2088                           
  2089                           ; BSR set to: 0
  2090  000AD2  51C7               	movf	sprintf@c& (0+255),w,b
  2091  000AD4  0D04               	mullw	4
  2092  000AD6  0E01               	movlw	low _dpowers
  2093  000AD8  24F3               	addwf	prodl,w,c
  2094  000ADA  6EF6               	movwf	tblptrl,c
  2095  000ADC  0E06               	movlw	high _dpowers
  2096  000ADE  20F4               	addwfc	prodh,w,c
  2097  000AE0  6EF7               	movwf	tblptrh,c
  2098  000AE2                     	if	0	;There are less than 3 active tblptr bytes
  2099  000AE2                     	endif
  2100  000AE2  0009               	tblrd		*+
  2101  000AE4  50F5               	movf	tablat,w,c
  2102  000AE6  5DB4               	subwf	sprintf@val& (0+255),w,b
  2103  000AE8  0009               	tblrd		*+
  2104  000AEA  50F5               	movf	tablat,w,c
  2105  000AEC  59B5               	subwfb	(sprintf@val+1)& (0+255),w,b
  2106  000AEE  0009               	tblrd		*+
  2107  000AF0  50F5               	movf	tablat,w,c
  2108  000AF2  59B6               	subwfb	(sprintf@val+2)& (0+255),w,b
  2109  000AF4  0009               	tblrd		*+
  2110  000AF6  50F5               	movf	tablat,w,c
  2111  000AF8  59B7               	subwfb	(sprintf@val+3)& (0+255),w,b
  2112  000AFA  A0D8               	btfss	status,0,c
  2113  000AFC  D002               	goto	u4290
  2114                           
  2115                           ; BSR set to: 0
  2116                           
  2117                           ; BSR set to: 0
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;doprnt.c: 1138: break;
  2121  000AFE  2BC7               	incf	sprintf@c& (0+255),f,b
  2122  000B00  D7E4               	goto	l3959
  2123  000B02                     u4290:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1142: width -= prec + c + exp;
  2127                           
  2128                           ; BSR set to: 0
  2129  000B02  C0C7  F0A9         	movff	sprintf@c,??_sprintf
  2130  000B06  6BAA               	clrf	(??_sprintf+1)& (0+255),b
  2131  000B08  BFA9               	btfsc	??_sprintf& (0+255),7,b
  2132  000B0A  07AA               	decf	(??_sprintf+1)& (0+255),f,b
  2133  000B0C  51C5               	movf	sprintf@prec& (0+255),w,b
  2134  000B0E  27A9               	addwf	??_sprintf& (0+255),f,b
  2135  000B10  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2136  000B12  23AA               	addwfc	(??_sprintf+1)& (0+255),f,b
  2137  000B14  51C0               	movf	sprintf@exp& (0+255),w,b
  2138  000B16  27A9               	addwf	??_sprintf& (0+255),f,b
  2139  000B18  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  2140  000B1A  23AA               	addwfc	(??_sprintf+1)& (0+255),f,b
  2141  000B1C  51A9               	movf	??_sprintf& (0+255),w,b
  2142  000B1E  5FBA               	subwf	sprintf@width& (0+255),f,b
  2143  000B20  51AA               	movf	(??_sprintf+1)& (0+255),w,b
  2144  000B22  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2145                           
  2146                           ;doprnt.c: 1143: if(
  2147                           ;doprnt.c: 1147: prec)
  2148  000B24  51C5               	movf	sprintf@prec& (0+255),w,b
  2149  000B26  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2150  000B28  B4D8               	btfsc	status,2,c
  2151  000B2A  D003               	goto	l228
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 1148: width--;
  2155  000B2C  07BA               	decf	sprintf@width& (0+255),f,b
  2156  000B2E  A0D8               	btfss	status,0,c
  2157  000B30  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2158  000B32                     l228:
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;doprnt.c: 1149: if(flag & 0x03)
  2162                           
  2163                           ; BSR set to: 0
  2164  000B32  0E03               	movlw	3
  2165  000B34  15B8               	andwf	sprintf@flag& (0+255),w,b
  2166  000B36  6FA9               	movwf	??_sprintf& (0+255),b
  2167  000B38  0E00               	movlw	0
  2168  000B3A  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2169  000B3C  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2170  000B3E  51A9               	movf	??_sprintf& (0+255),w,b
  2171  000B40  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2172  000B42  B4D8               	btfsc	status,2,c
  2173  000B44  D00C               	goto	l230
  2174  000B46  D008               	goto	l3983
  2175  000B48                     l3979:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2179  000B48  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2180  000B4C  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2181  000B50  0E20               	movlw	32
  2182  000B52  6EDF               	movwf	indf2,c
  2183                           
  2184                           ; BSR set to: 0
  2185  000B54  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2186  000B56  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2187  000B58                     l3983:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;doprnt.c: 1182: width--;
  2191  000B58  07BA               	decf	sprintf@width& (0+255),f,b
  2192  000B5A  A0D8               	btfss	status,0,c
  2193  000B5C  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2194  000B5E                     l230:
  2195                           
  2196                           ; BSR set to: 0
  2197                           
  2198                           ; BSR set to: 0
  2199  000B5E  BFBB               	btfsc	(sprintf@width+1)& (0+255),7,b
  2200  000B60  D005               	goto	u4320
  2201  000B62  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2202  000B64  E1F1               	bnz	l3979
  2203  000B66  05BA               	decf	sprintf@width& (0+255),w,b
  2204  000B68  B0D8               	btfsc	status,0,c
  2205  000B6A  D7EE               	goto	l231
  2206  000B6C                     u4320:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;doprnt.c: 1183: }
  2210                           ;doprnt.c: 1188: if(flag & 0x03)
  2211                           
  2212                           ; BSR set to: 0
  2213  000B6C  0E03               	movlw	3
  2214  000B6E  15B8               	andwf	sprintf@flag& (0+255),w,b
  2215  000B70  6FA9               	movwf	??_sprintf& (0+255),b
  2216  000B72  0E00               	movlw	0
  2217  000B74  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2218  000B76  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2219  000B78  51A9               	movf	??_sprintf& (0+255),w,b
  2220  000B7A  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2221  000B7C  B4D8               	btfsc	status,2,c
  2222  000B7E  D050               	goto	l234
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2226  000B80  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2227  000B84  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2228  000B88  0E2D               	movlw	45
  2229  000B8A  D047               	goto	L2
  2230  000B8C                     
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1200: {
  2233                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2234                           
  2235                           ; BSR set to: 0
  2236  000B8C  C0B4  F02E         	movff	sprintf@val,___lldiv@dividend
  2237  000B90  C0B5  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2238  000B94  C0B6  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2239  000B98  C0B7  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2240  000B9C  51C7               	movf	sprintf@c& (0+255),w,b
  2241  000B9E  0D04               	mullw	4
  2242  000BA0  0E01               	movlw	low _dpowers
  2243  000BA2  24F3               	addwf	prodl,w,c
  2244  000BA4  6EF6               	movwf	tblptrl,c
  2245  000BA6  0E06               	movlw	high _dpowers
  2246  000BA8  20F4               	addwfc	prodh,w,c
  2247  000BAA  6EF7               	movwf	tblptrh,c
  2248  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  2249  000BAC                     	endif
  2250  000BAC  0009               	tblrd		*+
  2251  000BAE  CFF5 F032          	movff	tablat,___lldiv@divisor
  2252  000BB2  0009               	tblrd		*+
  2253  000BB4  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2254  000BB8  0009               	tblrd		*+
  2255  000BBA  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2256  000BBE  000A               	tblrd		*-
  2257  000BC0  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2258  000BC4  ECA0  F010         	call	___lldiv	;wreg free
  2259  000BC8  C02E  F0BC         	movff	?___lldiv,sprintf@tmpval
  2260  000BCC  C02F  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2261  000BD0  C030  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2262  000BD4  C031  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2263                           
  2264                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2265  000BD8  C0BC  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2266  000BDC  C0BD  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2267  000BE0  C0BE  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2268  000BE4  C0BF  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2269  000BE8  0E0A               	movlw	10
  2270  000BEA  6E32               	movwf	___llmod@divisor,c
  2271  000BEC  0E00               	movlw	0
  2272  000BEE  6E33               	movwf	___llmod@divisor+1,c
  2273  000BF0  0E00               	movlw	0
  2274  000BF2  6E34               	movwf	___llmod@divisor+2,c
  2275  000BF4  0E00               	movlw	0
  2276  000BF6  6E35               	movwf	___llmod@divisor+3,c
  2277  000BF8  EC19  F011         	call	___llmod	;wreg free
  2278  000BFC  C02E  F0BC         	movff	?___llmod,sprintf@tmpval
  2279  000C00  C02F  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2280  000C04  C030  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2281  000C08  C031  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2282                           
  2283                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2284  000C0C  0100               	movlb	0	; () banked
  2285  000C0E  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2286  000C10  0F30               	addlw	48
  2287  000C12  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2288  000C16  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2289  000C1A                     L2:
  2290  000C1A  6EDF               	movwf	indf2,c
  2291                           
  2292                           ; BSR set to: 0
  2293  000C1C  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2294  000C1E  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2295  000C20                     l234:
  2296                           
  2297                           ; BSR set to: 0
  2298                           
  2299                           ; BSR set to: 0
  2300  000C20  07C7               	decf	sprintf@c& (0+255),f,b
  2301  000C22  29C7               	incf	sprintf@c& (0+255),w,b
  2302  000C24  B4D8               	btfsc	status,2,c
  2303  000C26  D00C               	goto	l237
  2304  000C28  D7B1               	goto	l235
  2305  000C2A                     l4003:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2309  000C2A  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2310  000C2E  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2311  000C32  0E30               	movlw	48
  2312  000C34  6EDF               	movwf	indf2,c
  2313                           
  2314                           ; BSR set to: 0
  2315  000C36  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2316  000C38  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1209: exp--;
  2320  000C3A  07C0               	decf	sprintf@exp& (0+255),f,b
  2321  000C3C  A0D8               	btfss	status,0,c
  2322  000C3E  07C1               	decf	(sprintf@exp+1)& (0+255),f,b
  2323  000C40                     l237:
  2324                           
  2325                           ; BSR set to: 0
  2326                           
  2327                           ; BSR set to: 0
  2328  000C40  BFC1               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2329  000C42  D005               	goto	u4350
  2330  000C44  51C1               	movf	(sprintf@exp+1)& (0+255),w,b
  2331  000C46  E1F1               	bnz	l4003
  2332  000C48  05C0               	decf	sprintf@exp& (0+255),w,b
  2333  000C4A  B0D8               	btfsc	status,0,c
  2334  000C4C  D7EE               	goto	l238
  2335  000C4E                     u4350:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;doprnt.c: 1210: }
  2339                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2340                           
  2341                           ; BSR set to: 0
  2342  000C4E  BFC6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2343  000C50  D009               	goto	l240
  2344  000C52  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2345  000C54  E104               	bnz	u4360
  2346  000C56  0E09               	movlw	9
  2347  000C58  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2348  000C5A  A0D8               	btfss	status,0,c
  2349  000C5C  D003               	goto	l240
  2350  000C5E                     u4360:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2354  000C5E  0E08               	movlw	8
  2355  000C60  6FC7               	movwf	sprintf@c& (0+255),b
  2356  000C62  D002               	goto	l241
  2357  000C64                     l240:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;doprnt.c: 1213: else
  2361                           ;doprnt.c: 1214: c = prec;
  2362  000C64  C0C5  F0C7         	movff	sprintf@prec,sprintf@c
  2363  000C68                     l241:
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 1215: prec -= c;
  2367                           
  2368                           ; BSR set to: 0
  2369  000C68  51C7               	movf	sprintf@c& (0+255),w,b
  2370  000C6A  5FC5               	subwf	sprintf@prec& (0+255),f,b
  2371  000C6C  0E00               	movlw	0
  2372  000C6E  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2373  000C70  0EFF               	movlw	255
  2374  000C72  5BC6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 1219: if(c)
  2378  000C74  51C7               	movf	sprintf@c& (0+255),w,b
  2379  000C76  B4D8               	btfsc	status,2,c
  2380  000C78  D008               	goto	l242
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2384  000C7A  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2385  000C7E  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2386  000C82  0E2E               	movlw	46
  2387  000C84  6EDF               	movwf	indf2,c
  2388                           
  2389                           ; BSR set to: 0
  2390  000C86  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2391  000C88  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2392  000C8A                     l242:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2396                           
  2397                           ; BSR set to: 0
  2398  000C8A  51C7               	movf	sprintf@c& (0+255),w,b
  2399  000C8C  EC93  F007         	call	_scale
  2400  000C90  C086  F0AF         	movff	?_scale,_sprintf$835
  2401  000C94  C087  F0B0         	movff	?_scale+1,_sprintf$835+1
  2402  000C98  C088  F0B1         	movff	?_scale+2,_sprintf$835+2
  2403                           
  2404                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2405  000C9C  C0C2  F045         	movff	sprintf@fval,___ftmul@f2
  2406  000CA0  C0C3  F046         	movff	sprintf@fval+1,___ftmul@f2+1
  2407  000CA4  C0C4  F047         	movff	sprintf@fval+2,___ftmul@f2+2
  2408  000CA8  C0AF  F042         	movff	_sprintf$835,___ftmul@f1
  2409  000CAC  C0B0  F043         	movff	_sprintf$835+1,___ftmul@f1+1
  2410  000CB0  C0B1  F044         	movff	_sprintf$835+2,___ftmul@f1+2
  2411  000CB4  EC74  F00E         	call	___ftmul	;wreg free
  2412  000CB8  C042  F08D         	movff	?___ftmul,___fttol@f1
  2413  000CBC  C043  F08E         	movff	?___ftmul+1,___fttol@f1+1
  2414  000CC0  C044  F08F         	movff	?___ftmul+2,___fttol@f1+2
  2415  000CC4  ECF8  F00D         	call	___fttol	;wreg free
  2416  000CC8  C08D  F0B4         	movff	?___fttol,sprintf@val
  2417  000CCC  C08E  F0B5         	movff	?___fttol+1,sprintf@val+1
  2418  000CD0  C08F  F0B6         	movff	?___fttol+2,sprintf@val+2
  2419  000CD4  C090  F0B7         	movff	?___fttol+3,sprintf@val+3
  2420                           
  2421                           ;doprnt.c: 1228: while(c--) {
  2422  000CD8  D071               	goto	l243
  2423  000CDA                     
  2424                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2425  000CDA  C0B4  F02E         	movff	sprintf@val,___lldiv@dividend
  2426  000CDE  C0B5  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2427  000CE2  C0B6  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2428  000CE6  C0B7  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2429  000CEA  0100               	movlb	0	; () banked
  2430  000CEC  51C7               	movf	sprintf@c& (0+255),w,b
  2431  000CEE  0D04               	mullw	4
  2432  000CF0  0E01               	movlw	low _dpowers
  2433  000CF2  24F3               	addwf	prodl,w,c
  2434  000CF4  6EF6               	movwf	tblptrl,c
  2435  000CF6  0E06               	movlw	high _dpowers
  2436  000CF8  20F4               	addwfc	prodh,w,c
  2437  000CFA  6EF7               	movwf	tblptrh,c
  2438  000CFC                     	if	0	;There are less than 3 active tblptr bytes
  2439  000CFC                     	endif
  2440  000CFC  0009               	tblrd		*+
  2441  000CFE  CFF5 F032          	movff	tablat,___lldiv@divisor
  2442  000D02  0009               	tblrd		*+
  2443  000D04  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2444  000D08  0009               	tblrd		*+
  2445  000D0A  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2446  000D0E  000A               	tblrd		*-
  2447  000D10  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2448  000D14  ECA0  F010         	call	___lldiv	;wreg free
  2449  000D18  C02E  F0BC         	movff	?___lldiv,sprintf@tmpval
  2450  000D1C  C02F  F0BD         	movff	?___lldiv+1,sprintf@tmpval+1
  2451  000D20  C030  F0BE         	movff	?___lldiv+2,sprintf@tmpval+2
  2452  000D24  C031  F0BF         	movff	?___lldiv+3,sprintf@tmpval+3
  2453                           
  2454                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2455  000D28  C0BC  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2456  000D2C  C0BD  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2457  000D30  C0BE  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2458  000D34  C0BF  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2459  000D38  0E0A               	movlw	10
  2460  000D3A  6E32               	movwf	___llmod@divisor,c
  2461  000D3C  0E00               	movlw	0
  2462  000D3E  6E33               	movwf	___llmod@divisor+1,c
  2463  000D40  0E00               	movlw	0
  2464  000D42  6E34               	movwf	___llmod@divisor+2,c
  2465  000D44  0E00               	movlw	0
  2466  000D46  6E35               	movwf	___llmod@divisor+3,c
  2467  000D48  EC19  F011         	call	___llmod	;wreg free
  2468  000D4C  C02E  F0BC         	movff	?___llmod,sprintf@tmpval
  2469  000D50  C02F  F0BD         	movff	?___llmod+1,sprintf@tmpval+1
  2470  000D54  C030  F0BE         	movff	?___llmod+2,sprintf@tmpval+2
  2471  000D58  C031  F0BF         	movff	?___llmod+3,sprintf@tmpval+3
  2472                           
  2473                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2474  000D5C  0100               	movlb	0	; () banked
  2475  000D5E  51BC               	movf	sprintf@tmpval& (0+255),w,b
  2476  000D60  0F30               	addlw	48
  2477  000D62  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2478  000D66  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2479  000D6A  6EDF               	movwf	indf2,c
  2480                           
  2481                           ; BSR set to: 0
  2482  000D6C  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2483  000D6E  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1232: val %= dpowers[c];
  2487  000D70  C0B4  F02E         	movff	sprintf@val,___llmod@dividend
  2488  000D74  C0B5  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2489  000D78  C0B6  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2490  000D7C  C0B7  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2491  000D80  51C7               	movf	sprintf@c& (0+255),w,b
  2492  000D82  0D04               	mullw	4
  2493  000D84  0E01               	movlw	low _dpowers
  2494  000D86  24F3               	addwf	prodl,w,c
  2495  000D88  6EF6               	movwf	tblptrl,c
  2496  000D8A  0E06               	movlw	high _dpowers
  2497  000D8C  20F4               	addwfc	prodh,w,c
  2498  000D8E  6EF7               	movwf	tblptrh,c
  2499  000D90                     	if	0	;There are less than 3 active tblptr bytes
  2500  000D90                     	endif
  2501  000D90  0009               	tblrd		*+
  2502  000D92  CFF5 F032          	movff	tablat,___llmod@divisor
  2503  000D96  0009               	tblrd		*+
  2504  000D98  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2505  000D9C  0009               	tblrd		*+
  2506  000D9E  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2507  000DA2  000A               	tblrd		*-
  2508  000DA4  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2509  000DA8  EC19  F011         	call	___llmod	;wreg free
  2510  000DAC  C02E  F0B4         	movff	?___llmod,sprintf@val
  2511  000DB0  C02F  F0B5         	movff	?___llmod+1,sprintf@val+1
  2512  000DB4  C030  F0B6         	movff	?___llmod+2,sprintf@val+2
  2513  000DB8  C031  F0B7         	movff	?___llmod+3,sprintf@val+3
  2514  000DBC                     l243:
  2515  000DBC  0100               	movlb	0	; () banked
  2516  000DBE  07C7               	decf	sprintf@c& (0+255),f,b
  2517  000DC0  29C7               	incf	sprintf@c& (0+255),w,b
  2518  000DC2  B4D8               	btfsc	status,2,c
  2519  000DC4  D00C               	goto	l246
  2520  000DC6  D789               	goto	l244
  2521  000DC8                     
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2524                           
  2525                           ; BSR set to: 0
  2526  000DC8  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2527  000DCC  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2528  000DD0  0E30               	movlw	48
  2529  000DD2  6EDF               	movwf	indf2,c
  2530                           
  2531                           ; BSR set to: 0
  2532  000DD4  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2533  000DD6  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;doprnt.c: 1237: prec--;
  2537  000DD8  07C5               	decf	sprintf@prec& (0+255),f,b
  2538  000DDA  A0D8               	btfss	status,0,c
  2539  000DDC  07C6               	decf	(sprintf@prec+1)& (0+255),f,b
  2540  000DDE                     l246:
  2541                           
  2542                           ; BSR set to: 0
  2543                           
  2544                           ; BSR set to: 0
  2545  000DDE  51C5               	movf	sprintf@prec& (0+255),w,b
  2546  000DE0  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2547  000DE2  B4D8               	btfsc	status,2,c
  2548  000DE4  D08C               	goto	l262
  2549  000DE6  D7F0               	goto	l247
  2550  000DE8                     l206:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1246: }
  2554                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2555                           
  2556                           ; BSR set to: 0
  2557  000DE8  51C5               	movf	sprintf@prec& (0+255),w,b
  2558  000DEA  11C6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2559  000DEC  A4D8               	btfss	status,2,c
  2560  000DEE  D008               	goto	l249
  2561                           
  2562                           ; BSR set to: 0
  2563  000DF0  51B4               	movf	sprintf@val& (0+255),w,b
  2564  000DF2  11B5               	iorwf	(sprintf@val+1)& (0+255),w,b
  2565  000DF4  11B6               	iorwf	(sprintf@val+2)& (0+255),w,b
  2566  000DF6  11B7               	iorwf	(sprintf@val+3)& (0+255),w,b
  2567  000DF8  A4D8               	btfss	status,2,c
  2568  000DFA  D002               	goto	l249
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1291: prec++;
  2572  000DFC  4BC5               	infsnz	sprintf@prec& (0+255),f,b
  2573  000DFE  2BC6               	incf	(sprintf@prec+1)& (0+255),f,b
  2574  000E00                     l249:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1339: if(c < prec)
  2578                           
  2579                           ; BSR set to: 0
  2580  000E00  0E80               	movlw	128
  2581  000E02  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2582  000E04  0E7F               	movlw	127
  2583  000E06  6FA9               	movwf	??_sprintf& (0+255),b
  2584  000E08  51C5               	movf	sprintf@prec& (0+255),w,b
  2585  000E0A  5DC7               	subwf	sprintf@c& (0+255),w,b
  2586  000E0C  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2587  000E0E  0A80               	xorlw	128
  2588  000E10  59A9               	subwfb	??_sprintf& (0+255),w,b
  2589  000E12  B0D8               	btfsc	status,0,c
  2590  000E14  D003               	goto	l250
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1340: c = prec;
  2594  000E16  C0C5  F0C7         	movff	sprintf@prec,sprintf@c
  2595  000E1A  D010               	goto	l252
  2596  000E1C                     l250:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;doprnt.c: 1341: else if(prec < c)
  2600                           
  2601                           ; BSR set to: 0
  2602  000E1C  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2603  000E1E  0A80               	xorlw	128
  2604  000E20  6FA9               	movwf	??_sprintf& (0+255),b
  2605  000E22  51C7               	movf	sprintf@c& (0+255),w,b
  2606  000E24  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2607  000E26  0E80               	movlw	128
  2608  000E28  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2609  000E2A  0E7F               	movlw	127
  2610  000E2C  59A9               	subwfb	??_sprintf& (0+255),w,b
  2611  000E2E  B0D8               	btfsc	status,0,c
  2612  000E30  D005               	goto	l252
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;doprnt.c: 1342: prec = c;
  2616  000E32  51C7               	movf	sprintf@c& (0+255),w,b
  2617  000E34  6FC5               	movwf	sprintf@prec& (0+255),b
  2618  000E36  6BC6               	clrf	(sprintf@prec+1)& (0+255),b
  2619  000E38  BFC5               	btfsc	sprintf@prec& (0+255),7,b
  2620  000E3A  07C6               	decf	(sprintf@prec+1)& (0+255),f,b
  2621  000E3C                     l252:
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2625                           
  2626                           ; BSR set to: 0
  2627                           
  2628                           ; BSR set to: 0
  2629  000E3C  51BA               	movf	sprintf@width& (0+255),w,b
  2630  000E3E  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2631  000E40  B4D8               	btfsc	status,2,c
  2632  000E42  D00D               	goto	l253
  2633                           
  2634                           ; BSR set to: 0
  2635  000E44  0E03               	movlw	3
  2636  000E46  15B8               	andwf	sprintf@flag& (0+255),w,b
  2637  000E48  6FA9               	movwf	??_sprintf& (0+255),b
  2638  000E4A  0E00               	movlw	0
  2639  000E4C  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2640  000E4E  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2641  000E50  51A9               	movf	??_sprintf& (0+255),w,b
  2642  000E52  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2643  000E54  B4D8               	btfsc	status,2,c
  2644  000E56  D003               	goto	l253
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;doprnt.c: 1346: width--;
  2648  000E58  07BA               	decf	sprintf@width& (0+255),f,b
  2649  000E5A  A0D8               	btfss	status,0,c
  2650  000E5C  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2651  000E5E                     l253:
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2655                           
  2656                           ; BSR set to: 0
  2657  000E5E  ADB9               	btfss	(sprintf@flag+1)& (0+255),6,b
  2658  000E60  D013               	goto	l256
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 1349: if(width > prec)
  2662  000E62  51BA               	movf	sprintf@width& (0+255),w,b
  2663  000E64  5DC5               	subwf	sprintf@prec& (0+255),w,b
  2664  000E66  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2665  000E68  0A80               	xorlw	128
  2666  000E6A  6FA9               	movwf	??_sprintf& (0+255),b
  2667  000E6C  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2668  000E6E  0A80               	xorlw	128
  2669  000E70  59A9               	subwfb	??_sprintf& (0+255),w,b
  2670  000E72  B0D8               	btfsc	status,0,c
  2671  000E74  D005               	goto	l255
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;doprnt.c: 1350: width -= prec;
  2675  000E76  51C5               	movf	sprintf@prec& (0+255),w,b
  2676  000E78  5FBA               	subwf	sprintf@width& (0+255),f,b
  2677  000E7A  51C6               	movf	(sprintf@prec+1)& (0+255),w,b
  2678  000E7C  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2679  000E7E  D004               	goto	l256
  2680  000E80                     l255:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;doprnt.c: 1351: else
  2684                           ;doprnt.c: 1352: width = 0;
  2685                           
  2686                           ; BSR set to: 0
  2687  000E80  0E00               	movlw	0
  2688  000E82  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  2689  000E84  0E00               	movlw	0
  2690  000E86  6FBA               	movwf	sprintf@width& (0+255),b
  2691  000E88                     l256:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 1353: }
  2695                           ;doprnt.c: 1381: if(width > c)
  2696                           
  2697                           ; BSR set to: 0
  2698                           
  2699                           ; BSR set to: 0
  2700  000E88  0E80               	movlw	128
  2701  000E8A  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2702  000E8C  0E7F               	movlw	127
  2703  000E8E  6FA9               	movwf	??_sprintf& (0+255),b
  2704  000E90  51BA               	movf	sprintf@width& (0+255),w,b
  2705  000E92  5DC7               	subwf	sprintf@c& (0+255),w,b
  2706  000E94  51BB               	movf	(sprintf@width+1)& (0+255),w,b
  2707  000E96  0A80               	xorlw	128
  2708  000E98  59A9               	subwfb	??_sprintf& (0+255),w,b
  2709  000E9A  B0D8               	btfsc	status,0,c
  2710  000E9C  D007               	goto	l257
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 1382: width -= c;
  2714  000E9E  51C7               	movf	sprintf@c& (0+255),w,b
  2715  000EA0  5FBA               	subwf	sprintf@width& (0+255),f,b
  2716  000EA2  0E00               	movlw	0
  2717  000EA4  BFC7               	btfsc	sprintf@c& (0+255),7,b
  2718  000EA6  0EFF               	movlw	255
  2719  000EA8  5BBB               	subwfb	(sprintf@width+1)& (0+255),f,b
  2720  000EAA  D004               	goto	l258
  2721  000EAC                     l257:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;doprnt.c: 1383: else
  2725                           ;doprnt.c: 1384: width = 0;
  2726                           
  2727                           ; BSR set to: 0
  2728  000EAC  0E00               	movlw	0
  2729  000EAE  6FBB               	movwf	(sprintf@width+1)& (0+255),b
  2730  000EB0  0E00               	movlw	0
  2731  000EB2  6FBA               	movwf	sprintf@width& (0+255),b
  2732  000EB4                     l258:
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;doprnt.c: 1422: {
  2736                           ;doprnt.c: 1424: if(width
  2737                           ;doprnt.c: 1428: )
  2738                           
  2739                           ; BSR set to: 0
  2740  000EB4  51BA               	movf	sprintf@width& (0+255),w,b
  2741  000EB6  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2742  000EB8  B4D8               	btfsc	status,2,c
  2743  000EBA  D00F               	goto	u4500
  2744  000EBC                     u4490:
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2748                           
  2749                           ; BSR set to: 0
  2750                           
  2751                           ;doprnt.c: 1429: do
  2752  000EBC  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2753  000EC0  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2754  000EC4  0E20               	movlw	32
  2755  000EC6  6EDF               	movwf	indf2,c
  2756                           
  2757                           ; BSR set to: 0
  2758  000EC8  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2759  000ECA  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1431: while(--width);
  2763  000ECC  07BA               	decf	sprintf@width& (0+255),f,b
  2764  000ECE  A0D8               	btfss	status,0,c
  2765  000ED0  07BB               	decf	(sprintf@width+1)& (0+255),f,b
  2766  000ED2  51BA               	movf	sprintf@width& (0+255),w,b
  2767  000ED4  11BB               	iorwf	(sprintf@width+1)& (0+255),w,b
  2768  000ED6  A4D8               	btfss	status,2,c
  2769  000ED8  D7F1               	goto	u4490
  2770  000EDA                     u4500:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 1438: if(flag & 0x03)
  2774                           
  2775                           ; BSR set to: 0
  2776                           
  2777                           ; BSR set to: 0
  2778  000EDA  0E03               	movlw	3
  2779  000EDC  15B8               	andwf	sprintf@flag& (0+255),w,b
  2780  000EDE  6FA9               	movwf	??_sprintf& (0+255),b
  2781  000EE0  0E00               	movlw	0
  2782  000EE2  15B9               	andwf	(sprintf@flag+1)& (0+255),w,b
  2783  000EE4  6FAA               	movwf	(??_sprintf+1)& (0+255),b
  2784  000EE6  51A9               	movf	??_sprintf& (0+255),w,b
  2785  000EE8  11AA               	iorwf	(??_sprintf+1)& (0+255),w,b
  2786  000EEA  B4D8               	btfsc	status,2,c
  2787  000EEC  D008               	goto	l262
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2791  000EEE  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2792  000EF2  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2793  000EF6  0E2D               	movlw	45
  2794  000EF8  6EDF               	movwf	indf2,c
  2795  000EFA                     l4093:
  2796                           
  2797                           ; BSR set to: 0
  2798  000EFA  4BA2               	infsnz	sprintf@sp& (0+255),f,b
  2799  000EFC  2BA3               	incf	(sprintf@sp+1)& (0+255),f,b
  2800  000EFE                     l262:
  2801                           
  2802                           ; BSR set to: 0
  2803                           
  2804                           ; BSR set to: 0
  2805                           
  2806                           ; BSR set to: 0
  2807  000EFE  C0A4  FFF6         	movff	sprintf@f,tblptrl
  2808  000F02  C0A5  FFF7         	movff	sprintf@f+1,tblptrh
  2809  000F06  4BA4               	infsnz	sprintf@f& (0+255),f,b
  2810  000F08  2BA5               	incf	(sprintf@f+1)& (0+255),f,b
  2811  000F0A                     	if	0	;tblptru may be non-zero
  2812  000F0A                     	endif
  2813  000F0A                     	if	0	;tblptru may be non-zero
  2814  000F0A                     	endif
  2815  000F0A  0008               	tblrd		*
  2816  000F0C  CFF5 F0C7          	movff	tablat,sprintf@c
  2817  000F10  51C7               	movf	sprintf@c& (0+255),w,b
  2818  000F12  A4D8               	btfss	status,2,c
  2819  000F14  EF4D  F003         	goto	l190
  2820  000F18                     u4520:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;doprnt.c: 1538: *sp = 0;
  2824                           
  2825                           ; BSR set to: 0
  2826                           
  2827                           ;doprnt.c: 1469: }
  2828                           ;doprnt.c: 1533: }
  2829                           ;doprnt.c: 1535: alldone:
  2830                           
  2831                           ; BSR set to: 0
  2832  000F18  C0A2  FFD9         	movff	sprintf@sp,fsr2l
  2833  000F1C  C0A3  FFDA         	movff	sprintf@sp+1,fsr2h
  2834  000F20  0E00               	movlw	0
  2835  000F22  6EDF               	movwf	indf2,c
  2836  000F24  0012               	return	
  2837  000F26                     __end_of_sprintf:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           intcon	equ	0xFF2
  2846                           postinc0	equ	0xFEE
  2847                           wreg	equ	0xFE8
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _scale *****************
  2856 ;; Defined at:
  2857 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  scl             1    wreg     char 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  scl             1   12[BANK0 ] char 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  3    6[BANK0 ] char 
  2864 ;; Registers used:
  2865 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2871 ;;      Params:         0       3       0       0       0       0       0
  2872 ;;      Locals:         0       4       0       0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0
  2874 ;;      Totals:         0       7       0       0       0       0       0
  2875 ;;Total ram usage:        7 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    4
  2878 ;; This function calls:
  2879 ;;		___awdiv
  2880 ;;		___awmod
  2881 ;;		___ftmul
  2882 ;;		___wmul
  2883 ;; This function is called by:
  2884 ;;		_sprintf
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text5
  2889  000F26                     __ptext5:
  2890                           	opt stack 0
  2891  000F26                     _scale:
  2892                           	opt stack 24
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;incstack = 0
  2896                           ;scale@scl stored from wreg
  2897  000F26  0100               	movlb	0	; () banked
  2898  000F28  6F8C               	movwf	scale@scl& (0+255),b
  2899                           
  2900                           ;doprnt.c: 428: if(scl < 0) {
  2901  000F2A  0100               	movlb	0	; () banked
  2902  000F2C  AF8C               	btfss	scale@scl& (0+255),7,b
  2903  000F2E  D106               	goto	l179
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 429: scl = -scl;
  2907  000F30  6D8C               	negf	scale@scl& (0+255),b
  2908                           
  2909                           ;doprnt.c: 430: if(scl>=110)
  2910  000F32  518C               	movf	scale@scl& (0+255),w,b
  2911  000F34  0A80               	xorlw	128
  2912  000F36  0F12               	addlw	-238
  2913  000F38  A0D8               	btfss	status,0,c
  2914  000F3A  D093               	goto	l180
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2918  000F3C  0E00               	movlw	0
  2919  000F3E  6E3F               	movwf	___wmul@multiplicand+1,c
  2920  000F40  0E03               	movlw	3
  2921  000F42  6E3E               	movwf	___wmul@multiplicand,c
  2922  000F44  0E00               	movlw	0
  2923  000F46  6E37               	movwf	___awdiv@divisor+1,c
  2924  000F48  0E0A               	movlw	10
  2925  000F4A  6E36               	movwf	___awdiv@divisor,c
  2926  000F4C  0E00               	movlw	0
  2927  000F4E  6E31               	movwf	___awmod@divisor+1,c
  2928  000F50  0E64               	movlw	100
  2929  000F52  6E30               	movwf	___awmod@divisor,c
  2930  000F54  518C               	movf	scale@scl& (0+255),w,b
  2931  000F56  6E2E               	movwf	___awmod@dividend,c
  2932  000F58  6A2F               	clrf	___awmod@dividend+1,c
  2933  000F5A  BE2E               	btfsc	___awmod@dividend,7,c
  2934  000F5C  062F               	decf	___awmod@dividend+1,f,c
  2935  000F5E  ECE1  F010         	call	___awmod	;wreg free
  2936  000F62  C02E  F034         	movff	?___awmod,___awdiv@dividend
  2937  000F66  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  2938  000F6A  EC5E  F010         	call	___awdiv	;wreg free
  2939  000F6E  0E09               	movlw	9
  2940  000F70  2434               	addwf	?___awdiv,w,c
  2941  000F72  6E3C               	movwf	___wmul@multiplier,c
  2942  000F74  0E00               	movlw	0
  2943  000F76  2035               	addwfc	?___awdiv+1,w,c
  2944  000F78  6E3D               	movwf	___wmul@multiplier+1,c
  2945  000F7A  EC93  F012         	call	___wmul	;wreg free
  2946  000F7E  0E50               	movlw	low __npowers_
  2947  000F80  243C               	addwf	?___wmul,w,c
  2948  000F82  6EF6               	movwf	tblptrl,c
  2949  000F84  0E06               	movlw	high __npowers_
  2950  000F86  203D               	addwfc	?___wmul+1,w,c
  2951  000F88  6EF7               	movwf	tblptrh,c
  2952  000F8A                     	if	0	;There are less than 3 active tblptr bytes
  2953  000F8A                     	endif
  2954  000F8A  0009               	tblrd		*+
  2955  000F8C  CFF5 F045          	movff	tablat,___ftmul@f2
  2956  000F90  0009               	tblrd		*+
  2957  000F92  CFF5 F046          	movff	tablat,___ftmul@f2+1
  2958  000F96  000A               	tblrd		*-
  2959  000F98  CFF5 F047          	movff	tablat,___ftmul@f2+2
  2960  000F9C  0E00               	movlw	0
  2961  000F9E  6E37               	movwf	___awdiv@divisor+1,c
  2962  000FA0  0E64               	movlw	100
  2963  000FA2  6E36               	movwf	___awdiv@divisor,c
  2964  000FA4  0100               	movlb	0	; () banked
  2965  000FA6  518C               	movf	scale@scl& (0+255),w,b
  2966  000FA8  6E34               	movwf	___awdiv@dividend,c
  2967  000FAA  6A35               	clrf	___awdiv@dividend+1,c
  2968  000FAC  BE34               	btfsc	___awdiv@dividend,7,c
  2969  000FAE  0635               	decf	___awdiv@dividend+1,f,c
  2970  000FB0  EC5E  F010         	call	___awdiv	;wreg free
  2971  000FB4  0E12               	movlw	18
  2972  000FB6  2434               	addwf	?___awdiv,w,c
  2973  000FB8  6E3C               	movwf	___wmul@multiplier,c
  2974  000FBA  0E00               	movlw	0
  2975  000FBC  2035               	addwfc	?___awdiv+1,w,c
  2976  000FBE  6E3D               	movwf	___wmul@multiplier+1,c
  2977  000FC0  0E00               	movlw	0
  2978  000FC2  6E3F               	movwf	___wmul@multiplicand+1,c
  2979  000FC4  0E03               	movlw	3
  2980  000FC6  6E3E               	movwf	___wmul@multiplicand,c
  2981  000FC8  EC93  F012         	call	___wmul	;wreg free
  2982  000FCC  0E50               	movlw	low __npowers_
  2983  000FCE  243C               	addwf	?___wmul,w,c
  2984  000FD0  6EF6               	movwf	tblptrl,c
  2985  000FD2  0E06               	movlw	high __npowers_
  2986  000FD4  203D               	addwfc	?___wmul+1,w,c
  2987  000FD6  6EF7               	movwf	tblptrh,c
  2988  000FD8                     	if	0	;There are less than 3 active tblptr bytes
  2989  000FD8                     	endif
  2990  000FD8  0009               	tblrd		*+
  2991  000FDA  CFF5 F042          	movff	tablat,___ftmul@f1
  2992  000FDE  0009               	tblrd		*+
  2993  000FE0  CFF5 F043          	movff	tablat,___ftmul@f1+1
  2994  000FE4  000A               	tblrd		*-
  2995  000FE6  CFF5 F044          	movff	tablat,___ftmul@f1+2
  2996  000FEA  EC74  F00E         	call	___ftmul	;wreg free
  2997  000FEE  C042  F089         	movff	?___ftmul,_scale$834
  2998  000FF2  C043  F08A         	movff	?___ftmul+1,_scale$834+1
  2999  000FF6  C044  F08B         	movff	?___ftmul+2,_scale$834+2
  3000                           
  3001                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3002  000FFA  C089  F042         	movff	_scale$834,___ftmul@f1
  3003  000FFE  C08A  F043         	movff	_scale$834+1,___ftmul@f1+1
  3004  001002  C08B  F044         	movff	_scale$834+2,___ftmul@f1+2
  3005  001006  0E00               	movlw	0
  3006  001008  6E3F               	movwf	___wmul@multiplicand+1,c
  3007  00100A  0E03               	movlw	3
  3008  00100C  6E3E               	movwf	___wmul@multiplicand,c
  3009  00100E  0E00               	movlw	0
  3010  001010  6E31               	movwf	___awmod@divisor+1,c
  3011  001012  0E0A               	movlw	10
  3012  001014  6E30               	movwf	___awmod@divisor,c
  3013  001016  0100               	movlb	0	; () banked
  3014  001018  518C               	movf	scale@scl& (0+255),w,b
  3015  00101A  6E2E               	movwf	___awmod@dividend,c
  3016  00101C  6A2F               	clrf	___awmod@dividend+1,c
  3017  00101E  BE2E               	btfsc	___awmod@dividend,7,c
  3018  001020  062F               	decf	___awmod@dividend+1,f,c
  3019  001022  ECE1  F010         	call	___awmod	;wreg free
  3020  001026  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3021  00102A  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3022  00102E  EC93  F012         	call	___wmul	;wreg free
  3023  001032  0E50               	movlw	low __npowers_
  3024  001034  243C               	addwf	?___wmul,w,c
  3025  001036  6EF6               	movwf	tblptrl,c
  3026  001038  0E06               	movlw	high __npowers_
  3027  00103A  203D               	addwfc	?___wmul+1,w,c
  3028  00103C  6EF7               	movwf	tblptrh,c
  3029  00103E                     	if	0	;There are less than 3 active tblptr bytes
  3030  00103E                     	endif
  3031  00103E  0009               	tblrd		*+
  3032  001040  CFF5 F045          	movff	tablat,___ftmul@f2
  3033  001044  0009               	tblrd		*+
  3034  001046  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3035  00104A  000A               	tblrd		*-
  3036  00104C  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3037  001050  EC74  F00E         	call	___ftmul	;wreg free
  3038  001054  C042  F086         	movff	?___ftmul,?_scale
  3039  001058  C043  F087         	movff	?___ftmul+1,?_scale+1
  3040  00105C  C044  F088         	movff	?___ftmul+2,?_scale+2
  3041  001060  0012               	return	
  3042  001062                     l180:
  3043                           
  3044                           ;doprnt.c: 432: else if(scl > 10)
  3045  001062  0100               	movlb	0	; () banked
  3046  001064  518C               	movf	scale@scl& (0+255),w,b
  3047  001066  0A80               	xorlw	128
  3048  001068  0F75               	addlw	-139
  3049  00106A  A0D8               	btfss	status,0,c
  3050  00106C  D054               	goto	l183
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3054  00106E  0E00               	movlw	0
  3055  001070  6E37               	movwf	___awdiv@divisor+1,c
  3056  001072  0E0A               	movlw	10
  3057  001074  6E36               	movwf	___awdiv@divisor,c
  3058  001076  518C               	movf	scale@scl& (0+255),w,b
  3059  001078  6E34               	movwf	___awdiv@dividend,c
  3060  00107A  6A35               	clrf	___awdiv@dividend+1,c
  3061  00107C  BE34               	btfsc	___awdiv@dividend,7,c
  3062  00107E  0635               	decf	___awdiv@dividend+1,f,c
  3063  001080  EC5E  F010         	call	___awdiv	;wreg free
  3064  001084  0E09               	movlw	9
  3065  001086  2434               	addwf	?___awdiv,w,c
  3066  001088  6E3C               	movwf	___wmul@multiplier,c
  3067  00108A  0E00               	movlw	0
  3068  00108C  2035               	addwfc	?___awdiv+1,w,c
  3069  00108E  6E3D               	movwf	___wmul@multiplier+1,c
  3070  001090  0E00               	movlw	0
  3071  001092  6E3F               	movwf	___wmul@multiplicand+1,c
  3072  001094  0E03               	movlw	3
  3073  001096  6E3E               	movwf	___wmul@multiplicand,c
  3074  001098  EC93  F012         	call	___wmul	;wreg free
  3075  00109C  0E50               	movlw	low __npowers_
  3076  00109E  243C               	addwf	?___wmul,w,c
  3077  0010A0  6EF6               	movwf	tblptrl,c
  3078  0010A2  0E06               	movlw	high __npowers_
  3079  0010A4  203D               	addwfc	?___wmul+1,w,c
  3080  0010A6  6EF7               	movwf	tblptrh,c
  3081  0010A8                     	if	0	;There are less than 3 active tblptr bytes
  3082  0010A8                     	endif
  3083  0010A8  0009               	tblrd		*+
  3084  0010AA  CFF5 F042          	movff	tablat,___ftmul@f1
  3085  0010AE  0009               	tblrd		*+
  3086  0010B0  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3087  0010B4  000A               	tblrd		*-
  3088  0010B6  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3089  0010BA  0E00               	movlw	0
  3090  0010BC  6E3F               	movwf	___wmul@multiplicand+1,c
  3091  0010BE  0E03               	movlw	3
  3092  0010C0  6E3E               	movwf	___wmul@multiplicand,c
  3093  0010C2  0E00               	movlw	0
  3094  0010C4  6E31               	movwf	___awmod@divisor+1,c
  3095  0010C6  0E0A               	movlw	10
  3096  0010C8  6E30               	movwf	___awmod@divisor,c
  3097  0010CA  0100               	movlb	0	; () banked
  3098  0010CC  518C               	movf	scale@scl& (0+255),w,b
  3099  0010CE  6E2E               	movwf	___awmod@dividend,c
  3100  0010D0  6A2F               	clrf	___awmod@dividend+1,c
  3101  0010D2  BE2E               	btfsc	___awmod@dividend,7,c
  3102  0010D4  062F               	decf	___awmod@dividend+1,f,c
  3103  0010D6  ECE1  F010         	call	___awmod	;wreg free
  3104  0010DA  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3105  0010DE  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3106  0010E2  EC93  F012         	call	___wmul	;wreg free
  3107  0010E6  0E50               	movlw	low __npowers_
  3108  0010E8  243C               	addwf	?___wmul,w,c
  3109  0010EA  6EF6               	movwf	tblptrl,c
  3110  0010EC  0E06               	movlw	high __npowers_
  3111  0010EE  203D               	addwfc	?___wmul+1,w,c
  3112  0010F0  6EF7               	movwf	tblptrh,c
  3113  0010F2                     	if	0	;There are less than 3 active tblptr bytes
  3114  0010F2                     	endif
  3115  0010F2  0009               	tblrd		*+
  3116  0010F4  CFF5 F045          	movff	tablat,___ftmul@f2
  3117  0010F8  0009               	tblrd		*+
  3118  0010FA  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3119  0010FE  000A               	tblrd		*-
  3120  001100  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3121  001104  EC74  F00E         	call	___ftmul	;wreg free
  3122  001108  C042  F086         	movff	?___ftmul,?_scale
  3123  00110C  C043  F087         	movff	?___ftmul+1,?_scale+1
  3124  001110  C044  F088         	movff	?___ftmul+2,?_scale+2
  3125  001114  0012               	return	
  3126  001116                     l183:
  3127                           
  3128                           ;doprnt.c: 434: return _npowers_[scl];
  3129  001116  0100               	movlb	0	; () banked
  3130  001118  518C               	movf	scale@scl& (0+255),w,b
  3131  00111A  0D03               	mullw	3
  3132  00111C  0E50               	movlw	low __npowers_
  3133  00111E  24F3               	addwf	prodl,w,c
  3134  001120  6EF6               	movwf	tblptrl,c
  3135  001122  0E06               	movlw	high __npowers_
  3136  001124  20F4               	addwfc	prodh,w,c
  3137  001126  6EF7               	movwf	tblptrh,c
  3138  001128                     	if	0	;There are less than 3 active tblptr bytes
  3139  001128                     	endif
  3140  001128  0009               	tblrd		*+
  3141  00112A  CFF5 F086          	movff	tablat,?_scale
  3142  00112E  0009               	tblrd		*+
  3143  001130  CFF5 F087          	movff	tablat,?_scale+1
  3144  001134  000A               	tblrd		*-
  3145  001136  CFF5 F088          	movff	tablat,?_scale+2
  3146                           
  3147                           ; BSR set to: 0
  3148  00113A  0012               	return	
  3149  00113C                     l179:
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;doprnt.c: 435: }
  3153                           ;doprnt.c: 436: if(scl>=110)
  3154                           
  3155                           ; BSR set to: 0
  3156  00113C  518C               	movf	scale@scl& (0+255),w,b
  3157  00113E  0A80               	xorlw	128
  3158  001140  0F12               	addlw	-238
  3159  001142  A0D8               	btfss	status,0,c
  3160  001144  D093               	goto	l184
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3164  001146  0E00               	movlw	0
  3165  001148  6E3F               	movwf	___wmul@multiplicand+1,c
  3166  00114A  0E03               	movlw	3
  3167  00114C  6E3E               	movwf	___wmul@multiplicand,c
  3168  00114E  0E00               	movlw	0
  3169  001150  6E37               	movwf	___awdiv@divisor+1,c
  3170  001152  0E0A               	movlw	10
  3171  001154  6E36               	movwf	___awdiv@divisor,c
  3172  001156  0E00               	movlw	0
  3173  001158  6E31               	movwf	___awmod@divisor+1,c
  3174  00115A  0E64               	movlw	100
  3175  00115C  6E30               	movwf	___awmod@divisor,c
  3176  00115E  518C               	movf	scale@scl& (0+255),w,b
  3177  001160  6E2E               	movwf	___awmod@dividend,c
  3178  001162  6A2F               	clrf	___awmod@dividend+1,c
  3179  001164  BE2E               	btfsc	___awmod@dividend,7,c
  3180  001166  062F               	decf	___awmod@dividend+1,f,c
  3181  001168  ECE1  F010         	call	___awmod	;wreg free
  3182  00116C  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3183  001170  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3184  001174  EC5E  F010         	call	___awdiv	;wreg free
  3185  001178  0E09               	movlw	9
  3186  00117A  2434               	addwf	?___awdiv,w,c
  3187  00117C  6E3C               	movwf	___wmul@multiplier,c
  3188  00117E  0E00               	movlw	0
  3189  001180  2035               	addwfc	?___awdiv+1,w,c
  3190  001182  6E3D               	movwf	___wmul@multiplier+1,c
  3191  001184  EC93  F012         	call	___wmul	;wreg free
  3192  001188  0E29               	movlw	low __powers_
  3193  00118A  243C               	addwf	?___wmul,w,c
  3194  00118C  6EF6               	movwf	tblptrl,c
  3195  00118E  0E06               	movlw	high __powers_
  3196  001190  203D               	addwfc	?___wmul+1,w,c
  3197  001192  6EF7               	movwf	tblptrh,c
  3198  001194                     	if	0	;There are less than 3 active tblptr bytes
  3199  001194                     	endif
  3200  001194  0009               	tblrd		*+
  3201  001196  CFF5 F045          	movff	tablat,___ftmul@f2
  3202  00119A  0009               	tblrd		*+
  3203  00119C  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3204  0011A0  000A               	tblrd		*-
  3205  0011A2  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3206  0011A6  0E00               	movlw	0
  3207  0011A8  6E37               	movwf	___awdiv@divisor+1,c
  3208  0011AA  0E64               	movlw	100
  3209  0011AC  6E36               	movwf	___awdiv@divisor,c
  3210  0011AE  0100               	movlb	0	; () banked
  3211  0011B0  518C               	movf	scale@scl& (0+255),w,b
  3212  0011B2  6E34               	movwf	___awdiv@dividend,c
  3213  0011B4  6A35               	clrf	___awdiv@dividend+1,c
  3214  0011B6  BE34               	btfsc	___awdiv@dividend,7,c
  3215  0011B8  0635               	decf	___awdiv@dividend+1,f,c
  3216  0011BA  EC5E  F010         	call	___awdiv	;wreg free
  3217  0011BE  0E12               	movlw	18
  3218  0011C0  2434               	addwf	?___awdiv,w,c
  3219  0011C2  6E3C               	movwf	___wmul@multiplier,c
  3220  0011C4  0E00               	movlw	0
  3221  0011C6  2035               	addwfc	?___awdiv+1,w,c
  3222  0011C8  6E3D               	movwf	___wmul@multiplier+1,c
  3223  0011CA  0E00               	movlw	0
  3224  0011CC  6E3F               	movwf	___wmul@multiplicand+1,c
  3225  0011CE  0E03               	movlw	3
  3226  0011D0  6E3E               	movwf	___wmul@multiplicand,c
  3227  0011D2  EC93  F012         	call	___wmul	;wreg free
  3228  0011D6  0E29               	movlw	low __powers_
  3229  0011D8  243C               	addwf	?___wmul,w,c
  3230  0011DA  6EF6               	movwf	tblptrl,c
  3231  0011DC  0E06               	movlw	high __powers_
  3232  0011DE  203D               	addwfc	?___wmul+1,w,c
  3233  0011E0  6EF7               	movwf	tblptrh,c
  3234  0011E2                     	if	0	;There are less than 3 active tblptr bytes
  3235  0011E2                     	endif
  3236  0011E2  0009               	tblrd		*+
  3237  0011E4  CFF5 F042          	movff	tablat,___ftmul@f1
  3238  0011E8  0009               	tblrd		*+
  3239  0011EA  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3240  0011EE  000A               	tblrd		*-
  3241  0011F0  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3242  0011F4  EC74  F00E         	call	___ftmul	;wreg free
  3243  0011F8  C042  F089         	movff	?___ftmul,_scale$834
  3244  0011FC  C043  F08A         	movff	?___ftmul+1,_scale$834+1
  3245  001200  C044  F08B         	movff	?___ftmul+2,_scale$834+2
  3246                           
  3247                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3248  001204  C089  F042         	movff	_scale$834,___ftmul@f1
  3249  001208  C08A  F043         	movff	_scale$834+1,___ftmul@f1+1
  3250  00120C  C08B  F044         	movff	_scale$834+2,___ftmul@f1+2
  3251  001210  0E00               	movlw	0
  3252  001212  6E3F               	movwf	___wmul@multiplicand+1,c
  3253  001214  0E03               	movlw	3
  3254  001216  6E3E               	movwf	___wmul@multiplicand,c
  3255  001218  0E00               	movlw	0
  3256  00121A  6E31               	movwf	___awmod@divisor+1,c
  3257  00121C  0E0A               	movlw	10
  3258  00121E  6E30               	movwf	___awmod@divisor,c
  3259  001220  0100               	movlb	0	; () banked
  3260  001222  518C               	movf	scale@scl& (0+255),w,b
  3261  001224  6E2E               	movwf	___awmod@dividend,c
  3262  001226  6A2F               	clrf	___awmod@dividend+1,c
  3263  001228  BE2E               	btfsc	___awmod@dividend,7,c
  3264  00122A  062F               	decf	___awmod@dividend+1,f,c
  3265  00122C  ECE1  F010         	call	___awmod	;wreg free
  3266  001230  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3267  001234  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3268  001238  EC93  F012         	call	___wmul	;wreg free
  3269  00123C  0E29               	movlw	low __powers_
  3270  00123E  243C               	addwf	?___wmul,w,c
  3271  001240  6EF6               	movwf	tblptrl,c
  3272  001242  0E06               	movlw	high __powers_
  3273  001244  203D               	addwfc	?___wmul+1,w,c
  3274  001246  6EF7               	movwf	tblptrh,c
  3275  001248                     	if	0	;There are less than 3 active tblptr bytes
  3276  001248                     	endif
  3277  001248  0009               	tblrd		*+
  3278  00124A  CFF5 F045          	movff	tablat,___ftmul@f2
  3279  00124E  0009               	tblrd		*+
  3280  001250  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3281  001254  000A               	tblrd		*-
  3282  001256  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3283  00125A  EC74  F00E         	call	___ftmul	;wreg free
  3284  00125E  C042  F086         	movff	?___ftmul,?_scale
  3285  001262  C043  F087         	movff	?___ftmul+1,?_scale+1
  3286  001266  C044  F088         	movff	?___ftmul+2,?_scale+2
  3287  00126A  0012               	return	
  3288  00126C                     l184:
  3289                           
  3290                           ;doprnt.c: 438: else if(scl > 10)
  3291  00126C  0100               	movlb	0	; () banked
  3292  00126E  518C               	movf	scale@scl& (0+255),w,b
  3293  001270  0A80               	xorlw	128
  3294  001272  0F75               	addlw	-139
  3295  001274  A0D8               	btfss	status,0,c
  3296  001276  D054               	goto	l186
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3300  001278  0E00               	movlw	0
  3301  00127A  6E37               	movwf	___awdiv@divisor+1,c
  3302  00127C  0E0A               	movlw	10
  3303  00127E  6E36               	movwf	___awdiv@divisor,c
  3304  001280  518C               	movf	scale@scl& (0+255),w,b
  3305  001282  6E34               	movwf	___awdiv@dividend,c
  3306  001284  6A35               	clrf	___awdiv@dividend+1,c
  3307  001286  BE34               	btfsc	___awdiv@dividend,7,c
  3308  001288  0635               	decf	___awdiv@dividend+1,f,c
  3309  00128A  EC5E  F010         	call	___awdiv	;wreg free
  3310  00128E  0E09               	movlw	9
  3311  001290  2434               	addwf	?___awdiv,w,c
  3312  001292  6E3C               	movwf	___wmul@multiplier,c
  3313  001294  0E00               	movlw	0
  3314  001296  2035               	addwfc	?___awdiv+1,w,c
  3315  001298  6E3D               	movwf	___wmul@multiplier+1,c
  3316  00129A  0E00               	movlw	0
  3317  00129C  6E3F               	movwf	___wmul@multiplicand+1,c
  3318  00129E  0E03               	movlw	3
  3319  0012A0  6E3E               	movwf	___wmul@multiplicand,c
  3320  0012A2  EC93  F012         	call	___wmul	;wreg free
  3321  0012A6  0E29               	movlw	low __powers_
  3322  0012A8  243C               	addwf	?___wmul,w,c
  3323  0012AA  6EF6               	movwf	tblptrl,c
  3324  0012AC  0E06               	movlw	high __powers_
  3325  0012AE  203D               	addwfc	?___wmul+1,w,c
  3326  0012B0  6EF7               	movwf	tblptrh,c
  3327  0012B2                     	if	0	;There are less than 3 active tblptr bytes
  3328  0012B2                     	endif
  3329  0012B2  0009               	tblrd		*+
  3330  0012B4  CFF5 F042          	movff	tablat,___ftmul@f1
  3331  0012B8  0009               	tblrd		*+
  3332  0012BA  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3333  0012BE  000A               	tblrd		*-
  3334  0012C0  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3335  0012C4  0E00               	movlw	0
  3336  0012C6  6E3F               	movwf	___wmul@multiplicand+1,c
  3337  0012C8  0E03               	movlw	3
  3338  0012CA  6E3E               	movwf	___wmul@multiplicand,c
  3339  0012CC  0E00               	movlw	0
  3340  0012CE  6E31               	movwf	___awmod@divisor+1,c
  3341  0012D0  0E0A               	movlw	10
  3342  0012D2  6E30               	movwf	___awmod@divisor,c
  3343  0012D4  0100               	movlb	0	; () banked
  3344  0012D6  518C               	movf	scale@scl& (0+255),w,b
  3345  0012D8  6E2E               	movwf	___awmod@dividend,c
  3346  0012DA  6A2F               	clrf	___awmod@dividend+1,c
  3347  0012DC  BE2E               	btfsc	___awmod@dividend,7,c
  3348  0012DE  062F               	decf	___awmod@dividend+1,f,c
  3349  0012E0  ECE1  F010         	call	___awmod	;wreg free
  3350  0012E4  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3351  0012E8  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3352  0012EC  EC93  F012         	call	___wmul	;wreg free
  3353  0012F0  0E29               	movlw	low __powers_
  3354  0012F2  243C               	addwf	?___wmul,w,c
  3355  0012F4  6EF6               	movwf	tblptrl,c
  3356  0012F6  0E06               	movlw	high __powers_
  3357  0012F8  203D               	addwfc	?___wmul+1,w,c
  3358  0012FA  6EF7               	movwf	tblptrh,c
  3359  0012FC                     	if	0	;There are less than 3 active tblptr bytes
  3360  0012FC                     	endif
  3361  0012FC  0009               	tblrd		*+
  3362  0012FE  CFF5 F045          	movff	tablat,___ftmul@f2
  3363  001302  0009               	tblrd		*+
  3364  001304  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3365  001308  000A               	tblrd		*-
  3366  00130A  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3367  00130E  EC74  F00E         	call	___ftmul	;wreg free
  3368  001312  C042  F086         	movff	?___ftmul,?_scale
  3369  001316  C043  F087         	movff	?___ftmul+1,?_scale+1
  3370  00131A  C044  F088         	movff	?___ftmul+2,?_scale+2
  3371  00131E  0012               	return	
  3372  001320                     l186:
  3373                           
  3374                           ;doprnt.c: 440: return _powers_[scl];
  3375  001320  0100               	movlb	0	; () banked
  3376  001322  518C               	movf	scale@scl& (0+255),w,b
  3377  001324  0D03               	mullw	3
  3378  001326  0E29               	movlw	low __powers_
  3379  001328  24F3               	addwf	prodl,w,c
  3380  00132A  6EF6               	movwf	tblptrl,c
  3381  00132C  0E06               	movlw	high __powers_
  3382  00132E  20F4               	addwfc	prodh,w,c
  3383  001330  6EF7               	movwf	tblptrh,c
  3384  001332                     	if	0	;There are less than 3 active tblptr bytes
  3385  001332                     	endif
  3386  001332  0009               	tblrd		*+
  3387  001334  CFF5 F086          	movff	tablat,?_scale
  3388  001338  0009               	tblrd		*+
  3389  00133A  CFF5 F087          	movff	tablat,?_scale+1
  3390  00133E  000A               	tblrd		*-
  3391  001340  CFF5 F088          	movff	tablat,?_scale+2
  3392  001344  0012               	return	
  3393  001346                     __end_of_scale:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _isdigit *****************
  3412 ;; Defined at:
  3413 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  c               1    wreg     unsigned char 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  c               1   47[COMRAM] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;		None               void
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3427 ;;      Params:         0       0       0       0       0       0       0
  3428 ;;      Locals:         2       0       0       0       0       0       0
  3429 ;;      Temps:          1       0       0       0       0       0       0
  3430 ;;      Totals:         3       0       0       0       0       0       0
  3431 ;;Total ram usage:        3 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    2
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_sprintf
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text6
  3442  002570                     __ptext6:
  3443                           	opt stack 0
  3444  002570                     _isdigit:
  3445                           	opt stack 26
  3446                           
  3447                           ;incstack = 0
  3448                           ;isdigit@c stored from wreg
  3449  002570  6E30               	movwf	isdigit@c,c
  3450  002572  0E00               	movlw	0
  3451  002574  6E2F               	movwf	_isdigit$485,c
  3452  002576  0E3A               	movlw	58
  3453  002578  6030               	cpfslt	isdigit@c,c
  3454  00257A  D005               	goto	l628
  3455  00257C  0E2F               	movlw	47
  3456  00257E  6430               	cpfsgt	isdigit@c,c
  3457  002580  D002               	goto	l628
  3458  002582  0E01               	movlw	1
  3459  002584  6E2F               	movwf	_isdigit$485,c
  3460  002586                     l628:
  3461  002586  C02F  F02E         	movff	_isdigit$485,??_isdigit
  3462  00258A  302E               	rrcf	??_isdigit,w,c
  3463  00258C  0012               	return	
  3464  00258E                     __end_of_isdigit:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           prodh	equ	0xFF4
  3471                           prodl	equ	0xFF3
  3472                           intcon	equ	0xFF2
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _fround *****************
  3483 ;; Defined at:
  3484 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  prec            1    wreg     unsigned char 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  prec            1   15[BANK0 ] unsigned char 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  3    6[BANK0 ] unsigned char 
  3491 ;; Registers used:
  3492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3498 ;;      Params:         0       3       0       0       0       0       0
  3499 ;;      Locals:         0       7       0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0
  3501 ;;      Totals:         0      10       0       0       0       0       0
  3502 ;;Total ram usage:       10 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    4
  3505 ;; This function calls:
  3506 ;;		___awdiv
  3507 ;;		___awmod
  3508 ;;		___ftmul
  3509 ;;		___wmul
  3510 ;; This function is called by:
  3511 ;;		_sprintf
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text7
  3516  001346                     __ptext7:
  3517                           	opt stack 0
  3518  001346                     _fround:
  3519                           	opt stack 24
  3520                           
  3521                           ;incstack = 0
  3522                           ;fround@prec stored from wreg
  3523  001346  0100               	movlb	0	; () banked
  3524  001348  6F8F               	movwf	fround@prec& (0+255),b
  3525                           
  3526                           ;doprnt.c: 413: if(prec>=110)
  3527  00134A  0E6D               	movlw	109
  3528  00134C  0100               	movlb	0	; () banked
  3529  00134E  658F               	cpfsgt	fround@prec& (0+255),b
  3530  001350  D09F               	goto	l173
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3534  001352  0E00               	movlw	0
  3535  001354  6E3F               	movwf	___wmul@multiplicand+1,c
  3536  001356  0E03               	movlw	3
  3537  001358  6E3E               	movwf	___wmul@multiplicand,c
  3538  00135A  0E00               	movlw	0
  3539  00135C  6E37               	movwf	___awdiv@divisor+1,c
  3540  00135E  0E0A               	movlw	10
  3541  001360  6E36               	movwf	___awdiv@divisor,c
  3542  001362  0E00               	movlw	0
  3543  001364  6E31               	movwf	___awmod@divisor+1,c
  3544  001366  0E64               	movlw	100
  3545  001368  6E30               	movwf	___awmod@divisor,c
  3546  00136A  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3547  00136E  6A2F               	clrf	___awmod@dividend+1,c
  3548  001370  ECE1  F010         	call	___awmod	;wreg free
  3549  001374  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3550  001378  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3551  00137C  EC5E  F010         	call	___awdiv	;wreg free
  3552  001380  0E09               	movlw	9
  3553  001382  2434               	addwf	?___awdiv,w,c
  3554  001384  6E3C               	movwf	___wmul@multiplier,c
  3555  001386  0E00               	movlw	0
  3556  001388  2035               	addwfc	?___awdiv+1,w,c
  3557  00138A  6E3D               	movwf	___wmul@multiplier+1,c
  3558  00138C  EC93  F012         	call	___wmul	;wreg free
  3559  001390  0E50               	movlw	low __npowers_
  3560  001392  243C               	addwf	?___wmul,w,c
  3561  001394  6EF6               	movwf	tblptrl,c
  3562  001396  0E06               	movlw	high __npowers_
  3563  001398  203D               	addwfc	?___wmul+1,w,c
  3564  00139A  6EF7               	movwf	tblptrh,c
  3565  00139C                     	if	0	;There are less than 3 active tblptr bytes
  3566  00139C                     	endif
  3567  00139C  0009               	tblrd		*+
  3568  00139E  CFF5 F045          	movff	tablat,___ftmul@f2
  3569  0013A2  0009               	tblrd		*+
  3570  0013A4  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3571  0013A8  000A               	tblrd		*-
  3572  0013AA  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3573  0013AE  0E00               	movlw	0
  3574  0013B0  6E37               	movwf	___awdiv@divisor+1,c
  3575  0013B2  0E64               	movlw	100
  3576  0013B4  6E36               	movwf	___awdiv@divisor,c
  3577  0013B6  C08F  F034         	movff	fround@prec,___awdiv@dividend
  3578  0013BA  6A35               	clrf	___awdiv@dividend+1,c
  3579  0013BC  EC5E  F010         	call	___awdiv	;wreg free
  3580  0013C0  0E12               	movlw	18
  3581  0013C2  2434               	addwf	?___awdiv,w,c
  3582  0013C4  6E3C               	movwf	___wmul@multiplier,c
  3583  0013C6  0E00               	movlw	0
  3584  0013C8  2035               	addwfc	?___awdiv+1,w,c
  3585  0013CA  6E3D               	movwf	___wmul@multiplier+1,c
  3586  0013CC  0E00               	movlw	0
  3587  0013CE  6E3F               	movwf	___wmul@multiplicand+1,c
  3588  0013D0  0E03               	movlw	3
  3589  0013D2  6E3E               	movwf	___wmul@multiplicand,c
  3590  0013D4  EC93  F012         	call	___wmul	;wreg free
  3591  0013D8  0E50               	movlw	low __npowers_
  3592  0013DA  243C               	addwf	?___wmul,w,c
  3593  0013DC  6EF6               	movwf	tblptrl,c
  3594  0013DE  0E06               	movlw	high __npowers_
  3595  0013E0  203D               	addwfc	?___wmul+1,w,c
  3596  0013E2  6EF7               	movwf	tblptrh,c
  3597  0013E4                     	if	0	;There are less than 3 active tblptr bytes
  3598  0013E4                     	endif
  3599  0013E4  0009               	tblrd		*+
  3600  0013E6  CFF5 F042          	movff	tablat,___ftmul@f1
  3601  0013EA  0009               	tblrd		*+
  3602  0013EC  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3603  0013F0  000A               	tblrd		*-
  3604  0013F2  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3605  0013F6  EC74  F00E         	call	___ftmul	;wreg free
  3606  0013FA  C042  F08C         	movff	?___ftmul,_fround$832
  3607  0013FE  C043  F08D         	movff	?___ftmul+1,_fround$832+1
  3608  001402  C044  F08E         	movff	?___ftmul+2,_fround$832+2
  3609                           
  3610                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3611  001406  0E00               	movlw	0
  3612  001408  6E3F               	movwf	___wmul@multiplicand+1,c
  3613  00140A  0E03               	movlw	3
  3614  00140C  6E3E               	movwf	___wmul@multiplicand,c
  3615  00140E  0E00               	movlw	0
  3616  001410  6E31               	movwf	___awmod@divisor+1,c
  3617  001412  0E0A               	movlw	10
  3618  001414  6E30               	movwf	___awmod@divisor,c
  3619  001416  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3620  00141A  6A2F               	clrf	___awmod@dividend+1,c
  3621  00141C  ECE1  F010         	call	___awmod	;wreg free
  3622  001420  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3623  001424  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3624  001428  EC93  F012         	call	___wmul	;wreg free
  3625  00142C  0E50               	movlw	low __npowers_
  3626  00142E  243C               	addwf	?___wmul,w,c
  3627  001430  6EF6               	movwf	tblptrl,c
  3628  001432  0E06               	movlw	high __npowers_
  3629  001434  203D               	addwfc	?___wmul+1,w,c
  3630  001436  6EF7               	movwf	tblptrh,c
  3631  001438                     	if	0	;There are less than 3 active tblptr bytes
  3632  001438                     	endif
  3633  001438  0009               	tblrd		*+
  3634  00143A  CFF5 F045          	movff	tablat,___ftmul@f2
  3635  00143E  0009               	tblrd		*+
  3636  001440  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3637  001444  000A               	tblrd		*-
  3638  001446  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3639  00144A  C08C  F042         	movff	_fround$832,___ftmul@f1
  3640  00144E  C08D  F043         	movff	_fround$832+1,___ftmul@f1+1
  3641  001452  C08E  F044         	movff	_fround$832+2,___ftmul@f1+2
  3642  001456  EC74  F00E         	call	___ftmul	;wreg free
  3643  00145A  C042  F089         	movff	?___ftmul,_fround$833
  3644  00145E  C043  F08A         	movff	?___ftmul+1,_fround$833+1
  3645  001462  C044  F08B         	movff	?___ftmul+2,_fround$833+2
  3646                           
  3647                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3648  001466  C089  F042         	movff	_fround$833,___ftmul@f1
  3649  00146A  C08A  F043         	movff	_fround$833+1,___ftmul@f1+1
  3650  00146E  C08B  F044         	movff	_fround$833+2,___ftmul@f1+2
  3651  001472  0E00               	movlw	0
  3652  001474  6E45               	movwf	___ftmul@f2,c
  3653  001476  0E00               	movlw	0
  3654  001478  6E46               	movwf	___ftmul@f2+1,c
  3655  00147A  0E3F               	movlw	63
  3656  00147C  6E47               	movwf	___ftmul@f2+2,c
  3657  00147E  EC74  F00E         	call	___ftmul	;wreg free
  3658  001482  C042  F086         	movff	?___ftmul,?_fround
  3659  001486  C043  F087         	movff	?___ftmul+1,?_fround+1
  3660  00148A  C044  F088         	movff	?___ftmul+2,?_fround+2
  3661  00148E  0012               	return	
  3662  001490                     l173:
  3663                           
  3664                           ;doprnt.c: 415: else if(prec > 10)
  3665  001490  0E0A               	movlw	10
  3666  001492  0100               	movlb	0	; () banked
  3667  001494  658F               	cpfsgt	fround@prec& (0+255),b
  3668  001496  D063               	goto	l176
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3672  001498  0E00               	movlw	0
  3673  00149A  6E3F               	movwf	___wmul@multiplicand+1,c
  3674  00149C  0E03               	movlw	3
  3675  00149E  6E3E               	movwf	___wmul@multiplicand,c
  3676  0014A0  0E00               	movlw	0
  3677  0014A2  6E31               	movwf	___awmod@divisor+1,c
  3678  0014A4  0E0A               	movlw	10
  3679  0014A6  6E30               	movwf	___awmod@divisor,c
  3680  0014A8  C08F  F02E         	movff	fround@prec,___awmod@dividend
  3681  0014AC  6A2F               	clrf	___awmod@dividend+1,c
  3682  0014AE  ECE1  F010         	call	___awmod	;wreg free
  3683  0014B2  C02E  F03C         	movff	?___awmod,___wmul@multiplier
  3684  0014B6  C02F  F03D         	movff	?___awmod+1,___wmul@multiplier+1
  3685  0014BA  EC93  F012         	call	___wmul	;wreg free
  3686  0014BE  0E50               	movlw	low __npowers_
  3687  0014C0  243C               	addwf	?___wmul,w,c
  3688  0014C2  6EF6               	movwf	tblptrl,c
  3689  0014C4  0E06               	movlw	high __npowers_
  3690  0014C6  203D               	addwfc	?___wmul+1,w,c
  3691  0014C8  6EF7               	movwf	tblptrh,c
  3692  0014CA                     	if	0	;There are less than 3 active tblptr bytes
  3693  0014CA                     	endif
  3694  0014CA  0009               	tblrd		*+
  3695  0014CC  CFF5 F045          	movff	tablat,___ftmul@f2
  3696  0014D0  0009               	tblrd		*+
  3697  0014D2  CFF5 F046          	movff	tablat,___ftmul@f2+1
  3698  0014D6  000A               	tblrd		*-
  3699  0014D8  CFF5 F047          	movff	tablat,___ftmul@f2+2
  3700  0014DC  0E00               	movlw	0
  3701  0014DE  6E37               	movwf	___awdiv@divisor+1,c
  3702  0014E0  0E0A               	movlw	10
  3703  0014E2  6E36               	movwf	___awdiv@divisor,c
  3704  0014E4  C08F  F034         	movff	fround@prec,___awdiv@dividend
  3705  0014E8  6A35               	clrf	___awdiv@dividend+1,c
  3706  0014EA  EC5E  F010         	call	___awdiv	;wreg free
  3707  0014EE  0E09               	movlw	9
  3708  0014F0  2434               	addwf	?___awdiv,w,c
  3709  0014F2  6E3C               	movwf	___wmul@multiplier,c
  3710  0014F4  0E00               	movlw	0
  3711  0014F6  2035               	addwfc	?___awdiv+1,w,c
  3712  0014F8  6E3D               	movwf	___wmul@multiplier+1,c
  3713  0014FA  0E00               	movlw	0
  3714  0014FC  6E3F               	movwf	___wmul@multiplicand+1,c
  3715  0014FE  0E03               	movlw	3
  3716  001500  6E3E               	movwf	___wmul@multiplicand,c
  3717  001502  EC93  F012         	call	___wmul	;wreg free
  3718  001506  0E50               	movlw	low __npowers_
  3719  001508  243C               	addwf	?___wmul,w,c
  3720  00150A  6EF6               	movwf	tblptrl,c
  3721  00150C  0E06               	movlw	high __npowers_
  3722  00150E  203D               	addwfc	?___wmul+1,w,c
  3723  001510  6EF7               	movwf	tblptrh,c
  3724  001512                     	if	0	;There are less than 3 active tblptr bytes
  3725  001512                     	endif
  3726  001512  0009               	tblrd		*+
  3727  001514  CFF5 F042          	movff	tablat,___ftmul@f1
  3728  001518  0009               	tblrd		*+
  3729  00151A  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3730  00151E  000A               	tblrd		*-
  3731  001520  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3732  001524  EC74  F00E         	call	___ftmul	;wreg free
  3733  001528  C042  F08C         	movff	?___ftmul,_fround$832
  3734  00152C  C043  F08D         	movff	?___ftmul+1,_fround$832+1
  3735  001530  C044  F08E         	movff	?___ftmul+2,_fround$832+2
  3736                           
  3737                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3738  001534  C08C  F042         	movff	_fround$832,___ftmul@f1
  3739  001538  C08D  F043         	movff	_fround$832+1,___ftmul@f1+1
  3740  00153C  C08E  F044         	movff	_fround$832+2,___ftmul@f1+2
  3741  001540  0E00               	movlw	0
  3742  001542  6E45               	movwf	___ftmul@f2,c
  3743  001544  0E00               	movlw	0
  3744  001546  6E46               	movwf	___ftmul@f2+1,c
  3745  001548  0E3F               	movlw	63
  3746  00154A  6E47               	movwf	___ftmul@f2+2,c
  3747  00154C  EC74  F00E         	call	___ftmul	;wreg free
  3748  001550  C042  F086         	movff	?___ftmul,?_fround
  3749  001554  C043  F087         	movff	?___ftmul+1,?_fround+1
  3750  001558  C044  F088         	movff	?___ftmul+2,?_fround+2
  3751  00155C  0012               	return	
  3752  00155E                     l176:
  3753                           
  3754                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3755  00155E  0100               	movlb	0	; () banked
  3756  001560  518F               	movf	fround@prec& (0+255),w,b
  3757  001562  0D03               	mullw	3
  3758  001564  0E50               	movlw	low __npowers_
  3759  001566  24F3               	addwf	prodl,w,c
  3760  001568  6EF6               	movwf	tblptrl,c
  3761  00156A  0E06               	movlw	high __npowers_
  3762  00156C  20F4               	addwfc	prodh,w,c
  3763  00156E  6EF7               	movwf	tblptrh,c
  3764  001570                     	if	0	;There are less than 3 active tblptr bytes
  3765  001570                     	endif
  3766  001570  0009               	tblrd		*+
  3767  001572  CFF5 F042          	movff	tablat,___ftmul@f1
  3768  001576  0009               	tblrd		*+
  3769  001578  CFF5 F043          	movff	tablat,___ftmul@f1+1
  3770  00157C  000A               	tblrd		*-
  3771  00157E  CFF5 F044          	movff	tablat,___ftmul@f1+2
  3772  001582  0E00               	movlw	0
  3773  001584  6E45               	movwf	___ftmul@f2,c
  3774  001586  0E00               	movlw	0
  3775  001588  6E46               	movwf	___ftmul@f2+1,c
  3776  00158A  0E3F               	movlw	63
  3777  00158C  6E47               	movwf	___ftmul@f2+2,c
  3778  00158E  EC74  F00E         	call	___ftmul	;wreg free
  3779  001592  C042  F086         	movff	?___ftmul,?_fround
  3780  001596  C043  F087         	movff	?___ftmul+1,?_fround+1
  3781  00159A  C044  F088         	movff	?___ftmul+2,?_fround+2
  3782  00159E  0012               	return	
  3783  0015A0                     __end_of_fround:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           intcon	equ	0xFF2
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function ___wmul *****************
  3802 ;; Defined at:
  3803 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  multiplier      2   59[COMRAM] unsigned int 
  3806 ;;  multiplicand    2   61[COMRAM] unsigned int 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  product         2   63[COMRAM] unsigned int 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  2   59[COMRAM] unsigned int 
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, prodl, prodh
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3818 ;;      Params:         4       0       0       0       0       0       0
  3819 ;;      Locals:         2       0       0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0
  3821 ;;      Totals:         6       0       0       0       0       0       0
  3822 ;;Total ram usage:        6 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    2
  3825 ;; This function calls:
  3826 ;;		Nothing
  3827 ;; This function is called by:
  3828 ;;		_fround
  3829 ;;		_scale
  3830 ;;		_sprintf
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text8
  3835  002526                     __ptext8:
  3836                           	opt stack 0
  3837  002526                     ___wmul:
  3838                           	opt stack 25
  3839                           
  3840                           ;incstack = 0
  3841  002526  503C               	movf	___wmul@multiplier,w,c
  3842  002528  023E               	mulwf	___wmul@multiplicand,c
  3843  00252A  CFF3 F040          	movff	prodl,___wmul@product
  3844  00252E  CFF4 F041          	movff	prodh,___wmul@product+1
  3845  002532  503C               	movf	___wmul@multiplier,w,c
  3846  002534  023F               	mulwf	___wmul@multiplicand+1,c
  3847  002536  50F3               	movf	prodl,w,c
  3848  002538  2641               	addwf	___wmul@product+1,f,c
  3849  00253A  503D               	movf	___wmul@multiplier+1,w,c
  3850  00253C  023E               	mulwf	___wmul@multiplicand,c
  3851  00253E  50F3               	movf	prodl,w,c
  3852  002540  2641               	addwf	___wmul@product+1,f,c
  3853  002542  C040  F03C         	movff	___wmul@product,?___wmul
  3854  002546  C041  F03D         	movff	___wmul@product+1,?___wmul+1
  3855  00254A  0012               	return	
  3856  00254C                     __end_of___wmul:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           tblptrh	equ	0xFF7
  3860                           tblptrl	equ	0xFF6
  3861                           tablat	equ	0xFF5
  3862                           prodh	equ	0xFF4
  3863                           prodl	equ	0xFF3
  3864                           intcon	equ	0xFF2
  3865                           postinc0	equ	0xFEE
  3866                           wreg	equ	0xFE8
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function ___ftmul *****************
  3875 ;; Defined at:
  3876 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  f1              3   65[COMRAM] float 
  3879 ;;  f2              3   68[COMRAM] float 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3882 ;;  sign            1    5[BANK0 ] unsigned char 
  3883 ;;  cntr            1    4[BANK0 ] unsigned char 
  3884 ;;  exp             1    0[BANK0 ] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  3   65[COMRAM] float 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3894 ;;      Params:         6       0       0       0       0       0       0
  3895 ;;      Locals:         0       6       0       0       0       0       0
  3896 ;;      Temps:          3       0       0       0       0       0       0
  3897 ;;      Totals:         9       6       0       0       0       0       0
  3898 ;;Total ram usage:       15 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    3
  3901 ;; This function calls:
  3902 ;;		___ftpack
  3903 ;; This function is called by:
  3904 ;;		_calcula
  3905 ;;		_fround
  3906 ;;		_scale
  3907 ;;		_sprintf
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text9
  3912  001CE8                     __ptext9:
  3913                           	opt stack 0
  3914  001CE8                     ___ftmul:
  3915                           	opt stack 24
  3916                           
  3917                           ;incstack = 0
  3918  001CE8  C044  F048         	movff	___ftmul@f1+2,??___ftmul
  3919  001CEC  6A49               	clrf	(??___ftmul+1)& (0+255),c
  3920  001CEE  6A4A               	clrf	(??___ftmul+2)& (0+255),c
  3921  001CF0  3443               	rlcf	___ftmul@f1+1,w,c
  3922  001CF2  3648               	rlcf	??___ftmul& (0+255),f,c
  3923  001CF4  E301               	bnc	u3421
  3924  001CF6  8049               	bsf	(??___ftmul+1)& (0+255),0,c
  3925  001CF8                     u3421:
  3926  001CF8  5048               	movf	??___ftmul,w,c
  3927  001CFA  0100               	movlb	0	; () banked
  3928  001CFC  6F80               	movwf	___ftmul@exp& (0+255),b
  3929  001CFE  5180               	movf	___ftmul@exp& (0+255),w,b
  3930  001D00  A4D8               	btfss	status,2,c
  3931  001D02  D007               	goto	l592
  3932                           
  3933                           ; BSR set to: 0
  3934  001D04  0E00               	movlw	0
  3935  001D06  6E42               	movwf	?___ftmul,c
  3936  001D08  0E00               	movlw	0
  3937  001D0A  6E43               	movwf	?___ftmul+1,c
  3938  001D0C  0E00               	movlw	0
  3939  001D0E  6E44               	movwf	?___ftmul+2,c
  3940                           
  3941                           ; BSR set to: 0
  3942  001D10  0012               	return	
  3943  001D12                     l592:
  3944                           
  3945                           ; BSR set to: 0
  3946                           
  3947                           ; BSR set to: 0
  3948  001D12  C047  F048         	movff	___ftmul@f2+2,??___ftmul
  3949  001D16  6A49               	clrf	(??___ftmul+1)& (0+255),c
  3950  001D18  6A4A               	clrf	(??___ftmul+2)& (0+255),c
  3951  001D1A  3446               	rlcf	___ftmul@f2+1,w,c
  3952  001D1C  3648               	rlcf	??___ftmul& (0+255),f,c
  3953  001D1E  E301               	bnc	u3441
  3954  001D20  8049               	bsf	(??___ftmul+1)& (0+255),0,c
  3955  001D22                     u3441:
  3956  001D22  5048               	movf	??___ftmul,w,c
  3957  001D24  6F85               	movwf	___ftmul@sign& (0+255),b
  3958  001D26  5185               	movf	___ftmul@sign& (0+255),w,b
  3959  001D28  A4D8               	btfss	status,2,c
  3960  001D2A  D007               	goto	l594
  3961                           
  3962                           ; BSR set to: 0
  3963  001D2C  0E00               	movlw	0
  3964  001D2E  6E42               	movwf	?___ftmul,c
  3965  001D30  0E00               	movlw	0
  3966  001D32  6E43               	movwf	?___ftmul+1,c
  3967  001D34  0E00               	movlw	0
  3968  001D36  6E44               	movwf	?___ftmul+2,c
  3969                           
  3970                           ; BSR set to: 0
  3971  001D38  0012               	return	
  3972  001D3A                     l594:
  3973                           
  3974                           ; BSR set to: 0
  3975                           
  3976                           ; BSR set to: 0
  3977  001D3A  5185               	movf	___ftmul@sign& (0+255),w,b
  3978  001D3C  0F7B               	addlw	123
  3979  001D3E  2780               	addwf	___ftmul@exp& (0+255),f,b
  3980                           
  3981                           ; BSR set to: 0
  3982  001D40  C044  F085         	movff	___ftmul@f1+2,___ftmul@sign
  3983  001D44  5047               	movf	___ftmul@f2+2,w,c
  3984  001D46  1B85               	xorwf	___ftmul@sign& (0+255),f,b
  3985  001D48  0E80               	movlw	128
  3986  001D4A  1785               	andwf	___ftmul@sign& (0+255),f,b
  3987                           
  3988                           ; BSR set to: 0
  3989  001D4C  8E43               	bsf	___ftmul@f1+1,7,c
  3990                           
  3991                           ; BSR set to: 0
  3992  001D4E  8E46               	bsf	___ftmul@f2+1,7,c
  3993                           
  3994                           ; BSR set to: 0
  3995  001D50  0EFF               	movlw	255
  3996  001D52  1645               	andwf	___ftmul@f2,f,c
  3997  001D54  0EFF               	movlw	255
  3998  001D56  1646               	andwf	___ftmul@f2+1,f,c
  3999  001D58  0E00               	movlw	0
  4000  001D5A  1647               	andwf	___ftmul@f2+2,f,c
  4001                           
  4002                           ; BSR set to: 0
  4003  001D5C  0E00               	movlw	0
  4004  001D5E  6F81               	movwf	___ftmul@f3_as_product& (0+255),b
  4005  001D60  0E00               	movlw	0
  4006  001D62  6F82               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4007  001D64  0E00               	movlw	0
  4008  001D66  6F83               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011  001D68  0E07               	movlw	7
  4012  001D6A  6F84               	movwf	___ftmul@cntr& (0+255),b
  4013  001D6C                     
  4014                           ; BSR set to: 0
  4015                           
  4016                           ; BSR set to: 0
  4017  001D6C  A042               	btfss	___ftmul@f1,0,c
  4018  001D6E  D006               	goto	l596
  4019                           
  4020                           ; BSR set to: 0
  4021  001D70  5045               	movf	___ftmul@f2,w,c
  4022  001D72  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4023  001D74  5046               	movf	___ftmul@f2+1,w,c
  4024  001D76  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4025  001D78  5047               	movf	___ftmul@f2+2,w,c
  4026  001D7A  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4027  001D7C                     l596:
  4028                           
  4029                           ; BSR set to: 0
  4030                           
  4031                           ; BSR set to: 0
  4032  001D7C  90D8               	bcf	status,0,c
  4033  001D7E  3244               	rrcf	___ftmul@f1+2,f,c
  4034  001D80  3243               	rrcf	___ftmul@f1+1,f,c
  4035  001D82  3242               	rrcf	___ftmul@f1,f,c
  4036  001D84  90D8               	bcf	status,0,c
  4037  001D86  3645               	rlcf	___ftmul@f2,f,c
  4038  001D88  3646               	rlcf	___ftmul@f2+1,f,c
  4039  001D8A  3647               	rlcf	___ftmul@f2+2,f,c
  4040                           
  4041                           ; BSR set to: 0
  4042  001D8C  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  4043  001D8E  D7EE               	goto	l595
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  001D90  0E09               	movlw	9
  4049  001D92  6F84               	movwf	___ftmul@cntr& (0+255),b
  4050  001D94                     
  4051                           ; BSR set to: 0
  4052                           
  4053                           ; BSR set to: 0
  4054  001D94  A042               	btfss	___ftmul@f1,0,c
  4055  001D96  D006               	goto	l599
  4056                           
  4057                           ; BSR set to: 0
  4058  001D98  5045               	movf	___ftmul@f2,w,c
  4059  001D9A  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4060  001D9C  5046               	movf	___ftmul@f2+1,w,c
  4061  001D9E  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4062  001DA0  5047               	movf	___ftmul@f2+2,w,c
  4063  001DA2  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4064  001DA4                     l599:
  4065                           
  4066                           ; BSR set to: 0
  4067                           
  4068                           ; BSR set to: 0
  4069  001DA4  90D8               	bcf	status,0,c
  4070  001DA6  3244               	rrcf	___ftmul@f1+2,f,c
  4071  001DA8  3243               	rrcf	___ftmul@f1+1,f,c
  4072  001DAA  3242               	rrcf	___ftmul@f1,f,c
  4073  001DAC  90D8               	bcf	status,0,c
  4074  001DAE  3383               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4075  001DB0  3382               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4076  001DB2  3381               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4077                           
  4078                           ; BSR set to: 0
  4079  001DB4  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  4080  001DB6  D7EE               	goto	l598
  4081                           
  4082                           ; BSR set to: 0
  4083                           
  4084                           ; BSR set to: 0
  4085  001DB8  C081  F02E         	movff	___ftmul@f3_as_product,___ftpack@arg
  4086  001DBC  C082  F02F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4087  001DC0  C083  F030         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4088  001DC4  C080  F031         	movff	___ftmul@exp,___ftpack@exp
  4089  001DC8  C085  F032         	movff	___ftmul@sign,___ftpack@sign
  4090  001DCC  ECBF  F00F         	call	___ftpack	;wreg free
  4091  001DD0  C02E  F042         	movff	?___ftpack,?___ftmul
  4092  001DD4  C02F  F043         	movff	?___ftpack+1,?___ftmul+1
  4093  001DD8  C030  F044         	movff	?___ftpack+2,?___ftmul+2
  4094  001DDC  0012               	return	
  4095  001DDE                     __end_of___ftmul:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function ___awmod *****************
  4114 ;; Defined at:
  4115 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  dividend        2   45[COMRAM] int 
  4118 ;;  divisor         2   47[COMRAM] int 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  sign            1   50[COMRAM] unsigned char 
  4121 ;;  counter         1   49[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  2   45[COMRAM] int 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         4       0       0       0       0       0       0
  4132 ;;      Locals:         2       0       0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0
  4134 ;;      Totals:         6       0       0       0       0       0       0
  4135 ;;Total ram usage:        6 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_fround
  4142 ;;		_scale
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text10
  4147  0021C2                     __ptext10:
  4148                           	opt stack 0
  4149  0021C2                     ___awmod:
  4150                           	opt stack 25
  4151                           
  4152                           ;incstack = 0
  4153  0021C2  0E00               	movlw	0
  4154  0021C4  6E33               	movwf	___awmod@sign,c
  4155  0021C6  AE2F               	btfss	___awmod@dividend+1,7,c
  4156  0021C8  D006               	goto	l445
  4157  0021CA  6C2E               	negf	___awmod@dividend,c
  4158  0021CC  1E2F               	comf	___awmod@dividend+1,f,c
  4159  0021CE  B0D8               	btfsc	status,0,c
  4160  0021D0  2A2F               	incf	___awmod@dividend+1,f,c
  4161  0021D2  0E01               	movlw	1
  4162  0021D4  6E33               	movwf	___awmod@sign,c
  4163  0021D6                     l445:
  4164  0021D6  AE31               	btfss	___awmod@divisor+1,7,c
  4165  0021D8  D004               	goto	l446
  4166  0021DA  6C30               	negf	___awmod@divisor,c
  4167  0021DC  1E31               	comf	___awmod@divisor+1,f,c
  4168  0021DE  B0D8               	btfsc	status,0,c
  4169  0021E0  2A31               	incf	___awmod@divisor+1,f,c
  4170  0021E2                     l446:
  4171  0021E2  5030               	movf	___awmod@divisor,w,c
  4172  0021E4  1031               	iorwf	___awmod@divisor+1,w,c
  4173  0021E6  B4D8               	btfsc	status,2,c
  4174  0021E8  D018               	goto	l453
  4175  0021EA  0E01               	movlw	1
  4176  0021EC  6E32               	movwf	___awmod@counter,c
  4177  0021EE  D004               	goto	l448
  4178  0021F0  90D8               	bcf	status,0,c
  4179  0021F2  3630               	rlcf	___awmod@divisor,f,c
  4180  0021F4  3631               	rlcf	___awmod@divisor+1,f,c
  4181  0021F6  2A32               	incf	___awmod@counter,f,c
  4182  0021F8                     l448:
  4183  0021F8  AE31               	btfss	___awmod@divisor+1,7,c
  4184  0021FA  D7FA               	goto	l449
  4185  0021FC                     u3570:
  4186  0021FC  5030               	movf	___awmod@divisor,w,c
  4187  0021FE  5C2E               	subwf	___awmod@dividend,w,c
  4188  002200  5031               	movf	___awmod@divisor+1,w,c
  4189  002202  582F               	subwfb	___awmod@dividend+1,w,c
  4190  002204  A0D8               	btfss	status,0,c
  4191  002206  D004               	goto	l452
  4192  002208  5030               	movf	___awmod@divisor,w,c
  4193  00220A  5E2E               	subwf	___awmod@dividend,f,c
  4194  00220C  5031               	movf	___awmod@divisor+1,w,c
  4195  00220E  5A2F               	subwfb	___awmod@dividend+1,f,c
  4196  002210                     l452:
  4197  002210  90D8               	bcf	status,0,c
  4198  002212  3231               	rrcf	___awmod@divisor+1,f,c
  4199  002214  3230               	rrcf	___awmod@divisor,f,c
  4200  002216  2E32               	decfsz	___awmod@counter,f,c
  4201  002218  D7F1               	goto	u3570
  4202  00221A                     l453:
  4203  00221A  5033               	movf	___awmod@sign,w,c
  4204  00221C  B4D8               	btfsc	status,2,c
  4205  00221E  D004               	goto	l454
  4206  002220  6C2E               	negf	___awmod@dividend,c
  4207  002222  1E2F               	comf	___awmod@dividend+1,f,c
  4208  002224  B0D8               	btfsc	status,0,c
  4209  002226  2A2F               	incf	___awmod@dividend+1,f,c
  4210  002228                     l454:
  4211  002228  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4212  00222C  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4213  002230  0012               	return	
  4214  002232                     __end_of___awmod:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function ___awdiv *****************
  4233 ;; Defined at:
  4234 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  dividend        2   51[COMRAM] int 
  4237 ;;  divisor         2   53[COMRAM] int 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  quotient        2   57[COMRAM] int 
  4240 ;;  sign            1   56[COMRAM] unsigned char 
  4241 ;;  counter         1   55[COMRAM] unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  2   51[COMRAM] int 
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4251 ;;      Params:         4       0       0       0       0       0       0
  4252 ;;      Locals:         4       0       0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0
  4254 ;;      Totals:         8       0       0       0       0       0       0
  4255 ;;Total ram usage:        8 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    2
  4258 ;; This function calls:
  4259 ;;		Nothing
  4260 ;; This function is called by:
  4261 ;;		_fround
  4262 ;;		_scale
  4263 ;;		_sprintf
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text11
  4268  0020BC                     __ptext11:
  4269                           	opt stack 0
  4270  0020BC                     ___awdiv:
  4271                           	opt stack 25
  4272                           
  4273                           ;incstack = 0
  4274  0020BC  0E00               	movlw	0
  4275  0020BE  6E39               	movwf	___awdiv@sign,c
  4276  0020C0  AE37               	btfss	___awdiv@divisor+1,7,c
  4277  0020C2  D006               	goto	l432
  4278  0020C4  6C36               	negf	___awdiv@divisor,c
  4279  0020C6  1E37               	comf	___awdiv@divisor+1,f,c
  4280  0020C8  B0D8               	btfsc	status,0,c
  4281  0020CA  2A37               	incf	___awdiv@divisor+1,f,c
  4282  0020CC  0E01               	movlw	1
  4283  0020CE  6E39               	movwf	___awdiv@sign,c
  4284  0020D0                     l432:
  4285  0020D0  AE35               	btfss	___awdiv@dividend+1,7,c
  4286  0020D2  D006               	goto	l433
  4287  0020D4  6C34               	negf	___awdiv@dividend,c
  4288  0020D6  1E35               	comf	___awdiv@dividend+1,f,c
  4289  0020D8  B0D8               	btfsc	status,0,c
  4290  0020DA  2A35               	incf	___awdiv@dividend+1,f,c
  4291  0020DC  0E01               	movlw	1
  4292  0020DE  1A39               	xorwf	___awdiv@sign,f,c
  4293  0020E0                     l433:
  4294  0020E0  0E00               	movlw	0
  4295  0020E2  6E3B               	movwf	___awdiv@quotient+1,c
  4296  0020E4  0E00               	movlw	0
  4297  0020E6  6E3A               	movwf	___awdiv@quotient,c
  4298  0020E8  5036               	movf	___awdiv@divisor,w,c
  4299  0020EA  1037               	iorwf	___awdiv@divisor+1,w,c
  4300  0020EC  B4D8               	btfsc	status,2,c
  4301  0020EE  D01C               	goto	l440
  4302  0020F0  0E01               	movlw	1
  4303  0020F2  6E38               	movwf	___awdiv@counter,c
  4304  0020F4  D004               	goto	l435
  4305  0020F6  90D8               	bcf	status,0,c
  4306  0020F8  3636               	rlcf	___awdiv@divisor,f,c
  4307  0020FA  3637               	rlcf	___awdiv@divisor+1,f,c
  4308  0020FC  2A38               	incf	___awdiv@counter,f,c
  4309  0020FE                     l435:
  4310  0020FE  AE37               	btfss	___awdiv@divisor+1,7,c
  4311  002100  D7FA               	goto	l436
  4312  002102                     u3510:
  4313  002102  90D8               	bcf	status,0,c
  4314  002104  363A               	rlcf	___awdiv@quotient,f,c
  4315  002106  363B               	rlcf	___awdiv@quotient+1,f,c
  4316  002108  5036               	movf	___awdiv@divisor,w,c
  4317  00210A  5C34               	subwf	___awdiv@dividend,w,c
  4318  00210C  5037               	movf	___awdiv@divisor+1,w,c
  4319  00210E  5835               	subwfb	___awdiv@dividend+1,w,c
  4320  002110  A0D8               	btfss	status,0,c
  4321  002112  D005               	goto	l439
  4322  002114  5036               	movf	___awdiv@divisor,w,c
  4323  002116  5E34               	subwf	___awdiv@dividend,f,c
  4324  002118  5037               	movf	___awdiv@divisor+1,w,c
  4325  00211A  5A35               	subwfb	___awdiv@dividend+1,f,c
  4326  00211C  803A               	bsf	___awdiv@quotient,0,c
  4327  00211E                     l439:
  4328  00211E  90D8               	bcf	status,0,c
  4329  002120  3237               	rrcf	___awdiv@divisor+1,f,c
  4330  002122  3236               	rrcf	___awdiv@divisor,f,c
  4331  002124  2E38               	decfsz	___awdiv@counter,f,c
  4332  002126  D7ED               	goto	u3510
  4333  002128                     l440:
  4334  002128  5039               	movf	___awdiv@sign,w,c
  4335  00212A  B4D8               	btfsc	status,2,c
  4336  00212C  D004               	goto	l441
  4337  00212E  6C3A               	negf	___awdiv@quotient,c
  4338  002130  1E3B               	comf	___awdiv@quotient+1,f,c
  4339  002132  B0D8               	btfsc	status,0,c
  4340  002134  2A3B               	incf	___awdiv@quotient+1,f,c
  4341  002136                     l441:
  4342  002136  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4343  00213A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4344  00213E  0012               	return	
  4345  002140                     __end_of___awdiv:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           postinc0	equ	0xFEE
  4355                           wreg	equ	0xFE8
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           postdec2	equ	0xFDD
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function __tdiv_to_l_ *****************
  4364 ;; Defined at:
  4365 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  f1              3   45[COMRAM] float 
  4368 ;;  f2              3   48[COMRAM] float 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  quot            4   54[COMRAM] unsigned long 
  4371 ;;  exp1            1   59[COMRAM] unsigned char 
  4372 ;;  cntr            1   58[COMRAM] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  4   45[COMRAM] unsigned long 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4382 ;;      Params:         6       0       0       0       0       0       0
  4383 ;;      Locals:         6       0       0       0       0       0       0
  4384 ;;      Temps:          3       0       0       0       0       0       0
  4385 ;;      Totals:        15       0       0       0       0       0       0
  4386 ;;Total ram usage:       15 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    2
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_sprintf
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text12
  4397  00174E                     __ptext12:
  4398                           	opt stack 0
  4399  00174E                     __tdiv_to_l_:
  4400                           	opt stack 26
  4401                           
  4402                           ;incstack = 0
  4403  00174E  C030  F034         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4404  001752  6A35               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4405  001754  6A36               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4406  001756  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4407  001758  3634               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4408  00175A  E301               	bnc	u3691
  4409  00175C  8035               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4410  00175E                     u3691:
  4411  00175E  5034               	movf	??__tdiv_to_l_,w,c
  4412  001760  6E3C               	movwf	__tdiv_to_l_@exp1,c
  4413  001762  503C               	movf	__tdiv_to_l_@exp1,w,c
  4414  001764  A4D8               	btfss	status,2,c
  4415  001766  D009               	goto	l568
  4416  001768  0E00               	movlw	0
  4417  00176A  6E2E               	movwf	?__tdiv_to_l_,c
  4418  00176C  0E00               	movlw	0
  4419  00176E  6E2F               	movwf	?__tdiv_to_l_+1,c
  4420  001770  0E00               	movlw	0
  4421  001772  6E30               	movwf	?__tdiv_to_l_+2,c
  4422  001774  0E00               	movlw	0
  4423  001776  6E31               	movwf	?__tdiv_to_l_+3,c
  4424  001778  0012               	return	
  4425  00177A                     l568:
  4426  00177A  C033  F034         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4427  00177E  6A35               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4428  001780  6A36               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4429  001782  3432               	rlcf	__tdiv_to_l_@f2+1,w,c
  4430  001784  3634               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4431  001786  E301               	bnc	u3711
  4432  001788  8035               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4433  00178A                     u3711:
  4434  00178A  5034               	movf	??__tdiv_to_l_,w,c
  4435  00178C  6E3B               	movwf	__tdiv_to_l_@cntr,c
  4436  00178E  503B               	movf	__tdiv_to_l_@cntr,w,c
  4437  001790  A4D8               	btfss	status,2,c
  4438  001792  D009               	goto	l570
  4439  001794  0E00               	movlw	0
  4440  001796  6E2E               	movwf	?__tdiv_to_l_,c
  4441  001798  0E00               	movlw	0
  4442  00179A  6E2F               	movwf	?__tdiv_to_l_+1,c
  4443  00179C  0E00               	movlw	0
  4444  00179E  6E30               	movwf	?__tdiv_to_l_+2,c
  4445  0017A0  0E00               	movlw	0
  4446  0017A2  6E31               	movwf	?__tdiv_to_l_+3,c
  4447  0017A4  0012               	return	
  4448  0017A6                     l570:
  4449  0017A6  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4450  0017A8  0EFF               	movlw	255
  4451  0017AA  162E               	andwf	__tdiv_to_l_@f1,f,c
  4452  0017AC  0EFF               	movlw	255
  4453  0017AE  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4454  0017B0  0E00               	movlw	0
  4455  0017B2  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4456  0017B4  8E32               	bsf	__tdiv_to_l_@f2+1,7,c
  4457  0017B6  0EFF               	movlw	255
  4458  0017B8  1631               	andwf	__tdiv_to_l_@f2,f,c
  4459  0017BA  0EFF               	movlw	255
  4460  0017BC  1632               	andwf	__tdiv_to_l_@f2+1,f,c
  4461  0017BE  0E00               	movlw	0
  4462  0017C0  1633               	andwf	__tdiv_to_l_@f2+2,f,c
  4463  0017C2  0E00               	movlw	0
  4464  0017C4  6E37               	movwf	__tdiv_to_l_@quot,c
  4465  0017C6  0E00               	movlw	0
  4466  0017C8  6E38               	movwf	__tdiv_to_l_@quot+1,c
  4467  0017CA  0E00               	movlw	0
  4468  0017CC  6E39               	movwf	__tdiv_to_l_@quot+2,c
  4469  0017CE  0E00               	movlw	0
  4470  0017D0  6E3A               	movwf	__tdiv_to_l_@quot+3,c
  4471  0017D2  0E7F               	movlw	127
  4472  0017D4  5E3C               	subwf	__tdiv_to_l_@exp1,f,c
  4473  0017D6  503B               	movf	__tdiv_to_l_@cntr,w,c
  4474  0017D8  0F98               	addlw	152
  4475  0017DA  5E3C               	subwf	__tdiv_to_l_@exp1,f,c
  4476  0017DC  0E18               	movlw	24
  4477  0017DE  6E3B               	movwf	__tdiv_to_l_@cntr,c
  4478  0017E0                     l571:
  4479  0017E0  90D8               	bcf	status,0,c
  4480  0017E2  3637               	rlcf	__tdiv_to_l_@quot,f,c
  4481  0017E4  3638               	rlcf	__tdiv_to_l_@quot+1,f,c
  4482  0017E6  3639               	rlcf	__tdiv_to_l_@quot+2,f,c
  4483  0017E8  363A               	rlcf	__tdiv_to_l_@quot+3,f,c
  4484  0017EA  5031               	movf	__tdiv_to_l_@f2,w,c
  4485  0017EC  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4486  0017EE  5032               	movf	__tdiv_to_l_@f2+1,w,c
  4487  0017F0  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4488  0017F2  5033               	movf	__tdiv_to_l_@f2+2,w,c
  4489  0017F4  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4490  0017F6  A0D8               	btfss	status,0,c
  4491  0017F8  D007               	goto	l572
  4492  0017FA  5031               	movf	__tdiv_to_l_@f2,w,c
  4493  0017FC  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4494  0017FE  5032               	movf	__tdiv_to_l_@f2+1,w,c
  4495  001800  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4496  001802  5033               	movf	__tdiv_to_l_@f2+2,w,c
  4497  001804  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4498  001806  8037               	bsf	__tdiv_to_l_@quot,0,c
  4499  001808                     l572:
  4500  001808  90D8               	bcf	status,0,c
  4501  00180A  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4502  00180C  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4503  00180E  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4504  001810  2E3B               	decfsz	__tdiv_to_l_@cntr,f,c
  4505  001812  D7E6               	goto	l571
  4506  001814  AE3C               	btfss	__tdiv_to_l_@exp1,7,c
  4507  001816  D016               	goto	l574
  4508  001818  503C               	movf	__tdiv_to_l_@exp1,w,c
  4509  00181A  0A80               	xorlw	128
  4510  00181C  0F97               	addlw	151
  4511  00181E  B0D8               	btfsc	status,0,c
  4512  001820  D009               	goto	l575
  4513  001822  0E00               	movlw	0
  4514  001824  6E2E               	movwf	?__tdiv_to_l_,c
  4515  001826  0E00               	movlw	0
  4516  001828  6E2F               	movwf	?__tdiv_to_l_+1,c
  4517  00182A  0E00               	movlw	0
  4518  00182C  6E30               	movwf	?__tdiv_to_l_+2,c
  4519  00182E  0E00               	movlw	0
  4520  001830  6E31               	movwf	?__tdiv_to_l_+3,c
  4521  001832  0012               	return	
  4522  001834                     l575:
  4523  001834  90D8               	bcf	status,0,c
  4524  001836  323A               	rrcf	__tdiv_to_l_@quot+3,f,c
  4525  001838  3239               	rrcf	__tdiv_to_l_@quot+2,f,c
  4526  00183A  3238               	rrcf	__tdiv_to_l_@quot+1,f,c
  4527  00183C  3237               	rrcf	__tdiv_to_l_@quot,f,c
  4528  00183E  3E3C               	incfsz	__tdiv_to_l_@exp1,f,c
  4529  001840  D7F9               	goto	l575
  4530  001842  D015               	goto	u3770
  4531  001844                     l574:
  4532  001844  0E17               	movlw	23
  4533  001846  643C               	cpfsgt	__tdiv_to_l_@exp1,c
  4534  001848  D00F               	goto	l580
  4535  00184A  0E00               	movlw	0
  4536  00184C  6E2E               	movwf	?__tdiv_to_l_,c
  4537  00184E  0E00               	movlw	0
  4538  001850  6E2F               	movwf	?__tdiv_to_l_+1,c
  4539  001852  0E00               	movlw	0
  4540  001854  6E30               	movwf	?__tdiv_to_l_+2,c
  4541  001856  0E00               	movlw	0
  4542  001858  6E31               	movwf	?__tdiv_to_l_+3,c
  4543  00185A  0012               	return	
  4544  00185C  90D8               	bcf	status,0,c
  4545  00185E  3637               	rlcf	__tdiv_to_l_@quot,f,c
  4546  001860  3638               	rlcf	__tdiv_to_l_@quot+1,f,c
  4547  001862  3639               	rlcf	__tdiv_to_l_@quot+2,f,c
  4548  001864  363A               	rlcf	__tdiv_to_l_@quot+3,f,c
  4549  001866  063C               	decf	__tdiv_to_l_@exp1,f,c
  4550  001868                     l580:
  4551  001868  503C               	movf	__tdiv_to_l_@exp1,w,c
  4552  00186A  A4D8               	btfss	status,2,c
  4553  00186C  D7F7               	goto	l581
  4554  00186E                     u3770:
  4555  00186E  C037  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4556  001872  C038  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4557  001876  C039  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4558  00187A  C03A  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4559  00187E  0012               	return		;funcret
  4560  001880                     __end_of__tdiv_to_l_:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           intcon	equ	0xFF2
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function __div_to_l_ *****************
  4579 ;; Defined at:
  4580 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  f1              3   45[COMRAM] unsigned long 
  4583 ;;  f2              3   48[COMRAM] unsigned long 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  quot            4   51[COMRAM] unsigned long 
  4586 ;;  exp1            1   56[COMRAM] unsigned char 
  4587 ;;  cntr            1   55[COMRAM] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  4   45[COMRAM] unsigned long 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4597 ;;      Params:         6       0       0       0       0       0       0
  4598 ;;      Locals:         6       0       0       0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0
  4600 ;;      Totals:        12       0       0       0       0       0       0
  4601 ;;Total ram usage:       12 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    2
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_sprintf
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text13
  4612  001880                     __ptext13:
  4613                           	opt stack 0
  4614  001880                     __div_to_l_:
  4615                           	opt stack 26
  4616                           
  4617                           ;incstack = 0
  4618  001880  3430               	rlcf	__div_to_l_@f1+2,w,c
  4619  001882  3431               	rlcf	__div_to_l_@f1+3,w,c
  4620  001884  6E39               	movwf	__div_to_l_@exp1,c
  4621  001886  5039               	movf	__div_to_l_@exp1,w,c
  4622  001888  A4D8               	btfss	status,2,c
  4623  00188A  D009               	goto	l464
  4624  00188C  0E00               	movlw	0
  4625  00188E  6E2E               	movwf	?__div_to_l_,c
  4626  001890  0E00               	movlw	0
  4627  001892  6E2F               	movwf	?__div_to_l_+1,c
  4628  001894  0E00               	movlw	0
  4629  001896  6E30               	movwf	?__div_to_l_+2,c
  4630  001898  0E00               	movlw	0
  4631  00189A  6E31               	movwf	?__div_to_l_+3,c
  4632  00189C  0012               	return	
  4633  00189E                     l464:
  4634  00189E  3433               	rlcf	__div_to_l_@f2+2,w,c
  4635  0018A0  3434               	rlcf	__div_to_l_@f2+3,w,c
  4636  0018A2  6E38               	movwf	__div_to_l_@cntr,c
  4637  0018A4  5038               	movf	__div_to_l_@cntr,w,c
  4638  0018A6  A4D8               	btfss	status,2,c
  4639  0018A8  D009               	goto	l466
  4640  0018AA  0E00               	movlw	0
  4641  0018AC  6E2E               	movwf	?__div_to_l_,c
  4642  0018AE  0E00               	movlw	0
  4643  0018B0  6E2F               	movwf	?__div_to_l_+1,c
  4644  0018B2  0E00               	movlw	0
  4645  0018B4  6E30               	movwf	?__div_to_l_+2,c
  4646  0018B6  0E00               	movlw	0
  4647  0018B8  6E31               	movwf	?__div_to_l_+3,c
  4648  0018BA  0012               	return	
  4649  0018BC                     l466:
  4650  0018BC  8E30               	bsf	__div_to_l_@f1+2,7,c
  4651  0018BE  0EFF               	movlw	255
  4652  0018C0  162E               	andwf	__div_to_l_@f1,f,c
  4653  0018C2  0EFF               	movlw	255
  4654  0018C4  162F               	andwf	__div_to_l_@f1+1,f,c
  4655  0018C6  0EFF               	movlw	255
  4656  0018C8  1630               	andwf	__div_to_l_@f1+2,f,c
  4657  0018CA  0E00               	movlw	0
  4658  0018CC  1631               	andwf	__div_to_l_@f1+3,f,c
  4659  0018CE  8E33               	bsf	__div_to_l_@f2+2,7,c
  4660  0018D0  0EFF               	movlw	255
  4661  0018D2  1631               	andwf	__div_to_l_@f2,f,c
  4662  0018D4  0EFF               	movlw	255
  4663  0018D6  1632               	andwf	__div_to_l_@f2+1,f,c
  4664  0018D8  0EFF               	movlw	255
  4665  0018DA  1633               	andwf	__div_to_l_@f2+2,f,c
  4666  0018DC  0E00               	movlw	0
  4667  0018DE  1634               	andwf	__div_to_l_@f2+3,f,c
  4668  0018E0  0E00               	movlw	0
  4669  0018E2  6E34               	movwf	__div_to_l_@quot,c
  4670  0018E4  0E00               	movlw	0
  4671  0018E6  6E35               	movwf	__div_to_l_@quot+1,c
  4672  0018E8  0E00               	movlw	0
  4673  0018EA  6E36               	movwf	__div_to_l_@quot+2,c
  4674  0018EC  0E00               	movlw	0
  4675  0018EE  6E37               	movwf	__div_to_l_@quot+3,c
  4676  0018F0  0E7F               	movlw	127
  4677  0018F2  5E39               	subwf	__div_to_l_@exp1,f,c
  4678  0018F4  5038               	movf	__div_to_l_@cntr,w,c
  4679  0018F6  0FA0               	addlw	160
  4680  0018F8  5E39               	subwf	__div_to_l_@exp1,f,c
  4681  0018FA  0E20               	movlw	32
  4682  0018FC  6E38               	movwf	__div_to_l_@cntr,c
  4683  0018FE  90D8               	bcf	status,0,c
  4684  001900  3634               	rlcf	__div_to_l_@quot,f,c
  4685  001902  3635               	rlcf	__div_to_l_@quot+1,f,c
  4686  001904  3636               	rlcf	__div_to_l_@quot+2,f,c
  4687  001906  3637               	rlcf	__div_to_l_@quot+3,f,c
  4688  001908  5031               	movf	__div_to_l_@f2,w,c
  4689  00190A  5C2E               	subwf	__div_to_l_@f1,w,c
  4690  00190C  5032               	movf	__div_to_l_@f2+1,w,c
  4691  00190E  582F               	subwfb	__div_to_l_@f1+1,w,c
  4692  001910  5033               	movf	__div_to_l_@f2+2,w,c
  4693  001912  5830               	subwfb	__div_to_l_@f1+2,w,c
  4694  001914  5034               	movf	__div_to_l_@f2+3,w,c
  4695  001916  5831               	subwfb	__div_to_l_@f1+3,w,c
  4696  001918  A0D8               	btfss	status,0,c
  4697  00191A  D009               	goto	l468
  4698  00191C  5031               	movf	__div_to_l_@f2,w,c
  4699  00191E  5E2E               	subwf	__div_to_l_@f1,f,c
  4700  001920  5032               	movf	__div_to_l_@f2+1,w,c
  4701  001922  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4702  001924  5033               	movf	__div_to_l_@f2+2,w,c
  4703  001926  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4704  001928  5034               	movf	__div_to_l_@f2+3,w,c
  4705  00192A  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4706  00192C  8034               	bsf	__div_to_l_@quot,0,c
  4707  00192E                     l468:
  4708  00192E  90D8               	bcf	status,0,c
  4709  001930  362E               	rlcf	__div_to_l_@f1,f,c
  4710  001932  362F               	rlcf	__div_to_l_@f1+1,f,c
  4711  001934  3630               	rlcf	__div_to_l_@f1+2,f,c
  4712  001936  3631               	rlcf	__div_to_l_@f1+3,f,c
  4713  001938  2E38               	decfsz	__div_to_l_@cntr,f,c
  4714  00193A  D7E1               	goto	l467
  4715  00193C  AE39               	btfss	__div_to_l_@exp1,7,c
  4716  00193E  D016               	goto	l470
  4717  001940  5039               	movf	__div_to_l_@exp1,w,c
  4718  001942  0A80               	xorlw	128
  4719  001944  0F9F               	addlw	159
  4720  001946  B0D8               	btfsc	status,0,c
  4721  001948  D009               	goto	l471
  4722  00194A  0E00               	movlw	0
  4723  00194C  6E2E               	movwf	?__div_to_l_,c
  4724  00194E  0E00               	movlw	0
  4725  001950  6E2F               	movwf	?__div_to_l_+1,c
  4726  001952  0E00               	movlw	0
  4727  001954  6E30               	movwf	?__div_to_l_+2,c
  4728  001956  0E00               	movlw	0
  4729  001958  6E31               	movwf	?__div_to_l_+3,c
  4730  00195A  0012               	return	
  4731  00195C                     l471:
  4732  00195C  90D8               	bcf	status,0,c
  4733  00195E  3237               	rrcf	__div_to_l_@quot+3,f,c
  4734  001960  3236               	rrcf	__div_to_l_@quot+2,f,c
  4735  001962  3235               	rrcf	__div_to_l_@quot+1,f,c
  4736  001964  3234               	rrcf	__div_to_l_@quot,f,c
  4737  001966  3E39               	incfsz	__div_to_l_@exp1,f,c
  4738  001968  D7F9               	goto	l471
  4739  00196A  D015               	goto	u3840
  4740  00196C                     l470:
  4741  00196C  0E1F               	movlw	31
  4742  00196E  6439               	cpfsgt	__div_to_l_@exp1,c
  4743  001970  D00F               	goto	l476
  4744  001972  0E00               	movlw	0
  4745  001974  6E2E               	movwf	?__div_to_l_,c
  4746  001976  0E00               	movlw	0
  4747  001978  6E2F               	movwf	?__div_to_l_+1,c
  4748  00197A  0E00               	movlw	0
  4749  00197C  6E30               	movwf	?__div_to_l_+2,c
  4750  00197E  0E00               	movlw	0
  4751  001980  6E31               	movwf	?__div_to_l_+3,c
  4752  001982  0012               	return	
  4753  001984  90D8               	bcf	status,0,c
  4754  001986  3634               	rlcf	__div_to_l_@quot,f,c
  4755  001988  3635               	rlcf	__div_to_l_@quot+1,f,c
  4756  00198A  3636               	rlcf	__div_to_l_@quot+2,f,c
  4757  00198C  3637               	rlcf	__div_to_l_@quot+3,f,c
  4758  00198E  0639               	decf	__div_to_l_@exp1,f,c
  4759  001990                     l476:
  4760  001990  5039               	movf	__div_to_l_@exp1,w,c
  4761  001992  A4D8               	btfss	status,2,c
  4762  001994  D7F7               	goto	l477
  4763  001996                     u3840:
  4764  001996  C034  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4765  00199A  C035  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4766  00199E  C036  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4767  0019A2  C037  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4768  0019A6  0012               	return		;funcret
  4769  0019A8                     __end_of__div_to_l_:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           indf2	equ	0xFDF
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           
  4787 ;; *************** function ___lltoft *****************
  4788 ;; Defined at:
  4789 ;;		line 35 in file "/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  c               4   53[COMRAM] unsigned long 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  exp             1   61[COMRAM] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  3   53[COMRAM] float 
  4796 ;; Registers used:
  4797 ;;		wreg, status,2, status,0, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4803 ;;      Params:         4       0       0       0       0       0       0
  4804 ;;      Locals:         1       0       0       0       0       0       0
  4805 ;;      Temps:          4       0       0       0       0       0       0
  4806 ;;      Totals:         9       0       0       0       0       0       0
  4807 ;;Total ram usage:        9 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    3
  4810 ;; This function calls:
  4811 ;;		___ftpack
  4812 ;; This function is called by:
  4813 ;;		_calcula
  4814 ;;		_sprintf
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text14
  4819  002298                     __ptext14:
  4820                           	opt stack 0
  4821  002298                     ___lltoft:
  4822                           	opt stack 25
  4823                           
  4824                           ;incstack = 0
  4825  002298  0E8E               	movlw	142
  4826  00229A  6E3E               	movwf	___lltoft@exp,c
  4827  00229C  D006               	goto	l675
  4828  00229E  90D8               	bcf	status,0,c
  4829  0022A0  3239               	rrcf	___lltoft@c+3,f,c
  4830  0022A2  3238               	rrcf	___lltoft@c+2,f,c
  4831  0022A4  3237               	rrcf	___lltoft@c+1,f,c
  4832  0022A6  3236               	rrcf	___lltoft@c,f,c
  4833  0022A8  2A3E               	incf	___lltoft@exp,f,c
  4834  0022AA                     l675:
  4835  0022AA  0E00               	movlw	0
  4836  0022AC  1436               	andwf	___lltoft@c,w,c
  4837  0022AE  6E3A               	movwf	??___lltoft& (0+255),c
  4838  0022B0  0E00               	movlw	0
  4839  0022B2  1437               	andwf	___lltoft@c+1,w,c
  4840  0022B4  6E3B               	movwf	(??___lltoft+1)& (0+255),c
  4841  0022B6  0E00               	movlw	0
  4842  0022B8  1438               	andwf	___lltoft@c+2,w,c
  4843  0022BA  6E3C               	movwf	(??___lltoft+2)& (0+255),c
  4844  0022BC  0EFF               	movlw	255
  4845  0022BE  1439               	andwf	___lltoft@c+3,w,c
  4846  0022C0  6E3D               	movwf	(??___lltoft+3)& (0+255),c
  4847  0022C2  503A               	movf	??___lltoft,w,c
  4848  0022C4  103B               	iorwf	??___lltoft+1,w,c
  4849  0022C6  103C               	iorwf	??___lltoft+2,w,c
  4850  0022C8  103D               	iorwf	??___lltoft+3,w,c
  4851  0022CA  A4D8               	btfss	status,2,c
  4852  0022CC  D7E8               	goto	l676
  4853  0022CE  C036  F02E         	movff	___lltoft@c,___ftpack@arg
  4854  0022D2  C037  F02F         	movff	___lltoft@c+1,___ftpack@arg+1
  4855  0022D6  C038  F030         	movff	___lltoft@c+2,___ftpack@arg+2
  4856  0022DA  C03E  F031         	movff	___lltoft@exp,___ftpack@exp
  4857  0022DE  0E00               	movlw	0
  4858  0022E0  6E32               	movwf	___ftpack@sign,c
  4859  0022E2  ECBF  F00F         	call	___ftpack	;wreg free
  4860  0022E6  C02E  F036         	movff	?___ftpack,?___lltoft
  4861  0022EA  C02F  F037         	movff	?___ftpack+1,?___lltoft+1
  4862  0022EE  C030  F038         	movff	?___ftpack+2,?___lltoft+2
  4863  0022F2  0012               	return	
  4864  0022F4                     __end_of___lltoft:
  4865                           	opt stack 0
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           intcon	equ	0xFF2
  4873                           postinc0	equ	0xFEE
  4874                           wreg	equ	0xFE8
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function ___llmod *****************
  4883 ;; Defined at:
  4884 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  dividend        4   45[COMRAM] unsigned long 
  4887 ;;  divisor         4   49[COMRAM] unsigned long 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  counter         1   53[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  4   45[COMRAM] unsigned long 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4899 ;;      Params:         8       0       0       0       0       0       0
  4900 ;;      Locals:         1       0       0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0
  4902 ;;      Totals:         9       0       0       0       0       0       0
  4903 ;;Total ram usage:        9 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    2
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_sprintf
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text15
  4914  002232                     __ptext15:
  4915                           	opt stack 0
  4916  002232                     ___llmod:
  4917                           	opt stack 26
  4918                           
  4919                           ;incstack = 0
  4920  002232  5032               	movf	___llmod@divisor,w,c
  4921  002234  1033               	iorwf	___llmod@divisor+1,w,c
  4922  002236  1034               	iorwf	___llmod@divisor+2,w,c
  4923  002238  1035               	iorwf	___llmod@divisor+3,w,c
  4924  00223A  B4D8               	btfsc	status,2,c
  4925  00223C  D024               	goto	l669
  4926  00223E  0E01               	movlw	1
  4927  002240  6E36               	movwf	___llmod@counter,c
  4928  002242  D006               	goto	l664
  4929  002244  90D8               	bcf	status,0,c
  4930  002246  3632               	rlcf	___llmod@divisor,f,c
  4931  002248  3633               	rlcf	___llmod@divisor+1,f,c
  4932  00224A  3634               	rlcf	___llmod@divisor+2,f,c
  4933  00224C  3635               	rlcf	___llmod@divisor+3,f,c
  4934  00224E  2A36               	incf	___llmod@counter,f,c
  4935  002250                     l664:
  4936  002250  AE35               	btfss	___llmod@divisor+3,7,c
  4937  002252  D7F8               	goto	l665
  4938  002254                     u4020:
  4939  002254  5032               	movf	___llmod@divisor,w,c
  4940  002256  5C2E               	subwf	___llmod@dividend,w,c
  4941  002258  5033               	movf	___llmod@divisor+1,w,c
  4942  00225A  582F               	subwfb	___llmod@dividend+1,w,c
  4943  00225C  5034               	movf	___llmod@divisor+2,w,c
  4944  00225E  5830               	subwfb	___llmod@dividend+2,w,c
  4945  002260  5035               	movf	___llmod@divisor+3,w,c
  4946  002262  5831               	subwfb	___llmod@dividend+3,w,c
  4947  002264  A0D8               	btfss	status,0,c
  4948  002266  D008               	goto	l668
  4949  002268  5032               	movf	___llmod@divisor,w,c
  4950  00226A  5E2E               	subwf	___llmod@dividend,f,c
  4951  00226C  5033               	movf	___llmod@divisor+1,w,c
  4952  00226E  5A2F               	subwfb	___llmod@dividend+1,f,c
  4953  002270  5034               	movf	___llmod@divisor+2,w,c
  4954  002272  5A30               	subwfb	___llmod@dividend+2,f,c
  4955  002274  5035               	movf	___llmod@divisor+3,w,c
  4956  002276  5A31               	subwfb	___llmod@dividend+3,f,c
  4957  002278                     l668:
  4958  002278  90D8               	bcf	status,0,c
  4959  00227A  3235               	rrcf	___llmod@divisor+3,f,c
  4960  00227C  3234               	rrcf	___llmod@divisor+2,f,c
  4961  00227E  3233               	rrcf	___llmod@divisor+1,f,c
  4962  002280  3232               	rrcf	___llmod@divisor,f,c
  4963  002282  2E36               	decfsz	___llmod@counter,f,c
  4964  002284  D7E7               	goto	u4020
  4965  002286                     l669:
  4966  002286  C02E  F02E         	movff	___llmod@dividend,?___llmod
  4967  00228A  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  4968  00228E  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  4969  002292  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  4970  002296  0012               	return		;funcret
  4971  002298                     __end_of___llmod:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           postinc0	equ	0xFEE
  4981                           wreg	equ	0xFE8
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           fsr2h	equ	0xFDA
  4986                           fsr2l	equ	0xFD9
  4987                           status	equ	0xFD8
  4988                           
  4989 ;; *************** function ___lldiv *****************
  4990 ;; Defined at:
  4991 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  dividend        4   45[COMRAM] unsigned long 
  4994 ;;  divisor         4   49[COMRAM] unsigned long 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  quotient        4   53[COMRAM] unsigned long 
  4997 ;;  counter         1   57[COMRAM] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  4   45[COMRAM] unsigned long 
  5000 ;; Registers used:
  5001 ;;		wreg, status,2, status,0
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5007 ;;      Params:         8       0       0       0       0       0       0
  5008 ;;      Locals:         5       0       0       0       0       0       0
  5009 ;;      Temps:          0       0       0       0       0       0       0
  5010 ;;      Totals:        13       0       0       0       0       0       0
  5011 ;;Total ram usage:       13 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    2
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_sprintf
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text16
  5022  002140                     __ptext16:
  5023                           	opt stack 0
  5024  002140                     ___lldiv:
  5025                           	opt stack 26
  5026                           
  5027                           ;incstack = 0
  5028  002140  0E00               	movlw	0
  5029  002142  6E36               	movwf	___lldiv@quotient,c
  5030  002144  0E00               	movlw	0
  5031  002146  6E37               	movwf	___lldiv@quotient+1,c
  5032  002148  0E00               	movlw	0
  5033  00214A  6E38               	movwf	___lldiv@quotient+2,c
  5034  00214C  0E00               	movlw	0
  5035  00214E  6E39               	movwf	___lldiv@quotient+3,c
  5036  002150  5032               	movf	___lldiv@divisor,w,c
  5037  002152  1033               	iorwf	___lldiv@divisor+1,w,c
  5038  002154  1034               	iorwf	___lldiv@divisor+2,w,c
  5039  002156  1035               	iorwf	___lldiv@divisor+3,w,c
  5040  002158  B4D8               	btfsc	status,2,c
  5041  00215A  D02A               	goto	l659
  5042  00215C  0E01               	movlw	1
  5043  00215E  6E3A               	movwf	___lldiv@counter,c
  5044  002160  D006               	goto	l654
  5045  002162  90D8               	bcf	status,0,c
  5046  002164  3632               	rlcf	___lldiv@divisor,f,c
  5047  002166  3633               	rlcf	___lldiv@divisor+1,f,c
  5048  002168  3634               	rlcf	___lldiv@divisor+2,f,c
  5049  00216A  3635               	rlcf	___lldiv@divisor+3,f,c
  5050  00216C  2A3A               	incf	___lldiv@counter,f,c
  5051  00216E                     l654:
  5052  00216E  AE35               	btfss	___lldiv@divisor+3,7,c
  5053  002170  D7F8               	goto	l655
  5054  002172                     u3990:
  5055  002172  90D8               	bcf	status,0,c
  5056  002174  3636               	rlcf	___lldiv@quotient,f,c
  5057  002176  3637               	rlcf	___lldiv@quotient+1,f,c
  5058  002178  3638               	rlcf	___lldiv@quotient+2,f,c
  5059  00217A  3639               	rlcf	___lldiv@quotient+3,f,c
  5060  00217C  5032               	movf	___lldiv@divisor,w,c
  5061  00217E  5C2E               	subwf	___lldiv@dividend,w,c
  5062  002180  5033               	movf	___lldiv@divisor+1,w,c
  5063  002182  582F               	subwfb	___lldiv@dividend+1,w,c
  5064  002184  5034               	movf	___lldiv@divisor+2,w,c
  5065  002186  5830               	subwfb	___lldiv@dividend+2,w,c
  5066  002188  5035               	movf	___lldiv@divisor+3,w,c
  5067  00218A  5831               	subwfb	___lldiv@dividend+3,w,c
  5068  00218C  A0D8               	btfss	status,0,c
  5069  00218E  D009               	goto	l658
  5070  002190  5032               	movf	___lldiv@divisor,w,c
  5071  002192  5E2E               	subwf	___lldiv@dividend,f,c
  5072  002194  5033               	movf	___lldiv@divisor+1,w,c
  5073  002196  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5074  002198  5034               	movf	___lldiv@divisor+2,w,c
  5075  00219A  5A30               	subwfb	___lldiv@dividend+2,f,c
  5076  00219C  5035               	movf	___lldiv@divisor+3,w,c
  5077  00219E  5A31               	subwfb	___lldiv@dividend+3,f,c
  5078  0021A0  8036               	bsf	___lldiv@quotient,0,c
  5079  0021A2                     l658:
  5080  0021A2  90D8               	bcf	status,0,c
  5081  0021A4  3235               	rrcf	___lldiv@divisor+3,f,c
  5082  0021A6  3234               	rrcf	___lldiv@divisor+2,f,c
  5083  0021A8  3233               	rrcf	___lldiv@divisor+1,f,c
  5084  0021AA  3232               	rrcf	___lldiv@divisor,f,c
  5085  0021AC  2E3A               	decfsz	___lldiv@counter,f,c
  5086  0021AE  D7E1               	goto	u3990
  5087  0021B0                     l659:
  5088  0021B0  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5089  0021B4  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5090  0021B8  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5091  0021BC  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5092  0021C0  0012               	return		;funcret
  5093  0021C2                     __end_of___lldiv:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111 ;; *************** function ___fttol *****************
  5112 ;; Defined at:
  5113 ;;		line 44 in file "/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  f1              3   13[BANK0 ] float 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  lval            4   23[BANK0 ] unsigned long 
  5118 ;;  exp1            1   27[BANK0 ] unsigned char 
  5119 ;;  sign1           1   22[BANK0 ] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  4   13[BANK0 ] long 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5129 ;;      Params:         0       4       0       0       0       0       0
  5130 ;;      Locals:         0       6       0       0       0       0       0
  5131 ;;      Temps:          0       5       0       0       0       0       0
  5132 ;;      Totals:         0      15       0       0       0       0       0
  5133 ;;Total ram usage:       15 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    2
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_sprintf
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text17
  5144  001BF0                     __ptext17:
  5145                           	opt stack 0
  5146  001BF0                     ___fttol:
  5147                           	opt stack 26
  5148                           
  5149                           ;incstack = 0
  5150  001BF0  C08F  F091         	movff	___fttol@f1+2,??___fttol
  5151  001BF4  0100               	movlb	0	; () banked
  5152  001BF6  6B92               	clrf	(??___fttol+1)& (0+255),b
  5153  001BF8  6B93               	clrf	(??___fttol+2)& (0+255),b
  5154  001BFA  358E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5155  001BFC  3791               	rlcf	??___fttol& (0+255),f,b
  5156  001BFE  E301               	bnc	u3901
  5157  001C00  8192               	bsf	(??___fttol+1)& (0+255),0,b
  5158  001C02                     u3901:
  5159  001C02  5191               	movf	??___fttol& (0+255),w,b
  5160  001C04  6F9B               	movwf	___fttol@exp1& (0+255),b
  5161  001C06  519B               	movf	___fttol@exp1& (0+255),w,b
  5162  001C08  A4D8               	btfss	status,2,c
  5163  001C0A  D009               	goto	l613
  5164                           
  5165                           ; BSR set to: 0
  5166  001C0C  0E00               	movlw	0
  5167  001C0E  6F8D               	movwf	?___fttol& (0+255),b
  5168  001C10  0E00               	movlw	0
  5169  001C12  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5170  001C14  0E00               	movlw	0
  5171  001C16  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5172  001C18  0E00               	movlw	0
  5173  001C1A  6F90               	movwf	(?___fttol+3)& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176  001C1C  0012               	return	
  5177  001C1E                     l613:
  5178                           
  5179                           ; BSR set to: 0
  5180                           
  5181                           ; BSR set to: 0
  5182  001C1E  0E17               	movlw	23
  5183  001C20  6F91               	movwf	??___fttol& (0+255),b
  5184  001C22  C08D  F092         	movff	___fttol@f1,??___fttol+1
  5185  001C26  C08E  F093         	movff	___fttol@f1+1,??___fttol+2
  5186  001C2A  C08F  F094         	movff	___fttol@f1+2,??___fttol+3
  5187  001C2E  2991               	incf	??___fttol& (0+255),w,b
  5188  001C30  6F95               	movwf	(??___fttol+4)& (0+255),b
  5189  001C32  D004               	goto	u3920
  5190  001C34                     u3925:
  5191  001C34  90D8               	bcf	status,0,c
  5192  001C36  3394               	rrcf	(??___fttol+3)& (0+255),f,b
  5193  001C38  3393               	rrcf	(??___fttol+2)& (0+255),f,b
  5194  001C3A  3392               	rrcf	(??___fttol+1)& (0+255),f,b
  5195  001C3C                     u3920:
  5196  001C3C  2F95               	decfsz	(??___fttol+4)& (0+255),f,b
  5197  001C3E  D7FA               	goto	u3925
  5198  001C40  0100               	movlb	0	; () banked
  5199  001C42  5192               	movf	(??___fttol+1)& (0+255),w,b
  5200  001C44  6F96               	movwf	___fttol@sign1& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203  001C46  8F8E               	bsf	(___fttol@f1+1)& (0+255),7,b
  5204                           
  5205                           ; BSR set to: 0
  5206  001C48  0EFF               	movlw	255
  5207  001C4A  178D               	andwf	___fttol@f1& (0+255),f,b
  5208  001C4C  0EFF               	movlw	255
  5209  001C4E  178E               	andwf	(___fttol@f1+1)& (0+255),f,b
  5210  001C50  0E00               	movlw	0
  5211  001C52  178F               	andwf	(___fttol@f1+2)& (0+255),f,b
  5212                           
  5213                           ; BSR set to: 0
  5214  001C54  518D               	movf	___fttol@f1& (0+255),w,b
  5215  001C56  6F97               	movwf	___fttol@lval& (0+255),b
  5216  001C58  518E               	movf	(___fttol@f1+1)& (0+255),w,b
  5217  001C5A  6F98               	movwf	(___fttol@lval+1)& (0+255),b
  5218  001C5C  518F               	movf	(___fttol@f1+2)& (0+255),w,b
  5219  001C5E  6F99               	movwf	(___fttol@lval+2)& (0+255),b
  5220  001C60  6B9A               	clrf	(___fttol@lval+3)& (0+255),b
  5221                           
  5222                           ; BSR set to: 0
  5223  001C62  0E8E               	movlw	142
  5224  001C64  5F9B               	subwf	___fttol@exp1& (0+255),f,b
  5225                           
  5226                           ; BSR set to: 0
  5227  001C66  AF9B               	btfss	___fttol@exp1& (0+255),7,b
  5228  001C68  D016               	goto	l615
  5229                           
  5230                           ; BSR set to: 0
  5231  001C6A  519B               	movf	___fttol@exp1& (0+255),w,b
  5232  001C6C  0A80               	xorlw	128
  5233  001C6E  0F8F               	addlw	143
  5234  001C70  B0D8               	btfsc	status,0,c
  5235  001C72  D009               	goto	l616
  5236                           
  5237                           ; BSR set to: 0
  5238  001C74  0E00               	movlw	0
  5239  001C76  6F8D               	movwf	?___fttol& (0+255),b
  5240  001C78  0E00               	movlw	0
  5241  001C7A  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5242  001C7C  0E00               	movlw	0
  5243  001C7E  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5244  001C80  0E00               	movlw	0
  5245  001C82  6F90               	movwf	(?___fttol+3)& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248  001C84  0012               	return	
  5249  001C86                     l616:
  5250                           
  5251                           ; BSR set to: 0
  5252                           
  5253                           ; BSR set to: 0
  5254                           
  5255                           ; BSR set to: 0
  5256  001C86  90D8               	bcf	status,0,c
  5257  001C88  339A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5258  001C8A  3399               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5259  001C8C  3398               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5260  001C8E  3397               	rrcf	___fttol@lval& (0+255),f,b
  5261                           
  5262                           ; BSR set to: 0
  5263  001C90  3F9B               	incfsz	___fttol@exp1& (0+255),f,b
  5264  001C92  D7F9               	goto	l616
  5265                           
  5266                           ; BSR set to: 0
  5267  001C94  D015               	goto	u3960
  5268  001C96                     l615:
  5269                           
  5270                           ; BSR set to: 0
  5271                           
  5272                           ; BSR set to: 0
  5273  001C96  0E17               	movlw	23
  5274  001C98  659B               	cpfsgt	___fttol@exp1& (0+255),b
  5275  001C9A  D00F               	goto	l621
  5276                           
  5277                           ; BSR set to: 0
  5278  001C9C  0E00               	movlw	0
  5279  001C9E  6F8D               	movwf	?___fttol& (0+255),b
  5280  001CA0  0E00               	movlw	0
  5281  001CA2  6F8E               	movwf	(?___fttol+1)& (0+255),b
  5282  001CA4  0E00               	movlw	0
  5283  001CA6  6F8F               	movwf	(?___fttol+2)& (0+255),b
  5284  001CA8  0E00               	movlw	0
  5285  001CAA  6F90               	movwf	(?___fttol+3)& (0+255),b
  5286                           
  5287                           ; BSR set to: 0
  5288  001CAC  0012               	return	
  5289  001CAE                     
  5290                           ; BSR set to: 0
  5291                           
  5292                           ; BSR set to: 0
  5293  001CAE  90D8               	bcf	status,0,c
  5294  001CB0  3797               	rlcf	___fttol@lval& (0+255),f,b
  5295  001CB2  3798               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5296  001CB4  3799               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5297  001CB6  379A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5298  001CB8  079B               	decf	___fttol@exp1& (0+255),f,b
  5299  001CBA                     l621:
  5300                           
  5301                           ; BSR set to: 0
  5302                           
  5303                           ; BSR set to: 0
  5304  001CBA  519B               	movf	___fttol@exp1& (0+255),w,b
  5305  001CBC  A4D8               	btfss	status,2,c
  5306  001CBE  D7F7               	goto	l622
  5307  001CC0                     u3960:
  5308                           
  5309                           ; BSR set to: 0
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314  001CC0  5196               	movf	___fttol@sign1& (0+255),w,b
  5315  001CC2  B4D8               	btfsc	status,2,c
  5316  001CC4  D008               	goto	l624
  5317                           
  5318                           ; BSR set to: 0
  5319  001CC6  1F9A               	comf	(___fttol@lval+3)& (0+255),f,b
  5320  001CC8  1F99               	comf	(___fttol@lval+2)& (0+255),f,b
  5321  001CCA  1F98               	comf	(___fttol@lval+1)& (0+255),f,b
  5322  001CCC  6D97               	negf	___fttol@lval& (0+255),b
  5323  001CCE  0E00               	movlw	0
  5324  001CD0  2398               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5325  001CD2  2399               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5326  001CD4  239A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5327  001CD6                     l624:
  5328                           
  5329                           ; BSR set to: 0
  5330                           
  5331                           ; BSR set to: 0
  5332  001CD6  C097  F08D         	movff	___fttol@lval,?___fttol
  5333  001CDA  C098  F08E         	movff	___fttol@lval+1,?___fttol+1
  5334  001CDE  C099  F08F         	movff	___fttol@lval+2,?___fttol+2
  5335  001CE2  C09A  F090         	movff	___fttol@lval+3,?___fttol+3
  5336  001CE6  0012               	return	
  5337  001CE8                     __end_of___fttol:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           postinc0	equ	0xFEE
  5347                           wreg	equ	0xFE8
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function ___ftsub *****************
  5356 ;; Defined at:
  5357 ;;		line 20 in file "/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  f1              3   28[BANK0 ] float 
  5360 ;;  f2              3   31[BANK0 ] float 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  3   28[BANK0 ] float 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5372 ;;      Params:         0       6       0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0
  5375 ;;      Totals:         0       6       0       0       0       0       0
  5376 ;;Total ram usage:        6 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    4
  5379 ;; This function calls:
  5380 ;;		___ftadd
  5381 ;; This function is called by:
  5382 ;;		_sprintf
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text18
  5387  002424                     __ptext18:
  5388                           	opt stack 0
  5389  002424                     ___ftsub:
  5390                           	opt stack 24
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;incstack = 0
  5394  002424  0100               	movlb	0	; () banked
  5395  002426  519F               	movf	___ftsub@f2& (0+255),w,b
  5396  002428  11A0               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5397  00242A  11A1               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5398  00242C  B4D8               	btfsc	status,2,c
  5399  00242E  D006               	goto	l609
  5400                           
  5401                           ; BSR set to: 0
  5402  002430  0E00               	movlw	0
  5403  002432  1B9F               	xorwf	___ftsub@f2& (0+255),f,b
  5404  002434  0E00               	movlw	0
  5405  002436  1BA0               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5406  002438  0E80               	movlw	128
  5407  00243A  1BA1               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5408  00243C                     l609:
  5409                           
  5410                           ; BSR set to: 0
  5411                           
  5412                           ; BSR set to: 0
  5413  00243C  C09C  F090         	movff	___ftsub@f1,___ftadd@f1
  5414  002440  C09D  F091         	movff	___ftsub@f1+1,___ftadd@f1+1
  5415  002444  C09E  F092         	movff	___ftsub@f1+2,___ftadd@f1+2
  5416  002448  C09F  F093         	movff	___ftsub@f2,___ftadd@f2
  5417  00244C  C0A0  F094         	movff	___ftsub@f2+1,___ftadd@f2+1
  5418  002450  C0A1  F095         	movff	___ftsub@f2+2,___ftadd@f2+2
  5419  002454  ECD0  F00A         	call	___ftadd	;wreg free
  5420  002458  C090  F09C         	movff	?___ftadd,?___ftsub
  5421  00245C  C091  F09D         	movff	?___ftadd+1,?___ftsub+1
  5422  002460  C092  F09E         	movff	?___ftadd+2,?___ftsub+2
  5423  002464  0012               	return	
  5424  002466                     __end_of___ftsub:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function ___ftadd *****************
  5443 ;; Defined at:
  5444 ;;		line 86 in file "/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  f1              3   16[BANK0 ] float 
  5447 ;;  f2              3   19[BANK0 ] float 
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;  exp1            1   27[BANK0 ] unsigned char 
  5450 ;;  exp2            1   26[BANK0 ] unsigned char 
  5451 ;;  sign            1   25[BANK0 ] unsigned char 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  3   16[BANK0 ] float 
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5461 ;;      Params:         0       6       0       0       0       0       0
  5462 ;;      Locals:         0       3       0       0       0       0       0
  5463 ;;      Temps:          0       3       0       0       0       0       0
  5464 ;;      Totals:         0      12       0       0       0       0       0
  5465 ;;Total ram usage:       12 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    3
  5468 ;; This function calls:
  5469 ;;		___ftpack
  5470 ;; This function is called by:
  5471 ;;		_sprintf
  5472 ;;		___ftsub
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text19
  5477  0015A0                     __ptext19:
  5478                           	opt stack 0
  5479  0015A0                     ___ftadd:
  5480                           	opt stack 24
  5481                           
  5482                           ;incstack = 0
  5483  0015A0  C092  F096         	movff	___ftadd@f1+2,??___ftadd
  5484  0015A4  0100               	movlb	0	; () banked
  5485  0015A6  6B97               	clrf	(??___ftadd+1)& (0+255),b
  5486  0015A8  6B98               	clrf	(??___ftadd+2)& (0+255),b
  5487  0015AA  3591               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5488  0015AC  3796               	rlcf	??___ftadd& (0+255),f,b
  5489  0015AE  E301               	bnc	u3211
  5490  0015B0  8197               	bsf	(??___ftadd+1)& (0+255),0,b
  5491  0015B2                     u3211:
  5492  0015B2  5196               	movf	??___ftadd& (0+255),w,b
  5493  0015B4  6F9B               	movwf	___ftadd@exp1& (0+255),b
  5494  0015B6  C095  F096         	movff	___ftadd@f2+2,??___ftadd
  5495  0015BA  6B97               	clrf	(??___ftadd+1)& (0+255),b
  5496  0015BC  6B98               	clrf	(??___ftadd+2)& (0+255),b
  5497  0015BE  3594               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5498  0015C0  3796               	rlcf	??___ftadd& (0+255),f,b
  5499  0015C2  E301               	bnc	u3221
  5500  0015C4  8197               	bsf	(??___ftadd+1)& (0+255),0,b
  5501  0015C6                     u3221:
  5502  0015C6  5196               	movf	??___ftadd& (0+255),w,b
  5503  0015C8  6F9A               	movwf	___ftadd@exp2& (0+255),b
  5504                           
  5505                           ; BSR set to: 0
  5506  0015CA  519B               	movf	___ftadd@exp1& (0+255),w,b
  5507  0015CC  B4D8               	btfsc	status,2,c
  5508  0015CE  D00B               	goto	u3250
  5509                           
  5510                           ; BSR set to: 0
  5511  0015D0  519A               	movf	___ftadd@exp2& (0+255),w,b
  5512  0015D2  5D9B               	subwf	___ftadd@exp1& (0+255),w,b
  5513  0015D4  B0D8               	btfsc	status,0,c
  5514  0015D6  D00E               	goto	l527
  5515                           
  5516                           ; BSR set to: 0
  5517  0015D8  519B               	movf	___ftadd@exp1& (0+255),w,b
  5518  0015DA  0800               	sublw	0
  5519  0015DC  259A               	addwf	___ftadd@exp2& (0+255),w,b
  5520  0015DE  6F96               	movwf	??___ftadd& (0+255),b
  5521  0015E0  0E18               	movlw	24
  5522  0015E2  6596               	cpfsgt	??___ftadd& (0+255),b
  5523  0015E4  D007               	goto	l527
  5524  0015E6                     u3250:
  5525                           
  5526                           ; BSR set to: 0
  5527  0015E6  C093  F090         	movff	___ftadd@f2,?___ftadd
  5528  0015EA  C094  F091         	movff	___ftadd@f2+1,?___ftadd+1
  5529  0015EE  C095  F092         	movff	___ftadd@f2+2,?___ftadd+2
  5530  0015F2  0012               	return	
  5531  0015F4                     l527:
  5532                           
  5533                           ; BSR set to: 0
  5534                           
  5535                           ; BSR set to: 0
  5536  0015F4  519A               	movf	___ftadd@exp2& (0+255),w,b
  5537  0015F6  B4D8               	btfsc	status,2,c
  5538  0015F8  D00B               	goto	u3280
  5539                           
  5540                           ; BSR set to: 0
  5541  0015FA  519B               	movf	___ftadd@exp1& (0+255),w,b
  5542  0015FC  5D9A               	subwf	___ftadd@exp2& (0+255),w,b
  5543  0015FE  B0D8               	btfsc	status,0,c
  5544  001600  D00E               	goto	l531
  5545                           
  5546                           ; BSR set to: 0
  5547  001602  519A               	movf	___ftadd@exp2& (0+255),w,b
  5548  001604  0800               	sublw	0
  5549  001606  259B               	addwf	___ftadd@exp1& (0+255),w,b
  5550  001608  6F96               	movwf	??___ftadd& (0+255),b
  5551  00160A  0E18               	movlw	24
  5552  00160C  6596               	cpfsgt	??___ftadd& (0+255),b
  5553  00160E  D007               	goto	l531
  5554  001610                     u3280:
  5555                           
  5556                           ; BSR set to: 0
  5557  001610  C090  F090         	movff	___ftadd@f1,?___ftadd
  5558  001614  C091  F091         	movff	___ftadd@f1+1,?___ftadd+1
  5559  001618  C092  F092         	movff	___ftadd@f1+2,?___ftadd+2
  5560  00161C  0012               	return	
  5561  00161E                     l531:
  5562                           
  5563                           ; BSR set to: 0
  5564                           
  5565                           ; BSR set to: 0
  5566  00161E  0E06               	movlw	6
  5567  001620  6F99               	movwf	___ftadd@sign& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570  001622  BF92               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5571                           
  5572                           ; BSR set to: 0
  5573  001624  8F99               	bsf	___ftadd@sign& (0+255),7,b
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ; BSR set to: 0
  5578  001626  BF95               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5579                           
  5580                           ; BSR set to: 0
  5581  001628  8D99               	bsf	___ftadd@sign& (0+255),6,b
  5582                           
  5583                           ; BSR set to: 0
  5584  00162A  8F91               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5585                           
  5586                           ; BSR set to: 0
  5587  00162C  0EFF               	movlw	255
  5588  00162E  1790               	andwf	___ftadd@f1& (0+255),f,b
  5589  001630  0EFF               	movlw	255
  5590  001632  1791               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5591  001634  0E00               	movlw	0
  5592  001636  1792               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5593  001638  8F94               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5594                           
  5595                           ; BSR set to: 0
  5596  00163A  0EFF               	movlw	255
  5597  00163C  1793               	andwf	___ftadd@f2& (0+255),f,b
  5598  00163E  0EFF               	movlw	255
  5599  001640  1794               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5600  001642  0E00               	movlw	0
  5601  001644  1795               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5602                           
  5603                           ; BSR set to: 0
  5604  001646  519A               	movf	___ftadd@exp2& (0+255),w,b
  5605  001648  5D9B               	subwf	___ftadd@exp1& (0+255),w,b
  5606  00164A  B0D8               	btfsc	status,0,c
  5607  00164C  D01B               	goto	l536
  5608  00164E                     u3310:
  5609                           
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613  00164E  90D8               	bcf	status,0,c
  5614  001650  3793               	rlcf	___ftadd@f2& (0+255),f,b
  5615  001652  3794               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5616  001654  3795               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5617  001656  079A               	decf	___ftadd@exp2& (0+255),f,b
  5618                           
  5619                           ; BSR set to: 0
  5620  001658  519B               	movf	___ftadd@exp1& (0+255),w,b
  5621  00165A  199A               	xorwf	___ftadd@exp2& (0+255),w,b
  5622  00165C  B4D8               	btfsc	status,2,c
  5623  00165E  D00D               	goto	l541
  5624                           
  5625                           ; BSR set to: 0
  5626  001660  0799               	decf	___ftadd@sign& (0+255),f,b
  5627  001662  C099  F096         	movff	___ftadd@sign,??___ftadd
  5628  001666  0E07               	movlw	7
  5629  001668  1796               	andwf	??___ftadd& (0+255),f,b
  5630  00166A  B4D8               	btfsc	status,2,c
  5631  00166C  D006               	goto	l541
  5632  00166E  D7EF               	goto	u3310
  5633  001670                     
  5634                           ; BSR set to: 0
  5635                           
  5636                           ; BSR set to: 0
  5637  001670  90D8               	bcf	status,0,c
  5638  001672  3392               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5639  001674  3391               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5640  001676  3390               	rrcf	___ftadd@f1& (0+255),f,b
  5641  001678  2B9B               	incf	___ftadd@exp1& (0+255),f,b
  5642  00167A                     l541:
  5643                           
  5644                           ; BSR set to: 0
  5645                           
  5646                           ; BSR set to: 0
  5647  00167A  519A               	movf	___ftadd@exp2& (0+255),w,b
  5648  00167C  199B               	xorwf	___ftadd@exp1& (0+255),w,b
  5649  00167E  B4D8               	btfsc	status,2,c
  5650  001680  D01F               	goto	u3380
  5651  001682  D7F6               	goto	l542
  5652  001684                     l536:
  5653                           
  5654                           ; BSR set to: 0
  5655                           
  5656                           ; BSR set to: 0
  5657  001684  519B               	movf	___ftadd@exp1& (0+255),w,b
  5658  001686  5D9A               	subwf	___ftadd@exp2& (0+255),w,b
  5659  001688  B0D8               	btfsc	status,0,c
  5660  00168A  D01A               	goto	u3380
  5661  00168C                     u3350:
  5662                           
  5663                           ; BSR set to: 0
  5664                           
  5665                           ; BSR set to: 0
  5666  00168C  90D8               	bcf	status,0,c
  5667  00168E  3790               	rlcf	___ftadd@f1& (0+255),f,b
  5668  001690  3791               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5669  001692  3792               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5670  001694  079B               	decf	___ftadd@exp1& (0+255),f,b
  5671                           
  5672                           ; BSR set to: 0
  5673  001696  519B               	movf	___ftadd@exp1& (0+255),w,b
  5674  001698  199A               	xorwf	___ftadd@exp2& (0+255),w,b
  5675  00169A  B4D8               	btfsc	status,2,c
  5676  00169C  D00D               	goto	l550
  5677                           
  5678                           ; BSR set to: 0
  5679  00169E  0799               	decf	___ftadd@sign& (0+255),f,b
  5680  0016A0  C099  F096         	movff	___ftadd@sign,??___ftadd
  5681  0016A4  0E07               	movlw	7
  5682  0016A6  1796               	andwf	??___ftadd& (0+255),f,b
  5683  0016A8  B4D8               	btfsc	status,2,c
  5684  0016AA  D006               	goto	l550
  5685  0016AC  D7EF               	goto	u3350
  5686  0016AE                     
  5687                           ; BSR set to: 0
  5688                           
  5689                           ; BSR set to: 0
  5690  0016AE  90D8               	bcf	status,0,c
  5691  0016B0  3395               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5692  0016B2  3394               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5693  0016B4  3393               	rrcf	___ftadd@f2& (0+255),f,b
  5694  0016B6  2B9A               	incf	___ftadd@exp2& (0+255),f,b
  5695  0016B8                     l550:
  5696                           
  5697                           ; BSR set to: 0
  5698                           
  5699                           ; BSR set to: 0
  5700  0016B8  519A               	movf	___ftadd@exp2& (0+255),w,b
  5701  0016BA  199B               	xorwf	___ftadd@exp1& (0+255),w,b
  5702  0016BC  A4D8               	btfss	status,2,c
  5703  0016BE  D7F7               	goto	l551
  5704  0016C0                     u3380:
  5705                           
  5706                           ; BSR set to: 0
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711  0016C0  AF99               	btfss	___ftadd@sign& (0+255),7,b
  5712  0016C2  D00C               	goto	l553
  5713                           
  5714                           ; BSR set to: 0
  5715  0016C4  0EFF               	movlw	255
  5716  0016C6  1B90               	xorwf	___ftadd@f1& (0+255),f,b
  5717  0016C8  0EFF               	movlw	255
  5718  0016CA  1B91               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5719  0016CC  0EFF               	movlw	255
  5720  0016CE  1B92               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5721  0016D0  0E01               	movlw	1
  5722  0016D2  2790               	addwf	___ftadd@f1& (0+255),f,b
  5723  0016D4  0E00               	movlw	0
  5724  0016D6  2391               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5725  0016D8  0E00               	movlw	0
  5726  0016DA  2392               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5727  0016DC                     l553:
  5728                           
  5729                           ; BSR set to: 0
  5730  0016DC  AD99               	btfss	___ftadd@sign& (0+255),6,b
  5731  0016DE  D00C               	goto	l554
  5732                           
  5733                           ; BSR set to: 0
  5734  0016E0  0EFF               	movlw	255
  5735  0016E2  1B93               	xorwf	___ftadd@f2& (0+255),f,b
  5736  0016E4  0EFF               	movlw	255
  5737  0016E6  1B94               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5738  0016E8  0EFF               	movlw	255
  5739  0016EA  1B95               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5740  0016EC  0E01               	movlw	1
  5741  0016EE  2793               	addwf	___ftadd@f2& (0+255),f,b
  5742  0016F0  0E00               	movlw	0
  5743  0016F2  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5744  0016F4  0E00               	movlw	0
  5745  0016F6  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5746  0016F8                     l554:
  5747                           
  5748                           ; BSR set to: 0
  5749                           
  5750                           ; BSR set to: 0
  5751  0016F8  0E00               	movlw	0
  5752  0016FA  6F99               	movwf	___ftadd@sign& (0+255),b
  5753                           
  5754                           ; BSR set to: 0
  5755  0016FC  5190               	movf	___ftadd@f1& (0+255),w,b
  5756  0016FE  2793               	addwf	___ftadd@f2& (0+255),f,b
  5757  001700  5191               	movf	(___ftadd@f1+1)& (0+255),w,b
  5758  001702  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5759  001704  5192               	movf	(___ftadd@f1+2)& (0+255),w,b
  5760  001706  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5761                           
  5762                           ; BSR set to: 0
  5763  001708  AF95               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5764  00170A  D00E               	goto	l555
  5765                           
  5766                           ; BSR set to: 0
  5767  00170C  0EFF               	movlw	255
  5768  00170E  1B93               	xorwf	___ftadd@f2& (0+255),f,b
  5769  001710  0EFF               	movlw	255
  5770  001712  1B94               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5771  001714  0EFF               	movlw	255
  5772  001716  1B95               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5773  001718  0E01               	movlw	1
  5774  00171A  2793               	addwf	___ftadd@f2& (0+255),f,b
  5775  00171C  0E00               	movlw	0
  5776  00171E  2394               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5777  001720  0E00               	movlw	0
  5778  001722  2395               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5779                           
  5780                           ; BSR set to: 0
  5781  001724  0E01               	movlw	1
  5782  001726  6F99               	movwf	___ftadd@sign& (0+255),b
  5783  001728                     l555:
  5784                           
  5785                           ; BSR set to: 0
  5786                           
  5787                           ; BSR set to: 0
  5788  001728  C093  F02E         	movff	___ftadd@f2,___ftpack@arg
  5789  00172C  C094  F02F         	movff	___ftadd@f2+1,___ftpack@arg+1
  5790  001730  C095  F030         	movff	___ftadd@f2+2,___ftpack@arg+2
  5791  001734  C09B  F031         	movff	___ftadd@exp1,___ftpack@exp
  5792  001738  C099  F032         	movff	___ftadd@sign,___ftpack@sign
  5793  00173C  ECBF  F00F         	call	___ftpack	;wreg free
  5794  001740  C02E  F090         	movff	?___ftpack,?___ftadd
  5795  001744  C02F  F091         	movff	?___ftpack+1,?___ftadd+1
  5796  001748  C030  F092         	movff	?___ftpack+2,?___ftadd+2
  5797  00174C  0012               	return	
  5798  00174E                     __end_of___ftadd:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           postinc0	equ	0xFEE
  5808                           wreg	equ	0xFE8
  5809                           indf2	equ	0xFDF
  5810                           postinc2	equ	0xFDE
  5811                           postdec2	equ	0xFDD
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function ___ftneg *****************
  5817 ;; Defined at:
  5818 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  f1              3   45[COMRAM] float 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  3   45[COMRAM] float 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5832 ;;      Params:         3       0       0       0       0       0       0
  5833 ;;      Locals:         0       0       0       0       0       0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0
  5835 ;;      Totals:         3       0       0       0       0       0       0
  5836 ;;Total ram usage:        3 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    2
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_sprintf
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text20
  5847  00254C                     __ptext20:
  5848                           	opt stack 0
  5849  00254C                     ___ftneg:
  5850                           	opt stack 26
  5851                           
  5852                           ;incstack = 0
  5853  00254C  502E               	movf	___ftneg@f1,w,c
  5854  00254E  102F               	iorwf	___ftneg@f1+1,w,c
  5855  002550  1030               	iorwf	___ftneg@f1+2,w,c
  5856  002552  B4D8               	btfsc	status,2,c
  5857  002554  D006               	goto	l603
  5858  002556  0E00               	movlw	0
  5859  002558  1A2E               	xorwf	___ftneg@f1,f,c
  5860  00255A  0E00               	movlw	0
  5861  00255C  1A2F               	xorwf	___ftneg@f1+1,f,c
  5862  00255E  0E80               	movlw	128
  5863  002560  1A30               	xorwf	___ftneg@f1+2,f,c
  5864  002562                     l603:
  5865  002562  C02E  F02E         	movff	___ftneg@f1,?___ftneg
  5866  002566  C02F  F02F         	movff	___ftneg@f1+1,?___ftneg+1
  5867  00256A  C030  F030         	movff	___ftneg@f1+2,?___ftneg+2
  5868  00256E  0012               	return		;funcret
  5869  002570                     __end_of___ftneg:
  5870                           	opt stack 0
  5871                           tblptru	equ	0xFF8
  5872                           tblptrh	equ	0xFF7
  5873                           tblptrl	equ	0xFF6
  5874                           tablat	equ	0xFF5
  5875                           prodh	equ	0xFF4
  5876                           prodl	equ	0xFF3
  5877                           intcon	equ	0xFF2
  5878                           postinc0	equ	0xFEE
  5879                           wreg	equ	0xFE8
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function ___ftge *****************
  5888 ;; Defined at:
  5889 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  ff1             3   45[COMRAM] float 
  5892 ;;  ff2             3   48[COMRAM] float 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         6       0       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0
  5906 ;;      Temps:          3       0       0       0       0       0       0
  5907 ;;      Totals:         9       0       0       0       0       0       0
  5908 ;;Total ram usage:        9 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    2
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_sprintf
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text21
  5919  00202C                     __ptext21:
  5920                           	opt stack 0
  5921  00202C                     ___ftge:
  5922                           	opt stack 26
  5923                           
  5924                           ;incstack = 0
  5925  00202C  AE30               	btfss	___ftge@ff1+2,7,c
  5926  00202E  D016               	goto	l585
  5927  002030  C02E  F034         	movff	___ftge@ff1,??___ftge
  5928  002034  C02F  F035         	movff	___ftge@ff1+1,??___ftge+1
  5929  002038  C030  F036         	movff	___ftge@ff1+2,??___ftge+2
  5930  00203C  1E34               	comf	??___ftge,f,c
  5931  00203E  1E35               	comf	??___ftge+1,f,c
  5932  002040  1E36               	comf	??___ftge+2,f,c
  5933  002042  2A34               	incf	??___ftge,f,c
  5934  002044  0E00               	movlw	0
  5935  002046  2235               	addwfc	??___ftge+1,f,c
  5936  002048  2236               	addwfc	??___ftge+2,f,c
  5937  00204A  0E00               	movlw	0
  5938  00204C  2434               	addwf	??___ftge,w,c
  5939  00204E  6E2E               	movwf	___ftge@ff1,c
  5940  002050  0E00               	movlw	0
  5941  002052  2035               	addwfc	??___ftge+1,w,c
  5942  002054  6E2F               	movwf	___ftge@ff1+1,c
  5943  002056  0E80               	movlw	128
  5944  002058  2036               	addwfc	??___ftge+2,w,c
  5945  00205A  6E30               	movwf	___ftge@ff1+2,c
  5946  00205C                     l585:
  5947  00205C  AE33               	btfss	___ftge@ff2+2,7,c
  5948  00205E  D016               	goto	l586
  5949  002060  C031  F034         	movff	___ftge@ff2,??___ftge
  5950  002064  C032  F035         	movff	___ftge@ff2+1,??___ftge+1
  5951  002068  C033  F036         	movff	___ftge@ff2+2,??___ftge+2
  5952  00206C  1E34               	comf	??___ftge,f,c
  5953  00206E  1E35               	comf	??___ftge+1,f,c
  5954  002070  1E36               	comf	??___ftge+2,f,c
  5955  002072  2A34               	incf	??___ftge,f,c
  5956  002074  0E00               	movlw	0
  5957  002076  2235               	addwfc	??___ftge+1,f,c
  5958  002078  2236               	addwfc	??___ftge+2,f,c
  5959  00207A  0E00               	movlw	0
  5960  00207C  2434               	addwf	??___ftge,w,c
  5961  00207E  6E31               	movwf	___ftge@ff2,c
  5962  002080  0E00               	movlw	0
  5963  002082  2035               	addwfc	??___ftge+1,w,c
  5964  002084  6E32               	movwf	___ftge@ff2+1,c
  5965  002086  0E80               	movlw	128
  5966  002088  2036               	addwfc	??___ftge+2,w,c
  5967  00208A  6E33               	movwf	___ftge@ff2+2,c
  5968  00208C                     l586:
  5969  00208C  0E00               	movlw	0
  5970  00208E  1A2E               	xorwf	___ftge@ff1,f,c
  5971  002090  0E00               	movlw	0
  5972  002092  1A2F               	xorwf	___ftge@ff1+1,f,c
  5973  002094  0E80               	movlw	128
  5974  002096  1A30               	xorwf	___ftge@ff1+2,f,c
  5975  002098  0E00               	movlw	0
  5976  00209A  1A31               	xorwf	___ftge@ff2,f,c
  5977  00209C  0E00               	movlw	0
  5978  00209E  1A32               	xorwf	___ftge@ff2+1,f,c
  5979  0020A0  0E80               	movlw	128
  5980  0020A2  1A33               	xorwf	___ftge@ff2+2,f,c
  5981  0020A4  5031               	movf	___ftge@ff2,w,c
  5982  0020A6  5C2E               	subwf	___ftge@ff1,w,c
  5983  0020A8  5032               	movf	___ftge@ff2+1,w,c
  5984  0020AA  582F               	subwfb	___ftge@ff1+1,w,c
  5985  0020AC  5033               	movf	___ftge@ff2+2,w,c
  5986  0020AE  5830               	subwfb	___ftge@ff1+2,w,c
  5987  0020B0  B0D8               	btfsc	status,0,c
  5988  0020B2  D002               	goto	l3169
  5989  0020B4  90D8               	bcf	status,0,c
  5990  0020B6  0012               	return	
  5991  0020B8                     l3169:
  5992  0020B8  80D8               	bsf	status,0,c
  5993  0020BA  0012               	return	
  5994  0020BC                     __end_of___ftge:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           intcon	equ	0xFF2
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _prepareForInterrupts *****************
  6013 ;; Defined at:
  6014 ;;		line 180 in file "color_1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6028 ;;      Params:         0       0       0       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0
  6031 ;;      Totals:         0       0       0       0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    2
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_main
  6039 ;;		_calcula
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text22
  6044  0025BC                     __ptext22:
  6045                           	opt stack 0
  6046  0025BC                     _prepareForInterrupts:
  6047                           	opt stack 28
  6048                           
  6049                           ;color_1.c: 184: first = true;
  6050                           
  6051                           ;color_1.c: 183: INT0IF == 0;
  6052                           
  6053                           ;incstack = 0
  6054  0025BC  0E01               	movlw	1
  6055  0025BE  6E51               	movwf	_first,c	;volatile
  6056                           
  6057                           ;color_1.c: 185: triggered = false;
  6058  0025C0  0E00               	movlw	0
  6059  0025C2  6E50               	movwf	_triggered,c	;volatile
  6060                           
  6061                           ;color_1.c: 190: INT0IE = 1;
  6062  0025C4  88F2               	bsf	intcon,4,c	;volatile
  6063                           
  6064                           ;color_1.c: 191: INTEDG0 = 1;
  6065  0025C6  8CF1               	bsf	intcon2,6,c	;volatile
  6066  0025C8  0012               	return		;funcret
  6067  0025CA                     __end_of_prepareForInterrupts:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           intcon2	equ	0xFF1
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           
  6086 ;; *************** function _lcd_msg *****************
  6087 ;; Defined at:
  6088 ;;		line 99 in file "../MyLibs/lcd4a.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  c               2   49[COMRAM] PTR unsigned char 
  6091 ;;		 -> value(8), STR_2(3), STR_1(11), 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6103 ;;      Params:         2       0       0       0       0       0       0
  6104 ;;      Locals:         0       0       0       0       0       0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0
  6106 ;;      Totals:         2       0       0       0       0       0       0
  6107 ;;Total ram usage:        2 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    5
  6110 ;; This function calls:
  6111 ;;		_lcd_putc
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;;		_calcula
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text23
  6119  0022F4                     __ptext23:
  6120                           	opt stack 0
  6121  0022F4                     _lcd_msg:
  6122                           	opt stack 25
  6123                           
  6124                           ;lcd4a.c: 101: while(*c != 0)
  6125                           
  6126                           ;incstack = 0
  6127  0022F4  D014               	goto	l121
  6128  0022F6                     
  6129                           ;lcd4a.c: 102: {
  6130                           ;lcd4a.c: 103: lcd_putc(*c++);
  6131  0022F6  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6132  0022FA  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6133  0022FE  6AF8               	clrf	tblptru,c
  6134  002300  0E05               	movlw	(high __ramtop+-1)
  6135  002302  64F7               	cpfsgt	tblptrh,c
  6136  002304  D003               	bra	u4057
  6137  002306  0008               	tblrd		*
  6138  002308  50F5               	movf	tablat,w,c
  6139  00230A  D005               	bra	u4050
  6140  00230C                     u4057:
  6141  00230C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6142  002310  CFF7 FFEA          	movff	tblptrh,fsr0h
  6143  002314  50EF               	movf	indf0,w,c
  6144  002316                     u4050:
  6145  002316  EC33  F012         	call	_lcd_putc
  6146  00231A  4A32               	infsnz	lcd_msg@c,f,c
  6147  00231C  2A33               	incf	lcd_msg@c+1,f,c
  6148  00231E                     l121:
  6149  00231E  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6150  002322  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6151  002326  6AF8               	clrf	tblptru,c
  6152  002328  0E05               	movlw	(high __ramtop+-1)
  6153  00232A  64F7               	cpfsgt	tblptrh,c
  6154  00232C  D003               	bra	u4067
  6155  00232E  0008               	tblrd		*
  6156  002330  50F5               	movf	tablat,w,c
  6157  002332  D005               	bra	u4060
  6158  002334                     u4067:
  6159  002334  CFF6 FFE9          	movff	tblptrl,fsr0l
  6160  002338  CFF7 FFEA          	movff	tblptrh,fsr0h
  6161  00233C  50EF               	movf	indf0,w,c
  6162  00233E                     u4060:
  6163  00233E  0900               	iorlw	0
  6164  002340  B4D8               	btfsc	status,2,c
  6165  002342  0012               	return	
  6166  002344  D7D8               	goto	l122
  6167  002346                     __end_of_lcd_msg:
  6168                           	opt stack 0
  6169                           tblptru	equ	0xFF8
  6170                           tblptrh	equ	0xFF7
  6171                           tblptrl	equ	0xFF6
  6172                           tablat	equ	0xFF5
  6173                           prodh	equ	0xFF4
  6174                           prodl	equ	0xFF3
  6175                           intcon	equ	0xFF2
  6176                           intcon2	equ	0xFF1
  6177                           indf0	equ	0xFEF
  6178                           postinc0	equ	0xFEE
  6179                           fsr0h	equ	0xFEA
  6180                           fsr0l	equ	0xFE9
  6181                           wreg	equ	0xFE8
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189 ;; *************** function _lcd_putc *****************
  6190 ;; Defined at:
  6191 ;;		line 64 in file "../MyLibs/lcd4a.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  c               1    wreg     unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  c               1   48[COMRAM] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6205 ;;      Params:         0       0       0       0       0       0       0
  6206 ;;      Locals:         1       0       0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0
  6208 ;;      Totals:         1       0       0       0       0       0       0
  6209 ;;Total ram usage:        1 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    4
  6212 ;; This function calls:
  6213 ;;		_lcd_cmd
  6214 ;;		_lcd_dwr
  6215 ;; This function is called by:
  6216 ;;		_lcd_msg
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text24
  6221  002466                     __ptext24:
  6222                           	opt stack 0
  6223  002466                     _lcd_putc:
  6224                           	opt stack 25
  6225                           
  6226                           ;incstack = 0
  6227                           ;lcd_putc@c stored from wreg
  6228  002466  6E31               	movwf	lcd_putc@c,c
  6229                           
  6230                           ;lcd4a.c: 66: switch(c)
  6231  002468  D010               	goto	l109
  6232  00246A                     
  6233                           ;lcd4a.c: 69: lcd_cmd(0x01);
  6234  00246A  0E01               	movlw	1
  6235  00246C  ECCA  F011         	call	_lcd_cmd
  6236                           
  6237                           ;lcd4a.c: 70: break;
  6238  002470  0012               	return	
  6239  002472                     
  6240                           ;lcd4a.c: 72: lcd_cmd(2);
  6241  002472  0E02               	movlw	2
  6242  002474  ECCA  F011         	call	_lcd_cmd
  6243                           
  6244                           ;lcd4a.c: 73: break;
  6245  002478  0012               	return	
  6246  00247A                     
  6247                           ;lcd4a.c: 75: lcd_cmd(0x10);
  6248  00247A  0E10               	movlw	16
  6249  00247C  ECCA  F011         	call	_lcd_cmd
  6250                           
  6251                           ;lcd4a.c: 76: break;
  6252  002480  0012               	return	
  6253  002482                     
  6254                           ;lcd4a.c: 78: lcd_dwr(c);
  6255  002482  5031               	movf	lcd_putc@c,w,c
  6256  002484  ECEF  F011         	call	_lcd_dwr
  6257                           
  6258                           ;lcd4a.c: 80: }
  6259                           
  6260                           ;lcd4a.c: 79: break;
  6261  002488  0012               	return	
  6262  00248A                     l109:
  6263  00248A  5031               	movf	lcd_putc@c,w,c
  6264                           
  6265                           ; Switch size 1, requested type "space"
  6266                           ; Number of cases is 3, Range of values is 8 to 12
  6267                           ; switch strategies available:
  6268                           ; Name         Instructions Cycles
  6269                           ; simple_byte           10     6 (average)
  6270                           ;	Chosen strategy is simple_byte
  6271  00248C  0A08               	xorlw	8	; case 8
  6272  00248E  B4D8               	btfsc	status,2,c
  6273  002490  D7F4               	goto	l113
  6274  002492  0A02               	xorlw	2	; case 10
  6275  002494  B4D8               	btfsc	status,2,c
  6276  002496  D7ED               	goto	l112
  6277  002498  0A06               	xorlw	6	; case 12
  6278  00249A  B4D8               	btfsc	status,2,c
  6279  00249C  D7E6               	goto	l110
  6280  00249E  D7F1               	goto	l114
  6281  0024A0                     __end_of_lcd_putc:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           intcon2	equ	0xFF1
  6291                           indf0	equ	0xFEF
  6292                           postinc0	equ	0xFEE
  6293                           fsr0h	equ	0xFEA
  6294                           fsr0l	equ	0xFE9
  6295                           wreg	equ	0xFE8
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function _lcd_dwr *****************
  6304 ;; Defined at:
  6305 ;;		line 84 in file "../MyLibs/lcd4a.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  x               1    wreg     unsigned char 
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;  x               1   47[COMRAM] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2, status,0, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6319 ;;      Params:         0       0       0       0       0       0       0
  6320 ;;      Locals:         1       0       0       0       0       0       0
  6321 ;;      Temps:          1       0       0       0       0       0       0
  6322 ;;      Totals:         2       0       0       0       0       0       0
  6323 ;;Total ram usage:        2 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    3
  6326 ;; This function calls:
  6327 ;;		_lcd_lat
  6328 ;;		_manda
  6329 ;; This function is called by:
  6330 ;;		_lcd_putc
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text25
  6335  0023DE                     __ptext25:
  6336                           	opt stack 0
  6337  0023DE                     _lcd_dwr:
  6338                           	opt stack 25
  6339                           
  6340                           ;incstack = 0
  6341                           ;lcd_dwr@x stored from wreg
  6342  0023DE  6E30               	movwf	lcd_dwr@x,c
  6343                           
  6344                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6345  0023E0  8A8C               	bsf	3980,5,c	;volatile
  6346                           
  6347                           ;lcd4a.c: 87: lcd &= 0x0F;
  6348  0023E2  0E0F               	movlw	15
  6349  0023E4  164F               	andwf	_lcd,f,c
  6350                           
  6351                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  6352  0023E6  5030               	movf	lcd_dwr@x,w,c
  6353  0023E8  0BF0               	andlw	240
  6354  0023EA  124F               	iorwf	_lcd,f,c
  6355                           
  6356                           ;lcd4a.c: 89: manda(lcd);
  6357  0023EC  504F               	movf	_lcd,w,c
  6358  0023EE  EC6A  F012         	call	_manda
  6359                           
  6360                           ;lcd4a.c: 90: lcd_lat();
  6361  0023F2  ECD4  F012         	call	_lcd_lat	;wreg free
  6362                           
  6363                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  6364  0023F6  0E04               	movlw	4
  6365  0023F8  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6366  0023FA  0EE4               	movlw	228
  6367  0023FC                     u4687:
  6368  0023FC  2EE8               	decfsz	wreg,f,c
  6369  0023FE  D7FE               	bra	u4687
  6370  002400  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6371  002402  D7FC               	bra	u4687
  6372  002404  D000               	nop2	
  6373                           
  6374                           ;lcd4a.c: 93: lcd &= 0x0F;
  6375  002406  0E0F               	movlw	15
  6376  002408  164F               	andwf	_lcd,f,c
  6377                           
  6378                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  6379  00240A  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6380  00240E  0E0F               	movlw	15
  6381  002410  162F               	andwf	??_lcd_dwr,f,c
  6382  002412  382F               	swapf	??_lcd_dwr,w,c
  6383  002414  0BF0               	andlw	240
  6384  002416  124F               	iorwf	_lcd,f,c
  6385                           
  6386                           ;lcd4a.c: 95: manda(lcd);
  6387  002418  504F               	movf	_lcd,w,c
  6388  00241A  EC6A  F012         	call	_manda
  6389                           
  6390                           ;lcd4a.c: 96: lcd_lat();
  6391  00241E  ECD4  F012         	call	_lcd_lat	;wreg free
  6392  002422  0012               	return		;funcret
  6393  002424                     __end_of_lcd_dwr:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           intcon	equ	0xFF2
  6402                           intcon2	equ	0xFF1
  6403                           indf0	equ	0xFEF
  6404                           postinc0	equ	0xFEE
  6405                           fsr0h	equ	0xFEA
  6406                           fsr0l	equ	0xFE9
  6407                           wreg	equ	0xFE8
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _lcd_gotoxy *****************
  6416 ;; Defined at:
  6417 ;;		line 112 in file "../MyLibs/lcd4a.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  x               1    wreg     unsigned char 
  6420 ;;  y               1   48[COMRAM] unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  x               1   50[COMRAM] unsigned char 
  6423 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6433 ;;      Params:         1       0       0       0       0       0       0
  6434 ;;      Locals:         2       0       0       0       0       0       0
  6435 ;;      Temps:          1       0       0       0       0       0       0
  6436 ;;      Totals:         4       0       0       0       0       0       0
  6437 ;;Total ram usage:        4 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    4
  6440 ;; This function calls:
  6441 ;;		_lcd_cmd
  6442 ;; This function is called by:
  6443 ;;		_calcula
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text26
  6448  0024A0                     __ptext26:
  6449                           	opt stack 0
  6450  0024A0                     _lcd_gotoxy:
  6451                           	opt stack 25
  6452                           
  6453                           ;incstack = 0
  6454                           ;lcd_gotoxy@x stored from wreg
  6455  0024A0  6E33               	movwf	lcd_gotoxy@x,c
  6456                           
  6457                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  6458  0024A2  0E00               	movlw	0
  6459  0024A4  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6460                           
  6461                           ;lcd4a.c: 116: switch(y)
  6462  0024A6  D005               	goto	l127
  6463  0024A8                     
  6464                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  6465  0024A8  0EC0               	movlw	192
  6466  0024AA  D001               	goto	L4
  6467  0024AC                     
  6468                           ;lcd4a.c: 125: ADDRESS = 0x80;
  6469  0024AC  0E80               	movlw	128
  6470  0024AE                     L4:
  6471  0024AE  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6472                           
  6473                           ;lcd4a.c: 128: }
  6474                           
  6475                           ;lcd4a.c: 126: break;
  6476  0024B0  D008               	goto	l129
  6477  0024B2                     l127:
  6478  0024B2  5031               	movf	lcd_gotoxy@y,w,c
  6479                           
  6480                           ; Switch size 1, requested type "space"
  6481                           ; Number of cases is 2, Range of values is 1 to 2
  6482                           ; switch strategies available:
  6483                           ; Name         Instructions Cycles
  6484                           ; simple_byte            7     4 (average)
  6485                           ;	Chosen strategy is simple_byte
  6486  0024B4  0A01               	xorlw	1	; case 1
  6487  0024B6  B4D8               	btfsc	status,2,c
  6488  0024B8  D7F9               	goto	l131
  6489  0024BA  0A03               	xorlw	3	; case 2
  6490  0024BC  B4D8               	btfsc	status,2,c
  6491  0024BE  D7F4               	goto	l130
  6492  0024C0  D7F5               	goto	l131
  6493  0024C2                     l129:
  6494                           
  6495                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6496  0024C2  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6497  0024C4  2433               	addwf	lcd_gotoxy@x,w,c
  6498  0024C6  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6499  0024C8  0432               	decf	??_lcd_gotoxy,w,c
  6500  0024CA  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6501                           
  6502                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  6503  0024CC  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6504  0024CE  ECCA  F011         	call	_lcd_cmd
  6505  0024D2  0012               	return		;funcret
  6506  0024D4                     __end_of_lcd_gotoxy:
  6507                           	opt stack 0
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           intcon2	equ	0xFF1
  6516                           indf0	equ	0xFEF
  6517                           postinc0	equ	0xFEE
  6518                           fsr0h	equ	0xFEA
  6519                           fsr0l	equ	0xFE9
  6520                           wreg	equ	0xFE8
  6521                           indf2	equ	0xFDF
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function _lcd_cmd *****************
  6529 ;; Defined at:
  6530 ;;		line 38 in file "../MyLibs/lcd4a.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  x               1    wreg     unsigned char 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  x               1   47[COMRAM] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      void 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6544 ;;      Params:         0       0       0       0       0       0       0
  6545 ;;      Locals:         1       0       0       0       0       0       0
  6546 ;;      Temps:          1       0       0       0       0       0       0
  6547 ;;      Totals:         2       0       0       0       0       0       0
  6548 ;;Total ram usage:        2 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    3
  6551 ;; This function calls:
  6552 ;;		_lcd_lat
  6553 ;;		_manda
  6554 ;; This function is called by:
  6555 ;;		_lcd_putc
  6556 ;;		_lcd_gotoxy
  6557 ;;		_lcd_init
  6558 ;;		_lcd_setcursor_vb
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text27
  6563  002394                     __ptext27:
  6564                           	opt stack 0
  6565  002394                     _lcd_cmd:
  6566                           	opt stack 25
  6567                           
  6568                           ;incstack = 0
  6569                           ;lcd_cmd@x stored from wreg
  6570  002394  6E30               	movwf	lcd_cmd@x,c
  6571                           
  6572                           ;lcd4a.c: 40: lcd = 0;
  6573  002396  0E00               	movlw	0
  6574  002398  6E4F               	movwf	_lcd,c
  6575                           
  6576                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6577  00239A  9A8C               	bcf	3980,5,c	;volatile
  6578                           
  6579                           ;lcd4a.c: 42: lcd &= 0x0F;
  6580  00239C  0E0F               	movlw	15
  6581  00239E  164F               	andwf	_lcd,f,c
  6582                           
  6583                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  6584  0023A0  5030               	movf	lcd_cmd@x,w,c
  6585  0023A2  0BF0               	andlw	240
  6586  0023A4  124F               	iorwf	_lcd,f,c
  6587                           
  6588                           ;lcd4a.c: 44: manda(lcd);
  6589  0023A6  504F               	movf	_lcd,w,c
  6590  0023A8  EC6A  F012         	call	_manda
  6591                           
  6592                           ;lcd4a.c: 45: lcd_lat();
  6593  0023AC  ECD4  F012         	call	_lcd_lat	;wreg free
  6594                           
  6595                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  6596  0023B0  0E04               	movlw	4
  6597  0023B2  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6598  0023B4  0EE4               	movlw	228
  6599  0023B6                     u4697:
  6600  0023B6  2EE8               	decfsz	wreg,f,c
  6601  0023B8  D7FE               	bra	u4697
  6602  0023BA  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6603  0023BC  D7FC               	bra	u4697
  6604  0023BE  D000               	nop2	
  6605                           
  6606                           ;lcd4a.c: 48: lcd &= 0x0F;
  6607  0023C0  0E0F               	movlw	15
  6608  0023C2  164F               	andwf	_lcd,f,c
  6609                           
  6610                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  6611  0023C4  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6612  0023C8  0E0F               	movlw	15
  6613  0023CA  162F               	andwf	??_lcd_cmd,f,c
  6614  0023CC  382F               	swapf	??_lcd_cmd,w,c
  6615  0023CE  0BF0               	andlw	240
  6616  0023D0  124F               	iorwf	_lcd,f,c
  6617                           
  6618                           ;lcd4a.c: 50: manda(lcd);
  6619  0023D2  504F               	movf	_lcd,w,c
  6620  0023D4  EC6A  F012         	call	_manda
  6621                           
  6622                           ;lcd4a.c: 51: lcd_lat();
  6623  0023D8  ECD4  F012         	call	_lcd_lat	;wreg free
  6624  0023DC  0012               	return		;funcret
  6625  0023DE                     __end_of_lcd_cmd:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon2	equ	0xFF1
  6635                           indf0	equ	0xFEF
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           indf2	equ	0xFDF
  6641                           postinc2	equ	0xFDE
  6642                           postdec2	equ	0xFDD
  6643                           fsr2h	equ	0xFDA
  6644                           fsr2l	equ	0xFD9
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _manda *****************
  6648 ;; Defined at:
  6649 ;;		line 171 in file "../MyLibs/lcd4a.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  dato            1    wreg     unsigned char 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  dato            1   45[COMRAM] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6663 ;;      Params:         0       0       0       0       0       0       0
  6664 ;;      Locals:         1       0       0       0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0
  6666 ;;      Totals:         1       0       0       0       0       0       0
  6667 ;;Total ram usage:        1 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    2
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_lcd_cmd
  6674 ;;		_lcd_cmd_hf
  6675 ;;		_lcd_dwr
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text28
  6680  0024D4                     __ptext28:
  6681                           	opt stack 0
  6682  0024D4                     _manda:
  6683                           	opt stack 25
  6684                           
  6685                           ;incstack = 0
  6686                           ;manda@dato stored from wreg
  6687  0024D4  6E2E               	movwf	manda@dato,c
  6688                           
  6689                           ;lcd4a.c: 173: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6690  0024D6  A82E               	btfss	manda@dato,4,c
  6691  0024D8  D002               	goto	l138
  6692  0024DA  888A               	bsf	3978,4,c	;volatile
  6693  0024DC  D001               	goto	l139
  6694  0024DE                     l138:
  6695                           
  6696                           ;lcd4a.c: 174: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6697  0024DE  988A               	bcf	3978,4,c	;volatile
  6698  0024E0                     l139:
  6699                           
  6700                           ;lcd4a.c: 175: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6701  0024E0  AA2E               	btfss	manda@dato,5,c
  6702  0024E2  D002               	goto	l140
  6703  0024E4  8A8A               	bsf	3978,5,c	;volatile
  6704  0024E6  D001               	goto	l141
  6705  0024E8                     l140:
  6706                           
  6707                           ;lcd4a.c: 176: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6708  0024E8  9A8A               	bcf	3978,5,c	;volatile
  6709  0024EA                     l141:
  6710                           
  6711                           ;lcd4a.c: 177: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6712  0024EA  AC2E               	btfss	manda@dato,6,c
  6713  0024EC  D002               	goto	l142
  6714  0024EE  8C8A               	bsf	3978,6,c	;volatile
  6715  0024F0  D001               	goto	l143
  6716  0024F2                     l142:
  6717                           
  6718                           ;lcd4a.c: 178: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6719  0024F2  9C8A               	bcf	3978,6,c	;volatile
  6720  0024F4                     l143:
  6721                           
  6722                           ;lcd4a.c: 179: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6723  0024F4  AE2E               	btfss	manda@dato,7,c
  6724  0024F6  D002               	goto	l144
  6725  0024F8  8E8A               	bsf	3978,7,c	;volatile
  6726  0024FA  0012               	return	
  6727  0024FC                     l144:
  6728                           
  6729                           ;lcd4a.c: 180: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6730  0024FC  9E8A               	bcf	3978,7,c	;volatile
  6731  0024FE  0012               	return	
  6732  002500                     __end_of_manda:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           intcon2	equ	0xFF1
  6742                           indf0	equ	0xFEF
  6743                           postinc0	equ	0xFEE
  6744                           fsr0h	equ	0xFEA
  6745                           fsr0l	equ	0xFE9
  6746                           wreg	equ	0xFE8
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _lcd_lat *****************
  6755 ;; Defined at:
  6756 ;;		line 27 in file "../MyLibs/lcd4a.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6770 ;;      Params:         0       0       0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0
  6772 ;;      Temps:          1       0       0       0       0       0       0
  6773 ;;      Totals:         1       0       0       0       0       0       0
  6774 ;;Total ram usage:        1 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    2
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_lcd_cmd
  6781 ;;		_lcd_cmd_hf
  6782 ;;		_lcd_dwr
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text29
  6787  0025A8                     __ptext29:
  6788                           	opt stack 0
  6789  0025A8                     _lcd_lat:
  6790                           	opt stack 25
  6791                           
  6792                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  6793                           
  6794                           ;incstack = 0
  6795  0025A8  8E8C               	bsf	3980,7,c	;volatile
  6796                           
  6797                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  6798  0025AA  0E03               	movlw	3
  6799  0025AC  6E2E               	movwf	??_lcd_lat& (0+255),c
  6800  0025AE  0E98               	movlw	152
  6801  0025B0                     u4707:
  6802  0025B0  2EE8               	decfsz	wreg,f,c
  6803  0025B2  D7FE               	bra	u4707
  6804  0025B4  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  6805  0025B6  D7FC               	bra	u4707
  6806                           
  6807                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  6808  0025B8  9E8C               	bcf	3980,7,c	;volatile
  6809  0025BA  0012               	return		;funcret
  6810  0025BC                     __end_of_lcd_lat:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           intcon	equ	0xFF2
  6819                           intcon2	equ	0xFF1
  6820                           indf0	equ	0xFEF
  6821                           postinc0	equ	0xFEE
  6822                           fsr0h	equ	0xFEA
  6823                           fsr0l	equ	0xFE9
  6824                           wreg	equ	0xFE8
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function ___ftdiv *****************
  6833 ;; Defined at:
  6834 ;;		line 54 in file "/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  f1              3   53[COMRAM] float 
  6837 ;;  f2              3   56[COMRAM] float 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  f3              3   63[COMRAM] float 
  6840 ;;  sign            1   67[COMRAM] unsigned char 
  6841 ;;  exp             1   66[COMRAM] unsigned char 
  6842 ;;  cntr            1   62[COMRAM] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  3   53[COMRAM] float 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6852 ;;      Params:         6       0       0       0       0       0       0
  6853 ;;      Locals:         6       0       0       0       0       0       0
  6854 ;;      Temps:          3       0       0       0       0       0       0
  6855 ;;      Totals:        15       0       0       0       0       0       0
  6856 ;;Total ram usage:       15 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    3
  6859 ;; This function calls:
  6860 ;;		___ftpack
  6861 ;; This function is called by:
  6862 ;;		_calcula
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text30
  6867  001DDE                     __ptext30:
  6868                           	opt stack 0
  6869  001DDE                     ___ftdiv:
  6870                           	opt stack 26
  6871                           
  6872                           ;incstack = 0
  6873  001DDE  C038  F03C         	movff	___ftdiv@f1+2,??___ftdiv
  6874  001DE2  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  6875  001DE4  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  6876  001DE6  3437               	rlcf	___ftdiv@f1+1,w,c
  6877  001DE8  363C               	rlcf	??___ftdiv& (0+255),f,c
  6878  001DEA  E301               	bnc	u4531
  6879  001DEC  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6880  001DEE                     u4531:
  6881  001DEE  503C               	movf	??___ftdiv,w,c
  6882  001DF0  6E43               	movwf	___ftdiv@exp,c
  6883  001DF2  5043               	movf	___ftdiv@exp,w,c
  6884  001DF4  A4D8               	btfss	status,2,c
  6885  001DF6  D007               	goto	l560
  6886  001DF8  0E00               	movlw	0
  6887  001DFA  6E36               	movwf	?___ftdiv,c
  6888  001DFC  0E00               	movlw	0
  6889  001DFE  6E37               	movwf	?___ftdiv+1,c
  6890  001E00  0E00               	movlw	0
  6891  001E02  6E38               	movwf	?___ftdiv+2,c
  6892  001E04  0012               	return	
  6893  001E06                     l560:
  6894  001E06  C03B  F03C         	movff	___ftdiv@f2+2,??___ftdiv
  6895  001E0A  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  6896  001E0C  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  6897  001E0E  343A               	rlcf	___ftdiv@f2+1,w,c
  6898  001E10  363C               	rlcf	??___ftdiv& (0+255),f,c
  6899  001E12  E301               	bnc	u4551
  6900  001E14  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6901  001E16                     u4551:
  6902  001E16  503C               	movf	??___ftdiv,w,c
  6903  001E18  6E44               	movwf	___ftdiv@sign,c
  6904  001E1A  5044               	movf	___ftdiv@sign,w,c
  6905  001E1C  A4D8               	btfss	status,2,c
  6906  001E1E  D007               	goto	l562
  6907  001E20  0E00               	movlw	0
  6908  001E22  6E36               	movwf	?___ftdiv,c
  6909  001E24  0E00               	movlw	0
  6910  001E26  6E37               	movwf	?___ftdiv+1,c
  6911  001E28  0E00               	movlw	0
  6912  001E2A  6E38               	movwf	?___ftdiv+2,c
  6913  001E2C  0012               	return	
  6914  001E2E                     l562:
  6915  001E2E  0E00               	movlw	0
  6916  001E30  6E40               	movwf	___ftdiv@f3,c
  6917  001E32  0E00               	movlw	0
  6918  001E34  6E41               	movwf	___ftdiv@f3+1,c
  6919  001E36  0E00               	movlw	0
  6920  001E38  6E42               	movwf	___ftdiv@f3+2,c
  6921  001E3A  5044               	movf	___ftdiv@sign,w,c
  6922  001E3C  0F89               	addlw	137
  6923  001E3E  5E43               	subwf	___ftdiv@exp,f,c
  6924  001E40  C038  F044         	movff	___ftdiv@f1+2,___ftdiv@sign
  6925  001E44  503B               	movf	___ftdiv@f2+2,w,c
  6926  001E46  1A44               	xorwf	___ftdiv@sign,f,c
  6927  001E48  0E80               	movlw	128
  6928  001E4A  1644               	andwf	___ftdiv@sign,f,c
  6929  001E4C  8E37               	bsf	___ftdiv@f1+1,7,c
  6930  001E4E  0EFF               	movlw	255
  6931  001E50  1636               	andwf	___ftdiv@f1,f,c
  6932  001E52  0EFF               	movlw	255
  6933  001E54  1637               	andwf	___ftdiv@f1+1,f,c
  6934  001E56  0E00               	movlw	0
  6935  001E58  1638               	andwf	___ftdiv@f1+2,f,c
  6936  001E5A  8E3A               	bsf	___ftdiv@f2+1,7,c
  6937  001E5C  0EFF               	movlw	255
  6938  001E5E  1639               	andwf	___ftdiv@f2,f,c
  6939  001E60  0EFF               	movlw	255
  6940  001E62  163A               	andwf	___ftdiv@f2+1,f,c
  6941  001E64  0E00               	movlw	0
  6942  001E66  163B               	andwf	___ftdiv@f2+2,f,c
  6943  001E68  0E18               	movlw	24
  6944  001E6A  6E3F               	movwf	___ftdiv@cntr,c
  6945  001E6C  90D8               	bcf	status,0,c
  6946  001E6E  3640               	rlcf	___ftdiv@f3,f,c
  6947  001E70  3641               	rlcf	___ftdiv@f3+1,f,c
  6948  001E72  3642               	rlcf	___ftdiv@f3+2,f,c
  6949  001E74  5039               	movf	___ftdiv@f2,w,c
  6950  001E76  5C36               	subwf	___ftdiv@f1,w,c
  6951  001E78  503A               	movf	___ftdiv@f2+1,w,c
  6952  001E7A  5837               	subwfb	___ftdiv@f1+1,w,c
  6953  001E7C  503B               	movf	___ftdiv@f2+2,w,c
  6954  001E7E  5838               	subwfb	___ftdiv@f1+2,w,c
  6955  001E80  A0D8               	btfss	status,0,c
  6956  001E82  D007               	goto	l564
  6957  001E84  5039               	movf	___ftdiv@f2,w,c
  6958  001E86  5E36               	subwf	___ftdiv@f1,f,c
  6959  001E88  503A               	movf	___ftdiv@f2+1,w,c
  6960  001E8A  5A37               	subwfb	___ftdiv@f1+1,f,c
  6961  001E8C  503B               	movf	___ftdiv@f2+2,w,c
  6962  001E8E  5A38               	subwfb	___ftdiv@f1+2,f,c
  6963  001E90  8040               	bsf	___ftdiv@f3,0,c
  6964  001E92                     l564:
  6965  001E92  90D8               	bcf	status,0,c
  6966  001E94  3636               	rlcf	___ftdiv@f1,f,c
  6967  001E96  3637               	rlcf	___ftdiv@f1+1,f,c
  6968  001E98  3638               	rlcf	___ftdiv@f1+2,f,c
  6969  001E9A  2E3F               	decfsz	___ftdiv@cntr,f,c
  6970  001E9C  D7E7               	goto	l563
  6971  001E9E  C040  F02E         	movff	___ftdiv@f3,___ftpack@arg
  6972  001EA2  C041  F02F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6973  001EA6  C042  F030         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6974  001EAA  C043  F031         	movff	___ftdiv@exp,___ftpack@exp
  6975  001EAE  C044  F032         	movff	___ftdiv@sign,___ftpack@sign
  6976  001EB2  ECBF  F00F         	call	___ftpack	;wreg free
  6977  001EB6  C02E  F036         	movff	?___ftpack,?___ftdiv
  6978  001EBA  C02F  F037         	movff	?___ftpack+1,?___ftdiv+1
  6979  001EBE  C030  F038         	movff	?___ftpack+2,?___ftdiv+2
  6980  001EC2  0012               	return	
  6981  001EC4                     __end_of___ftdiv:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           intcon2	equ	0xFF1
  6991                           indf0	equ	0xFEF
  6992                           postinc0	equ	0xFEE
  6993                           fsr0h	equ	0xFEA
  6994                           fsr0l	equ	0xFE9
  6995                           wreg	equ	0xFE8
  6996                           indf2	equ	0xFDF
  6997                           postinc2	equ	0xFDE
  6998                           postdec2	equ	0xFDD
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function ___ftpack *****************
  7004 ;; Defined at:
  7005 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  arg             3   45[COMRAM] unsigned um
  7008 ;;  exp             1   48[COMRAM] unsigned char 
  7009 ;;  sign            1   49[COMRAM] unsigned char 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  3   45[COMRAM] float 
  7014 ;; Registers used:
  7015 ;;		wreg, status,2, status,0
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7021 ;;      Params:         5       0       0       0       0       0       0
  7022 ;;      Locals:         0       0       0       0       0       0       0
  7023 ;;      Temps:          3       0       0       0       0       0       0
  7024 ;;      Totals:         8       0       0       0       0       0       0
  7025 ;;Total ram usage:        8 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    2
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		___ftadd
  7032 ;;		___ftdiv
  7033 ;;		___ftmul
  7034 ;;		___lltoft
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text31
  7039  001F7E                     __ptext31:
  7040                           	opt stack 0
  7041  001F7E                     ___ftpack:
  7042                           	opt stack 24
  7043                           
  7044                           ;incstack = 0
  7045  001F7E  5031               	movf	___ftpack@exp,w,c
  7046  001F80  B4D8               	btfsc	status,2,c
  7047  001F82  D005               	goto	u3140
  7048  001F84  502E               	movf	___ftpack@arg,w,c
  7049  001F86  102F               	iorwf	___ftpack@arg+1,w,c
  7050  001F88  1030               	iorwf	___ftpack@arg+2,w,c
  7051  001F8A  A4D8               	btfss	status,2,c
  7052  001F8C  D00C               	goto	l496
  7053  001F8E                     u3140:
  7054  001F8E  0E00               	movlw	0
  7055  001F90  6E2E               	movwf	?___ftpack,c
  7056  001F92  0E00               	movlw	0
  7057  001F94  6E2F               	movwf	?___ftpack+1,c
  7058  001F96  0E00               	movlw	0
  7059  001F98  6E30               	movwf	?___ftpack+2,c
  7060  001F9A  0012               	return	
  7061  001F9C  2A31               	incf	___ftpack@exp,f,c
  7062  001F9E  90D8               	bcf	status,0,c
  7063  001FA0  3230               	rrcf	___ftpack@arg+2,f,c
  7064  001FA2  322F               	rrcf	___ftpack@arg+1,f,c
  7065  001FA4  322E               	rrcf	___ftpack@arg,f,c
  7066  001FA6                     l496:
  7067  001FA6  0E00               	movlw	0
  7068  001FA8  142E               	andwf	___ftpack@arg,w,c
  7069  001FAA  6E33               	movwf	??___ftpack& (0+255),c
  7070  001FAC  0E00               	movlw	0
  7071  001FAE  142F               	andwf	___ftpack@arg+1,w,c
  7072  001FB0  6E34               	movwf	(??___ftpack+1)& (0+255),c
  7073  001FB2  0EFE               	movlw	254
  7074  001FB4  1430               	andwf	___ftpack@arg+2,w,c
  7075  001FB6  6E35               	movwf	(??___ftpack+2)& (0+255),c
  7076  001FB8  5033               	movf	??___ftpack,w,c
  7077  001FBA  1034               	iorwf	??___ftpack+1,w,c
  7078  001FBC  1035               	iorwf	??___ftpack+2,w,c
  7079  001FBE  B4D8               	btfsc	status,2,c
  7080  001FC0  D00C               	goto	l499
  7081  001FC2  D7EC               	goto	l497
  7082  001FC4  2A31               	incf	___ftpack@exp,f,c
  7083  001FC6  0E01               	movlw	1
  7084  001FC8  262E               	addwf	___ftpack@arg,f,c
  7085  001FCA  0E00               	movlw	0
  7086  001FCC  222F               	addwfc	___ftpack@arg+1,f,c
  7087  001FCE  0E00               	movlw	0
  7088  001FD0  2230               	addwfc	___ftpack@arg+2,f,c
  7089  001FD2  90D8               	bcf	status,0,c
  7090  001FD4  3230               	rrcf	___ftpack@arg+2,f,c
  7091  001FD6  322F               	rrcf	___ftpack@arg+1,f,c
  7092  001FD8  322E               	rrcf	___ftpack@arg,f,c
  7093  001FDA                     l499:
  7094  001FDA  0E00               	movlw	0
  7095  001FDC  142E               	andwf	___ftpack@arg,w,c
  7096  001FDE  6E33               	movwf	??___ftpack& (0+255),c
  7097  001FE0  0E00               	movlw	0
  7098  001FE2  142F               	andwf	___ftpack@arg+1,w,c
  7099  001FE4  6E34               	movwf	(??___ftpack+1)& (0+255),c
  7100  001FE6  0EFF               	movlw	255
  7101  001FE8  1430               	andwf	___ftpack@arg+2,w,c
  7102  001FEA  6E35               	movwf	(??___ftpack+2)& (0+255),c
  7103  001FEC  5033               	movf	??___ftpack,w,c
  7104  001FEE  1034               	iorwf	??___ftpack+1,w,c
  7105  001FF0  1035               	iorwf	??___ftpack+2,w,c
  7106  001FF2  B4D8               	btfsc	status,2,c
  7107  001FF4  D006               	goto	l502
  7108  001FF6  D7E6               	goto	l500
  7109  001FF8  0631               	decf	___ftpack@exp,f,c
  7110  001FFA  90D8               	bcf	status,0,c
  7111  001FFC  362E               	rlcf	___ftpack@arg,f,c
  7112  001FFE  362F               	rlcf	___ftpack@arg+1,f,c
  7113  002000  3630               	rlcf	___ftpack@arg+2,f,c
  7114  002002                     l502:
  7115  002002  BE2F               	btfsc	___ftpack@arg+1,7,c
  7116  002004  D003               	goto	u3180
  7117  002006  0E02               	movlw	2
  7118  002008  6031               	cpfslt	___ftpack@exp,c
  7119  00200A  D7F6               	goto	l503
  7120  00200C                     u3180:
  7121  00200C  A031               	btfss	___ftpack@exp,0,c
  7122  00200E  9E2F               	bcf	___ftpack@arg+1,7,c
  7123  002010  90D8               	bcf	status,0,c
  7124  002012  3231               	rrcf	___ftpack@exp,f,c
  7125  002014  5031               	movf	___ftpack@exp,w,c
  7126  002016  1230               	iorwf	___ftpack@arg+2,f,c
  7127  002018  5032               	movf	___ftpack@sign,w,c
  7128  00201A  A4D8               	btfss	status,2,c
  7129  00201C  8E30               	bsf	___ftpack@arg+2,7,c
  7130  00201E  C02E  F02E         	movff	___ftpack@arg,?___ftpack
  7131  002022  C02F  F02F         	movff	___ftpack@arg+1,?___ftpack+1
  7132  002026  C030  F030         	movff	___ftpack@arg+2,?___ftpack+2
  7133  00202A  0012               	return	
  7134  00202C                     __end_of___ftpack:
  7135                           	opt stack 0
  7136                           tblptru	equ	0xFF8
  7137                           tblptrh	equ	0xFF7
  7138                           tblptrl	equ	0xFF6
  7139                           tablat	equ	0xFF5
  7140                           prodh	equ	0xFF4
  7141                           prodl	equ	0xFF3
  7142                           intcon	equ	0xFF2
  7143                           intcon2	equ	0xFF1
  7144                           indf0	equ	0xFEF
  7145                           postinc0	equ	0xFEE
  7146                           fsr0h	equ	0xFEA
  7147                           fsr0l	equ	0xFE9
  7148                           wreg	equ	0xFE8
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _low_isr *****************
  7157 ;; Defined at:
  7158 ;;		line 70 in file "color_1.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7172 ;;      Params:         0       0       0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0
  7174 ;;      Temps:         21       0       0       0       0       0       0
  7175 ;;      Totals:        21       0       0       0       0       0       0
  7176 ;;Total ram usage:       21 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    1
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		Interrupt level 1
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	intcodelo
  7187  000018                     __pintcodelo:
  7188                           	opt stack 0
  7189  000018                     _low_isr:
  7190                           	opt stack 24
  7191                           
  7192                           ;incstack = 0
  7193  000018  8052               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7194  00001A  CFD8 F019          	movff	status,??_low_isr
  7195  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  7196  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  7197  000026  CFFA F01C          	movff	pclath,??_low_isr+3
  7198  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
  7199  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
  7200  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
  7201  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
  7202  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
  7203  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
  7204  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
  7205  000046  CFF3 F024          	movff	prodl,??_low_isr+11
  7206  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
  7207  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
  7208  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
  7209  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
  7210  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
  7211  00005E  C052  F02A         	movff	btemp,??_low_isr+17
  7212  000062  C053  F02B         	movff	btemp+1,??_low_isr+18
  7213  000066  C054  F02C         	movff	btemp+2,??_low_isr+19
  7214  00006A  C055  F02D         	movff	btemp+3,??_low_isr+20
  7215                           
  7216                           ;color_1.c: 72: if(TMR1IF == 1)
  7217  00006E  A09E               	btfss	3998,0,c	;volatile
  7218  000070  D007               	goto	i1l1991
  7219                           
  7220                           ;color_1.c: 73: {
  7221                           ;color_1.c: 74: overflowCount++;
  7222  000072  0E01               	movlw	1
  7223  000074  264B               	addwf	_overflowCount,f,c	;volatile
  7224  000076  0E00               	movlw	0
  7225  000078  224C               	addwfc	_overflowCount+1,f,c	;volatile
  7226  00007A  224D               	addwfc	_overflowCount+2,f,c	;volatile
  7227  00007C  224E               	addwfc	_overflowCount+3,f,c	;volatile
  7228                           
  7229                           ;color_1.c: 75: TMR1IF =0;
  7230  00007E  909E               	bcf	3998,0,c	;volatile
  7231  000080                     i1l1991:
  7232                           
  7233                           ;color_1.c: 76: return;
  7234  000080  C02D  F055         	movff	??_low_isr+20,btemp+3
  7235  000084  C02C  F054         	movff	??_low_isr+19,btemp+2
  7236  000088  C02B  F053         	movff	??_low_isr+18,btemp+1
  7237  00008C  C02A  F052         	movff	??_low_isr+17,btemp
  7238  000090  C029  FFF5         	movff	??_low_isr+16,tablat
  7239  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
  7240  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
  7241  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
  7242  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
  7243  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
  7244  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
  7245  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
  7246  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
  7247  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
  7248  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
  7249  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
  7250  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
  7251  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
  7252  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
  7253  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
  7254  0000D0  C019  FFD8         	movff	??_low_isr,status
  7255  0000D4  9052               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7256  0000D6  0010               	retfie	
  7257  0000D8                     __end_of_low_isr:
  7258                           	opt stack 0
  7259                           pclatu	equ	0xFFB
  7260                           pclath	equ	0xFFA
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           intcon2	equ	0xFF1
  7269                           indf0	equ	0xFEF
  7270                           postinc0	equ	0xFEE
  7271                           fsr0h	equ	0xFEA
  7272                           fsr0l	equ	0xFE9
  7273                           wreg	equ	0xFE8
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           bsr	equ	0xFE0
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _high_isr *****************
  7285 ;; Defined at:
  7286 ;;		line 80 in file "color_1.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  counter         2   22[COMRAM] unsigned int 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      void 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2, status,0
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7300 ;;      Params:         0       0       0       0       0       0       0
  7301 ;;      Locals:         2       0       0       0       0       0       0
  7302 ;;      Temps:         22       0       0       0       0       0       0
  7303 ;;      Totals:        24       0       0       0       0       0       0
  7304 ;;Total ram usage:       24 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		Interrupt level 2
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	intcode
  7314  000008                     __pintcode:
  7315                           	opt stack 0
  7316  000008                     _high_isr:
  7317                           	opt stack 24
  7318                           
  7319                           ;incstack = 0
  7320  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7321  00000A  EDD4  F00C         	call	int_func,f	;refresh shadow registers
  7322                           pclatu	equ	0xFFB
  7323                           pclath	equ	0xFFA
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           intcon	equ	0xFF2
  7331                           intcon2	equ	0xFF1
  7332                           indf0	equ	0xFEF
  7333                           postinc0	equ	0xFEE
  7334                           fsr0h	equ	0xFEA
  7335                           fsr0l	equ	0xFE9
  7336                           wreg	equ	0xFE8
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           bsr	equ	0xFE0
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347                           	psect	intcode_body
  7348  0019A8                     __pintcode_body:
  7349                           	opt stack 24
  7350  0019A8                     int_func:
  7351                           	opt stack 24
  7352  0019A8  0006               	pop		; remove dummy address from shadow register refresh
  7353  0019AA  CFFA F005          	movff	pclath,??_high_isr+4
  7354  0019AE  CFFB F006          	movff	pclatu,??_high_isr+5
  7355  0019B2  CFE9 F007          	movff	fsr0l,??_high_isr+6
  7356  0019B6  CFEA F008          	movff	fsr0h,??_high_isr+7
  7357  0019BA  CFE1 F009          	movff	fsr1l,??_high_isr+8
  7358  0019BE  CFE2 F00A          	movff	fsr1h,??_high_isr+9
  7359  0019C2  CFD9 F00B          	movff	fsr2l,??_high_isr+10
  7360  0019C6  CFDA F00C          	movff	fsr2h,??_high_isr+11
  7361  0019CA  CFF3 F00D          	movff	prodl,??_high_isr+12
  7362  0019CE  CFF4 F00E          	movff	prodh,??_high_isr+13
  7363  0019D2  CFF6 F00F          	movff	tblptrl,??_high_isr+14
  7364  0019D6  CFF7 F010          	movff	tblptrh,??_high_isr+15
  7365  0019DA  CFF8 F011          	movff	tblptru,??_high_isr+16
  7366  0019DE  CFF5 F012          	movff	tablat,??_high_isr+17
  7367  0019E2  C052  F013         	movff	btemp,??_high_isr+18
  7368  0019E6  C053  F014         	movff	btemp+1,??_high_isr+19
  7369  0019EA  C054  F015         	movff	btemp+2,??_high_isr+20
  7370  0019EE  C055  F016         	movff	btemp+3,??_high_isr+21
  7371                           
  7372                           ;color_1.c: 83: if(INT0IF == 1)
  7373  0019F2  A2F2               	btfss	intcon,1,c	;volatile
  7374  0019F4  D046               	goto	i2l3133
  7375                           
  7376                           ;color_1.c: 84: {
  7377                           ;color_1.c: 85: unsigned int counter = TMR1;
  7378  0019F6  CFCE F017          	movff	4046,high_isr@counter	;volatile
  7379  0019FA  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
  7380                           
  7381                           ;color_1.c: 88: if (triggered)
  7382  0019FE  5050               	movf	_triggered,w,c	;volatile
  7383  001A00  A4D8               	btfss	status,2,c
  7384  001A02  D03E               	goto	i2l3131
  7385                           
  7386                           ;color_1.c: 92: }
  7387                           ;color_1.c: 94: if (first)
  7388                           
  7389                           ;color_1.c: 91: return;
  7390                           
  7391                           ;color_1.c: 89: {
  7392                           ;color_1.c: 90: INT0IF = 0;
  7393  001A04  5051               	movf	_first,w,c	;volatile
  7394  001A06  B4D8               	btfsc	status,2,c
  7395  001A08  D01E               	goto	i2l70
  7396                           
  7397                           ;color_1.c: 95: {
  7398                           ;color_1.c: 96: startTime = (overflowCount << 16) + counter;
  7399  001A0A  C04B  F001         	movff	_overflowCount,??_high_isr	;volatile
  7400  001A0E  C04C  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  7401  001A12  C04D  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  7402  001A16  C04E  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  7403  001A1A  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  7404  001A1E  C001  F003         	movff	??_high_isr,??_high_isr+2
  7405  001A22  6A02               	clrf	??_high_isr+1,c
  7406  001A24  6A01               	clrf	??_high_isr,c
  7407  001A26  5017               	movf	high_isr@counter,w,c
  7408  001A28  2401               	addwf	??_high_isr,w,c
  7409  001A2A  0100               	movlb	0	; () banked
  7410  001A2C  6FDD               	movwf	_startTime& (0+255),b	;volatile
  7411  001A2E  5018               	movf	high_isr@counter+1,w,c
  7412  001A30  2002               	addwfc	??_high_isr+1,w,c
  7413  001A32  6FDE               	movwf	(_startTime+1)& (0+255),b	;volatile
  7414  001A34  0E00               	movlw	0
  7415  001A36  2003               	addwfc	??_high_isr+2,w,c
  7416  001A38  6FDF               	movwf	(_startTime+2)& (0+255),b	;volatile
  7417  001A3A  0E00               	movlw	0
  7418  001A3C  2004               	addwfc	??_high_isr+3,w,c
  7419  001A3E  6FE0               	movwf	(_startTime+3)& (0+255),b	;volatile
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;color_1.c: 97: first = false;
  7423  001A40  0E00               	movlw	0
  7424  001A42  6E51               	movwf	_first,c	;volatile
  7425  001A44  D01D               	goto	i2l3131
  7426  001A46                     i2l70:
  7427                           
  7428                           ;color_1.c: 100: }
  7429                           ;color_1.c: 102: finishTime = (overflowCount << 16) + counter;
  7430                           
  7431                           ; BSR set to: 0
  7432  001A46  C04B  F001         	movff	_overflowCount,??_high_isr	;volatile
  7433  001A4A  C04C  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  7434  001A4E  C04D  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  7435  001A52  C04E  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  7436  001A56  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  7437  001A5A  C001  F003         	movff	??_high_isr,??_high_isr+2
  7438  001A5E  6A02               	clrf	??_high_isr+1,c
  7439  001A60  6A01               	clrf	??_high_isr,c
  7440  001A62  5017               	movf	high_isr@counter,w,c
  7441  001A64  2401               	addwf	??_high_isr,w,c
  7442  001A66  0100               	movlb	0	; () banked
  7443  001A68  6FD9               	movwf	_finishTime& (0+255),b	;volatile
  7444  001A6A  5018               	movf	high_isr@counter+1,w,c
  7445  001A6C  2002               	addwfc	??_high_isr+1,w,c
  7446  001A6E  6FDA               	movwf	(_finishTime+1)& (0+255),b	;volatile
  7447  001A70  0E00               	movlw	0
  7448  001A72  2003               	addwfc	??_high_isr+2,w,c
  7449  001A74  6FDB               	movwf	(_finishTime+2)& (0+255),b	;volatile
  7450  001A76  0E00               	movlw	0
  7451  001A78  2004               	addwfc	??_high_isr+3,w,c
  7452  001A7A  6FDC               	movwf	(_finishTime+3)& (0+255),b	;volatile
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;color_1.c: 103: triggered = true;
  7456  001A7C  0E01               	movlw	1
  7457  001A7E  6E50               	movwf	_triggered,c	;volatile
  7458  001A80                     i2l3131:
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;color_1.c: 104: INT0IF = 0;
  7462  001A80  92F2               	bcf	intcon,1,c	;volatile
  7463  001A82                     i2l3133:
  7464                           
  7465                           ; BSR set to: 0
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;color_1.c: 105: return;
  7469  001A82  C016  F055         	movff	??_high_isr+21,btemp+3
  7470  001A86  C015  F054         	movff	??_high_isr+20,btemp+2
  7471  001A8A  C014  F053         	movff	??_high_isr+19,btemp+1
  7472  001A8E  C013  F052         	movff	??_high_isr+18,btemp
  7473  001A92  C012  FFF5         	movff	??_high_isr+17,tablat
  7474  001A96  C011  FFF8         	movff	??_high_isr+16,tblptru
  7475  001A9A  C010  FFF7         	movff	??_high_isr+15,tblptrh
  7476  001A9E  C00F  FFF6         	movff	??_high_isr+14,tblptrl
  7477  001AA2  C00E  FFF4         	movff	??_high_isr+13,prodh
  7478  001AA6  C00D  FFF3         	movff	??_high_isr+12,prodl
  7479  001AAA  C00C  FFDA         	movff	??_high_isr+11,fsr2h
  7480  001AAE  C00B  FFD9         	movff	??_high_isr+10,fsr2l
  7481  001AB2  C00A  FFE2         	movff	??_high_isr+9,fsr1h
  7482  001AB6  C009  FFE1         	movff	??_high_isr+8,fsr1l
  7483  001ABA  C008  FFEA         	movff	??_high_isr+7,fsr0h
  7484  001ABE  C007  FFE9         	movff	??_high_isr+6,fsr0l
  7485  001AC2  C006  FFFB         	movff	??_high_isr+5,pclatu
  7486  001AC6  C005  FFFA         	movff	??_high_isr+4,pclath
  7487  001ACA  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7488  001ACC  0011               	retfie		f
  7489  001ACE                     __end_of_high_isr:
  7490                           	opt stack 0
  7491                           pclatu	equ	0xFFB
  7492                           pclath	equ	0xFFA
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           prodh	equ	0xFF4
  7498                           prodl	equ	0xFF3
  7499                           intcon	equ	0xFF2
  7500                           intcon2	equ	0xFF1
  7501                           indf0	equ	0xFEF
  7502                           postinc0	equ	0xFEE
  7503                           fsr0h	equ	0xFEA
  7504                           fsr0l	equ	0xFE9
  7505                           wreg	equ	0xFE8
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           bsr	equ	0xFE0
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           pclatu	equ	0xFFB
  7516                           pclath	equ	0xFFA
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           intcon2	equ	0xFF1
  7525                           indf0	equ	0xFEF
  7526                           postinc0	equ	0xFEE
  7527                           fsr0h	equ	0xFEA
  7528                           fsr0l	equ	0xFE9
  7529                           wreg	equ	0xFE8
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           bsr	equ	0xFE0
  7533                           indf2	equ	0xFDF
  7534                           postinc2	equ	0xFDE
  7535                           postdec2	equ	0xFDD
  7536                           fsr2h	equ	0xFDA
  7537                           fsr2l	equ	0xFD9
  7538                           status	equ	0xFD8
  7539                           
  7540                           	psect	rparam
  7541  0000                     pclatu	equ	0xFFB
  7542                           pclath	equ	0xFFA
  7543                           tblptru	equ	0xFF8
  7544                           tblptrh	equ	0xFF7
  7545                           tblptrl	equ	0xFF6
  7546                           tablat	equ	0xFF5
  7547                           prodh	equ	0xFF4
  7548                           prodl	equ	0xFF3
  7549                           intcon	equ	0xFF2
  7550                           intcon2	equ	0xFF1
  7551                           indf0	equ	0xFEF
  7552                           postinc0	equ	0xFEE
  7553                           fsr0h	equ	0xFEA
  7554                           fsr0l	equ	0xFE9
  7555                           wreg	equ	0xFE8
  7556                           fsr1h	equ	0xFE2
  7557                           fsr1l	equ	0xFE1
  7558                           bsr	equ	0xFE0
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566                           	psect	temp
  7567  000052                     btemp:
  7568                           	opt stack 0
  7569  000052                     	ds	1
  7570  0000                     int$flags	set	btemp
  7571  0000                     wtemp6	set	btemp+1
  7572                           pclatu	equ	0xFFB
  7573                           pclath	equ	0xFFA
  7574                           tblptru	equ	0xFF8
  7575                           tblptrh	equ	0xFF7
  7576                           tblptrl	equ	0xFF6
  7577                           tablat	equ	0xFF5
  7578                           prodh	equ	0xFF4
  7579                           prodl	equ	0xFF3
  7580                           intcon	equ	0xFF2
  7581                           intcon2	equ	0xFF1
  7582                           indf0	equ	0xFEF
  7583                           postinc0	equ	0xFEE
  7584                           fsr0h	equ	0xFEA
  7585                           fsr0l	equ	0xFE9
  7586                           wreg	equ	0xFE8
  7587                           fsr1h	equ	0xFE2
  7588                           fsr1l	equ	0xFE1
  7589                           bsr	equ	0xFE0
  7590                           indf2	equ	0xFDF
  7591                           postinc2	equ	0xFDE
  7592                           postdec2	equ	0xFDD
  7593                           fsr2h	equ	0xFDA
  7594                           fsr2l	equ	0xFD9
  7595                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     74      81
    BANK0           128     89     105
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 11
		 -> value(BANK0[8]), STR_2(CODE[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _calcula->___ftmul
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    ___ftdiv->___ftpack

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calcula
    _calcula->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   77480
                                             86 BANK0      3     3      0
                            _calcula
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     341
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     155
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _calcula                                             14    14      0   76367
                                             72 BANK0     14    14      0
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                         _lcd_gotoxy
                            _lcd_msg
               _prepareForInterrupts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   61922
                                             34 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   14620
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   14341
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3472
                                             59 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6221
                                             65 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             45 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             45 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3175
                                             53 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5034
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4618
                                             16 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     155
                                             45 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     738
                                             45 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     769
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     434
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           4     3      1     505
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0     124
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3633
                                             53 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2893
                                             45 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calcula
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft
       ___ftpack
     _lcd_gotoxy
       _lcd_cmd
         _lcd_lat
         _manda
     _lcd_msg
       _lcd_putc
         _lcd_cmd
           _lcd_lat
           _manda
         _lcd_dwr
           _lcd_lat
           _manda
     _prepareForInterrupts
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      69       5       82.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4A      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      15        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 12 04:35:41 2018

                  lcd_cmd_hf@x 002F                             l81 1B06                             l75 2374  
                 ___awdiv@sign 0039                             bsr 000FE0            ___wmul@multiplicand 003E  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_OSC$XT 000000  
                 ___ftadd@exp1 009B                   ___ftadd@exp2 009A                   ___ftadd@sign 0099  
                          l110 246A                            l112 2472                            l200 07C2  
                          l113 247A                            l121 231E                            l130 24A8  
                          l114 2482                            l122 22F6                            l210 08CE  
                          l131 24AC                            l211 0934                            l203 07BE  
                          l140 24E8                            l204 07E6                            l141 24EA  
                          l109 248A                            l213 095A                            l142 24F2  
                          l206 0DE8                            l230 0B5E                            l214 099A  
                          l143 24F4                            l127 24B2                            l231 0B48  
                          l215 0A60                            l207 07FA                            l144 24FC  
                          l240 0C64                            l224 0AC6                            l208 083C  
                          l129 24C2                            l241 0C68                            l138 24DE  
                          l250 0E1C                            l242 0C8A                            l234 0C20  
                          l218 0A08                            l139 24E0                            l243 0DBC  
                          l235 0B8C                            l500 1FC4                            l180 1062  
                          l252 0E3C                            l244 0CDA                            l228 0B32  
                          l173 1490                            l253 0E5E                            l237 0C40  
                          l502 2002                            l262 0EFE                            l246 0DDE  
                          l238 0C2A                            l190 069A                            l503 1FF8  
                          l183 1116                            l255 0E80                            l247 0DC8  
                          l191 06B2                            l440 2128                            l432 20D0  
                          l176 155E                            l184 126C                            l256 0E88  
                          l441 2136                            l433 20E0                            l257 0EAC  
                          l249 0E00                            l193 06E0                            l186 1320  
                          l258 0EB4                            l603 2562                            l531 161E  
                          l435 20FE                            l179 113C                            l195 07B0  
                          l436 20F6                            l452 2210                            l196 079A  
                          l541 167A                            l621 1CBA                            l613 1C1E  
                          l453 221A                            l445 21D6                            l197 0762  
                          l550 16B8                            l542 1670                            l622 1CAE  
                          l470 196C                            l454 2228                            l446 21E2  
                          l551 16AE                            l527 15F4                            l615 1C96  
                          l471 195C                            l439 211E                            l560 1E06  
                          l536 1684                            l624 1CD6                            l616 1C86  
                          l464 189E                            l448 21F8                            l553 16DC  
                          l609 243C                            l449 21F0                            l562 1E2E  
                          l554 16F8                            l466 18BC                            l570 17A6  
                          l563 1E6C                            l555 1728                            l467 18FE  
                          l571 17E0                            l564 1E92                            l476 1990  
                          l468 192E                            l580 1868                            l572 1808  
                          l628 2586                            l477 1984                            l581 185C  
                          l654 216E                            l574 1844                            l655 2162  
                          l575 1834                            l496 1FA6                            l664 2250  
                          l568 177A                            l592 1D12                            l497 1F9C  
                          l585 205C                            l665 2244                            l586 208C  
                          l658 21A2                            l594 1D3A                            l499 1FDA  
                          l659 21B0                            l675 22AA                            l595 1D6C  
                          l668 2278                            l676 229E                            l596 1D7C  
                          l669 2286                            l598 1D94                            l599 1DA4  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _lcd 004F  
                 ___awmod@sign 0033                            wreg 000FE8                    _sprintf$835 00AF  
                  lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031                   __CFG_LVP$OFF 000000  
                 ___ftdiv@cntr 003F                   ___ftdiv@sign 0044                   __CFG_WDT$OFF 000000  
                         l4003 0C2A                           l3169 20B8                           l4093 0EFA  
                         l3931 099A                           l3939 09E2                           l3983 0B58  
                         l3959 0ACA                           l3979 0B48                           STR_1 0677  
                         STR_2 0688                           STR_3 0682                           _GIEH 007F97  
                         _GIEL 007F96                           u3211 15B2                           u3140 1F8E  
                         u4020 2254                           u4100 073E                           u3221 15C6  
                         u3310 164E                           u4050 2316                           u3250 15E6  
                         u4210 096C                           u3180 200C                           u4060 233E  
                         u4220 09AC                           u3421 1CF8                           u3350 168C  
                         u3510 2102                           u3280 1610                           u4320 0B6C  
                         _IPEN 007E87                           u4057 230C                           u3441 1D22  
                         u4250 09E2                           u4170 0874                           u4067 2334  
                         u3380 16C0                           u4500 0EDA                           u4350 0C4E  
                         u3711 178A                           u4175 086A                           u4520 0F18  
                         u4360 0C5E                           u3570 21FC                           u4290 0B02  
                         u4531 1DEE                           u3901 1C02                           u4551 1E16  
                         u4607 1EDE                           u3920 1C3C                           u3840 1996  
                         u4617 1EEE                           u3770 186E                           u4490 0EBC  
                         u4707 25B0                           u3691 175E                           u4627 1F00  
                         u3925 1C34                           u4637 1F14                           u4647 1F2A  
                         u3960 1CC0                           u4657 1F40                           u4667 1F56  
                         u4677 1F6C                           u4597 2380                           i2l70 1A46  
                         u3990 2172                           u4687 23FC                           u4697 23B6  
                         _TMR1 000FCE                   __CFG_PWRT$ON 000000                           _main 2346  
                 ___ftpack@arg 002E                   ___ftpack@exp 0031                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0052                           prodh 000FF4  
                         prodl 000FF3                           start 00D8                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 0084                   ___param_bank 000000  
                 ___ftmul@sign 0085                   ___fttol@exp1 009B                   ___fttol@lval 0097  
                        ?_main 0001                __end_of___awdiv 2140                __end_of___ftadd 174E  
              __end_of___awmod 2232                __end_of___ftdiv 1EC4                __end_of___ftneg 2570  
              __end_of___lldiv 21C2                __end_of___ftmul 1DDE                ___awdiv@divisor 0036  
              __end_of___llmod 2298                __end_of___ftsub 2466                __end_of___fttol 1CE8  
              ___awdiv@counter 0038                          _PORTB 000F81                          _PORTD 000F83  
              __end_of_calcula 1BF0                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                   ___lltoft@exp 003E  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 23DE  
              __end_of_lcd_lat 25BC                __end_of_lcd_dwr 2424                __end_of_lcd_msg 2346  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers 0629                          _manda 24D4  
                        _first 0051                          _scale 0F26                __end_of_isdigit 258E  
                ___ftpack@sign 0032                          _value 00E1                __end_of_low_isr 00D8  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                          wtemp6 0053                __end_of_sprintf 0F26  
              __initialization 2500                   __end_of_main 2394                         ??_main 00D6  
                ___fttol@sign1 0096                  __activetblptr 000002           __size_of__tdiv_to_l_ 0132  
                       ?_manda 0001               ___llmod@dividend 002E                         ?_scale 0086  
             ___awdiv@dividend 0034               __end_of___ftpack 202C               __end_of___lltoft 22F4  
                       _INT0IE 007F94                         _INT0IF 007F91                         i1l1991 0080  
                       i2l3131 1A80                         i2l3133 1A82                         _TMR1IE 007CE8  
                       _TMR1IF 007CF0                         _TMR1CS 007E69                         _TMR1IP 007CF8  
                       _TMR1ON 007E68                 __CFG_XINST$OFF 000000               __end_of__powers_ 0650  
             __end_of_lcd_init 1F7E               __end_of_high_isr 1ACE               __end_of_lcd_putc 24A0  
                       ___ftge 202C                         ___wmul 2526                      ??___awdiv 0038  
                    ??___ftadd 0096                 __CFG_STVREN$ON 000000                      ??___awmod 0032  
                    ??___ftdiv 003C                      ??___ftneg 0031                      ??___lldiv 0036  
                    ??___ftmul 0048                      ??___llmod 0036                      ??___ftsub 004B  
                    ??___fttol 0091                      ??_calcula 00C8                         _fround 1346  
__size_of_prepareForInterrupts 000E                         clear_0 2506                         clear_1 2512  
             ___awdiv@quotient 003A                ___awmod@divisor 0030                ___awmod@counter 0032  
                    ??_lcd_cmd 002F                      ??_lcd_lat 002E                      ??_lcd_dwr 002F  
                    ??_lcd_msg 0034          ___ftmul@f3_as_product 0081                      ??_isdigit 002E  
                 __mediumconst 0000                      ??_low_isr 0019                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8              lcd_gotoxy@ADDRESS 0034  
                    ??_sprintf 00A9                     __accesstop 0080        __end_of__initialization 2518  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0090                     ___ftadd@f2 0093  
                   ___ftge@ff1 002E                     ___ftge@ff2 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0036                     ___ftdiv@f2 0039                     ___ftdiv@f3 0040  
                   ___ftneg@f1 002E                     ___ftmul@f1 0042                     ___ftmul@f2 0045  
                   ___ftsub@f1 009C                     ___ftsub@f2 009F                     ___fttol@f1 008D  
               __pcstackCOMRAM 0001                     ___lltoft@c 0036                  __end_of_manda 2500  
                __end_of_scale 1346                     __div_to_l_ 1880                        ??_manda 002E  
              __div_to_l_@exp1 0039                __div_to_l_@cntr 0038                        ??_scale 004B  
              __div_to_l_@quot 0034                   sprintf@width 00BA                     __pbssBANK0 00D9  
                __div_to_l_@f1 002E                  __div_to_l_@f2 0031             __CFG_CCP2MX$PORTBE 000000  
                      ?___ftge 002E                        ?___wmul 003C                        ?_fround 0086  
                    ?___ftpack 002E                      ?___lltoft 0036                        _T1CKPS0 007E6C  
                      _T1CKPS1 007E6D                        _INTEDG0 007F8E                     _lcd_cmd_hf 258E  
           calcula@elapsedTime 00CC                     _lcd_gotoxy 24A0                     _finishTime 00D9  
                    ?_lcd_init 0001                      ?_high_isr 0001                      ?_lcd_putc 0001  
            __end_of__npowers_ 0677                        __Hparam 0000                        __Lparam 0000  
              __size_of___ftge 0090                        ___awdiv 20BC                        ___ftadd 15A0  
                      ___awmod 21C2                        ___ftdiv 1DDE                        ___ftneg 254C  
                      ___lldiv 2140                __size_of___wmul 0026                        ___ftmul 1CE8  
                      ___llmod 2232                        ___ftsub 2424                        ___fttol 1BF0  
                   _fround$832 008C                     _fround$833 0089                   __psmallconst 0600  
                      _calcula 1ACE                        __pcinit 2500                     ??___ftpack 0033  
              __size_of_fround 025A                        __ramtop 0600                     ??___lltoft 003A  
                      __ptext0 2346                        __ptext1 1EC4                        __ptext2 258E  
                      __ptext3 1ACE                        __ptext4 068C                        __ptext5 0F26  
                      __ptext6 2570                        __ptext7 1346                        __ptext8 2526  
                      __ptext9 1CE8                        _lcd_cmd 2394                        _lcd_lat 25A8  
                      _lcd_dwr 23DE                        _lcd_msg 22F4                      _T1CONbits 000FCD  
                  ?__div_to_l_ 002E                        _dpowers 0601                        _isdigit 2570  
             ___awmod@dividend 002E                        _low_isr 0018                        _sprintf 068C  
                   ??_lcd_init 0031                     ??_high_isr 0001                 __pintcode_body 19A8  
                   ??_lcd_putc 0031           end_of_initialization 2518                  __Lmediumconst 0000  
                      int_func 19A8                ___lldiv@divisor 0032                ___lldiv@counter 003A  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
               __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0031                  ??__tdiv_to_l_ 0034  
                  ?_lcd_cmd_hf 0001                    ?_lcd_gotoxy 0031   __end_of_prepareForInterrupts 25CA  
                  ___ftdiv@exp 0043            __size_of__div_to_l_ 0128                    ___ftmul@exp 0080  
               __end_of___ftge 20BC                 __end_of___wmul 254C                 __end_of_fround 15A0  
          start_initialization 2500            __end_of__tdiv_to_l_ 1880                high_isr@counter 0017  
              ___llmod@divisor 0032                ___llmod@counter 0036            __size_of_lcd_cmd_hf 001A  
                     ??___ftge 0034            __size_of_lcd_gotoxy 0034                       ??___wmul 0040  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 004B                  sprintf@tmpval 00BC  
                   fround@prec 008F              __size_of___ftpack 00AE              __size_of___lltoft 005C  
                  __pbssCOMRAM 004B                  __pcstackBANK0 0080              __size_of_lcd_init 00BA  
            __size_of_high_isr 1AC6                    sprintf@flag 00B8              __size_of_lcd_putc 003A  
                  sprintf@fval 00C2                    sprintf@prec 00C5                      __pintcode 0008  
                     ?___awdiv 0034                       ?___ftadd 0090                       ?___awmod 002E  
                     ?___ftdiv 0036                       ?___ftneg 002E                       ?___lldiv 002E  
                     ?___ftmul 0042                       ?___llmod 002E                       ?___ftsub 009C  
                    __npowers_ 0650                       ?___fttol 008D                       ?_calcula 0001  
                  __pintcodelo 0018           _prepareForInterrupts 25BC                    __tdiv_to_l_ 174E  
                     ?_lcd_cmd 0001                       ?_lcd_lat 0001                       ?_lcd_dwr 0001  
                     ?_lcd_msg 0032                   ??__div_to_l_ 0034                    __smallconst 0600  
                     ?_isdigit 0001                       ?_low_isr 0001                      _scale$834 0089  
               __size_of_manda 002C                       ?_sprintf 00A2                 __size_of_scale 0420  
               ___wmul@product 0040             __end_of__div_to_l_ 19A8               __CFG_WDTPS$32768 000000  
        ?_prepareForInterrupts 0001              ___wmul@multiplier 003C                      _startTime 00DD  
                    _triggered 0050                   ??_lcd_cmd_hf 002F                      lcd_putc@c 0031  
                 ??_lcd_gotoxy 0032                      manda@dato 002E                    calcula@freq 00D0  
                  calcula@temp 00D3                       __Hrparam 0000                       __Lrparam 0000  
           __end_of_lcd_cmd_hf 25A8             __end_of_lcd_gotoxy 24D4               __size_of___awdiv 0084  
             __size_of___ftadd 01AE               __size_of___awmod 0070               __size_of___ftdiv 00E6  
             __size_of___ftneg 0024               __size_of___lldiv 0082               __size_of___ftmul 00F6  
             __size_of___llmod 0066               __size_of___ftsub 0042               __size_of___fttol 00F8  
                     ___ftpack 1F7E               __size_of_calcula 0122                       ___lltoft 2298  
                  _isdigit$485 002F               __size_of_lcd_cmd 004A               __size_of_lcd_lat 0014  
             __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052                     sprintf@exp 00C0  
                   sprintf@val 00B4               __size_of_isdigit 001E               __size_of_low_isr 00C0  
                     __ptext10 21C2                       __ptext11 20BC                       __ptext20 254C  
                     __ptext12 174E                       __ptext21 202C                       __ptext13 1880  
                     __ptext30 1DDE                       __ptext22 25BC                       __ptext14 2298  
                     __ptext31 1F7E                       __ptext23 22F4                       __ptext15 2232  
                     __ptext24 2466                       __ptext16 2140                       __ptext25 23DE  
                     __ptext17 1BF0                       __ptext26 24A0                       __ptext18 2424  
                     __ptext27 2394                       __ptext19 15A0                       __ptext28 24D4  
                     __ptext29 25A8                       __powers_ 0629                       _lcd_init 1EC4  
                     _high_isr 0008                       _lcd_putc 2466               __size_of_sprintf 089A  
                __size_of_main 004E         ??_prepareForInterrupts 002E                       int$flags 0052  
                     lcd_cmd@x 0030                       lcd_dwr@x 0030                       lcd_msg@c 0032  
                     main@acum 00D8                       isdigit@c 0030                       scale@scl 008C  
                     intlevel1 0000                       intlevel2 0000                      sprintf@ap 00B2  
             __tdiv_to_l_@exp1 003C               __tdiv_to_l_@cntr 003B                      sprintf@sp 00A2  
             __tdiv_to_l_@quot 0037               ___lldiv@dividend 002E                  _overflowCount 004B  
                 ?__tdiv_to_l_ 002E                       sprintf@c 00C7                       sprintf@f 00A4  
             ___lldiv@quotient 0036  
