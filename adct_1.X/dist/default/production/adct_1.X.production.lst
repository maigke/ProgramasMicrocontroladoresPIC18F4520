

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Mar 29 20:12:28 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.44
    44                           ; Generated 14/09/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000600                     __psmallconst:
    80                           	opt stack 0
    81  000600  00                 	db	0
    82  000601                     _dpowers:
    83                           	opt stack 0
    84  000601  0001               	dw	1
    85  000603  0000               	dw	0
    86  000605  000A               	dw	10
    87  000607  0000               	dw	0
    88  000609  0064               	dw	100
    89  00060B  0000               	dw	0
    90  00060D  03E8               	dw	1000
    91  00060F  0000               	dw	0
    92  000611  2710               	dw	10000
    93  000613  0000               	dw	0
    94  000615  86A0               	dw	34464
    95  000617  0001               	dw	1
    96  000619  4240               	dw	16960
    97  00061B  000F               	dw	15
    98  00061D  9680               	dw	38528
    99  00061F  0098               	dw	152
   100  000621  E100               	dw	57600
   101  000623  05F5               	dw	1525
   102  000625  CA00               	dw	51712
   103  000627  3B9A               	dw	15258
   104  000629                     __end_of_dpowers:
   105                           	opt stack 0
   106  000629                     __powers_:
   107                           	opt stack 0
   108  000629  00                 	db	0
   109  00062A  80                 	db	128
   110  00062B  3F                 	db	63
   111  00062C  00                 	db	0
   112  00062D  20                 	db	32
   113  00062E  41                 	db	65
   114  00062F  00                 	db	0
   115  000630  C8                 	db	200
   116  000631  42                 	db	66
   117  000632  00                 	db	0
   118  000633  7A                 	db	122
   119  000634  44                 	db	68
   120  000635  40                 	db	64
   121  000636  1C                 	db	28
   122  000637  46                 	db	70
   123  000638  50                 	db	80
   124  000639  C3                 	db	195
   125  00063A  47                 	db	71
   126  00063B  24                 	db	36
   127  00063C  74                 	db	116
   128  00063D  49                 	db	73
   129  00063E  97                 	db	151
   130  00063F  18                 	db	24
   131  000640  4B                 	db	75
   132  000641  BC                 	db	188
   133  000642  BE                 	db	190
   134  000643  4C                 	db	76
   135  000644  6B                 	db	107
   136  000645  6E                 	db	110
   137  000646  4E                 	db	78
   138  000647  03                 	db	3
   139  000648  15                 	db	21
   140  000649  50                 	db	80
   141  00064A  79                 	db	121
   142  00064B  AD                 	db	173
   143  00064C  60                 	db	96
   144  00064D  F3                 	db	243
   145  00064E  49                 	db	73
   146  00064F  71                 	db	113
   147  000650                     __end_of__powers_:
   148                           	opt stack 0
   149  000650                     __npowers_:
   150                           	opt stack 0
   151  000650  00                 	db	0
   152  000651  80                 	db	128
   153  000652  3F                 	db	63
   154  000653  CD                 	db	205
   155  000654  CC                 	db	204
   156  000655  3D                 	db	61
   157  000656  D7                 	db	215
   158  000657  23                 	db	35
   159  000658  3C                 	db	60
   160  000659  12                 	db	18
   161  00065A  83                 	db	131
   162  00065B  3A                 	db	58
   163  00065C  B7                 	db	183
   164  00065D  D1                 	db	209
   165  00065E  38                 	db	56
   166  00065F  C6                 	db	198
   167  000660  27                 	db	39
   168  000661  37                 	db	55
   169  000662  38                 	db	56
   170  000663  86                 	db	134
   171  000664  35                 	db	53
   172  000665  C0                 	db	192
   173  000666  D6                 	db	214
   174  000667  33                 	db	51
   175  000668  CC                 	db	204
   176  000669  2B                 	db	43
   177  00066A  32                 	db	50
   178  00066B  70                 	db	112
   179  00066C  89                 	db	137
   180  00066D  30                 	db	48
   181  00066E  E7                 	db	231
   182  00066F  DB                 	db	219
   183  000670  2E                 	db	46
   184  000671  E5                 	db	229
   185  000672  3C                 	db	60
   186  000673  1E                 	db	30
   187  000674  42                 	db	66
   188  000675  A2                 	db	162
   189  000676  0D                 	db	13
   190  000677                     __end_of__npowers_:
   191                           	opt stack 0
   192  0000                     _ADRES	set	4035
   193  0000                     _PORTB	set	3969
   194  0000                     _ADCON0bits	set	4034
   195  0000                     _PORTCbits	set	3970
   196  0000                     _PORTD	set	3971
   197  0000                     _TRISCbits	set	3988
   198  0000                     _ADCON0	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISD	set	3989
   202  0000                     _ADIF	set	31990
   203  0000                     _ADON	set	32272
   204  0000                     _ADFM	set	32263
   205  0000                     _TRISA0	set	31888
   206  000677                     STR_1:
   207  000677  40                 	db	64	;'@'
   208  000678  6D                 	db	109	;'m'
   209  000679  6F                 	db	111	;'o'
   210  00067A  6E                 	db	110	;'n'
   211  00067B  74                 	db	116	;'t'
   212  00067C  69                 	db	105	;'i'
   213  00067D  65                 	db	101	;'e'
   214  00067E  6C                 	db	108	;'l'
   215  00067F  00                 	db	0
   216  000680                     STR_2:
   217  000680  25                 	db	37
   218  000681  33                 	db	51	;'3'
   219  000682  2E                 	db	46
   220  000683  33                 	db	51	;'3'
   221  000684  66                 	db	102	;'f'
   222  000685  00                 	db	0
   223  000686                     STR_3:
   224  000686  20                 	db	32
   225  000687  B0                 	db	-80
   226  000688  43                 	db	67	;'C'
   227  000689  00                 	db	0
   228                           
   229                           ; #config settings
   230  00068A  00                 	db	0	; dummy byte at the end
   231  0000                     
   232                           	psect	cinit
   233  0023C6                     __pcinit:
   234                           	opt stack 0
   235  0023C6                     start_initialization:
   236                           	opt stack 0
   237  0023C6                     __initialization:
   238                           	opt stack 0
   239                           
   240                           ; Clear objects allocated to COMRAM (9 bytes)
   241  0023C6  EE00  F069         	lfsr	0,__pbssCOMRAM
   242  0023CA  0E09               	movlw	9
   243  0023CC                     clear_0:
   244  0023CC  6AEE               	clrf	postinc0,c
   245  0023CE  06E8               	decf	wreg,f,c
   246  0023D0  E1FD               	bnz	clear_0
   247  0023D2                     end_of_initialization:
   248                           	opt stack 0
   249  0023D2                     __end_of__initialization:
   250                           	opt stack 0
   251  0023D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   252  0023D4  6EF8               	movwf	tblptru,c
   253  0023D6  0100               	movlb	0
   254  0023D8  EFAD  F00C         	goto	_main	;jump to C main() function
   255                           tblptru	equ	0xFF8
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           
   259                           	psect	bssCOMRAM
   260  000069                     __pbssCOMRAM:
   261                           	opt stack 0
   262  000069                     _lcd:
   263                           	opt stack 0
   264  000069                     	ds	1
   265  00006A                     _value:
   266                           	opt stack 0
   267  00006A                     	ds	8
   268                           tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	cstackCOMRAM
   273  000001                     __pcstackCOMRAM:
   274                           	opt stack 0
   275  000001                     ??_isdigit:
   276  000001                     ??_lcd_lat:
   277  000001                     ?___awmod:
   278                           	opt stack 0
   279  000001                     ?___ftpack:
   280                           	opt stack 0
   281  000001                     ?___ftneg:
   282                           	opt stack 0
   283  000001                     ?__tdiv_to_l_:
   284                           	opt stack 0
   285  000001                     ?__div_to_l_:
   286                           	opt stack 0
   287  000001                     ?___lldiv:
   288                           	opt stack 0
   289  000001                     ?___llmod:
   290                           	opt stack 0
   291  000001                     manda@dato:
   292                           	opt stack 0
   293  000001                     ___awmod@dividend:
   294                           	opt stack 0
   295  000001                     __div_to_l_@f1:
   296                           	opt stack 0
   297  000001                     ___ftpack@arg:
   298                           	opt stack 0
   299  000001                     __tdiv_to_l_@f1:
   300                           	opt stack 0
   301  000001                     ___ftge@ff1:
   302                           	opt stack 0
   303  000001                     ___ftneg@f1:
   304                           	opt stack 0
   305  000001                     ___lldiv@dividend:
   306                           	opt stack 0
   307  000001                     ___llmod@dividend:
   308                           	opt stack 0
   309                           
   310                           ; 4 bytes @ 0x0
   311  000001                     	ds	1
   312  000002                     ??_lcd_cmd:
   313  000002                     ??_lcd_dwr:
   314  000002                     lcd_cmd_hf@x:
   315                           	opt stack 0
   316  000002                     _isdigit$599:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x1
   320  000002                     	ds	1
   321  000003                     lcd_cmd@x:
   322                           	opt stack 0
   323  000003                     lcd_dwr@x:
   324                           	opt stack 0
   325  000003                     isdigit@c:
   326                           	opt stack 0
   327  000003                     ___awmod@divisor:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x2
   331  000003                     	ds	1
   332  000004                     ??_lcd_init:
   333  000004                     lcd_putc@c:
   334                           	opt stack 0
   335  000004                     lcd_gotoxy@y:
   336                           	opt stack 0
   337  000004                     ___ftpack@exp:
   338                           	opt stack 0
   339  000004                     __div_to_l_@f2:
   340                           	opt stack 0
   341  000004                     __tdiv_to_l_@f2:
   342                           	opt stack 0
   343  000004                     ___ftge@ff2:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x3
   347  000004                     	ds	1
   348  000005                     ??_lcd_gotoxy:
   349  000005                     ___awmod@counter:
   350                           	opt stack 0
   351  000005                     ___ftpack@sign:
   352                           	opt stack 0
   353  000005                     lcd_msg@c:
   354                           	opt stack 0
   355  000005                     ___lldiv@divisor:
   356                           	opt stack 0
   357  000005                     ___llmod@divisor:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x4
   361  000005                     	ds	1
   362  000006                     ??___ftpack:
   363  000006                     lcd_gotoxy@x:
   364                           	opt stack 0
   365  000006                     ___awmod@sign:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x5
   369  000006                     	ds	1
   370  000007                     ??__tdiv_to_l_:
   371  000007                     ??___ftge:
   372  000007                     ?___awdiv:
   373                           	opt stack 0
   374  000007                     lcd_gotoxy@ADDRESS:
   375                           	opt stack 0
   376  000007                     ___awdiv@dividend:
   377                           	opt stack 0
   378  000007                     __div_to_l_@quot:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0x6
   382  000007                     	ds	2
   383  000009                     ?___lltoft:
   384                           	opt stack 0
   385  000009                     ?___lwtoft:
   386                           	opt stack 0
   387  000009                     ___llmod@counter:
   388                           	opt stack 0
   389  000009                     ___awdiv@divisor:
   390                           	opt stack 0
   391  000009                     ___lwtoft@c:
   392                           	opt stack 0
   393  000009                     ___lldiv@quotient:
   394                           	opt stack 0
   395  000009                     ___lltoft@c:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x8
   399  000009                     	ds	1
   400  00000A                     __tdiv_to_l_@quot:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0x9
   404  00000A                     	ds	1
   405  00000B                     ___awdiv@counter:
   406                           	opt stack 0
   407  00000B                     __div_to_l_@cntr:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0xA
   411  00000B                     	ds	1
   412  00000C                     ___awdiv@sign:
   413                           	opt stack 0
   414  00000C                     __div_to_l_@exp1:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00000C                     	ds	1
   419  00000D                     ??___lltoft:
   420  00000D                     ___lldiv@counter:
   421                           	opt stack 0
   422  00000D                     ___awdiv@quotient:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0xC
   426  00000D                     	ds	1
   427  00000E                     __tdiv_to_l_@cntr:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0xD
   431  00000E                     	ds	1
   432  00000F                     ?___wmul:
   433                           	opt stack 0
   434  00000F                     __tdiv_to_l_@exp1:
   435                           	opt stack 0
   436  00000F                     ___wmul@multiplier:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xE
   440  00000F                     	ds	2
   441  000011                     ___lltoft@exp:
   442                           	opt stack 0
   443  000011                     ___wmul@multiplicand:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x10
   447  000011                     	ds	2
   448  000013                     ___wmul@product:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x12
   452  000013                     	ds	2
   453  000015                     ?___ftmul:
   454                           	opt stack 0
   455  000015                     ___ftmul@f1:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x14
   459  000015                     	ds	3
   460  000018                     ___ftmul@f2:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x17
   464  000018                     	ds	3
   465  00001B                     ??___ftmul:
   466                           
   467                           ; 1 bytes @ 0x1A
   468  00001B                     	ds	3
   469  00001E                     ___ftmul@exp:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1D
   473  00001E                     	ds	1
   474  00001F                     ___ftmul@f3_as_product:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x1E
   478  00001F                     	ds	3
   479  000022                     ___ftmul@cntr:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x21
   483  000022                     	ds	1
   484  000023                     ___ftmul@sign:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x22
   488  000023                     	ds	1
   489  000024                     ?___ftdiv:
   490                           	opt stack 0
   491  000024                     ?_fround:
   492                           	opt stack 0
   493  000024                     ?_scale:
   494                           	opt stack 0
   495  000024                     ___ftdiv@f1:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x23
   499  000024                     	ds	3
   500  000027                     ___ftdiv@f2:
   501                           	opt stack 0
   502  000027                     _fround$939:
   503                           	opt stack 0
   504  000027                     _scale$940:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x26
   508  000027                     	ds	3
   509  00002A                     ??___ftdiv:
   510  00002A                     scale@scl:
   511                           	opt stack 0
   512  00002A                     _fround$938:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x29
   516  00002A                     	ds	1
   517  00002B                     ?___fttol:
   518                           	opt stack 0
   519  00002B                     ___fttol@f1:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x2A
   523  00002B                     	ds	2
   524  00002D                     fround@prec:
   525                           	opt stack 0
   526  00002D                     ___ftdiv@cntr:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x2C
   530  00002D                     	ds	1
   531  00002E                     ?___ftadd:
   532                           	opt stack 0
   533  00002E                     ___ftadd@f1:
   534                           	opt stack 0
   535  00002E                     ___ftdiv@f3:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x2D
   539  00002E                     	ds	1
   540  00002F                     ??___fttol:
   541                           
   542                           ; 1 bytes @ 0x2E
   543  00002F                     	ds	2
   544  000031                     ___ftdiv@exp:
   545                           	opt stack 0
   546  000031                     ___ftadd@f2:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x30
   550  000031                     	ds	1
   551  000032                     ___ftdiv@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x31
   555  000032                     	ds	2
   556  000034                     ??___ftadd:
   557  000034                     ___fttol@sign1:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x33
   561  000034                     	ds	1
   562  000035                     ___fttol@lval:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x34
   566  000035                     	ds	2
   567  000037                     ___ftadd@sign:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x36
   571  000037                     	ds	1
   572  000038                     ___ftadd@exp2:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x37
   576  000038                     	ds	1
   577  000039                     ___ftadd@exp1:
   578                           	opt stack 0
   579  000039                     ___fttol@exp1:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x38
   583  000039                     	ds	1
   584  00003A                     ?___ftsub:
   585                           	opt stack 0
   586  00003A                     ___ftsub@f1:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x39
   590  00003A                     	ds	3
   591  00003D                     ___ftsub@f2:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x3C
   595  00003D                     	ds	3
   596  000040                     ?_sprintf:
   597                           	opt stack 0
   598  000040                     sprintf@sp:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x3F
   602  000040                     	ds	2
   603  000042                     sprintf@f:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x41
   607  000042                     	ds	5
   608  000047                     ??_sprintf:
   609                           
   610                           ; 1 bytes @ 0x46
   611  000047                     	ds	6
   612  00004D                     _sprintf$941:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x4C
   616  00004D                     	ds	3
   617  000050                     sprintf@ap:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x4F
   621  000050                     	ds	2
   622  000052                     sprintf@val:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x51
   626  000052                     	ds	4
   627  000056                     sprintf@flag:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x55
   631  000056                     	ds	2
   632  000058                     sprintf@width:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x57
   636  000058                     	ds	2
   637  00005A                     sprintf@tmpval:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x59
   641  00005A                     	ds	4
   642  00005E                     sprintf@exp:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x5D
   646  00005E                     	ds	2
   647  000060                     sprintf@fval:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x5F
   651  000060                     	ds	3
   652  000063                     sprintf@prec:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x62
   656  000063                     	ds	2
   657  000065                     sprintf@c:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x64
   661  000065                     	ds	1
   662  000066                     main@valor:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x65
   666  000066                     	ds	3
   667                           tblptru	equ	0xFF8
   668                           postinc0	equ	0xFEE
   669                           wreg	equ	0xFE8
   670                           
   671 ;;
   672 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   673 ;;
   674 ;; *************** function _main *****************
   675 ;; Defined at:
   676 ;;		line 39 in file "adct_1.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;  valor           3  101[COMRAM] float 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   690 ;;      Params:         0       0       0       0       0       0       0
   691 ;;      Locals:         3       0       0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0
   693 ;;      Totals:         3       0       0       0       0       0       0
   694 ;;Total ram usage:        3 bytes
   695 ;; Hardware stack levels required when called:    4
   696 ;; This function calls:
   697 ;;		___ftdiv
   698 ;;		___ftmul
   699 ;;		___ftsub
   700 ;;		___lwtoft
   701 ;;		_lcd_cmd
   702 ;;		_lcd_gotoxy
   703 ;;		_lcd_init
   704 ;;		_lcd_msg
   705 ;;		_sprintf
   706 ;; This function is called by:
   707 ;;		Startup code after reset
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text0
   712  00195A                     __ptext0:
   713                           	opt stack 0
   714  00195A                     _main:
   715                           	opt stack 27
   716                           
   717                           ;adct_1.c: 40: float valor;
   718                           ;adct_1.c: 42: TRISD = 0x00;
   719                           
   720                           ;incstack = 0
   721  00195A  0E00               	movlw	0
   722  00195C  6E95               	movwf	3989,c	;volatile
   723                           
   724                           ;adct_1.c: 43: TRISB = 0x00;
   725  00195E  0E00               	movlw	0
   726  001960  6E93               	movwf	3987,c	;volatile
   727                           
   728                           ;adct_1.c: 49: ADCON1 = 0x0E;
   729  001962  0E0E               	movlw	14
   730  001964  6EC1               	movwf	4033,c	;volatile
   731                           
   732                           ;adct_1.c: 50: TRISA0 = 1;
   733  001966  8092               	bsf	3986,0,c	;volatile
   734                           
   735                           ;adct_1.c: 51: ADFM = 1;
   736  001968  8EC0               	bsf	4032,7,c	;volatile
   737                           
   738                           ;adct_1.c: 52: ADCON0 = 0x00;
   739  00196A  0E00               	movlw	0
   740  00196C  6EC2               	movwf	4034,c	;volatile
   741                           
   742                           ;adct_1.c: 54: ADON = 1;
   743  00196E  80C2               	bsf	4034,0,c	;volatile
   744                           
   745                           ;adct_1.c: 56: TRISCbits.TRISC2 = 0;
   746  001970  9494               	bcf	3988,2,c	;volatile
   747                           
   748                           ;adct_1.c: 57: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
   749  001972  9C8C               	bcf	3980,6,c	;volatile
   750                           
   751                           ;adct_1.c: 58: PORTCbits.RC2 = 0;
   752  001974  9482               	bcf	3970,2,c	;volatile
   753                           
   754                           ;adct_1.c: 59: lcd_init();
   755  001976  EC9A  F00E         	call	_lcd_init	;wreg free
   756                           
   757                           ;adct_1.c: 60: lcd_cmd(0x01);
   758  00197A  0E01               	movlw	1
   759  00197C  ECDB  F010         	call	_lcd_cmd
   760                           
   761                           ;adct_1.c: 61: lcd_gotoxy(1,1);
   762  001980  0E01               	movlw	1
   763  001982  6E04               	movwf	lcd_gotoxy@y,c
   764  001984  0E01               	movlw	1
   765  001986  EC60  F011         	call	_lcd_gotoxy
   766                           
   767                           ;adct_1.c: 63: lcd_msg("@montiel");
   768  00198A  0E77               	movlw	low STR_1
   769  00198C  6E05               	movwf	lcd_msg@c,c
   770  00198E  0E06               	movlw	high STR_1
   771  001990  6E06               	movwf	lcd_msg@c+1,c
   772  001992  ECB2  F010         	call	_lcd_msg	;wreg free
   773  001996                     
   774                           ;adct_1.c: 66: {
   775                           ;adct_1.c: 67: ADIF = 0;
   776  001996  9C9E               	bcf	3998,6,c	;volatile
   777                           
   778                           ;adct_1.c: 68: ADCON0bits.GO = 1;
   779  001998  82C2               	bsf	4034,1,c	;volatile
   780  00199A  AC9E               	btfss	3998,6,c	;volatile
   781  00199C  D7FE               	goto	l45
   782                           
   783                           ;adct_1.c: 71: valor=ADRES;
   784  00199E  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
   785  0019A2  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
   786  0019A6  ECB5  F011         	call	___lwtoft	;wreg free
   787  0019AA  C009  F066         	movff	?___lwtoft,main@valor
   788  0019AE  C00A  F067         	movff	?___lwtoft+1,main@valor+1
   789  0019B2  C00B  F068         	movff	?___lwtoft+2,main@valor+2
   790                           
   791                           ;adct_1.c: 72: valor = valor*500.0/1023.0;
   792  0019B6  0E00               	movlw	0
   793  0019B8  6E18               	movwf	___ftmul@f2,c
   794  0019BA  0EFA               	movlw	250
   795  0019BC  6E19               	movwf	___ftmul@f2+1,c
   796  0019BE  0E43               	movlw	67
   797  0019C0  6E1A               	movwf	___ftmul@f2+2,c
   798  0019C2  C066  F015         	movff	main@valor,___ftmul@f1
   799  0019C6  C067  F016         	movff	main@valor+1,___ftmul@f1+1
   800  0019CA  C068  F017         	movff	main@valor+2,___ftmul@f1+2
   801  0019CE  EC33  F00D         	call	___ftmul	;wreg free
   802  0019D2  C015  F024         	movff	?___ftmul,___ftdiv@f1
   803  0019D6  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
   804  0019DA  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
   805  0019DE  0EC0               	movlw	192
   806  0019E0  6E27               	movwf	___ftdiv@f2,c
   807  0019E2  0E7F               	movlw	127
   808  0019E4  6E28               	movwf	___ftdiv@f2+1,c
   809  0019E6  0E44               	movlw	68
   810  0019E8  6E29               	movwf	___ftdiv@f2+2,c
   811  0019EA  EC27  F00E         	call	___ftdiv	;wreg free
   812  0019EE  C024  F066         	movff	?___ftdiv,main@valor
   813  0019F2  C025  F067         	movff	?___ftdiv+1,main@valor+1
   814  0019F6  C026  F068         	movff	?___ftdiv+2,main@valor+2
   815                           
   816                           ;adct_1.c: 73: valor -= 4;
   817  0019FA  C066  F03A         	movff	main@valor,___ftsub@f1
   818  0019FE  C067  F03B         	movff	main@valor+1,___ftsub@f1+1
   819  001A02  C068  F03C         	movff	main@valor+2,___ftsub@f1+2
   820  001A06  0E00               	movlw	0
   821  001A08  6E3D               	movwf	___ftsub@f2,c
   822  001A0A  0E80               	movlw	128
   823  001A0C  6E3E               	movwf	___ftsub@f2+1,c
   824  001A0E  0E40               	movlw	64
   825  001A10  6E3F               	movwf	___ftsub@f2+2,c
   826  001A12  EC23  F011         	call	___ftsub	;wreg free
   827  001A16  C03A  F066         	movff	?___ftsub,main@valor
   828  001A1A  C03B  F067         	movff	?___ftsub+1,main@valor+1
   829  001A1E  C03C  F068         	movff	?___ftsub+2,main@valor+2
   830                           
   831                           ;adct_1.c: 74: sprintf(value,"%3.3f",valor);
   832  001A22  0E6A               	movlw	low _value
   833  001A24  6E40               	movwf	sprintf@sp,c
   834  001A26  0E00               	movlw	high _value
   835  001A28  6E41               	movwf	sprintf@sp+1,c
   836  001A2A  0E80               	movlw	low STR_2
   837  001A2C  6E42               	movwf	sprintf@f,c
   838  001A2E  0E06               	movlw	high STR_2
   839  001A30  6E43               	movwf	sprintf@f+1,c
   840  001A32  C066  F044         	movff	main@valor,?_sprintf+4
   841  001A36  C067  F045         	movff	main@valor+1,?_sprintf+5
   842  001A3A  C068  F046         	movff	main@valor+2,?_sprintf+6
   843  001A3E  EC46  F003         	call	_sprintf	;wreg free
   844                           
   845                           ;adct_1.c: 75: lcd_gotoxy(4,2);
   846  001A42  0E02               	movlw	2
   847  001A44  6E04               	movwf	lcd_gotoxy@y,c
   848  001A46  0E04               	movlw	4
   849  001A48  EC60  F011         	call	_lcd_gotoxy
   850                           
   851                           ;adct_1.c: 76: lcd_msg(value);
   852  001A4C  0E6A               	movlw	low _value
   853  001A4E  6E05               	movwf	lcd_msg@c,c
   854  001A50  0E00               	movlw	high _value
   855  001A52  6E06               	movwf	lcd_msg@c+1,c
   856  001A54  ECB2  F010         	call	_lcd_msg	;wreg free
   857                           
   858                           ;adct_1.c: 77: lcd_msg(" °C");
   859  001A58  0E86               	movlw	low STR_3
   860  001A5A  6E05               	movwf	lcd_msg@c,c
   861  001A5C  0E06               	movlw	high STR_3
   862  001A5E  6E06               	movwf	lcd_msg@c+1,c
   863  001A60  ECB2  F010         	call	_lcd_msg	;wreg free
   864  001A64  D798               	goto	l43
   865  001A66                     __end_of_main:
   866                           	opt stack 0
   867                           tblptru	equ	0xFF8
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           
   871 ;; *************** function _sprintf *****************
   872 ;; Defined at:
   873 ;;		line 492 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  sp              2   63[COMRAM] PTR unsigned char 
   876 ;;		 -> value(8), 
   877 ;;  f               2   65[COMRAM] PTR const unsigned char 
   878 ;;		 -> STR_2(6), 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  tmpval          4   89[COMRAM] struct .
   881 ;;  val             4   81[COMRAM] unsigned long 
   882 ;;  fval            3   95[COMRAM] unsigned long 
   883 ;;  cp              3    0        PTR const unsigned char 
   884 ;;  prec            2   98[COMRAM] int 
   885 ;;  exp             2   93[COMRAM] int 
   886 ;;  width           2   87[COMRAM] int 
   887 ;;  flag            2   85[COMRAM] unsigned short 
   888 ;;  ap              2   79[COMRAM] PTR void [1]
   889 ;;		 -> ?_sprintf(2), 
   890 ;;  len             2    0        unsigned int 
   891 ;;  c               1  100[COMRAM] char 
   892 ;;  d               1    0        unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  2   63[COMRAM] int 
   895 ;; Registers used:
   896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   902 ;;      Params:         7       0       0       0       0       0       0
   903 ;;      Locals:        25       0       0       0       0       0       0
   904 ;;      Temps:          6       0       0       0       0       0       0
   905 ;;      Totals:        38       0       0       0       0       0       0
   906 ;;Total ram usage:       38 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    3
   909 ;; This function calls:
   910 ;;		___awdiv
   911 ;;		___ftadd
   912 ;;		___ftge
   913 ;;		___ftmul
   914 ;;		___ftneg
   915 ;;		___ftsub
   916 ;;		___fttol
   917 ;;		___lldiv
   918 ;;		___llmod
   919 ;;		___lltoft
   920 ;;		___wmul
   921 ;;		__div_to_l_
   922 ;;		__tdiv_to_l_
   923 ;;		_fround
   924 ;;		_isdigit
   925 ;;		_scale
   926 ;; This function is called by:
   927 ;;		_main
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text1
   932  00068C                     __ptext1:
   933                           	opt stack 0
   934  00068C                     _sprintf:
   935                           	opt stack 27
   936                           
   937                           ;doprnt.c: 494: va_list ap;
   938                           ;doprnt.c: 499: signed char c;
   939                           ;doprnt.c: 501: int width;
   940                           ;doprnt.c: 504: int prec;
   941                           ;doprnt.c: 508: unsigned short flag;
   942                           ;doprnt.c: 515: char d;
   943                           ;doprnt.c: 516: double fval;
   944                           ;doprnt.c: 517: int exp;
   945                           ;doprnt.c: 523: union {
   946                           ;doprnt.c: 524: unsigned long vd;
   947                           ;doprnt.c: 525: double integ;
   948                           ;doprnt.c: 526: } tmpval;
   949                           ;doprnt.c: 528: unsigned long val;
   950                           ;doprnt.c: 529: unsigned len;
   951                           ;doprnt.c: 530: const char * cp;
   952                           ;doprnt.c: 533: *ap = __va_start();
   953                           
   954                           ;incstack = 0
   955  00068C  0E44               	movlw	low (?_sprintf+4)
   956  00068E  6E50               	movwf	sprintf@ap,c
   957  000690  0E00               	movlw	high (?_sprintf+4)
   958  000692  6E51               	movwf	sprintf@ap+1,c
   959                           
   960                           ;doprnt.c: 536: while(c = *f++) {
   961  000694  EF69  F007         	goto	l226
   962  000698                     
   963                           ;doprnt.c: 538: if(c != '%')
   964  000698  0E25               	movlw	37
   965  00069A  1865               	xorwf	sprintf@c,w,c
   966  00069C  B4D8               	btfsc	status,2,c
   967  00069E  D008               	goto	l155
   968                           
   969                           ;doprnt.c: 540: {
   970                           ;doprnt.c: 541: ((*sp++ = (c)));
   971  0006A0  C040  FFD9         	movff	sprintf@sp,fsr2l
   972  0006A4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
   973  0006A8  C065  FFDF         	movff	sprintf@c,indf2
   974  0006AC  EF67  F007         	goto	l2801
   975  0006B0                     l155:
   976                           
   977                           ;doprnt.c: 543: }
   978                           ;doprnt.c: 546: width = 0;
   979  0006B0  0E00               	movlw	0
   980  0006B2  6E59               	movwf	sprintf@width+1,c
   981  0006B4  0E00               	movlw	0
   982  0006B6  6E58               	movwf	sprintf@width,c
   983                           
   984                           ;doprnt.c: 548: flag = 0;
   985  0006B8  0E00               	movlw	0
   986  0006BA  6E57               	movwf	sprintf@flag+1,c
   987  0006BC  0E00               	movlw	0
   988  0006BE  6E56               	movwf	sprintf@flag,c
   989                           
   990                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   991  0006C0  C042  FFF6         	movff	sprintf@f,tblptrl
   992  0006C4  C043  FFF7         	movff	sprintf@f+1,tblptrh
   993  0006C8                     	if	0	;tblptru may be non-zero
   994  0006C8                     	endif
   995  0006C8                     	if	0	;tblptru may be non-zero
   996  0006C8                     	endif
   997  0006C8  0008               	tblrd		*
   998  0006CA  50F5               	movf	tablat,w,c
   999  0006CC  ECC7  F011         	call	_isdigit
  1000  0006D0  A0D8               	btfss	status,0,c
  1001  0006D2  D032               	goto	u2490
  1002                           
  1003                           ;doprnt.c: 598: width = 0;
  1004  0006D4  0E00               	movlw	0
  1005  0006D6  6E59               	movwf	sprintf@width+1,c
  1006  0006D8  0E00               	movlw	0
  1007  0006DA  6E58               	movwf	sprintf@width,c
  1008  0006DC                     
  1009                           ;doprnt.c: 600: width *= 10;
  1010  0006DC  C058  F00F         	movff	sprintf@width,___wmul@multiplier
  1011  0006E0  C059  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1012  0006E4  0E00               	movlw	0
  1013  0006E6  6E12               	movwf	___wmul@multiplicand+1,c
  1014  0006E8  0E0A               	movlw	10
  1015  0006EA  6E11               	movwf	___wmul@multiplicand,c
  1016  0006EC  EC90  F011         	call	___wmul	;wreg free
  1017  0006F0  C00F  F058         	movff	?___wmul,sprintf@width
  1018  0006F4  C010  F059         	movff	?___wmul+1,sprintf@width+1
  1019                           
  1020                           ;doprnt.c: 601: width += *f++ - '0';
  1021  0006F8  0ED0               	movlw	208
  1022  0006FA  6E47               	movwf	??_sprintf& (0+255),c
  1023  0006FC  0EFF               	movlw	255
  1024  0006FE  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1025  000700  C042  FFF6         	movff	sprintf@f,tblptrl
  1026  000704  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1027  000708                     	if	0	;tblptru may be non-zero
  1028  000708                     	endif
  1029  000708                     	if	0	;tblptru may be non-zero
  1030  000708                     	endif
  1031  000708  0008               	tblrd		*
  1032  00070A  50F5               	movf	tablat,w,c
  1033  00070C  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1034  00070E  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1035  000710  5047               	movf	??_sprintf,w,c
  1036  000712  2649               	addwf	??_sprintf+2,f,c
  1037  000714  5048               	movf	??_sprintf+1,w,c
  1038  000716  224A               	addwfc	??_sprintf+3,f,c
  1039  000718  5049               	movf	??_sprintf+2,w,c
  1040  00071A  2658               	addwf	sprintf@width,f,c
  1041  00071C  504A               	movf	??_sprintf+3,w,c
  1042  00071E  2259               	addwfc	sprintf@width+1,f,c
  1043  000720  4A42               	infsnz	sprintf@f,f,c
  1044  000722  2A43               	incf	sprintf@f+1,f,c
  1045                           
  1046                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1047  000724  C042  FFF6         	movff	sprintf@f,tblptrl
  1048  000728  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1049  00072C                     	if	0	;tblptru may be non-zero
  1050  00072C                     	endif
  1051  00072C                     	if	0	;tblptru may be non-zero
  1052  00072C                     	endif
  1053  00072C  0008               	tblrd		*
  1054  00072E  50F5               	movf	tablat,w,c
  1055  000730  ECC7  F011         	call	_isdigit
  1056  000734  B0D8               	btfsc	status,0,c
  1057  000736  D7D2               	goto	l157
  1058  000738                     u2490:
  1059                           
  1060                           ;doprnt.c: 608: }
  1061                           ;doprnt.c: 611: if(*f == '.') {
  1062  000738  C042  FFF6         	movff	sprintf@f,tblptrl
  1063  00073C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1064  000740                     	if	0	;tblptru may be non-zero
  1065  000740                     	endif
  1066  000740                     	if	0	;tblptru may be non-zero
  1067  000740                     	endif
  1068  000740  0008               	tblrd		*
  1069  000742  50F5               	movf	tablat,w,c
  1070  000744  0A2E               	xorlw	46
  1071  000746  A4D8               	btfss	status,2,c
  1072  000748  D02E               	goto	l159
  1073                           
  1074                           ;doprnt.c: 612: flag |= 0x4000;
  1075  00074A  8C57               	bsf	sprintf@flag+1,6,c
  1076                           
  1077                           ;doprnt.c: 613: f++;
  1078  00074C  4A42               	infsnz	sprintf@f,f,c
  1079  00074E  2A43               	incf	sprintf@f+1,f,c
  1080                           
  1081                           ;doprnt.c: 620: {
  1082                           ;doprnt.c: 621: prec = 0;
  1083  000750  0E00               	movlw	0
  1084  000752  6E64               	movwf	sprintf@prec+1,c
  1085  000754  0E00               	movlw	0
  1086  000756  6E63               	movwf	sprintf@prec,c
  1087                           
  1088                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1089  000758  D01B               	goto	l160
  1090  00075A                     
  1091                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1092  00075A  C063  F00F         	movff	sprintf@prec,___wmul@multiplier
  1093  00075E  C064  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1094  000762  0E00               	movlw	0
  1095  000764  6E12               	movwf	___wmul@multiplicand+1,c
  1096  000766  0E0A               	movlw	10
  1097  000768  6E11               	movwf	___wmul@multiplicand,c
  1098  00076A  EC90  F011         	call	___wmul	;wreg free
  1099  00076E  C042  FFF6         	movff	sprintf@f,tblptrl
  1100  000772  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1101  000776                     	if	0	;tblptru may be non-zero
  1102  000776                     	endif
  1103  000776                     	if	0	;tblptru may be non-zero
  1104  000776                     	endif
  1105  000776  0008               	tblrd		*
  1106  000778  50F5               	movf	tablat,w,c
  1107  00077A  260F               	addwf	?___wmul,f,c
  1108  00077C  0E00               	movlw	0
  1109  00077E  2210               	addwfc	?___wmul+1,f,c
  1110  000780  0ED0               	movlw	208
  1111  000782  240F               	addwf	?___wmul,w,c
  1112  000784  6E63               	movwf	sprintf@prec,c
  1113  000786  0EFF               	movlw	255
  1114  000788  2010               	addwfc	?___wmul+1,w,c
  1115  00078A  6E64               	movwf	sprintf@prec+1,c
  1116  00078C  4A42               	infsnz	sprintf@f,f,c
  1117  00078E  2A43               	incf	sprintf@f+1,f,c
  1118  000790                     l160:
  1119  000790  C042  FFF6         	movff	sprintf@f,tblptrl
  1120  000794  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1121  000798                     	if	0	;tblptru may be non-zero
  1122  000798                     	endif
  1123  000798                     	if	0	;tblptru may be non-zero
  1124  000798                     	endif
  1125  000798  0008               	tblrd		*
  1126  00079A  50F5               	movf	tablat,w,c
  1127  00079C  ECC7  F011         	call	_isdigit
  1128  0007A0  A0D8               	btfss	status,0,c
  1129  0007A2  D009               	goto	l164
  1130  0007A4  D7DA               	goto	l161
  1131  0007A6                     l159:
  1132                           
  1133                           ;doprnt.c: 626: prec = 0;
  1134  0007A6  0E00               	movlw	0
  1135  0007A8  6E64               	movwf	sprintf@prec+1,c
  1136  0007AA  0E00               	movlw	0
  1137  0007AC  6E63               	movwf	sprintf@prec,c
  1138                           
  1139                           ;doprnt.c: 628: flag |= 0x1000;
  1140  0007AE  8857               	bsf	sprintf@flag+1,4,c
  1141                           
  1142                           ;doprnt.c: 630: }
  1143                           ;doprnt.c: 635: switch(c = *f++) {
  1144  0007B0  D002               	goto	l164
  1145  0007B2                     
  1146                           ;doprnt.c: 663: flag |= 0x400;
  1147  0007B2  8457               	bsf	sprintf@flag+1,2,c
  1148                           
  1149                           ;doprnt.c: 664: break;
  1150  0007B4  D011               	goto	l168
  1151  0007B6                     l164:
  1152  0007B6  C042  FFF6         	movff	sprintf@f,tblptrl
  1153  0007BA  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1154  0007BE  4A42               	infsnz	sprintf@f,f,c
  1155  0007C0  2A43               	incf	sprintf@f+1,f,c
  1156  0007C2                     	if	0	;tblptru may be non-zero
  1157  0007C2                     	endif
  1158  0007C2                     	if	0	;tblptru may be non-zero
  1159  0007C2                     	endif
  1160  0007C2  0008               	tblrd		*
  1161  0007C4  CFF5 F065          	movff	tablat,sprintf@c
  1162  0007C8  5065               	movf	sprintf@c,w,c
  1163                           
  1164                           ; Switch size 1, requested type "space"
  1165                           ; Number of cases is 2, Range of values is 0 to 102
  1166                           ; switch strategies available:
  1167                           ; Name         Instructions Cycles
  1168                           ; simple_byte            7     4 (average)
  1169                           ;	Chosen strategy is simple_byte
  1170  0007CA  0A00               	xorlw	0	; case 0
  1171  0007CC  B4D8               	btfsc	status,2,c
  1172  0007CE  D38E               	goto	u2910
  1173  0007D0  0A66               	xorlw	102	; case 102
  1174  0007D2  B4D8               	btfsc	status,2,c
  1175  0007D4  D7EE               	goto	l167
  1176  0007D6  D37D               	goto	l226
  1177  0007D8                     l168:
  1178                           
  1179                           ;doprnt.c: 825: if(flag & (0x700)) {
  1180  0007D8  0E07               	movlw	7
  1181  0007DA  1457               	andwf	sprintf@flag+1,w,c
  1182  0007DC  B4D8               	btfsc	status,2,c
  1183  0007DE  D2EE               	goto	l170
  1184                           
  1185                           ;doprnt.c: 827: if(flag & 0x1000)
  1186  0007E0  A857               	btfss	sprintf@flag+1,4,c
  1187  0007E2  D004               	goto	l171
  1188                           
  1189                           ;doprnt.c: 829: prec = 6;
  1190  0007E4  0E00               	movlw	0
  1191  0007E6  6E64               	movwf	sprintf@prec+1,c
  1192  0007E8  0E06               	movlw	6
  1193  0007EA  6E63               	movwf	sprintf@prec,c
  1194  0007EC                     l171:
  1195                           
  1196                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1197  0007EC  C050  FFD9         	movff	sprintf@ap,fsr2l
  1198  0007F0  C051  FFDA         	movff	sprintf@ap+1,fsr2h
  1199  0007F4  CFDE F060          	movff	postinc2,sprintf@fval
  1200  0007F8  CFDE F061          	movff	postinc2,sprintf@fval+1
  1201  0007FC  CFDD F062          	movff	postdec2,sprintf@fval+2
  1202  000800  0E03               	movlw	3
  1203  000802  2650               	addwf	sprintf@ap,f,c
  1204  000804  0E00               	movlw	0
  1205  000806  2251               	addwfc	sprintf@ap+1,f,c
  1206                           
  1207                           ;doprnt.c: 831: if(fval < 0.0) {
  1208  000808  AE62               	btfss	sprintf@fval+2,7,c
  1209  00080A  D010               	goto	l172
  1210                           
  1211                           ;doprnt.c: 832: fval = -fval;
  1212  00080C  C060  F001         	movff	sprintf@fval,___ftneg@f1
  1213  000810  C061  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1214  000814  C062  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1215  000818  ECA3  F011         	call	___ftneg	;wreg free
  1216  00081C  C001  F060         	movff	?___ftneg,sprintf@fval
  1217  000820  C002  F061         	movff	?___ftneg+1,sprintf@fval+1
  1218  000824  C003  F062         	movff	?___ftneg+2,sprintf@fval+2
  1219                           
  1220                           ;doprnt.c: 833: flag |= 0x03;
  1221  000828  0E03               	movlw	3
  1222  00082A  1256               	iorwf	sprintf@flag,f,c
  1223  00082C                     l172:
  1224                           
  1225                           ;doprnt.c: 834: }
  1226                           ;doprnt.c: 835: exp = 0;
  1227  00082C  0E00               	movlw	0
  1228  00082E  6E5F               	movwf	sprintf@exp+1,c
  1229  000830  0E00               	movlw	0
  1230  000832  6E5E               	movwf	sprintf@exp,c
  1231                           
  1232                           ;doprnt.c: 836: if( fval!=0) {
  1233  000834  5060               	movf	sprintf@fval,w,c
  1234  000836  1061               	iorwf	sprintf@fval+1,w,c
  1235  000838  1062               	iorwf	sprintf@fval+2,w,c
  1236  00083A  B4D8               	btfsc	status,2,c
  1237  00083C  D083               	goto	l177
  1238                           
  1239                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1240  00083E  0E82               	movlw	130
  1241  000840  6E47               	movwf	??_sprintf& (0+255),c
  1242  000842  0EFF               	movlw	255
  1243  000844  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1244  000846  C060  F049         	movff	sprintf@fval,??_sprintf+2
  1245  00084A  C061  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1246  00084E  C062  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1247  000852  C063  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1248  000856  0E10               	movlw	16
  1249  000858  D005               	goto	u2560
  1250  00085A                     u2565:
  1251  00085A  90D8               	bcf	status,0,c
  1252  00085C  324C               	rrcf	??_sprintf+5,f,c
  1253  00085E  324B               	rrcf	??_sprintf+4,f,c
  1254  000860  324A               	rrcf	??_sprintf+3,f,c
  1255  000862  3249               	rrcf	??_sprintf+2,f,c
  1256  000864                     u2560:
  1257  000864  2EE8               	decfsz	wreg,f,c
  1258  000866  D7F9               	goto	u2565
  1259  000868  5049               	movf	??_sprintf+2,w,c
  1260  00086A  2447               	addwf	??_sprintf,w,c
  1261  00086C  6E5E               	movwf	sprintf@exp,c
  1262  00086E  0E00               	movlw	0
  1263  000870  2048               	addwfc	??_sprintf+1,w,c
  1264  000872  6E5F               	movwf	sprintf@exp+1,c
  1265                           
  1266                           ;doprnt.c: 838: exp--;
  1267  000874  065E               	decf	sprintf@exp,f,c
  1268  000876  A0D8               	btfss	status,0,c
  1269  000878  065F               	decf	sprintf@exp+1,f,c
  1270                           
  1271                           ;doprnt.c: 839: exp *= 3;
  1272  00087A  C05E  F00F         	movff	sprintf@exp,___wmul@multiplier
  1273  00087E  C05F  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1274  000882  0E00               	movlw	0
  1275  000884  6E12               	movwf	___wmul@multiplicand+1,c
  1276  000886  0E03               	movlw	3
  1277  000888  6E11               	movwf	___wmul@multiplicand,c
  1278  00088A  EC90  F011         	call	___wmul	;wreg free
  1279  00088E  C00F  F05E         	movff	?___wmul,sprintf@exp
  1280  000892  C010  F05F         	movff	?___wmul+1,sprintf@exp+1
  1281                           
  1282                           ;doprnt.c: 840: exp /= 10;
  1283  000896  C05E  F007         	movff	sprintf@exp,___awdiv@dividend
  1284  00089A  C05F  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1285  00089E  0E00               	movlw	0
  1286  0008A0  6E0A               	movwf	___awdiv@divisor+1,c
  1287  0008A2  0E0A               	movlw	10
  1288  0008A4  6E09               	movwf	___awdiv@divisor,c
  1289  0008A6  EC96  F00F         	call	___awdiv	;wreg free
  1290  0008AA  C007  F05E         	movff	?___awdiv,sprintf@exp
  1291  0008AE  C008  F05F         	movff	?___awdiv+1,sprintf@exp+1
  1292                           
  1293                           ;doprnt.c: 841: if(exp < 0)
  1294  0008B2  AE5F               	btfss	sprintf@exp+1,7,c
  1295  0008B4  D003               	goto	l174
  1296                           
  1297                           ;doprnt.c: 842: exp--;
  1298  0008B6  065E               	decf	sprintf@exp,f,c
  1299  0008B8  A0D8               	btfss	status,0,c
  1300  0008BA  065F               	decf	sprintf@exp+1,f,c
  1301  0008BC                     l174:
  1302                           
  1303                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1304  0008BC  505E               	movf	sprintf@exp,w,c
  1305  0008BE  0800               	sublw	0
  1306  0008C0  EC7D  F007         	call	_scale
  1307  0008C4  C024  F05A         	movff	?_scale,sprintf@tmpval
  1308  0008C8  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  1309  0008CC  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  1310                           
  1311                           ;doprnt.c: 847: tmpval.integ *= fval;
  1312  0008D0  C05A  F015         	movff	sprintf@tmpval,___ftmul@f1
  1313  0008D4  C05B  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1314  0008D8  C05C  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1315  0008DC  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1316  0008E0  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1317  0008E4  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1318  0008E8  EC33  F00D         	call	___ftmul	;wreg free
  1319  0008EC  C015  F05A         	movff	?___ftmul,sprintf@tmpval
  1320  0008F0  C016  F05B         	movff	?___ftmul+1,sprintf@tmpval+1
  1321  0008F4  C017  F05C         	movff	?___ftmul+2,sprintf@tmpval+2
  1322                           
  1323                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1324  0008F8  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1325  0008FC  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1326  000900  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1327  000904  0E00               	movlw	0
  1328  000906  6E04               	movwf	___ftge@ff2,c
  1329  000908  0E80               	movlw	128
  1330  00090A  6E05               	movwf	___ftge@ff2+1,c
  1331  00090C  0E3F               	movlw	63
  1332  00090E  6E06               	movwf	___ftge@ff2+2,c
  1333  000910  EC4E  F00F         	call	___ftge	;wreg free
  1334  000914  B0D8               	btfsc	status,0,c
  1335  000916  D004               	goto	l175
  1336                           
  1337                           ;doprnt.c: 849: exp--;
  1338  000918  065E               	decf	sprintf@exp,f,c
  1339  00091A  A0D8               	btfss	status,0,c
  1340  00091C  065F               	decf	sprintf@exp+1,f,c
  1341  00091E  D012               	goto	l177
  1342  000920                     l175:
  1343                           
  1344                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1345  000920  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1346  000924  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1347  000928  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1348  00092C  0E00               	movlw	0
  1349  00092E  6E04               	movwf	___ftge@ff2,c
  1350  000930  0E20               	movlw	32
  1351  000932  6E05               	movwf	___ftge@ff2+1,c
  1352  000934  0E41               	movlw	65
  1353  000936  6E06               	movwf	___ftge@ff2+2,c
  1354  000938  EC4E  F00F         	call	___ftge	;wreg free
  1355  00093C  A0D8               	btfss	status,0,c
  1356  00093E  D002               	goto	l177
  1357                           
  1358                           ;doprnt.c: 851: exp++;
  1359  000940  4A5E               	infsnz	sprintf@exp,f,c
  1360  000942  2A5F               	incf	sprintf@exp+1,f,c
  1361  000944                     l177:
  1362                           
  1363                           ;doprnt.c: 852: }
  1364                           ;doprnt.c: 1112: if(prec <= 12)
  1365  000944  BE64               	btfsc	sprintf@prec+1,7,c
  1366  000946  D006               	goto	u2600
  1367  000948  5064               	movf	sprintf@prec+1,w,c
  1368  00094A  E11B               	bnz	l2639
  1369  00094C  0E0D               	movlw	13
  1370  00094E  5C63               	subwf	sprintf@prec,w,c
  1371  000950  B0D8               	btfsc	status,0,c
  1372  000952  D017               	goto	l178
  1373  000954                     u2600:
  1374                           
  1375                           ;doprnt.c: 1113: fval += fround(prec);
  1376  000954  C060  F02E         	movff	sprintf@fval,___ftadd@f1
  1377  000958  C061  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1378  00095C  C062  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1379  000960  5063               	movf	sprintf@prec,w,c
  1380  000962  EC81  F009         	call	_fround
  1381  000966  C024  F031         	movff	?_fround,___ftadd@f2
  1382  00096A  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1383  00096E  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1384  000972  ECAA  F00A         	call	___ftadd	;wreg free
  1385  000976  C02E  F060         	movff	?___ftadd,sprintf@fval
  1386  00097A  C02F  F061         	movff	?___ftadd+1,sprintf@fval+1
  1387  00097E  C030  F062         	movff	?___ftadd+2,sprintf@fval+2
  1388  000982                     l178:
  1389  000982                     l2639:
  1390                           
  1391                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1392  000982  BE5F               	btfsc	sprintf@exp+1,7,c
  1393  000984  D006               	goto	u2610
  1394  000986  505F               	movf	sprintf@exp+1,w,c
  1395  000988  E11E               	bnz	l2647
  1396  00098A  0E0A               	movlw	10
  1397  00098C  5C5E               	subwf	sprintf@exp,w,c
  1398  00098E  B0D8               	btfsc	status,0,c
  1399  000990  D01A               	goto	u2640
  1400  000992                     u2610:
  1401  000992  5060               	movf	sprintf@fval,w,c
  1402  000994  1061               	iorwf	sprintf@fval+1,w,c
  1403  000996  1062               	iorwf	sprintf@fval+2,w,c
  1404  000998  B4D8               	btfsc	status,2,c
  1405  00099A  D051               	goto	l179
  1406  00099C  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1407  0009A0  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1408  0009A4  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1409  0009A8  ECAD  F00D         	call	___fttol	;wreg free
  1410  0009AC  502B               	movf	?___fttol,w,c
  1411  0009AE  102C               	iorwf	?___fttol+1,w,c
  1412  0009B0  102D               	iorwf	?___fttol+2,w,c
  1413  0009B2  102E               	iorwf	?___fttol+3,w,c
  1414  0009B4  B4D8               	btfsc	status,2,c
  1415  0009B6  BE5F               	btfsc	sprintf@exp+1,7,c
  1416  0009B8  D042               	goto	l179
  1417  0009BA  505F               	movf	sprintf@exp+1,w,c
  1418  0009BC  E104               	bnz	l2647
  1419  0009BE  0E02               	movlw	2
  1420  0009C0  5C5E               	subwf	sprintf@exp,w,c
  1421  0009C2  A0D8               	btfss	status,0,c
  1422  0009C4  D03C               	goto	l179
  1423  0009C6                     u2640:
  1424  0009C6                     l2647:
  1425                           
  1426                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1427  0009C6  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1428  0009CA  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1429  0009CE  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1430  0009D2  0E70               	movlw	112
  1431  0009D4  6E04               	movwf	___ftge@ff2,c
  1432  0009D6  0E89               	movlw	137
  1433  0009D8  6E05               	movwf	___ftge@ff2+1,c
  1434  0009DA  0E40               	movlw	64
  1435  0009DC  6E06               	movwf	___ftge@ff2+2,c
  1436  0009DE  EC4E  F00F         	call	___ftge	;wreg free
  1437  0009E2  B0D8               	btfsc	status,0,c
  1438  0009E4  D002               	goto	l182
  1439                           
  1440                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1441  0009E6  0EF7               	movlw	247
  1442  0009E8  D001               	goto	L1
  1443  0009EA                     l182:
  1444                           
  1445                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1446  0009EA  0EF8               	movlw	248
  1447  0009EC                     L1:
  1448  0009EC  265E               	addwf	sprintf@exp,f,c
  1449  0009EE  0EFF               	movlw	255
  1450  0009F0  225F               	addwfc	sprintf@exp+1,f,c
  1451                           
  1452                           ;doprnt.c: 1124: }
  1453                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1454  0009F2  505E               	movf	sprintf@exp,w,c
  1455  0009F4  EC7D  F007         	call	_scale
  1456  0009F8  C024  F05A         	movff	?_scale,sprintf@tmpval
  1457  0009FC  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  1458  000A00  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  1459                           
  1460                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1461  000A04  C060  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1462  000A08  C061  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1463  000A0C  C062  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1464  000A10  C05A  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1465  000A14  C05B  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1466  000A18  C05C  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1467  000A1C  EC80  F00B         	call	__tdiv_to_l_	;wreg free
  1468  000A20  C001  F052         	movff	?__tdiv_to_l_,sprintf@val
  1469  000A24  C002  F053         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1470  000A28  C003  F054         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1471  000A2C  C004  F055         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1472                           
  1473                           ;doprnt.c: 1129: fval = 0.0;
  1474  000A30  0E00               	movlw	0
  1475  000A32  6E60               	movwf	sprintf@fval,c
  1476  000A34  0E00               	movlw	0
  1477  000A36  6E61               	movwf	sprintf@fval+1,c
  1478  000A38  0E00               	movlw	0
  1479  000A3A  6E62               	movwf	sprintf@fval+2,c
  1480                           
  1481                           ;doprnt.c: 1130: } else {
  1482  000A3C  D032               	goto	l188
  1483  000A3E                     l179:
  1484                           
  1485                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1486  000A3E  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1487  000A42  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1488  000A46  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1489  000A4A  ECAD  F00D         	call	___fttol	;wreg free
  1490  000A4E  C02B  F052         	movff	?___fttol,sprintf@val
  1491  000A52  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  1492  000A56  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  1493  000A5A  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  1494                           
  1495                           ;doprnt.c: 1132: fval -= (double)val;
  1496  000A5E  C060  F03A         	movff	sprintf@fval,___ftsub@f1
  1497  000A62  C061  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1498  000A66  C062  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1499  000A6A  C052  F009         	movff	sprintf@val,___lltoft@c
  1500  000A6E  C053  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1501  000A72  C054  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1502  000A76  C055  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1503  000A7A  EC84  F010         	call	___lltoft	;wreg free
  1504  000A7E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1505  000A82  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1506  000A86  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1507  000A8A  EC23  F011         	call	___ftsub	;wreg free
  1508  000A8E  C03A  F060         	movff	?___ftsub,sprintf@fval
  1509  000A92  C03B  F061         	movff	?___ftsub+1,sprintf@fval+1
  1510  000A96  C03C  F062         	movff	?___ftsub+2,sprintf@fval+2
  1511                           
  1512                           ;doprnt.c: 1133: exp = 0;
  1513  000A9A  0E00               	movlw	0
  1514  000A9C  6E5F               	movwf	sprintf@exp+1,c
  1515  000A9E  0E00               	movlw	0
  1516  000AA0  6E5E               	movwf	sprintf@exp,c
  1517  000AA2                     l188:
  1518                           
  1519                           ;doprnt.c: 1134: }
  1520                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1521  000AA2  0E01               	movlw	1
  1522  000AA4  6E65               	movwf	sprintf@c,c
  1523  000AA6                     l2667:
  1524  000AA6  0E0A               	movlw	10
  1525  000AA8  1865               	xorwf	sprintf@c,w,c
  1526  000AAA  B4D8               	btfsc	status,2,c
  1527  000AAC  D018               	goto	u2680
  1528                           
  1529                           ;doprnt.c: 1137: if(val < dpowers[c])
  1530  000AAE  5065               	movf	sprintf@c,w,c
  1531  000AB0  0D04               	mullw	4
  1532  000AB2  0E01               	movlw	low _dpowers
  1533  000AB4  24F3               	addwf	prodl,w,c
  1534  000AB6  6EF6               	movwf	tblptrl,c
  1535  000AB8  0E06               	movlw	high _dpowers
  1536  000ABA  20F4               	addwfc	prodh,w,c
  1537  000ABC  6EF7               	movwf	tblptrh,c
  1538  000ABE                     	if	0	;There are less than 3 active tblptr bytes
  1539  000ABE                     	endif
  1540  000ABE  0009               	tblrd		*+
  1541  000AC0  50F5               	movf	tablat,w,c
  1542  000AC2  5C52               	subwf	sprintf@val,w,c
  1543  000AC4  0009               	tblrd		*+
  1544  000AC6  50F5               	movf	tablat,w,c
  1545  000AC8  5853               	subwfb	sprintf@val+1,w,c
  1546  000ACA  0009               	tblrd		*+
  1547  000ACC  50F5               	movf	tablat,w,c
  1548  000ACE  5854               	subwfb	sprintf@val+2,w,c
  1549  000AD0  0009               	tblrd		*+
  1550  000AD2  50F5               	movf	tablat,w,c
  1551  000AD4  5855               	subwfb	sprintf@val+3,w,c
  1552  000AD6  A0D8               	btfss	status,0,c
  1553  000AD8  D002               	goto	u2680
  1554                           
  1555                           ;doprnt.c: 1138: break;
  1556  000ADA  2A65               	incf	sprintf@c,f,c
  1557  000ADC  D7E4               	goto	l2667
  1558  000ADE                     u2680:
  1559                           
  1560                           ;doprnt.c: 1142: width -= prec + c + exp;
  1561  000ADE  C065  F047         	movff	sprintf@c,??_sprintf
  1562  000AE2  6A48               	clrf	(??_sprintf+1)& (0+255),c
  1563  000AE4  BE47               	btfsc	??_sprintf& (0+255),7,c
  1564  000AE6  0648               	decf	(??_sprintf+1)& (0+255),f,c
  1565  000AE8  5063               	movf	sprintf@prec,w,c
  1566  000AEA  2647               	addwf	??_sprintf,f,c
  1567  000AEC  5064               	movf	sprintf@prec+1,w,c
  1568  000AEE  2248               	addwfc	??_sprintf+1,f,c
  1569  000AF0  505E               	movf	sprintf@exp,w,c
  1570  000AF2  2647               	addwf	??_sprintf,f,c
  1571  000AF4  505F               	movf	sprintf@exp+1,w,c
  1572  000AF6  2248               	addwfc	??_sprintf+1,f,c
  1573  000AF8  5047               	movf	??_sprintf,w,c
  1574  000AFA  5E58               	subwf	sprintf@width,f,c
  1575  000AFC  5048               	movf	??_sprintf+1,w,c
  1576  000AFE  5A59               	subwfb	sprintf@width+1,f,c
  1577                           
  1578                           ;doprnt.c: 1143: if(
  1579                           ;doprnt.c: 1147: prec)
  1580  000B00  5063               	movf	sprintf@prec,w,c
  1581  000B02  1064               	iorwf	sprintf@prec+1,w,c
  1582  000B04  B4D8               	btfsc	status,2,c
  1583  000B06  D003               	goto	l192
  1584                           
  1585                           ;doprnt.c: 1148: width--;
  1586  000B08  0658               	decf	sprintf@width,f,c
  1587  000B0A  A0D8               	btfss	status,0,c
  1588  000B0C  0659               	decf	sprintf@width+1,f,c
  1589  000B0E                     l192:
  1590                           
  1591                           ;doprnt.c: 1149: if(flag & 0x03)
  1592  000B0E  0E03               	movlw	3
  1593  000B10  1456               	andwf	sprintf@flag,w,c
  1594  000B12  6E47               	movwf	??_sprintf& (0+255),c
  1595  000B14  0E00               	movlw	0
  1596  000B16  1457               	andwf	sprintf@flag+1,w,c
  1597  000B18  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1598  000B1A  5047               	movf	??_sprintf,w,c
  1599  000B1C  1048               	iorwf	??_sprintf+1,w,c
  1600  000B1E  B4D8               	btfsc	status,2,c
  1601  000B20  D00C               	goto	l194
  1602  000B22  D008               	goto	l2691
  1603  000B24                     l2687:
  1604                           
  1605                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1606  000B24  C040  FFD9         	movff	sprintf@sp,fsr2l
  1607  000B28  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1608  000B2C  0E20               	movlw	32
  1609  000B2E  6EDF               	movwf	indf2,c
  1610  000B30  4A40               	infsnz	sprintf@sp,f,c
  1611  000B32  2A41               	incf	sprintf@sp+1,f,c
  1612  000B34                     l2691:
  1613                           
  1614                           ;doprnt.c: 1182: width--;
  1615  000B34  0658               	decf	sprintf@width,f,c
  1616  000B36  A0D8               	btfss	status,0,c
  1617  000B38  0659               	decf	sprintf@width+1,f,c
  1618  000B3A                     l194:
  1619  000B3A  BE59               	btfsc	sprintf@width+1,7,c
  1620  000B3C  D005               	goto	u2710
  1621  000B3E  5059               	movf	sprintf@width+1,w,c
  1622  000B40  E1F1               	bnz	l2687
  1623  000B42  0458               	decf	sprintf@width,w,c
  1624  000B44  B0D8               	btfsc	status,0,c
  1625  000B46  D7EE               	goto	l195
  1626  000B48                     u2710:
  1627                           
  1628                           ;doprnt.c: 1183: }
  1629                           ;doprnt.c: 1188: if(flag & 0x03)
  1630  000B48  0E03               	movlw	3
  1631  000B4A  1456               	andwf	sprintf@flag,w,c
  1632  000B4C  6E47               	movwf	??_sprintf& (0+255),c
  1633  000B4E  0E00               	movlw	0
  1634  000B50  1457               	andwf	sprintf@flag+1,w,c
  1635  000B52  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1636  000B54  5047               	movf	??_sprintf,w,c
  1637  000B56  1048               	iorwf	??_sprintf+1,w,c
  1638  000B58  B4D8               	btfsc	status,2,c
  1639  000B5A  D04F               	goto	l198
  1640                           
  1641                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1642  000B5C  C040  FFD9         	movff	sprintf@sp,fsr2l
  1643  000B60  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1644  000B64  0E2D               	movlw	45
  1645  000B66  D046               	goto	L2
  1646  000B68                     
  1647                           ;doprnt.c: 1200: {
  1648                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1649  000B68  C052  F001         	movff	sprintf@val,___lldiv@dividend
  1650  000B6C  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1651  000B70  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1652  000B74  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1653  000B78  5065               	movf	sprintf@c,w,c
  1654  000B7A  0D04               	mullw	4
  1655  000B7C  0E01               	movlw	low _dpowers
  1656  000B7E  24F3               	addwf	prodl,w,c
  1657  000B80  6EF6               	movwf	tblptrl,c
  1658  000B82  0E06               	movlw	high _dpowers
  1659  000B84  20F4               	addwfc	prodh,w,c
  1660  000B86  6EF7               	movwf	tblptrh,c
  1661  000B88                     	if	0	;There are less than 3 active tblptr bytes
  1662  000B88                     	endif
  1663  000B88  0009               	tblrd		*+
  1664  000B8A  CFF5 F005          	movff	tablat,___lldiv@divisor
  1665  000B8E  0009               	tblrd		*+
  1666  000B90  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1667  000B94  0009               	tblrd		*+
  1668  000B96  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1669  000B9A  000A               	tblrd		*-
  1670  000B9C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1671  000BA0  ECD8  F00F         	call	___lldiv	;wreg free
  1672  000BA4  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  1673  000BA8  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  1674  000BAC  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  1675  000BB0  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  1676                           
  1677                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1678  000BB4  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  1679  000BB8  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1680  000BBC  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1681  000BC0  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1682  000BC4  0E0A               	movlw	10
  1683  000BC6  6E05               	movwf	___llmod@divisor,c
  1684  000BC8  0E00               	movlw	0
  1685  000BCA  6E06               	movwf	___llmod@divisor+1,c
  1686  000BCC  0E00               	movlw	0
  1687  000BCE  6E07               	movwf	___llmod@divisor+2,c
  1688  000BD0  0E00               	movlw	0
  1689  000BD2  6E08               	movwf	___llmod@divisor+3,c
  1690  000BD4  EC51  F010         	call	___llmod	;wreg free
  1691  000BD8  C001  F05A         	movff	?___llmod,sprintf@tmpval
  1692  000BDC  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  1693  000BE0  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  1694  000BE4  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  1695                           
  1696                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1697  000BE8  505A               	movf	sprintf@tmpval,w,c
  1698  000BEA  0F30               	addlw	48
  1699  000BEC  C040  FFD9         	movff	sprintf@sp,fsr2l
  1700  000BF0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1701  000BF4                     L2:
  1702  000BF4  6EDF               	movwf	indf2,c
  1703  000BF6  4A40               	infsnz	sprintf@sp,f,c
  1704  000BF8  2A41               	incf	sprintf@sp+1,f,c
  1705  000BFA                     l198:
  1706  000BFA  0665               	decf	sprintf@c,f,c
  1707  000BFC  2865               	incf	sprintf@c,w,c
  1708  000BFE  B4D8               	btfsc	status,2,c
  1709  000C00  D00C               	goto	l201
  1710  000C02  D7B2               	goto	l199
  1711  000C04                     l2711:
  1712                           
  1713                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1714  000C04  C040  FFD9         	movff	sprintf@sp,fsr2l
  1715  000C08  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1716  000C0C  0E30               	movlw	48
  1717  000C0E  6EDF               	movwf	indf2,c
  1718  000C10  4A40               	infsnz	sprintf@sp,f,c
  1719  000C12  2A41               	incf	sprintf@sp+1,f,c
  1720                           
  1721                           ;doprnt.c: 1209: exp--;
  1722  000C14  065E               	decf	sprintf@exp,f,c
  1723  000C16  A0D8               	btfss	status,0,c
  1724  000C18  065F               	decf	sprintf@exp+1,f,c
  1725  000C1A                     l201:
  1726  000C1A  BE5F               	btfsc	sprintf@exp+1,7,c
  1727  000C1C  D005               	goto	u2740
  1728  000C1E  505F               	movf	sprintf@exp+1,w,c
  1729  000C20  E1F1               	bnz	l2711
  1730  000C22  045E               	decf	sprintf@exp,w,c
  1731  000C24  B0D8               	btfsc	status,0,c
  1732  000C26  D7EE               	goto	l202
  1733  000C28                     u2740:
  1734                           
  1735                           ;doprnt.c: 1210: }
  1736                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1737  000C28  BE64               	btfsc	sprintf@prec+1,7,c
  1738  000C2A  D009               	goto	l204
  1739  000C2C  5064               	movf	sprintf@prec+1,w,c
  1740  000C2E  E104               	bnz	u2750
  1741  000C30  0E09               	movlw	9
  1742  000C32  5C63               	subwf	sprintf@prec,w,c
  1743  000C34  A0D8               	btfss	status,0,c
  1744  000C36  D003               	goto	l204
  1745  000C38                     u2750:
  1746                           
  1747                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1748  000C38  0E08               	movlw	8
  1749  000C3A  6E65               	movwf	sprintf@c,c
  1750  000C3C  D002               	goto	l205
  1751  000C3E                     l204:
  1752                           
  1753                           ;doprnt.c: 1213: else
  1754                           ;doprnt.c: 1214: c = prec;
  1755  000C3E  C063  F065         	movff	sprintf@prec,sprintf@c
  1756  000C42                     l205:
  1757                           
  1758                           ;doprnt.c: 1215: prec -= c;
  1759  000C42  5065               	movf	sprintf@c,w,c
  1760  000C44  5E63               	subwf	sprintf@prec,f,c
  1761  000C46  0E00               	movlw	0
  1762  000C48  BE65               	btfsc	sprintf@c,7,c
  1763  000C4A  0EFF               	movlw	255
  1764  000C4C  5A64               	subwfb	sprintf@prec+1,f,c
  1765                           
  1766                           ;doprnt.c: 1219: if(c)
  1767  000C4E  5065               	movf	sprintf@c,w,c
  1768  000C50  B4D8               	btfsc	status,2,c
  1769  000C52  D008               	goto	l206
  1770                           
  1771                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1772  000C54  C040  FFD9         	movff	sprintf@sp,fsr2l
  1773  000C58  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1774  000C5C  0E2E               	movlw	46
  1775  000C5E  6EDF               	movwf	indf2,c
  1776  000C60  4A40               	infsnz	sprintf@sp,f,c
  1777  000C62  2A41               	incf	sprintf@sp+1,f,c
  1778  000C64                     l206:
  1779                           
  1780                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1781  000C64  5065               	movf	sprintf@c,w,c
  1782  000C66  EC7D  F007         	call	_scale
  1783  000C6A  C024  F04D         	movff	?_scale,_sprintf$941
  1784  000C6E  C025  F04E         	movff	?_scale+1,_sprintf$941+1
  1785  000C72  C026  F04F         	movff	?_scale+2,_sprintf$941+2
  1786                           
  1787                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1788  000C76  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1789  000C7A  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1790  000C7E  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1791  000C82  C04D  F015         	movff	_sprintf$941,___ftmul@f1
  1792  000C86  C04E  F016         	movff	_sprintf$941+1,___ftmul@f1+1
  1793  000C8A  C04F  F017         	movff	_sprintf$941+2,___ftmul@f1+2
  1794  000C8E  EC33  F00D         	call	___ftmul	;wreg free
  1795  000C92  C015  F02B         	movff	?___ftmul,___fttol@f1
  1796  000C96  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1797  000C9A  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1798  000C9E  ECAD  F00D         	call	___fttol	;wreg free
  1799  000CA2  C02B  F052         	movff	?___fttol,sprintf@val
  1800  000CA6  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  1801  000CAA  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  1802  000CAE  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  1803                           
  1804                           ;doprnt.c: 1228: while(c--) {
  1805  000CB2  D06F               	goto	l207
  1806  000CB4                     
  1807                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1808  000CB4  C052  F001         	movff	sprintf@val,___lldiv@dividend
  1809  000CB8  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1810  000CBC  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1811  000CC0  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1812  000CC4  5065               	movf	sprintf@c,w,c
  1813  000CC6  0D04               	mullw	4
  1814  000CC8  0E01               	movlw	low _dpowers
  1815  000CCA  24F3               	addwf	prodl,w,c
  1816  000CCC  6EF6               	movwf	tblptrl,c
  1817  000CCE  0E06               	movlw	high _dpowers
  1818  000CD0  20F4               	addwfc	prodh,w,c
  1819  000CD2  6EF7               	movwf	tblptrh,c
  1820  000CD4                     	if	0	;There are less than 3 active tblptr bytes
  1821  000CD4                     	endif
  1822  000CD4  0009               	tblrd		*+
  1823  000CD6  CFF5 F005          	movff	tablat,___lldiv@divisor
  1824  000CDA  0009               	tblrd		*+
  1825  000CDC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1826  000CE0  0009               	tblrd		*+
  1827  000CE2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1828  000CE6  000A               	tblrd		*-
  1829  000CE8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1830  000CEC  ECD8  F00F         	call	___lldiv	;wreg free
  1831  000CF0  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  1832  000CF4  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  1833  000CF8  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  1834  000CFC  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  1835                           
  1836                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1837  000D00  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  1838  000D04  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1839  000D08  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1840  000D0C  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1841  000D10  0E0A               	movlw	10
  1842  000D12  6E05               	movwf	___llmod@divisor,c
  1843  000D14  0E00               	movlw	0
  1844  000D16  6E06               	movwf	___llmod@divisor+1,c
  1845  000D18  0E00               	movlw	0
  1846  000D1A  6E07               	movwf	___llmod@divisor+2,c
  1847  000D1C  0E00               	movlw	0
  1848  000D1E  6E08               	movwf	___llmod@divisor+3,c
  1849  000D20  EC51  F010         	call	___llmod	;wreg free
  1850  000D24  C001  F05A         	movff	?___llmod,sprintf@tmpval
  1851  000D28  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  1852  000D2C  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  1853  000D30  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  1854                           
  1855                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1856  000D34  505A               	movf	sprintf@tmpval,w,c
  1857  000D36  0F30               	addlw	48
  1858  000D38  C040  FFD9         	movff	sprintf@sp,fsr2l
  1859  000D3C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1860  000D40  6EDF               	movwf	indf2,c
  1861  000D42  4A40               	infsnz	sprintf@sp,f,c
  1862  000D44  2A41               	incf	sprintf@sp+1,f,c
  1863                           
  1864                           ;doprnt.c: 1232: val %= dpowers[c];
  1865  000D46  C052  F001         	movff	sprintf@val,___llmod@dividend
  1866  000D4A  C053  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1867  000D4E  C054  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1868  000D52  C055  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1869  000D56  5065               	movf	sprintf@c,w,c
  1870  000D58  0D04               	mullw	4
  1871  000D5A  0E01               	movlw	low _dpowers
  1872  000D5C  24F3               	addwf	prodl,w,c
  1873  000D5E  6EF6               	movwf	tblptrl,c
  1874  000D60  0E06               	movlw	high _dpowers
  1875  000D62  20F4               	addwfc	prodh,w,c
  1876  000D64  6EF7               	movwf	tblptrh,c
  1877  000D66                     	if	0	;There are less than 3 active tblptr bytes
  1878  000D66                     	endif
  1879  000D66  0009               	tblrd		*+
  1880  000D68  CFF5 F005          	movff	tablat,___llmod@divisor
  1881  000D6C  0009               	tblrd		*+
  1882  000D6E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1883  000D72  0009               	tblrd		*+
  1884  000D74  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1885  000D78  000A               	tblrd		*-
  1886  000D7A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1887  000D7E  EC51  F010         	call	___llmod	;wreg free
  1888  000D82  C001  F052         	movff	?___llmod,sprintf@val
  1889  000D86  C002  F053         	movff	?___llmod+1,sprintf@val+1
  1890  000D8A  C003  F054         	movff	?___llmod+2,sprintf@val+2
  1891  000D8E  C004  F055         	movff	?___llmod+3,sprintf@val+3
  1892  000D92                     l207:
  1893  000D92  0665               	decf	sprintf@c,f,c
  1894  000D94  2865               	incf	sprintf@c,w,c
  1895  000D96  B4D8               	btfsc	status,2,c
  1896  000D98  D00C               	goto	l210
  1897  000D9A  D78C               	goto	l208
  1898  000D9C                     
  1899                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1900  000D9C  C040  FFD9         	movff	sprintf@sp,fsr2l
  1901  000DA0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1902  000DA4  0E30               	movlw	48
  1903  000DA6  6EDF               	movwf	indf2,c
  1904  000DA8  4A40               	infsnz	sprintf@sp,f,c
  1905  000DAA  2A41               	incf	sprintf@sp+1,f,c
  1906                           
  1907                           ;doprnt.c: 1237: prec--;
  1908  000DAC  0663               	decf	sprintf@prec,f,c
  1909  000DAE  A0D8               	btfss	status,0,c
  1910  000DB0  0664               	decf	sprintf@prec+1,f,c
  1911  000DB2                     l210:
  1912  000DB2  5063               	movf	sprintf@prec,w,c
  1913  000DB4  1064               	iorwf	sprintf@prec+1,w,c
  1914  000DB6  B4D8               	btfsc	status,2,c
  1915  000DB8  D08C               	goto	l226
  1916  000DBA  D7F0               	goto	l211
  1917  000DBC                     l170:
  1918                           
  1919                           ;doprnt.c: 1246: }
  1920                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1921  000DBC  5063               	movf	sprintf@prec,w,c
  1922  000DBE  1064               	iorwf	sprintf@prec+1,w,c
  1923  000DC0  A4D8               	btfss	status,2,c
  1924  000DC2  D008               	goto	l213
  1925  000DC4  5052               	movf	sprintf@val,w,c
  1926  000DC6  1053               	iorwf	sprintf@val+1,w,c
  1927  000DC8  1054               	iorwf	sprintf@val+2,w,c
  1928  000DCA  1055               	iorwf	sprintf@val+3,w,c
  1929  000DCC  A4D8               	btfss	status,2,c
  1930  000DCE  D002               	goto	l213
  1931                           
  1932                           ;doprnt.c: 1291: prec++;
  1933  000DD0  4A63               	infsnz	sprintf@prec,f,c
  1934  000DD2  2A64               	incf	sprintf@prec+1,f,c
  1935  000DD4                     l213:
  1936                           
  1937                           ;doprnt.c: 1339: if(c < prec)
  1938  000DD4  0E80               	movlw	128
  1939  000DD6  BE65               	btfsc	sprintf@c,7,c
  1940  000DD8  0E7F               	movlw	127
  1941  000DDA  6E47               	movwf	??_sprintf& (0+255),c
  1942  000DDC  5063               	movf	sprintf@prec,w,c
  1943  000DDE  5C65               	subwf	sprintf@c,w,c
  1944  000DE0  5064               	movf	sprintf@prec+1,w,c
  1945  000DE2  0A80               	xorlw	128
  1946  000DE4  5847               	subwfb	??_sprintf& (0+255),w,c
  1947  000DE6  B0D8               	btfsc	status,0,c
  1948  000DE8  D003               	goto	l214
  1949                           
  1950                           ;doprnt.c: 1340: c = prec;
  1951  000DEA  C063  F065         	movff	sprintf@prec,sprintf@c
  1952  000DEE  D010               	goto	l216
  1953  000DF0                     l214:
  1954                           
  1955                           ;doprnt.c: 1341: else if(prec < c)
  1956  000DF0  5064               	movf	sprintf@prec+1,w,c
  1957  000DF2  0A80               	xorlw	128
  1958  000DF4  6E47               	movwf	??_sprintf& (0+255),c
  1959  000DF6  5065               	movf	sprintf@c,w,c
  1960  000DF8  5C63               	subwf	sprintf@prec,w,c
  1961  000DFA  0E80               	movlw	128
  1962  000DFC  BE65               	btfsc	sprintf@c,7,c
  1963  000DFE  0E7F               	movlw	127
  1964  000E00  5847               	subwfb	??_sprintf& (0+255),w,c
  1965  000E02  B0D8               	btfsc	status,0,c
  1966  000E04  D005               	goto	l216
  1967                           
  1968                           ;doprnt.c: 1342: prec = c;
  1969  000E06  5065               	movf	sprintf@c,w,c
  1970  000E08  6E63               	movwf	sprintf@prec,c
  1971  000E0A  6A64               	clrf	sprintf@prec+1,c
  1972  000E0C  BE63               	btfsc	sprintf@prec,7,c
  1973  000E0E  0664               	decf	sprintf@prec+1,f,c
  1974  000E10                     l216:
  1975                           
  1976                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1977  000E10  5058               	movf	sprintf@width,w,c
  1978  000E12  1059               	iorwf	sprintf@width+1,w,c
  1979  000E14  B4D8               	btfsc	status,2,c
  1980  000E16  D00D               	goto	l217
  1981  000E18  0E03               	movlw	3
  1982  000E1A  1456               	andwf	sprintf@flag,w,c
  1983  000E1C  6E47               	movwf	??_sprintf& (0+255),c
  1984  000E1E  0E00               	movlw	0
  1985  000E20  1457               	andwf	sprintf@flag+1,w,c
  1986  000E22  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1987  000E24  5047               	movf	??_sprintf,w,c
  1988  000E26  1048               	iorwf	??_sprintf+1,w,c
  1989  000E28  B4D8               	btfsc	status,2,c
  1990  000E2A  D003               	goto	l217
  1991                           
  1992                           ;doprnt.c: 1346: width--;
  1993  000E2C  0658               	decf	sprintf@width,f,c
  1994  000E2E  A0D8               	btfss	status,0,c
  1995  000E30  0659               	decf	sprintf@width+1,f,c
  1996  000E32                     l217:
  1997                           
  1998                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1999  000E32  AC57               	btfss	sprintf@flag+1,6,c
  2000  000E34  D013               	goto	l220
  2001                           
  2002                           ;doprnt.c: 1349: if(width > prec)
  2003  000E36  5058               	movf	sprintf@width,w,c
  2004  000E38  5C63               	subwf	sprintf@prec,w,c
  2005  000E3A  5064               	movf	sprintf@prec+1,w,c
  2006  000E3C  0A80               	xorlw	128
  2007  000E3E  6E47               	movwf	??_sprintf& (0+255),c
  2008  000E40  5059               	movf	sprintf@width+1,w,c
  2009  000E42  0A80               	xorlw	128
  2010  000E44  5847               	subwfb	??_sprintf& (0+255),w,c
  2011  000E46  B0D8               	btfsc	status,0,c
  2012  000E48  D005               	goto	l219
  2013                           
  2014                           ;doprnt.c: 1350: width -= prec;
  2015  000E4A  5063               	movf	sprintf@prec,w,c
  2016  000E4C  5E58               	subwf	sprintf@width,f,c
  2017  000E4E  5064               	movf	sprintf@prec+1,w,c
  2018  000E50  5A59               	subwfb	sprintf@width+1,f,c
  2019  000E52  D004               	goto	l220
  2020  000E54                     l219:
  2021                           
  2022                           ;doprnt.c: 1351: else
  2023                           ;doprnt.c: 1352: width = 0;
  2024  000E54  0E00               	movlw	0
  2025  000E56  6E59               	movwf	sprintf@width+1,c
  2026  000E58  0E00               	movlw	0
  2027  000E5A  6E58               	movwf	sprintf@width,c
  2028  000E5C                     l220:
  2029                           
  2030                           ;doprnt.c: 1353: }
  2031                           ;doprnt.c: 1381: if(width > c)
  2032  000E5C  0E80               	movlw	128
  2033  000E5E  BE65               	btfsc	sprintf@c,7,c
  2034  000E60  0E7F               	movlw	127
  2035  000E62  6E47               	movwf	??_sprintf& (0+255),c
  2036  000E64  5058               	movf	sprintf@width,w,c
  2037  000E66  5C65               	subwf	sprintf@c,w,c
  2038  000E68  5059               	movf	sprintf@width+1,w,c
  2039  000E6A  0A80               	xorlw	128
  2040  000E6C  5847               	subwfb	??_sprintf& (0+255),w,c
  2041  000E6E  B0D8               	btfsc	status,0,c
  2042  000E70  D007               	goto	l221
  2043                           
  2044                           ;doprnt.c: 1382: width -= c;
  2045  000E72  5065               	movf	sprintf@c,w,c
  2046  000E74  5E58               	subwf	sprintf@width,f,c
  2047  000E76  0E00               	movlw	0
  2048  000E78  BE65               	btfsc	sprintf@c,7,c
  2049  000E7A  0EFF               	movlw	255
  2050  000E7C  5A59               	subwfb	sprintf@width+1,f,c
  2051  000E7E  D004               	goto	l222
  2052  000E80                     l221:
  2053                           
  2054                           ;doprnt.c: 1383: else
  2055                           ;doprnt.c: 1384: width = 0;
  2056  000E80  0E00               	movlw	0
  2057  000E82  6E59               	movwf	sprintf@width+1,c
  2058  000E84  0E00               	movlw	0
  2059  000E86  6E58               	movwf	sprintf@width,c
  2060  000E88                     l222:
  2061                           
  2062                           ;doprnt.c: 1422: {
  2063                           ;doprnt.c: 1424: if(width
  2064                           ;doprnt.c: 1428: )
  2065  000E88  5058               	movf	sprintf@width,w,c
  2066  000E8A  1059               	iorwf	sprintf@width+1,w,c
  2067  000E8C  B4D8               	btfsc	status,2,c
  2068  000E8E  D00F               	goto	u2890
  2069  000E90                     u2880:
  2070                           
  2071                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2072                           
  2073                           ;doprnt.c: 1429: do
  2074  000E90  C040  FFD9         	movff	sprintf@sp,fsr2l
  2075  000E94  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2076  000E98  0E20               	movlw	32
  2077  000E9A  6EDF               	movwf	indf2,c
  2078  000E9C  4A40               	infsnz	sprintf@sp,f,c
  2079  000E9E  2A41               	incf	sprintf@sp+1,f,c
  2080                           
  2081                           ;doprnt.c: 1431: while(--width);
  2082  000EA0  0658               	decf	sprintf@width,f,c
  2083  000EA2  A0D8               	btfss	status,0,c
  2084  000EA4  0659               	decf	sprintf@width+1,f,c
  2085  000EA6  5058               	movf	sprintf@width,w,c
  2086  000EA8  1059               	iorwf	sprintf@width+1,w,c
  2087  000EAA  A4D8               	btfss	status,2,c
  2088  000EAC  D7F1               	goto	u2880
  2089  000EAE                     u2890:
  2090                           
  2091                           ;doprnt.c: 1438: if(flag & 0x03)
  2092  000EAE  0E03               	movlw	3
  2093  000EB0  1456               	andwf	sprintf@flag,w,c
  2094  000EB2  6E47               	movwf	??_sprintf& (0+255),c
  2095  000EB4  0E00               	movlw	0
  2096  000EB6  1457               	andwf	sprintf@flag+1,w,c
  2097  000EB8  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2098  000EBA  5047               	movf	??_sprintf,w,c
  2099  000EBC  1048               	iorwf	??_sprintf+1,w,c
  2100  000EBE  B4D8               	btfsc	status,2,c
  2101  000EC0  D008               	goto	l226
  2102                           
  2103                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2104  000EC2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2105  000EC6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2106  000ECA  0E2D               	movlw	45
  2107  000ECC  6EDF               	movwf	indf2,c
  2108  000ECE                     l2801:
  2109  000ECE  4A40               	infsnz	sprintf@sp,f,c
  2110  000ED0  2A41               	incf	sprintf@sp+1,f,c
  2111  000ED2                     l226:
  2112  000ED2  C042  FFF6         	movff	sprintf@f,tblptrl
  2113  000ED6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2114  000EDA  4A42               	infsnz	sprintf@f,f,c
  2115  000EDC  2A43               	incf	sprintf@f+1,f,c
  2116  000EDE                     	if	0	;tblptru may be non-zero
  2117  000EDE                     	endif
  2118  000EDE                     	if	0	;tblptru may be non-zero
  2119  000EDE                     	endif
  2120  000EDE  0008               	tblrd		*
  2121  000EE0  CFF5 F065          	movff	tablat,sprintf@c
  2122  000EE4  5065               	movf	sprintf@c,w,c
  2123  000EE6  A4D8               	btfss	status,2,c
  2124  000EE8  EF4C  F003         	goto	l154
  2125  000EEC                     u2910:
  2126                           
  2127                           ;doprnt.c: 1538: *sp = 0;
  2128                           
  2129                           ;doprnt.c: 1469: }
  2130                           ;doprnt.c: 1533: }
  2131                           ;doprnt.c: 1535: alldone:
  2132  000EEC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2133  000EF0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2134  000EF4  0E00               	movlw	0
  2135  000EF6  6EDF               	movwf	indf2,c
  2136  000EF8  0012               	return	
  2137  000EFA                     __end_of_sprintf:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           postdec2	equ	0xFDD
  2150                           fsr2h	equ	0xFDA
  2151                           fsr2l	equ	0xFD9
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _scale *****************
  2155 ;; Defined at:
  2156 ;;		line 425 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  scl             1    wreg     char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  scl             1   41[COMRAM] char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  3   35[COMRAM] char 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2170 ;;      Params:         3       0       0       0       0       0       0
  2171 ;;      Locals:         4       0       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0
  2173 ;;      Totals:         7       0       0       0       0       0       0
  2174 ;;Total ram usage:        7 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    2
  2177 ;; This function calls:
  2178 ;;		___awdiv
  2179 ;;		___awmod
  2180 ;;		___ftmul
  2181 ;;		___wmul
  2182 ;; This function is called by:
  2183 ;;		_sprintf
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text2
  2188  000EFA                     __ptext2:
  2189                           	opt stack 0
  2190  000EFA                     _scale:
  2191                           	opt stack 27
  2192                           
  2193                           ;incstack = 0
  2194                           ;scale@scl stored from wreg
  2195  000EFA  6E2A               	movwf	scale@scl,c
  2196                           
  2197                           ;doprnt.c: 428: if(scl < 0) {
  2198  000EFC  AE2A               	btfss	scale@scl,7,c
  2199  000EFE  D101               	goto	l143
  2200                           
  2201                           ;doprnt.c: 429: scl = -scl;
  2202  000F00  6C2A               	negf	scale@scl,c
  2203                           
  2204                           ;doprnt.c: 430: if(scl>=110)
  2205  000F02  502A               	movf	scale@scl,w,c
  2206  000F04  0A80               	xorlw	128
  2207  000F06  0F12               	addlw	-238
  2208  000F08  A0D8               	btfss	status,0,c
  2209  000F0A  D091               	goto	l144
  2210                           
  2211                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2212  000F0C  0E00               	movlw	0
  2213  000F0E  6E12               	movwf	___wmul@multiplicand+1,c
  2214  000F10  0E03               	movlw	3
  2215  000F12  6E11               	movwf	___wmul@multiplicand,c
  2216  000F14  0E00               	movlw	0
  2217  000F16  6E0A               	movwf	___awdiv@divisor+1,c
  2218  000F18  0E0A               	movlw	10
  2219  000F1A  6E09               	movwf	___awdiv@divisor,c
  2220  000F1C  0E00               	movlw	0
  2221  000F1E  6E04               	movwf	___awmod@divisor+1,c
  2222  000F20  0E64               	movlw	100
  2223  000F22  6E03               	movwf	___awmod@divisor,c
  2224  000F24  502A               	movf	scale@scl,w,c
  2225  000F26  6E01               	movwf	___awmod@dividend,c
  2226  000F28  6A02               	clrf	___awmod@dividend+1,c
  2227  000F2A  BE01               	btfsc	___awmod@dividend,7,c
  2228  000F2C  0602               	decf	___awmod@dividend+1,f,c
  2229  000F2E  EC19  F010         	call	___awmod	;wreg free
  2230  000F32  C001  F007         	movff	?___awmod,___awdiv@dividend
  2231  000F36  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2232  000F3A  EC96  F00F         	call	___awdiv	;wreg free
  2233  000F3E  0E09               	movlw	9
  2234  000F40  2407               	addwf	?___awdiv,w,c
  2235  000F42  6E0F               	movwf	___wmul@multiplier,c
  2236  000F44  0E00               	movlw	0
  2237  000F46  2008               	addwfc	?___awdiv+1,w,c
  2238  000F48  6E10               	movwf	___wmul@multiplier+1,c
  2239  000F4A  EC90  F011         	call	___wmul	;wreg free
  2240  000F4E  0E50               	movlw	low __npowers_
  2241  000F50  240F               	addwf	?___wmul,w,c
  2242  000F52  6EF6               	movwf	tblptrl,c
  2243  000F54  0E06               	movlw	high __npowers_
  2244  000F56  2010               	addwfc	?___wmul+1,w,c
  2245  000F58  6EF7               	movwf	tblptrh,c
  2246  000F5A                     	if	0	;There are less than 3 active tblptr bytes
  2247  000F5A                     	endif
  2248  000F5A  0009               	tblrd		*+
  2249  000F5C  CFF5 F018          	movff	tablat,___ftmul@f2
  2250  000F60  0009               	tblrd		*+
  2251  000F62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2252  000F66  000A               	tblrd		*-
  2253  000F68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2254  000F6C  0E00               	movlw	0
  2255  000F6E  6E0A               	movwf	___awdiv@divisor+1,c
  2256  000F70  0E64               	movlw	100
  2257  000F72  6E09               	movwf	___awdiv@divisor,c
  2258  000F74  502A               	movf	scale@scl,w,c
  2259  000F76  6E07               	movwf	___awdiv@dividend,c
  2260  000F78  6A08               	clrf	___awdiv@dividend+1,c
  2261  000F7A  BE07               	btfsc	___awdiv@dividend,7,c
  2262  000F7C  0608               	decf	___awdiv@dividend+1,f,c
  2263  000F7E  EC96  F00F         	call	___awdiv	;wreg free
  2264  000F82  0E12               	movlw	18
  2265  000F84  2407               	addwf	?___awdiv,w,c
  2266  000F86  6E0F               	movwf	___wmul@multiplier,c
  2267  000F88  0E00               	movlw	0
  2268  000F8A  2008               	addwfc	?___awdiv+1,w,c
  2269  000F8C  6E10               	movwf	___wmul@multiplier+1,c
  2270  000F8E  0E00               	movlw	0
  2271  000F90  6E12               	movwf	___wmul@multiplicand+1,c
  2272  000F92  0E03               	movlw	3
  2273  000F94  6E11               	movwf	___wmul@multiplicand,c
  2274  000F96  EC90  F011         	call	___wmul	;wreg free
  2275  000F9A  0E50               	movlw	low __npowers_
  2276  000F9C  240F               	addwf	?___wmul,w,c
  2277  000F9E  6EF6               	movwf	tblptrl,c
  2278  000FA0  0E06               	movlw	high __npowers_
  2279  000FA2  2010               	addwfc	?___wmul+1,w,c
  2280  000FA4  6EF7               	movwf	tblptrh,c
  2281  000FA6                     	if	0	;There are less than 3 active tblptr bytes
  2282  000FA6                     	endif
  2283  000FA6  0009               	tblrd		*+
  2284  000FA8  CFF5 F015          	movff	tablat,___ftmul@f1
  2285  000FAC  0009               	tblrd		*+
  2286  000FAE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2287  000FB2  000A               	tblrd		*-
  2288  000FB4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2289  000FB8  EC33  F00D         	call	___ftmul	;wreg free
  2290  000FBC  C015  F027         	movff	?___ftmul,_scale$940
  2291  000FC0  C016  F028         	movff	?___ftmul+1,_scale$940+1
  2292  000FC4  C017  F029         	movff	?___ftmul+2,_scale$940+2
  2293                           
  2294                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2295  000FC8  C027  F015         	movff	_scale$940,___ftmul@f1
  2296  000FCC  C028  F016         	movff	_scale$940+1,___ftmul@f1+1
  2297  000FD0  C029  F017         	movff	_scale$940+2,___ftmul@f1+2
  2298  000FD4  0E00               	movlw	0
  2299  000FD6  6E12               	movwf	___wmul@multiplicand+1,c
  2300  000FD8  0E03               	movlw	3
  2301  000FDA  6E11               	movwf	___wmul@multiplicand,c
  2302  000FDC  0E00               	movlw	0
  2303  000FDE  6E04               	movwf	___awmod@divisor+1,c
  2304  000FE0  0E0A               	movlw	10
  2305  000FE2  6E03               	movwf	___awmod@divisor,c
  2306  000FE4  502A               	movf	scale@scl,w,c
  2307  000FE6  6E01               	movwf	___awmod@dividend,c
  2308  000FE8  6A02               	clrf	___awmod@dividend+1,c
  2309  000FEA  BE01               	btfsc	___awmod@dividend,7,c
  2310  000FEC  0602               	decf	___awmod@dividend+1,f,c
  2311  000FEE  EC19  F010         	call	___awmod	;wreg free
  2312  000FF2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2313  000FF6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2314  000FFA  EC90  F011         	call	___wmul	;wreg free
  2315  000FFE  0E50               	movlw	low __npowers_
  2316  001000  240F               	addwf	?___wmul,w,c
  2317  001002  6EF6               	movwf	tblptrl,c
  2318  001004  0E06               	movlw	high __npowers_
  2319  001006  2010               	addwfc	?___wmul+1,w,c
  2320  001008  6EF7               	movwf	tblptrh,c
  2321  00100A                     	if	0	;There are less than 3 active tblptr bytes
  2322  00100A                     	endif
  2323  00100A  0009               	tblrd		*+
  2324  00100C  CFF5 F018          	movff	tablat,___ftmul@f2
  2325  001010  0009               	tblrd		*+
  2326  001012  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2327  001016  000A               	tblrd		*-
  2328  001018  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2329  00101C  EC33  F00D         	call	___ftmul	;wreg free
  2330  001020  C015  F024         	movff	?___ftmul,?_scale
  2331  001024  C016  F025         	movff	?___ftmul+1,?_scale+1
  2332  001028  C017  F026         	movff	?___ftmul+2,?_scale+2
  2333  00102C  0012               	return	
  2334  00102E                     l144:
  2335                           
  2336                           ;doprnt.c: 432: else if(scl > 10)
  2337  00102E  502A               	movf	scale@scl,w,c
  2338  001030  0A80               	xorlw	128
  2339  001032  0F75               	addlw	-139
  2340  001034  A0D8               	btfss	status,0,c
  2341  001036  D053               	goto	l147
  2342                           
  2343                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2344  001038  0E00               	movlw	0
  2345  00103A  6E0A               	movwf	___awdiv@divisor+1,c
  2346  00103C  0E0A               	movlw	10
  2347  00103E  6E09               	movwf	___awdiv@divisor,c
  2348  001040  502A               	movf	scale@scl,w,c
  2349  001042  6E07               	movwf	___awdiv@dividend,c
  2350  001044  6A08               	clrf	___awdiv@dividend+1,c
  2351  001046  BE07               	btfsc	___awdiv@dividend,7,c
  2352  001048  0608               	decf	___awdiv@dividend+1,f,c
  2353  00104A  EC96  F00F         	call	___awdiv	;wreg free
  2354  00104E  0E09               	movlw	9
  2355  001050  2407               	addwf	?___awdiv,w,c
  2356  001052  6E0F               	movwf	___wmul@multiplier,c
  2357  001054  0E00               	movlw	0
  2358  001056  2008               	addwfc	?___awdiv+1,w,c
  2359  001058  6E10               	movwf	___wmul@multiplier+1,c
  2360  00105A  0E00               	movlw	0
  2361  00105C  6E12               	movwf	___wmul@multiplicand+1,c
  2362  00105E  0E03               	movlw	3
  2363  001060  6E11               	movwf	___wmul@multiplicand,c
  2364  001062  EC90  F011         	call	___wmul	;wreg free
  2365  001066  0E50               	movlw	low __npowers_
  2366  001068  240F               	addwf	?___wmul,w,c
  2367  00106A  6EF6               	movwf	tblptrl,c
  2368  00106C  0E06               	movlw	high __npowers_
  2369  00106E  2010               	addwfc	?___wmul+1,w,c
  2370  001070  6EF7               	movwf	tblptrh,c
  2371  001072                     	if	0	;There are less than 3 active tblptr bytes
  2372  001072                     	endif
  2373  001072  0009               	tblrd		*+
  2374  001074  CFF5 F015          	movff	tablat,___ftmul@f1
  2375  001078  0009               	tblrd		*+
  2376  00107A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2377  00107E  000A               	tblrd		*-
  2378  001080  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2379  001084  0E00               	movlw	0
  2380  001086  6E12               	movwf	___wmul@multiplicand+1,c
  2381  001088  0E03               	movlw	3
  2382  00108A  6E11               	movwf	___wmul@multiplicand,c
  2383  00108C  0E00               	movlw	0
  2384  00108E  6E04               	movwf	___awmod@divisor+1,c
  2385  001090  0E0A               	movlw	10
  2386  001092  6E03               	movwf	___awmod@divisor,c
  2387  001094  502A               	movf	scale@scl,w,c
  2388  001096  6E01               	movwf	___awmod@dividend,c
  2389  001098  6A02               	clrf	___awmod@dividend+1,c
  2390  00109A  BE01               	btfsc	___awmod@dividend,7,c
  2391  00109C  0602               	decf	___awmod@dividend+1,f,c
  2392  00109E  EC19  F010         	call	___awmod	;wreg free
  2393  0010A2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2394  0010A6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2395  0010AA  EC90  F011         	call	___wmul	;wreg free
  2396  0010AE  0E50               	movlw	low __npowers_
  2397  0010B0  240F               	addwf	?___wmul,w,c
  2398  0010B2  6EF6               	movwf	tblptrl,c
  2399  0010B4  0E06               	movlw	high __npowers_
  2400  0010B6  2010               	addwfc	?___wmul+1,w,c
  2401  0010B8  6EF7               	movwf	tblptrh,c
  2402  0010BA                     	if	0	;There are less than 3 active tblptr bytes
  2403  0010BA                     	endif
  2404  0010BA  0009               	tblrd		*+
  2405  0010BC  CFF5 F018          	movff	tablat,___ftmul@f2
  2406  0010C0  0009               	tblrd		*+
  2407  0010C2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2408  0010C6  000A               	tblrd		*-
  2409  0010C8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2410  0010CC  EC33  F00D         	call	___ftmul	;wreg free
  2411  0010D0  C015  F024         	movff	?___ftmul,?_scale
  2412  0010D4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2413  0010D8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2414  0010DC  0012               	return	
  2415  0010DE                     l147:
  2416                           
  2417                           ;doprnt.c: 434: return _npowers_[scl];
  2418  0010DE  502A               	movf	scale@scl,w,c
  2419  0010E0  0D03               	mullw	3
  2420  0010E2  0E50               	movlw	low __npowers_
  2421  0010E4  24F3               	addwf	prodl,w,c
  2422  0010E6  6EF6               	movwf	tblptrl,c
  2423  0010E8  0E06               	movlw	high __npowers_
  2424  0010EA  20F4               	addwfc	prodh,w,c
  2425  0010EC  6EF7               	movwf	tblptrh,c
  2426  0010EE                     	if	0	;There are less than 3 active tblptr bytes
  2427  0010EE                     	endif
  2428  0010EE  0009               	tblrd		*+
  2429  0010F0  CFF5 F024          	movff	tablat,?_scale
  2430  0010F4  0009               	tblrd		*+
  2431  0010F6  CFF5 F025          	movff	tablat,?_scale+1
  2432  0010FA  000A               	tblrd		*-
  2433  0010FC  CFF5 F026          	movff	tablat,?_scale+2
  2434  001100  0012               	return	
  2435  001102                     l143:
  2436                           
  2437                           ;doprnt.c: 435: }
  2438                           ;doprnt.c: 436: if(scl>=110)
  2439  001102  502A               	movf	scale@scl,w,c
  2440  001104  0A80               	xorlw	128
  2441  001106  0F12               	addlw	-238
  2442  001108  A0D8               	btfss	status,0,c
  2443  00110A  D091               	goto	l148
  2444                           
  2445                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2446  00110C  0E00               	movlw	0
  2447  00110E  6E12               	movwf	___wmul@multiplicand+1,c
  2448  001110  0E03               	movlw	3
  2449  001112  6E11               	movwf	___wmul@multiplicand,c
  2450  001114  0E00               	movlw	0
  2451  001116  6E0A               	movwf	___awdiv@divisor+1,c
  2452  001118  0E0A               	movlw	10
  2453  00111A  6E09               	movwf	___awdiv@divisor,c
  2454  00111C  0E00               	movlw	0
  2455  00111E  6E04               	movwf	___awmod@divisor+1,c
  2456  001120  0E64               	movlw	100
  2457  001122  6E03               	movwf	___awmod@divisor,c
  2458  001124  502A               	movf	scale@scl,w,c
  2459  001126  6E01               	movwf	___awmod@dividend,c
  2460  001128  6A02               	clrf	___awmod@dividend+1,c
  2461  00112A  BE01               	btfsc	___awmod@dividend,7,c
  2462  00112C  0602               	decf	___awmod@dividend+1,f,c
  2463  00112E  EC19  F010         	call	___awmod	;wreg free
  2464  001132  C001  F007         	movff	?___awmod,___awdiv@dividend
  2465  001136  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2466  00113A  EC96  F00F         	call	___awdiv	;wreg free
  2467  00113E  0E09               	movlw	9
  2468  001140  2407               	addwf	?___awdiv,w,c
  2469  001142  6E0F               	movwf	___wmul@multiplier,c
  2470  001144  0E00               	movlw	0
  2471  001146  2008               	addwfc	?___awdiv+1,w,c
  2472  001148  6E10               	movwf	___wmul@multiplier+1,c
  2473  00114A  EC90  F011         	call	___wmul	;wreg free
  2474  00114E  0E29               	movlw	low __powers_
  2475  001150  240F               	addwf	?___wmul,w,c
  2476  001152  6EF6               	movwf	tblptrl,c
  2477  001154  0E06               	movlw	high __powers_
  2478  001156  2010               	addwfc	?___wmul+1,w,c
  2479  001158  6EF7               	movwf	tblptrh,c
  2480  00115A                     	if	0	;There are less than 3 active tblptr bytes
  2481  00115A                     	endif
  2482  00115A  0009               	tblrd		*+
  2483  00115C  CFF5 F018          	movff	tablat,___ftmul@f2
  2484  001160  0009               	tblrd		*+
  2485  001162  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2486  001166  000A               	tblrd		*-
  2487  001168  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2488  00116C  0E00               	movlw	0
  2489  00116E  6E0A               	movwf	___awdiv@divisor+1,c
  2490  001170  0E64               	movlw	100
  2491  001172  6E09               	movwf	___awdiv@divisor,c
  2492  001174  502A               	movf	scale@scl,w,c
  2493  001176  6E07               	movwf	___awdiv@dividend,c
  2494  001178  6A08               	clrf	___awdiv@dividend+1,c
  2495  00117A  BE07               	btfsc	___awdiv@dividend,7,c
  2496  00117C  0608               	decf	___awdiv@dividend+1,f,c
  2497  00117E  EC96  F00F         	call	___awdiv	;wreg free
  2498  001182  0E12               	movlw	18
  2499  001184  2407               	addwf	?___awdiv,w,c
  2500  001186  6E0F               	movwf	___wmul@multiplier,c
  2501  001188  0E00               	movlw	0
  2502  00118A  2008               	addwfc	?___awdiv+1,w,c
  2503  00118C  6E10               	movwf	___wmul@multiplier+1,c
  2504  00118E  0E00               	movlw	0
  2505  001190  6E12               	movwf	___wmul@multiplicand+1,c
  2506  001192  0E03               	movlw	3
  2507  001194  6E11               	movwf	___wmul@multiplicand,c
  2508  001196  EC90  F011         	call	___wmul	;wreg free
  2509  00119A  0E29               	movlw	low __powers_
  2510  00119C  240F               	addwf	?___wmul,w,c
  2511  00119E  6EF6               	movwf	tblptrl,c
  2512  0011A0  0E06               	movlw	high __powers_
  2513  0011A2  2010               	addwfc	?___wmul+1,w,c
  2514  0011A4  6EF7               	movwf	tblptrh,c
  2515  0011A6                     	if	0	;There are less than 3 active tblptr bytes
  2516  0011A6                     	endif
  2517  0011A6  0009               	tblrd		*+
  2518  0011A8  CFF5 F015          	movff	tablat,___ftmul@f1
  2519  0011AC  0009               	tblrd		*+
  2520  0011AE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2521  0011B2  000A               	tblrd		*-
  2522  0011B4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2523  0011B8  EC33  F00D         	call	___ftmul	;wreg free
  2524  0011BC  C015  F027         	movff	?___ftmul,_scale$940
  2525  0011C0  C016  F028         	movff	?___ftmul+1,_scale$940+1
  2526  0011C4  C017  F029         	movff	?___ftmul+2,_scale$940+2
  2527                           
  2528                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2529  0011C8  C027  F015         	movff	_scale$940,___ftmul@f1
  2530  0011CC  C028  F016         	movff	_scale$940+1,___ftmul@f1+1
  2531  0011D0  C029  F017         	movff	_scale$940+2,___ftmul@f1+2
  2532  0011D4  0E00               	movlw	0
  2533  0011D6  6E12               	movwf	___wmul@multiplicand+1,c
  2534  0011D8  0E03               	movlw	3
  2535  0011DA  6E11               	movwf	___wmul@multiplicand,c
  2536  0011DC  0E00               	movlw	0
  2537  0011DE  6E04               	movwf	___awmod@divisor+1,c
  2538  0011E0  0E0A               	movlw	10
  2539  0011E2  6E03               	movwf	___awmod@divisor,c
  2540  0011E4  502A               	movf	scale@scl,w,c
  2541  0011E6  6E01               	movwf	___awmod@dividend,c
  2542  0011E8  6A02               	clrf	___awmod@dividend+1,c
  2543  0011EA  BE01               	btfsc	___awmod@dividend,7,c
  2544  0011EC  0602               	decf	___awmod@dividend+1,f,c
  2545  0011EE  EC19  F010         	call	___awmod	;wreg free
  2546  0011F2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2547  0011F6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2548  0011FA  EC90  F011         	call	___wmul	;wreg free
  2549  0011FE  0E29               	movlw	low __powers_
  2550  001200  240F               	addwf	?___wmul,w,c
  2551  001202  6EF6               	movwf	tblptrl,c
  2552  001204  0E06               	movlw	high __powers_
  2553  001206  2010               	addwfc	?___wmul+1,w,c
  2554  001208  6EF7               	movwf	tblptrh,c
  2555  00120A                     	if	0	;There are less than 3 active tblptr bytes
  2556  00120A                     	endif
  2557  00120A  0009               	tblrd		*+
  2558  00120C  CFF5 F018          	movff	tablat,___ftmul@f2
  2559  001210  0009               	tblrd		*+
  2560  001212  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2561  001216  000A               	tblrd		*-
  2562  001218  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2563  00121C  EC33  F00D         	call	___ftmul	;wreg free
  2564  001220  C015  F024         	movff	?___ftmul,?_scale
  2565  001224  C016  F025         	movff	?___ftmul+1,?_scale+1
  2566  001228  C017  F026         	movff	?___ftmul+2,?_scale+2
  2567  00122C  0012               	return	
  2568  00122E                     l148:
  2569                           
  2570                           ;doprnt.c: 438: else if(scl > 10)
  2571  00122E  502A               	movf	scale@scl,w,c
  2572  001230  0A80               	xorlw	128
  2573  001232  0F75               	addlw	-139
  2574  001234  A0D8               	btfss	status,0,c
  2575  001236  D053               	goto	l150
  2576                           
  2577                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2578  001238  0E00               	movlw	0
  2579  00123A  6E0A               	movwf	___awdiv@divisor+1,c
  2580  00123C  0E0A               	movlw	10
  2581  00123E  6E09               	movwf	___awdiv@divisor,c
  2582  001240  502A               	movf	scale@scl,w,c
  2583  001242  6E07               	movwf	___awdiv@dividend,c
  2584  001244  6A08               	clrf	___awdiv@dividend+1,c
  2585  001246  BE07               	btfsc	___awdiv@dividend,7,c
  2586  001248  0608               	decf	___awdiv@dividend+1,f,c
  2587  00124A  EC96  F00F         	call	___awdiv	;wreg free
  2588  00124E  0E09               	movlw	9
  2589  001250  2407               	addwf	?___awdiv,w,c
  2590  001252  6E0F               	movwf	___wmul@multiplier,c
  2591  001254  0E00               	movlw	0
  2592  001256  2008               	addwfc	?___awdiv+1,w,c
  2593  001258  6E10               	movwf	___wmul@multiplier+1,c
  2594  00125A  0E00               	movlw	0
  2595  00125C  6E12               	movwf	___wmul@multiplicand+1,c
  2596  00125E  0E03               	movlw	3
  2597  001260  6E11               	movwf	___wmul@multiplicand,c
  2598  001262  EC90  F011         	call	___wmul	;wreg free
  2599  001266  0E29               	movlw	low __powers_
  2600  001268  240F               	addwf	?___wmul,w,c
  2601  00126A  6EF6               	movwf	tblptrl,c
  2602  00126C  0E06               	movlw	high __powers_
  2603  00126E  2010               	addwfc	?___wmul+1,w,c
  2604  001270  6EF7               	movwf	tblptrh,c
  2605  001272                     	if	0	;There are less than 3 active tblptr bytes
  2606  001272                     	endif
  2607  001272  0009               	tblrd		*+
  2608  001274  CFF5 F015          	movff	tablat,___ftmul@f1
  2609  001278  0009               	tblrd		*+
  2610  00127A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2611  00127E  000A               	tblrd		*-
  2612  001280  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2613  001284  0E00               	movlw	0
  2614  001286  6E12               	movwf	___wmul@multiplicand+1,c
  2615  001288  0E03               	movlw	3
  2616  00128A  6E11               	movwf	___wmul@multiplicand,c
  2617  00128C  0E00               	movlw	0
  2618  00128E  6E04               	movwf	___awmod@divisor+1,c
  2619  001290  0E0A               	movlw	10
  2620  001292  6E03               	movwf	___awmod@divisor,c
  2621  001294  502A               	movf	scale@scl,w,c
  2622  001296  6E01               	movwf	___awmod@dividend,c
  2623  001298  6A02               	clrf	___awmod@dividend+1,c
  2624  00129A  BE01               	btfsc	___awmod@dividend,7,c
  2625  00129C  0602               	decf	___awmod@dividend+1,f,c
  2626  00129E  EC19  F010         	call	___awmod	;wreg free
  2627  0012A2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2628  0012A6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2629  0012AA  EC90  F011         	call	___wmul	;wreg free
  2630  0012AE  0E29               	movlw	low __powers_
  2631  0012B0  240F               	addwf	?___wmul,w,c
  2632  0012B2  6EF6               	movwf	tblptrl,c
  2633  0012B4  0E06               	movlw	high __powers_
  2634  0012B6  2010               	addwfc	?___wmul+1,w,c
  2635  0012B8  6EF7               	movwf	tblptrh,c
  2636  0012BA                     	if	0	;There are less than 3 active tblptr bytes
  2637  0012BA                     	endif
  2638  0012BA  0009               	tblrd		*+
  2639  0012BC  CFF5 F018          	movff	tablat,___ftmul@f2
  2640  0012C0  0009               	tblrd		*+
  2641  0012C2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2642  0012C6  000A               	tblrd		*-
  2643  0012C8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2644  0012CC  EC33  F00D         	call	___ftmul	;wreg free
  2645  0012D0  C015  F024         	movff	?___ftmul,?_scale
  2646  0012D4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2647  0012D8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2648  0012DC  0012               	return	
  2649  0012DE                     l150:
  2650                           
  2651                           ;doprnt.c: 440: return _powers_[scl];
  2652  0012DE  502A               	movf	scale@scl,w,c
  2653  0012E0  0D03               	mullw	3
  2654  0012E2  0E29               	movlw	low __powers_
  2655  0012E4  24F3               	addwf	prodl,w,c
  2656  0012E6  6EF6               	movwf	tblptrl,c
  2657  0012E8  0E06               	movlw	high __powers_
  2658  0012EA  20F4               	addwfc	prodh,w,c
  2659  0012EC  6EF7               	movwf	tblptrh,c
  2660  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  2661  0012EE                     	endif
  2662  0012EE  0009               	tblrd		*+
  2663  0012F0  CFF5 F024          	movff	tablat,?_scale
  2664  0012F4  0009               	tblrd		*+
  2665  0012F6  CFF5 F025          	movff	tablat,?_scale+1
  2666  0012FA  000A               	tblrd		*-
  2667  0012FC  CFF5 F026          	movff	tablat,?_scale+2
  2668  001300  0012               	return	
  2669  001302                     __end_of_scale:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _isdigit *****************
  2687 ;; Defined at:
  2688 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/isdigit.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  c               1    wreg     unsigned char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  c               1    2[COMRAM] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;		None               void
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2702 ;;      Params:         0       0       0       0       0       0       0
  2703 ;;      Locals:         2       0       0       0       0       0       0
  2704 ;;      Temps:          1       0       0       0       0       0       0
  2705 ;;      Totals:         3       0       0       0       0       0       0
  2706 ;;Total ram usage:        3 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; This function calls:
  2709 ;;		Nothing
  2710 ;; This function is called by:
  2711 ;;		_sprintf
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text3
  2716  00238E                     __ptext3:
  2717                           	opt stack 0
  2718  00238E                     _isdigit:
  2719                           	opt stack 29
  2720                           
  2721                           ;incstack = 0
  2722                           ;isdigit@c stored from wreg
  2723  00238E  6E03               	movwf	isdigit@c,c
  2724  002390  0E00               	movlw	0
  2725  002392  6E02               	movwf	_isdigit$599,c
  2726  002394  0E3A               	movlw	58
  2727  002396  6003               	cpfslt	isdigit@c,c
  2728  002398  D005               	goto	l592
  2729  00239A  0E2F               	movlw	47
  2730  00239C  6403               	cpfsgt	isdigit@c,c
  2731  00239E  D002               	goto	l592
  2732  0023A0  0E01               	movlw	1
  2733  0023A2  6E02               	movwf	_isdigit$599,c
  2734  0023A4                     l592:
  2735  0023A4  C002  F001         	movff	_isdigit$599,??_isdigit
  2736  0023A8  3001               	rrcf	??_isdigit,w,c
  2737  0023AA  0012               	return	
  2738  0023AC                     __end_of_isdigit:
  2739                           	opt stack 0
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           prodh	equ	0xFF4
  2745                           prodl	equ	0xFF3
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           indf2	equ	0xFDF
  2749                           postinc2	equ	0xFDE
  2750                           postdec2	equ	0xFDD
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function _fround *****************
  2756 ;; Defined at:
  2757 ;;		line 409 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  prec            1    wreg     unsigned char 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  prec            1   44[COMRAM] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  3   35[COMRAM] unsigned char 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2771 ;;      Params:         3       0       0       0       0       0       0
  2772 ;;      Locals:         7       0       0       0       0       0       0
  2773 ;;      Temps:          0       0       0       0       0       0       0
  2774 ;;      Totals:        10       0       0       0       0       0       0
  2775 ;;Total ram usage:       10 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    2
  2778 ;; This function calls:
  2779 ;;		___awdiv
  2780 ;;		___awmod
  2781 ;;		___ftmul
  2782 ;;		___wmul
  2783 ;; This function is called by:
  2784 ;;		_sprintf
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text4
  2789  001302                     __ptext4:
  2790                           	opt stack 0
  2791  001302                     _fround:
  2792                           	opt stack 27
  2793                           
  2794                           ;incstack = 0
  2795                           ;fround@prec stored from wreg
  2796  001302  6E2D               	movwf	fround@prec,c
  2797                           
  2798                           ;doprnt.c: 413: if(prec>=110)
  2799  001304  0E6D               	movlw	109
  2800  001306  642D               	cpfsgt	fround@prec,c
  2801  001308  D09F               	goto	l137
  2802                           
  2803                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2804  00130A  0E00               	movlw	0
  2805  00130C  6E12               	movwf	___wmul@multiplicand+1,c
  2806  00130E  0E03               	movlw	3
  2807  001310  6E11               	movwf	___wmul@multiplicand,c
  2808  001312  0E00               	movlw	0
  2809  001314  6E0A               	movwf	___awdiv@divisor+1,c
  2810  001316  0E0A               	movlw	10
  2811  001318  6E09               	movwf	___awdiv@divisor,c
  2812  00131A  0E00               	movlw	0
  2813  00131C  6E04               	movwf	___awmod@divisor+1,c
  2814  00131E  0E64               	movlw	100
  2815  001320  6E03               	movwf	___awmod@divisor,c
  2816  001322  C02D  F001         	movff	fround@prec,___awmod@dividend
  2817  001326  6A02               	clrf	___awmod@dividend+1,c
  2818  001328  EC19  F010         	call	___awmod	;wreg free
  2819  00132C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2820  001330  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2821  001334  EC96  F00F         	call	___awdiv	;wreg free
  2822  001338  0E09               	movlw	9
  2823  00133A  2407               	addwf	?___awdiv,w,c
  2824  00133C  6E0F               	movwf	___wmul@multiplier,c
  2825  00133E  0E00               	movlw	0
  2826  001340  2008               	addwfc	?___awdiv+1,w,c
  2827  001342  6E10               	movwf	___wmul@multiplier+1,c
  2828  001344  EC90  F011         	call	___wmul	;wreg free
  2829  001348  0E50               	movlw	low __npowers_
  2830  00134A  240F               	addwf	?___wmul,w,c
  2831  00134C  6EF6               	movwf	tblptrl,c
  2832  00134E  0E06               	movlw	high __npowers_
  2833  001350  2010               	addwfc	?___wmul+1,w,c
  2834  001352  6EF7               	movwf	tblptrh,c
  2835  001354                     	if	0	;There are less than 3 active tblptr bytes
  2836  001354                     	endif
  2837  001354  0009               	tblrd		*+
  2838  001356  CFF5 F018          	movff	tablat,___ftmul@f2
  2839  00135A  0009               	tblrd		*+
  2840  00135C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2841  001360  000A               	tblrd		*-
  2842  001362  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2843  001366  0E00               	movlw	0
  2844  001368  6E0A               	movwf	___awdiv@divisor+1,c
  2845  00136A  0E64               	movlw	100
  2846  00136C  6E09               	movwf	___awdiv@divisor,c
  2847  00136E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2848  001372  6A08               	clrf	___awdiv@dividend+1,c
  2849  001374  EC96  F00F         	call	___awdiv	;wreg free
  2850  001378  0E12               	movlw	18
  2851  00137A  2407               	addwf	?___awdiv,w,c
  2852  00137C  6E0F               	movwf	___wmul@multiplier,c
  2853  00137E  0E00               	movlw	0
  2854  001380  2008               	addwfc	?___awdiv+1,w,c
  2855  001382  6E10               	movwf	___wmul@multiplier+1,c
  2856  001384  0E00               	movlw	0
  2857  001386  6E12               	movwf	___wmul@multiplicand+1,c
  2858  001388  0E03               	movlw	3
  2859  00138A  6E11               	movwf	___wmul@multiplicand,c
  2860  00138C  EC90  F011         	call	___wmul	;wreg free
  2861  001390  0E50               	movlw	low __npowers_
  2862  001392  240F               	addwf	?___wmul,w,c
  2863  001394  6EF6               	movwf	tblptrl,c
  2864  001396  0E06               	movlw	high __npowers_
  2865  001398  2010               	addwfc	?___wmul+1,w,c
  2866  00139A  6EF7               	movwf	tblptrh,c
  2867  00139C                     	if	0	;There are less than 3 active tblptr bytes
  2868  00139C                     	endif
  2869  00139C  0009               	tblrd		*+
  2870  00139E  CFF5 F015          	movff	tablat,___ftmul@f1
  2871  0013A2  0009               	tblrd		*+
  2872  0013A4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2873  0013A8  000A               	tblrd		*-
  2874  0013AA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2875  0013AE  EC33  F00D         	call	___ftmul	;wreg free
  2876  0013B2  C015  F02A         	movff	?___ftmul,_fround$938
  2877  0013B6  C016  F02B         	movff	?___ftmul+1,_fround$938+1
  2878  0013BA  C017  F02C         	movff	?___ftmul+2,_fround$938+2
  2879                           
  2880                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2881  0013BE  0E00               	movlw	0
  2882  0013C0  6E12               	movwf	___wmul@multiplicand+1,c
  2883  0013C2  0E03               	movlw	3
  2884  0013C4  6E11               	movwf	___wmul@multiplicand,c
  2885  0013C6  0E00               	movlw	0
  2886  0013C8  6E04               	movwf	___awmod@divisor+1,c
  2887  0013CA  0E0A               	movlw	10
  2888  0013CC  6E03               	movwf	___awmod@divisor,c
  2889  0013CE  C02D  F001         	movff	fround@prec,___awmod@dividend
  2890  0013D2  6A02               	clrf	___awmod@dividend+1,c
  2891  0013D4  EC19  F010         	call	___awmod	;wreg free
  2892  0013D8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2893  0013DC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2894  0013E0  EC90  F011         	call	___wmul	;wreg free
  2895  0013E4  0E50               	movlw	low __npowers_
  2896  0013E6  240F               	addwf	?___wmul,w,c
  2897  0013E8  6EF6               	movwf	tblptrl,c
  2898  0013EA  0E06               	movlw	high __npowers_
  2899  0013EC  2010               	addwfc	?___wmul+1,w,c
  2900  0013EE  6EF7               	movwf	tblptrh,c
  2901  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  2902  0013F0                     	endif
  2903  0013F0  0009               	tblrd		*+
  2904  0013F2  CFF5 F018          	movff	tablat,___ftmul@f2
  2905  0013F6  0009               	tblrd		*+
  2906  0013F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2907  0013FC  000A               	tblrd		*-
  2908  0013FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2909  001402  C02A  F015         	movff	_fround$938,___ftmul@f1
  2910  001406  C02B  F016         	movff	_fround$938+1,___ftmul@f1+1
  2911  00140A  C02C  F017         	movff	_fround$938+2,___ftmul@f1+2
  2912  00140E  EC33  F00D         	call	___ftmul	;wreg free
  2913  001412  C015  F027         	movff	?___ftmul,_fround$939
  2914  001416  C016  F028         	movff	?___ftmul+1,_fround$939+1
  2915  00141A  C017  F029         	movff	?___ftmul+2,_fround$939+2
  2916                           
  2917                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2918  00141E  C027  F015         	movff	_fround$939,___ftmul@f1
  2919  001422  C028  F016         	movff	_fround$939+1,___ftmul@f1+1
  2920  001426  C029  F017         	movff	_fround$939+2,___ftmul@f1+2
  2921  00142A  0E00               	movlw	0
  2922  00142C  6E18               	movwf	___ftmul@f2,c
  2923  00142E  0E00               	movlw	0
  2924  001430  6E19               	movwf	___ftmul@f2+1,c
  2925  001432  0E3F               	movlw	63
  2926  001434  6E1A               	movwf	___ftmul@f2+2,c
  2927  001436  EC33  F00D         	call	___ftmul	;wreg free
  2928  00143A  C015  F024         	movff	?___ftmul,?_fround
  2929  00143E  C016  F025         	movff	?___ftmul+1,?_fround+1
  2930  001442  C017  F026         	movff	?___ftmul+2,?_fround+2
  2931  001446  0012               	return	
  2932  001448                     l137:
  2933                           
  2934                           ;doprnt.c: 415: else if(prec > 10)
  2935  001448  0E0A               	movlw	10
  2936  00144A  642D               	cpfsgt	fround@prec,c
  2937  00144C  D063               	goto	l140
  2938                           
  2939                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2940  00144E  0E00               	movlw	0
  2941  001450  6E12               	movwf	___wmul@multiplicand+1,c
  2942  001452  0E03               	movlw	3
  2943  001454  6E11               	movwf	___wmul@multiplicand,c
  2944  001456  0E00               	movlw	0
  2945  001458  6E04               	movwf	___awmod@divisor+1,c
  2946  00145A  0E0A               	movlw	10
  2947  00145C  6E03               	movwf	___awmod@divisor,c
  2948  00145E  C02D  F001         	movff	fround@prec,___awmod@dividend
  2949  001462  6A02               	clrf	___awmod@dividend+1,c
  2950  001464  EC19  F010         	call	___awmod	;wreg free
  2951  001468  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2952  00146C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2953  001470  EC90  F011         	call	___wmul	;wreg free
  2954  001474  0E50               	movlw	low __npowers_
  2955  001476  240F               	addwf	?___wmul,w,c
  2956  001478  6EF6               	movwf	tblptrl,c
  2957  00147A  0E06               	movlw	high __npowers_
  2958  00147C  2010               	addwfc	?___wmul+1,w,c
  2959  00147E  6EF7               	movwf	tblptrh,c
  2960  001480                     	if	0	;There are less than 3 active tblptr bytes
  2961  001480                     	endif
  2962  001480  0009               	tblrd		*+
  2963  001482  CFF5 F018          	movff	tablat,___ftmul@f2
  2964  001486  0009               	tblrd		*+
  2965  001488  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2966  00148C  000A               	tblrd		*-
  2967  00148E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2968  001492  0E00               	movlw	0
  2969  001494  6E0A               	movwf	___awdiv@divisor+1,c
  2970  001496  0E0A               	movlw	10
  2971  001498  6E09               	movwf	___awdiv@divisor,c
  2972  00149A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2973  00149E  6A08               	clrf	___awdiv@dividend+1,c
  2974  0014A0  EC96  F00F         	call	___awdiv	;wreg free
  2975  0014A4  0E09               	movlw	9
  2976  0014A6  2407               	addwf	?___awdiv,w,c
  2977  0014A8  6E0F               	movwf	___wmul@multiplier,c
  2978  0014AA  0E00               	movlw	0
  2979  0014AC  2008               	addwfc	?___awdiv+1,w,c
  2980  0014AE  6E10               	movwf	___wmul@multiplier+1,c
  2981  0014B0  0E00               	movlw	0
  2982  0014B2  6E12               	movwf	___wmul@multiplicand+1,c
  2983  0014B4  0E03               	movlw	3
  2984  0014B6  6E11               	movwf	___wmul@multiplicand,c
  2985  0014B8  EC90  F011         	call	___wmul	;wreg free
  2986  0014BC  0E50               	movlw	low __npowers_
  2987  0014BE  240F               	addwf	?___wmul,w,c
  2988  0014C0  6EF6               	movwf	tblptrl,c
  2989  0014C2  0E06               	movlw	high __npowers_
  2990  0014C4  2010               	addwfc	?___wmul+1,w,c
  2991  0014C6  6EF7               	movwf	tblptrh,c
  2992  0014C8                     	if	0	;There are less than 3 active tblptr bytes
  2993  0014C8                     	endif
  2994  0014C8  0009               	tblrd		*+
  2995  0014CA  CFF5 F015          	movff	tablat,___ftmul@f1
  2996  0014CE  0009               	tblrd		*+
  2997  0014D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2998  0014D4  000A               	tblrd		*-
  2999  0014D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3000  0014DA  EC33  F00D         	call	___ftmul	;wreg free
  3001  0014DE  C015  F02A         	movff	?___ftmul,_fround$938
  3002  0014E2  C016  F02B         	movff	?___ftmul+1,_fround$938+1
  3003  0014E6  C017  F02C         	movff	?___ftmul+2,_fround$938+2
  3004                           
  3005                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3006  0014EA  C02A  F015         	movff	_fround$938,___ftmul@f1
  3007  0014EE  C02B  F016         	movff	_fround$938+1,___ftmul@f1+1
  3008  0014F2  C02C  F017         	movff	_fround$938+2,___ftmul@f1+2
  3009  0014F6  0E00               	movlw	0
  3010  0014F8  6E18               	movwf	___ftmul@f2,c
  3011  0014FA  0E00               	movlw	0
  3012  0014FC  6E19               	movwf	___ftmul@f2+1,c
  3013  0014FE  0E3F               	movlw	63
  3014  001500  6E1A               	movwf	___ftmul@f2+2,c
  3015  001502  EC33  F00D         	call	___ftmul	;wreg free
  3016  001506  C015  F024         	movff	?___ftmul,?_fround
  3017  00150A  C016  F025         	movff	?___ftmul+1,?_fround+1
  3018  00150E  C017  F026         	movff	?___ftmul+2,?_fround+2
  3019  001512  0012               	return	
  3020  001514                     l140:
  3021                           
  3022                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3023  001514  502D               	movf	fround@prec,w,c
  3024  001516  0D03               	mullw	3
  3025  001518  0E50               	movlw	low __npowers_
  3026  00151A  24F3               	addwf	prodl,w,c
  3027  00151C  6EF6               	movwf	tblptrl,c
  3028  00151E  0E06               	movlw	high __npowers_
  3029  001520  20F4               	addwfc	prodh,w,c
  3030  001522  6EF7               	movwf	tblptrh,c
  3031  001524                     	if	0	;There are less than 3 active tblptr bytes
  3032  001524                     	endif
  3033  001524  0009               	tblrd		*+
  3034  001526  CFF5 F015          	movff	tablat,___ftmul@f1
  3035  00152A  0009               	tblrd		*+
  3036  00152C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3037  001530  000A               	tblrd		*-
  3038  001532  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3039  001536  0E00               	movlw	0
  3040  001538  6E18               	movwf	___ftmul@f2,c
  3041  00153A  0E00               	movlw	0
  3042  00153C  6E19               	movwf	___ftmul@f2+1,c
  3043  00153E  0E3F               	movlw	63
  3044  001540  6E1A               	movwf	___ftmul@f2+2,c
  3045  001542  EC33  F00D         	call	___ftmul	;wreg free
  3046  001546  C015  F024         	movff	?___ftmul,?_fround
  3047  00154A  C016  F025         	movff	?___ftmul+1,?_fround+1
  3048  00154E  C017  F026         	movff	?___ftmul+2,?_fround+2
  3049  001552  0012               	return	
  3050  001554                     __end_of_fround:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           postinc0	equ	0xFEE
  3059                           wreg	equ	0xFE8
  3060                           indf2	equ	0xFDF
  3061                           postinc2	equ	0xFDE
  3062                           postdec2	equ	0xFDD
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function ___wmul *****************
  3068 ;; Defined at:
  3069 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  multiplier      2   14[COMRAM] unsigned int 
  3072 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  product         2   18[COMRAM] unsigned int 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  2   14[COMRAM] unsigned int 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0, prodl, prodh
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3084 ;;      Params:         4       0       0       0       0       0       0
  3085 ;;      Locals:         2       0       0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0
  3087 ;;      Totals:         6       0       0       0       0       0       0
  3088 ;;Total ram usage:        6 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_fround
  3094 ;;		_scale
  3095 ;;		_sprintf
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text5
  3100  002320                     __ptext5:
  3101                           	opt stack 0
  3102  002320                     ___wmul:
  3103                           	opt stack 28
  3104                           
  3105                           ;incstack = 0
  3106  002320  500F               	movf	___wmul@multiplier,w,c
  3107  002322  0211               	mulwf	___wmul@multiplicand,c
  3108  002324  CFF3 F013          	movff	prodl,___wmul@product
  3109  002328  CFF4 F014          	movff	prodh,___wmul@product+1
  3110  00232C  500F               	movf	___wmul@multiplier,w,c
  3111  00232E  0212               	mulwf	___wmul@multiplicand+1,c
  3112  002330  50F3               	movf	prodl,w,c
  3113  002332  2614               	addwf	___wmul@product+1,f,c
  3114  002334  5010               	movf	___wmul@multiplier+1,w,c
  3115  002336  0211               	mulwf	___wmul@multiplicand,c
  3116  002338  50F3               	movf	prodl,w,c
  3117  00233A  2614               	addwf	___wmul@product+1,f,c
  3118  00233C  C013  F00F         	movff	___wmul@product,?___wmul
  3119  002340  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3120  002344  0012               	return	
  3121  002346                     __end_of___wmul:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           indf2	equ	0xFDF
  3132                           postinc2	equ	0xFDE
  3133                           postdec2	equ	0xFDD
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function ___ftmul *****************
  3139 ;; Defined at:
  3140 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  f1              3   20[COMRAM] float 
  3143 ;;  f2              3   23[COMRAM] float 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3146 ;;  sign            1   34[COMRAM] unsigned char 
  3147 ;;  cntr            1   33[COMRAM] unsigned char 
  3148 ;;  exp             1   29[COMRAM] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  3   20[COMRAM] float 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         6       0       0       0       0       0       0
  3159 ;;      Locals:         6       0       0       0       0       0       0
  3160 ;;      Temps:          3       0       0       0       0       0       0
  3161 ;;      Totals:        15       0       0       0       0       0       0
  3162 ;;Total ram usage:       15 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    1
  3165 ;; This function calls:
  3166 ;;		___ftpack
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;;		_fround
  3170 ;;		_scale
  3171 ;;		_sprintf
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text6
  3176  001A66                     __ptext6:
  3177                           	opt stack 0
  3178  001A66                     ___ftmul:
  3179                           	opt stack 27
  3180                           
  3181                           ;incstack = 0
  3182  001A66  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3183  001A6A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3184  001A6C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3185  001A6E  3416               	rlcf	___ftmul@f1+1,w,c
  3186  001A70  361B               	rlcf	??___ftmul& (0+255),f,c
  3187  001A72  E301               	bnc	u1811
  3188  001A74  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3189  001A76                     u1811:
  3190  001A76  501B               	movf	??___ftmul,w,c
  3191  001A78  6E1E               	movwf	___ftmul@exp,c
  3192  001A7A  501E               	movf	___ftmul@exp,w,c
  3193  001A7C  A4D8               	btfss	status,2,c
  3194  001A7E  D007               	goto	l556
  3195  001A80  0E00               	movlw	0
  3196  001A82  6E15               	movwf	?___ftmul,c
  3197  001A84  0E00               	movlw	0
  3198  001A86  6E16               	movwf	?___ftmul+1,c
  3199  001A88  0E00               	movlw	0
  3200  001A8A  6E17               	movwf	?___ftmul+2,c
  3201  001A8C  0012               	return	
  3202  001A8E                     l556:
  3203  001A8E  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3204  001A92  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3205  001A94  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3206  001A96  3419               	rlcf	___ftmul@f2+1,w,c
  3207  001A98  361B               	rlcf	??___ftmul& (0+255),f,c
  3208  001A9A  E301               	bnc	u1831
  3209  001A9C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3210  001A9E                     u1831:
  3211  001A9E  501B               	movf	??___ftmul,w,c
  3212  001AA0  6E23               	movwf	___ftmul@sign,c
  3213  001AA2  5023               	movf	___ftmul@sign,w,c
  3214  001AA4  A4D8               	btfss	status,2,c
  3215  001AA6  D007               	goto	l558
  3216  001AA8  0E00               	movlw	0
  3217  001AAA  6E15               	movwf	?___ftmul,c
  3218  001AAC  0E00               	movlw	0
  3219  001AAE  6E16               	movwf	?___ftmul+1,c
  3220  001AB0  0E00               	movlw	0
  3221  001AB2  6E17               	movwf	?___ftmul+2,c
  3222  001AB4  0012               	return	
  3223  001AB6                     l558:
  3224  001AB6  5023               	movf	___ftmul@sign,w,c
  3225  001AB8  0F7B               	addlw	123
  3226  001ABA  261E               	addwf	___ftmul@exp,f,c
  3227  001ABC  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3228  001AC0  501A               	movf	___ftmul@f2+2,w,c
  3229  001AC2  1A23               	xorwf	___ftmul@sign,f,c
  3230  001AC4  0E80               	movlw	128
  3231  001AC6  1623               	andwf	___ftmul@sign,f,c
  3232  001AC8  8E16               	bsf	___ftmul@f1+1,7,c
  3233  001ACA  8E19               	bsf	___ftmul@f2+1,7,c
  3234  001ACC  0EFF               	movlw	255
  3235  001ACE  1618               	andwf	___ftmul@f2,f,c
  3236  001AD0  0EFF               	movlw	255
  3237  001AD2  1619               	andwf	___ftmul@f2+1,f,c
  3238  001AD4  0E00               	movlw	0
  3239  001AD6  161A               	andwf	___ftmul@f2+2,f,c
  3240  001AD8  0E00               	movlw	0
  3241  001ADA  6E1F               	movwf	___ftmul@f3_as_product,c
  3242  001ADC  0E00               	movlw	0
  3243  001ADE  6E20               	movwf	___ftmul@f3_as_product+1,c
  3244  001AE0  0E00               	movlw	0
  3245  001AE2  6E21               	movwf	___ftmul@f3_as_product+2,c
  3246  001AE4  0E07               	movlw	7
  3247  001AE6  6E22               	movwf	___ftmul@cntr,c
  3248  001AE8  A015               	btfss	___ftmul@f1,0,c
  3249  001AEA  D006               	goto	l560
  3250  001AEC  5018               	movf	___ftmul@f2,w,c
  3251  001AEE  261F               	addwf	___ftmul@f3_as_product,f,c
  3252  001AF0  5019               	movf	___ftmul@f2+1,w,c
  3253  001AF2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3254  001AF4  501A               	movf	___ftmul@f2+2,w,c
  3255  001AF6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3256  001AF8                     l560:
  3257  001AF8  90D8               	bcf	status,0,c
  3258  001AFA  3217               	rrcf	___ftmul@f1+2,f,c
  3259  001AFC  3216               	rrcf	___ftmul@f1+1,f,c
  3260  001AFE  3215               	rrcf	___ftmul@f1,f,c
  3261  001B00  90D8               	bcf	status,0,c
  3262  001B02  3618               	rlcf	___ftmul@f2,f,c
  3263  001B04  3619               	rlcf	___ftmul@f2+1,f,c
  3264  001B06  361A               	rlcf	___ftmul@f2+2,f,c
  3265  001B08  2E22               	decfsz	___ftmul@cntr,f,c
  3266  001B0A  D7EE               	goto	l559
  3267  001B0C  0E09               	movlw	9
  3268  001B0E  6E22               	movwf	___ftmul@cntr,c
  3269  001B10  A015               	btfss	___ftmul@f1,0,c
  3270  001B12  D006               	goto	l563
  3271  001B14  5018               	movf	___ftmul@f2,w,c
  3272  001B16  261F               	addwf	___ftmul@f3_as_product,f,c
  3273  001B18  5019               	movf	___ftmul@f2+1,w,c
  3274  001B1A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3275  001B1C  501A               	movf	___ftmul@f2+2,w,c
  3276  001B1E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3277  001B20                     l563:
  3278  001B20  90D8               	bcf	status,0,c
  3279  001B22  3217               	rrcf	___ftmul@f1+2,f,c
  3280  001B24  3216               	rrcf	___ftmul@f1+1,f,c
  3281  001B26  3215               	rrcf	___ftmul@f1,f,c
  3282  001B28  90D8               	bcf	status,0,c
  3283  001B2A  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3284  001B2C  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3285  001B2E  321F               	rrcf	___ftmul@f3_as_product,f,c
  3286  001B30  2E22               	decfsz	___ftmul@cntr,f,c
  3287  001B32  D7EE               	goto	l562
  3288  001B34  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3289  001B38  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3290  001B3C  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3291  001B40  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3292  001B44  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3293  001B48  ECF7  F00E         	call	___ftpack	;wreg free
  3294  001B4C  C001  F015         	movff	?___ftpack,?___ftmul
  3295  001B50  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3296  001B54  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3297  001B58  0012               	return	
  3298  001B5A                     __end_of___ftmul:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function ___awmod *****************
  3316 ;; Defined at:
  3317 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  dividend        2    0[COMRAM] int 
  3320 ;;  divisor         2    2[COMRAM] int 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  sign            1    5[COMRAM] unsigned char 
  3323 ;;  counter         1    4[COMRAM] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  2    0[COMRAM] int 
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3333 ;;      Params:         4       0       0       0       0       0       0
  3334 ;;      Locals:         2       0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0
  3336 ;;      Totals:         6       0       0       0       0       0       0
  3337 ;;Total ram usage:        6 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_fround
  3343 ;;		_scale
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text7
  3348  002032                     __ptext7:
  3349                           	opt stack 0
  3350  002032                     ___awmod:
  3351                           	opt stack 28
  3352                           
  3353                           ;incstack = 0
  3354  002032  0E00               	movlw	0
  3355  002034  6E06               	movwf	___awmod@sign,c
  3356  002036  AE02               	btfss	___awmod@dividend+1,7,c
  3357  002038  D006               	goto	l409
  3358  00203A  6C01               	negf	___awmod@dividend,c
  3359  00203C  1E02               	comf	___awmod@dividend+1,f,c
  3360  00203E  B0D8               	btfsc	status,0,c
  3361  002040  2A02               	incf	___awmod@dividend+1,f,c
  3362  002042  0E01               	movlw	1
  3363  002044  6E06               	movwf	___awmod@sign,c
  3364  002046                     l409:
  3365  002046  AE04               	btfss	___awmod@divisor+1,7,c
  3366  002048  D004               	goto	l410
  3367  00204A  6C03               	negf	___awmod@divisor,c
  3368  00204C  1E04               	comf	___awmod@divisor+1,f,c
  3369  00204E  B0D8               	btfsc	status,0,c
  3370  002050  2A04               	incf	___awmod@divisor+1,f,c
  3371  002052                     l410:
  3372  002052  5003               	movf	___awmod@divisor,w,c
  3373  002054  1004               	iorwf	___awmod@divisor+1,w,c
  3374  002056  B4D8               	btfsc	status,2,c
  3375  002058  D018               	goto	l417
  3376  00205A  0E01               	movlw	1
  3377  00205C  6E05               	movwf	___awmod@counter,c
  3378  00205E  D004               	goto	l412
  3379  002060  90D8               	bcf	status,0,c
  3380  002062  3603               	rlcf	___awmod@divisor,f,c
  3381  002064  3604               	rlcf	___awmod@divisor+1,f,c
  3382  002066  2A05               	incf	___awmod@counter,f,c
  3383  002068                     l412:
  3384  002068  AE04               	btfss	___awmod@divisor+1,7,c
  3385  00206A  D7FA               	goto	l413
  3386  00206C                     u1960:
  3387  00206C  5003               	movf	___awmod@divisor,w,c
  3388  00206E  5C01               	subwf	___awmod@dividend,w,c
  3389  002070  5004               	movf	___awmod@divisor+1,w,c
  3390  002072  5802               	subwfb	___awmod@dividend+1,w,c
  3391  002074  A0D8               	btfss	status,0,c
  3392  002076  D004               	goto	l416
  3393  002078  5003               	movf	___awmod@divisor,w,c
  3394  00207A  5E01               	subwf	___awmod@dividend,f,c
  3395  00207C  5004               	movf	___awmod@divisor+1,w,c
  3396  00207E  5A02               	subwfb	___awmod@dividend+1,f,c
  3397  002080                     l416:
  3398  002080  90D8               	bcf	status,0,c
  3399  002082  3204               	rrcf	___awmod@divisor+1,f,c
  3400  002084  3203               	rrcf	___awmod@divisor,f,c
  3401  002086  2E05               	decfsz	___awmod@counter,f,c
  3402  002088  D7F1               	goto	u1960
  3403  00208A                     l417:
  3404  00208A  5006               	movf	___awmod@sign,w,c
  3405  00208C  B4D8               	btfsc	status,2,c
  3406  00208E  D004               	goto	l418
  3407  002090  6C01               	negf	___awmod@dividend,c
  3408  002092  1E02               	comf	___awmod@dividend+1,f,c
  3409  002094  B0D8               	btfsc	status,0,c
  3410  002096  2A02               	incf	___awmod@dividend+1,f,c
  3411  002098                     l418:
  3412  002098  C001  F001         	movff	___awmod@dividend,?___awmod
  3413  00209C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3414  0020A0  0012               	return	
  3415  0020A2                     __end_of___awmod:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           postinc0	equ	0xFEE
  3424                           wreg	equ	0xFE8
  3425                           indf2	equ	0xFDF
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function ___awdiv *****************
  3433 ;; Defined at:
  3434 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  dividend        2    6[COMRAM] int 
  3437 ;;  divisor         2    8[COMRAM] int 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  quotient        2   12[COMRAM] int 
  3440 ;;  sign            1   11[COMRAM] unsigned char 
  3441 ;;  counter         1   10[COMRAM] unsigned char 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  2    6[COMRAM] int 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3451 ;;      Params:         4       0       0       0       0       0       0
  3452 ;;      Locals:         4       0       0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0
  3454 ;;      Totals:         8       0       0       0       0       0       0
  3455 ;;Total ram usage:        8 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_fround
  3461 ;;		_scale
  3462 ;;		_sprintf
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text8
  3467  001F2C                     __ptext8:
  3468                           	opt stack 0
  3469  001F2C                     ___awdiv:
  3470                           	opt stack 28
  3471                           
  3472                           ;incstack = 0
  3473  001F2C  0E00               	movlw	0
  3474  001F2E  6E0C               	movwf	___awdiv@sign,c
  3475  001F30  AE0A               	btfss	___awdiv@divisor+1,7,c
  3476  001F32  D006               	goto	l396
  3477  001F34  6C09               	negf	___awdiv@divisor,c
  3478  001F36  1E0A               	comf	___awdiv@divisor+1,f,c
  3479  001F38  B0D8               	btfsc	status,0,c
  3480  001F3A  2A0A               	incf	___awdiv@divisor+1,f,c
  3481  001F3C  0E01               	movlw	1
  3482  001F3E  6E0C               	movwf	___awdiv@sign,c
  3483  001F40                     l396:
  3484  001F40  AE08               	btfss	___awdiv@dividend+1,7,c
  3485  001F42  D006               	goto	l397
  3486  001F44  6C07               	negf	___awdiv@dividend,c
  3487  001F46  1E08               	comf	___awdiv@dividend+1,f,c
  3488  001F48  B0D8               	btfsc	status,0,c
  3489  001F4A  2A08               	incf	___awdiv@dividend+1,f,c
  3490  001F4C  0E01               	movlw	1
  3491  001F4E  1A0C               	xorwf	___awdiv@sign,f,c
  3492  001F50                     l397:
  3493  001F50  0E00               	movlw	0
  3494  001F52  6E0E               	movwf	___awdiv@quotient+1,c
  3495  001F54  0E00               	movlw	0
  3496  001F56  6E0D               	movwf	___awdiv@quotient,c
  3497  001F58  5009               	movf	___awdiv@divisor,w,c
  3498  001F5A  100A               	iorwf	___awdiv@divisor+1,w,c
  3499  001F5C  B4D8               	btfsc	status,2,c
  3500  001F5E  D01C               	goto	l404
  3501  001F60  0E01               	movlw	1
  3502  001F62  6E0B               	movwf	___awdiv@counter,c
  3503  001F64  D004               	goto	l399
  3504  001F66  90D8               	bcf	status,0,c
  3505  001F68  3609               	rlcf	___awdiv@divisor,f,c
  3506  001F6A  360A               	rlcf	___awdiv@divisor+1,f,c
  3507  001F6C  2A0B               	incf	___awdiv@counter,f,c
  3508  001F6E                     l399:
  3509  001F6E  AE0A               	btfss	___awdiv@divisor+1,7,c
  3510  001F70  D7FA               	goto	l400
  3511  001F72                     u1900:
  3512  001F72  90D8               	bcf	status,0,c
  3513  001F74  360D               	rlcf	___awdiv@quotient,f,c
  3514  001F76  360E               	rlcf	___awdiv@quotient+1,f,c
  3515  001F78  5009               	movf	___awdiv@divisor,w,c
  3516  001F7A  5C07               	subwf	___awdiv@dividend,w,c
  3517  001F7C  500A               	movf	___awdiv@divisor+1,w,c
  3518  001F7E  5808               	subwfb	___awdiv@dividend+1,w,c
  3519  001F80  A0D8               	btfss	status,0,c
  3520  001F82  D005               	goto	l403
  3521  001F84  5009               	movf	___awdiv@divisor,w,c
  3522  001F86  5E07               	subwf	___awdiv@dividend,f,c
  3523  001F88  500A               	movf	___awdiv@divisor+1,w,c
  3524  001F8A  5A08               	subwfb	___awdiv@dividend+1,f,c
  3525  001F8C  800D               	bsf	___awdiv@quotient,0,c
  3526  001F8E                     l403:
  3527  001F8E  90D8               	bcf	status,0,c
  3528  001F90  320A               	rrcf	___awdiv@divisor+1,f,c
  3529  001F92  3209               	rrcf	___awdiv@divisor,f,c
  3530  001F94  2E0B               	decfsz	___awdiv@counter,f,c
  3531  001F96  D7ED               	goto	u1900
  3532  001F98                     l404:
  3533  001F98  500C               	movf	___awdiv@sign,w,c
  3534  001F9A  B4D8               	btfsc	status,2,c
  3535  001F9C  D004               	goto	l405
  3536  001F9E  6C0D               	negf	___awdiv@quotient,c
  3537  001FA0  1E0E               	comf	___awdiv@quotient+1,f,c
  3538  001FA2  B0D8               	btfsc	status,0,c
  3539  001FA4  2A0E               	incf	___awdiv@quotient+1,f,c
  3540  001FA6                     l405:
  3541  001FA6  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3542  001FAA  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3543  001FAE  0012               	return	
  3544  001FB0                     __end_of___awdiv:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function __tdiv_to_l_ *****************
  3562 ;; Defined at:
  3563 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/ftdivl.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  f1              3    0[COMRAM] float 
  3566 ;;  f2              3    3[COMRAM] float 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  quot            4    9[COMRAM] unsigned long 
  3569 ;;  exp1            1   14[COMRAM] unsigned char 
  3570 ;;  cntr            1   13[COMRAM] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  4    0[COMRAM] unsigned long 
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3580 ;;      Params:         6       0       0       0       0       0       0
  3581 ;;      Locals:         6       0       0       0       0       0       0
  3582 ;;      Temps:          3       0       0       0       0       0       0
  3583 ;;      Totals:        15       0       0       0       0       0       0
  3584 ;;Total ram usage:       15 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_sprintf
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text9
  3594  001700                     __ptext9:
  3595                           	opt stack 0
  3596  001700                     __tdiv_to_l_:
  3597                           	opt stack 29
  3598                           
  3599                           ;incstack = 0
  3600  001700  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3601  001704  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3602  001706  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3603  001708  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3604  00170A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3605  00170C  E301               	bnc	u2081
  3606  00170E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3607  001710                     u2081:
  3608  001710  5007               	movf	??__tdiv_to_l_,w,c
  3609  001712  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3610  001714  500F               	movf	__tdiv_to_l_@exp1,w,c
  3611  001716  A4D8               	btfss	status,2,c
  3612  001718  D009               	goto	l532
  3613  00171A  0E00               	movlw	0
  3614  00171C  6E01               	movwf	?__tdiv_to_l_,c
  3615  00171E  0E00               	movlw	0
  3616  001720  6E02               	movwf	?__tdiv_to_l_+1,c
  3617  001722  0E00               	movlw	0
  3618  001724  6E03               	movwf	?__tdiv_to_l_+2,c
  3619  001726  0E00               	movlw	0
  3620  001728  6E04               	movwf	?__tdiv_to_l_+3,c
  3621  00172A  0012               	return	
  3622  00172C                     l532:
  3623  00172C  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3624  001730  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3625  001732  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3626  001734  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3627  001736  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3628  001738  E301               	bnc	u2101
  3629  00173A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3630  00173C                     u2101:
  3631  00173C  5007               	movf	??__tdiv_to_l_,w,c
  3632  00173E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3633  001740  500E               	movf	__tdiv_to_l_@cntr,w,c
  3634  001742  A4D8               	btfss	status,2,c
  3635  001744  D009               	goto	l534
  3636  001746  0E00               	movlw	0
  3637  001748  6E01               	movwf	?__tdiv_to_l_,c
  3638  00174A  0E00               	movlw	0
  3639  00174C  6E02               	movwf	?__tdiv_to_l_+1,c
  3640  00174E  0E00               	movlw	0
  3641  001750  6E03               	movwf	?__tdiv_to_l_+2,c
  3642  001752  0E00               	movlw	0
  3643  001754  6E04               	movwf	?__tdiv_to_l_+3,c
  3644  001756  0012               	return	
  3645  001758                     l534:
  3646  001758  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3647  00175A  0EFF               	movlw	255
  3648  00175C  1601               	andwf	__tdiv_to_l_@f1,f,c
  3649  00175E  0EFF               	movlw	255
  3650  001760  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3651  001762  0E00               	movlw	0
  3652  001764  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3653  001766  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3654  001768  0EFF               	movlw	255
  3655  00176A  1604               	andwf	__tdiv_to_l_@f2,f,c
  3656  00176C  0EFF               	movlw	255
  3657  00176E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3658  001770  0E00               	movlw	0
  3659  001772  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3660  001774  0E00               	movlw	0
  3661  001776  6E0A               	movwf	__tdiv_to_l_@quot,c
  3662  001778  0E00               	movlw	0
  3663  00177A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3664  00177C  0E00               	movlw	0
  3665  00177E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3666  001780  0E00               	movlw	0
  3667  001782  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3668  001784  0E7F               	movlw	127
  3669  001786  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3670  001788  500E               	movf	__tdiv_to_l_@cntr,w,c
  3671  00178A  0F98               	addlw	152
  3672  00178C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3673  00178E  0E18               	movlw	24
  3674  001790  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3675  001792                     l535:
  3676  001792  90D8               	bcf	status,0,c
  3677  001794  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3678  001796  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3679  001798  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3680  00179A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3681  00179C  5004               	movf	__tdiv_to_l_@f2,w,c
  3682  00179E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3683  0017A0  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3684  0017A2  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3685  0017A4  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3686  0017A6  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3687  0017A8  A0D8               	btfss	status,0,c
  3688  0017AA  D007               	goto	l536
  3689  0017AC  5004               	movf	__tdiv_to_l_@f2,w,c
  3690  0017AE  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3691  0017B0  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3692  0017B2  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3693  0017B4  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3694  0017B6  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3695  0017B8  800A               	bsf	__tdiv_to_l_@quot,0,c
  3696  0017BA                     l536:
  3697  0017BA  90D8               	bcf	status,0,c
  3698  0017BC  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3699  0017BE  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3700  0017C0  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3701  0017C2  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3702  0017C4  D7E6               	goto	l535
  3703  0017C6  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3704  0017C8  D016               	goto	l538
  3705  0017CA  500F               	movf	__tdiv_to_l_@exp1,w,c
  3706  0017CC  0A80               	xorlw	128
  3707  0017CE  0F97               	addlw	151
  3708  0017D0  B0D8               	btfsc	status,0,c
  3709  0017D2  D009               	goto	l539
  3710  0017D4  0E00               	movlw	0
  3711  0017D6  6E01               	movwf	?__tdiv_to_l_,c
  3712  0017D8  0E00               	movlw	0
  3713  0017DA  6E02               	movwf	?__tdiv_to_l_+1,c
  3714  0017DC  0E00               	movlw	0
  3715  0017DE  6E03               	movwf	?__tdiv_to_l_+2,c
  3716  0017E0  0E00               	movlw	0
  3717  0017E2  6E04               	movwf	?__tdiv_to_l_+3,c
  3718  0017E4  0012               	return	
  3719  0017E6                     l539:
  3720  0017E6  90D8               	bcf	status,0,c
  3721  0017E8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3722  0017EA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3723  0017EC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3724  0017EE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3725  0017F0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3726  0017F2  D7F9               	goto	l539
  3727  0017F4  D015               	goto	u2160
  3728  0017F6                     l538:
  3729  0017F6  0E17               	movlw	23
  3730  0017F8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3731  0017FA  D00F               	goto	l544
  3732  0017FC  0E00               	movlw	0
  3733  0017FE  6E01               	movwf	?__tdiv_to_l_,c
  3734  001800  0E00               	movlw	0
  3735  001802  6E02               	movwf	?__tdiv_to_l_+1,c
  3736  001804  0E00               	movlw	0
  3737  001806  6E03               	movwf	?__tdiv_to_l_+2,c
  3738  001808  0E00               	movlw	0
  3739  00180A  6E04               	movwf	?__tdiv_to_l_+3,c
  3740  00180C  0012               	return	
  3741  00180E  90D8               	bcf	status,0,c
  3742  001810  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3743  001812  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3744  001814  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3745  001816  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3746  001818  060F               	decf	__tdiv_to_l_@exp1,f,c
  3747  00181A                     l544:
  3748  00181A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3749  00181C  A4D8               	btfss	status,2,c
  3750  00181E  D7F7               	goto	l545
  3751  001820                     u2160:
  3752  001820  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3753  001824  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3754  001828  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3755  00182C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3756  001830  0012               	return		;funcret
  3757  001832                     __end_of__tdiv_to_l_:
  3758                           	opt stack 0
  3759                           tblptru	equ	0xFF8
  3760                           tblptrh	equ	0xFF7
  3761                           tblptrl	equ	0xFF6
  3762                           tablat	equ	0xFF5
  3763                           prodh	equ	0xFF4
  3764                           prodl	equ	0xFF3
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function __div_to_l_ *****************
  3775 ;; Defined at:
  3776 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/fldivl.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;  f1              3    0[COMRAM] unsigned long 
  3779 ;;  f2              3    3[COMRAM] unsigned long 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  quot            4    6[COMRAM] unsigned long 
  3782 ;;  exp1            1   11[COMRAM] unsigned char 
  3783 ;;  cntr            1   10[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  4    0[COMRAM] unsigned long 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3793 ;;      Params:         6       0       0       0       0       0       0
  3794 ;;      Locals:         6       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0
  3796 ;;      Totals:        12       0       0       0       0       0       0
  3797 ;;Total ram usage:       12 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_sprintf
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text10
  3807  001832                     __ptext10:
  3808                           	opt stack 0
  3809  001832                     __div_to_l_:
  3810                           	opt stack 29
  3811                           
  3812                           ;incstack = 0
  3813  001832  3403               	rlcf	__div_to_l_@f1+2,w,c
  3814  001834  3404               	rlcf	__div_to_l_@f1+3,w,c
  3815  001836  6E0C               	movwf	__div_to_l_@exp1,c
  3816  001838  500C               	movf	__div_to_l_@exp1,w,c
  3817  00183A  A4D8               	btfss	status,2,c
  3818  00183C  D009               	goto	l428
  3819  00183E  0E00               	movlw	0
  3820  001840  6E01               	movwf	?__div_to_l_,c
  3821  001842  0E00               	movlw	0
  3822  001844  6E02               	movwf	?__div_to_l_+1,c
  3823  001846  0E00               	movlw	0
  3824  001848  6E03               	movwf	?__div_to_l_+2,c
  3825  00184A  0E00               	movlw	0
  3826  00184C  6E04               	movwf	?__div_to_l_+3,c
  3827  00184E  0012               	return	
  3828  001850                     l428:
  3829  001850  3406               	rlcf	__div_to_l_@f2+2,w,c
  3830  001852  3407               	rlcf	__div_to_l_@f2+3,w,c
  3831  001854  6E0B               	movwf	__div_to_l_@cntr,c
  3832  001856  500B               	movf	__div_to_l_@cntr,w,c
  3833  001858  A4D8               	btfss	status,2,c
  3834  00185A  D009               	goto	l430
  3835  00185C  0E00               	movlw	0
  3836  00185E  6E01               	movwf	?__div_to_l_,c
  3837  001860  0E00               	movlw	0
  3838  001862  6E02               	movwf	?__div_to_l_+1,c
  3839  001864  0E00               	movlw	0
  3840  001866  6E03               	movwf	?__div_to_l_+2,c
  3841  001868  0E00               	movlw	0
  3842  00186A  6E04               	movwf	?__div_to_l_+3,c
  3843  00186C  0012               	return	
  3844  00186E                     l430:
  3845  00186E  8E03               	bsf	__div_to_l_@f1+2,7,c
  3846  001870  0EFF               	movlw	255
  3847  001872  1601               	andwf	__div_to_l_@f1,f,c
  3848  001874  0EFF               	movlw	255
  3849  001876  1602               	andwf	__div_to_l_@f1+1,f,c
  3850  001878  0EFF               	movlw	255
  3851  00187A  1603               	andwf	__div_to_l_@f1+2,f,c
  3852  00187C  0E00               	movlw	0
  3853  00187E  1604               	andwf	__div_to_l_@f1+3,f,c
  3854  001880  8E06               	bsf	__div_to_l_@f2+2,7,c
  3855  001882  0EFF               	movlw	255
  3856  001884  1604               	andwf	__div_to_l_@f2,f,c
  3857  001886  0EFF               	movlw	255
  3858  001888  1605               	andwf	__div_to_l_@f2+1,f,c
  3859  00188A  0EFF               	movlw	255
  3860  00188C  1606               	andwf	__div_to_l_@f2+2,f,c
  3861  00188E  0E00               	movlw	0
  3862  001890  1607               	andwf	__div_to_l_@f2+3,f,c
  3863  001892  0E00               	movlw	0
  3864  001894  6E07               	movwf	__div_to_l_@quot,c
  3865  001896  0E00               	movlw	0
  3866  001898  6E08               	movwf	__div_to_l_@quot+1,c
  3867  00189A  0E00               	movlw	0
  3868  00189C  6E09               	movwf	__div_to_l_@quot+2,c
  3869  00189E  0E00               	movlw	0
  3870  0018A0  6E0A               	movwf	__div_to_l_@quot+3,c
  3871  0018A2  0E7F               	movlw	127
  3872  0018A4  5E0C               	subwf	__div_to_l_@exp1,f,c
  3873  0018A6  500B               	movf	__div_to_l_@cntr,w,c
  3874  0018A8  0FA0               	addlw	160
  3875  0018AA  5E0C               	subwf	__div_to_l_@exp1,f,c
  3876  0018AC  0E20               	movlw	32
  3877  0018AE  6E0B               	movwf	__div_to_l_@cntr,c
  3878  0018B0  90D8               	bcf	status,0,c
  3879  0018B2  3607               	rlcf	__div_to_l_@quot,f,c
  3880  0018B4  3608               	rlcf	__div_to_l_@quot+1,f,c
  3881  0018B6  3609               	rlcf	__div_to_l_@quot+2,f,c
  3882  0018B8  360A               	rlcf	__div_to_l_@quot+3,f,c
  3883  0018BA  5004               	movf	__div_to_l_@f2,w,c
  3884  0018BC  5C01               	subwf	__div_to_l_@f1,w,c
  3885  0018BE  5005               	movf	__div_to_l_@f2+1,w,c
  3886  0018C0  5802               	subwfb	__div_to_l_@f1+1,w,c
  3887  0018C2  5006               	movf	__div_to_l_@f2+2,w,c
  3888  0018C4  5803               	subwfb	__div_to_l_@f1+2,w,c
  3889  0018C6  5007               	movf	__div_to_l_@f2+3,w,c
  3890  0018C8  5804               	subwfb	__div_to_l_@f1+3,w,c
  3891  0018CA  A0D8               	btfss	status,0,c
  3892  0018CC  D009               	goto	l432
  3893  0018CE  5004               	movf	__div_to_l_@f2,w,c
  3894  0018D0  5E01               	subwf	__div_to_l_@f1,f,c
  3895  0018D2  5005               	movf	__div_to_l_@f2+1,w,c
  3896  0018D4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3897  0018D6  5006               	movf	__div_to_l_@f2+2,w,c
  3898  0018D8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3899  0018DA  5007               	movf	__div_to_l_@f2+3,w,c
  3900  0018DC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3901  0018DE  8007               	bsf	__div_to_l_@quot,0,c
  3902  0018E0                     l432:
  3903  0018E0  90D8               	bcf	status,0,c
  3904  0018E2  3601               	rlcf	__div_to_l_@f1,f,c
  3905  0018E4  3602               	rlcf	__div_to_l_@f1+1,f,c
  3906  0018E6  3603               	rlcf	__div_to_l_@f1+2,f,c
  3907  0018E8  3604               	rlcf	__div_to_l_@f1+3,f,c
  3908  0018EA  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3909  0018EC  D7E1               	goto	l431
  3910  0018EE  AE0C               	btfss	__div_to_l_@exp1,7,c
  3911  0018F0  D016               	goto	l434
  3912  0018F2  500C               	movf	__div_to_l_@exp1,w,c
  3913  0018F4  0A80               	xorlw	128
  3914  0018F6  0F9F               	addlw	159
  3915  0018F8  B0D8               	btfsc	status,0,c
  3916  0018FA  D009               	goto	l435
  3917  0018FC  0E00               	movlw	0
  3918  0018FE  6E01               	movwf	?__div_to_l_,c
  3919  001900  0E00               	movlw	0
  3920  001902  6E02               	movwf	?__div_to_l_+1,c
  3921  001904  0E00               	movlw	0
  3922  001906  6E03               	movwf	?__div_to_l_+2,c
  3923  001908  0E00               	movlw	0
  3924  00190A  6E04               	movwf	?__div_to_l_+3,c
  3925  00190C  0012               	return	
  3926  00190E                     l435:
  3927  00190E  90D8               	bcf	status,0,c
  3928  001910  320A               	rrcf	__div_to_l_@quot+3,f,c
  3929  001912  3209               	rrcf	__div_to_l_@quot+2,f,c
  3930  001914  3208               	rrcf	__div_to_l_@quot+1,f,c
  3931  001916  3207               	rrcf	__div_to_l_@quot,f,c
  3932  001918  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3933  00191A  D7F9               	goto	l435
  3934  00191C  D015               	goto	u2230
  3935  00191E                     l434:
  3936  00191E  0E1F               	movlw	31
  3937  001920  640C               	cpfsgt	__div_to_l_@exp1,c
  3938  001922  D00F               	goto	l440
  3939  001924  0E00               	movlw	0
  3940  001926  6E01               	movwf	?__div_to_l_,c
  3941  001928  0E00               	movlw	0
  3942  00192A  6E02               	movwf	?__div_to_l_+1,c
  3943  00192C  0E00               	movlw	0
  3944  00192E  6E03               	movwf	?__div_to_l_+2,c
  3945  001930  0E00               	movlw	0
  3946  001932  6E04               	movwf	?__div_to_l_+3,c
  3947  001934  0012               	return	
  3948  001936  90D8               	bcf	status,0,c
  3949  001938  3607               	rlcf	__div_to_l_@quot,f,c
  3950  00193A  3608               	rlcf	__div_to_l_@quot+1,f,c
  3951  00193C  3609               	rlcf	__div_to_l_@quot+2,f,c
  3952  00193E  360A               	rlcf	__div_to_l_@quot+3,f,c
  3953  001940  060C               	decf	__div_to_l_@exp1,f,c
  3954  001942                     l440:
  3955  001942  500C               	movf	__div_to_l_@exp1,w,c
  3956  001944  A4D8               	btfss	status,2,c
  3957  001946  D7F7               	goto	l441
  3958  001948                     u2230:
  3959  001948  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3960  00194C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3961  001950  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3962  001954  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3963  001958  0012               	return		;funcret
  3964  00195A                     __end_of__div_to_l_:
  3965                           	opt stack 0
  3966                           tblptru	equ	0xFF8
  3967                           tblptrh	equ	0xFF7
  3968                           tblptrl	equ	0xFF6
  3969                           tablat	equ	0xFF5
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           indf2	equ	0xFDF
  3975                           postinc2	equ	0xFDE
  3976                           postdec2	equ	0xFDD
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function ___lltoft *****************
  3982 ;; Defined at:
  3983 ;;		line 35 in file "/opt/microchip/xc8/v1.44/sources/common/lltoft.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  c               4    8[COMRAM] unsigned long 
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;  exp             1   16[COMRAM] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  3    8[COMRAM] float 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3997 ;;      Params:         4       0       0       0       0       0       0
  3998 ;;      Locals:         1       0       0       0       0       0       0
  3999 ;;      Temps:          4       0       0       0       0       0       0
  4000 ;;      Totals:         9       0       0       0       0       0       0
  4001 ;;Total ram usage:        9 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    1
  4004 ;; This function calls:
  4005 ;;		___ftpack
  4006 ;; This function is called by:
  4007 ;;		_sprintf
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text11
  4012  002108                     __ptext11:
  4013                           	opt stack 0
  4014  002108                     ___lltoft:
  4015                           	opt stack 28
  4016                           
  4017                           ;incstack = 0
  4018  002108  0E8E               	movlw	142
  4019  00210A  6E11               	movwf	___lltoft@exp,c
  4020  00210C  D006               	goto	l639
  4021  00210E  90D8               	bcf	status,0,c
  4022  002110  320C               	rrcf	___lltoft@c+3,f,c
  4023  002112  320B               	rrcf	___lltoft@c+2,f,c
  4024  002114  320A               	rrcf	___lltoft@c+1,f,c
  4025  002116  3209               	rrcf	___lltoft@c,f,c
  4026  002118  2A11               	incf	___lltoft@exp,f,c
  4027  00211A                     l639:
  4028  00211A  0E00               	movlw	0
  4029  00211C  1409               	andwf	___lltoft@c,w,c
  4030  00211E  6E0D               	movwf	??___lltoft& (0+255),c
  4031  002120  0E00               	movlw	0
  4032  002122  140A               	andwf	___lltoft@c+1,w,c
  4033  002124  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4034  002126  0E00               	movlw	0
  4035  002128  140B               	andwf	___lltoft@c+2,w,c
  4036  00212A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4037  00212C  0EFF               	movlw	255
  4038  00212E  140C               	andwf	___lltoft@c+3,w,c
  4039  002130  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4040  002132  500D               	movf	??___lltoft,w,c
  4041  002134  100E               	iorwf	??___lltoft+1,w,c
  4042  002136  100F               	iorwf	??___lltoft+2,w,c
  4043  002138  1010               	iorwf	??___lltoft+3,w,c
  4044  00213A  A4D8               	btfss	status,2,c
  4045  00213C  D7E8               	goto	l640
  4046  00213E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4047  002142  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4048  002146  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4049  00214A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4050  00214E  0E00               	movlw	0
  4051  002150  6E05               	movwf	___ftpack@sign,c
  4052  002152  ECF7  F00E         	call	___ftpack	;wreg free
  4053  002156  C001  F009         	movff	?___ftpack,?___lltoft
  4054  00215A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4055  00215E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4056  002162  0012               	return	
  4057  002164                     __end_of___lltoft:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           postinc0	equ	0xFEE
  4066                           wreg	equ	0xFE8
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function ___llmod *****************
  4075 ;; Defined at:
  4076 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/llmod.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  dividend        4    0[COMRAM] unsigned long 
  4079 ;;  divisor         4    4[COMRAM] unsigned long 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  counter         1    8[COMRAM] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  4    0[COMRAM] unsigned long 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4091 ;;      Params:         8       0       0       0       0       0       0
  4092 ;;      Locals:         1       0       0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0
  4094 ;;      Totals:         9       0       0       0       0       0       0
  4095 ;;Total ram usage:        9 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_sprintf
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text12
  4105  0020A2                     __ptext12:
  4106                           	opt stack 0
  4107  0020A2                     ___llmod:
  4108                           	opt stack 29
  4109                           
  4110                           ;incstack = 0
  4111  0020A2  5005               	movf	___llmod@divisor,w,c
  4112  0020A4  1006               	iorwf	___llmod@divisor+1,w,c
  4113  0020A6  1007               	iorwf	___llmod@divisor+2,w,c
  4114  0020A8  1008               	iorwf	___llmod@divisor+3,w,c
  4115  0020AA  B4D8               	btfsc	status,2,c
  4116  0020AC  D024               	goto	l633
  4117  0020AE  0E01               	movlw	1
  4118  0020B0  6E09               	movwf	___llmod@counter,c
  4119  0020B2  D006               	goto	l628
  4120  0020B4  90D8               	bcf	status,0,c
  4121  0020B6  3605               	rlcf	___llmod@divisor,f,c
  4122  0020B8  3606               	rlcf	___llmod@divisor+1,f,c
  4123  0020BA  3607               	rlcf	___llmod@divisor+2,f,c
  4124  0020BC  3608               	rlcf	___llmod@divisor+3,f,c
  4125  0020BE  2A09               	incf	___llmod@counter,f,c
  4126  0020C0                     l628:
  4127  0020C0  AE08               	btfss	___llmod@divisor+3,7,c
  4128  0020C2  D7F8               	goto	l629
  4129  0020C4                     u2410:
  4130  0020C4  5005               	movf	___llmod@divisor,w,c
  4131  0020C6  5C01               	subwf	___llmod@dividend,w,c
  4132  0020C8  5006               	movf	___llmod@divisor+1,w,c
  4133  0020CA  5802               	subwfb	___llmod@dividend+1,w,c
  4134  0020CC  5007               	movf	___llmod@divisor+2,w,c
  4135  0020CE  5803               	subwfb	___llmod@dividend+2,w,c
  4136  0020D0  5008               	movf	___llmod@divisor+3,w,c
  4137  0020D2  5804               	subwfb	___llmod@dividend+3,w,c
  4138  0020D4  A0D8               	btfss	status,0,c
  4139  0020D6  D008               	goto	l632
  4140  0020D8  5005               	movf	___llmod@divisor,w,c
  4141  0020DA  5E01               	subwf	___llmod@dividend,f,c
  4142  0020DC  5006               	movf	___llmod@divisor+1,w,c
  4143  0020DE  5A02               	subwfb	___llmod@dividend+1,f,c
  4144  0020E0  5007               	movf	___llmod@divisor+2,w,c
  4145  0020E2  5A03               	subwfb	___llmod@dividend+2,f,c
  4146  0020E4  5008               	movf	___llmod@divisor+3,w,c
  4147  0020E6  5A04               	subwfb	___llmod@dividend+3,f,c
  4148  0020E8                     l632:
  4149  0020E8  90D8               	bcf	status,0,c
  4150  0020EA  3208               	rrcf	___llmod@divisor+3,f,c
  4151  0020EC  3207               	rrcf	___llmod@divisor+2,f,c
  4152  0020EE  3206               	rrcf	___llmod@divisor+1,f,c
  4153  0020F0  3205               	rrcf	___llmod@divisor,f,c
  4154  0020F2  2E09               	decfsz	___llmod@counter,f,c
  4155  0020F4  D7E7               	goto	u2410
  4156  0020F6                     l633:
  4157  0020F6  C001  F001         	movff	___llmod@dividend,?___llmod
  4158  0020FA  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4159  0020FE  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4160  002102  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4161  002106  0012               	return		;funcret
  4162  002108                     __end_of___llmod:
  4163                           	opt stack 0
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           postinc0	equ	0xFEE
  4171                           wreg	equ	0xFE8
  4172                           indf2	equ	0xFDF
  4173                           postinc2	equ	0xFDE
  4174                           postdec2	equ	0xFDD
  4175                           fsr2h	equ	0xFDA
  4176                           fsr2l	equ	0xFD9
  4177                           status	equ	0xFD8
  4178                           
  4179 ;; *************** function ___lldiv *****************
  4180 ;; Defined at:
  4181 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lldiv.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  dividend        4    0[COMRAM] unsigned long 
  4184 ;;  divisor         4    4[COMRAM] unsigned long 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  quotient        4    8[COMRAM] unsigned long 
  4187 ;;  counter         1   12[COMRAM] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  4    0[COMRAM] unsigned long 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4197 ;;      Params:         8       0       0       0       0       0       0
  4198 ;;      Locals:         5       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0
  4200 ;;      Totals:        13       0       0       0       0       0       0
  4201 ;;Total ram usage:       13 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_sprintf
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text13
  4211  001FB0                     __ptext13:
  4212                           	opt stack 0
  4213  001FB0                     ___lldiv:
  4214                           	opt stack 29
  4215                           
  4216                           ;incstack = 0
  4217  001FB0  0E00               	movlw	0
  4218  001FB2  6E09               	movwf	___lldiv@quotient,c
  4219  001FB4  0E00               	movlw	0
  4220  001FB6  6E0A               	movwf	___lldiv@quotient+1,c
  4221  001FB8  0E00               	movlw	0
  4222  001FBA  6E0B               	movwf	___lldiv@quotient+2,c
  4223  001FBC  0E00               	movlw	0
  4224  001FBE  6E0C               	movwf	___lldiv@quotient+3,c
  4225  001FC0  5005               	movf	___lldiv@divisor,w,c
  4226  001FC2  1006               	iorwf	___lldiv@divisor+1,w,c
  4227  001FC4  1007               	iorwf	___lldiv@divisor+2,w,c
  4228  001FC6  1008               	iorwf	___lldiv@divisor+3,w,c
  4229  001FC8  B4D8               	btfsc	status,2,c
  4230  001FCA  D02A               	goto	l623
  4231  001FCC  0E01               	movlw	1
  4232  001FCE  6E0D               	movwf	___lldiv@counter,c
  4233  001FD0  D006               	goto	l618
  4234  001FD2  90D8               	bcf	status,0,c
  4235  001FD4  3605               	rlcf	___lldiv@divisor,f,c
  4236  001FD6  3606               	rlcf	___lldiv@divisor+1,f,c
  4237  001FD8  3607               	rlcf	___lldiv@divisor+2,f,c
  4238  001FDA  3608               	rlcf	___lldiv@divisor+3,f,c
  4239  001FDC  2A0D               	incf	___lldiv@counter,f,c
  4240  001FDE                     l618:
  4241  001FDE  AE08               	btfss	___lldiv@divisor+3,7,c
  4242  001FE0  D7F8               	goto	l619
  4243  001FE2                     u2380:
  4244  001FE2  90D8               	bcf	status,0,c
  4245  001FE4  3609               	rlcf	___lldiv@quotient,f,c
  4246  001FE6  360A               	rlcf	___lldiv@quotient+1,f,c
  4247  001FE8  360B               	rlcf	___lldiv@quotient+2,f,c
  4248  001FEA  360C               	rlcf	___lldiv@quotient+3,f,c
  4249  001FEC  5005               	movf	___lldiv@divisor,w,c
  4250  001FEE  5C01               	subwf	___lldiv@dividend,w,c
  4251  001FF0  5006               	movf	___lldiv@divisor+1,w,c
  4252  001FF2  5802               	subwfb	___lldiv@dividend+1,w,c
  4253  001FF4  5007               	movf	___lldiv@divisor+2,w,c
  4254  001FF6  5803               	subwfb	___lldiv@dividend+2,w,c
  4255  001FF8  5008               	movf	___lldiv@divisor+3,w,c
  4256  001FFA  5804               	subwfb	___lldiv@dividend+3,w,c
  4257  001FFC  A0D8               	btfss	status,0,c
  4258  001FFE  D009               	goto	l622
  4259  002000  5005               	movf	___lldiv@divisor,w,c
  4260  002002  5E01               	subwf	___lldiv@dividend,f,c
  4261  002004  5006               	movf	___lldiv@divisor+1,w,c
  4262  002006  5A02               	subwfb	___lldiv@dividend+1,f,c
  4263  002008  5007               	movf	___lldiv@divisor+2,w,c
  4264  00200A  5A03               	subwfb	___lldiv@dividend+2,f,c
  4265  00200C  5008               	movf	___lldiv@divisor+3,w,c
  4266  00200E  5A04               	subwfb	___lldiv@dividend+3,f,c
  4267  002010  8009               	bsf	___lldiv@quotient,0,c
  4268  002012                     l622:
  4269  002012  90D8               	bcf	status,0,c
  4270  002014  3208               	rrcf	___lldiv@divisor+3,f,c
  4271  002016  3207               	rrcf	___lldiv@divisor+2,f,c
  4272  002018  3206               	rrcf	___lldiv@divisor+1,f,c
  4273  00201A  3205               	rrcf	___lldiv@divisor,f,c
  4274  00201C  2E0D               	decfsz	___lldiv@counter,f,c
  4275  00201E  D7E1               	goto	u2380
  4276  002020                     l623:
  4277  002020  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4278  002024  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4279  002028  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4280  00202C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4281  002030  0012               	return		;funcret
  4282  002032                     __end_of___lldiv:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           indf2	equ	0xFDF
  4293                           postinc2	equ	0xFDE
  4294                           postdec2	equ	0xFDD
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function ___fttol *****************
  4300 ;; Defined at:
  4301 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  f1              3   42[COMRAM] float 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  lval            4   52[COMRAM] unsigned long 
  4306 ;;  exp1            1   56[COMRAM] unsigned char 
  4307 ;;  sign1           1   51[COMRAM] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  4   42[COMRAM] long 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4317 ;;      Params:         4       0       0       0       0       0       0
  4318 ;;      Locals:         6       0       0       0       0       0       0
  4319 ;;      Temps:          5       0       0       0       0       0       0
  4320 ;;      Totals:        15       0       0       0       0       0       0
  4321 ;;Total ram usage:       15 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		_sprintf
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text14
  4331  001B5A                     __ptext14:
  4332                           	opt stack 0
  4333  001B5A                     ___fttol:
  4334                           	opt stack 29
  4335                           
  4336                           ;incstack = 0
  4337  001B5A  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4338  001B5E  6A30               	clrf	(??___fttol+1)& (0+255),c
  4339  001B60  6A31               	clrf	(??___fttol+2)& (0+255),c
  4340  001B62  342C               	rlcf	___fttol@f1+1,w,c
  4341  001B64  362F               	rlcf	??___fttol& (0+255),f,c
  4342  001B66  E301               	bnc	u2291
  4343  001B68  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4344  001B6A                     u2291:
  4345  001B6A  502F               	movf	??___fttol,w,c
  4346  001B6C  6E39               	movwf	___fttol@exp1,c
  4347  001B6E  5039               	movf	___fttol@exp1,w,c
  4348  001B70  A4D8               	btfss	status,2,c
  4349  001B72  D009               	goto	l577
  4350  001B74  0E00               	movlw	0
  4351  001B76  6E2B               	movwf	?___fttol,c
  4352  001B78  0E00               	movlw	0
  4353  001B7A  6E2C               	movwf	?___fttol+1,c
  4354  001B7C  0E00               	movlw	0
  4355  001B7E  6E2D               	movwf	?___fttol+2,c
  4356  001B80  0E00               	movlw	0
  4357  001B82  6E2E               	movwf	?___fttol+3,c
  4358  001B84  0012               	return	
  4359  001B86                     l577:
  4360  001B86  0E17               	movlw	23
  4361  001B88  6E2F               	movwf	??___fttol& (0+255),c
  4362  001B8A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4363  001B8E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4364  001B92  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4365  001B96  282F               	incf	??___fttol,w,c
  4366  001B98  6E33               	movwf	(??___fttol+4)& (0+255),c
  4367  001B9A  D004               	goto	u2310
  4368  001B9C                     u2315:
  4369  001B9C  90D8               	bcf	status,0,c
  4370  001B9E  3232               	rrcf	??___fttol+3,f,c
  4371  001BA0  3231               	rrcf	??___fttol+2,f,c
  4372  001BA2  3230               	rrcf	??___fttol+1,f,c
  4373  001BA4                     u2310:
  4374  001BA4  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4375  001BA6  D7FA               	goto	u2315
  4376  001BA8  5030               	movf	??___fttol+1,w,c
  4377  001BAA  6E34               	movwf	___fttol@sign1,c
  4378  001BAC  8E2C               	bsf	___fttol@f1+1,7,c
  4379  001BAE  0EFF               	movlw	255
  4380  001BB0  162B               	andwf	___fttol@f1,f,c
  4381  001BB2  0EFF               	movlw	255
  4382  001BB4  162C               	andwf	___fttol@f1+1,f,c
  4383  001BB6  0E00               	movlw	0
  4384  001BB8  162D               	andwf	___fttol@f1+2,f,c
  4385  001BBA  502B               	movf	___fttol@f1,w,c
  4386  001BBC  6E35               	movwf	___fttol@lval,c
  4387  001BBE  502C               	movf	___fttol@f1+1,w,c
  4388  001BC0  6E36               	movwf	___fttol@lval+1,c
  4389  001BC2  502D               	movf	___fttol@f1+2,w,c
  4390  001BC4  6E37               	movwf	___fttol@lval+2,c
  4391  001BC6  6A38               	clrf	___fttol@lval+3,c
  4392  001BC8  0E8E               	movlw	142
  4393  001BCA  5E39               	subwf	___fttol@exp1,f,c
  4394  001BCC  AE39               	btfss	___fttol@exp1,7,c
  4395  001BCE  D016               	goto	l579
  4396  001BD0  5039               	movf	___fttol@exp1,w,c
  4397  001BD2  0A80               	xorlw	128
  4398  001BD4  0F8F               	addlw	143
  4399  001BD6  B0D8               	btfsc	status,0,c
  4400  001BD8  D009               	goto	l580
  4401  001BDA  0E00               	movlw	0
  4402  001BDC  6E2B               	movwf	?___fttol,c
  4403  001BDE  0E00               	movlw	0
  4404  001BE0  6E2C               	movwf	?___fttol+1,c
  4405  001BE2  0E00               	movlw	0
  4406  001BE4  6E2D               	movwf	?___fttol+2,c
  4407  001BE6  0E00               	movlw	0
  4408  001BE8  6E2E               	movwf	?___fttol+3,c
  4409  001BEA  0012               	return	
  4410  001BEC                     l580:
  4411  001BEC  90D8               	bcf	status,0,c
  4412  001BEE  3238               	rrcf	___fttol@lval+3,f,c
  4413  001BF0  3237               	rrcf	___fttol@lval+2,f,c
  4414  001BF2  3236               	rrcf	___fttol@lval+1,f,c
  4415  001BF4  3235               	rrcf	___fttol@lval,f,c
  4416  001BF6  3E39               	incfsz	___fttol@exp1,f,c
  4417  001BF8  D7F9               	goto	l580
  4418  001BFA  D015               	goto	u2350
  4419  001BFC                     l579:
  4420  001BFC  0E17               	movlw	23
  4421  001BFE  6439               	cpfsgt	___fttol@exp1,c
  4422  001C00  D00F               	goto	l585
  4423  001C02  0E00               	movlw	0
  4424  001C04  6E2B               	movwf	?___fttol,c
  4425  001C06  0E00               	movlw	0
  4426  001C08  6E2C               	movwf	?___fttol+1,c
  4427  001C0A  0E00               	movlw	0
  4428  001C0C  6E2D               	movwf	?___fttol+2,c
  4429  001C0E  0E00               	movlw	0
  4430  001C10  6E2E               	movwf	?___fttol+3,c
  4431  001C12  0012               	return	
  4432  001C14  90D8               	bcf	status,0,c
  4433  001C16  3635               	rlcf	___fttol@lval,f,c
  4434  001C18  3636               	rlcf	___fttol@lval+1,f,c
  4435  001C1A  3637               	rlcf	___fttol@lval+2,f,c
  4436  001C1C  3638               	rlcf	___fttol@lval+3,f,c
  4437  001C1E  0639               	decf	___fttol@exp1,f,c
  4438  001C20                     l585:
  4439  001C20  5039               	movf	___fttol@exp1,w,c
  4440  001C22  A4D8               	btfss	status,2,c
  4441  001C24  D7F7               	goto	l586
  4442  001C26                     u2350:
  4443  001C26  5034               	movf	___fttol@sign1,w,c
  4444  001C28  B4D8               	btfsc	status,2,c
  4445  001C2A  D008               	goto	l588
  4446  001C2C  1E38               	comf	___fttol@lval+3,f,c
  4447  001C2E  1E37               	comf	___fttol@lval+2,f,c
  4448  001C30  1E36               	comf	___fttol@lval+1,f,c
  4449  001C32  6C35               	negf	___fttol@lval,c
  4450  001C34  0E00               	movlw	0
  4451  001C36  2236               	addwfc	___fttol@lval+1,f,c
  4452  001C38  2237               	addwfc	___fttol@lval+2,f,c
  4453  001C3A  2238               	addwfc	___fttol@lval+3,f,c
  4454  001C3C                     l588:
  4455  001C3C  C035  F02B         	movff	___fttol@lval,?___fttol
  4456  001C40  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4457  001C44  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4458  001C48  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4459  001C4C  0012               	return	
  4460  001C4E                     __end_of___fttol:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function ___ftsub *****************
  4478 ;; Defined at:
  4479 ;;		line 20 in file "/opt/microchip/xc8/v1.44/sources/common/ftsub.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  f1              3   57[COMRAM] float 
  4482 ;;  f2              3   60[COMRAM] float 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  3   57[COMRAM] float 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4494 ;;      Params:         6       0       0       0       0       0       0
  4495 ;;      Locals:         0       0       0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0
  4497 ;;      Totals:         6       0       0       0       0       0       0
  4498 ;;Total ram usage:        6 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    2
  4501 ;; This function calls:
  4502 ;;		___ftadd
  4503 ;; This function is called by:
  4504 ;;		_main
  4505 ;;		_sprintf
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text15
  4510  002246                     __ptext15:
  4511                           	opt stack 0
  4512  002246                     ___ftsub:
  4513                           	opt stack 27
  4514                           
  4515                           ;incstack = 0
  4516  002246  503D               	movf	___ftsub@f2,w,c
  4517  002248  103E               	iorwf	___ftsub@f2+1,w,c
  4518  00224A  103F               	iorwf	___ftsub@f2+2,w,c
  4519  00224C  B4D8               	btfsc	status,2,c
  4520  00224E  D006               	goto	l573
  4521  002250  0E00               	movlw	0
  4522  002252  1A3D               	xorwf	___ftsub@f2,f,c
  4523  002254  0E00               	movlw	0
  4524  002256  1A3E               	xorwf	___ftsub@f2+1,f,c
  4525  002258  0E80               	movlw	128
  4526  00225A  1A3F               	xorwf	___ftsub@f2+2,f,c
  4527  00225C                     l573:
  4528  00225C  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4529  002260  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4530  002264  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4531  002268  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4532  00226C  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4533  002270  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4534  002274  ECAA  F00A         	call	___ftadd	;wreg free
  4535  002278  C02E  F03A         	movff	?___ftadd,?___ftsub
  4536  00227C  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4537  002280  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4538  002284  0012               	return	
  4539  002286                     __end_of___ftsub:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           postdec2	equ	0xFDD
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function ___ftadd *****************
  4557 ;; Defined at:
  4558 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  f1              3   45[COMRAM] float 
  4561 ;;  f2              3   48[COMRAM] float 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  exp1            1   56[COMRAM] unsigned char 
  4564 ;;  exp2            1   55[COMRAM] unsigned char 
  4565 ;;  sign            1   54[COMRAM] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  3   45[COMRAM] float 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4575 ;;      Params:         6       0       0       0       0       0       0
  4576 ;;      Locals:         3       0       0       0       0       0       0
  4577 ;;      Temps:          3       0       0       0       0       0       0
  4578 ;;      Totals:        12       0       0       0       0       0       0
  4579 ;;Total ram usage:       12 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    1
  4582 ;; This function calls:
  4583 ;;		___ftpack
  4584 ;; This function is called by:
  4585 ;;		_sprintf
  4586 ;;		___ftsub
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text16
  4591  001554                     __ptext16:
  4592                           	opt stack 0
  4593  001554                     ___ftadd:
  4594                           	opt stack 27
  4595                           
  4596                           ;incstack = 0
  4597  001554  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4598  001558  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4599  00155A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4600  00155C  342F               	rlcf	___ftadd@f1+1,w,c
  4601  00155E  3634               	rlcf	??___ftadd& (0+255),f,c
  4602  001560  E301               	bnc	u1601
  4603  001562  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4604  001564                     u1601:
  4605  001564  5034               	movf	??___ftadd,w,c
  4606  001566  6E39               	movwf	___ftadd@exp1,c
  4607  001568  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4608  00156C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4609  00156E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4610  001570  3432               	rlcf	___ftadd@f2+1,w,c
  4611  001572  3634               	rlcf	??___ftadd& (0+255),f,c
  4612  001574  E301               	bnc	u1611
  4613  001576  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4614  001578                     u1611:
  4615  001578  5034               	movf	??___ftadd,w,c
  4616  00157A  6E38               	movwf	___ftadd@exp2,c
  4617  00157C  5039               	movf	___ftadd@exp1,w,c
  4618  00157E  B4D8               	btfsc	status,2,c
  4619  001580  D00B               	goto	u1640
  4620  001582  5038               	movf	___ftadd@exp2,w,c
  4621  001584  5C39               	subwf	___ftadd@exp1,w,c
  4622  001586  B0D8               	btfsc	status,0,c
  4623  001588  D00E               	goto	l491
  4624  00158A  5039               	movf	___ftadd@exp1,w,c
  4625  00158C  0800               	sublw	0
  4626  00158E  2438               	addwf	___ftadd@exp2,w,c
  4627  001590  6E34               	movwf	??___ftadd& (0+255),c
  4628  001592  0E18               	movlw	24
  4629  001594  6434               	cpfsgt	??___ftadd,c
  4630  001596  D007               	goto	l491
  4631  001598                     u1640:
  4632  001598  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4633  00159C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4634  0015A0  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4635  0015A4  0012               	return	
  4636  0015A6                     l491:
  4637  0015A6  5038               	movf	___ftadd@exp2,w,c
  4638  0015A8  B4D8               	btfsc	status,2,c
  4639  0015AA  D00B               	goto	u1670
  4640  0015AC  5039               	movf	___ftadd@exp1,w,c
  4641  0015AE  5C38               	subwf	___ftadd@exp2,w,c
  4642  0015B0  B0D8               	btfsc	status,0,c
  4643  0015B2  D00E               	goto	l495
  4644  0015B4  5038               	movf	___ftadd@exp2,w,c
  4645  0015B6  0800               	sublw	0
  4646  0015B8  2439               	addwf	___ftadd@exp1,w,c
  4647  0015BA  6E34               	movwf	??___ftadd& (0+255),c
  4648  0015BC  0E18               	movlw	24
  4649  0015BE  6434               	cpfsgt	??___ftadd,c
  4650  0015C0  D007               	goto	l495
  4651  0015C2                     u1670:
  4652  0015C2  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4653  0015C6  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4654  0015CA  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4655  0015CE  0012               	return	
  4656  0015D0                     l495:
  4657  0015D0  0E06               	movlw	6
  4658  0015D2  6E37               	movwf	___ftadd@sign,c
  4659  0015D4  BE30               	btfsc	___ftadd@f1+2,7,c
  4660  0015D6  8E37               	bsf	___ftadd@sign,7,c
  4661  0015D8  BE33               	btfsc	___ftadd@f2+2,7,c
  4662  0015DA  8C37               	bsf	___ftadd@sign,6,c
  4663  0015DC  8E2F               	bsf	___ftadd@f1+1,7,c
  4664  0015DE  0EFF               	movlw	255
  4665  0015E0  162E               	andwf	___ftadd@f1,f,c
  4666  0015E2  0EFF               	movlw	255
  4667  0015E4  162F               	andwf	___ftadd@f1+1,f,c
  4668  0015E6  0E00               	movlw	0
  4669  0015E8  1630               	andwf	___ftadd@f1+2,f,c
  4670  0015EA  8E32               	bsf	___ftadd@f2+1,7,c
  4671  0015EC  0EFF               	movlw	255
  4672  0015EE  1631               	andwf	___ftadd@f2,f,c
  4673  0015F0  0EFF               	movlw	255
  4674  0015F2  1632               	andwf	___ftadd@f2+1,f,c
  4675  0015F4  0E00               	movlw	0
  4676  0015F6  1633               	andwf	___ftadd@f2+2,f,c
  4677  0015F8  5038               	movf	___ftadd@exp2,w,c
  4678  0015FA  5C39               	subwf	___ftadd@exp1,w,c
  4679  0015FC  B0D8               	btfsc	status,0,c
  4680  0015FE  D01B               	goto	l500
  4681  001600                     u1700:
  4682  001600  90D8               	bcf	status,0,c
  4683  001602  3631               	rlcf	___ftadd@f2,f,c
  4684  001604  3632               	rlcf	___ftadd@f2+1,f,c
  4685  001606  3633               	rlcf	___ftadd@f2+2,f,c
  4686  001608  0638               	decf	___ftadd@exp2,f,c
  4687  00160A  5039               	movf	___ftadd@exp1,w,c
  4688  00160C  1838               	xorwf	___ftadd@exp2,w,c
  4689  00160E  B4D8               	btfsc	status,2,c
  4690  001610  D00D               	goto	l505
  4691  001612  0637               	decf	___ftadd@sign,f,c
  4692  001614  C037  F034         	movff	___ftadd@sign,??___ftadd
  4693  001618  0E07               	movlw	7
  4694  00161A  1634               	andwf	??___ftadd,f,c
  4695  00161C  B4D8               	btfsc	status,2,c
  4696  00161E  D006               	goto	l505
  4697  001620  D7EF               	goto	u1700
  4698  001622  90D8               	bcf	status,0,c
  4699  001624  3230               	rrcf	___ftadd@f1+2,f,c
  4700  001626  322F               	rrcf	___ftadd@f1+1,f,c
  4701  001628  322E               	rrcf	___ftadd@f1,f,c
  4702  00162A  2A39               	incf	___ftadd@exp1,f,c
  4703  00162C                     l505:
  4704  00162C  5038               	movf	___ftadd@exp2,w,c
  4705  00162E  1839               	xorwf	___ftadd@exp1,w,c
  4706  001630  B4D8               	btfsc	status,2,c
  4707  001632  D01F               	goto	u1770
  4708  001634  D7F6               	goto	l506
  4709  001636                     l500:
  4710  001636  5039               	movf	___ftadd@exp1,w,c
  4711  001638  5C38               	subwf	___ftadd@exp2,w,c
  4712  00163A  B0D8               	btfsc	status,0,c
  4713  00163C  D01A               	goto	u1770
  4714  00163E                     u1740:
  4715  00163E  90D8               	bcf	status,0,c
  4716  001640  362E               	rlcf	___ftadd@f1,f,c
  4717  001642  362F               	rlcf	___ftadd@f1+1,f,c
  4718  001644  3630               	rlcf	___ftadd@f1+2,f,c
  4719  001646  0639               	decf	___ftadd@exp1,f,c
  4720  001648  5039               	movf	___ftadd@exp1,w,c
  4721  00164A  1838               	xorwf	___ftadd@exp2,w,c
  4722  00164C  B4D8               	btfsc	status,2,c
  4723  00164E  D00D               	goto	l514
  4724  001650  0637               	decf	___ftadd@sign,f,c
  4725  001652  C037  F034         	movff	___ftadd@sign,??___ftadd
  4726  001656  0E07               	movlw	7
  4727  001658  1634               	andwf	??___ftadd,f,c
  4728  00165A  B4D8               	btfsc	status,2,c
  4729  00165C  D006               	goto	l514
  4730  00165E  D7EF               	goto	u1740
  4731  001660  90D8               	bcf	status,0,c
  4732  001662  3233               	rrcf	___ftadd@f2+2,f,c
  4733  001664  3232               	rrcf	___ftadd@f2+1,f,c
  4734  001666  3231               	rrcf	___ftadd@f2,f,c
  4735  001668  2A38               	incf	___ftadd@exp2,f,c
  4736  00166A                     l514:
  4737  00166A  5038               	movf	___ftadd@exp2,w,c
  4738  00166C  1839               	xorwf	___ftadd@exp1,w,c
  4739  00166E  A4D8               	btfss	status,2,c
  4740  001670  D7F7               	goto	l515
  4741  001672                     u1770:
  4742  001672  AE37               	btfss	___ftadd@sign,7,c
  4743  001674  D00C               	goto	l517
  4744  001676  0EFF               	movlw	255
  4745  001678  1A2E               	xorwf	___ftadd@f1,f,c
  4746  00167A  0EFF               	movlw	255
  4747  00167C  1A2F               	xorwf	___ftadd@f1+1,f,c
  4748  00167E  0EFF               	movlw	255
  4749  001680  1A30               	xorwf	___ftadd@f1+2,f,c
  4750  001682  0E01               	movlw	1
  4751  001684  262E               	addwf	___ftadd@f1,f,c
  4752  001686  0E00               	movlw	0
  4753  001688  222F               	addwfc	___ftadd@f1+1,f,c
  4754  00168A  0E00               	movlw	0
  4755  00168C  2230               	addwfc	___ftadd@f1+2,f,c
  4756  00168E                     l517:
  4757  00168E  AC37               	btfss	___ftadd@sign,6,c
  4758  001690  D00C               	goto	l518
  4759  001692  0EFF               	movlw	255
  4760  001694  1A31               	xorwf	___ftadd@f2,f,c
  4761  001696  0EFF               	movlw	255
  4762  001698  1A32               	xorwf	___ftadd@f2+1,f,c
  4763  00169A  0EFF               	movlw	255
  4764  00169C  1A33               	xorwf	___ftadd@f2+2,f,c
  4765  00169E  0E01               	movlw	1
  4766  0016A0  2631               	addwf	___ftadd@f2,f,c
  4767  0016A2  0E00               	movlw	0
  4768  0016A4  2232               	addwfc	___ftadd@f2+1,f,c
  4769  0016A6  0E00               	movlw	0
  4770  0016A8  2233               	addwfc	___ftadd@f2+2,f,c
  4771  0016AA                     l518:
  4772  0016AA  0E00               	movlw	0
  4773  0016AC  6E37               	movwf	___ftadd@sign,c
  4774  0016AE  502E               	movf	___ftadd@f1,w,c
  4775  0016B0  2631               	addwf	___ftadd@f2,f,c
  4776  0016B2  502F               	movf	___ftadd@f1+1,w,c
  4777  0016B4  2232               	addwfc	___ftadd@f2+1,f,c
  4778  0016B6  5030               	movf	___ftadd@f1+2,w,c
  4779  0016B8  2233               	addwfc	___ftadd@f2+2,f,c
  4780  0016BA  AE33               	btfss	___ftadd@f2+2,7,c
  4781  0016BC  D00E               	goto	l519
  4782  0016BE  0EFF               	movlw	255
  4783  0016C0  1A31               	xorwf	___ftadd@f2,f,c
  4784  0016C2  0EFF               	movlw	255
  4785  0016C4  1A32               	xorwf	___ftadd@f2+1,f,c
  4786  0016C6  0EFF               	movlw	255
  4787  0016C8  1A33               	xorwf	___ftadd@f2+2,f,c
  4788  0016CA  0E01               	movlw	1
  4789  0016CC  2631               	addwf	___ftadd@f2,f,c
  4790  0016CE  0E00               	movlw	0
  4791  0016D0  2232               	addwfc	___ftadd@f2+1,f,c
  4792  0016D2  0E00               	movlw	0
  4793  0016D4  2233               	addwfc	___ftadd@f2+2,f,c
  4794  0016D6  0E01               	movlw	1
  4795  0016D8  6E37               	movwf	___ftadd@sign,c
  4796  0016DA                     l519:
  4797  0016DA  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4798  0016DE  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4799  0016E2  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4800  0016E6  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4801  0016EA  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4802  0016EE  ECF7  F00E         	call	___ftpack	;wreg free
  4803  0016F2  C001  F02E         	movff	?___ftpack,?___ftadd
  4804  0016F6  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4805  0016FA  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4806  0016FE  0012               	return	
  4807  001700                     __end_of___ftadd:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           postinc0	equ	0xFEE
  4816                           wreg	equ	0xFE8
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function ___ftneg *****************
  4825 ;; Defined at:
  4826 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/ftneg.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  f1              3    0[COMRAM] float 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  3    0[COMRAM] float 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4840 ;;      Params:         3       0       0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0
  4843 ;;      Totals:         3       0       0       0       0       0       0
  4844 ;;Total ram usage:        3 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_sprintf
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text17
  4854  002346                     __ptext17:
  4855                           	opt stack 0
  4856  002346                     ___ftneg:
  4857                           	opt stack 29
  4858                           
  4859                           ;incstack = 0
  4860  002346  5001               	movf	___ftneg@f1,w,c
  4861  002348  1002               	iorwf	___ftneg@f1+1,w,c
  4862  00234A  1003               	iorwf	___ftneg@f1+2,w,c
  4863  00234C  B4D8               	btfsc	status,2,c
  4864  00234E  D006               	goto	l567
  4865  002350  0E00               	movlw	0
  4866  002352  1A01               	xorwf	___ftneg@f1,f,c
  4867  002354  0E00               	movlw	0
  4868  002356  1A02               	xorwf	___ftneg@f1+1,f,c
  4869  002358  0E80               	movlw	128
  4870  00235A  1A03               	xorwf	___ftneg@f1+2,f,c
  4871  00235C                     l567:
  4872  00235C  C001  F001         	movff	___ftneg@f1,?___ftneg
  4873  002360  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4874  002364  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4875  002368  0012               	return		;funcret
  4876  00236A                     __end_of___ftneg:
  4877                           	opt stack 0
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           indf2	equ	0xFDF
  4887                           postinc2	equ	0xFDE
  4888                           postdec2	equ	0xFDD
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function ___ftge *****************
  4894 ;; Defined at:
  4895 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/ftge.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  ff1             3    0[COMRAM] float 
  4898 ;;  ff2             3    3[COMRAM] float 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;		None               void
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4910 ;;      Params:         6       0       0       0       0       0       0
  4911 ;;      Locals:         0       0       0       0       0       0       0
  4912 ;;      Temps:          3       0       0       0       0       0       0
  4913 ;;      Totals:         9       0       0       0       0       0       0
  4914 ;;Total ram usage:        9 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		_sprintf
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text18
  4924  001E9C                     __ptext18:
  4925                           	opt stack 0
  4926  001E9C                     ___ftge:
  4927                           	opt stack 29
  4928                           
  4929                           ;incstack = 0
  4930  001E9C  AE03               	btfss	___ftge@ff1+2,7,c
  4931  001E9E  D016               	goto	l549
  4932  001EA0  C001  F007         	movff	___ftge@ff1,??___ftge
  4933  001EA4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4934  001EA8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4935  001EAC  1E07               	comf	??___ftge,f,c
  4936  001EAE  1E08               	comf	??___ftge+1,f,c
  4937  001EB0  1E09               	comf	??___ftge+2,f,c
  4938  001EB2  2A07               	incf	??___ftge,f,c
  4939  001EB4  0E00               	movlw	0
  4940  001EB6  2208               	addwfc	??___ftge+1,f,c
  4941  001EB8  2209               	addwfc	??___ftge+2,f,c
  4942  001EBA  0E00               	movlw	0
  4943  001EBC  2407               	addwf	??___ftge,w,c
  4944  001EBE  6E01               	movwf	___ftge@ff1,c
  4945  001EC0  0E00               	movlw	0
  4946  001EC2  2008               	addwfc	??___ftge+1,w,c
  4947  001EC4  6E02               	movwf	___ftge@ff1+1,c
  4948  001EC6  0E80               	movlw	128
  4949  001EC8  2009               	addwfc	??___ftge+2,w,c
  4950  001ECA  6E03               	movwf	___ftge@ff1+2,c
  4951  001ECC                     l549:
  4952  001ECC  AE06               	btfss	___ftge@ff2+2,7,c
  4953  001ECE  D016               	goto	l550
  4954  001ED0  C004  F007         	movff	___ftge@ff2,??___ftge
  4955  001ED4  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4956  001ED8  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4957  001EDC  1E07               	comf	??___ftge,f,c
  4958  001EDE  1E08               	comf	??___ftge+1,f,c
  4959  001EE0  1E09               	comf	??___ftge+2,f,c
  4960  001EE2  2A07               	incf	??___ftge,f,c
  4961  001EE4  0E00               	movlw	0
  4962  001EE6  2208               	addwfc	??___ftge+1,f,c
  4963  001EE8  2209               	addwfc	??___ftge+2,f,c
  4964  001EEA  0E00               	movlw	0
  4965  001EEC  2407               	addwf	??___ftge,w,c
  4966  001EEE  6E04               	movwf	___ftge@ff2,c
  4967  001EF0  0E00               	movlw	0
  4968  001EF2  2008               	addwfc	??___ftge+1,w,c
  4969  001EF4  6E05               	movwf	___ftge@ff2+1,c
  4970  001EF6  0E80               	movlw	128
  4971  001EF8  2009               	addwfc	??___ftge+2,w,c
  4972  001EFA  6E06               	movwf	___ftge@ff2+2,c
  4973  001EFC                     l550:
  4974  001EFC  0E00               	movlw	0
  4975  001EFE  1A01               	xorwf	___ftge@ff1,f,c
  4976  001F00  0E00               	movlw	0
  4977  001F02  1A02               	xorwf	___ftge@ff1+1,f,c
  4978  001F04  0E80               	movlw	128
  4979  001F06  1A03               	xorwf	___ftge@ff1+2,f,c
  4980  001F08  0E00               	movlw	0
  4981  001F0A  1A04               	xorwf	___ftge@ff2,f,c
  4982  001F0C  0E00               	movlw	0
  4983  001F0E  1A05               	xorwf	___ftge@ff2+1,f,c
  4984  001F10  0E80               	movlw	128
  4985  001F12  1A06               	xorwf	___ftge@ff2+2,f,c
  4986  001F14  5004               	movf	___ftge@ff2,w,c
  4987  001F16  5C01               	subwf	___ftge@ff1,w,c
  4988  001F18  5005               	movf	___ftge@ff2+1,w,c
  4989  001F1A  5802               	subwfb	___ftge@ff1+1,w,c
  4990  001F1C  5006               	movf	___ftge@ff2+2,w,c
  4991  001F1E  5803               	subwfb	___ftge@ff1+2,w,c
  4992  001F20  B0D8               	btfsc	status,0,c
  4993  001F22  D002               	goto	l1967
  4994  001F24  90D8               	bcf	status,0,c
  4995  001F26  0012               	return	
  4996  001F28                     l1967:
  4997  001F28  80D8               	bsf	status,0,c
  4998  001F2A  0012               	return	
  4999  001F2C                     __end_of___ftge:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           postdec2	equ	0xFDD
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _lcd_msg *****************
  5017 ;; Defined at:
  5018 ;;		line 99 in file "../MyLibs/lcd4a.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  c               2    4[COMRAM] PTR unsigned char 
  5021 ;;		 -> STR_3(4), value(8), STR_1(9), 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5033 ;;      Params:         2       0       0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0
  5036 ;;      Totals:         2       0       0       0       0       0       0
  5037 ;;Total ram usage:        2 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    3
  5040 ;; This function calls:
  5041 ;;		_lcd_putc
  5042 ;; This function is called by:
  5043 ;;		_main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text19
  5048  002164                     __ptext19:
  5049                           	opt stack 0
  5050  002164                     _lcd_msg:
  5051                           	opt stack 27
  5052                           
  5053                           ;lcd4a.c: 101: while(*c != 0)
  5054                           
  5055                           ;incstack = 0
  5056  002164  D014               	goto	l85
  5057  002166                     
  5058                           ;lcd4a.c: 102: {
  5059                           ;lcd4a.c: 103: lcd_putc(*c++);
  5060  002166  C005  FFF6         	movff	lcd_msg@c,tblptrl
  5061  00216A  C006  FFF7         	movff	lcd_msg@c+1,tblptrh
  5062  00216E  6AF8               	clrf	tblptru,c
  5063  002170  0E05               	movlw	(high __ramtop+-1)
  5064  002172  64F7               	cpfsgt	tblptrh,c
  5065  002174  D003               	bra	u2447
  5066  002176  0008               	tblrd		*
  5067  002178  50F5               	movf	tablat,w,c
  5068  00217A  D005               	bra	u2440
  5069  00217C                     u2447:
  5070  00217C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5071  002180  CFF7 FFEA          	movff	tblptrh,fsr0h
  5072  002184  50EF               	movf	indf0,w,c
  5073  002186                     u2440:
  5074  002186  EC43  F011         	call	_lcd_putc
  5075  00218A  4A05               	infsnz	lcd_msg@c,f,c
  5076  00218C  2A06               	incf	lcd_msg@c+1,f,c
  5077  00218E                     l85:
  5078  00218E  C005  FFF6         	movff	lcd_msg@c,tblptrl
  5079  002192  C006  FFF7         	movff	lcd_msg@c+1,tblptrh
  5080  002196  6AF8               	clrf	tblptru,c
  5081  002198  0E05               	movlw	(high __ramtop+-1)
  5082  00219A  64F7               	cpfsgt	tblptrh,c
  5083  00219C  D003               	bra	u2457
  5084  00219E  0008               	tblrd		*
  5085  0021A0  50F5               	movf	tablat,w,c
  5086  0021A2  D005               	bra	u2450
  5087  0021A4                     u2457:
  5088  0021A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5089  0021A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5090  0021AC  50EF               	movf	indf0,w,c
  5091  0021AE                     u2450:
  5092  0021AE  0900               	iorlw	0
  5093  0021B0  B4D8               	btfsc	status,2,c
  5094  0021B2  0012               	return	
  5095  0021B4  D7D8               	goto	l86
  5096  0021B6                     __end_of_lcd_msg:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           indf0	equ	0xFEF
  5105                           postinc0	equ	0xFEE
  5106                           fsr0h	equ	0xFEA
  5107                           fsr0l	equ	0xFE9
  5108                           wreg	equ	0xFE8
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function _lcd_putc *****************
  5117 ;; Defined at:
  5118 ;;		line 64 in file "../MyLibs/lcd4a.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  c               1    wreg     unsigned char 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;  c               1    3[COMRAM] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, status,2, status,0, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5132 ;;      Params:         0       0       0       0       0       0       0
  5133 ;;      Locals:         1       0       0       0       0       0       0
  5134 ;;      Temps:          0       0       0       0       0       0       0
  5135 ;;      Totals:         1       0       0       0       0       0       0
  5136 ;;Total ram usage:        1 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    2
  5139 ;; This function calls:
  5140 ;;		_lcd_cmd
  5141 ;;		_lcd_dwr
  5142 ;; This function is called by:
  5143 ;;		_lcd_msg
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text20
  5148  002286                     __ptext20:
  5149                           	opt stack 0
  5150  002286                     _lcd_putc:
  5151                           	opt stack 27
  5152                           
  5153                           ;incstack = 0
  5154                           ;lcd_putc@c stored from wreg
  5155  002286  6E04               	movwf	lcd_putc@c,c
  5156                           
  5157                           ;lcd4a.c: 66: switch(c)
  5158  002288  D010               	goto	l73
  5159  00228A                     
  5160                           ;lcd4a.c: 69: lcd_cmd(0x01);
  5161  00228A  0E01               	movlw	1
  5162  00228C  ECDB  F010         	call	_lcd_cmd
  5163                           
  5164                           ;lcd4a.c: 70: break;
  5165  002290  0012               	return	
  5166  002292                     
  5167                           ;lcd4a.c: 72: lcd_cmd(2);
  5168  002292  0E02               	movlw	2
  5169  002294  ECDB  F010         	call	_lcd_cmd
  5170                           
  5171                           ;lcd4a.c: 73: break;
  5172  002298  0012               	return	
  5173  00229A                     
  5174                           ;lcd4a.c: 75: lcd_cmd(0x10);
  5175  00229A  0E10               	movlw	16
  5176  00229C  ECDB  F010         	call	_lcd_cmd
  5177                           
  5178                           ;lcd4a.c: 76: break;
  5179  0022A0  0012               	return	
  5180  0022A2                     
  5181                           ;lcd4a.c: 78: lcd_dwr(c);
  5182  0022A2  5004               	movf	lcd_putc@c,w,c
  5183  0022A4  EC00  F011         	call	_lcd_dwr
  5184                           
  5185                           ;lcd4a.c: 80: }
  5186                           
  5187                           ;lcd4a.c: 79: break;
  5188  0022A8  0012               	return	
  5189  0022AA                     l73:
  5190  0022AA  5004               	movf	lcd_putc@c,w,c
  5191                           
  5192                           ; Switch size 1, requested type "space"
  5193                           ; Number of cases is 3, Range of values is 8 to 12
  5194                           ; switch strategies available:
  5195                           ; Name         Instructions Cycles
  5196                           ; simple_byte           10     6 (average)
  5197                           ;	Chosen strategy is simple_byte
  5198  0022AC  0A08               	xorlw	8	; case 8
  5199  0022AE  B4D8               	btfsc	status,2,c
  5200  0022B0  D7F4               	goto	l77
  5201  0022B2  0A02               	xorlw	2	; case 10
  5202  0022B4  B4D8               	btfsc	status,2,c
  5203  0022B6  D7ED               	goto	l76
  5204  0022B8  0A06               	xorlw	6	; case 12
  5205  0022BA  B4D8               	btfsc	status,2,c
  5206  0022BC  D7E6               	goto	l74
  5207  0022BE  D7F1               	goto	l78
  5208  0022C0                     __end_of_lcd_putc:
  5209                           	opt stack 0
  5210                           tblptru	equ	0xFF8
  5211                           tblptrh	equ	0xFF7
  5212                           tblptrl	equ	0xFF6
  5213                           tablat	equ	0xFF5
  5214                           prodh	equ	0xFF4
  5215                           prodl	equ	0xFF3
  5216                           indf0	equ	0xFEF
  5217                           postinc0	equ	0xFEE
  5218                           fsr0h	equ	0xFEA
  5219                           fsr0l	equ	0xFE9
  5220                           wreg	equ	0xFE8
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function _lcd_dwr *****************
  5229 ;; Defined at:
  5230 ;;		line 84 in file "../MyLibs/lcd4a.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  x               1    wreg     unsigned char 
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  x               1    2[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5244 ;;      Params:         0       0       0       0       0       0       0
  5245 ;;      Locals:         1       0       0       0       0       0       0
  5246 ;;      Temps:          1       0       0       0       0       0       0
  5247 ;;      Totals:         2       0       0       0       0       0       0
  5248 ;;Total ram usage:        2 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    1
  5251 ;; This function calls:
  5252 ;;		_lcd_lat
  5253 ;;		_manda
  5254 ;; This function is called by:
  5255 ;;		_lcd_putc
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text21
  5260  002200                     __ptext21:
  5261                           	opt stack 0
  5262  002200                     _lcd_dwr:
  5263                           	opt stack 27
  5264                           
  5265                           ;incstack = 0
  5266                           ;lcd_dwr@x stored from wreg
  5267  002200  6E03               	movwf	lcd_dwr@x,c
  5268                           
  5269                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  5270  002202  8A8C               	bsf	3980,5,c	;volatile
  5271                           
  5272                           ;lcd4a.c: 87: lcd &= 0x0F;
  5273  002204  0E0F               	movlw	15
  5274  002206  1669               	andwf	_lcd,f,c
  5275                           
  5276                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  5277  002208  5003               	movf	lcd_dwr@x,w,c
  5278  00220A  0BF0               	andlw	240
  5279  00220C  1269               	iorwf	_lcd,f,c
  5280                           
  5281                           ;lcd4a.c: 89: manda(lcd);
  5282  00220E  5069               	movf	_lcd,w,c
  5283  002210  EC7A  F011         	call	_manda
  5284                           
  5285                           ;lcd4a.c: 90: lcd_lat();
  5286  002214  ECEE  F011         	call	_lcd_lat	;wreg free
  5287                           
  5288                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  5289  002218  0E04               	movlw	4
  5290  00221A  6E02               	movwf	??_lcd_dwr& (0+255),c
  5291  00221C  0EE4               	movlw	228
  5292  00221E                     u2987:
  5293  00221E  2EE8               	decfsz	wreg,f,c
  5294  002220  D7FE               	bra	u2987
  5295  002222  2E02               	decfsz	??_lcd_dwr& (0+255),f,c
  5296  002224  D7FC               	bra	u2987
  5297  002226  D000               	nop2	
  5298                           
  5299                           ;lcd4a.c: 93: lcd &= 0x0F;
  5300  002228  0E0F               	movlw	15
  5301  00222A  1669               	andwf	_lcd,f,c
  5302                           
  5303                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  5304  00222C  C003  F002         	movff	lcd_dwr@x,??_lcd_dwr
  5305  002230  0E0F               	movlw	15
  5306  002232  1602               	andwf	??_lcd_dwr,f,c
  5307  002234  3802               	swapf	??_lcd_dwr,w,c
  5308  002236  0BF0               	andlw	240
  5309  002238  1269               	iorwf	_lcd,f,c
  5310                           
  5311                           ;lcd4a.c: 95: manda(lcd);
  5312  00223A  5069               	movf	_lcd,w,c
  5313  00223C  EC7A  F011         	call	_manda
  5314                           
  5315                           ;lcd4a.c: 96: lcd_lat();
  5316  002240  ECEE  F011         	call	_lcd_lat	;wreg free
  5317  002244  0012               	return		;funcret
  5318  002246                     __end_of_lcd_dwr:
  5319                           	opt stack 0
  5320                           tblptru	equ	0xFF8
  5321                           tblptrh	equ	0xFF7
  5322                           tblptrl	equ	0xFF6
  5323                           tablat	equ	0xFF5
  5324                           prodh	equ	0xFF4
  5325                           prodl	equ	0xFF3
  5326                           indf0	equ	0xFEF
  5327                           postinc0	equ	0xFEE
  5328                           fsr0h	equ	0xFEA
  5329                           fsr0l	equ	0xFE9
  5330                           wreg	equ	0xFE8
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338 ;; *************** function _lcd_init *****************
  5339 ;; Defined at:
  5340 ;;		line 133 in file "../MyLibs/lcd4a.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;		None
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      void 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5354 ;;      Params:         0       0       0       0       0       0       0
  5355 ;;      Locals:         0       0       0       0       0       0       0
  5356 ;;      Temps:          1       0       0       0       0       0       0
  5357 ;;      Totals:         1       0       0       0       0       0       0
  5358 ;;Total ram usage:        1 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    2
  5361 ;; This function calls:
  5362 ;;		_lcd_cmd
  5363 ;;		_lcd_cmd_hf
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text22
  5370  001D34                     __ptext22:
  5371                           	opt stack 0
  5372  001D34                     _lcd_init:
  5373                           	opt stack 28
  5374                           
  5375                           ;lcd4a.c: 141: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  5376                           
  5377                           ;incstack = 0
  5378  001D34  9E93               	bcf	3987,7,c	;volatile
  5379                           
  5380                           ;lcd4a.c: 142: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  5381  001D36  9C93               	bcf	3987,6,c	;volatile
  5382                           
  5383                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  5384  001D38  9A93               	bcf	3987,5,c	;volatile
  5385                           
  5386                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  5387  001D3A  9893               	bcf	3987,4,c	;volatile
  5388                           
  5389                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  5390  001D3C  9A95               	bcf	3989,5,c	;volatile
  5391                           
  5392                           ;lcd4a.c: 146: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  5393  001D3E  9C95               	bcf	3989,6,c	;volatile
  5394                           
  5395                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  5396  001D40  9E95               	bcf	3989,7,c	;volatile
  5397                           
  5398                           ;lcd4a.c: 149: lcd_cmd_hf(0x30);
  5399  001D42  0E30               	movlw	48
  5400  001D44  ECD6  F011         	call	_lcd_cmd_hf
  5401                           
  5402                           ;lcd4a.c: 150: _delay((unsigned long)((15)*(4000000/4000.0)));
  5403  001D48  0E14               	movlw	20
  5404  001D4A  6E04               	movwf	??_lcd_init& (0+255),c
  5405  001D4C  0E7A               	movlw	122
  5406  001D4E                     u2997:
  5407  001D4E  2EE8               	decfsz	wreg,f,c
  5408  001D50  D7FE               	bra	u2997
  5409  001D52  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5410  001D54  D7FC               	bra	u2997
  5411                           
  5412                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
  5413  001D56  0E30               	movlw	48
  5414  001D58  ECD6  F011         	call	_lcd_cmd_hf
  5415                           
  5416                           ;lcd4a.c: 152: _delay((unsigned long)((1)*(4000000/4000.0)));
  5417  001D5C  0EC8               	movlw	200
  5418  001D5E                     u3007:
  5419  001D5E  D000               	nop2	
  5420  001D60  2EE8               	decfsz	wreg,f,c
  5421  001D62  D7FD               	bra	u3007
  5422                           
  5423                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
  5424  001D64  0E30               	movlw	48
  5425  001D66  ECD6  F011         	call	_lcd_cmd_hf
  5426                           
  5427                           ;lcd4a.c: 154: _delay((unsigned long)((15)*(4000000/4000.0)));
  5428  001D6A  0E14               	movlw	20
  5429  001D6C  6E04               	movwf	??_lcd_init& (0+255),c
  5430  001D6E  0E7A               	movlw	122
  5431  001D70                     u3017:
  5432  001D70  2EE8               	decfsz	wreg,f,c
  5433  001D72  D7FE               	bra	u3017
  5434  001D74  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5435  001D76  D7FC               	bra	u3017
  5436                           
  5437                           ;lcd4a.c: 155: lcd_cmd_hf(0x20);
  5438  001D78  0E20               	movlw	32
  5439  001D7A  ECD6  F011         	call	_lcd_cmd_hf
  5440                           
  5441                           ;lcd4a.c: 156: _delay((unsigned long)((5)*(4000000/4000.0)));
  5442  001D7E  0E07               	movlw	7
  5443  001D80  6E04               	movwf	??_lcd_init& (0+255),c
  5444  001D82  0E7D               	movlw	125
  5445  001D84                     u3027:
  5446  001D84  2EE8               	decfsz	wreg,f,c
  5447  001D86  D7FE               	bra	u3027
  5448  001D88  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5449  001D8A  D7FC               	bra	u3027
  5450  001D8C  F000               	nop	
  5451                           
  5452                           ;lcd4a.c: 157: lcd_cmd(0x28);
  5453  001D8E  0E28               	movlw	40
  5454  001D90  ECDB  F010         	call	_lcd_cmd
  5455                           
  5456                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  5457  001D94  0E07               	movlw	7
  5458  001D96  6E04               	movwf	??_lcd_init& (0+255),c
  5459  001D98  0E7D               	movlw	125
  5460  001D9A                     u3037:
  5461  001D9A  2EE8               	decfsz	wreg,f,c
  5462  001D9C  D7FE               	bra	u3037
  5463  001D9E  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5464  001DA0  D7FC               	bra	u3037
  5465  001DA2  F000               	nop	
  5466                           
  5467                           ;lcd4a.c: 159: lcd_cmd(0x0E);
  5468  001DA4  0E0E               	movlw	14
  5469  001DA6  ECDB  F010         	call	_lcd_cmd
  5470                           
  5471                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
  5472  001DAA  0E07               	movlw	7
  5473  001DAC  6E04               	movwf	??_lcd_init& (0+255),c
  5474  001DAE  0E7D               	movlw	125
  5475  001DB0                     u3047:
  5476  001DB0  2EE8               	decfsz	wreg,f,c
  5477  001DB2  D7FE               	bra	u3047
  5478  001DB4  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5479  001DB6  D7FC               	bra	u3047
  5480  001DB8  F000               	nop	
  5481                           
  5482                           ;lcd4a.c: 161: lcd_cmd(0x01);
  5483  001DBA  0E01               	movlw	1
  5484  001DBC  ECDB  F010         	call	_lcd_cmd
  5485                           
  5486                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  5487  001DC0  0E07               	movlw	7
  5488  001DC2  6E04               	movwf	??_lcd_init& (0+255),c
  5489  001DC4  0E7D               	movlw	125
  5490  001DC6                     u3057:
  5491  001DC6  2EE8               	decfsz	wreg,f,c
  5492  001DC8  D7FE               	bra	u3057
  5493  001DCA  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5494  001DCC  D7FC               	bra	u3057
  5495  001DCE  F000               	nop	
  5496                           
  5497                           ;lcd4a.c: 163: lcd_cmd(0x06);
  5498  001DD0  0E06               	movlw	6
  5499  001DD2  ECDB  F010         	call	_lcd_cmd
  5500                           
  5501                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  5502  001DD6  0E07               	movlw	7
  5503  001DD8  6E04               	movwf	??_lcd_init& (0+255),c
  5504  001DDA  0E7D               	movlw	125
  5505  001DDC                     u3067:
  5506  001DDC  2EE8               	decfsz	wreg,f,c
  5507  001DDE  D7FE               	bra	u3067
  5508  001DE0  2E04               	decfsz	??_lcd_init& (0+255),f,c
  5509  001DE2  D7FC               	bra	u3067
  5510  001DE4  F000               	nop	
  5511                           
  5512                           ;lcd4a.c: 165: lcd_cmd(0x80);
  5513  001DE6  0E80               	movlw	128
  5514  001DE8  ECDB  F010         	call	_lcd_cmd
  5515  001DEC  0012               	return		;funcret
  5516  001DEE                     __end_of_lcd_init:
  5517                           	opt stack 0
  5518                           tblptru	equ	0xFF8
  5519                           tblptrh	equ	0xFF7
  5520                           tblptrl	equ	0xFF6
  5521                           tablat	equ	0xFF5
  5522                           prodh	equ	0xFF4
  5523                           prodl	equ	0xFF3
  5524                           indf0	equ	0xFEF
  5525                           postinc0	equ	0xFEE
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           indf2	equ	0xFDF
  5530                           postinc2	equ	0xFDE
  5531                           postdec2	equ	0xFDD
  5532                           fsr2h	equ	0xFDA
  5533                           fsr2l	equ	0xFD9
  5534                           status	equ	0xFD8
  5535                           
  5536 ;; *************** function _lcd_cmd_hf *****************
  5537 ;; Defined at:
  5538 ;;		line 54 in file "../MyLibs/lcd4a.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;  x               1    wreg     unsigned char 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  x               1    1[COMRAM] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5552 ;;      Params:         0       0       0       0       0       0       0
  5553 ;;      Locals:         1       0       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0
  5555 ;;      Totals:         1       0       0       0       0       0       0
  5556 ;;Total ram usage:        1 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    1
  5559 ;; This function calls:
  5560 ;;		_lcd_lat
  5561 ;;		_manda
  5562 ;; This function is called by:
  5563 ;;		_lcd_init
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text23
  5568  0023AC                     __ptext23:
  5569                           	opt stack 0
  5570  0023AC                     _lcd_cmd_hf:
  5571                           	opt stack 28
  5572                           
  5573                           ;incstack = 0
  5574                           ;lcd_cmd_hf@x stored from wreg
  5575  0023AC  6E02               	movwf	lcd_cmd_hf@x,c
  5576                           
  5577                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  5578  0023AE  9A8C               	bcf	3980,5,c	;volatile
  5579                           
  5580                           ;lcd4a.c: 57: lcd &= 0x0F;
  5581  0023B0  0E0F               	movlw	15
  5582  0023B2  1669               	andwf	_lcd,f,c
  5583                           
  5584                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  5585  0023B4  5002               	movf	lcd_cmd_hf@x,w,c
  5586  0023B6  0BF0               	andlw	240
  5587  0023B8  1269               	iorwf	_lcd,f,c
  5588                           
  5589                           ;lcd4a.c: 59: manda(lcd);
  5590  0023BA  5069               	movf	_lcd,w,c
  5591  0023BC  EC7A  F011         	call	_manda
  5592                           
  5593                           ;lcd4a.c: 60: lcd_lat();
  5594  0023C0  ECEE  F011         	call	_lcd_lat	;wreg free
  5595  0023C4  0012               	return		;funcret
  5596  0023C6                     __end_of_lcd_cmd_hf:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           indf0	equ	0xFEF
  5605                           postinc0	equ	0xFEE
  5606                           fsr0h	equ	0xFEA
  5607                           fsr0l	equ	0xFE9
  5608                           wreg	equ	0xFE8
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _lcd_gotoxy *****************
  5617 ;; Defined at:
  5618 ;;		line 112 in file "../MyLibs/lcd4a.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  x               1    wreg     unsigned char 
  5621 ;;  y               1    3[COMRAM] unsigned char 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  x               1    5[COMRAM] unsigned char 
  5624 ;;  ADDRESS         1    6[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5634 ;;      Params:         1       0       0       0       0       0       0
  5635 ;;      Locals:         2       0       0       0       0       0       0
  5636 ;;      Temps:          1       0       0       0       0       0       0
  5637 ;;      Totals:         4       0       0       0       0       0       0
  5638 ;;Total ram usage:        4 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    2
  5641 ;; This function calls:
  5642 ;;		_lcd_cmd
  5643 ;; This function is called by:
  5644 ;;		_main
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text24
  5649  0022C0                     __ptext24:
  5650                           	opt stack 0
  5651  0022C0                     _lcd_gotoxy:
  5652                           	opt stack 28
  5653                           
  5654                           ;incstack = 0
  5655                           ;lcd_gotoxy@x stored from wreg
  5656  0022C0  6E06               	movwf	lcd_gotoxy@x,c
  5657                           
  5658                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  5659  0022C2  0E00               	movlw	0
  5660  0022C4  6E07               	movwf	lcd_gotoxy@ADDRESS,c
  5661                           
  5662                           ;lcd4a.c: 116: switch(y)
  5663  0022C6  D005               	goto	l91
  5664  0022C8                     
  5665                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  5666  0022C8  0EC0               	movlw	192
  5667  0022CA  D001               	goto	L4
  5668  0022CC                     
  5669                           ;lcd4a.c: 125: ADDRESS = 0x80;
  5670  0022CC  0E80               	movlw	128
  5671  0022CE                     L4:
  5672  0022CE  6E07               	movwf	lcd_gotoxy@ADDRESS,c
  5673                           
  5674                           ;lcd4a.c: 128: }
  5675                           
  5676                           ;lcd4a.c: 126: break;
  5677  0022D0  D008               	goto	l93
  5678  0022D2                     l91:
  5679  0022D2  5004               	movf	lcd_gotoxy@y,w,c
  5680                           
  5681                           ; Switch size 1, requested type "space"
  5682                           ; Number of cases is 2, Range of values is 1 to 2
  5683                           ; switch strategies available:
  5684                           ; Name         Instructions Cycles
  5685                           ; simple_byte            7     4 (average)
  5686                           ;	Chosen strategy is simple_byte
  5687  0022D4  0A01               	xorlw	1	; case 1
  5688  0022D6  B4D8               	btfsc	status,2,c
  5689  0022D8  D7F9               	goto	l95
  5690  0022DA  0A03               	xorlw	3	; case 2
  5691  0022DC  B4D8               	btfsc	status,2,c
  5692  0022DE  D7F4               	goto	l94
  5693  0022E0  D7F5               	goto	l95
  5694  0022E2                     l93:
  5695                           
  5696                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  5697  0022E2  5007               	movf	lcd_gotoxy@ADDRESS,w,c
  5698  0022E4  2406               	addwf	lcd_gotoxy@x,w,c
  5699  0022E6  6E05               	movwf	??_lcd_gotoxy& (0+255),c
  5700  0022E8  0405               	decf	??_lcd_gotoxy,w,c
  5701  0022EA  6E07               	movwf	lcd_gotoxy@ADDRESS,c
  5702                           
  5703                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  5704  0022EC  5007               	movf	lcd_gotoxy@ADDRESS,w,c
  5705  0022EE  ECDB  F010         	call	_lcd_cmd
  5706  0022F2  0012               	return		;funcret
  5707  0022F4                     __end_of_lcd_gotoxy:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           indf0	equ	0xFEF
  5716                           postinc0	equ	0xFEE
  5717                           fsr0h	equ	0xFEA
  5718                           fsr0l	equ	0xFE9
  5719                           wreg	equ	0xFE8
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _lcd_cmd *****************
  5728 ;; Defined at:
  5729 ;;		line 38 in file "../MyLibs/lcd4a.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  x               1    wreg     unsigned char 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  x               1    2[COMRAM] unsigned char 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5743 ;;      Params:         0       0       0       0       0       0       0
  5744 ;;      Locals:         1       0       0       0       0       0       0
  5745 ;;      Temps:          1       0       0       0       0       0       0
  5746 ;;      Totals:         2       0       0       0       0       0       0
  5747 ;;Total ram usage:        2 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    1
  5750 ;; This function calls:
  5751 ;;		_lcd_lat
  5752 ;;		_manda
  5753 ;; This function is called by:
  5754 ;;		_main
  5755 ;;		_lcd_putc
  5756 ;;		_lcd_gotoxy
  5757 ;;		_lcd_init
  5758 ;;		_lcd_setcursor_vb
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text25
  5763  0021B6                     __ptext25:
  5764                           	opt stack 0
  5765  0021B6                     _lcd_cmd:
  5766                           	opt stack 27
  5767                           
  5768                           ;incstack = 0
  5769                           ;lcd_cmd@x stored from wreg
  5770  0021B6  6E03               	movwf	lcd_cmd@x,c
  5771                           
  5772                           ;lcd4a.c: 40: lcd = 0;
  5773  0021B8  0E00               	movlw	0
  5774  0021BA  6E69               	movwf	_lcd,c
  5775                           
  5776                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  5777  0021BC  9A8C               	bcf	3980,5,c	;volatile
  5778                           
  5779                           ;lcd4a.c: 42: lcd &= 0x0F;
  5780  0021BE  0E0F               	movlw	15
  5781  0021C0  1669               	andwf	_lcd,f,c
  5782                           
  5783                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  5784  0021C2  5003               	movf	lcd_cmd@x,w,c
  5785  0021C4  0BF0               	andlw	240
  5786  0021C6  1269               	iorwf	_lcd,f,c
  5787                           
  5788                           ;lcd4a.c: 44: manda(lcd);
  5789  0021C8  5069               	movf	_lcd,w,c
  5790  0021CA  EC7A  F011         	call	_manda
  5791                           
  5792                           ;lcd4a.c: 45: lcd_lat();
  5793  0021CE  ECEE  F011         	call	_lcd_lat	;wreg free
  5794                           
  5795                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  5796  0021D2  0E04               	movlw	4
  5797  0021D4  6E02               	movwf	??_lcd_cmd& (0+255),c
  5798  0021D6  0EE4               	movlw	228
  5799  0021D8                     u3077:
  5800  0021D8  2EE8               	decfsz	wreg,f,c
  5801  0021DA  D7FE               	bra	u3077
  5802  0021DC  2E02               	decfsz	??_lcd_cmd& (0+255),f,c
  5803  0021DE  D7FC               	bra	u3077
  5804  0021E0  D000               	nop2	
  5805                           
  5806                           ;lcd4a.c: 48: lcd &= 0x0F;
  5807  0021E2  0E0F               	movlw	15
  5808  0021E4  1669               	andwf	_lcd,f,c
  5809                           
  5810                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  5811  0021E6  C003  F002         	movff	lcd_cmd@x,??_lcd_cmd
  5812  0021EA  0E0F               	movlw	15
  5813  0021EC  1602               	andwf	??_lcd_cmd,f,c
  5814  0021EE  3802               	swapf	??_lcd_cmd,w,c
  5815  0021F0  0BF0               	andlw	240
  5816  0021F2  1269               	iorwf	_lcd,f,c
  5817                           
  5818                           ;lcd4a.c: 50: manda(lcd);
  5819  0021F4  5069               	movf	_lcd,w,c
  5820  0021F6  EC7A  F011         	call	_manda
  5821                           
  5822                           ;lcd4a.c: 51: lcd_lat();
  5823  0021FA  ECEE  F011         	call	_lcd_lat	;wreg free
  5824  0021FE  0012               	return		;funcret
  5825  002200                     __end_of_lcd_cmd:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           indf0	equ	0xFEF
  5834                           postinc0	equ	0xFEE
  5835                           fsr0h	equ	0xFEA
  5836                           fsr0l	equ	0xFE9
  5837                           wreg	equ	0xFE8
  5838                           indf2	equ	0xFDF
  5839                           postinc2	equ	0xFDE
  5840                           postdec2	equ	0xFDD
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function _manda *****************
  5846 ;; Defined at:
  5847 ;;		line 169 in file "../MyLibs/lcd4a.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  dato            1    wreg     unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  dato            1    0[COMRAM] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5861 ;;      Params:         0       0       0       0       0       0       0
  5862 ;;      Locals:         1       0       0       0       0       0       0
  5863 ;;      Temps:          0       0       0       0       0       0       0
  5864 ;;      Totals:         1       0       0       0       0       0       0
  5865 ;;Total ram usage:        1 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_lcd_cmd
  5871 ;;		_lcd_cmd_hf
  5872 ;;		_lcd_dwr
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text26
  5877  0022F4                     __ptext26:
  5878                           	opt stack 0
  5879  0022F4                     _manda:
  5880                           	opt stack 27
  5881                           
  5882                           ;incstack = 0
  5883                           ;manda@dato stored from wreg
  5884  0022F4  6E01               	movwf	manda@dato,c
  5885                           
  5886                           ;lcd4a.c: 171: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  5887  0022F6  A801               	btfss	manda@dato,4,c
  5888  0022F8  D002               	goto	l102
  5889  0022FA  888A               	bsf	3978,4,c	;volatile
  5890  0022FC  D001               	goto	l103
  5891  0022FE                     l102:
  5892                           
  5893                           ;lcd4a.c: 172: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  5894  0022FE  988A               	bcf	3978,4,c	;volatile
  5895  002300                     l103:
  5896                           
  5897                           ;lcd4a.c: 173: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  5898  002300  AA01               	btfss	manda@dato,5,c
  5899  002302  D002               	goto	l104
  5900  002304  8A8A               	bsf	3978,5,c	;volatile
  5901  002306  D001               	goto	l105
  5902  002308                     l104:
  5903                           
  5904                           ;lcd4a.c: 174: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  5905  002308  9A8A               	bcf	3978,5,c	;volatile
  5906  00230A                     l105:
  5907                           
  5908                           ;lcd4a.c: 175: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  5909  00230A  AC01               	btfss	manda@dato,6,c
  5910  00230C  D002               	goto	l106
  5911  00230E  8C8A               	bsf	3978,6,c	;volatile
  5912  002310  D001               	goto	l107
  5913  002312                     l106:
  5914                           
  5915                           ;lcd4a.c: 176: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  5916  002312  9C8A               	bcf	3978,6,c	;volatile
  5917  002314                     l107:
  5918                           
  5919                           ;lcd4a.c: 177: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  5920  002314  AE01               	btfss	manda@dato,7,c
  5921  002316  D002               	goto	l108
  5922  002318  8E8A               	bsf	3978,7,c	;volatile
  5923  00231A  0012               	return	
  5924  00231C                     l108:
  5925                           
  5926                           ;lcd4a.c: 178: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  5927  00231C  9E8A               	bcf	3978,7,c	;volatile
  5928  00231E  0012               	return	
  5929  002320                     __end_of_manda:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           prodh	equ	0xFF4
  5936                           prodl	equ	0xFF3
  5937                           indf0	equ	0xFEF
  5938                           postinc0	equ	0xFEE
  5939                           fsr0h	equ	0xFEA
  5940                           fsr0l	equ	0xFE9
  5941                           wreg	equ	0xFE8
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _lcd_lat *****************
  5950 ;; Defined at:
  5951 ;;		line 27 in file "../MyLibs/lcd4a.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5965 ;;      Params:         0       0       0       0       0       0       0
  5966 ;;      Locals:         0       0       0       0       0       0       0
  5967 ;;      Temps:          1       0       0       0       0       0       0
  5968 ;;      Totals:         1       0       0       0       0       0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; This function calls:
  5972 ;;		Nothing
  5973 ;; This function is called by:
  5974 ;;		_lcd_cmd
  5975 ;;		_lcd_cmd_hf
  5976 ;;		_lcd_dwr
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           	psect	text27
  5981  0023DC                     __ptext27:
  5982                           	opt stack 0
  5983  0023DC                     _lcd_lat:
  5984                           	opt stack 27
  5985                           
  5986                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  5987                           
  5988                           ;incstack = 0
  5989  0023DC  8E8C               	bsf	3980,7,c	;volatile
  5990                           
  5991                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  5992  0023DE  0E03               	movlw	3
  5993  0023E0  6E01               	movwf	??_lcd_lat& (0+255),c
  5994  0023E2  0E98               	movlw	152
  5995  0023E4                     u3087:
  5996  0023E4  2EE8               	decfsz	wreg,f,c
  5997  0023E6  D7FE               	bra	u3087
  5998  0023E8  2E01               	decfsz	??_lcd_lat& (0+255),f,c
  5999  0023EA  D7FC               	bra	u3087
  6000                           
  6001                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  6002  0023EC  9E8C               	bcf	3980,7,c	;volatile
  6003  0023EE  0012               	return		;funcret
  6004  0023F0                     __end_of_lcd_lat:
  6005                           	opt stack 0
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           prodh	equ	0xFF4
  6011                           prodl	equ	0xFF3
  6012                           indf0	equ	0xFEF
  6013                           postinc0	equ	0xFEE
  6014                           fsr0h	equ	0xFEA
  6015                           fsr0l	equ	0xFE9
  6016                           wreg	equ	0xFE8
  6017                           indf2	equ	0xFDF
  6018                           postinc2	equ	0xFDE
  6019                           postdec2	equ	0xFDD
  6020                           fsr2h	equ	0xFDA
  6021                           fsr2l	equ	0xFD9
  6022                           status	equ	0xFD8
  6023                           
  6024 ;; *************** function ___lwtoft *****************
  6025 ;; Defined at:
  6026 ;;		line 28 in file "/opt/microchip/xc8/v1.44/sources/common/lwtoft.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  c               2    8[COMRAM] unsigned int 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;		None
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  3    8[COMRAM] float 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0, cstack
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6040 ;;      Params:         3       0       0       0       0       0       0
  6041 ;;      Locals:         0       0       0       0       0       0       0
  6042 ;;      Temps:          0       0       0       0       0       0       0
  6043 ;;      Totals:         3       0       0       0       0       0       0
  6044 ;;Total ram usage:        3 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    1
  6047 ;; This function calls:
  6048 ;;		___ftpack
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text28
  6055  00236A                     __ptext28:
  6056                           	opt stack 0
  6057  00236A                     ___lwtoft:
  6058                           	opt stack 29
  6059                           
  6060                           ;incstack = 0
  6061  00236A  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6062  00236E  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6063  002372  6A03               	clrf	___ftpack@arg+2,c
  6064  002374  0E8E               	movlw	142
  6065  002376  6E04               	movwf	___ftpack@exp,c
  6066  002378  0E00               	movlw	0
  6067  00237A  6E05               	movwf	___ftpack@sign,c
  6068  00237C  ECF7  F00E         	call	___ftpack	;wreg free
  6069  002380  C001  F009         	movff	?___ftpack,?___lwtoft
  6070  002384  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6071  002388  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6072  00238C  0012               	return	
  6073  00238E                     __end_of___lwtoft:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           indf0	equ	0xFEF
  6082                           postinc0	equ	0xFEE
  6083                           fsr0h	equ	0xFEA
  6084                           fsr0l	equ	0xFE9
  6085                           wreg	equ	0xFE8
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function ___ftdiv *****************
  6094 ;; Defined at:
  6095 ;;		line 54 in file "/opt/microchip/xc8/v1.44/sources/common/ftdiv.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  f1              3   35[COMRAM] float 
  6098 ;;  f2              3   38[COMRAM] float 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  f3              3   45[COMRAM] float 
  6101 ;;  sign            1   49[COMRAM] unsigned char 
  6102 ;;  exp             1   48[COMRAM] unsigned char 
  6103 ;;  cntr            1   44[COMRAM] unsigned char 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  3   35[COMRAM] float 
  6106 ;; Registers used:
  6107 ;;		wreg, status,2, status,0, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6113 ;;      Params:         6       0       0       0       0       0       0
  6114 ;;      Locals:         6       0       0       0       0       0       0
  6115 ;;      Temps:          3       0       0       0       0       0       0
  6116 ;;      Totals:        15       0       0       0       0       0       0
  6117 ;;Total ram usage:       15 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    1
  6120 ;; This function calls:
  6121 ;;		___ftpack
  6122 ;; This function is called by:
  6123 ;;		_main
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text29
  6128  001C4E                     __ptext29:
  6129                           	opt stack 0
  6130  001C4E                     ___ftdiv:
  6131                           	opt stack 29
  6132                           
  6133                           ;incstack = 0
  6134  001C4E  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  6135  001C52  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6136  001C54  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6137  001C56  3425               	rlcf	___ftdiv@f1+1,w,c
  6138  001C58  362A               	rlcf	??___ftdiv& (0+255),f,c
  6139  001C5A  E301               	bnc	u2921
  6140  001C5C  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6141  001C5E                     u2921:
  6142  001C5E  502A               	movf	??___ftdiv,w,c
  6143  001C60  6E31               	movwf	___ftdiv@exp,c
  6144  001C62  5031               	movf	___ftdiv@exp,w,c
  6145  001C64  A4D8               	btfss	status,2,c
  6146  001C66  D007               	goto	l524
  6147  001C68  0E00               	movlw	0
  6148  001C6A  6E24               	movwf	?___ftdiv,c
  6149  001C6C  0E00               	movlw	0
  6150  001C6E  6E25               	movwf	?___ftdiv+1,c
  6151  001C70  0E00               	movlw	0
  6152  001C72  6E26               	movwf	?___ftdiv+2,c
  6153  001C74  0012               	return	
  6154  001C76                     l524:
  6155  001C76  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  6156  001C7A  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6157  001C7C  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6158  001C7E  3428               	rlcf	___ftdiv@f2+1,w,c
  6159  001C80  362A               	rlcf	??___ftdiv& (0+255),f,c
  6160  001C82  E301               	bnc	u2941
  6161  001C84  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6162  001C86                     u2941:
  6163  001C86  502A               	movf	??___ftdiv,w,c
  6164  001C88  6E32               	movwf	___ftdiv@sign,c
  6165  001C8A  5032               	movf	___ftdiv@sign,w,c
  6166  001C8C  A4D8               	btfss	status,2,c
  6167  001C8E  D007               	goto	l526
  6168  001C90  0E00               	movlw	0
  6169  001C92  6E24               	movwf	?___ftdiv,c
  6170  001C94  0E00               	movlw	0
  6171  001C96  6E25               	movwf	?___ftdiv+1,c
  6172  001C98  0E00               	movlw	0
  6173  001C9A  6E26               	movwf	?___ftdiv+2,c
  6174  001C9C  0012               	return	
  6175  001C9E                     l526:
  6176  001C9E  0E00               	movlw	0
  6177  001CA0  6E2E               	movwf	___ftdiv@f3,c
  6178  001CA2  0E00               	movlw	0
  6179  001CA4  6E2F               	movwf	___ftdiv@f3+1,c
  6180  001CA6  0E00               	movlw	0
  6181  001CA8  6E30               	movwf	___ftdiv@f3+2,c
  6182  001CAA  5032               	movf	___ftdiv@sign,w,c
  6183  001CAC  0F89               	addlw	137
  6184  001CAE  5E31               	subwf	___ftdiv@exp,f,c
  6185  001CB0  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  6186  001CB4  5029               	movf	___ftdiv@f2+2,w,c
  6187  001CB6  1A32               	xorwf	___ftdiv@sign,f,c
  6188  001CB8  0E80               	movlw	128
  6189  001CBA  1632               	andwf	___ftdiv@sign,f,c
  6190  001CBC  8E25               	bsf	___ftdiv@f1+1,7,c
  6191  001CBE  0EFF               	movlw	255
  6192  001CC0  1624               	andwf	___ftdiv@f1,f,c
  6193  001CC2  0EFF               	movlw	255
  6194  001CC4  1625               	andwf	___ftdiv@f1+1,f,c
  6195  001CC6  0E00               	movlw	0
  6196  001CC8  1626               	andwf	___ftdiv@f1+2,f,c
  6197  001CCA  8E28               	bsf	___ftdiv@f2+1,7,c
  6198  001CCC  0EFF               	movlw	255
  6199  001CCE  1627               	andwf	___ftdiv@f2,f,c
  6200  001CD0  0EFF               	movlw	255
  6201  001CD2  1628               	andwf	___ftdiv@f2+1,f,c
  6202  001CD4  0E00               	movlw	0
  6203  001CD6  1629               	andwf	___ftdiv@f2+2,f,c
  6204  001CD8  0E18               	movlw	24
  6205  001CDA  6E2D               	movwf	___ftdiv@cntr,c
  6206  001CDC  90D8               	bcf	status,0,c
  6207  001CDE  362E               	rlcf	___ftdiv@f3,f,c
  6208  001CE0  362F               	rlcf	___ftdiv@f3+1,f,c
  6209  001CE2  3630               	rlcf	___ftdiv@f3+2,f,c
  6210  001CE4  5027               	movf	___ftdiv@f2,w,c
  6211  001CE6  5C24               	subwf	___ftdiv@f1,w,c
  6212  001CE8  5028               	movf	___ftdiv@f2+1,w,c
  6213  001CEA  5825               	subwfb	___ftdiv@f1+1,w,c
  6214  001CEC  5029               	movf	___ftdiv@f2+2,w,c
  6215  001CEE  5826               	subwfb	___ftdiv@f1+2,w,c
  6216  001CF0  A0D8               	btfss	status,0,c
  6217  001CF2  D007               	goto	l528
  6218  001CF4  5027               	movf	___ftdiv@f2,w,c
  6219  001CF6  5E24               	subwf	___ftdiv@f1,f,c
  6220  001CF8  5028               	movf	___ftdiv@f2+1,w,c
  6221  001CFA  5A25               	subwfb	___ftdiv@f1+1,f,c
  6222  001CFC  5029               	movf	___ftdiv@f2+2,w,c
  6223  001CFE  5A26               	subwfb	___ftdiv@f1+2,f,c
  6224  001D00  802E               	bsf	___ftdiv@f3,0,c
  6225  001D02                     l528:
  6226  001D02  90D8               	bcf	status,0,c
  6227  001D04  3624               	rlcf	___ftdiv@f1,f,c
  6228  001D06  3625               	rlcf	___ftdiv@f1+1,f,c
  6229  001D08  3626               	rlcf	___ftdiv@f1+2,f,c
  6230  001D0A  2E2D               	decfsz	___ftdiv@cntr,f,c
  6231  001D0C  D7E7               	goto	l527
  6232  001D0E  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6233  001D12  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6234  001D16  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6235  001D1A  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6236  001D1E  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6237  001D22  ECF7  F00E         	call	___ftpack	;wreg free
  6238  001D26  C001  F024         	movff	?___ftpack,?___ftdiv
  6239  001D2A  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6240  001D2E  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6241  001D32  0012               	return	
  6242  001D34                     __end_of___ftdiv:
  6243                           	opt stack 0
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           indf0	equ	0xFEF
  6251                           postinc0	equ	0xFEE
  6252                           fsr0h	equ	0xFEA
  6253                           fsr0l	equ	0xFE9
  6254                           wreg	equ	0xFE8
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function ___ftpack *****************
  6263 ;; Defined at:
  6264 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  arg             3    0[COMRAM] unsigned um
  6267 ;;  exp             1    3[COMRAM] unsigned char 
  6268 ;;  sign            1    4[COMRAM] unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  3    0[COMRAM] float 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6280 ;;      Params:         5       0       0       0       0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0
  6282 ;;      Temps:          3       0       0       0       0       0       0
  6283 ;;      Totals:         8       0       0       0       0       0       0
  6284 ;;Total ram usage:        8 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		___ftadd
  6290 ;;		___ftdiv
  6291 ;;		___ftmul
  6292 ;;		___lltoft
  6293 ;;		___lwtoft
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text30
  6298  001DEE                     __ptext30:
  6299                           	opt stack 0
  6300  001DEE                     ___ftpack:
  6301                           	opt stack 27
  6302                           
  6303                           ;incstack = 0
  6304  001DEE  5004               	movf	___ftpack@exp,w,c
  6305  001DF0  B4D8               	btfsc	status,2,c
  6306  001DF2  D005               	goto	u1530
  6307  001DF4  5001               	movf	___ftpack@arg,w,c
  6308  001DF6  1002               	iorwf	___ftpack@arg+1,w,c
  6309  001DF8  1003               	iorwf	___ftpack@arg+2,w,c
  6310  001DFA  A4D8               	btfss	status,2,c
  6311  001DFC  D00C               	goto	l460
  6312  001DFE                     u1530:
  6313  001DFE  0E00               	movlw	0
  6314  001E00  6E01               	movwf	?___ftpack,c
  6315  001E02  0E00               	movlw	0
  6316  001E04  6E02               	movwf	?___ftpack+1,c
  6317  001E06  0E00               	movlw	0
  6318  001E08  6E03               	movwf	?___ftpack+2,c
  6319  001E0A  0012               	return	
  6320  001E0C  2A04               	incf	___ftpack@exp,f,c
  6321  001E0E  90D8               	bcf	status,0,c
  6322  001E10  3203               	rrcf	___ftpack@arg+2,f,c
  6323  001E12  3202               	rrcf	___ftpack@arg+1,f,c
  6324  001E14  3201               	rrcf	___ftpack@arg,f,c
  6325  001E16                     l460:
  6326  001E16  0E00               	movlw	0
  6327  001E18  1401               	andwf	___ftpack@arg,w,c
  6328  001E1A  6E06               	movwf	??___ftpack& (0+255),c
  6329  001E1C  0E00               	movlw	0
  6330  001E1E  1402               	andwf	___ftpack@arg+1,w,c
  6331  001E20  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6332  001E22  0EFE               	movlw	254
  6333  001E24  1403               	andwf	___ftpack@arg+2,w,c
  6334  001E26  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6335  001E28  5006               	movf	??___ftpack,w,c
  6336  001E2A  1007               	iorwf	??___ftpack+1,w,c
  6337  001E2C  1008               	iorwf	??___ftpack+2,w,c
  6338  001E2E  B4D8               	btfsc	status,2,c
  6339  001E30  D00C               	goto	l463
  6340  001E32  D7EC               	goto	l461
  6341  001E34  2A04               	incf	___ftpack@exp,f,c
  6342  001E36  0E01               	movlw	1
  6343  001E38  2601               	addwf	___ftpack@arg,f,c
  6344  001E3A  0E00               	movlw	0
  6345  001E3C  2202               	addwfc	___ftpack@arg+1,f,c
  6346  001E3E  0E00               	movlw	0
  6347  001E40  2203               	addwfc	___ftpack@arg+2,f,c
  6348  001E42  90D8               	bcf	status,0,c
  6349  001E44  3203               	rrcf	___ftpack@arg+2,f,c
  6350  001E46  3202               	rrcf	___ftpack@arg+1,f,c
  6351  001E48  3201               	rrcf	___ftpack@arg,f,c
  6352  001E4A                     l463:
  6353  001E4A  0E00               	movlw	0
  6354  001E4C  1401               	andwf	___ftpack@arg,w,c
  6355  001E4E  6E06               	movwf	??___ftpack& (0+255),c
  6356  001E50  0E00               	movlw	0
  6357  001E52  1402               	andwf	___ftpack@arg+1,w,c
  6358  001E54  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6359  001E56  0EFF               	movlw	255
  6360  001E58  1403               	andwf	___ftpack@arg+2,w,c
  6361  001E5A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6362  001E5C  5006               	movf	??___ftpack,w,c
  6363  001E5E  1007               	iorwf	??___ftpack+1,w,c
  6364  001E60  1008               	iorwf	??___ftpack+2,w,c
  6365  001E62  B4D8               	btfsc	status,2,c
  6366  001E64  D006               	goto	l466
  6367  001E66  D7E6               	goto	l464
  6368  001E68  0604               	decf	___ftpack@exp,f,c
  6369  001E6A  90D8               	bcf	status,0,c
  6370  001E6C  3601               	rlcf	___ftpack@arg,f,c
  6371  001E6E  3602               	rlcf	___ftpack@arg+1,f,c
  6372  001E70  3603               	rlcf	___ftpack@arg+2,f,c
  6373  001E72                     l466:
  6374  001E72  BE02               	btfsc	___ftpack@arg+1,7,c
  6375  001E74  D003               	goto	u1570
  6376  001E76  0E02               	movlw	2
  6377  001E78  6004               	cpfslt	___ftpack@exp,c
  6378  001E7A  D7F6               	goto	l467
  6379  001E7C                     u1570:
  6380  001E7C  A004               	btfss	___ftpack@exp,0,c
  6381  001E7E  9E02               	bcf	___ftpack@arg+1,7,c
  6382  001E80  90D8               	bcf	status,0,c
  6383  001E82  3204               	rrcf	___ftpack@exp,f,c
  6384  001E84  5004               	movf	___ftpack@exp,w,c
  6385  001E86  1203               	iorwf	___ftpack@arg+2,f,c
  6386  001E88  5005               	movf	___ftpack@sign,w,c
  6387  001E8A  A4D8               	btfss	status,2,c
  6388  001E8C  8E03               	bsf	___ftpack@arg+2,7,c
  6389  001E8E  C001  F001         	movff	___ftpack@arg,?___ftpack
  6390  001E92  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6391  001E96  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6392  001E9A  0012               	return	
  6393  001E9C                     __end_of___ftpack:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           indf0	equ	0xFEF
  6402                           postinc0	equ	0xFEE
  6403                           fsr0h	equ	0xFEA
  6404                           fsr0l	equ	0xFE9
  6405                           wreg	equ	0xFE8
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           indf0	equ	0xFEF
  6419                           postinc0	equ	0xFEE
  6420                           fsr0h	equ	0xFEA
  6421                           fsr0l	equ	0xFE9
  6422                           wreg	equ	0xFE8
  6423                           indf2	equ	0xFDF
  6424                           postinc2	equ	0xFDE
  6425                           postdec2	equ	0xFDD
  6426                           fsr2h	equ	0xFDA
  6427                           fsr2l	equ	0xFD9
  6428                           status	equ	0xFD8
  6429                           
  6430                           	psect	rparam
  6431  0000                     tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           indf0	equ	0xFEF
  6438                           postinc0	equ	0xFEE
  6439                           fsr0h	equ	0xFEA
  6440                           fsr0l	equ	0xFE9
  6441                           wreg	equ	0xFE8
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           postdec2	equ	0xFDD
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    118
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    104     113
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[4]), value(COMRAM[8]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   66844
                                            101 COMRAM     3     3      0
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                           ___lwtoft
                            _lcd_cmd
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   50527
                                             63 COMRAM    38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12059
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11861
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4272
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     483
                                              4 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     210
                                              3 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0      90
                                              1 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     165
                                              3 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0      75
                                              1 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     335
                                              3 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0      90
                                              1 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftsub
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _lcd_cmd
     _lcd_lat
     _manda
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     68      71       1       89.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71      15        0.0%
DATA                 0      0      71       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Mar 29 20:12:28 2018

            lcd_cmd_hf@x 0002                       l43 1996                       l45 199A  
                     l73 22AA                       l74 228A                       l91 22D2  
                     l76 2292                       l93 22E2                       l77 229A  
                     l85 218E                       l94 22C8                       l78 22A2  
                     l86 2166                       l95 22CC             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$XT 000000             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
           ___ftadd@sign 0037                      l102 22FE                      l103 2300  
                    l104 2308                      l105 230A                      l201 0C1A  
                    l106 2312                      l210 0DB2                      l202 0C04  
                    l107 2314                      l211 0D9C                      l108 231C  
                    l140 1514                      l220 0E5C                      l204 0C3E  
                    l221 0E80                      l213 0DD4                      l205 0C42  
                    l150 12DE                      l222 0E88                      l214 0DF0  
                    l206 0C64                      l143 1102                      l207 0D92  
                    l400 1F66                      l144 102E                      l216 0E10  
                    l208 0CB4                      l160 0790                      l137 1448  
                    l217 0E32                      l161 075A                      l410 2052  
                    l226 0ED2                      l170 0DBC                      l154 0698  
                    l403 1F8E                      l147 10DE                      l219 0E54  
                    l171 07EC                      l155 06B0                      l500 1636  
                    l404 1F98                      l412 2068                      l148 122E  
                    l172 082C                      l164 07B6                      l405 1FA6  
                    l413 2060                      l157 06DC                      l430 186E  
                    l182 09EA                      l174 08BC                      l431 18B0  
                    l175 0920                      l167 07B2                      l159 07A6  
                    l440 1942                      l432 18E0                      l416 2080  
                    l192 0B0E                      l168 07D8                      l505 162C  
                    l441 1936                      l417 208A                      l409 2046  
                    l177 0944                      l514 166A                      l506 1622  
                    l434 191E                      l418 2098                      l194 0B3A  
                    l178 0982                      l515 1660                      l435 190E  
                    l195 0B24                      l179 0A3E                      l460 1E16  
                    l524 1C76                      l428 1850                      l532 172C  
                    l188 0AA2                      l461 1E0C                      l517 168E  
                    l526 1C9E                      l550 1EFC                      l518 16AA  
                    l622 2012                      l534 1758                      l198 0BFA  
                    l463 1E4A                      l527 1CDC                      l519 16DA  
                    l623 2020                      l535 1792                      l199 0B68  
                    l464 1E34                      l528 1D02                      l632 20E8  
                    l640 210E                      l544 181A                      l536 17BA  
                    l560 1AF8                      l633 20F6                      l545 180E  
                    l466 1E72                      l618 1FDE                      l538 17F6  
                    l562 1B10                      l467 1E68                      l491 15A6  
                    l619 1FD2                      l539 17E6                      l563 1B20  
                    l580 1BEC                      l628 20C0                      l396 1F40  
                    l556 1A8E                      l549 1ECC                      l573 225C  
                    l629 20B4                      l397 1F50                      l558 1AB6  
                    l567 235C                      l495 15D0                      l639 211A  
                    l399 1F6E                      l559 1AE8                      l592 23A4  
                    l585 1C20                      l577 1B86                      l586 1C14  
                    l579 1BFC                      l588 1C3C             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _lcd 0069             ___awmod@sign 0006  
                    wreg 000FE8              _sprintf$941 004D              lcd_gotoxy@x 0006  
            lcd_gotoxy@y 0004             __CFG_LVP$OFF 000000             ___ftdiv@cntr 002D  
           ___ftdiv@sign 0032             __CFG_WDT$OFF 000000                     l2711 0C04  
                   l2801 0ECE                     l2647 09C6                     l2639 0982  
                   l2691 0B34                     l2667 0AA6                     l1967 1F28  
                   l2687 0B24                     _ADIF 007CF6                     _ADFM 007E07  
                   _ADON 007E10                     STR_1 0677                     STR_2 0680  
                   STR_3 0686                     u2101 173C                     u2310 1BA4  
                   u2230 1948                     u3007 1D5E                     u2160 1820  
                   u3017 1D70                     u1601 1564                     u2081 1710  
                   u1530 1DFE                     u2410 20C4                     u3027 1D84  
                   u1611 1578                     u2315 1B9C                     u1700 1600  
                   u3037 1D9A                     u2350 1C26                     u3047 1DB0  
                   u2440 2186                     u1640 1598                     u2600 0954  
                   u3057 1DC6                     u1570 1E7C                     u2450 21AE  
                   u2610 0992                     u3067 1DDC                     u2291 1B6A  
                   u1811 1A76                     u1740 163E                     u2380 1FE2  
                   u1900 1F72                     u3077 21D8                     u1670 15C2  
                   u2710 0B48                     u3087 23E4                     u2447 217C  
                   u1831 1A9E                     u2640 09C6                     u2560 0864  
                   u2457 21A4                     u1770 1672                     u2490 0738  
                   u2740 0C28                     u2565 085A                     u2910 0EEC  
                   u2750 0C38                     u1960 206C                     u2680 0ADE  
                   u2921 1C5E                     u2941 1C86                     u2880 0E90  
                   u2890 0EAE                     u2987 221E                     u2997 1D4E  
           __CFG_PWRT$ON 000000                     _main 195A             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr0h 000FEA                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0022             ___param_bank 000000             ___ftmul@sign 0023  
           ___fttol@exp1 0039             ___fttol@lval 0035                    ?_main 0001  
        __end_of___awdiv 1FB0                    _ADRES 000FC3          __end_of___ftadd 1700  
        __end_of___awmod 20A2          __end_of___ftdiv 1D34          __end_of___ftneg 236A  
        __end_of___lldiv 2032          __end_of___ftmul 1B5A          ___awdiv@divisor 0009  
        __end_of___llmod 2108          __end_of___ftsub 2286          __end_of___fttol 1C4E  
        ___awdiv@counter 000B                    _PORTB 000F81                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 2200          __end_of_lcd_lat 23F0          __end_of_lcd_dwr 2246  
        __end_of_lcd_msg 21B6            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 0629  
                  _manda 22F4                    _scale 0EFA          __end_of_isdigit 23AC  
          ___ftpack@sign 0005                    _value 006A           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 0EFA  
        __initialization 23C6             __end_of_main 1A66                   ??_main 0066  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   ?_manda 0001  
       ___llmod@dividend 0001                   ?_scale 0024         ___awdiv@dividend 0007  
       __end_of___ftpack 1E9C         __end_of___lltoft 2164         __end_of___lwtoft 238E  
                 _TRISA0 007C90           __CFG_XINST$OFF 000000         __end_of__powers_ 0650  
       __end_of_lcd_init 1DEE         __end_of_lcd_putc 22C0                   ___ftge 1E9C  
                 ___wmul 2320                ??___awdiv 000B                ??___ftadd 0034  
         __CFG_STVREN$ON 000000                ??___awmod 0005                ??___ftdiv 002A  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
                 _fround 1302                   clear_0 23CC         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005                ??_lcd_cmd 0002  
              ??_lcd_lat 0001                ??_lcd_dwr 0002                ??_lcd_msg 0007  
  ___ftmul@f3_as_product 001F                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
      lcd_gotoxy@ADDRESS 0007                ??_sprintf 0047               __accesstop 0080  
__end_of__initialization 23D2          __CFG_PBADEN$OFF 000000               ___ftadd@f1 002E  
             ___ftadd@f2 0031               ___ftge@ff1 0001               ___ftge@ff2 0004  
          ___rparam_used 000001               ___ftdiv@f1 0024               ___ftdiv@f2 0027  
             ___ftdiv@f3 002E               ___ftneg@f1 0001               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_manda 2320            __end_of_scale 1302               ___lwtoft@c 0009  
             __div_to_l_ 1832                  ??_manda 0001          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
           sprintf@width 0058            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
     __CFG_CCP2MX$PORTBE 000000                  ?___ftge 0001                  ?___wmul 000F  
                ?_fround 0024                ?___ftpack 0001                ?___lltoft 0009  
              ?___lwtoft 0009               _lcd_cmd_hf 23AC               _lcd_gotoxy 22C0  
              ?_lcd_init 0001                ?_lcd_putc 0001        __end_of__npowers_ 0677  
                __Hparam 0000                  __Lparam 0000          __size_of___ftge 0090  
                ___awdiv 1F2C                  ___ftadd 1554                  ___awmod 2032  
                ___ftdiv 1C4E                  ___ftneg 2346                  ___lldiv 1FB0  
        __size_of___wmul 0026                  ___ftmul 1A66                  ___llmod 20A2  
                ___ftsub 2246                  ___fttol 1B5A               _fround$938 002A  
             _fround$939 0027             __psmallconst 0600                  __pcinit 23C6  
             ??___ftpack 0006          __size_of_fround 0252                  __ramtop 0600  
             ??___lltoft 000D                  __ptext0 195A                  __ptext1 068C  
                __ptext2 0EFA                  __ptext3 238E                  __ptext4 1302  
                __ptext5 2320                  __ptext6 1A66                  __ptext7 2032  
                __ptext8 1F2C                  __ptext9 1700                  _lcd_cmd 21B6  
                _lcd_lat 23DC                  _lcd_dwr 2200                  _lcd_msg 2164  
             ??___lwtoft 000C              ?__div_to_l_ 0001                  _dpowers 0601  
                _isdigit 238E         ___awmod@dividend 0001                  _sprintf 068C  
             ??_lcd_init 0004               ??_lcd_putc 0004     end_of_initialization 23D2  
          __Lmediumconst 0000          ___lldiv@divisor 0005          ___lldiv@counter 000D  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007  
              _PORTCbits 000F82              ?_lcd_cmd_hf 0001                _TRISCbits 000F94  
            ?_lcd_gotoxy 0004              ___ftdiv@exp 0031      __size_of__div_to_l_ 0128  
            ___ftmul@exp 001E           __end_of___ftge 1F2C           __end_of___wmul 2346  
         __end_of_fround 1554      start_initialization 23C6      __end_of__tdiv_to_l_ 1832  
        ___llmod@divisor 0005          ___llmod@counter 0009      __size_of_lcd_cmd_hf 001A  
               ??___ftge 0007      __size_of_lcd_gotoxy 0034                 ??___wmul 0013  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 0027            sprintf@tmpval 005A  
             fround@prec 002D        __size_of___ftpack 00AE        __size_of___lltoft 005C  
            __pbssCOMRAM 0069        __size_of___lwtoft 0024        __size_of_lcd_init 00BA  
            sprintf@flag 0056        __size_of_lcd_putc 003A              sprintf@fval 0060  
            sprintf@prec 0063                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftdiv 0024                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 0650                 ?___fttol 002B  
            __tdiv_to_l_ 1700                 ?_lcd_cmd 0001                 ?_lcd_lat 0001  
               ?_lcd_dwr 0001                 ?_lcd_msg 0005             ??__div_to_l_ 0007  
            __smallconst 0600                 ?_isdigit 0001                _scale$940 0027  
         __size_of_manda 002C                 ?_sprintf 0040           __size_of_scale 0408  
         ___wmul@product 0013       __end_of__div_to_l_ 195A         __CFG_WDTPS$32768 000000  
             _ADCON0bits 000FC2        ___wmul@multiplier 000F             ??_lcd_cmd_hf 0002  
              lcd_putc@c 0004                main@valor 0066             ??_lcd_gotoxy 0005  
              manda@dato 0001                 __Hrparam 0000                 __Lrparam 0000  
     __end_of_lcd_cmd_hf 23C6       __end_of_lcd_gotoxy 22F4         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___ftpack 1DEE                 ___lltoft 2108              _isdigit$599 0002  
               ___lwtoft 236A         __size_of_lcd_cmd 004A         __size_of_lcd_lat 0014  
       __size_of_lcd_dwr 0046         __size_of_lcd_msg 0052               sprintf@exp 005E  
             sprintf@val 0052         __size_of_isdigit 001E                 __ptext10 1832  
               __ptext11 2108                 __ptext20 2286                 __ptext12 20A2  
               __ptext21 2200                 __ptext13 1FB0                 __ptext30 1DEE  
               __ptext22 1D34                 __ptext14 1B5A                 __ptext23 23AC  
               __ptext15 2246                 __ptext24 22C0                 __ptext16 1554  
               __ptext25 21B6                 __ptext17 2346                 __ptext26 22F4  
               __ptext18 1E9C                 __ptext27 23DC                 __ptext19 2164  
               __ptext28 236A                 __ptext29 1C4E                 __powers_ 0629  
               _lcd_init 1D34                 _lcd_putc 2286         __size_of_sprintf 086E  
          __size_of_main 010C                 lcd_cmd@x 0003                 lcd_dwr@x 0003  
               lcd_msg@c 0005                 isdigit@c 0003                 scale@scl 002A  
              sprintf@ap 0050         __tdiv_to_l_@exp1 000F                sprintf@sp 0040  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001                 sprintf@c 0065                 sprintf@f 0042  
       ___lldiv@quotient 0009  
