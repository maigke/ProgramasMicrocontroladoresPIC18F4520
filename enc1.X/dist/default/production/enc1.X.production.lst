

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr  1 20:31:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4520 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	smallconst
    70  000600                     __psmallconst:
    71                           	opt stack 0
    72  000600  00                 	db	0
    73  000601                     _dpowers:
    74                           	opt stack 0
    75  000601  0001               	dw	1
    76  000603  000A               	dw	10
    77  000605  0064               	dw	100
    78  000607  03E8               	dw	1000
    79  000609  2710               	dw	10000
    80  00060B                     __end_of_dpowers:
    81                           	opt stack 0
    82  0000                     _TMR1	set	4046
    83  0000                     _PORTD	set	3971
    84  0000                     _PORTB	set	3969
    85  0000                     _T1CONbits	set	4045
    86  0000                     _PIE1bits	set	3997
    87  0000                     _TRISB	set	3987
    88  0000                     _PIR1bits	set	3998
    89  0000                     _GIEL	set	32662
    90  0000                     _GIEH	set	32663
    91  0000                     _IPEN	set	32391
    92  0000                     _TMR1CS	set	32361
    93  0000                     _T1CKPS0	set	32364
    94  0000                     _T1CKPS1	set	32365
    95  0000                     _TMR1IP	set	31992
    96  0000                     _INTEDG0	set	32654
    97  0000                     _INT0IE	set	32660
    98  0000                     _INT0IF	set	32657
    99  0000                     _TMR1IF	set	31984
   100  0000                     _TMR1ON	set	32360
   101  00060B                     STR_1:
   102  00060B  20                 	db	32
   103  00060C  48                 	db	72	;'H'
   104  00060D  61                 	db	97	;'a'
   105  00060E  62                 	db	98	;'b'
   106  00060F  69                 	db	105	;'i'
   107  000610  6C                 	db	108	;'l'
   108  000611  69                 	db	105	;'i'
   109  000612  74                 	db	116	;'t'
   110  000613  61                 	db	97	;'a'
   111  000614  20                 	db	32
   112  000615  69                 	db	105	;'i'
   113  000616  6E                 	db	110	;'n'
   114  000617  74                 	db	116	;'t'
   115  000618  27                 	db	39
   116  000619  73                 	db	115	;'s'
   117  00061A  00                 	db	0
   118  00061B                     STR_2:
   119  00061B  25                 	db	37
   120  00061C  34                 	db	52	;'4'
   121  00061D  64                 	db	100	;'d'
   122  00061E  00                 	db	0
   123                           
   124                           ; #config settings
   125  00061F  00                 	db	0	; dummy byte at the end
   126  0000                     
   127                           	psect	cinit
   128  000D4E                     __pcinit:
   129                           	opt stack 0
   130  000D4E                     start_initialization:
   131                           	opt stack 0
   132  000D4E                     __initialization:
   133                           	opt stack 0
   134                           
   135                           ; Clear objects allocated to COMRAM (13 bytes)
   136  000D4E  EE00  F03D         	lfsr	0,__pbssCOMRAM
   137  000D52  0E0D               	movlw	13
   138  000D54                     clear_0:
   139  000D54  6AEE               	clrf	postinc0,c
   140  000D56  06E8               	decf	wreg,f,c
   141  000D58  E1FD               	bnz	clear_0
   142  000D5A                     end_of_initialization:
   143                           	opt stack 0
   144  000D5A                     __end_of__initialization:
   145                           	opt stack 0
   146  000D5A  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147  000D5C  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148  000D5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   149  000D60  6EF8               	movwf	tblptru,c
   150  000D62  0100               	movlb	0
   151  000D64  EFDE  F004         	goto	_main	;jump to C main() function
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssCOMRAM
   157  00003D                     __pbssCOMRAM:
   158                           	opt stack 0
   159  00003D                     _rpm:
   160                           	opt stack 0
   161  00003D                     	ds	2
   162  00003F                     _cont:
   163                           	opt stack 0
   164  00003F                     	ds	2
   165  000041                     _lcd:
   166                           	opt stack 0
   167  000041                     	ds	1
   168  000042                     _value:
   169                           	opt stack 0
   170  000042                     	ds	8
   171                           tblptru	equ	0xFF8
   172                           postinc0	equ	0xFEE
   173                           wreg	equ	0xFE8
   174                           
   175                           	psect	cstackBANK0
   176  000080                     __pcstackBANK0:
   177                           	opt stack 0
   178  000080                     ?___lwmod:
   179                           	opt stack 0
   180  000080                     ___lwmod@dividend:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0x0
   184  000080                     	ds	2
   185  000082                     ___lwmod@divisor:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000082                     	ds	2
   190  000084                     ___lwmod@counter:
   191                           	opt stack 0
   192                           
   193                           ; 1 bytes @ 0x4
   194  000084                     	ds	1
   195  000085                     ?_sprintf:
   196                           	opt stack 0
   197  000085                     sprintf@sp:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x5
   201  000085                     	ds	2
   202  000087                     sprintf@f:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x7
   206  000087                     	ds	4
   207  00008B                     ??_sprintf:
   208                           
   209                           ; 1 bytes @ 0xB
   210  00008B                     	ds	4
   211  00008F                     sprintf@ap:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0xF
   215  00008F                     	ds	2
   216  000091                     sprintf@prec:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x11
   220  000091                     	ds	1
   221  000092                     sprintf@flag:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x12
   225  000092                     	ds	1
   226  000093                     sprintf@val:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x13
   230  000093                     	ds	2
   231  000095                     sprintf@width:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x15
   235  000095                     	ds	2
   236  000097                     sprintf@c:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x17
   240  000097                     	ds	1
   241  000098                     ??_main:
   242                           
   243                           ; 1 bytes @ 0x18
   244  000098                     	ds	2
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	cstackCOMRAM
   250  000001                     __pcstackCOMRAM:
   251                           	opt stack 0
   252  000001                     ??_high_isr:
   253  000001                     
   254                           ; 1 bytes @ 0x0
   255  000001                     	ds	18
   256  000013                     ?i1___wmul:
   257                           	opt stack 0
   258  000013                     i1___wmul@multiplier:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x12
   262  000013                     	ds	2
   263  000015                     i1___wmul@multiplicand:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x14
   267  000015                     	ds	2
   268  000017                     i1___wmul@product:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x16
   272  000017                     	ds	2
   273  000019                     ?___awdiv:
   274                           	opt stack 0
   275  000019                     ___awdiv@dividend:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x18
   279  000019                     	ds	2
   280  00001B                     ___awdiv@divisor:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x1A
   284  00001B                     	ds	2
   285  00001D                     ___awdiv@counter:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x1C
   289  00001D                     	ds	1
   290  00001E                     ___awdiv@sign:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x1D
   294  00001E                     	ds	1
   295  00001F                     ___awdiv@quotient:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x1E
   299  00001F                     	ds	2
   300  000021                     ??_low_isr:
   301                           
   302                           ; 1 bytes @ 0x20
   303  000021                     	ds	21
   304  000036                     ??_isdigit:
   305  000036                     ??_lcd_lat:
   306  000036                     ?___wmul:
   307                           	opt stack 0
   308  000036                     ?___lwdiv:
   309                           	opt stack 0
   310  000036                     manda@dato:
   311                           	opt stack 0
   312  000036                     ___wmul@multiplier:
   313                           	opt stack 0
   314  000036                     ___lwdiv@dividend:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x35
   318  000036                     	ds	1
   319  000037                     ??_lcd_dwr:
   320  000037                     ??_lcd_cmd:
   321  000037                     lcd_cmd_hf@x:
   322                           	opt stack 0
   323  000037                     _isdigit$504:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x36
   327  000037                     	ds	1
   328  000038                     lcd_cmd@x:
   329                           	opt stack 0
   330  000038                     lcd_dwr@x:
   331                           	opt stack 0
   332  000038                     isdigit@c:
   333                           	opt stack 0
   334  000038                     ___wmul@multiplicand:
   335                           	opt stack 0
   336  000038                     ___lwdiv@divisor:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x37
   340  000038                     	ds	1
   341  000039                     ??_lcd_init:
   342  000039                     lcd_putc@c:
   343                           	opt stack 0
   344  000039                     lcd_gotoxy@y:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x38
   348  000039                     	ds	1
   349  00003A                     ??_lcd_gotoxy:
   350  00003A                     lcd_msg@c:
   351                           	opt stack 0
   352  00003A                     ___wmul@product:
   353                           	opt stack 0
   354  00003A                     ___lwdiv@quotient:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x39
   358  00003A                     	ds	1
   359  00003B                     lcd_gotoxy@x:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x3A
   363  00003B                     	ds	1
   364  00003C                     lcd_gotoxy@ADDRESS:
   365                           	opt stack 0
   366  00003C                     ___lwdiv@counter:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x3B
   370  00003C                     	ds	1
   371  00003D                     tblptru	equ	0xFF8
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           ; 1 bytes @ 0x3C
   376 ;;
   377 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   378 ;;
   379 ;; *************** function _main *****************
   380 ;; Defined at:
   381 ;;		line 93 in file "enc1.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   395 ;;      Params:         0       0       0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0       0       0
   397 ;;      Temps:          0       2       0       0       0       0       0
   398 ;;      Totals:         0       2       0       0       0       0       0
   399 ;;Total ram usage:        2 bytes
   400 ;; Hardware stack levels required when called:    7
   401 ;; This function calls:
   402 ;;		_lcd_gotoxy
   403 ;;		_lcd_init
   404 ;;		_lcd_msg
   405 ;;		_sprintf
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text0
   412  0009BC                     __ptext0:
   413                           	opt stack 0
   414  0009BC                     _main:
   415                           	opt stack 24
   416                           
   417                           ;enc1.c: 95: cont = 0;
   418                           
   419                           ;incstack = 0
   420  0009BC  0E00               	movlw	0
   421  0009BE  6E40               	movwf	_cont+1,c	;volatile
   422  0009C0  0E00               	movlw	0
   423  0009C2  6E3F               	movwf	_cont,c	;volatile
   424                           
   425                           ;enc1.c: 96: TRISB = 0x03;
   426  0009C4  0E03               	movlw	3
   427  0009C6  6E93               	movwf	3987,c	;volatile
   428                           
   429                           ;enc1.c: 97: lcd_init();
   430  0009C8  EC32  F004         	call	_lcd_init	;wreg free
   431                           
   432                           ;enc1.c: 98: lcd_msg(" Habilita int's");
   433  0009CC  0E0B               	movlw	low STR_1
   434  0009CE  6E3A               	movwf	lcd_msg@c,c
   435  0009D0  0E06               	movlw	high STR_1
   436  0009D2  6E3B               	movwf	lcd_msg@c+1,c
   437  0009D4  EC92  F005         	call	_lcd_msg	;wreg free
   438                           
   439                           ;enc1.c: 103: INT0IE = 1;
   440  0009D8  88F2               	bsf	intcon,4,c	;volatile
   441                           
   442                           ;enc1.c: 104: INTEDG0 = 1;
   443  0009DA  8CF1               	bsf	intcon2,6,c	;volatile
   444                           
   445                           ;enc1.c: 111: TMR1IP = 0;
   446  0009DC  909F               	bcf	3999,0,c	;volatile
   447                           
   448                           ;enc1.c: 114: PIE1bits.TMR1IE = 1;
   449  0009DE  809D               	bsf	3997,0,c	;volatile
   450                           
   451                           ;enc1.c: 115: T1CONbits.RD16 = 1;
   452  0009E0  8ECD               	bsf	4045,7,c	;volatile
   453                           
   454                           ;enc1.c: 116: T1CKPS1 = 1;
   455  0009E2  8ACD               	bsf	4045,5,c	;volatile
   456                           
   457                           ;enc1.c: 117: T1CKPS0 = 1;
   458  0009E4  88CD               	bsf	4045,4,c	;volatile
   459                           
   460                           ;enc1.c: 118: TMR1CS = 0;
   461  0009E6  92CD               	bcf	4045,1,c	;volatile
   462                           
   463                           ;enc1.c: 119: TMR1ON = 0;
   464  0009E8  90CD               	bcf	4045,0,c	;volatile
   465                           
   466                           ;enc1.c: 120: TMR1 = 53036;
   467  0009EA  0ECF               	movlw	207
   468  0009EC  6ECF               	movwf	4047,c	;volatile
   469  0009EE  0E2C               	movlw	44
   470  0009F0  6ECE               	movwf	4046,c	;volatile
   471                           
   472                           ;enc1.c: 124: IPEN = 1;
   473  0009F2  8ED0               	bsf	4048,7,c	;volatile
   474                           
   475                           ;enc1.c: 125: GIEH = 1;
   476  0009F4  8EF2               	bsf	intcon,7,c	;volatile
   477                           
   478                           ;enc1.c: 126: GIEL = 1;
   479  0009F6  8CF2               	bsf	intcon,6,c	;volatile
   480                           
   481                           ;enc1.c: 130: (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
   482  0009F8  888A               	bsf	3978,4,c	;volatile
   483                           
   484                           ;enc1.c: 131: (*(&(*(&PORTB + 0x09))) |= (1<<(2)));
   485  0009FA  848A               	bsf	3978,2,c	;volatile
   486                           
   487                           ;enc1.c: 132: (*(&(*(&PORTB + 0x09))) &=~ (1<<(3)));
   488  0009FC  968A               	bcf	3978,3,c	;volatile
   489                           
   490                           ;enc1.c: 133: TMR1ON = 1;
   491  0009FE  80CD               	bsf	4045,0,c	;volatile
   492  000A00                     
   493                           ;enc1.c: 136: {
   494                           ;enc1.c: 137: _delay((unsigned long)((980)*(4000000/4000.0)));
   495  000A00  0E05               	movlw	5
   496  000A02  0100               	movlb	0	; () banked
   497  000A04  6F99               	movwf	(??_main+1)& (0+255),b
   498  000A06  0EF9               	movlw	249
   499  000A08  6F98               	movwf	??_main& (0+255),b
   500  000A0A  0EB5               	movlw	181
   501  000A0C                     u917:
   502  000A0C  2EE8               	decfsz	wreg,f,c
   503  000A0E  D7FE               	bra	u917
   504  000A10  2F98               	decfsz	??_main& (0+255),f,b
   505  000A12  D7FC               	bra	u917
   506  000A14  2F99               	decfsz	(??_main+1)& (0+255),f,b
   507  000A16  D7FA               	bra	u917
   508                           
   509                           ;enc1.c: 138: sprintf(value,"%4d",rpm);
   510  000A18  0E42               	movlw	low _value
   511  000A1A  0100               	movlb	0	; () banked
   512  000A1C  6F85               	movwf	sprintf@sp& (0+255),b
   513  000A1E  0E00               	movlw	high _value
   514  000A20  6F86               	movwf	(sprintf@sp+1)& (0+255),b
   515  000A22  0E1B               	movlw	low STR_2
   516  000A24  6F87               	movwf	sprintf@f& (0+255),b
   517  000A26  0E06               	movlw	high STR_2
   518  000A28  6F88               	movwf	(sprintf@f+1)& (0+255),b
   519  000A2A  C03D  F089         	movff	_rpm,?_sprintf+4	;volatile
   520  000A2E  C03E  F08A         	movff	_rpm+1,?_sprintf+5	;volatile
   521  000A32  EC10  F003         	call	_sprintf	;wreg free
   522                           
   523                           ;enc1.c: 139: lcd_gotoxy(5,2);
   524  000A36  0E02               	movlw	2
   525  000A38  6E39               	movwf	lcd_gotoxy@y,c
   526  000A3A  0E05               	movlw	5
   527  000A3C  EC42  F006         	call	_lcd_gotoxy
   528                           
   529                           ;enc1.c: 140: lcd_msg(value);
   530  000A40  0E42               	movlw	low _value
   531  000A42  6E3A               	movwf	lcd_msg@c,c
   532  000A44  0E00               	movlw	high _value
   533  000A46  6E3B               	movwf	lcd_msg@c+1,c
   534  000A48  EC92  F005         	call	_lcd_msg	;wreg free
   535  000A4C  D7D9               	goto	l69
   536  000A4E                     __end_of_main:
   537                           	opt stack 0
   538                           tblptru	equ	0xFF8
   539                           intcon	equ	0xFF2
   540                           intcon2	equ	0xFF1
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544 ;; *************** function _sprintf *****************
   545 ;; Defined at:
   546 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  sp              2    5[BANK0 ] PTR unsigned char 
   549 ;;		 -> value(8), 
   550 ;;  f               2    7[BANK0 ] PTR const unsigned char 
   551 ;;		 -> STR_2(4), 
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  tmpval          4    0        struct .
   554 ;;  cp              3    0        PTR const unsigned char 
   555 ;;  width           2   21[BANK0 ] int 
   556 ;;  val             2   19[BANK0 ] unsigned int 
   557 ;;  ap              2   15[BANK0 ] PTR void [1]
   558 ;;		 -> ?_sprintf(2), 
   559 ;;  len             2    0        unsigned int 
   560 ;;  c               1   23[BANK0 ] char 
   561 ;;  flag            1   18[BANK0 ] unsigned char 
   562 ;;  prec            1   17[BANK0 ] char 
   563 ;; Return value:  Size  Location     Type
   564 ;;                  2    5[BANK0 ] int 
   565 ;; Registers used:
   566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   572 ;;      Params:         0       6       0       0       0       0       0
   573 ;;      Locals:         0       9       0       0       0       0       0
   574 ;;      Temps:          0       4       0       0       0       0       0
   575 ;;      Totals:         0      19       0       0       0       0       0
   576 ;;Total ram usage:       19 bytes
   577 ;; Hardware stack levels used:    1
   578 ;; Hardware stack levels required when called:    4
   579 ;; This function calls:
   580 ;;		___lwdiv
   581 ;;		___lwmod
   582 ;;		___wmul
   583 ;;		_isdigit
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text1
   590  000620                     __ptext1:
   591                           	opt stack 0
   592  000620                     _sprintf:
   593                           	opt stack 26
   594                           
   595                           ;doprnt.c: 494: va_list ap;
   596                           ;doprnt.c: 499: signed char c;
   597                           ;doprnt.c: 501: int width;
   598                           ;doprnt.c: 506: signed char prec;
   599                           ;doprnt.c: 508: unsigned char flag;
   600                           ;doprnt.c: 523: union {
   601                           ;doprnt.c: 524: unsigned long vd;
   602                           ;doprnt.c: 525: double integ;
   603                           ;doprnt.c: 526: } tmpval;
   604                           ;doprnt.c: 528: unsigned int val;
   605                           ;doprnt.c: 529: unsigned len;
   606                           ;doprnt.c: 530: const char * cp;
   607                           ;doprnt.c: 533: *ap = __va_start();
   608                           
   609                           ;incstack = 0
   610  000620  0E89               	movlw	low (?_sprintf+4)
   611  000622  0100               	movlb	0	; () banked
   612  000624  6F8F               	movwf	sprintf@ap& (0+255),b
   613  000626  0E00               	movlw	high (?_sprintf+4)
   614  000628  6F90               	movwf	(sprintf@ap+1)& (0+255),b
   615                           
   616                           ;doprnt.c: 536: while(c = *f++) {
   617  00062A  D108               	goto	u890
   618  00062C                     
   619                           ; BSR set to: 0
   620                           ;doprnt.c: 538: if(c != '%')
   621                           
   622                           ; BSR set to: 0
   623  00062C  0E25               	movlw	37
   624  00062E  1997               	xorwf	sprintf@c& (0+255),w,b
   625  000630  B4D8               	btfsc	status,2,c
   626  000632  D009               	goto	l152
   627                           
   628                           ; BSR set to: 0
   629                           ;doprnt.c: 540: {
   630                           ;doprnt.c: 541: ((*sp++ = (c)));
   631  000634  C085  FFD9         	movff	sprintf@sp,fsr2l
   632  000638  C086  FFDA         	movff	sprintf@sp+1,fsr2h
   633  00063C  C097  FFDF         	movff	sprintf@c,indf2
   634                           
   635                           ; BSR set to: 0
   636  000640  4B85               	infsnz	sprintf@sp& (0+255),f,b
   637  000642  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
   638                           
   639                           ;doprnt.c: 542: continue;
   640  000644  D0FB               	goto	u890
   641  000646                     l152:
   642                           
   643                           ; BSR set to: 0
   644                           ;doprnt.c: 543: }
   645                           ;doprnt.c: 546: width = 0;
   646                           
   647                           ; BSR set to: 0
   648  000646  0E00               	movlw	0
   649  000648  6F96               	movwf	(sprintf@width+1)& (0+255),b
   650  00064A  0E00               	movlw	0
   651  00064C  6F95               	movwf	sprintf@width& (0+255),b
   652                           
   653                           ;doprnt.c: 548: flag = 0;
   654  00064E  0E00               	movlw	0
   655  000650  6F92               	movwf	sprintf@flag& (0+255),b
   656                           
   657                           ; BSR set to: 0
   658                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   659  000652  C087  FFF6         	movff	sprintf@f,tblptrl
   660  000656  C088  FFF7         	movff	sprintf@f+1,tblptrh
   661  00065A                     	if	0	;tblptru may be non-zero
   662  00065A                     	endif
   663  00065A                     	if	0	;tblptru may be non-zero
   664  00065A                     	endif
   665  00065A  0008               	tblrd		*
   666  00065C  50F5               	movf	tablat,w,c
   667  00065E  EC98  F006         	call	_isdigit
   668  000662  A0D8               	btfss	status,0,c
   669  000664  D034               	goto	l156
   670                           
   671                           ;doprnt.c: 598: width = 0;
   672  000666  0E00               	movlw	0
   673  000668  0100               	movlb	0	; () banked
   674  00066A  6F96               	movwf	(sprintf@width+1)& (0+255),b
   675  00066C  0E00               	movlw	0
   676  00066E  6F95               	movwf	sprintf@width& (0+255),b
   677  000670                     
   678                           ;doprnt.c: 600: width *= 10;
   679                           
   680                           ; BSR set to: 0
   681  000670  C095  F036         	movff	sprintf@width,___wmul@multiplier
   682  000674  C096  F037         	movff	sprintf@width+1,___wmul@multiplier+1
   683  000678  0E00               	movlw	0
   684  00067A  6E39               	movwf	___wmul@multiplicand+1,c
   685  00067C  0E0A               	movlw	10
   686  00067E  6E38               	movwf	___wmul@multiplicand,c
   687  000680  EC72  F006         	call	___wmul	;wreg free
   688  000684  C036  F095         	movff	?___wmul,sprintf@width
   689  000688  C037  F096         	movff	?___wmul+1,sprintf@width+1
   690                           
   691                           ;doprnt.c: 601: width += *f++ - '0';
   692  00068C  0ED0               	movlw	208
   693  00068E  0100               	movlb	0	; () banked
   694  000690  6F8B               	movwf	??_sprintf& (0+255),b
   695  000692  0EFF               	movlw	255
   696  000694  6F8C               	movwf	(??_sprintf+1)& (0+255),b
   697  000696  C087  FFF6         	movff	sprintf@f,tblptrl
   698  00069A  C088  FFF7         	movff	sprintf@f+1,tblptrh
   699  00069E                     	if	0	;tblptru may be non-zero
   700  00069E                     	endif
   701  00069E                     	if	0	;tblptru may be non-zero
   702  00069E                     	endif
   703  00069E  0008               	tblrd		*
   704  0006A0  50F5               	movf	tablat,w,c
   705  0006A2  6F8D               	movwf	(??_sprintf+2)& (0+255),b
   706  0006A4  6B8E               	clrf	(??_sprintf+3)& (0+255),b
   707  0006A6  518B               	movf	??_sprintf& (0+255),w,b
   708  0006A8  278D               	addwf	(??_sprintf+2)& (0+255),f,b
   709  0006AA  518C               	movf	(??_sprintf+1)& (0+255),w,b
   710  0006AC  238E               	addwfc	(??_sprintf+3)& (0+255),f,b
   711  0006AE  518D               	movf	(??_sprintf+2)& (0+255),w,b
   712  0006B0  2795               	addwf	sprintf@width& (0+255),f,b
   713  0006B2  518E               	movf	(??_sprintf+3)& (0+255),w,b
   714  0006B4  2396               	addwfc	(sprintf@width+1)& (0+255),f,b
   715                           
   716                           ; BSR set to: 0
   717  0006B6  4B87               	infsnz	sprintf@f& (0+255),f,b
   718  0006B8  2B88               	incf	(sprintf@f+1)& (0+255),f,b
   719                           
   720                           ; BSR set to: 0
   721                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   722  0006BA  C087  FFF6         	movff	sprintf@f,tblptrl
   723  0006BE  C088  FFF7         	movff	sprintf@f+1,tblptrh
   724  0006C2                     	if	0	;tblptru may be non-zero
   725  0006C2                     	endif
   726  0006C2                     	if	0	;tblptru may be non-zero
   727  0006C2                     	endif
   728  0006C2  0008               	tblrd		*
   729  0006C4  50F5               	movf	tablat,w,c
   730  0006C6  EC98  F006         	call	_isdigit
   731  0006CA  B0D8               	btfsc	status,0,c
   732  0006CC  D7D1               	goto	l154
   733  0006CE                     l156:
   734  0006CE  C087  FFF6         	movff	sprintf@f,tblptrl
   735  0006D2  C088  FFF7         	movff	sprintf@f+1,tblptrh
   736  0006D6  0100               	movlb	0	; () banked
   737  0006D8  4B87               	infsnz	sprintf@f& (0+255),f,b
   738  0006DA  2B88               	incf	(sprintf@f+1)& (0+255),f,b
   739  0006DC                     	if	0	;tblptru may be non-zero
   740  0006DC                     	endif
   741  0006DC                     	if	0	;tblptru may be non-zero
   742  0006DC                     	endif
   743  0006DC  0008               	tblrd		*
   744  0006DE  CFF5 F097          	movff	tablat,sprintf@c
   745  0006E2  5197               	movf	sprintf@c& (0+255),w,b
   746                           
   747                           ; Switch size 1, requested type "space"
   748                           ; Number of cases is 3, Range of values is 0 to 105
   749                           ; switch strategies available:
   750                           ; Name         Instructions Cycles
   751                           ; simple_byte           10     6 (average)
   752                           ;	Chosen strategy is simple_byte
   753  0006E4  0A00               	xorlw	0	; case 0
   754  0006E6  B4D8               	btfsc	status,2,c
   755  0006E8  D0B6               	goto	u900
   756  0006EA  0A64               	xorlw	100	; case 100
   757  0006EC  B4D8               	btfsc	status,2,c
   758  0006EE  D003               	goto	l161
   759  0006F0  0A0D               	xorlw	13	; case 105
   760  0006F2  A4D8               	btfss	status,2,c
   761  0006F4  D0A3               	goto	u890
   762  0006F6                     l161:
   763                           
   764                           ;doprnt.c: 1253: {
   765                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   766                           
   767                           ; BSR set to: 0
   768  0006F6  C08F  FFD9         	movff	sprintf@ap,fsr2l
   769  0006FA  C090  FFDA         	movff	sprintf@ap+1,fsr2h
   770  0006FE  CFDE F093          	movff	postinc2,sprintf@val
   771  000702  CFDD F094          	movff	postdec2,sprintf@val+1
   772  000706  0E02               	movlw	2
   773  000708  0100               	movlb	0	; () banked
   774  00070A  278F               	addwf	sprintf@ap& (0+255),f,b
   775  00070C  0E00               	movlw	0
   776  00070E  2390               	addwfc	(sprintf@ap+1)& (0+255),f,b
   777                           
   778                           ; BSR set to: 0
   779                           ;doprnt.c: 1261: if((int)val < 0) {
   780  000710  AF94               	btfss	(sprintf@val+1)& (0+255),7,b
   781  000712  D006               	goto	l163
   782                           
   783                           ; BSR set to: 0
   784                           ;doprnt.c: 1262: flag |= 0x03;
   785  000714  0E03               	movlw	3
   786  000716  1392               	iorwf	sprintf@flag& (0+255),f,b
   787                           
   788                           ; BSR set to: 0
   789                           ;doprnt.c: 1263: val = -val;
   790  000718  6D93               	negf	sprintf@val& (0+255),b
   791  00071A  1F94               	comf	(sprintf@val+1)& (0+255),f,b
   792  00071C  B0D8               	btfsc	status,0,c
   793  00071E  2B94               	incf	(sprintf@val+1)& (0+255),f,b
   794  000720                     l163:
   795                           
   796                           ; BSR set to: 0
   797                           ;doprnt.c: 1264: }
   798                           ;doprnt.c: 1266: }
   799                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   800                           
   801                           ; BSR set to: 0
   802  000720  0E01               	movlw	1
   803  000722  6F97               	movwf	sprintf@c& (0+255),b
   804  000724                     l1577:
   805                           
   806                           ; BSR set to: 0
   807  000724  0E05               	movlw	5
   808  000726  1997               	xorwf	sprintf@c& (0+255),w,b
   809  000728  B4D8               	btfsc	status,2,c
   810  00072A  D012               	goto	u820
   811                           
   812                           ; BSR set to: 0
   813                           ;doprnt.c: 1306: if(val < dpowers[c])
   814                           
   815                           ; BSR set to: 0
   816                           
   817                           ; BSR set to: 0
   818  00072C  5197               	movf	sprintf@c& (0+255),w,b
   819  00072E  0D02               	mullw	2
   820  000730  0E01               	movlw	low _dpowers
   821  000732  24F3               	addwf	prodl,w,c
   822  000734  6EF6               	movwf	tblptrl,c
   823  000736  0E06               	movlw	high _dpowers
   824  000738  20F4               	addwfc	prodh,w,c
   825  00073A  6EF7               	movwf	tblptrh,c
   826  00073C                     	if	0	;There are less than 3 active tblptr bytes
   827  00073C                     	endif
   828  00073C  0009               	tblrd		*+
   829  00073E  50F5               	movf	tablat,w,c
   830  000740  5D93               	subwf	sprintf@val& (0+255),w,b
   831  000742  0009               	tblrd		*+
   832  000744  50F5               	movf	tablat,w,c
   833  000746  5994               	subwfb	(sprintf@val+1)& (0+255),w,b
   834  000748  A0D8               	btfss	status,0,c
   835  00074A  D002               	goto	u820
   836                           
   837                           ; BSR set to: 0
   838                           
   839                           ; BSR set to: 0
   840                           
   841                           ; BSR set to: 0
   842                           ;doprnt.c: 1307: break;
   843  00074C  2B97               	incf	sprintf@c& (0+255),f,b
   844  00074E  D7EA               	goto	l1577
   845  000750                     u820:
   846                           
   847                           ; BSR set to: 0
   848                           ;doprnt.c: 1345: if(width && flag & 0x03)
   849                           
   850                           ; BSR set to: 0
   851  000750  5195               	movf	sprintf@width& (0+255),w,b
   852  000752  1196               	iorwf	(sprintf@width+1)& (0+255),w,b
   853  000754  B4D8               	btfsc	status,2,c
   854  000756  D009               	goto	l167
   855                           
   856                           ; BSR set to: 0
   857  000758  C092  F08B         	movff	sprintf@flag,??_sprintf
   858  00075C  0E03               	movlw	3
   859  00075E  178B               	andwf	??_sprintf& (0+255),f,b
   860  000760  B4D8               	btfsc	status,2,c
   861  000762  D003               	goto	l167
   862                           
   863                           ; BSR set to: 0
   864                           ;doprnt.c: 1346: width--;
   865  000764  0795               	decf	sprintf@width& (0+255),f,b
   866  000766  A0D8               	btfss	status,0,c
   867  000768  0796               	decf	(sprintf@width+1)& (0+255),f,b
   868  00076A                     l167:
   869                           
   870                           ; BSR set to: 0
   871                           ;doprnt.c: 1381: if(width > c)
   872                           
   873                           ; BSR set to: 0
   874  00076A  0E80               	movlw	128
   875  00076C  BF97               	btfsc	sprintf@c& (0+255),7,b
   876  00076E  0E7F               	movlw	127
   877  000770  6F8B               	movwf	??_sprintf& (0+255),b
   878  000772  5195               	movf	sprintf@width& (0+255),w,b
   879  000774  5D97               	subwf	sprintf@c& (0+255),w,b
   880  000776  5196               	movf	(sprintf@width+1)& (0+255),w,b
   881  000778  0A80               	xorlw	128
   882  00077A  598B               	subwfb	??_sprintf& (0+255),w,b
   883  00077C  B0D8               	btfsc	status,0,c
   884  00077E  D007               	goto	l168
   885                           
   886                           ; BSR set to: 0
   887                           ;doprnt.c: 1382: width -= c;
   888  000780  5197               	movf	sprintf@c& (0+255),w,b
   889  000782  5F95               	subwf	sprintf@width& (0+255),f,b
   890  000784  0E00               	movlw	0
   891  000786  BF97               	btfsc	sprintf@c& (0+255),7,b
   892  000788  0EFF               	movlw	255
   893  00078A  5B96               	subwfb	(sprintf@width+1)& (0+255),f,b
   894  00078C  D004               	goto	l169
   895  00078E                     l168:
   896                           
   897                           ; BSR set to: 0
   898                           ;doprnt.c: 1383: else
   899                           ;doprnt.c: 1384: width = 0;
   900                           
   901                           ; BSR set to: 0
   902  00078E  0E00               	movlw	0
   903  000790  6F96               	movwf	(sprintf@width+1)& (0+255),b
   904  000792  0E00               	movlw	0
   905  000794  6F95               	movwf	sprintf@width& (0+255),b
   906  000796                     l169:
   907                           
   908                           ; BSR set to: 0
   909                           ;doprnt.c: 1422: {
   910                           ;doprnt.c: 1424: if(width
   911                           ;doprnt.c: 1428: )
   912                           
   913                           ; BSR set to: 0
   914  000796  5195               	movf	sprintf@width& (0+255),w,b
   915  000798  1196               	iorwf	(sprintf@width+1)& (0+255),w,b
   916  00079A  B4D8               	btfsc	status,2,c
   917  00079C  D00F               	goto	u870
   918  00079E                     u860:
   919                           
   920                           ; BSR set to: 0
   921                           ;doprnt.c: 1430: ((*sp++ = (' ')));
   922                           
   923                           ; BSR set to: 0
   924                           
   925                           ;doprnt.c: 1429: do
   926  00079E  C085  FFD9         	movff	sprintf@sp,fsr2l
   927  0007A2  C086  FFDA         	movff	sprintf@sp+1,fsr2h
   928  0007A6  0E20               	movlw	32
   929  0007A8  6EDF               	movwf	indf2,c
   930                           
   931                           ; BSR set to: 0
   932  0007AA  4B85               	infsnz	sprintf@sp& (0+255),f,b
   933  0007AC  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
   934                           
   935                           ; BSR set to: 0
   936                           ;doprnt.c: 1431: while(--width);
   937  0007AE  0795               	decf	sprintf@width& (0+255),f,b
   938  0007B0  A0D8               	btfss	status,0,c
   939  0007B2  0796               	decf	(sprintf@width+1)& (0+255),f,b
   940  0007B4  5195               	movf	sprintf@width& (0+255),w,b
   941  0007B6  1196               	iorwf	(sprintf@width+1)& (0+255),w,b
   942  0007B8  A4D8               	btfss	status,2,c
   943  0007BA  D7F1               	goto	u860
   944  0007BC                     u870:
   945                           
   946                           ; BSR set to: 0
   947                           ;doprnt.c: 1438: if(flag & 0x03)
   948                           
   949                           ; BSR set to: 0
   950                           
   951                           ; BSR set to: 0
   952  0007BC  C092  F08B         	movff	sprintf@flag,??_sprintf
   953  0007C0  0E03               	movlw	3
   954  0007C2  178B               	andwf	??_sprintf& (0+255),f,b
   955  0007C4  B4D8               	btfsc	status,2,c
   956  0007C6  D008               	goto	l173
   957                           
   958                           ; BSR set to: 0
   959                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   960  0007C8  C085  FFD9         	movff	sprintf@sp,fsr2l
   961  0007CC  C086  FFDA         	movff	sprintf@sp+1,fsr2h
   962  0007D0  0E2D               	movlw	45
   963  0007D2  6EDF               	movwf	indf2,c
   964                           
   965                           ; BSR set to: 0
   966  0007D4  4B85               	infsnz	sprintf@sp& (0+255),f,b
   967  0007D6  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
   968  0007D8                     l173:
   969                           
   970                           ; BSR set to: 0
   971                           ;doprnt.c: 1469: }
   972                           ;doprnt.c: 1472: prec = c;
   973                           
   974                           ; BSR set to: 0
   975  0007D8  C097  F091         	movff	sprintf@c,sprintf@prec
   976                           
   977                           ;doprnt.c: 1474: while(prec--) {
   978  0007DC  D02B               	goto	l174
   979  0007DE                     
   980                           ; BSR set to: 0
   981                           ;doprnt.c: 1478: {
   982                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   983                           
   984                           ; BSR set to: 0
   985  0007DE  5191               	movf	sprintf@prec& (0+255),w,b
   986  0007E0  0D02               	mullw	2
   987  0007E2  0E01               	movlw	low _dpowers
   988  0007E4  24F3               	addwf	prodl,w,c
   989  0007E6  6EF6               	movwf	tblptrl,c
   990  0007E8  0E06               	movlw	high _dpowers
   991  0007EA  20F4               	addwfc	prodh,w,c
   992  0007EC  6EF7               	movwf	tblptrh,c
   993  0007EE                     	if	0	;There are less than 3 active tblptr bytes
   994  0007EE                     	endif
   995  0007EE  0009               	tblrd		*+
   996  0007F0  CFF5 F038          	movff	tablat,___lwdiv@divisor
   997  0007F4  000A               	tblrd		*-
   998  0007F6  CFF5 F039          	movff	tablat,___lwdiv@divisor+1
   999  0007FA  C093  F036         	movff	sprintf@val,___lwdiv@dividend
  1000  0007FE  C094  F037         	movff	sprintf@val+1,___lwdiv@dividend+1
  1001  000802  EC69  F005         	call	___lwdiv	;wreg free
  1002  000806  C036  F080         	movff	?___lwdiv,___lwmod@dividend
  1003  00080A  C037  F081         	movff	?___lwdiv+1,___lwmod@dividend+1
  1004  00080E  0E00               	movlw	0
  1005  000810  0100               	movlb	0	; () banked
  1006  000812  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  1007  000814  0E0A               	movlw	10
  1008  000816  6F82               	movwf	___lwmod@divisor& (0+255),b
  1009  000818  EC03  F006         	call	___lwmod	;wreg free
  1010  00081C  0100               	movlb	0	; () banked
  1011  00081E  5180               	movf	?___lwmod& (0+255),w,b
  1012  000820  0F30               	addlw	48
  1013  000822  6F97               	movwf	sprintf@c& (0+255),b
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;doprnt.c: 1523: }
  1017                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1018  000824  C085  FFD9         	movff	sprintf@sp,fsr2l
  1019  000828  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  1020  00082C  C097  FFDF         	movff	sprintf@c,indf2
  1021                           
  1022                           ; BSR set to: 0
  1023  000830  4B85               	infsnz	sprintf@sp& (0+255),f,b
  1024  000832  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
  1025  000834                     l174:
  1026                           
  1027                           ; BSR set to: 0
  1028                           
  1029                           ; BSR set to: 0
  1030  000834  0791               	decf	sprintf@prec& (0+255),f,b
  1031  000836  2991               	incf	sprintf@prec& (0+255),w,b
  1032  000838  A4D8               	btfss	status,2,c
  1033  00083A  D7D1               	goto	l175
  1034  00083C                     u890:
  1035                           
  1036                           ; BSR set to: 0
  1037                           
  1038                           ; BSR set to: 0
  1039  00083C  C087  FFF6         	movff	sprintf@f,tblptrl
  1040  000840  C088  FFF7         	movff	sprintf@f+1,tblptrh
  1041  000844  0100               	movlb	0	; () banked
  1042  000846  4B87               	infsnz	sprintf@f& (0+255),f,b
  1043  000848  2B88               	incf	(sprintf@f+1)& (0+255),f,b
  1044  00084A                     	if	0	;tblptru may be non-zero
  1045  00084A                     	endif
  1046  00084A                     	if	0	;tblptru may be non-zero
  1047  00084A                     	endif
  1048  00084A  0008               	tblrd		*
  1049  00084C  CFF5 F097          	movff	tablat,sprintf@c
  1050  000850  5197               	movf	sprintf@c& (0+255),w,b
  1051  000852  A4D8               	btfss	status,2,c
  1052  000854  D6EB               	goto	l151
  1053  000856                     u900:
  1054                           
  1055                           ;doprnt.c: 1538: *sp = 0;
  1056                           
  1057                           ; BSR set to: 0
  1058                           
  1059                           ;doprnt.c: 1525: }
  1060                           ;doprnt.c: 1533: }
  1061                           ;doprnt.c: 1535: alldone:
  1062                           
  1063                           ; BSR set to: 0
  1064  000856  C085  FFD9         	movff	sprintf@sp,fsr2l
  1065  00085A  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  1066  00085E  0E00               	movlw	0
  1067  000860  6EDF               	movwf	indf2,c
  1068  000862  0012               	return	
  1069  000864                     __end_of_sprintf:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           prodh	equ	0xFF4
  1076                           prodl	equ	0xFF3
  1077                           intcon	equ	0xFF2
  1078                           intcon2	equ	0xFF1
  1079                           postinc0	equ	0xFEE
  1080                           wreg	equ	0xFE8
  1081                           indf2	equ	0xFDF
  1082                           postinc2	equ	0xFDE
  1083                           postdec2	equ	0xFDD
  1084                           fsr2h	equ	0xFDA
  1085                           fsr2l	equ	0xFD9
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _isdigit *****************
  1089 ;; Defined at:
  1090 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  c               1    wreg     unsigned char 
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;  c               1   55[COMRAM] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;		None               void
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1104 ;;      Params:         0       0       0       0       0       0       0
  1105 ;;      Locals:         2       0       0       0       0       0       0
  1106 ;;      Temps:          1       0       0       0       0       0       0
  1107 ;;      Totals:         3       0       0       0       0       0       0
  1108 ;;Total ram usage:        3 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    3
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_sprintf
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text2
  1119  000D30                     __ptext2:
  1120                           	opt stack 0
  1121  000D30                     _isdigit:
  1122                           	opt stack 26
  1123                           
  1124                           ;incstack = 0
  1125                           ;isdigit@c stored from wreg
  1126  000D30  6E38               	movwf	isdigit@c,c
  1127  000D32  0E00               	movlw	0
  1128  000D34  6E37               	movwf	_isdigit$504,c
  1129  000D36  0E3A               	movlw	58
  1130  000D38  6038               	cpfslt	isdigit@c,c
  1131  000D3A  D005               	goto	l508
  1132  000D3C  0E2F               	movlw	47
  1133  000D3E  6438               	cpfsgt	isdigit@c,c
  1134  000D40  D002               	goto	l508
  1135  000D42  0E01               	movlw	1
  1136  000D44  6E37               	movwf	_isdigit$504,c
  1137  000D46                     l508:
  1138  000D46  C037  F036         	movff	_isdigit$504,??_isdigit
  1139  000D4A  3036               	rrcf	??_isdigit,w,c
  1140  000D4C  0012               	return	
  1141  000D4E                     __end_of_isdigit:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           prodh	equ	0xFF4
  1148                           prodl	equ	0xFF3
  1149                           intcon	equ	0xFF2
  1150                           intcon2	equ	0xFF1
  1151                           postinc0	equ	0xFEE
  1152                           wreg	equ	0xFE8
  1153                           indf2	equ	0xFDF
  1154                           postinc2	equ	0xFDE
  1155                           postdec2	equ	0xFDD
  1156                           fsr2h	equ	0xFDA
  1157                           fsr2l	equ	0xFD9
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function ___wmul *****************
  1161 ;; Defined at:
  1162 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  multiplier      2   53[COMRAM] unsigned int 
  1165 ;;  multiplicand    2   55[COMRAM] unsigned int 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  product         2   57[COMRAM] unsigned int 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  2   53[COMRAM] unsigned int 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0, prodl, prodh
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1177 ;;      Params:         4       0       0       0       0       0       0
  1178 ;;      Locals:         2       0       0       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0       0
  1180 ;;      Totals:         6       0       0       0       0       0       0
  1181 ;;Total ram usage:        6 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    3
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_sprintf
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text3
  1192  000CE4                     __ptext3:
  1193                           	opt stack 0
  1194  000CE4                     ___wmul:
  1195                           	opt stack 26
  1196                           
  1197                           ;incstack = 0
  1198  000CE4  5036               	movf	___wmul@multiplier,w,c
  1199  000CE6  0238               	mulwf	___wmul@multiplicand,c
  1200  000CE8  CFF3 F03A          	movff	prodl,___wmul@product
  1201  000CEC  CFF4 F03B          	movff	prodh,___wmul@product+1
  1202  000CF0  5036               	movf	___wmul@multiplier,w,c
  1203  000CF2  0239               	mulwf	___wmul@multiplicand+1,c
  1204  000CF4  50F3               	movf	prodl,w,c
  1205  000CF6  263B               	addwf	___wmul@product+1,f,c
  1206  000CF8  5037               	movf	___wmul@multiplier+1,w,c
  1207  000CFA  0238               	mulwf	___wmul@multiplicand,c
  1208  000CFC  50F3               	movf	prodl,w,c
  1209  000CFE  263B               	addwf	___wmul@product+1,f,c
  1210  000D00  C03A  F036         	movff	___wmul@product,?___wmul
  1211  000D04  C03B  F037         	movff	___wmul@product+1,?___wmul+1
  1212  000D08  0012               	return	
  1213  000D0A                     __end_of___wmul:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodh	equ	0xFF4
  1220                           prodl	equ	0xFF3
  1221                           intcon	equ	0xFF2
  1222                           intcon2	equ	0xFF1
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           indf2	equ	0xFDF
  1226                           postinc2	equ	0xFDE
  1227                           postdec2	equ	0xFDD
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function ___lwmod *****************
  1233 ;; Defined at:
  1234 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  dividend        2    0[BANK0 ] unsigned int 
  1237 ;;  divisor         2    2[BANK0 ] unsigned int 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  counter         1    4[BANK0 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  2    0[BANK0 ] unsigned int 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1249 ;;      Params:         0       4       0       0       0       0       0
  1250 ;;      Locals:         0       1       0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0
  1252 ;;      Totals:         0       5       0       0       0       0       0
  1253 ;;Total ram usage:        5 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    3
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_sprintf
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text4
  1264  000C06                     __ptext4:
  1265                           	opt stack 0
  1266  000C06                     ___lwmod:
  1267                           	opt stack 26
  1268                           
  1269                           ;incstack = 0
  1270  000C06  0100               	movlb	0	; () banked
  1271  000C08  5182               	movf	___lwmod@divisor& (0+255),w,b
  1272  000C0A  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1273  000C0C  B4D8               	btfsc	status,2,c
  1274  000C0E  D018               	goto	l602
  1275                           
  1276                           ; BSR set to: 0
  1277  000C10  0E01               	movlw	1
  1278  000C12  6F84               	movwf	___lwmod@counter& (0+255),b
  1279  000C14  D004               	goto	l597
  1280  000C16                     
  1281                           ; BSR set to: 0
  1282                           
  1283                           ; BSR set to: 0
  1284  000C16  90D8               	bcf	status,0,c
  1285  000C18  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  1286  000C1A  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1287  000C1C  2B84               	incf	___lwmod@counter& (0+255),f,b
  1288  000C1E                     l597:
  1289                           
  1290                           ; BSR set to: 0
  1291                           
  1292                           ; BSR set to: 0
  1293  000C1E  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1294  000C20  D7FA               	goto	l598
  1295  000C22                     u740:
  1296                           
  1297                           ; BSR set to: 0
  1298                           
  1299                           ; BSR set to: 0
  1300                           
  1301                           ; BSR set to: 0
  1302  000C22  5182               	movf	___lwmod@divisor& (0+255),w,b
  1303  000C24  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  1304  000C26  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1305  000C28  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1306  000C2A  A0D8               	btfss	status,0,c
  1307  000C2C  D004               	goto	l601
  1308                           
  1309                           ; BSR set to: 0
  1310  000C2E  5182               	movf	___lwmod@divisor& (0+255),w,b
  1311  000C30  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  1312  000C32  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1313  000C34  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1314  000C36                     l601:
  1315                           
  1316                           ; BSR set to: 0
  1317                           
  1318                           ; BSR set to: 0
  1319  000C36  90D8               	bcf	status,0,c
  1320  000C38  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1321  000C3A  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  1322                           
  1323                           ; BSR set to: 0
  1324  000C3C  2F84               	decfsz	___lwmod@counter& (0+255),f,b
  1325  000C3E  D7F1               	goto	u740
  1326  000C40                     l602:
  1327                           
  1328                           ; BSR set to: 0
  1329                           
  1330                           ; BSR set to: 0
  1331  000C40  C080  F080         	movff	___lwmod@dividend,?___lwmod
  1332  000C44  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  1333                           
  1334                           ; BSR set to: 0
  1335  000C48  0012               	return		;funcret
  1336  000C4A                     __end_of___lwmod:
  1337                           	opt stack 0
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           intcon	equ	0xFF2
  1345                           intcon2	equ	0xFF1
  1346                           postinc0	equ	0xFEE
  1347                           wreg	equ	0xFE8
  1348                           indf2	equ	0xFDF
  1349                           postinc2	equ	0xFDE
  1350                           postdec2	equ	0xFDD
  1351                           fsr2h	equ	0xFDA
  1352                           fsr2l	equ	0xFD9
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function ___lwdiv *****************
  1356 ;; Defined at:
  1357 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  dividend        2   53[COMRAM] unsigned int 
  1360 ;;  divisor         2   55[COMRAM] unsigned int 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  quotient        2   57[COMRAM] unsigned int 
  1363 ;;  counter         1   59[COMRAM] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  2   53[COMRAM] unsigned int 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1373 ;;      Params:         4       0       0       0       0       0       0
  1374 ;;      Locals:         3       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0
  1376 ;;      Totals:         7       0       0       0       0       0       0
  1377 ;;Total ram usage:        7 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    3
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_sprintf
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text5
  1388  000AD2                     __ptext5:
  1389                           	opt stack 0
  1390  000AD2                     ___lwdiv:
  1391                           	opt stack 26
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;incstack = 0
  1395  000AD2  0E00               	movlw	0
  1396  000AD4  6E3B               	movwf	___lwdiv@quotient+1,c
  1397  000AD6  0E00               	movlw	0
  1398  000AD8  6E3A               	movwf	___lwdiv@quotient,c
  1399  000ADA  5038               	movf	___lwdiv@divisor,w,c
  1400  000ADC  1039               	iorwf	___lwdiv@divisor+1,w,c
  1401  000ADE  B4D8               	btfsc	status,2,c
  1402  000AE0  D01C               	goto	l592
  1403  000AE2  0E01               	movlw	1
  1404  000AE4  6E3C               	movwf	___lwdiv@counter,c
  1405  000AE6  D004               	goto	l587
  1406  000AE8  90D8               	bcf	status,0,c
  1407  000AEA  3638               	rlcf	___lwdiv@divisor,f,c
  1408  000AEC  3639               	rlcf	___lwdiv@divisor+1,f,c
  1409  000AEE  2A3C               	incf	___lwdiv@counter,f,c
  1410  000AF0                     l587:
  1411  000AF0  AE39               	btfss	___lwdiv@divisor+1,7,c
  1412  000AF2  D7FA               	goto	l588
  1413  000AF4                     u430:
  1414  000AF4  90D8               	bcf	status,0,c
  1415  000AF6  363A               	rlcf	___lwdiv@quotient,f,c
  1416  000AF8  363B               	rlcf	___lwdiv@quotient+1,f,c
  1417  000AFA  5038               	movf	___lwdiv@divisor,w,c
  1418  000AFC  5C36               	subwf	___lwdiv@dividend,w,c
  1419  000AFE  5039               	movf	___lwdiv@divisor+1,w,c
  1420  000B00  5837               	subwfb	___lwdiv@dividend+1,w,c
  1421  000B02  A0D8               	btfss	status,0,c
  1422  000B04  D005               	goto	l591
  1423  000B06  5038               	movf	___lwdiv@divisor,w,c
  1424  000B08  5E36               	subwf	___lwdiv@dividend,f,c
  1425  000B0A  5039               	movf	___lwdiv@divisor+1,w,c
  1426  000B0C  5A37               	subwfb	___lwdiv@dividend+1,f,c
  1427  000B0E  803A               	bsf	___lwdiv@quotient,0,c
  1428  000B10                     l591:
  1429  000B10  90D8               	bcf	status,0,c
  1430  000B12  3239               	rrcf	___lwdiv@divisor+1,f,c
  1431  000B14  3238               	rrcf	___lwdiv@divisor,f,c
  1432  000B16  2E3C               	decfsz	___lwdiv@counter,f,c
  1433  000B18  D7ED               	goto	u430
  1434  000B1A                     l592:
  1435  000B1A  C03A  F036         	movff	___lwdiv@quotient,?___lwdiv
  1436  000B1E  C03B  F037         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1437  000B22  0012               	return		;funcret
  1438  000B24                     __end_of___lwdiv:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           prodh	equ	0xFF4
  1445                           prodl	equ	0xFF3
  1446                           intcon	equ	0xFF2
  1447                           intcon2	equ	0xFF1
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           indf2	equ	0xFDF
  1451                           postinc2	equ	0xFDE
  1452                           postdec2	equ	0xFDD
  1453                           fsr2h	equ	0xFDA
  1454                           fsr2l	equ	0xFD9
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _lcd_msg *****************
  1458 ;; Defined at:
  1459 ;;		line 99 in file "../MyLibs/lcd4a.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  c               2   57[COMRAM] PTR unsigned char 
  1462 ;;		 -> value(8), STR_1(16), 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1474 ;;      Params:         2       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0
  1477 ;;      Totals:         2       0       0       0       0       0       0
  1478 ;;Total ram usage:        2 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    6
  1481 ;; This function calls:
  1482 ;;		_lcd_putc
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text6
  1489  000B24                     __ptext6:
  1490                           	opt stack 0
  1491  000B24                     _lcd_msg:
  1492                           	opt stack 24
  1493                           
  1494                           ;lcd4a.c: 101: while(*c != 0)
  1495                           
  1496                           ;incstack = 0
  1497  000B24  D014               	goto	l106
  1498  000B26                     
  1499                           ;lcd4a.c: 102: {
  1500                           ;lcd4a.c: 103: lcd_putc(*c++);
  1501  000B26  C03A  FFF6         	movff	lcd_msg@c,tblptrl
  1502  000B2A  C03B  FFF7         	movff	lcd_msg@c+1,tblptrh
  1503  000B2E  6AF8               	clrf	tblptru,c
  1504  000B30  0E05               	movlw	(high __ramtop+-1)
  1505  000B32  64F7               	cpfsgt	tblptrh,c
  1506  000B34  D003               	bra	u487
  1507  000B36  0008               	tblrd		*
  1508  000B38  50F5               	movf	tablat,w,c
  1509  000B3A  D005               	bra	u480
  1510  000B3C                     u487:
  1511  000B3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1512  000B40  CFF7 FFEA          	movff	tblptrh,fsr0h
  1513  000B44  50EF               	movf	indf0,w,c
  1514  000B46                     u480:
  1515  000B46  EC25  F006         	call	_lcd_putc
  1516  000B4A  4A3A               	infsnz	lcd_msg@c,f,c
  1517  000B4C  2A3B               	incf	lcd_msg@c+1,f,c
  1518  000B4E                     l106:
  1519  000B4E  C03A  FFF6         	movff	lcd_msg@c,tblptrl
  1520  000B52  C03B  FFF7         	movff	lcd_msg@c+1,tblptrh
  1521  000B56  6AF8               	clrf	tblptru,c
  1522  000B58  0E05               	movlw	(high __ramtop+-1)
  1523  000B5A  64F7               	cpfsgt	tblptrh,c
  1524  000B5C  D003               	bra	u497
  1525  000B5E  0008               	tblrd		*
  1526  000B60  50F5               	movf	tablat,w,c
  1527  000B62  D005               	bra	u490
  1528  000B64                     u497:
  1529  000B64  CFF6 FFE9          	movff	tblptrl,fsr0l
  1530  000B68  CFF7 FFEA          	movff	tblptrh,fsr0h
  1531  000B6C  50EF               	movf	indf0,w,c
  1532  000B6E                     u490:
  1533  000B6E  0900               	iorlw	0
  1534  000B70  B4D8               	btfsc	status,2,c
  1535  000B72  0012               	return	
  1536  000B74  D7D8               	goto	l107
  1537  000B76                     __end_of_lcd_msg:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           prodh	equ	0xFF4
  1544                           prodl	equ	0xFF3
  1545                           intcon	equ	0xFF2
  1546                           intcon2	equ	0xFF1
  1547                           indf0	equ	0xFEF
  1548                           postinc0	equ	0xFEE
  1549                           fsr0h	equ	0xFEA
  1550                           fsr0l	equ	0xFE9
  1551                           wreg	equ	0xFE8
  1552                           indf2	equ	0xFDF
  1553                           postinc2	equ	0xFDE
  1554                           postdec2	equ	0xFDD
  1555                           fsr2h	equ	0xFDA
  1556                           fsr2l	equ	0xFD9
  1557                           status	equ	0xFD8
  1558                           
  1559 ;; *************** function _lcd_putc *****************
  1560 ;; Defined at:
  1561 ;;		line 64 in file "../MyLibs/lcd4a.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  c               1    wreg     unsigned char 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  c               1   56[COMRAM] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1575 ;;      Params:         0       0       0       0       0       0       0
  1576 ;;      Locals:         1       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0
  1578 ;;      Totals:         1       0       0       0       0       0       0
  1579 ;;Total ram usage:        1 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    5
  1582 ;; This function calls:
  1583 ;;		_lcd_cmd
  1584 ;;		_lcd_dwr
  1585 ;; This function is called by:
  1586 ;;		_lcd_msg
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text7
  1591  000C4A                     __ptext7:
  1592                           	opt stack 0
  1593  000C4A                     _lcd_putc:
  1594                           	opt stack 24
  1595                           
  1596                           ;incstack = 0
  1597                           ;lcd_putc@c stored from wreg
  1598  000C4A  6E39               	movwf	lcd_putc@c,c
  1599                           
  1600                           ;lcd4a.c: 66: switch(c)
  1601  000C4C  D010               	goto	l94
  1602  000C4E                     
  1603                           ;lcd4a.c: 69: lcd_cmd(0x01);
  1604  000C4E  0E01               	movlw	1
  1605  000C50  ECBB  F005         	call	_lcd_cmd
  1606                           
  1607                           ;lcd4a.c: 70: break;
  1608  000C54  0012               	return	
  1609  000C56                     
  1610                           ;lcd4a.c: 72: lcd_cmd(2);
  1611  000C56  0E02               	movlw	2
  1612  000C58  ECBB  F005         	call	_lcd_cmd
  1613                           
  1614                           ;lcd4a.c: 73: break;
  1615  000C5C  0012               	return	
  1616  000C5E                     
  1617                           ;lcd4a.c: 75: lcd_cmd(0x10);
  1618  000C5E  0E10               	movlw	16
  1619  000C60  ECBB  F005         	call	_lcd_cmd
  1620                           
  1621                           ;lcd4a.c: 76: break;
  1622  000C64  0012               	return	
  1623  000C66                     
  1624                           ;lcd4a.c: 78: lcd_dwr(c);
  1625  000C66  5039               	movf	lcd_putc@c,w,c
  1626  000C68  ECE0  F005         	call	_lcd_dwr
  1627                           
  1628                           ;lcd4a.c: 80: }
  1629                           
  1630                           ;lcd4a.c: 79: break;
  1631  000C6C  0012               	return	
  1632  000C6E                     l94:
  1633  000C6E  5039               	movf	lcd_putc@c,w,c
  1634                           
  1635                           ; Switch size 1, requested type "space"
  1636                           ; Number of cases is 3, Range of values is 8 to 12
  1637                           ; switch strategies available:
  1638                           ; Name         Instructions Cycles
  1639                           ; simple_byte           10     6 (average)
  1640                           ;	Chosen strategy is simple_byte
  1641  000C70  0A08               	xorlw	8	; case 8
  1642  000C72  B4D8               	btfsc	status,2,c
  1643  000C74  D7F4               	goto	l98
  1644  000C76  0A02               	xorlw	2	; case 10
  1645  000C78  B4D8               	btfsc	status,2,c
  1646  000C7A  D7ED               	goto	l97
  1647  000C7C  0A06               	xorlw	6	; case 12
  1648  000C7E  B4D8               	btfsc	status,2,c
  1649  000C80  D7E6               	goto	l95
  1650  000C82  D7F1               	goto	l99
  1651  000C84                     __end_of_lcd_putc:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           intcon	equ	0xFF2
  1660                           intcon2	equ	0xFF1
  1661                           indf0	equ	0xFEF
  1662                           postinc0	equ	0xFEE
  1663                           fsr0h	equ	0xFEA
  1664                           fsr0l	equ	0xFE9
  1665                           wreg	equ	0xFE8
  1666                           indf2	equ	0xFDF
  1667                           postinc2	equ	0xFDE
  1668                           postdec2	equ	0xFDD
  1669                           fsr2h	equ	0xFDA
  1670                           fsr2l	equ	0xFD9
  1671                           status	equ	0xFD8
  1672                           
  1673 ;; *************** function _lcd_dwr *****************
  1674 ;; Defined at:
  1675 ;;		line 84 in file "../MyLibs/lcd4a.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  x               1    wreg     unsigned char 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  x               1   55[COMRAM] unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, status,2, status,0, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1689 ;;      Params:         0       0       0       0       0       0       0
  1690 ;;      Locals:         1       0       0       0       0       0       0
  1691 ;;      Temps:          1       0       0       0       0       0       0
  1692 ;;      Totals:         2       0       0       0       0       0       0
  1693 ;;Total ram usage:        2 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    4
  1696 ;; This function calls:
  1697 ;;		_lcd_lat
  1698 ;;		_manda
  1699 ;; This function is called by:
  1700 ;;		_lcd_putc
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text8
  1705  000BC0                     __ptext8:
  1706                           	opt stack 0
  1707  000BC0                     _lcd_dwr:
  1708                           	opt stack 24
  1709                           
  1710                           ;incstack = 0
  1711                           ;lcd_dwr@x stored from wreg
  1712  000BC0  6E38               	movwf	lcd_dwr@x,c
  1713                           
  1714                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  1715  000BC2  848C               	bsf	3980,2,c	;volatile
  1716                           
  1717                           ;lcd4a.c: 87: lcd &= 0x0F;
  1718  000BC4  0E0F               	movlw	15
  1719  000BC6  1641               	andwf	_lcd,f,c
  1720                           
  1721                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  1722  000BC8  5038               	movf	lcd_dwr@x,w,c
  1723  000BCA  0BF0               	andlw	240
  1724  000BCC  1241               	iorwf	_lcd,f,c
  1725                           
  1726                           ;lcd4a.c: 89: manda(lcd);
  1727  000BCE  5041               	movf	_lcd,w,c
  1728  000BD0  EC5C  F006         	call	_manda
  1729                           
  1730                           ;lcd4a.c: 90: lcd_lat();
  1731  000BD4  ECC1  F006         	call	_lcd_lat	;wreg free
  1732                           
  1733                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  1734  000BD8  0E04               	movlw	4
  1735  000BDA  6E37               	movwf	??_lcd_dwr& (0+255),c
  1736  000BDC  0EE4               	movlw	228
  1737  000BDE                     u927:
  1738  000BDE  2EE8               	decfsz	wreg,f,c
  1739  000BE0  D7FE               	bra	u927
  1740  000BE2  2E37               	decfsz	??_lcd_dwr& (0+255),f,c
  1741  000BE4  D7FC               	bra	u927
  1742  000BE6  D000               	nop2	
  1743                           
  1744                           ;lcd4a.c: 93: lcd &= 0x0F;
  1745  000BE8  0E0F               	movlw	15
  1746  000BEA  1641               	andwf	_lcd,f,c
  1747                           
  1748                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  1749  000BEC  C038  F037         	movff	lcd_dwr@x,??_lcd_dwr
  1750  000BF0  0E0F               	movlw	15
  1751  000BF2  1637               	andwf	??_lcd_dwr,f,c
  1752  000BF4  3837               	swapf	??_lcd_dwr,w,c
  1753  000BF6  0BF0               	andlw	240
  1754  000BF8  1241               	iorwf	_lcd,f,c
  1755                           
  1756                           ;lcd4a.c: 95: manda(lcd);
  1757  000BFA  5041               	movf	_lcd,w,c
  1758  000BFC  EC5C  F006         	call	_manda
  1759                           
  1760                           ;lcd4a.c: 96: lcd_lat();
  1761  000C00  ECC1  F006         	call	_lcd_lat	;wreg free
  1762  000C04  0012               	return		;funcret
  1763  000C06                     __end_of_lcd_dwr:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           indf0	equ	0xFEF
  1774                           postinc0	equ	0xFEE
  1775                           fsr0h	equ	0xFEA
  1776                           fsr0l	equ	0xFE9
  1777                           wreg	equ	0xFE8
  1778                           indf2	equ	0xFDF
  1779                           postinc2	equ	0xFDE
  1780                           postdec2	equ	0xFDD
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _lcd_init *****************
  1786 ;; Defined at:
  1787 ;;		line 133 in file "../MyLibs/lcd4a.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1801 ;;      Params:         0       0       0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0       0       0
  1803 ;;      Temps:          1       0       0       0       0       0       0
  1804 ;;      Totals:         1       0       0       0       0       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    5
  1808 ;; This function calls:
  1809 ;;		_lcd_cmd
  1810 ;;		_lcd_cmd_hf
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text9
  1817  000864                     __ptext9:
  1818                           	opt stack 0
  1819  000864                     _lcd_init:
  1820                           	opt stack 25
  1821                           
  1822                           ;lcd4a.c: 141: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  1823                           
  1824                           ;incstack = 0
  1825  000864  9E95               	bcf	3989,7,c	;volatile
  1826                           
  1827                           ;lcd4a.c: 142: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  1828  000866  9C95               	bcf	3989,6,c	;volatile
  1829                           
  1830                           ;lcd4a.c: 143: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  1831  000868  9A95               	bcf	3989,5,c	;volatile
  1832                           
  1833                           ;lcd4a.c: 144: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
  1834  00086A  9895               	bcf	3989,4,c	;volatile
  1835                           
  1836                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
  1837  00086C  9495               	bcf	3989,2,c	;volatile
  1838                           
  1839                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
  1840  00086E  9695               	bcf	3989,3,c	;volatile
  1841                           
  1842                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
  1843  000870  0E30               	movlw	48
  1844  000872  ECB4  F006         	call	_lcd_cmd_hf
  1845                           
  1846                           ;lcd4a.c: 152: _delay((unsigned long)((15)*(4000000/4000.0)));
  1847  000876  0E14               	movlw	20
  1848  000878  6E39               	movwf	??_lcd_init& (0+255),c
  1849  00087A  0E7A               	movlw	122
  1850  00087C                     u937:
  1851  00087C  2EE8               	decfsz	wreg,f,c
  1852  00087E  D7FE               	bra	u937
  1853  000880  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1854  000882  D7FC               	bra	u937
  1855                           
  1856                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
  1857  000884  0E30               	movlw	48
  1858  000886  ECB4  F006         	call	_lcd_cmd_hf
  1859                           
  1860                           ;lcd4a.c: 154: _delay((unsigned long)((1)*(4000000/4000.0)));
  1861  00088A  0EC8               	movlw	200
  1862  00088C                     u947:
  1863  00088C  D000               	nop2	
  1864  00088E  2EE8               	decfsz	wreg,f,c
  1865  000890  D7FD               	bra	u947
  1866                           
  1867                           ;lcd4a.c: 155: lcd_cmd_hf(0x30);
  1868  000892  0E30               	movlw	48
  1869  000894  ECB4  F006         	call	_lcd_cmd_hf
  1870                           
  1871                           ;lcd4a.c: 156: _delay((unsigned long)((15)*(4000000/4000.0)));
  1872  000898  0E14               	movlw	20
  1873  00089A  6E39               	movwf	??_lcd_init& (0+255),c
  1874  00089C  0E7A               	movlw	122
  1875  00089E                     u957:
  1876  00089E  2EE8               	decfsz	wreg,f,c
  1877  0008A0  D7FE               	bra	u957
  1878  0008A2  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1879  0008A4  D7FC               	bra	u957
  1880                           
  1881                           ;lcd4a.c: 157: lcd_cmd_hf(0x20);
  1882  0008A6  0E20               	movlw	32
  1883  0008A8  ECB4  F006         	call	_lcd_cmd_hf
  1884                           
  1885                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  1886  0008AC  0E07               	movlw	7
  1887  0008AE  6E39               	movwf	??_lcd_init& (0+255),c
  1888  0008B0  0E7D               	movlw	125
  1889  0008B2                     u967:
  1890  0008B2  2EE8               	decfsz	wreg,f,c
  1891  0008B4  D7FE               	bra	u967
  1892  0008B6  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1893  0008B8  D7FC               	bra	u967
  1894  0008BA  F000               	nop	
  1895                           
  1896                           ;lcd4a.c: 159: lcd_cmd(0x28);
  1897  0008BC  0E28               	movlw	40
  1898  0008BE  ECBB  F005         	call	_lcd_cmd
  1899                           
  1900                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
  1901  0008C2  0E07               	movlw	7
  1902  0008C4  6E39               	movwf	??_lcd_init& (0+255),c
  1903  0008C6  0E7D               	movlw	125
  1904  0008C8                     u977:
  1905  0008C8  2EE8               	decfsz	wreg,f,c
  1906  0008CA  D7FE               	bra	u977
  1907  0008CC  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1908  0008CE  D7FC               	bra	u977
  1909  0008D0  F000               	nop	
  1910                           
  1911                           ;lcd4a.c: 161: lcd_cmd(0x0E);
  1912  0008D2  0E0E               	movlw	14
  1913  0008D4  ECBB  F005         	call	_lcd_cmd
  1914                           
  1915                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  1916  0008D8  0E07               	movlw	7
  1917  0008DA  6E39               	movwf	??_lcd_init& (0+255),c
  1918  0008DC  0E7D               	movlw	125
  1919  0008DE                     u987:
  1920  0008DE  2EE8               	decfsz	wreg,f,c
  1921  0008E0  D7FE               	bra	u987
  1922  0008E2  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1923  0008E4  D7FC               	bra	u987
  1924  0008E6  F000               	nop	
  1925                           
  1926                           ;lcd4a.c: 163: lcd_cmd(0x01);
  1927  0008E8  0E01               	movlw	1
  1928  0008EA  ECBB  F005         	call	_lcd_cmd
  1929                           
  1930                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  1931  0008EE  0E07               	movlw	7
  1932  0008F0  6E39               	movwf	??_lcd_init& (0+255),c
  1933  0008F2  0E7D               	movlw	125
  1934  0008F4                     u997:
  1935  0008F4  2EE8               	decfsz	wreg,f,c
  1936  0008F6  D7FE               	bra	u997
  1937  0008F8  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1938  0008FA  D7FC               	bra	u997
  1939  0008FC  F000               	nop	
  1940                           
  1941                           ;lcd4a.c: 165: lcd_cmd(0x06);
  1942  0008FE  0E06               	movlw	6
  1943  000900  ECBB  F005         	call	_lcd_cmd
  1944                           
  1945                           ;lcd4a.c: 166: _delay((unsigned long)((5)*(4000000/4000.0)));
  1946  000904  0E07               	movlw	7
  1947  000906  6E39               	movwf	??_lcd_init& (0+255),c
  1948  000908  0E7D               	movlw	125
  1949  00090A                     u1007:
  1950  00090A  2EE8               	decfsz	wreg,f,c
  1951  00090C  D7FE               	bra	u1007
  1952  00090E  2E39               	decfsz	??_lcd_init& (0+255),f,c
  1953  000910  D7FC               	bra	u1007
  1954  000912  F000               	nop	
  1955                           
  1956                           ;lcd4a.c: 167: lcd_cmd(0x80);
  1957  000914  0E80               	movlw	128
  1958  000916  ECBB  F005         	call	_lcd_cmd
  1959  00091A  0012               	return		;funcret
  1960  00091C                     __end_of_lcd_init:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           prodh	equ	0xFF4
  1967                           prodl	equ	0xFF3
  1968                           intcon	equ	0xFF2
  1969                           intcon2	equ	0xFF1
  1970                           indf0	equ	0xFEF
  1971                           postinc0	equ	0xFEE
  1972                           fsr0h	equ	0xFEA
  1973                           fsr0l	equ	0xFE9
  1974                           wreg	equ	0xFE8
  1975                           indf2	equ	0xFDF
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _lcd_cmd_hf *****************
  1983 ;; Defined at:
  1984 ;;		line 54 in file "../MyLibs/lcd4a.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  x               1    wreg     unsigned char 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  x               1   54[COMRAM] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         0       0       0       0       0       0       0
  1999 ;;      Locals:         1       0       0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0
  2001 ;;      Totals:         1       0       0       0       0       0       0
  2002 ;;Total ram usage:        1 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    4
  2005 ;; This function calls:
  2006 ;;		_lcd_lat
  2007 ;;		_manda
  2008 ;; This function is called by:
  2009 ;;		_lcd_init
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text10
  2014  000D68                     __ptext10:
  2015                           	opt stack 0
  2016  000D68                     _lcd_cmd_hf:
  2017                           	opt stack 25
  2018                           
  2019                           ;incstack = 0
  2020                           ;lcd_cmd_hf@x stored from wreg
  2021  000D68  6E37               	movwf	lcd_cmd_hf@x,c
  2022                           
  2023                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  2024  000D6A  948C               	bcf	3980,2,c	;volatile
  2025                           
  2026                           ;lcd4a.c: 57: lcd &= 0x0F;
  2027  000D6C  0E0F               	movlw	15
  2028  000D6E  1641               	andwf	_lcd,f,c
  2029                           
  2030                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  2031  000D70  5037               	movf	lcd_cmd_hf@x,w,c
  2032  000D72  0BF0               	andlw	240
  2033  000D74  1241               	iorwf	_lcd,f,c
  2034                           
  2035                           ;lcd4a.c: 59: manda(lcd);
  2036  000D76  5041               	movf	_lcd,w,c
  2037  000D78  EC5C  F006         	call	_manda
  2038                           
  2039                           ;lcd4a.c: 60: lcd_lat();
  2040  000D7C  ECC1  F006         	call	_lcd_lat	;wreg free
  2041  000D80  0012               	return		;funcret
  2042  000D82                     __end_of_lcd_cmd_hf:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           indf0	equ	0xFEF
  2053                           postinc0	equ	0xFEE
  2054                           fsr0h	equ	0xFEA
  2055                           fsr0l	equ	0xFE9
  2056                           wreg	equ	0xFE8
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _lcd_gotoxy *****************
  2065 ;; Defined at:
  2066 ;;		line 112 in file "../MyLibs/lcd4a.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  x               1    wreg     unsigned char 
  2069 ;;  y               1   56[COMRAM] unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  x               1   58[COMRAM] unsigned char 
  2072 ;;  ADDRESS         1   59[COMRAM] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      void 
  2075 ;; Registers used:
  2076 ;;		wreg, status,2, status,0, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2082 ;;      Params:         1       0       0       0       0       0       0
  2083 ;;      Locals:         2       0       0       0       0       0       0
  2084 ;;      Temps:          1       0       0       0       0       0       0
  2085 ;;      Totals:         4       0       0       0       0       0       0
  2086 ;;Total ram usage:        4 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    5
  2089 ;; This function calls:
  2090 ;;		_lcd_cmd
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text11
  2097  000C84                     __ptext11:
  2098                           	opt stack 0
  2099  000C84                     _lcd_gotoxy:
  2100                           	opt stack 25
  2101                           
  2102                           ;incstack = 0
  2103                           ;lcd_gotoxy@x stored from wreg
  2104  000C84  6E3B               	movwf	lcd_gotoxy@x,c
  2105                           
  2106                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  2107  000C86  0E00               	movlw	0
  2108  000C88  6E3C               	movwf	lcd_gotoxy@ADDRESS,c
  2109                           
  2110                           ;lcd4a.c: 116: switch(y)
  2111  000C8A  D005               	goto	l112
  2112  000C8C                     
  2113                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  2114  000C8C  0EC0               	movlw	192
  2115  000C8E  D001               	goto	L2
  2116  000C90                     
  2117                           ;lcd4a.c: 125: ADDRESS = 0x80;
  2118  000C90  0E80               	movlw	128
  2119  000C92                     L2:
  2120  000C92  6E3C               	movwf	lcd_gotoxy@ADDRESS,c
  2121                           
  2122                           ;lcd4a.c: 128: }
  2123                           
  2124                           ;lcd4a.c: 126: break;
  2125  000C94  D008               	goto	l114
  2126  000C96                     l112:
  2127  000C96  5039               	movf	lcd_gotoxy@y,w,c
  2128                           
  2129                           ; Switch size 1, requested type "space"
  2130                           ; Number of cases is 2, Range of values is 1 to 2
  2131                           ; switch strategies available:
  2132                           ; Name         Instructions Cycles
  2133                           ; simple_byte            7     4 (average)
  2134                           ;	Chosen strategy is simple_byte
  2135  000C98  0A01               	xorlw	1	; case 1
  2136  000C9A  B4D8               	btfsc	status,2,c
  2137  000C9C  D7F9               	goto	l116
  2138  000C9E  0A03               	xorlw	3	; case 2
  2139  000CA0  B4D8               	btfsc	status,2,c
  2140  000CA2  D7F4               	goto	l115
  2141  000CA4  D7F5               	goto	l116
  2142  000CA6                     l114:
  2143                           
  2144                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  2145  000CA6  503C               	movf	lcd_gotoxy@ADDRESS,w,c
  2146  000CA8  243B               	addwf	lcd_gotoxy@x,w,c
  2147  000CAA  6E3A               	movwf	??_lcd_gotoxy& (0+255),c
  2148  000CAC  043A               	decf	??_lcd_gotoxy,w,c
  2149  000CAE  6E3C               	movwf	lcd_gotoxy@ADDRESS,c
  2150                           
  2151                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  2152  000CB0  503C               	movf	lcd_gotoxy@ADDRESS,w,c
  2153  000CB2  ECBB  F005         	call	_lcd_cmd
  2154  000CB6  0012               	return		;funcret
  2155  000CB8                     __end_of_lcd_gotoxy:
  2156                           	opt stack 0
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           prodh	equ	0xFF4
  2162                           prodl	equ	0xFF3
  2163                           intcon	equ	0xFF2
  2164                           intcon2	equ	0xFF1
  2165                           indf0	equ	0xFEF
  2166                           postinc0	equ	0xFEE
  2167                           fsr0h	equ	0xFEA
  2168                           fsr0l	equ	0xFE9
  2169                           wreg	equ	0xFE8
  2170                           indf2	equ	0xFDF
  2171                           postinc2	equ	0xFDE
  2172                           postdec2	equ	0xFDD
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _lcd_cmd *****************
  2178 ;; Defined at:
  2179 ;;		line 38 in file "../MyLibs/lcd4a.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  x               1    wreg     unsigned char 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  x               1   55[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         0       0       0       0       0       0       0
  2194 ;;      Locals:         1       0       0       0       0       0       0
  2195 ;;      Temps:          1       0       0       0       0       0       0
  2196 ;;      Totals:         2       0       0       0       0       0       0
  2197 ;;Total ram usage:        2 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    4
  2200 ;; This function calls:
  2201 ;;		_lcd_lat
  2202 ;;		_manda
  2203 ;; This function is called by:
  2204 ;;		_lcd_putc
  2205 ;;		_lcd_gotoxy
  2206 ;;		_lcd_init
  2207 ;;		_lcd_setcursor_vb
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text12
  2212  000B76                     __ptext12:
  2213                           	opt stack 0
  2214  000B76                     _lcd_cmd:
  2215                           	opt stack 24
  2216                           
  2217                           ;incstack = 0
  2218                           ;lcd_cmd@x stored from wreg
  2219  000B76  6E38               	movwf	lcd_cmd@x,c
  2220                           
  2221                           ;lcd4a.c: 40: lcd = 0;
  2222  000B78  0E00               	movlw	0
  2223  000B7A  6E41               	movwf	_lcd,c
  2224                           
  2225                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  2226  000B7C  948C               	bcf	3980,2,c	;volatile
  2227                           
  2228                           ;lcd4a.c: 42: lcd &= 0x0F;
  2229  000B7E  0E0F               	movlw	15
  2230  000B80  1641               	andwf	_lcd,f,c
  2231                           
  2232                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  2233  000B82  5038               	movf	lcd_cmd@x,w,c
  2234  000B84  0BF0               	andlw	240
  2235  000B86  1241               	iorwf	_lcd,f,c
  2236                           
  2237                           ;lcd4a.c: 44: manda(lcd);
  2238  000B88  5041               	movf	_lcd,w,c
  2239  000B8A  EC5C  F006         	call	_manda
  2240                           
  2241                           ;lcd4a.c: 45: lcd_lat();
  2242  000B8E  ECC1  F006         	call	_lcd_lat	;wreg free
  2243                           
  2244                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  2245  000B92  0E04               	movlw	4
  2246  000B94  6E37               	movwf	??_lcd_cmd& (0+255),c
  2247  000B96  0EE4               	movlw	228
  2248  000B98                     u1017:
  2249  000B98  2EE8               	decfsz	wreg,f,c
  2250  000B9A  D7FE               	bra	u1017
  2251  000B9C  2E37               	decfsz	??_lcd_cmd& (0+255),f,c
  2252  000B9E  D7FC               	bra	u1017
  2253  000BA0  D000               	nop2	
  2254                           
  2255                           ;lcd4a.c: 48: lcd &= 0x0F;
  2256  000BA2  0E0F               	movlw	15
  2257  000BA4  1641               	andwf	_lcd,f,c
  2258                           
  2259                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  2260  000BA6  C038  F037         	movff	lcd_cmd@x,??_lcd_cmd
  2261  000BAA  0E0F               	movlw	15
  2262  000BAC  1637               	andwf	??_lcd_cmd,f,c
  2263  000BAE  3837               	swapf	??_lcd_cmd,w,c
  2264  000BB0  0BF0               	andlw	240
  2265  000BB2  1241               	iorwf	_lcd,f,c
  2266                           
  2267                           ;lcd4a.c: 50: manda(lcd);
  2268  000BB4  5041               	movf	_lcd,w,c
  2269  000BB6  EC5C  F006         	call	_manda
  2270                           
  2271                           ;lcd4a.c: 51: lcd_lat();
  2272  000BBA  ECC1  F006         	call	_lcd_lat	;wreg free
  2273  000BBE  0012               	return		;funcret
  2274  000BC0                     __end_of_lcd_cmd:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           intcon2	equ	0xFF1
  2284                           indf0	equ	0xFEF
  2285                           postinc0	equ	0xFEE
  2286                           fsr0h	equ	0xFEA
  2287                           fsr0l	equ	0xFE9
  2288                           wreg	equ	0xFE8
  2289                           indf2	equ	0xFDF
  2290                           postinc2	equ	0xFDE
  2291                           postdec2	equ	0xFDD
  2292                           fsr2h	equ	0xFDA
  2293                           fsr2l	equ	0xFD9
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _manda *****************
  2297 ;; Defined at:
  2298 ;;		line 171 in file "../MyLibs/lcd4a.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  dato            1    wreg     unsigned char 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  dato            1   53[COMRAM] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2312 ;;      Params:         0       0       0       0       0       0       0
  2313 ;;      Locals:         1       0       0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0
  2315 ;;      Totals:         1       0       0       0       0       0       0
  2316 ;;Total ram usage:        1 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    3
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_lcd_cmd
  2323 ;;		_lcd_cmd_hf
  2324 ;;		_lcd_dwr
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text13
  2329  000CB8                     __ptext13:
  2330                           	opt stack 0
  2331  000CB8                     _manda:
  2332                           	opt stack 24
  2333                           
  2334                           ;incstack = 0
  2335                           ;manda@dato stored from wreg
  2336  000CB8  6E36               	movwf	manda@dato,c
  2337                           
  2338                           ;lcd4a.c: 173: if(dato & (1 << 4)) (*(&(*(&PORTD + 0x09))) |= (1<<(4)));
  2339  000CBA  A836               	btfss	manda@dato,4,c
  2340  000CBC  D002               	goto	l123
  2341  000CBE  888C               	bsf	3980,4,c	;volatile
  2342  000CC0  D001               	goto	l124
  2343  000CC2                     l123:
  2344                           
  2345                           ;lcd4a.c: 174: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(4)));
  2346  000CC2  988C               	bcf	3980,4,c	;volatile
  2347  000CC4                     l124:
  2348                           
  2349                           ;lcd4a.c: 175: if(dato & (1 << 5)) (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  2350  000CC4  AA36               	btfss	manda@dato,5,c
  2351  000CC6  D002               	goto	l125
  2352  000CC8  8A8C               	bsf	3980,5,c	;volatile
  2353  000CCA  D001               	goto	l126
  2354  000CCC                     l125:
  2355                           
  2356                           ;lcd4a.c: 176: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  2357  000CCC  9A8C               	bcf	3980,5,c	;volatile
  2358  000CCE                     l126:
  2359                           
  2360                           ;lcd4a.c: 177: if(dato & (1 << 6)) (*(&(*(&PORTD + 0x09))) |= (1<<(6)));
  2361  000CCE  AC36               	btfss	manda@dato,6,c
  2362  000CD0  D002               	goto	l127
  2363  000CD2  8C8C               	bsf	3980,6,c	;volatile
  2364  000CD4  D001               	goto	l128
  2365  000CD6                     l127:
  2366                           
  2367                           ;lcd4a.c: 178: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  2368  000CD6  9C8C               	bcf	3980,6,c	;volatile
  2369  000CD8                     l128:
  2370                           
  2371                           ;lcd4a.c: 179: if(dato & (1 << 7)) (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  2372  000CD8  AE36               	btfss	manda@dato,7,c
  2373  000CDA  D002               	goto	l129
  2374  000CDC  8E8C               	bsf	3980,7,c	;volatile
  2375  000CDE  0012               	return	
  2376  000CE0                     l129:
  2377                           
  2378                           ;lcd4a.c: 180: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  2379  000CE0  9E8C               	bcf	3980,7,c	;volatile
  2380  000CE2  0012               	return	
  2381  000CE4                     __end_of_manda:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           intcon	equ	0xFF2
  2390                           intcon2	equ	0xFF1
  2391                           indf0	equ	0xFEF
  2392                           postinc0	equ	0xFEE
  2393                           fsr0h	equ	0xFEA
  2394                           fsr0l	equ	0xFE9
  2395                           wreg	equ	0xFE8
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _lcd_lat *****************
  2404 ;; Defined at:
  2405 ;;		line 27 in file "../MyLibs/lcd4a.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2419 ;;      Params:         0       0       0       0       0       0       0
  2420 ;;      Locals:         0       0       0       0       0       0       0
  2421 ;;      Temps:          1       0       0       0       0       0       0
  2422 ;;      Totals:         1       0       0       0       0       0       0
  2423 ;;Total ram usage:        1 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    3
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_lcd_cmd
  2430 ;;		_lcd_cmd_hf
  2431 ;;		_lcd_dwr
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text14
  2436  000D82                     __ptext14:
  2437                           	opt stack 0
  2438  000D82                     _lcd_lat:
  2439                           	opt stack 24
  2440                           
  2441                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  2442                           
  2443                           ;incstack = 0
  2444  000D82  868C               	bsf	3980,3,c	;volatile
  2445                           
  2446                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  2447  000D84  0E03               	movlw	3
  2448  000D86  6E36               	movwf	??_lcd_lat& (0+255),c
  2449  000D88  0E98               	movlw	152
  2450  000D8A                     u1027:
  2451  000D8A  2EE8               	decfsz	wreg,f,c
  2452  000D8C  D7FE               	bra	u1027
  2453  000D8E  2E36               	decfsz	??_lcd_lat& (0+255),f,c
  2454  000D90  D7FC               	bra	u1027
  2455                           
  2456                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  2457  000D92  968C               	bcf	3980,3,c	;volatile
  2458  000D94  0012               	return		;funcret
  2459  000D96                     __end_of_lcd_lat:
  2460                           	opt stack 0
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           intcon2	equ	0xFF1
  2469                           indf0	equ	0xFEF
  2470                           postinc0	equ	0xFEE
  2471                           fsr0h	equ	0xFEA
  2472                           fsr0l	equ	0xFE9
  2473                           wreg	equ	0xFE8
  2474                           indf2	equ	0xFDF
  2475                           postinc2	equ	0xFDE
  2476                           postdec2	equ	0xFDD
  2477                           fsr2h	equ	0xFDA
  2478                           fsr2l	equ	0xFD9
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function _low_isr *****************
  2482 ;; Defined at:
  2483 ;;		line 64 in file "enc1.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2497 ;;      Params:         0       0       0       0       0       0       0
  2498 ;;      Locals:         0       0       0       0       0       0       0
  2499 ;;      Temps:         21       0       0       0       0       0       0
  2500 ;;      Totals:        21       0       0       0       0       0       0
  2501 ;;Total ram usage:       21 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    2
  2504 ;; This function calls:
  2505 ;;		___awdiv
  2506 ;;		i1___wmul
  2507 ;; This function is called by:
  2508 ;;		Interrupt level 1
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	intcodelo
  2513  000018                     __pintcodelo:
  2514                           	opt stack 0
  2515  000018                     _low_isr:
  2516                           	opt stack 24
  2517                           
  2518                           ;incstack = 0
  2519  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2520  00001A  CFD8 F021          	movff	status,??_low_isr
  2521  00001E  CFE8 F022          	movff	wreg,??_low_isr+1
  2522  000022  CFE0 F023          	movff	bsr,??_low_isr+2
  2523  000026  CFFA F024          	movff	pclath,??_low_isr+3
  2524  00002A  CFFB F025          	movff	pclatu,??_low_isr+4
  2525  00002E  CFE9 F026          	movff	fsr0l,??_low_isr+5
  2526  000032  CFEA F027          	movff	fsr0h,??_low_isr+6
  2527  000036  CFE1 F028          	movff	fsr1l,??_low_isr+7
  2528  00003A  CFE2 F029          	movff	fsr1h,??_low_isr+8
  2529  00003E  CFD9 F02A          	movff	fsr2l,??_low_isr+9
  2530  000042  CFDA F02B          	movff	fsr2h,??_low_isr+10
  2531  000046  CFF3 F02C          	movff	prodl,??_low_isr+11
  2532  00004A  CFF4 F02D          	movff	prodh,??_low_isr+12
  2533  00004E  CFF6 F02E          	movff	tblptrl,??_low_isr+13
  2534  000052  CFF7 F02F          	movff	tblptrh,??_low_isr+14
  2535  000056  CFF8 F030          	movff	tblptru,??_low_isr+15
  2536  00005A  CFF5 F031          	movff	tablat,??_low_isr+16
  2537  00005E  C04A  F032         	movff	btemp,??_low_isr+17
  2538  000062  C04B  F033         	movff	btemp+1,??_low_isr+18
  2539  000066  C04C  F034         	movff	btemp+2,??_low_isr+19
  2540  00006A  C04D  F035         	movff	btemp+3,??_low_isr+20
  2541                           
  2542                           ;enc1.c: 67: if(PIR1bits.TMR1IF == 1)
  2543  00006E  A09E               	btfss	3998,0,c	;volatile
  2544  000070  D031               	goto	i1l1473
  2545                           
  2546                           ;enc1.c: 68: {
  2547                           ;enc1.c: 69: TMR1ON = 0;
  2548  000072  90CD               	bcf	4045,0,c	;volatile
  2549                           
  2550                           ;enc1.c: 70: TMR1 = 53036;
  2551  000074  0ECF               	movlw	207
  2552  000076  6ECF               	movwf	4047,c	;volatile
  2553  000078  0E2C               	movlw	44
  2554  00007A  6ECE               	movwf	4046,c	;volatile
  2555                           
  2556                           ;enc1.c: 71: rpm = cont*5/48;
  2557  00007C  C03F  F013         	movff	_cont,i1___wmul@multiplier	;volatile
  2558  000080  C040  F014         	movff	_cont+1,i1___wmul@multiplier+1	;volatile
  2559  000084  0E00               	movlw	0
  2560  000086  6E16               	movwf	i1___wmul@multiplicand+1,c
  2561  000088  0E05               	movlw	5
  2562  00008A  6E15               	movwf	i1___wmul@multiplicand,c
  2563  00008C  EC85  F006         	call	i1___wmul	;wreg free
  2564  000090  C013  F019         	movff	?i1___wmul,___awdiv@dividend
  2565  000094  C014  F01A         	movff	?i1___wmul+1,___awdiv@dividend+1
  2566  000098  0E00               	movlw	0
  2567  00009A  6E1C               	movwf	___awdiv@divisor+1,c
  2568  00009C  0E30               	movlw	48
  2569  00009E  6E1B               	movwf	___awdiv@divisor,c
  2570  0000A0  EC27  F005         	call	___awdiv	;wreg free
  2571  0000A4  C019  F03D         	movff	?___awdiv,_rpm	;volatile
  2572  0000A8  C01A  F03E         	movff	?___awdiv+1,_rpm+1	;volatile
  2573                           
  2574                           ;enc1.c: 72: rpm= rpm*60;
  2575  0000AC  C03D  F013         	movff	_rpm,i1___wmul@multiplier	;volatile
  2576  0000B0  C03E  F014         	movff	_rpm+1,i1___wmul@multiplier+1	;volatile
  2577  0000B4  0E00               	movlw	0
  2578  0000B6  6E16               	movwf	i1___wmul@multiplicand+1,c
  2579  0000B8  0E3C               	movlw	60
  2580  0000BA  6E15               	movwf	i1___wmul@multiplicand,c
  2581  0000BC  EC85  F006         	call	i1___wmul	;wreg free
  2582  0000C0  C013  F03D         	movff	?i1___wmul,_rpm	;volatile
  2583  0000C4  C014  F03E         	movff	?i1___wmul+1,_rpm+1	;volatile
  2584                           
  2585                           ;enc1.c: 73: cont = 0;
  2586  0000C8  0E00               	movlw	0
  2587  0000CA  6E40               	movwf	_cont+1,c	;volatile
  2588  0000CC  0E00               	movlw	0
  2589  0000CE  6E3F               	movwf	_cont,c	;volatile
  2590                           
  2591                           ;enc1.c: 74: TMR1IF = 0;
  2592  0000D0  909E               	bcf	3998,0,c	;volatile
  2593                           
  2594                           ;enc1.c: 75: TMR1ON = 1;
  2595  0000D2  80CD               	bsf	4045,0,c	;volatile
  2596  0000D4                     i1l1473:
  2597                           
  2598                           ;enc1.c: 76: return;
  2599  0000D4  C035  F04D         	movff	??_low_isr+20,btemp+3
  2600  0000D8  C034  F04C         	movff	??_low_isr+19,btemp+2
  2601  0000DC  C033  F04B         	movff	??_low_isr+18,btemp+1
  2602  0000E0  C032  F04A         	movff	??_low_isr+17,btemp
  2603  0000E4  C031  FFF5         	movff	??_low_isr+16,tablat
  2604  0000E8  C030  FFF8         	movff	??_low_isr+15,tblptru
  2605  0000EC  C02F  FFF7         	movff	??_low_isr+14,tblptrh
  2606  0000F0  C02E  FFF6         	movff	??_low_isr+13,tblptrl
  2607  0000F4  C02D  FFF4         	movff	??_low_isr+12,prodh
  2608  0000F8  C02C  FFF3         	movff	??_low_isr+11,prodl
  2609  0000FC  C02B  FFDA         	movff	??_low_isr+10,fsr2h
  2610  000100  C02A  FFD9         	movff	??_low_isr+9,fsr2l
  2611  000104  C029  FFE2         	movff	??_low_isr+8,fsr1h
  2612  000108  C028  FFE1         	movff	??_low_isr+7,fsr1l
  2613  00010C  C027  FFEA         	movff	??_low_isr+6,fsr0h
  2614  000110  C026  FFE9         	movff	??_low_isr+5,fsr0l
  2615  000114  C025  FFFB         	movff	??_low_isr+4,pclatu
  2616  000118  C024  FFFA         	movff	??_low_isr+3,pclath
  2617  00011C  C023  FFE0         	movff	??_low_isr+2,bsr
  2618  000120  C022  FFE8         	movff	??_low_isr+1,wreg
  2619  000124  C021  FFD8         	movff	??_low_isr,status
  2620  000128  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2621  00012A  0010               	retfie	
  2622  00012C                     __end_of_low_isr:
  2623                           	opt stack 0
  2624                           pclatu	equ	0xFFB
  2625                           pclath	equ	0xFFA
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon	equ	0xFF2
  2633                           intcon2	equ	0xFF1
  2634                           indf0	equ	0xFEF
  2635                           postinc0	equ	0xFEE
  2636                           fsr0h	equ	0xFEA
  2637                           fsr0l	equ	0xFE9
  2638                           wreg	equ	0xFE8
  2639                           fsr1h	equ	0xFE2
  2640                           fsr1l	equ	0xFE1
  2641                           bsr	equ	0xFE0
  2642                           indf2	equ	0xFDF
  2643                           postinc2	equ	0xFDE
  2644                           postdec2	equ	0xFDD
  2645                           fsr2h	equ	0xFDA
  2646                           fsr2l	equ	0xFD9
  2647                           status	equ	0xFD8
  2648                           
  2649 ;; *************** function i1___wmul *****************
  2650 ;; Defined at:
  2651 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  multiplier      2   18[COMRAM] unsigned int 
  2654 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  __wmul          2   22[COMRAM] unsigned int 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  2   18[COMRAM] unsigned int 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2, status,0, prodl, prodh
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2666 ;;      Params:         4       0       0       0       0       0       0
  2667 ;;      Locals:         2       0       0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0
  2669 ;;      Totals:         6       0       0       0       0       0       0
  2670 ;;Total ram usage:        6 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    1
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_low_isr
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text16
  2681  000D0A                     __ptext16:
  2682                           	opt stack 0
  2683  000D0A                     i1___wmul:
  2684                           	opt stack 24
  2685                           
  2686                           ;incstack = 0
  2687  000D0A  5013               	movf	i1___wmul@multiplier,w,c
  2688  000D0C  0215               	mulwf	i1___wmul@multiplicand,c
  2689  000D0E  CFF3 F017          	movff	prodl,i1___wmul@product
  2690  000D12  CFF4 F018          	movff	prodh,i1___wmul@product+1
  2691  000D16  5013               	movf	i1___wmul@multiplier,w,c
  2692  000D18  0216               	mulwf	i1___wmul@multiplicand+1,c
  2693  000D1A  50F3               	movf	prodl,w,c
  2694  000D1C  2618               	addwf	i1___wmul@product+1,f,c
  2695  000D1E  5014               	movf	i1___wmul@multiplier+1,w,c
  2696  000D20  0215               	mulwf	i1___wmul@multiplicand,c
  2697  000D22  50F3               	movf	prodl,w,c
  2698  000D24  2618               	addwf	i1___wmul@product+1,f,c
  2699  000D26  C017  F013         	movff	i1___wmul@product,?i1___wmul
  2700  000D2A  C018  F014         	movff	i1___wmul@product+1,?i1___wmul+1
  2701  000D2E  0012               	return	
  2702  000D30                     __end_ofi1___wmul:
  2703                           	opt stack 0
  2704                           pclatu	equ	0xFFB
  2705                           pclath	equ	0xFFA
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           prodh	equ	0xFF4
  2711                           prodl	equ	0xFF3
  2712                           intcon	equ	0xFF2
  2713                           intcon2	equ	0xFF1
  2714                           indf0	equ	0xFEF
  2715                           postinc0	equ	0xFEE
  2716                           fsr0h	equ	0xFEA
  2717                           fsr0l	equ	0xFE9
  2718                           wreg	equ	0xFE8
  2719                           fsr1h	equ	0xFE2
  2720                           fsr1l	equ	0xFE1
  2721                           bsr	equ	0xFE0
  2722                           indf2	equ	0xFDF
  2723                           postinc2	equ	0xFDE
  2724                           postdec2	equ	0xFDD
  2725                           fsr2h	equ	0xFDA
  2726                           fsr2l	equ	0xFD9
  2727                           status	equ	0xFD8
  2728                           
  2729 ;; *************** function ___awdiv *****************
  2730 ;; Defined at:
  2731 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  dividend        2   24[COMRAM] int 
  2734 ;;  divisor         2   26[COMRAM] int 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  quotient        2   30[COMRAM] int 
  2737 ;;  sign            1   29[COMRAM] unsigned char 
  2738 ;;  counter         1   28[COMRAM] unsigned char 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  2   24[COMRAM] int 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2748 ;;      Params:         4       0       0       0       0       0       0
  2749 ;;      Locals:         4       0       0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0
  2751 ;;      Totals:         8       0       0       0       0       0       0
  2752 ;;Total ram usage:        8 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_low_isr
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text17
  2763  000A4E                     __ptext17:
  2764                           	opt stack 0
  2765  000A4E                     ___awdiv:
  2766                           	opt stack 24
  2767                           
  2768                           ;incstack = 0
  2769  000A4E  0E00               	movlw	0
  2770  000A50  6E1E               	movwf	___awdiv@sign,c
  2771  000A52  AE1C               	btfss	___awdiv@divisor+1,7,c
  2772  000A54  D006               	goto	i1l346
  2773  000A56  6C1B               	negf	___awdiv@divisor,c
  2774  000A58  1E1C               	comf	___awdiv@divisor+1,f,c
  2775  000A5A  B0D8               	btfsc	status,0,c
  2776  000A5C  2A1C               	incf	___awdiv@divisor+1,f,c
  2777  000A5E  0E01               	movlw	1
  2778  000A60  6E1E               	movwf	___awdiv@sign,c
  2779  000A62                     i1l346:
  2780  000A62  AE1A               	btfss	___awdiv@dividend+1,7,c
  2781  000A64  D006               	goto	i1l347
  2782  000A66  6C19               	negf	___awdiv@dividend,c
  2783  000A68  1E1A               	comf	___awdiv@dividend+1,f,c
  2784  000A6A  B0D8               	btfsc	status,0,c
  2785  000A6C  2A1A               	incf	___awdiv@dividend+1,f,c
  2786  000A6E  0E01               	movlw	1
  2787  000A70  1A1E               	xorwf	___awdiv@sign,f,c
  2788  000A72                     i1l347:
  2789  000A72  0E00               	movlw	0
  2790  000A74  6E20               	movwf	___awdiv@quotient+1,c
  2791  000A76  0E00               	movlw	0
  2792  000A78  6E1F               	movwf	___awdiv@quotient,c
  2793  000A7A  501B               	movf	___awdiv@divisor,w,c
  2794  000A7C  101C               	iorwf	___awdiv@divisor+1,w,c
  2795  000A7E  B4D8               	btfsc	status,2,c
  2796  000A80  D01C               	goto	i1l354
  2797  000A82  0E01               	movlw	1
  2798  000A84  6E1D               	movwf	___awdiv@counter,c
  2799  000A86  D004               	goto	i1l349
  2800  000A88  90D8               	bcf	status,0,c
  2801  000A8A  361B               	rlcf	___awdiv@divisor,f,c
  2802  000A8C  361C               	rlcf	___awdiv@divisor+1,f,c
  2803  000A8E  2A1D               	incf	___awdiv@counter,f,c
  2804  000A90                     i1l349:
  2805  000A90  AE1C               	btfss	___awdiv@divisor+1,7,c
  2806  000A92  D7FA               	goto	i1l350
  2807  000A94                     i1u69_20:
  2808  000A94  90D8               	bcf	status,0,c
  2809  000A96  361F               	rlcf	___awdiv@quotient,f,c
  2810  000A98  3620               	rlcf	___awdiv@quotient+1,f,c
  2811  000A9A  501B               	movf	___awdiv@divisor,w,c
  2812  000A9C  5C19               	subwf	___awdiv@dividend,w,c
  2813  000A9E  501C               	movf	___awdiv@divisor+1,w,c
  2814  000AA0  581A               	subwfb	___awdiv@dividend+1,w,c
  2815  000AA2  A0D8               	btfss	status,0,c
  2816  000AA4  D005               	goto	i1l353
  2817  000AA6  501B               	movf	___awdiv@divisor,w,c
  2818  000AA8  5E19               	subwf	___awdiv@dividend,f,c
  2819  000AAA  501C               	movf	___awdiv@divisor+1,w,c
  2820  000AAC  5A1A               	subwfb	___awdiv@dividend+1,f,c
  2821  000AAE  801F               	bsf	___awdiv@quotient,0,c
  2822  000AB0                     i1l353:
  2823  000AB0  90D8               	bcf	status,0,c
  2824  000AB2  321C               	rrcf	___awdiv@divisor+1,f,c
  2825  000AB4  321B               	rrcf	___awdiv@divisor,f,c
  2826  000AB6  2E1D               	decfsz	___awdiv@counter,f,c
  2827  000AB8  D7ED               	goto	i1u69_20
  2828  000ABA                     i1l354:
  2829  000ABA  501E               	movf	___awdiv@sign,w,c
  2830  000ABC  B4D8               	btfsc	status,2,c
  2831  000ABE  D004               	goto	i1l355
  2832  000AC0  6C1F               	negf	___awdiv@quotient,c
  2833  000AC2  1E20               	comf	___awdiv@quotient+1,f,c
  2834  000AC4  B0D8               	btfsc	status,0,c
  2835  000AC6  2A20               	incf	___awdiv@quotient+1,f,c
  2836  000AC8                     i1l355:
  2837  000AC8  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  2838  000ACC  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  2839  000AD0  0012               	return	
  2840  000AD2                     __end_of___awdiv:
  2841                           	opt stack 0
  2842                           pclatu	equ	0xFFB
  2843                           pclath	equ	0xFFA
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           indf0	equ	0xFEF
  2853                           postinc0	equ	0xFEE
  2854                           fsr0h	equ	0xFEA
  2855                           fsr0l	equ	0xFE9
  2856                           wreg	equ	0xFE8
  2857                           fsr1h	equ	0xFE2
  2858                           fsr1l	equ	0xFE1
  2859                           bsr	equ	0xFE0
  2860                           indf2	equ	0xFDF
  2861                           postinc2	equ	0xFDE
  2862                           postdec2	equ	0xFDD
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _high_isr *****************
  2868 ;; Defined at:
  2869 ;;		line 81 in file "enc1.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		status,2, status,0
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2883 ;;      Params:         0       0       0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0
  2885 ;;      Temps:         18       0       0       0       0       0       0
  2886 ;;      Totals:        18       0       0       0       0       0       0
  2887 ;;Total ram usage:       18 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		Interrupt level 2
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	intcode
  2897  000008                     __pintcode:
  2898                           	opt stack 0
  2899  000008                     _high_isr:
  2900                           	opt stack 24
  2901                           
  2902                           ;incstack = 0
  2903  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2904  00000A  ED8E  F004         	call	int_func,f	;refresh shadow registers
  2905                           pclatu	equ	0xFFB
  2906                           pclath	equ	0xFFA
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           intcon2	equ	0xFF1
  2915                           indf0	equ	0xFEF
  2916                           postinc0	equ	0xFEE
  2917                           fsr0h	equ	0xFEA
  2918                           fsr0l	equ	0xFE9
  2919                           wreg	equ	0xFE8
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           bsr	equ	0xFE0
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930                           	psect	intcode_body
  2931  00091C                     __pintcode_body:
  2932                           	opt stack 24
  2933  00091C                     int_func:
  2934                           	opt stack 24
  2935  00091C  0006               	pop		; remove dummy address from shadow register refresh
  2936  00091E  CFFA F001          	movff	pclath,??_high_isr
  2937  000922  CFFB F002          	movff	pclatu,??_high_isr+1
  2938  000926  CFE9 F003          	movff	fsr0l,??_high_isr+2
  2939  00092A  CFEA F004          	movff	fsr0h,??_high_isr+3
  2940  00092E  CFE1 F005          	movff	fsr1l,??_high_isr+4
  2941  000932  CFE2 F006          	movff	fsr1h,??_high_isr+5
  2942  000936  CFD9 F007          	movff	fsr2l,??_high_isr+6
  2943  00093A  CFDA F008          	movff	fsr2h,??_high_isr+7
  2944  00093E  CFF3 F009          	movff	prodl,??_high_isr+8
  2945  000942  CFF4 F00A          	movff	prodh,??_high_isr+9
  2946  000946  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  2947  00094A  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  2948  00094E  CFF8 F00D          	movff	tblptru,??_high_isr+12
  2949  000952  CFF5 F00E          	movff	tablat,??_high_isr+13
  2950  000956  C04A  F00F         	movff	btemp,??_high_isr+14
  2951  00095A  C04B  F010         	movff	btemp+1,??_high_isr+15
  2952  00095E  C04C  F011         	movff	btemp+2,??_high_isr+16
  2953  000962  C04D  F012         	movff	btemp+3,??_high_isr+17
  2954                           
  2955                           ;enc1.c: 83: if(INT0IF == 1)
  2956  000966  A2F2               	btfss	intcon,1,c	;volatile
  2957  000968  D003               	goto	i2l1177
  2958                           
  2959                           ;enc1.c: 84: {
  2960                           ;enc1.c: 85: cont++;
  2961  00096A  4A3F               	infsnz	_cont,f,c	;volatile
  2962  00096C  2A40               	incf	_cont+1,f,c	;volatile
  2963                           
  2964                           ;enc1.c: 87: INT0IF = 0;
  2965  00096E  92F2               	bcf	intcon,1,c	;volatile
  2966  000970                     i2l1177:
  2967                           
  2968                           ;enc1.c: 88: return;
  2969  000970  C012  F04D         	movff	??_high_isr+17,btemp+3
  2970  000974  C011  F04C         	movff	??_high_isr+16,btemp+2
  2971  000978  C010  F04B         	movff	??_high_isr+15,btemp+1
  2972  00097C  C00F  F04A         	movff	??_high_isr+14,btemp
  2973  000980  C00E  FFF5         	movff	??_high_isr+13,tablat
  2974  000984  C00D  FFF8         	movff	??_high_isr+12,tblptru
  2975  000988  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  2976  00098C  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  2977  000990  C00A  FFF4         	movff	??_high_isr+9,prodh
  2978  000994  C009  FFF3         	movff	??_high_isr+8,prodl
  2979  000998  C008  FFDA         	movff	??_high_isr+7,fsr2h
  2980  00099C  C007  FFD9         	movff	??_high_isr+6,fsr2l
  2981  0009A0  C006  FFE2         	movff	??_high_isr+5,fsr1h
  2982  0009A4  C005  FFE1         	movff	??_high_isr+4,fsr1l
  2983  0009A8  C004  FFEA         	movff	??_high_isr+3,fsr0h
  2984  0009AC  C003  FFE9         	movff	??_high_isr+2,fsr0l
  2985  0009B0  C002  FFFB         	movff	??_high_isr+1,pclatu
  2986  0009B4  C001  FFFA         	movff	??_high_isr,pclath
  2987  0009B8  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2988  0009BA  0011               	retfie		f
  2989  0009BC                     __end_of_high_isr:
  2990                           	opt stack 0
  2991                           pclatu	equ	0xFFB
  2992                           pclath	equ	0xFFA
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           intcon2	equ	0xFF1
  3001                           indf0	equ	0xFEF
  3002                           postinc0	equ	0xFEE
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           bsr	equ	0xFE0
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           pclatu	equ	0xFFB
  3016                           pclath	equ	0xFFA
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           intcon	equ	0xFF2
  3024                           intcon2	equ	0xFF1
  3025                           indf0	equ	0xFEF
  3026                           postinc0	equ	0xFEE
  3027                           fsr0h	equ	0xFEA
  3028                           fsr0l	equ	0xFE9
  3029                           wreg	equ	0xFE8
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           bsr	equ	0xFE0
  3033                           indf2	equ	0xFDF
  3034                           postinc2	equ	0xFDE
  3035                           postdec2	equ	0xFDD
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040                           	psect	rparam
  3041  0000                     pclatu	equ	0xFFB
  3042                           pclath	equ	0xFFA
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           intcon	equ	0xFF2
  3050                           intcon2	equ	0xFF1
  3051                           indf0	equ	0xFEF
  3052                           postinc0	equ	0xFEE
  3053                           fsr0h	equ	0xFEA
  3054                           fsr0l	equ	0xFE9
  3055                           wreg	equ	0xFE8
  3056                           fsr1h	equ	0xFE2
  3057                           fsr1l	equ	0xFE1
  3058                           bsr	equ	0xFE0
  3059                           indf2	equ	0xFDF
  3060                           postinc2	equ	0xFDE
  3061                           postdec2	equ	0xFDD
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066                           	psect	temp
  3067  00004A                     btemp:
  3068                           	opt stack 0
  3069  00004A                     	ds	1
  3070  0000                     int$flags	set	btemp
  3071  0000                     wtemp6	set	btemp+1
  3072                           pclatu	equ	0xFFB
  3073                           pclath	equ	0xFFA
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           intcon2	equ	0xFF1
  3082                           indf0	equ	0xFEF
  3083                           postinc0	equ	0xFEE
  3084                           fsr0h	equ	0xFEA
  3085                           fsr0l	equ	0xFE9
  3086                           wreg	equ	0xFE8
  3087                           fsr1h	equ	0xFE2
  3088                           fsr1l	equ	0xFE1
  3089                           bsr	equ	0xFE0
  3090                           indf2	equ	0xFDF
  3091                           postinc2	equ	0xFDE
  3092                           postdec2	equ	0xFDD
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      73
    BANK0           128     26      26
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 16
		 -> value(COMRAM[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_lcd_gotoxy
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda

Critical Paths under _low_isr in COMRAM

    _low_isr->___awdiv
    ___awdiv->i1___wmul

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3413
                                             24 BANK0      2     2      0
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    2582
                                              5 BANK0     19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             53 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     513
                                             53 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             53 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     407
                                             57 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     210
                                             56 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0      90
                                             54 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     165
                                             56 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0      75
                                             54 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     259
                                             56 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0      90
                                             54 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      60
                                             53 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             53 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0     713
                                             32 COMRAM    21    21      0
                            ___awdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     261
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                             24 COMRAM     8     4      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _low_isr (ROOT)
   ___awdiv
     i1___wmul (ARG)
   i1___wmul

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1A      1A       5       20.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      49       1       57.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63      15        0.0%
DATA                 0      0      63       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr  1 20:31:15 2018

            lcd_cmd_hf@x 0037                       l69 0A00                       l94 0C6E  
                     l95 0C4E                       l97 0C56                       l98 0C5E  
                     l99 0C66             ___awdiv@sign 001E                       bsr 000FE0  
    ___wmul@multiplicand 0038              __CFG_BORV$3 000000         i1___wmul@product 0017  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$XT 000000                      l112 0C96  
                    l114 0CA6                      l106 0B4E                      l123 0CC2  
                    l115 0C8C                      l107 0B26                      l124 0CC4  
                    l116 0C90                      l125 0CCC                      l126 0CCE  
                    l127 0CD6                      l151 062C                      l128 0CD8  
                    l152 0646                      l129 0CE0                      l161 06F6  
                    l154 0670                      l163 0720                      l156 06CE  
                    l173 07D8                      l174 0834                      l175 07DE  
                    l167 076A                      l168 078E                      l601 0C36  
                    l169 0796                      l602 0C40                      l508 0D46  
                    l591 0B10                      l592 0B1A                      l587 0AF0  
                    l588 0AE8                      l597 0C1E                      l598 0C16  
           __CFG_CPB$OFF 000000                      u430 0AF4             __CFG_CPD$OFF 000000  
                    u480 0B46                      u490 0B6E                      u740 0C22  
                    u900 0856                      u820 0750                      u487 0B3C  
                    u497 0B64                      u860 079E                      u917 0A0C  
                    u870 07BC                      u927 0BDE                      u937 087C  
                    u890 083C                      u947 088C                      u957 089E  
                    u967 08B2                      u977 08C8                      u987 08DE  
                    u997 08F4                      _lcd 0041                      _rpm 003D  
                    wreg 000FE8              lcd_gotoxy@x 003B              lcd_gotoxy@y 0039  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1577 0724  
                   STR_1 060B                     STR_2 061B                     _GIEH 007F97  
                   _GIEL 007F96                     u1007 090A                     u1017 0B98  
                   u1027 0D8A                     _IPEN 007E87                     _TMR1 000FCE  
           __CFG_PWRT$ON 000000                     _cont 003F                     _main 09BC  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 004A  
                   prodh 000FF4                     prodl 000FF3                     start 012C  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001          __end_of___awdiv 0AD2          ___awdiv@divisor 001B  
        __end_of___lwdiv 0B24                    i1l350 0A88                    i1l353 0AB0  
        __end_of___lwmod 0C4A                    i1l354 0ABA                    i1l346 0A62  
                  i1l355 0AC8                    i1l347 0A72                    i1l349 0A90  
        ___awdiv@counter 001D                    _PORTB 000F81                    _PORTD 000F83  
                  _TRISB 000F93            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0BC0          __end_of_lcd_lat 0D96  
        __end_of_lcd_dwr 0C06          __end_of_lcd_msg 0B76            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 060B                    _manda 0CB8          __end_of_isdigit 0D4E  
                  _value 0042          __end_of_low_isr 012C           __CFG_BOREN$OFF 000000  
                  pclath 000FFA                    tablat 000FF5         __end_ofi1___wmul 0D30  
                  status 000FD8      i1___wmul@multiplier 0013                    wtemp6 004B  
        __end_of_sprintf 0864          __initialization 0D4E             __end_of_main 0A4E  
                 ??_main 0098            __activetblptr 000002                   ?_manda 0001  
       ___awdiv@dividend 0019                   _INT0IE 007F94                   _INT0IF 007F91  
                 i1l1473 00D4                   i2l1177 0970                   _TMR1IF 007CF0  
                 _TMR1CS 007E69                   _TMR1IP 007CF8                   _TMR1ON 007E68  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 091C         __end_of_high_isr 09BC  
       __end_of_lcd_putc 0C84                   ___wmul 0CE4                ??___awdiv 001D  
         __CFG_STVREN$ON 000000                ??___lwdiv 003A                ??___lwmod 003D  
                 clear_0 0D54         ___awdiv@quotient 001F                ??_lcd_cmd 0037  
              ??_lcd_lat 0036                ??_lcd_dwr 0037                ??_lcd_msg 003C  
              ??_isdigit 0036             __mediumconst 0000                ??_low_isr 0021  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
      lcd_gotoxy@ADDRESS 003C                ??_sprintf 008B               __accesstop 0080  
__end_of__initialization 0D5A          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_manda 0CE4                ?i1___wmul 0013  
                ??_manda 0036             sprintf@width 0095       __CFG_CCP2MX$PORTBE 000000  
                ?___wmul 0036               ??i1___wmul 0017                  _T1CKPS0 007E6C  
                _T1CKPS1 007E6D                  _INTEDG0 007F8E               _lcd_cmd_hf 0D68  
             _lcd_gotoxy 0C84                  i1u69_20 0A94                ?_lcd_init 0001  
              ?_high_isr 0001                ?_lcd_putc 0001                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0A4E          __size_of___wmul 0026  
                ___lwdiv 0AD2                  ___lwmod 0C06             __psmallconst 0600  
                __pcinit 0D4E                  __ramtop 0600                  __ptext0 09BC  
                __ptext1 0620                  __ptext2 0D30                  __ptext3 0CE4  
                __ptext4 0C06                  __ptext5 0AD2                  __ptext6 0B24  
                __ptext7 0C4A                  __ptext8 0BC0                  __ptext9 0864  
                _lcd_cmd 0B76                  _lcd_lat 0D82                  _lcd_dwr 0BC0  
                _lcd_msg 0B24                _T1CONbits 000FCD                  _dpowers 0601  
                _isdigit 0D30                  _low_isr 0018                  _sprintf 0620  
             ??_lcd_init 0039               ??_high_isr 0001           __pintcode_body 091C  
             ??_lcd_putc 0039     end_of_initialization 0D5A            __Lmediumconst 0000  
                int_func 091C                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE    i1___wmul@multiplicand 0015              ?_lcd_cmd_hf 0001  
            ?_lcd_gotoxy 0039           __end_of___wmul 0D0A      start_initialization 0D4E  
      __size_ofi1___wmul 0026      __size_of_lcd_cmd_hf 001A      __size_of_lcd_gotoxy 0034  
               ??___wmul 003A         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 003D  
          __pcstackBANK0 0080        __size_of_lcd_init 00B8        __size_of_high_isr 09B4  
            sprintf@flag 0092        __size_of_lcd_putc 003A              sprintf@prec 0091  
       ___lwdiv@dividend 0036                __pintcode 0008                 ?___awdiv 0019  
               ?___lwdiv 0036                 ?___lwmod 0080              __pintcodelo 0018  
               ?_lcd_cmd 0001                 ?_lcd_lat 0001                 ?_lcd_dwr 0001  
               ?_lcd_msg 003A              __smallconst 0600                 ?_isdigit 0001  
               ?_low_isr 0001         ___lwdiv@quotient 003A           __size_of_manda 002C  
               ?_sprintf 0085           ___wmul@product 003A                 _PIE1bits 000F9D  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000        ___wmul@multiplier 0036  
               i1___wmul 0D0A             ??_lcd_cmd_hf 0037                lcd_putc@c 0039  
           ??_lcd_gotoxy 003A                manda@dato 0036                 __Hrparam 0000  
               __Lrparam 0000       __end_of_lcd_cmd_hf 0D82       __end_of_lcd_gotoxy 0CB8  
       __size_of___awdiv 0084         __size_of___lwdiv 0052         __size_of___lwmod 0044  
            _isdigit$504 0037         __size_of_lcd_cmd 004A         __size_of_lcd_lat 0014  
       __size_of_lcd_dwr 0046         __size_of_lcd_msg 0052               sprintf@val 0093  
       __size_of_isdigit 001E          ___lwdiv@divisor 0038          ___lwdiv@counter 003C  
       __size_of_low_isr 0114                 __ptext10 0D68                 __ptext11 0C84  
               __ptext12 0B76                 __ptext13 0CB8                 __ptext14 0D82  
               __ptext16 0D0A                 __ptext17 0A4E                 _lcd_init 0864  
               _high_isr 0008                 _lcd_putc 0C4A         __size_of_sprintf 0244  
          __size_of_main 0092                 int$flags 004A                 lcd_cmd@x 0038  
               lcd_dwr@x 0038                 lcd_msg@c 003A                 isdigit@c 0038  
               intlevel1 0000                 intlevel2 0000                sprintf@ap 008F  
              sprintf@sp 0085         ___lwmod@dividend 0080                 sprintf@c 0097  
               sprintf@f 0087          ___lwmod@divisor 0082          ___lwmod@counter 0084  
