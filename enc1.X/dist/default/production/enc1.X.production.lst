

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 31 04:34:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4520 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	smallconst
    67  000600                     __psmallconst:
    68                           	opt stack 0
    69  000600  00                 	db	0
    70  000601                     _dpowers:
    71                           	opt stack 0
    72  000601  0001               	dw	1
    73  000603  000A               	dw	10
    74  000605  0064               	dw	100
    75  000607  03E8               	dw	1000
    76  000609  2710               	dw	10000
    77  00060B                     __end_of_dpowers:
    78                           	opt stack 0
    79  0000                     _PORTD	set	3971
    80  0000                     _PORTB	set	3969
    81  0000                     _T1CONbits	set	4045
    82  0000                     _PIE1bits	set	3997
    83  0000                     _TRISB	set	3987
    84  0000                     _PIR1bits	set	3998
    85  0000                     _GIEL	set	32662
    86  0000                     _GIEH	set	32663
    87  0000                     _IPEN	set	32391
    88  0000                     _TMR1ON	set	32360
    89  0000                     _TMR1CS	set	32361
    90  0000                     _T1CKPS0	set	32364
    91  0000                     _T1CKPS1	set	32365
    92  0000                     _TMR1IP	set	31992
    93  0000                     _INTEDG0	set	32654
    94  0000                     _INT0IE	set	32660
    95  0000                     _INT0IF	set	32657
    96  0000                     _TMR1IF	set	31984
    97  00060B                     STR_1:
    98  00060B  20                 	db	32
    99  00060C  48                 	db	72	;'H'
   100  00060D  61                 	db	97	;'a'
   101  00060E  62                 	db	98	;'b'
   102  00060F  69                 	db	105	;'i'
   103  000610  6C                 	db	108	;'l'
   104  000611  69                 	db	105	;'i'
   105  000612  74                 	db	116	;'t'
   106  000613  61                 	db	97	;'a'
   107  000614  20                 	db	32
   108  000615  69                 	db	105	;'i'
   109  000616  6E                 	db	110	;'n'
   110  000617  74                 	db	116	;'t'
   111  000618  27                 	db	39
   112  000619  73                 	db	115	;'s'
   113  00061A  00                 	db	0
   114  00061B                     STR_2:
   115  00061B  25                 	db	37
   116  00061C  34                 	db	52	;'4'
   117  00061D  64                 	db	100	;'d'
   118  00061E  00                 	db	0
   119                           
   120                           ; #config settings
   121  00061F  00                 	db	0	; dummy byte at the end
   122  0000                     
   123                           	psect	cinit
   124  000C86                     __pcinit:
   125                           	opt stack 0
   126  000C86                     start_initialization:
   127                           	opt stack 0
   128  000C86                     __initialization:
   129                           	opt stack 0
   130                           
   131                           ; Clear objects allocated to COMRAM (11 bytes)
   132  000C86  EE00  F049         	lfsr	0,__pbssCOMRAM
   133  000C8A  0E0B               	movlw	11
   134  000C8C                     clear_0:
   135  000C8C  6AEE               	clrf	postinc0,c
   136  000C8E  06E8               	decf	wreg,f,c
   137  000C90  E1FD               	bnz	clear_0
   138  000C92                     end_of_initialization:
   139                           	opt stack 0
   140  000C92                     __end_of__initialization:
   141                           	opt stack 0
   142  000C92  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   143  000C94  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   144  000C96  0E00               	movlw	low (__Lmediumconst shr (0+16))
   145  000C98  6EF8               	movwf	tblptru,c
   146  000C9A  0100               	movlb	0
   147  000C9C  EFD6  F004         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           
   152                           	psect	bssCOMRAM
   153  000049                     __pbssCOMRAM:
   154                           	opt stack 0
   155  000049                     _cont:
   156                           	opt stack 0
   157  000049                     	ds	2
   158  00004B                     _lcd:
   159                           	opt stack 0
   160  00004B                     	ds	1
   161  00004C                     _value:
   162                           	opt stack 0
   163  00004C                     	ds	8
   164                           tblptru	equ	0xFF8
   165                           postinc0	equ	0xFEE
   166                           wreg	equ	0xFE8
   167                           
   168                           	psect	cstackCOMRAM
   169  000001                     __pcstackCOMRAM:
   170                           	opt stack 0
   171  000001                     ??_high_isr:
   172  000001                     
   173                           ; 1 bytes @ 0x0
   174  000001                     	ds	18
   175  000013                     ??_low_isr:
   176                           
   177                           ; 1 bytes @ 0x12
   178  000013                     	ds	21
   179  000028                     ??_isdigit:
   180  000028                     ??_lcd_lat:
   181  000028                     ?___wmul:
   182                           	opt stack 0
   183  000028                     ?___lwdiv:
   184                           	opt stack 0
   185  000028                     manda@dato:
   186                           	opt stack 0
   187  000028                     ___wmul@multiplier:
   188                           	opt stack 0
   189  000028                     ___lwdiv@dividend:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x27
   193  000028                     	ds	1
   194  000029                     ??_lcd_dwr:
   195  000029                     ??_lcd_cmd:
   196  000029                     lcd_cmd_hf@x:
   197                           	opt stack 0
   198  000029                     _isdigit$502:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x28
   202  000029                     	ds	1
   203  00002A                     lcd_cmd@x:
   204                           	opt stack 0
   205  00002A                     lcd_dwr@x:
   206                           	opt stack 0
   207  00002A                     isdigit@c:
   208                           	opt stack 0
   209  00002A                     ___wmul@multiplicand:
   210                           	opt stack 0
   211  00002A                     ___lwdiv@divisor:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x29
   215  00002A                     	ds	1
   216  00002B                     ??_lcd_init:
   217  00002B                     lcd_putc@c:
   218                           	opt stack 0
   219  00002B                     lcd_gotoxy@y:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x2A
   223  00002B                     	ds	1
   224  00002C                     ??_lcd_gotoxy:
   225  00002C                     lcd_msg@c:
   226                           	opt stack 0
   227  00002C                     ___wmul@product:
   228                           	opt stack 0
   229  00002C                     ___lwdiv@quotient:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x2B
   233  00002C                     	ds	1
   234  00002D                     lcd_gotoxy@x:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x2C
   238  00002D                     	ds	1
   239  00002E                     lcd_gotoxy@ADDRESS:
   240                           	opt stack 0
   241  00002E                     ___lwdiv@counter:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x2D
   245  00002E                     	ds	1
   246  00002F                     ?___lwmod:
   247                           	opt stack 0
   248  00002F                     ___lwmod@dividend:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x2E
   252  00002F                     	ds	2
   253  000031                     ___lwmod@divisor:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x30
   257  000031                     	ds	2
   258  000033                     ___lwmod@counter:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x32
   262  000033                     	ds	1
   263  000034                     ?_sprintf:
   264                           	opt stack 0
   265  000034                     sprintf@sp:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x33
   269  000034                     	ds	2
   270  000036                     sprintf@f:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x35
   274  000036                     	ds	4
   275  00003A                     ??_sprintf:
   276                           
   277                           ; 1 bytes @ 0x39
   278  00003A                     	ds	4
   279  00003E                     sprintf@ap:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x3D
   283  00003E                     	ds	2
   284  000040                     sprintf@prec:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x3F
   288  000040                     	ds	1
   289  000041                     sprintf@flag:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x40
   293  000041                     	ds	1
   294  000042                     sprintf@val:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x41
   298  000042                     	ds	2
   299  000044                     sprintf@width:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x43
   303  000044                     	ds	2
   304  000046                     sprintf@c:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x45
   308  000046                     	ds	1
   309  000047                     ??_main:
   310                           
   311                           ; 1 bytes @ 0x46
   312  000047                     	ds	2
   313                           tblptru	equ	0xFF8
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317 ;;
   318 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   319 ;;
   320 ;; *************** function _main *****************
   321 ;; Defined at:
   322 ;;		line 90 in file "enc1.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;		None
   327 ;; Return value:  Size  Location     Type
   328 ;;                  1    wreg      void 
   329 ;; Registers used:
   330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   331 ;; Tracked objects:
   332 ;;		On entry : 0/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   336 ;;      Params:         0       0       0       0       0       0       0
   337 ;;      Locals:         0       0       0       0       0       0       0
   338 ;;      Temps:          2       0       0       0       0       0       0
   339 ;;      Totals:         2       0       0       0       0       0       0
   340 ;;Total ram usage:        2 bytes
   341 ;; Hardware stack levels required when called:    6
   342 ;; This function calls:
   343 ;;		_lcd_gotoxy
   344 ;;		_lcd_init
   345 ;;		_lcd_msg
   346 ;;		_sprintf
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           	psect	text0
   353  0009AC                     __ptext0:
   354                           	opt stack 0
   355  0009AC                     _main:
   356                           	opt stack 25
   357                           
   358                           ;enc1.c: 92: cont = 0;
   359                           
   360                           ;incstack = 0
   361  0009AC  0E00               	movlw	0
   362  0009AE  6E4A               	movwf	_cont+1,c	;volatile
   363  0009B0  0E00               	movlw	0
   364  0009B2  6E49               	movwf	_cont,c	;volatile
   365                           
   366                           ;enc1.c: 93: TRISB = 0x03;
   367  0009B4  0E03               	movlw	3
   368  0009B6  6E93               	movwf	3987,c	;volatile
   369                           
   370                           ;enc1.c: 94: lcd_init();
   371  0009B8  EC2A  F004         	call	_lcd_init	;wreg free
   372                           
   373                           ;enc1.c: 95: lcd_msg(" Habilita int's");
   374  0009BC  0E0B               	movlw	low STR_1
   375  0009BE  6E2C               	movwf	lcd_msg@c,c
   376  0009C0  0E06               	movlw	high STR_1
   377  0009C2  6E2D               	movwf	lcd_msg@c+1,c
   378  0009C4  EC42  F005         	call	_lcd_msg	;wreg free
   379                           
   380                           ;enc1.c: 100: INT0IE = 1;
   381  0009C8  88F2               	bsf	intcon,4,c	;volatile
   382                           
   383                           ;enc1.c: 101: INTEDG0 = 1;
   384  0009CA  8CF1               	bsf	intcon2,6,c	;volatile
   385                           
   386                           ;enc1.c: 108: TMR1IP = 0;
   387  0009CC  909F               	bcf	3999,0,c	;volatile
   388                           
   389                           ;enc1.c: 111: PIE1bits.TMR1IE = 1;
   390  0009CE  809D               	bsf	3997,0,c	;volatile
   391                           
   392                           ;enc1.c: 112: T1CONbits.RD16 = 1;
   393  0009D0  8ECD               	bsf	4045,7,c	;volatile
   394                           
   395                           ;enc1.c: 113: T1CKPS1 = 1;
   396  0009D2  8ACD               	bsf	4045,5,c	;volatile
   397                           
   398                           ;enc1.c: 114: T1CKPS0 = 1;
   399  0009D4  88CD               	bsf	4045,4,c	;volatile
   400                           
   401                           ;enc1.c: 115: TMR1CS = 0;
   402  0009D6  92CD               	bcf	4045,1,c	;volatile
   403                           
   404                           ;enc1.c: 116: TMR1ON = 0;
   405  0009D8  90CD               	bcf	4045,0,c	;volatile
   406                           
   407                           ;enc1.c: 121: IPEN = 1;
   408  0009DA  8ED0               	bsf	4048,7,c	;volatile
   409                           
   410                           ;enc1.c: 122: GIEH = 1;
   411  0009DC  8EF2               	bsf	intcon,7,c	;volatile
   412                           
   413                           ;enc1.c: 123: GIEL = 1;
   414  0009DE  8CF2               	bsf	intcon,6,c	;volatile
   415                           
   416                           ;enc1.c: 127: (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
   417  0009E0  888A               	bsf	3978,4,c	;volatile
   418                           
   419                           ;enc1.c: 128: (*(&(*(&PORTB + 0x09))) |= (1<<(2)));
   420  0009E2  848A               	bsf	3978,2,c	;volatile
   421                           
   422                           ;enc1.c: 129: (*(&(*(&PORTB + 0x09))) &=~ (1<<(3)));
   423  0009E4  968A               	bcf	3978,3,c	;volatile
   424  0009E6                     
   425                           ;enc1.c: 132: {
   426                           ;enc1.c: 133: _delay((unsigned long)((980)*(4000000/4000.0)));
   427  0009E6  0E05               	movlw	5
   428  0009E8  6E48               	movwf	(??_main+1)& (0+255),c
   429  0009EA  0EF9               	movlw	249
   430  0009EC  6E47               	movwf	??_main& (0+255),c
   431  0009EE  0EB5               	movlw	181
   432  0009F0                     u607:
   433  0009F0  2EE8               	decfsz	wreg,f,c
   434  0009F2  D7FE               	bra	u607
   435  0009F4  2E47               	decfsz	??_main& (0+255),f,c
   436  0009F6  D7FC               	bra	u607
   437  0009F8  2E48               	decfsz	(??_main+1)& (0+255),f,c
   438  0009FA  D7FA               	bra	u607
   439  0009FC  F000               	nop	
   440                           
   441                           ;enc1.c: 134: sprintf(value,"%4d",cont);
   442  0009FE  0E4C               	movlw	low _value
   443  000A00  6E34               	movwf	sprintf@sp,c
   444  000A02  0E00               	movlw	high _value
   445  000A04  6E35               	movwf	sprintf@sp+1,c
   446  000A06  0E1B               	movlw	low STR_2
   447  000A08  6E36               	movwf	sprintf@f,c
   448  000A0A  0E06               	movlw	high STR_2
   449  000A0C  6E37               	movwf	sprintf@f+1,c
   450  000A0E  C049  F038         	movff	_cont,?_sprintf+4	;volatile
   451  000A12  C04A  F039         	movff	_cont+1,?_sprintf+5	;volatile
   452  000A16  EC10  F003         	call	_sprintf	;wreg free
   453                           
   454                           ;enc1.c: 135: lcd_gotoxy(1,2);
   455  000A1A  0E02               	movlw	2
   456  000A1C  6E2B               	movwf	lcd_gotoxy@y,c
   457  000A1E  0E01               	movlw	1
   458  000A20  ECF1  F005         	call	_lcd_gotoxy
   459                           
   460                           ;enc1.c: 136: lcd_msg(value);
   461  000A24  0E4C               	movlw	low _value
   462  000A26  6E2C               	movwf	lcd_msg@c,c
   463  000A28  0E00               	movlw	high _value
   464  000A2A  6E2D               	movwf	lcd_msg@c+1,c
   465  000A2C  EC42  F005         	call	_lcd_msg	;wreg free
   466  000A30  D7DA               	goto	l66
   467  000A32                     __end_of_main:
   468                           	opt stack 0
   469                           tblptru	equ	0xFF8
   470                           intcon	equ	0xFF2
   471                           intcon2	equ	0xFF1
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           
   475 ;; *************** function _sprintf *****************
   476 ;; Defined at:
   477 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;  sp              2   51[COMRAM] PTR unsigned char 
   480 ;;		 -> value(8), 
   481 ;;  f               2   53[COMRAM] PTR const unsigned char 
   482 ;;		 -> STR_2(4), 
   483 ;; Auto vars:     Size  Location     Type
   484 ;;  tmpval          4    0        struct .
   485 ;;  cp              3    0        PTR const unsigned char 
   486 ;;  width           2   67[COMRAM] int 
   487 ;;  val             2   65[COMRAM] unsigned int 
   488 ;;  ap              2   61[COMRAM] PTR void [1]
   489 ;;		 -> ?_sprintf(2), 
   490 ;;  len             2    0        unsigned int 
   491 ;;  c               1   69[COMRAM] char 
   492 ;;  flag            1   64[COMRAM] unsigned char 
   493 ;;  prec            1   63[COMRAM] char 
   494 ;; Return value:  Size  Location     Type
   495 ;;                  2   51[COMRAM] int 
   496 ;; Registers used:
   497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   503 ;;      Params:         6       0       0       0       0       0       0
   504 ;;      Locals:         9       0       0       0       0       0       0
   505 ;;      Temps:          4       0       0       0       0       0       0
   506 ;;      Totals:        19       0       0       0       0       0       0
   507 ;;Total ram usage:       19 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; Hardware stack levels required when called:    3
   510 ;; This function calls:
   511 ;;		___lwdiv
   512 ;;		___lwmod
   513 ;;		___wmul
   514 ;;		_isdigit
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text1
   521  000620                     __ptext1:
   522                           	opt stack 0
   523  000620                     _sprintf:
   524                           	opt stack 27
   525                           
   526                           ;doprnt.c: 494: va_list ap;
   527                           ;doprnt.c: 499: signed char c;
   528                           ;doprnt.c: 501: int width;
   529                           ;doprnt.c: 506: signed char prec;
   530                           ;doprnt.c: 508: unsigned char flag;
   531                           ;doprnt.c: 523: union {
   532                           ;doprnt.c: 524: unsigned long vd;
   533                           ;doprnt.c: 525: double integ;
   534                           ;doprnt.c: 526: } tmpval;
   535                           ;doprnt.c: 528: unsigned int val;
   536                           ;doprnt.c: 529: unsigned len;
   537                           ;doprnt.c: 530: const char * cp;
   538                           ;doprnt.c: 533: *ap = __va_start();
   539                           
   540                           ;incstack = 0
   541  000620  0E38               	movlw	low (?_sprintf+4)
   542  000622  6E3E               	movwf	sprintf@ap,c
   543  000624  0E00               	movlw	high (?_sprintf+4)
   544  000626  6E3F               	movwf	sprintf@ap+1,c
   545                           
   546                           ;doprnt.c: 536: while(c = *f++) {
   547  000628  D102               	goto	u580
   548  00062A                     
   549                           ;doprnt.c: 538: if(c != '%')
   550  00062A  0E25               	movlw	37
   551  00062C  1846               	xorwf	sprintf@c,w,c
   552  00062E  B4D8               	btfsc	status,2,c
   553  000630  D009               	goto	l149
   554                           
   555                           ;doprnt.c: 540: {
   556                           ;doprnt.c: 541: ((*sp++ = (c)));
   557  000632  C034  FFD9         	movff	sprintf@sp,fsr2l
   558  000636  C035  FFDA         	movff	sprintf@sp+1,fsr2h
   559  00063A  C046  FFDF         	movff	sprintf@c,indf2
   560  00063E  4A34               	infsnz	sprintf@sp,f,c
   561  000640  2A35               	incf	sprintf@sp+1,f,c
   562                           
   563                           ;doprnt.c: 542: continue;
   564  000642  D0F5               	goto	u580
   565  000644                     l149:
   566                           
   567                           ;doprnt.c: 543: }
   568                           ;doprnt.c: 546: width = 0;
   569  000644  0E00               	movlw	0
   570  000646  6E45               	movwf	sprintf@width+1,c
   571  000648  0E00               	movlw	0
   572  00064A  6E44               	movwf	sprintf@width,c
   573                           
   574                           ;doprnt.c: 548: flag = 0;
   575  00064C  0E00               	movlw	0
   576  00064E  6E41               	movwf	sprintf@flag,c
   577                           
   578                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   579  000650  C036  FFF6         	movff	sprintf@f,tblptrl
   580  000654  C037  FFF7         	movff	sprintf@f+1,tblptrh
   581  000658                     	if	0	;tblptru may be non-zero
   582  000658                     	endif
   583  000658                     	if	0	;tblptru may be non-zero
   584  000658                     	endif
   585  000658  0008               	tblrd		*
   586  00065A  50F5               	movf	tablat,w,c
   587  00065C  EC34  F006         	call	_isdigit
   588  000660  A0D8               	btfss	status,0,c
   589  000662  D032               	goto	l153
   590                           
   591                           ;doprnt.c: 598: width = 0;
   592  000664  0E00               	movlw	0
   593  000666  6E45               	movwf	sprintf@width+1,c
   594  000668  0E00               	movlw	0
   595  00066A  6E44               	movwf	sprintf@width,c
   596  00066C                     
   597                           ;doprnt.c: 600: width *= 10;
   598  00066C  C044  F028         	movff	sprintf@width,___wmul@multiplier
   599  000670  C045  F029         	movff	sprintf@width+1,___wmul@multiplier+1
   600  000674  0E00               	movlw	0
   601  000676  6E2B               	movwf	___wmul@multiplicand+1,c
   602  000678  0E0A               	movlw	10
   603  00067A  6E2A               	movwf	___wmul@multiplicand,c
   604  00067C  EC21  F006         	call	___wmul	;wreg free
   605  000680  C028  F044         	movff	?___wmul,sprintf@width
   606  000684  C029  F045         	movff	?___wmul+1,sprintf@width+1
   607                           
   608                           ;doprnt.c: 601: width += *f++ - '0';
   609  000688  0ED0               	movlw	208
   610  00068A  6E3A               	movwf	??_sprintf& (0+255),c
   611  00068C  0EFF               	movlw	255
   612  00068E  6E3B               	movwf	(??_sprintf+1)& (0+255),c
   613  000690  C036  FFF6         	movff	sprintf@f,tblptrl
   614  000694  C037  FFF7         	movff	sprintf@f+1,tblptrh
   615  000698                     	if	0	;tblptru may be non-zero
   616  000698                     	endif
   617  000698                     	if	0	;tblptru may be non-zero
   618  000698                     	endif
   619  000698  0008               	tblrd		*
   620  00069A  50F5               	movf	tablat,w,c
   621  00069C  6E3C               	movwf	(??_sprintf+2)& (0+255),c
   622  00069E  6A3D               	clrf	(??_sprintf+3)& (0+255),c
   623  0006A0  503A               	movf	??_sprintf,w,c
   624  0006A2  263C               	addwf	??_sprintf+2,f,c
   625  0006A4  503B               	movf	??_sprintf+1,w,c
   626  0006A6  223D               	addwfc	??_sprintf+3,f,c
   627  0006A8  503C               	movf	??_sprintf+2,w,c
   628  0006AA  2644               	addwf	sprintf@width,f,c
   629  0006AC  503D               	movf	??_sprintf+3,w,c
   630  0006AE  2245               	addwfc	sprintf@width+1,f,c
   631  0006B0  4A36               	infsnz	sprintf@f,f,c
   632  0006B2  2A37               	incf	sprintf@f+1,f,c
   633                           
   634                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   635  0006B4  C036  FFF6         	movff	sprintf@f,tblptrl
   636  0006B8  C037  FFF7         	movff	sprintf@f+1,tblptrh
   637  0006BC                     	if	0	;tblptru may be non-zero
   638  0006BC                     	endif
   639  0006BC                     	if	0	;tblptru may be non-zero
   640  0006BC                     	endif
   641  0006BC  0008               	tblrd		*
   642  0006BE  50F5               	movf	tablat,w,c
   643  0006C0  EC34  F006         	call	_isdigit
   644  0006C4  B0D8               	btfsc	status,0,c
   645  0006C6  D7D2               	goto	l151
   646  0006C8                     l153:
   647  0006C8  C036  FFF6         	movff	sprintf@f,tblptrl
   648  0006CC  C037  FFF7         	movff	sprintf@f+1,tblptrh
   649  0006D0  4A36               	infsnz	sprintf@f,f,c
   650  0006D2  2A37               	incf	sprintf@f+1,f,c
   651  0006D4                     	if	0	;tblptru may be non-zero
   652  0006D4                     	endif
   653  0006D4                     	if	0	;tblptru may be non-zero
   654  0006D4                     	endif
   655  0006D4  0008               	tblrd		*
   656  0006D6  CFF5 F046          	movff	tablat,sprintf@c
   657  0006DA  5046               	movf	sprintf@c,w,c
   658                           
   659                           ; Switch size 1, requested type "space"
   660                           ; Number of cases is 3, Range of values is 0 to 105
   661                           ; switch strategies available:
   662                           ; Name         Instructions Cycles
   663                           ; simple_byte           10     6 (average)
   664                           ;	Chosen strategy is simple_byte
   665  0006DC  0A00               	xorlw	0	; case 0
   666  0006DE  B4D8               	btfsc	status,2,c
   667  0006E0  D0B2               	goto	u590
   668  0006E2  0A64               	xorlw	100	; case 100
   669  0006E4  B4D8               	btfsc	status,2,c
   670  0006E6  D003               	goto	l158
   671  0006E8  0A0D               	xorlw	13	; case 105
   672  0006EA  A4D8               	btfss	status,2,c
   673  0006EC  D0A0               	goto	u580
   674  0006EE                     l158:
   675                           
   676                           ;doprnt.c: 1253: {
   677                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   678  0006EE  C03E  FFD9         	movff	sprintf@ap,fsr2l
   679  0006F2  C03F  FFDA         	movff	sprintf@ap+1,fsr2h
   680  0006F6  CFDE F042          	movff	postinc2,sprintf@val
   681  0006FA  CFDD F043          	movff	postdec2,sprintf@val+1
   682  0006FE  0E02               	movlw	2
   683  000700  263E               	addwf	sprintf@ap,f,c
   684  000702  0E00               	movlw	0
   685  000704  223F               	addwfc	sprintf@ap+1,f,c
   686                           
   687                           ;doprnt.c: 1261: if((int)val < 0) {
   688  000706  AE43               	btfss	sprintf@val+1,7,c
   689  000708  D006               	goto	l160
   690                           
   691                           ;doprnt.c: 1262: flag |= 0x03;
   692  00070A  0E03               	movlw	3
   693  00070C  1241               	iorwf	sprintf@flag,f,c
   694                           
   695                           ;doprnt.c: 1263: val = -val;
   696  00070E  6C42               	negf	sprintf@val,c
   697  000710  1E43               	comf	sprintf@val+1,f,c
   698  000712  B0D8               	btfsc	status,0,c
   699  000714  2A43               	incf	sprintf@val+1,f,c
   700  000716                     l160:
   701                           
   702                           ;doprnt.c: 1264: }
   703                           ;doprnt.c: 1266: }
   704                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   705  000716  0E01               	movlw	1
   706  000718  6E46               	movwf	sprintf@c,c
   707  00071A                     l1270:
   708  00071A  0E05               	movlw	5
   709  00071C  1846               	xorwf	sprintf@c,w,c
   710  00071E  B4D8               	btfsc	status,2,c
   711  000720  D012               	goto	u510
   712                           
   713                           ;doprnt.c: 1306: if(val < dpowers[c])
   714  000722  5046               	movf	sprintf@c,w,c
   715  000724  0D02               	mullw	2
   716  000726  0E01               	movlw	low _dpowers
   717  000728  24F3               	addwf	prodl,w,c
   718  00072A  6EF6               	movwf	tblptrl,c
   719  00072C  0E06               	movlw	high _dpowers
   720  00072E  20F4               	addwfc	prodh,w,c
   721  000730  6EF7               	movwf	tblptrh,c
   722  000732                     	if	0	;There are less than 3 active tblptr bytes
   723  000732                     	endif
   724  000732  0009               	tblrd		*+
   725  000734  50F5               	movf	tablat,w,c
   726  000736  5C42               	subwf	sprintf@val,w,c
   727  000738  0009               	tblrd		*+
   728  00073A  50F5               	movf	tablat,w,c
   729  00073C  5843               	subwfb	sprintf@val+1,w,c
   730  00073E  A0D8               	btfss	status,0,c
   731  000740  D002               	goto	u510
   732                           
   733                           ;doprnt.c: 1307: break;
   734  000742  2A46               	incf	sprintf@c,f,c
   735  000744  D7EA               	goto	l1270
   736  000746                     u510:
   737                           
   738                           ;doprnt.c: 1345: if(width && flag & 0x03)
   739  000746  5044               	movf	sprintf@width,w,c
   740  000748  1045               	iorwf	sprintf@width+1,w,c
   741  00074A  B4D8               	btfsc	status,2,c
   742  00074C  D009               	goto	l164
   743  00074E  C041  F03A         	movff	sprintf@flag,??_sprintf
   744  000752  0E03               	movlw	3
   745  000754  163A               	andwf	??_sprintf,f,c
   746  000756  B4D8               	btfsc	status,2,c
   747  000758  D003               	goto	l164
   748                           
   749                           ;doprnt.c: 1346: width--;
   750  00075A  0644               	decf	sprintf@width,f,c
   751  00075C  A0D8               	btfss	status,0,c
   752  00075E  0645               	decf	sprintf@width+1,f,c
   753  000760                     l164:
   754                           
   755                           ;doprnt.c: 1381: if(width > c)
   756  000760  0E80               	movlw	128
   757  000762  BE46               	btfsc	sprintf@c,7,c
   758  000764  0E7F               	movlw	127
   759  000766  6E3A               	movwf	??_sprintf& (0+255),c
   760  000768  5044               	movf	sprintf@width,w,c
   761  00076A  5C46               	subwf	sprintf@c,w,c
   762  00076C  5045               	movf	sprintf@width+1,w,c
   763  00076E  0A80               	xorlw	128
   764  000770  583A               	subwfb	??_sprintf& (0+255),w,c
   765  000772  B0D8               	btfsc	status,0,c
   766  000774  D007               	goto	l165
   767                           
   768                           ;doprnt.c: 1382: width -= c;
   769  000776  5046               	movf	sprintf@c,w,c
   770  000778  5E44               	subwf	sprintf@width,f,c
   771  00077A  0E00               	movlw	0
   772  00077C  BE46               	btfsc	sprintf@c,7,c
   773  00077E  0EFF               	movlw	255
   774  000780  5A45               	subwfb	sprintf@width+1,f,c
   775  000782  D004               	goto	l166
   776  000784                     l165:
   777                           
   778                           ;doprnt.c: 1383: else
   779                           ;doprnt.c: 1384: width = 0;
   780  000784  0E00               	movlw	0
   781  000786  6E45               	movwf	sprintf@width+1,c
   782  000788  0E00               	movlw	0
   783  00078A  6E44               	movwf	sprintf@width,c
   784  00078C                     l166:
   785                           
   786                           ;doprnt.c: 1422: {
   787                           ;doprnt.c: 1424: if(width
   788                           ;doprnt.c: 1428: )
   789  00078C  5044               	movf	sprintf@width,w,c
   790  00078E  1045               	iorwf	sprintf@width+1,w,c
   791  000790  B4D8               	btfsc	status,2,c
   792  000792  D00F               	goto	u560
   793  000794                     u550:
   794                           
   795                           ;doprnt.c: 1430: ((*sp++ = (' ')));
   796                           
   797                           ;doprnt.c: 1429: do
   798  000794  C034  FFD9         	movff	sprintf@sp,fsr2l
   799  000798  C035  FFDA         	movff	sprintf@sp+1,fsr2h
   800  00079C  0E20               	movlw	32
   801  00079E  6EDF               	movwf	indf2,c
   802  0007A0  4A34               	infsnz	sprintf@sp,f,c
   803  0007A2  2A35               	incf	sprintf@sp+1,f,c
   804                           
   805                           ;doprnt.c: 1431: while(--width);
   806  0007A4  0644               	decf	sprintf@width,f,c
   807  0007A6  A0D8               	btfss	status,0,c
   808  0007A8  0645               	decf	sprintf@width+1,f,c
   809  0007AA  5044               	movf	sprintf@width,w,c
   810  0007AC  1045               	iorwf	sprintf@width+1,w,c
   811  0007AE  A4D8               	btfss	status,2,c
   812  0007B0  D7F1               	goto	u550
   813  0007B2                     u560:
   814                           
   815                           ;doprnt.c: 1438: if(flag & 0x03)
   816  0007B2  C041  F03A         	movff	sprintf@flag,??_sprintf
   817  0007B6  0E03               	movlw	3
   818  0007B8  163A               	andwf	??_sprintf,f,c
   819  0007BA  B4D8               	btfsc	status,2,c
   820  0007BC  D008               	goto	l170
   821                           
   822                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   823  0007BE  C034  FFD9         	movff	sprintf@sp,fsr2l
   824  0007C2  C035  FFDA         	movff	sprintf@sp+1,fsr2h
   825  0007C6  0E2D               	movlw	45
   826  0007C8  6EDF               	movwf	indf2,c
   827  0007CA  4A34               	infsnz	sprintf@sp,f,c
   828  0007CC  2A35               	incf	sprintf@sp+1,f,c
   829  0007CE                     l170:
   830                           
   831                           ;doprnt.c: 1469: }
   832                           ;doprnt.c: 1472: prec = c;
   833  0007CE  C046  F040         	movff	sprintf@c,sprintf@prec
   834                           
   835                           ;doprnt.c: 1474: while(prec--) {
   836  0007D2  D029               	goto	l171
   837  0007D4                     
   838                           ;doprnt.c: 1478: {
   839                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   840  0007D4  5040               	movf	sprintf@prec,w,c
   841  0007D6  0D02               	mullw	2
   842  0007D8  0E01               	movlw	low _dpowers
   843  0007DA  24F3               	addwf	prodl,w,c
   844  0007DC  6EF6               	movwf	tblptrl,c
   845  0007DE  0E06               	movlw	high _dpowers
   846  0007E0  20F4               	addwfc	prodh,w,c
   847  0007E2  6EF7               	movwf	tblptrh,c
   848  0007E4                     	if	0	;There are less than 3 active tblptr bytes
   849  0007E4                     	endif
   850  0007E4  0009               	tblrd		*+
   851  0007E6  CFF5 F02A          	movff	tablat,___lwdiv@divisor
   852  0007EA  000A               	tblrd		*-
   853  0007EC  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
   854  0007F0  C042  F028         	movff	sprintf@val,___lwdiv@dividend
   855  0007F4  C043  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
   856  0007F8  EC19  F005         	call	___lwdiv	;wreg free
   857  0007FC  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
   858  000800  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
   859  000804  0E00               	movlw	0
   860  000806  6E32               	movwf	___lwmod@divisor+1,c
   861  000808  0E0A               	movlw	10
   862  00080A  6E31               	movwf	___lwmod@divisor,c
   863  00080C  ECB3  F005         	call	___lwmod	;wreg free
   864  000810  502F               	movf	?___lwmod,w,c
   865  000812  0F30               	addlw	48
   866  000814  6E46               	movwf	sprintf@c,c
   867                           
   868                           ;doprnt.c: 1523: }
   869                           ;doprnt.c: 1524: ((*sp++ = (c)));
   870  000816  C034  FFD9         	movff	sprintf@sp,fsr2l
   871  00081A  C035  FFDA         	movff	sprintf@sp+1,fsr2h
   872  00081E  C046  FFDF         	movff	sprintf@c,indf2
   873  000822  4A34               	infsnz	sprintf@sp,f,c
   874  000824  2A35               	incf	sprintf@sp+1,f,c
   875  000826                     l171:
   876  000826  0640               	decf	sprintf@prec,f,c
   877  000828  2840               	incf	sprintf@prec,w,c
   878  00082A  A4D8               	btfss	status,2,c
   879  00082C  D7D3               	goto	l172
   880  00082E                     u580:
   881  00082E  C036  FFF6         	movff	sprintf@f,tblptrl
   882  000832  C037  FFF7         	movff	sprintf@f+1,tblptrh
   883  000836  4A36               	infsnz	sprintf@f,f,c
   884  000838  2A37               	incf	sprintf@f+1,f,c
   885  00083A                     	if	0	;tblptru may be non-zero
   886  00083A                     	endif
   887  00083A                     	if	0	;tblptru may be non-zero
   888  00083A                     	endif
   889  00083A  0008               	tblrd		*
   890  00083C  CFF5 F046          	movff	tablat,sprintf@c
   891  000840  5046               	movf	sprintf@c,w,c
   892  000842  A4D8               	btfss	status,2,c
   893  000844  D6F2               	goto	l148
   894  000846                     u590:
   895                           
   896                           ;doprnt.c: 1538: *sp = 0;
   897                           
   898                           ;doprnt.c: 1525: }
   899                           ;doprnt.c: 1533: }
   900                           ;doprnt.c: 1535: alldone:
   901  000846  C034  FFD9         	movff	sprintf@sp,fsr2l
   902  00084A  C035  FFDA         	movff	sprintf@sp+1,fsr2h
   903  00084E  0E00               	movlw	0
   904  000850  6EDF               	movwf	indf2,c
   905  000852  0012               	return	
   906  000854                     __end_of_sprintf:
   907                           	opt stack 0
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           prodh	equ	0xFF4
   913                           prodl	equ	0xFF3
   914                           intcon	equ	0xFF2
   915                           intcon2	equ	0xFF1
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           indf2	equ	0xFDF
   919                           postinc2	equ	0xFDE
   920                           postdec2	equ	0xFDD
   921                           fsr2h	equ	0xFDA
   922                           fsr2l	equ	0xFD9
   923                           status	equ	0xFD8
   924                           
   925 ;; *************** function _isdigit *****************
   926 ;; Defined at:
   927 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  c               1    wreg     unsigned char 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  c               1   41[COMRAM] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;		None               void
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   941 ;;      Params:         0       0       0       0       0       0       0
   942 ;;      Locals:         2       0       0       0       0       0       0
   943 ;;      Temps:          1       0       0       0       0       0       0
   944 ;;      Totals:         3       0       0       0       0       0       0
   945 ;;Total ram usage:        3 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    2
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_sprintf
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text2
   956  000C68                     __ptext2:
   957                           	opt stack 0
   958  000C68                     _isdigit:
   959                           	opt stack 27
   960                           
   961                           ;incstack = 0
   962                           ;isdigit@c stored from wreg
   963  000C68  6E2A               	movwf	isdigit@c,c
   964  000C6A  0E00               	movlw	0
   965  000C6C  6E29               	movwf	_isdigit$502,c
   966  000C6E  0E3A               	movlw	58
   967  000C70  602A               	cpfslt	isdigit@c,c
   968  000C72  D005               	goto	l505
   969  000C74  0E2F               	movlw	47
   970  000C76  642A               	cpfsgt	isdigit@c,c
   971  000C78  D002               	goto	l505
   972  000C7A  0E01               	movlw	1
   973  000C7C  6E29               	movwf	_isdigit$502,c
   974  000C7E                     l505:
   975  000C7E  C029  F028         	movff	_isdigit$502,??_isdigit
   976  000C82  3028               	rrcf	??_isdigit,w,c
   977  000C84  0012               	return	
   978  000C86                     __end_of_isdigit:
   979                           	opt stack 0
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           prodh	equ	0xFF4
   985                           prodl	equ	0xFF3
   986                           intcon	equ	0xFF2
   987                           intcon2	equ	0xFF1
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           indf2	equ	0xFDF
   991                           postinc2	equ	0xFDE
   992                           postdec2	equ	0xFDD
   993                           fsr2h	equ	0xFDA
   994                           fsr2l	equ	0xFD9
   995                           status	equ	0xFD8
   996                           
   997 ;; *************** function ___wmul *****************
   998 ;; Defined at:
   999 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  multiplier      2   39[COMRAM] unsigned int 
  1002 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  product         2   43[COMRAM] unsigned int 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  2   39[COMRAM] unsigned int 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, status,0, prodl, prodh
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1014 ;;      Params:         4       0       0       0       0       0       0
  1015 ;;      Locals:         2       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0
  1017 ;;      Totals:         6       0       0       0       0       0       0
  1018 ;;Total ram usage:        6 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; Hardware stack levels required when called:    2
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_sprintf
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           	psect	text3
  1029  000C42                     __ptext3:
  1030                           	opt stack 0
  1031  000C42                     ___wmul:
  1032                           	opt stack 27
  1033                           
  1034                           ;incstack = 0
  1035  000C42  5028               	movf	___wmul@multiplier,w,c
  1036  000C44  022A               	mulwf	___wmul@multiplicand,c
  1037  000C46  CFF3 F02C          	movff	prodl,___wmul@product
  1038  000C4A  CFF4 F02D          	movff	prodh,___wmul@product+1
  1039  000C4E  5028               	movf	___wmul@multiplier,w,c
  1040  000C50  022B               	mulwf	___wmul@multiplicand+1,c
  1041  000C52  50F3               	movf	prodl,w,c
  1042  000C54  262D               	addwf	___wmul@product+1,f,c
  1043  000C56  5029               	movf	___wmul@multiplier+1,w,c
  1044  000C58  022A               	mulwf	___wmul@multiplicand,c
  1045  000C5A  50F3               	movf	prodl,w,c
  1046  000C5C  262D               	addwf	___wmul@product+1,f,c
  1047  000C5E  C02C  F028         	movff	___wmul@product,?___wmul
  1048  000C62  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1049  000C66  0012               	return	
  1050  000C68                     __end_of___wmul:
  1051                           	opt stack 0
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           prodh	equ	0xFF4
  1057                           prodl	equ	0xFF3
  1058                           intcon	equ	0xFF2
  1059                           intcon2	equ	0xFF1
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           indf2	equ	0xFDF
  1063                           postinc2	equ	0xFDE
  1064                           postdec2	equ	0xFDD
  1065                           fsr2h	equ	0xFDA
  1066                           fsr2l	equ	0xFD9
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function ___lwmod *****************
  1070 ;; Defined at:
  1071 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  dividend        2   46[COMRAM] unsigned int 
  1074 ;;  divisor         2   48[COMRAM] unsigned int 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  counter         1   50[COMRAM] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  2   46[COMRAM] unsigned int 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1086 ;;      Params:         4       0       0       0       0       0       0
  1087 ;;      Locals:         1       0       0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0
  1089 ;;      Totals:         5       0       0       0       0       0       0
  1090 ;;Total ram usage:        5 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    2
  1093 ;; This function calls:
  1094 ;;		Nothing
  1095 ;; This function is called by:
  1096 ;;		_sprintf
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text4
  1101  000B66                     __ptext4:
  1102                           	opt stack 0
  1103  000B66                     ___lwmod:
  1104                           	opt stack 27
  1105                           
  1106                           ;incstack = 0
  1107  000B66  5031               	movf	___lwmod@divisor,w,c
  1108  000B68  1032               	iorwf	___lwmod@divisor+1,w,c
  1109  000B6A  B4D8               	btfsc	status,2,c
  1110  000B6C  D018               	goto	l599
  1111  000B6E  0E01               	movlw	1
  1112  000B70  6E33               	movwf	___lwmod@counter,c
  1113  000B72  D004               	goto	l594
  1114  000B74  90D8               	bcf	status,0,c
  1115  000B76  3631               	rlcf	___lwmod@divisor,f,c
  1116  000B78  3632               	rlcf	___lwmod@divisor+1,f,c
  1117  000B7A  2A33               	incf	___lwmod@counter,f,c
  1118  000B7C                     l594:
  1119  000B7C  AE32               	btfss	___lwmod@divisor+1,7,c
  1120  000B7E  D7FA               	goto	l595
  1121  000B80                     u400:
  1122  000B80  5031               	movf	___lwmod@divisor,w,c
  1123  000B82  5C2F               	subwf	___lwmod@dividend,w,c
  1124  000B84  5032               	movf	___lwmod@divisor+1,w,c
  1125  000B86  5830               	subwfb	___lwmod@dividend+1,w,c
  1126  000B88  A0D8               	btfss	status,0,c
  1127  000B8A  D004               	goto	l598
  1128  000B8C  5031               	movf	___lwmod@divisor,w,c
  1129  000B8E  5E2F               	subwf	___lwmod@dividend,f,c
  1130  000B90  5032               	movf	___lwmod@divisor+1,w,c
  1131  000B92  5A30               	subwfb	___lwmod@dividend+1,f,c
  1132  000B94                     l598:
  1133  000B94  90D8               	bcf	status,0,c
  1134  000B96  3232               	rrcf	___lwmod@divisor+1,f,c
  1135  000B98  3231               	rrcf	___lwmod@divisor,f,c
  1136  000B9A  2E33               	decfsz	___lwmod@counter,f,c
  1137  000B9C  D7F1               	goto	u400
  1138  000B9E                     l599:
  1139  000B9E  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  1140  000BA2  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  1141  000BA6  0012               	return		;funcret
  1142  000BA8                     __end_of___lwmod:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           tblptrh	equ	0xFF7
  1146                           tblptrl	equ	0xFF6
  1147                           tablat	equ	0xFF5
  1148                           prodh	equ	0xFF4
  1149                           prodl	equ	0xFF3
  1150                           intcon	equ	0xFF2
  1151                           intcon2	equ	0xFF1
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           indf2	equ	0xFDF
  1155                           postinc2	equ	0xFDE
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           status	equ	0xFD8
  1160                           
  1161 ;; *************** function ___lwdiv *****************
  1162 ;; Defined at:
  1163 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  dividend        2   39[COMRAM] unsigned int 
  1166 ;;  divisor         2   41[COMRAM] unsigned int 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  quotient        2   43[COMRAM] unsigned int 
  1169 ;;  counter         1   45[COMRAM] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  2   39[COMRAM] unsigned int 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1179 ;;      Params:         4       0       0       0       0       0       0
  1180 ;;      Locals:         3       0       0       0       0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0
  1182 ;;      Totals:         7       0       0       0       0       0       0
  1183 ;;Total ram usage:        7 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    2
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_sprintf
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text5
  1194  000A32                     __ptext5:
  1195                           	opt stack 0
  1196  000A32                     ___lwdiv:
  1197                           	opt stack 27
  1198                           
  1199                           ;incstack = 0
  1200  000A32  0E00               	movlw	0
  1201  000A34  6E2D               	movwf	___lwdiv@quotient+1,c
  1202  000A36  0E00               	movlw	0
  1203  000A38  6E2C               	movwf	___lwdiv@quotient,c
  1204  000A3A  502A               	movf	___lwdiv@divisor,w,c
  1205  000A3C  102B               	iorwf	___lwdiv@divisor+1,w,c
  1206  000A3E  B4D8               	btfsc	status,2,c
  1207  000A40  D01C               	goto	l589
  1208  000A42  0E01               	movlw	1
  1209  000A44  6E2E               	movwf	___lwdiv@counter,c
  1210  000A46  D004               	goto	l584
  1211  000A48  90D8               	bcf	status,0,c
  1212  000A4A  362A               	rlcf	___lwdiv@divisor,f,c
  1213  000A4C  362B               	rlcf	___lwdiv@divisor+1,f,c
  1214  000A4E  2A2E               	incf	___lwdiv@counter,f,c
  1215  000A50                     l584:
  1216  000A50  AE2B               	btfss	___lwdiv@divisor+1,7,c
  1217  000A52  D7FA               	goto	l585
  1218  000A54                     u370:
  1219  000A54  90D8               	bcf	status,0,c
  1220  000A56  362C               	rlcf	___lwdiv@quotient,f,c
  1221  000A58  362D               	rlcf	___lwdiv@quotient+1,f,c
  1222  000A5A  502A               	movf	___lwdiv@divisor,w,c
  1223  000A5C  5C28               	subwf	___lwdiv@dividend,w,c
  1224  000A5E  502B               	movf	___lwdiv@divisor+1,w,c
  1225  000A60  5829               	subwfb	___lwdiv@dividend+1,w,c
  1226  000A62  A0D8               	btfss	status,0,c
  1227  000A64  D005               	goto	l588
  1228  000A66  502A               	movf	___lwdiv@divisor,w,c
  1229  000A68  5E28               	subwf	___lwdiv@dividend,f,c
  1230  000A6A  502B               	movf	___lwdiv@divisor+1,w,c
  1231  000A6C  5A29               	subwfb	___lwdiv@dividend+1,f,c
  1232  000A6E  802C               	bsf	___lwdiv@quotient,0,c
  1233  000A70                     l588:
  1234  000A70  90D8               	bcf	status,0,c
  1235  000A72  322B               	rrcf	___lwdiv@divisor+1,f,c
  1236  000A74  322A               	rrcf	___lwdiv@divisor,f,c
  1237  000A76  2E2E               	decfsz	___lwdiv@counter,f,c
  1238  000A78  D7ED               	goto	u370
  1239  000A7A                     l589:
  1240  000A7A  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  1241  000A7E  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1242  000A82  0012               	return		;funcret
  1243  000A84                     __end_of___lwdiv:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           prodh	equ	0xFF4
  1250                           prodl	equ	0xFF3
  1251                           intcon	equ	0xFF2
  1252                           intcon2	equ	0xFF1
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           indf2	equ	0xFDF
  1256                           postinc2	equ	0xFDE
  1257                           postdec2	equ	0xFDD
  1258                           fsr2h	equ	0xFDA
  1259                           fsr2l	equ	0xFD9
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _lcd_msg *****************
  1263 ;; Defined at:
  1264 ;;		line 99 in file "../MyLibs/lcd4a.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  c               2   43[COMRAM] PTR unsigned char 
  1267 ;;		 -> value(8), STR_1(16), 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1279 ;;      Params:         2       0       0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0
  1282 ;;      Totals:         2       0       0       0       0       0       0
  1283 ;;Total ram usage:        2 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    5
  1286 ;; This function calls:
  1287 ;;		_lcd_putc
  1288 ;; This function is called by:
  1289 ;;		_main
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text6
  1294  000A84                     __ptext6:
  1295                           	opt stack 0
  1296  000A84                     _lcd_msg:
  1297                           	opt stack 25
  1298                           
  1299                           ;lcd4a.c: 101: while(*c != 0)
  1300                           
  1301                           ;incstack = 0
  1302  000A84  D014               	goto	l103
  1303  000A86                     
  1304                           ;lcd4a.c: 102: {
  1305                           ;lcd4a.c: 103: lcd_putc(*c++);
  1306  000A86  C02C  FFF6         	movff	lcd_msg@c,tblptrl
  1307  000A8A  C02D  FFF7         	movff	lcd_msg@c+1,tblptrh
  1308  000A8E  6AF8               	clrf	tblptru,c
  1309  000A90  0E05               	movlw	(high __ramtop+-1)
  1310  000A92  64F7               	cpfsgt	tblptrh,c
  1311  000A94  D003               	bra	u427
  1312  000A96  0008               	tblrd		*
  1313  000A98  50F5               	movf	tablat,w,c
  1314  000A9A  D005               	bra	u420
  1315  000A9C                     u427:
  1316  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1317  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1318  000AA4  50EF               	movf	indf0,w,c
  1319  000AA6                     u420:
  1320  000AA6  ECD4  F005         	call	_lcd_putc
  1321  000AAA  4A2C               	infsnz	lcd_msg@c,f,c
  1322  000AAC  2A2D               	incf	lcd_msg@c+1,f,c
  1323  000AAE                     l103:
  1324  000AAE  C02C  FFF6         	movff	lcd_msg@c,tblptrl
  1325  000AB2  C02D  FFF7         	movff	lcd_msg@c+1,tblptrh
  1326  000AB6  6AF8               	clrf	tblptru,c
  1327  000AB8  0E05               	movlw	(high __ramtop+-1)
  1328  000ABA  64F7               	cpfsgt	tblptrh,c
  1329  000ABC  D003               	bra	u437
  1330  000ABE  0008               	tblrd		*
  1331  000AC0  50F5               	movf	tablat,w,c
  1332  000AC2  D005               	bra	u430
  1333  000AC4                     u437:
  1334  000AC4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1335  000AC8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1336  000ACC  50EF               	movf	indf0,w,c
  1337  000ACE                     u430:
  1338  000ACE  0900               	iorlw	0
  1339  000AD0  B4D8               	btfsc	status,2,c
  1340  000AD2  0012               	return	
  1341  000AD4  D7D8               	goto	l104
  1342  000AD6                     __end_of_lcd_msg:
  1343                           	opt stack 0
  1344                           tblptru	equ	0xFF8
  1345                           tblptrh	equ	0xFF7
  1346                           tblptrl	equ	0xFF6
  1347                           tablat	equ	0xFF5
  1348                           prodh	equ	0xFF4
  1349                           prodl	equ	0xFF3
  1350                           intcon	equ	0xFF2
  1351                           intcon2	equ	0xFF1
  1352                           indf0	equ	0xFEF
  1353                           postinc0	equ	0xFEE
  1354                           fsr0h	equ	0xFEA
  1355                           fsr0l	equ	0xFE9
  1356                           wreg	equ	0xFE8
  1357                           indf2	equ	0xFDF
  1358                           postinc2	equ	0xFDE
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _lcd_putc *****************
  1365 ;; Defined at:
  1366 ;;		line 64 in file "../MyLibs/lcd4a.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  c               1    wreg     unsigned char 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  c               1   42[COMRAM] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         0       0       0       0       0       0       0
  1381 ;;      Locals:         1       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0
  1383 ;;      Totals:         1       0       0       0       0       0       0
  1384 ;;Total ram usage:        1 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    4
  1387 ;; This function calls:
  1388 ;;		_lcd_cmd
  1389 ;;		_lcd_dwr
  1390 ;; This function is called by:
  1391 ;;		_lcd_msg
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text7
  1396  000BA8                     __ptext7:
  1397                           	opt stack 0
  1398  000BA8                     _lcd_putc:
  1399                           	opt stack 25
  1400                           
  1401                           ;incstack = 0
  1402                           ;lcd_putc@c stored from wreg
  1403  000BA8  6E2B               	movwf	lcd_putc@c,c
  1404                           
  1405                           ;lcd4a.c: 66: switch(c)
  1406  000BAA  D010               	goto	l91
  1407  000BAC                     
  1408                           ;lcd4a.c: 69: lcd_cmd(0x01);
  1409  000BAC  0E01               	movlw	1
  1410  000BAE  EC6B  F005         	call	_lcd_cmd
  1411                           
  1412                           ;lcd4a.c: 70: break;
  1413  000BB2  0012               	return	
  1414  000BB4                     
  1415                           ;lcd4a.c: 72: lcd_cmd(2);
  1416  000BB4  0E02               	movlw	2
  1417  000BB6  EC6B  F005         	call	_lcd_cmd
  1418                           
  1419                           ;lcd4a.c: 73: break;
  1420  000BBA  0012               	return	
  1421  000BBC                     
  1422                           ;lcd4a.c: 75: lcd_cmd(0x10);
  1423  000BBC  0E10               	movlw	16
  1424  000BBE  EC6B  F005         	call	_lcd_cmd
  1425                           
  1426                           ;lcd4a.c: 76: break;
  1427  000BC2  0012               	return	
  1428  000BC4                     
  1429                           ;lcd4a.c: 78: lcd_dwr(c);
  1430  000BC4  502B               	movf	lcd_putc@c,w,c
  1431  000BC6  EC90  F005         	call	_lcd_dwr
  1432                           
  1433                           ;lcd4a.c: 80: }
  1434                           
  1435                           ;lcd4a.c: 79: break;
  1436  000BCA  0012               	return	
  1437  000BCC                     l91:
  1438  000BCC  502B               	movf	lcd_putc@c,w,c
  1439                           
  1440                           ; Switch size 1, requested type "space"
  1441                           ; Number of cases is 3, Range of values is 8 to 12
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; simple_byte           10     6 (average)
  1445                           ;	Chosen strategy is simple_byte
  1446  000BCE  0A08               	xorlw	8	; case 8
  1447  000BD0  B4D8               	btfsc	status,2,c
  1448  000BD2  D7F4               	goto	l95
  1449  000BD4  0A02               	xorlw	2	; case 10
  1450  000BD6  B4D8               	btfsc	status,2,c
  1451  000BD8  D7ED               	goto	l94
  1452  000BDA  0A06               	xorlw	6	; case 12
  1453  000BDC  B4D8               	btfsc	status,2,c
  1454  000BDE  D7E6               	goto	l92
  1455  000BE0  D7F1               	goto	l96
  1456  000BE2                     __end_of_lcd_putc:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           prodh	equ	0xFF4
  1463                           prodl	equ	0xFF3
  1464                           intcon	equ	0xFF2
  1465                           intcon2	equ	0xFF1
  1466                           indf0	equ	0xFEF
  1467                           postinc0	equ	0xFEE
  1468                           fsr0h	equ	0xFEA
  1469                           fsr0l	equ	0xFE9
  1470                           wreg	equ	0xFE8
  1471                           indf2	equ	0xFDF
  1472                           postinc2	equ	0xFDE
  1473                           postdec2	equ	0xFDD
  1474                           fsr2h	equ	0xFDA
  1475                           fsr2l	equ	0xFD9
  1476                           status	equ	0xFD8
  1477                           
  1478 ;; *************** function _lcd_dwr *****************
  1479 ;; Defined at:
  1480 ;;		line 84 in file "../MyLibs/lcd4a.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  x               1    wreg     unsigned char 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  x               1   41[COMRAM] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1494 ;;      Params:         0       0       0       0       0       0       0
  1495 ;;      Locals:         1       0       0       0       0       0       0
  1496 ;;      Temps:          1       0       0       0       0       0       0
  1497 ;;      Totals:         2       0       0       0       0       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		_lcd_lat
  1503 ;;		_manda
  1504 ;; This function is called by:
  1505 ;;		_lcd_putc
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text8
  1510  000B20                     __ptext8:
  1511                           	opt stack 0
  1512  000B20                     _lcd_dwr:
  1513                           	opt stack 25
  1514                           
  1515                           ;incstack = 0
  1516                           ;lcd_dwr@x stored from wreg
  1517  000B20  6E2A               	movwf	lcd_dwr@x,c
  1518                           
  1519                           ;lcd4a.c: 86: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  1520  000B22  848C               	bsf	3980,2,c	;volatile
  1521                           
  1522                           ;lcd4a.c: 87: lcd &= 0x0F;
  1523  000B24  0E0F               	movlw	15
  1524  000B26  164B               	andwf	_lcd,f,c
  1525                           
  1526                           ;lcd4a.c: 88: lcd |= ((x & 0xF0));
  1527  000B28  502A               	movf	lcd_dwr@x,w,c
  1528  000B2A  0BF0               	andlw	240
  1529  000B2C  124B               	iorwf	_lcd,f,c
  1530                           
  1531                           ;lcd4a.c: 89: manda(lcd);
  1532  000B2E  504B               	movf	_lcd,w,c
  1533  000B30  EC0B  F006         	call	_manda
  1534                           
  1535                           ;lcd4a.c: 90: lcd_lat();
  1536  000B34  EC5D  F006         	call	_lcd_lat	;wreg free
  1537                           
  1538                           ;lcd4a.c: 91: _delay((unsigned long)((3)*(4000000/4000.0)));
  1539  000B38  0E04               	movlw	4
  1540  000B3A  6E29               	movwf	??_lcd_dwr& (0+255),c
  1541  000B3C  0EE4               	movlw	228
  1542  000B3E                     u617:
  1543  000B3E  2EE8               	decfsz	wreg,f,c
  1544  000B40  D7FE               	bra	u617
  1545  000B42  2E29               	decfsz	??_lcd_dwr& (0+255),f,c
  1546  000B44  D7FC               	bra	u617
  1547  000B46  D000               	nop2	
  1548                           
  1549                           ;lcd4a.c: 93: lcd &= 0x0F;
  1550  000B48  0E0F               	movlw	15
  1551  000B4A  164B               	andwf	_lcd,f,c
  1552                           
  1553                           ;lcd4a.c: 94: lcd |= ((x & 0x0F)<<4);
  1554  000B4C  C02A  F029         	movff	lcd_dwr@x,??_lcd_dwr
  1555  000B50  0E0F               	movlw	15
  1556  000B52  1629               	andwf	??_lcd_dwr,f,c
  1557  000B54  3829               	swapf	??_lcd_dwr,w,c
  1558  000B56  0BF0               	andlw	240
  1559  000B58  124B               	iorwf	_lcd,f,c
  1560                           
  1561                           ;lcd4a.c: 95: manda(lcd);
  1562  000B5A  504B               	movf	_lcd,w,c
  1563  000B5C  EC0B  F006         	call	_manda
  1564                           
  1565                           ;lcd4a.c: 96: lcd_lat();
  1566  000B60  EC5D  F006         	call	_lcd_lat	;wreg free
  1567  000B64  0012               	return		;funcret
  1568  000B66                     __end_of_lcd_dwr:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           prodh	equ	0xFF4
  1575                           prodl	equ	0xFF3
  1576                           intcon	equ	0xFF2
  1577                           intcon2	equ	0xFF1
  1578                           indf0	equ	0xFEF
  1579                           postinc0	equ	0xFEE
  1580                           fsr0h	equ	0xFEA
  1581                           fsr0l	equ	0xFE9
  1582                           wreg	equ	0xFE8
  1583                           indf2	equ	0xFDF
  1584                           postinc2	equ	0xFDE
  1585                           postdec2	equ	0xFDD
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _lcd_init *****************
  1591 ;; Defined at:
  1592 ;;		line 133 in file "../MyLibs/lcd4a.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1606 ;;      Params:         0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0
  1608 ;;      Temps:          1       0       0       0       0       0       0
  1609 ;;      Totals:         1       0       0       0       0       0       0
  1610 ;;Total ram usage:        1 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    4
  1613 ;; This function calls:
  1614 ;;		_lcd_cmd
  1615 ;;		_lcd_cmd_hf
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text9
  1622  000854                     __ptext9:
  1623                           	opt stack 0
  1624  000854                     _lcd_init:
  1625                           	opt stack 26
  1626                           
  1627                           ;lcd4a.c: 141: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  1628                           
  1629                           ;incstack = 0
  1630  000854  9E95               	bcf	3989,7,c	;volatile
  1631                           
  1632                           ;lcd4a.c: 142: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  1633  000856  9C95               	bcf	3989,6,c	;volatile
  1634                           
  1635                           ;lcd4a.c: 143: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  1636  000858  9A95               	bcf	3989,5,c	;volatile
  1637                           
  1638                           ;lcd4a.c: 144: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
  1639  00085A  9895               	bcf	3989,4,c	;volatile
  1640                           
  1641                           ;lcd4a.c: 145: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
  1642  00085C  9495               	bcf	3989,2,c	;volatile
  1643                           
  1644                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
  1645  00085E  9695               	bcf	3989,3,c	;volatile
  1646                           
  1647                           ;lcd4a.c: 151: lcd_cmd_hf(0x30);
  1648  000860  0E30               	movlw	48
  1649  000862  EC50  F006         	call	_lcd_cmd_hf
  1650                           
  1651                           ;lcd4a.c: 152: _delay((unsigned long)((15)*(4000000/4000.0)));
  1652  000866  0E14               	movlw	20
  1653  000868  6E2B               	movwf	??_lcd_init& (0+255),c
  1654  00086A  0E7A               	movlw	122
  1655  00086C                     u627:
  1656  00086C  2EE8               	decfsz	wreg,f,c
  1657  00086E  D7FE               	bra	u627
  1658  000870  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1659  000872  D7FC               	bra	u627
  1660                           
  1661                           ;lcd4a.c: 153: lcd_cmd_hf(0x30);
  1662  000874  0E30               	movlw	48
  1663  000876  EC50  F006         	call	_lcd_cmd_hf
  1664                           
  1665                           ;lcd4a.c: 154: _delay((unsigned long)((1)*(4000000/4000.0)));
  1666  00087A  0EC8               	movlw	200
  1667  00087C                     u637:
  1668  00087C  D000               	nop2	
  1669  00087E  2EE8               	decfsz	wreg,f,c
  1670  000880  D7FD               	bra	u637
  1671                           
  1672                           ;lcd4a.c: 155: lcd_cmd_hf(0x30);
  1673  000882  0E30               	movlw	48
  1674  000884  EC50  F006         	call	_lcd_cmd_hf
  1675                           
  1676                           ;lcd4a.c: 156: _delay((unsigned long)((15)*(4000000/4000.0)));
  1677  000888  0E14               	movlw	20
  1678  00088A  6E2B               	movwf	??_lcd_init& (0+255),c
  1679  00088C  0E7A               	movlw	122
  1680  00088E                     u647:
  1681  00088E  2EE8               	decfsz	wreg,f,c
  1682  000890  D7FE               	bra	u647
  1683  000892  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1684  000894  D7FC               	bra	u647
  1685                           
  1686                           ;lcd4a.c: 157: lcd_cmd_hf(0x20);
  1687  000896  0E20               	movlw	32
  1688  000898  EC50  F006         	call	_lcd_cmd_hf
  1689                           
  1690                           ;lcd4a.c: 158: _delay((unsigned long)((5)*(4000000/4000.0)));
  1691  00089C  0E07               	movlw	7
  1692  00089E  6E2B               	movwf	??_lcd_init& (0+255),c
  1693  0008A0  0E7D               	movlw	125
  1694  0008A2                     u657:
  1695  0008A2  2EE8               	decfsz	wreg,f,c
  1696  0008A4  D7FE               	bra	u657
  1697  0008A6  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1698  0008A8  D7FC               	bra	u657
  1699  0008AA  F000               	nop	
  1700                           
  1701                           ;lcd4a.c: 159: lcd_cmd(0x28);
  1702  0008AC  0E28               	movlw	40
  1703  0008AE  EC6B  F005         	call	_lcd_cmd
  1704                           
  1705                           ;lcd4a.c: 160: _delay((unsigned long)((5)*(4000000/4000.0)));
  1706  0008B2  0E07               	movlw	7
  1707  0008B4  6E2B               	movwf	??_lcd_init& (0+255),c
  1708  0008B6  0E7D               	movlw	125
  1709  0008B8                     u667:
  1710  0008B8  2EE8               	decfsz	wreg,f,c
  1711  0008BA  D7FE               	bra	u667
  1712  0008BC  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1713  0008BE  D7FC               	bra	u667
  1714  0008C0  F000               	nop	
  1715                           
  1716                           ;lcd4a.c: 161: lcd_cmd(0x0E);
  1717  0008C2  0E0E               	movlw	14
  1718  0008C4  EC6B  F005         	call	_lcd_cmd
  1719                           
  1720                           ;lcd4a.c: 162: _delay((unsigned long)((5)*(4000000/4000.0)));
  1721  0008C8  0E07               	movlw	7
  1722  0008CA  6E2B               	movwf	??_lcd_init& (0+255),c
  1723  0008CC  0E7D               	movlw	125
  1724  0008CE                     u677:
  1725  0008CE  2EE8               	decfsz	wreg,f,c
  1726  0008D0  D7FE               	bra	u677
  1727  0008D2  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1728  0008D4  D7FC               	bra	u677
  1729  0008D6  F000               	nop	
  1730                           
  1731                           ;lcd4a.c: 163: lcd_cmd(0x01);
  1732  0008D8  0E01               	movlw	1
  1733  0008DA  EC6B  F005         	call	_lcd_cmd
  1734                           
  1735                           ;lcd4a.c: 164: _delay((unsigned long)((5)*(4000000/4000.0)));
  1736  0008DE  0E07               	movlw	7
  1737  0008E0  6E2B               	movwf	??_lcd_init& (0+255),c
  1738  0008E2  0E7D               	movlw	125
  1739  0008E4                     u687:
  1740  0008E4  2EE8               	decfsz	wreg,f,c
  1741  0008E6  D7FE               	bra	u687
  1742  0008E8  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1743  0008EA  D7FC               	bra	u687
  1744  0008EC  F000               	nop	
  1745                           
  1746                           ;lcd4a.c: 165: lcd_cmd(0x06);
  1747  0008EE  0E06               	movlw	6
  1748  0008F0  EC6B  F005         	call	_lcd_cmd
  1749                           
  1750                           ;lcd4a.c: 166: _delay((unsigned long)((5)*(4000000/4000.0)));
  1751  0008F4  0E07               	movlw	7
  1752  0008F6  6E2B               	movwf	??_lcd_init& (0+255),c
  1753  0008F8  0E7D               	movlw	125
  1754  0008FA                     u697:
  1755  0008FA  2EE8               	decfsz	wreg,f,c
  1756  0008FC  D7FE               	bra	u697
  1757  0008FE  2E2B               	decfsz	??_lcd_init& (0+255),f,c
  1758  000900  D7FC               	bra	u697
  1759  000902  F000               	nop	
  1760                           
  1761                           ;lcd4a.c: 167: lcd_cmd(0x80);
  1762  000904  0E80               	movlw	128
  1763  000906  EC6B  F005         	call	_lcd_cmd
  1764  00090A  0012               	return		;funcret
  1765  00090C                     __end_of_lcd_init:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           prodh	equ	0xFF4
  1772                           prodl	equ	0xFF3
  1773                           intcon	equ	0xFF2
  1774                           intcon2	equ	0xFF1
  1775                           indf0	equ	0xFEF
  1776                           postinc0	equ	0xFEE
  1777                           fsr0h	equ	0xFEA
  1778                           fsr0l	equ	0xFE9
  1779                           wreg	equ	0xFE8
  1780                           indf2	equ	0xFDF
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _lcd_cmd_hf *****************
  1788 ;; Defined at:
  1789 ;;		line 54 in file "../MyLibs/lcd4a.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  x               1    wreg     unsigned char 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  x               1   40[COMRAM] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1803 ;;      Params:         0       0       0       0       0       0       0
  1804 ;;      Locals:         1       0       0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0
  1806 ;;      Totals:         1       0       0       0       0       0       0
  1807 ;;Total ram usage:        1 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    3
  1810 ;; This function calls:
  1811 ;;		_lcd_lat
  1812 ;;		_manda
  1813 ;; This function is called by:
  1814 ;;		_lcd_init
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text10
  1819  000CA0                     __ptext10:
  1820                           	opt stack 0
  1821  000CA0                     _lcd_cmd_hf:
  1822                           	opt stack 26
  1823                           
  1824                           ;incstack = 0
  1825                           ;lcd_cmd_hf@x stored from wreg
  1826  000CA0  6E29               	movwf	lcd_cmd_hf@x,c
  1827                           
  1828                           ;lcd4a.c: 56: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  1829  000CA2  948C               	bcf	3980,2,c	;volatile
  1830                           
  1831                           ;lcd4a.c: 57: lcd &= 0x0F;
  1832  000CA4  0E0F               	movlw	15
  1833  000CA6  164B               	andwf	_lcd,f,c
  1834                           
  1835                           ;lcd4a.c: 58: lcd |= (x & 0xF0);
  1836  000CA8  5029               	movf	lcd_cmd_hf@x,w,c
  1837  000CAA  0BF0               	andlw	240
  1838  000CAC  124B               	iorwf	_lcd,f,c
  1839                           
  1840                           ;lcd4a.c: 59: manda(lcd);
  1841  000CAE  504B               	movf	_lcd,w,c
  1842  000CB0  EC0B  F006         	call	_manda
  1843                           
  1844                           ;lcd4a.c: 60: lcd_lat();
  1845  000CB4  EC5D  F006         	call	_lcd_lat	;wreg free
  1846  000CB8  0012               	return		;funcret
  1847  000CBA                     __end_of_lcd_cmd_hf:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           intcon	equ	0xFF2
  1856                           intcon2	equ	0xFF1
  1857                           indf0	equ	0xFEF
  1858                           postinc0	equ	0xFEE
  1859                           fsr0h	equ	0xFEA
  1860                           fsr0l	equ	0xFE9
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           postinc2	equ	0xFDE
  1864                           postdec2	equ	0xFDD
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _lcd_gotoxy *****************
  1870 ;; Defined at:
  1871 ;;		line 112 in file "../MyLibs/lcd4a.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  x               1    wreg     unsigned char 
  1874 ;;  y               1   42[COMRAM] unsigned char 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  x               1   44[COMRAM] unsigned char 
  1877 ;;  ADDRESS         1   45[COMRAM] unsigned char 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1887 ;;      Params:         1       0       0       0       0       0       0
  1888 ;;      Locals:         2       0       0       0       0       0       0
  1889 ;;      Temps:          1       0       0       0       0       0       0
  1890 ;;      Totals:         4       0       0       0       0       0       0
  1891 ;;Total ram usage:        4 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    4
  1894 ;; This function calls:
  1895 ;;		_lcd_cmd
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text11
  1902  000BE2                     __ptext11:
  1903                           	opt stack 0
  1904  000BE2                     _lcd_gotoxy:
  1905                           	opt stack 26
  1906                           
  1907                           ;incstack = 0
  1908                           ;lcd_gotoxy@x stored from wreg
  1909  000BE2  6E2D               	movwf	lcd_gotoxy@x,c
  1910                           
  1911                           ;lcd4a.c: 114: unsigned char ADDRESS= 0x00U;
  1912  000BE4  0E00               	movlw	0
  1913  000BE6  6E2E               	movwf	lcd_gotoxy@ADDRESS,c
  1914                           
  1915                           ;lcd4a.c: 116: switch(y)
  1916  000BE8  D005               	goto	l109
  1917  000BEA                     
  1918                           ;lcd4a.c: 122: ADDRESS = 0xC0;
  1919  000BEA  0EC0               	movlw	192
  1920  000BEC  D001               	goto	L2
  1921  000BEE                     
  1922                           ;lcd4a.c: 125: ADDRESS = 0x80;
  1923  000BEE  0E80               	movlw	128
  1924  000BF0                     L2:
  1925  000BF0  6E2E               	movwf	lcd_gotoxy@ADDRESS,c
  1926                           
  1927                           ;lcd4a.c: 128: }
  1928                           
  1929                           ;lcd4a.c: 126: break;
  1930  000BF2  D008               	goto	l111
  1931  000BF4                     l109:
  1932  000BF4  502B               	movf	lcd_gotoxy@y,w,c
  1933                           
  1934                           ; Switch size 1, requested type "space"
  1935                           ; Number of cases is 2, Range of values is 1 to 2
  1936                           ; switch strategies available:
  1937                           ; Name         Instructions Cycles
  1938                           ; simple_byte            7     4 (average)
  1939                           ;	Chosen strategy is simple_byte
  1940  000BF6  0A01               	xorlw	1	; case 1
  1941  000BF8  B4D8               	btfsc	status,2,c
  1942  000BFA  D7F9               	goto	l113
  1943  000BFC  0A03               	xorlw	3	; case 2
  1944  000BFE  B4D8               	btfsc	status,2,c
  1945  000C00  D7F4               	goto	l112
  1946  000C02  D7F5               	goto	l113
  1947  000C04                     l111:
  1948                           
  1949                           ;lcd4a.c: 129: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  1950  000C04  502E               	movf	lcd_gotoxy@ADDRESS,w,c
  1951  000C06  242D               	addwf	lcd_gotoxy@x,w,c
  1952  000C08  6E2C               	movwf	??_lcd_gotoxy& (0+255),c
  1953  000C0A  042C               	decf	??_lcd_gotoxy,w,c
  1954  000C0C  6E2E               	movwf	lcd_gotoxy@ADDRESS,c
  1955                           
  1956                           ;lcd4a.c: 130: lcd_cmd(ADDRESS);
  1957  000C0E  502E               	movf	lcd_gotoxy@ADDRESS,w,c
  1958  000C10  EC6B  F005         	call	_lcd_cmd
  1959  000C14  0012               	return		;funcret
  1960  000C16                     __end_of_lcd_gotoxy:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           prodh	equ	0xFF4
  1967                           prodl	equ	0xFF3
  1968                           intcon	equ	0xFF2
  1969                           intcon2	equ	0xFF1
  1970                           indf0	equ	0xFEF
  1971                           postinc0	equ	0xFEE
  1972                           fsr0h	equ	0xFEA
  1973                           fsr0l	equ	0xFE9
  1974                           wreg	equ	0xFE8
  1975                           indf2	equ	0xFDF
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _lcd_cmd *****************
  1983 ;; Defined at:
  1984 ;;		line 38 in file "../MyLibs/lcd4a.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  x               1    wreg     unsigned char 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  x               1   41[COMRAM] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         0       0       0       0       0       0       0
  1999 ;;      Locals:         1       0       0       0       0       0       0
  2000 ;;      Temps:          1       0       0       0       0       0       0
  2001 ;;      Totals:         2       0       0       0       0       0       0
  2002 ;;Total ram usage:        2 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    3
  2005 ;; This function calls:
  2006 ;;		_lcd_lat
  2007 ;;		_manda
  2008 ;; This function is called by:
  2009 ;;		_lcd_putc
  2010 ;;		_lcd_gotoxy
  2011 ;;		_lcd_init
  2012 ;;		_lcd_setcursor_vb
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text12
  2017  000AD6                     __ptext12:
  2018                           	opt stack 0
  2019  000AD6                     _lcd_cmd:
  2020                           	opt stack 25
  2021                           
  2022                           ;incstack = 0
  2023                           ;lcd_cmd@x stored from wreg
  2024  000AD6  6E2A               	movwf	lcd_cmd@x,c
  2025                           
  2026                           ;lcd4a.c: 40: lcd = 0;
  2027  000AD8  0E00               	movlw	0
  2028  000ADA  6E4B               	movwf	_lcd,c
  2029                           
  2030                           ;lcd4a.c: 41: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  2031  000ADC  948C               	bcf	3980,2,c	;volatile
  2032                           
  2033                           ;lcd4a.c: 42: lcd &= 0x0F;
  2034  000ADE  0E0F               	movlw	15
  2035  000AE0  164B               	andwf	_lcd,f,c
  2036                           
  2037                           ;lcd4a.c: 43: lcd |= (x & 0xF0);
  2038  000AE2  502A               	movf	lcd_cmd@x,w,c
  2039  000AE4  0BF0               	andlw	240
  2040  000AE6  124B               	iorwf	_lcd,f,c
  2041                           
  2042                           ;lcd4a.c: 44: manda(lcd);
  2043  000AE8  504B               	movf	_lcd,w,c
  2044  000AEA  EC0B  F006         	call	_manda
  2045                           
  2046                           ;lcd4a.c: 45: lcd_lat();
  2047  000AEE  EC5D  F006         	call	_lcd_lat	;wreg free
  2048                           
  2049                           ;lcd4a.c: 46: _delay((unsigned long)((3)*(4000000/4000.0)));
  2050  000AF2  0E04               	movlw	4
  2051  000AF4  6E29               	movwf	??_lcd_cmd& (0+255),c
  2052  000AF6  0EE4               	movlw	228
  2053  000AF8                     u707:
  2054  000AF8  2EE8               	decfsz	wreg,f,c
  2055  000AFA  D7FE               	bra	u707
  2056  000AFC  2E29               	decfsz	??_lcd_cmd& (0+255),f,c
  2057  000AFE  D7FC               	bra	u707
  2058  000B00  D000               	nop2	
  2059                           
  2060                           ;lcd4a.c: 48: lcd &= 0x0F;
  2061  000B02  0E0F               	movlw	15
  2062  000B04  164B               	andwf	_lcd,f,c
  2063                           
  2064                           ;lcd4a.c: 49: lcd |= ((x & 0x0F)<<4);
  2065  000B06  C02A  F029         	movff	lcd_cmd@x,??_lcd_cmd
  2066  000B0A  0E0F               	movlw	15
  2067  000B0C  1629               	andwf	??_lcd_cmd,f,c
  2068  000B0E  3829               	swapf	??_lcd_cmd,w,c
  2069  000B10  0BF0               	andlw	240
  2070  000B12  124B               	iorwf	_lcd,f,c
  2071                           
  2072                           ;lcd4a.c: 50: manda(lcd);
  2073  000B14  504B               	movf	_lcd,w,c
  2074  000B16  EC0B  F006         	call	_manda
  2075                           
  2076                           ;lcd4a.c: 51: lcd_lat();
  2077  000B1A  EC5D  F006         	call	_lcd_lat	;wreg free
  2078  000B1E  0012               	return		;funcret
  2079  000B20                     __end_of_lcd_cmd:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           intcon2	equ	0xFF1
  2089                           indf0	equ	0xFEF
  2090                           postinc0	equ	0xFEE
  2091                           fsr0h	equ	0xFEA
  2092                           fsr0l	equ	0xFE9
  2093                           wreg	equ	0xFE8
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           postdec2	equ	0xFDD
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _manda *****************
  2102 ;; Defined at:
  2103 ;;		line 171 in file "../MyLibs/lcd4a.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  dato            1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  dato            1   39[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2117 ;;      Params:         0       0       0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    2
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_lcd_cmd
  2128 ;;		_lcd_cmd_hf
  2129 ;;		_lcd_dwr
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text13
  2134  000C16                     __ptext13:
  2135                           	opt stack 0
  2136  000C16                     _manda:
  2137                           	opt stack 25
  2138                           
  2139                           ;incstack = 0
  2140                           ;manda@dato stored from wreg
  2141  000C16  6E28               	movwf	manda@dato,c
  2142                           
  2143                           ;lcd4a.c: 173: if(dato & (1 << 4)) (*(&(*(&PORTD + 0x09))) |= (1<<(4)));
  2144  000C18  A828               	btfss	manda@dato,4,c
  2145  000C1A  D002               	goto	l120
  2146  000C1C  888C               	bsf	3980,4,c	;volatile
  2147  000C1E  D001               	goto	l121
  2148  000C20                     l120:
  2149                           
  2150                           ;lcd4a.c: 174: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(4)));
  2151  000C20  988C               	bcf	3980,4,c	;volatile
  2152  000C22                     l121:
  2153                           
  2154                           ;lcd4a.c: 175: if(dato & (1 << 5)) (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  2155  000C22  AA28               	btfss	manda@dato,5,c
  2156  000C24  D002               	goto	l122
  2157  000C26  8A8C               	bsf	3980,5,c	;volatile
  2158  000C28  D001               	goto	l123
  2159  000C2A                     l122:
  2160                           
  2161                           ;lcd4a.c: 176: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  2162  000C2A  9A8C               	bcf	3980,5,c	;volatile
  2163  000C2C                     l123:
  2164                           
  2165                           ;lcd4a.c: 177: if(dato & (1 << 6)) (*(&(*(&PORTD + 0x09))) |= (1<<(6)));
  2166  000C2C  AC28               	btfss	manda@dato,6,c
  2167  000C2E  D002               	goto	l124
  2168  000C30  8C8C               	bsf	3980,6,c	;volatile
  2169  000C32  D001               	goto	l125
  2170  000C34                     l124:
  2171                           
  2172                           ;lcd4a.c: 178: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  2173  000C34  9C8C               	bcf	3980,6,c	;volatile
  2174  000C36                     l125:
  2175                           
  2176                           ;lcd4a.c: 179: if(dato & (1 << 7)) (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  2177  000C36  AE28               	btfss	manda@dato,7,c
  2178  000C38  D002               	goto	l126
  2179  000C3A  8E8C               	bsf	3980,7,c	;volatile
  2180  000C3C  0012               	return	
  2181  000C3E                     l126:
  2182                           
  2183                           ;lcd4a.c: 180: else (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  2184  000C3E  9E8C               	bcf	3980,7,c	;volatile
  2185  000C40  0012               	return	
  2186  000C42                     __end_of_manda:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           intcon2	equ	0xFF1
  2196                           indf0	equ	0xFEF
  2197                           postinc0	equ	0xFEE
  2198                           fsr0h	equ	0xFEA
  2199                           fsr0l	equ	0xFE9
  2200                           wreg	equ	0xFE8
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           fsr2h	equ	0xFDA
  2205                           fsr2l	equ	0xFD9
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _lcd_lat *****************
  2209 ;; Defined at:
  2210 ;;		line 27 in file "../MyLibs/lcd4a.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2224 ;;      Params:         0       0       0       0       0       0       0
  2225 ;;      Locals:         0       0       0       0       0       0       0
  2226 ;;      Temps:          1       0       0       0       0       0       0
  2227 ;;      Totals:         1       0       0       0       0       0       0
  2228 ;;Total ram usage:        1 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    2
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_lcd_cmd
  2235 ;;		_lcd_cmd_hf
  2236 ;;		_lcd_dwr
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text14
  2241  000CBA                     __ptext14:
  2242                           	opt stack 0
  2243  000CBA                     _lcd_lat:
  2244                           	opt stack 25
  2245                           
  2246                           ;lcd4a.c: 31: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  2247                           
  2248                           ;incstack = 0
  2249  000CBA  868C               	bsf	3980,3,c	;volatile
  2250                           
  2251                           ;lcd4a.c: 33: _delay((unsigned long)((2)*(4000000/4000.0)));
  2252  000CBC  0E03               	movlw	3
  2253  000CBE  6E28               	movwf	??_lcd_lat& (0+255),c
  2254  000CC0  0E98               	movlw	152
  2255  000CC2                     u717:
  2256  000CC2  2EE8               	decfsz	wreg,f,c
  2257  000CC4  D7FE               	bra	u717
  2258  000CC6  2E28               	decfsz	??_lcd_lat& (0+255),f,c
  2259  000CC8  D7FC               	bra	u717
  2260                           
  2261                           ;lcd4a.c: 34: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  2262  000CCA  968C               	bcf	3980,3,c	;volatile
  2263  000CCC  0012               	return		;funcret
  2264  000CCE                     __end_of_lcd_lat:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           intcon2	equ	0xFF1
  2274                           indf0	equ	0xFEF
  2275                           postinc0	equ	0xFEE
  2276                           fsr0h	equ	0xFEA
  2277                           fsr0l	equ	0xFE9
  2278                           wreg	equ	0xFE8
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _low_isr *****************
  2287 ;; Defined at:
  2288 ;;		line 62 in file "enc1.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		None
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2302 ;;      Params:         0       0       0       0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0
  2304 ;;      Temps:         21       0       0       0       0       0       0
  2305 ;;      Totals:        21       0       0       0       0       0       0
  2306 ;;Total ram usage:       21 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    1
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		Interrupt level 1
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	intcodelo
  2317  000018                     __pintcodelo:
  2318                           	opt stack 0
  2319  000018                     _low_isr:
  2320                           	opt stack 25
  2321                           
  2322                           ;incstack = 0
  2323  000018  8054               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2324  00001A  CFD8 F013          	movff	status,??_low_isr
  2325  00001E  CFE8 F014          	movff	wreg,??_low_isr+1
  2326  000022  CFE0 F015          	movff	bsr,??_low_isr+2
  2327  000026  CFFA F016          	movff	pclath,??_low_isr+3
  2328  00002A  CFFB F017          	movff	pclatu,??_low_isr+4
  2329  00002E  CFE9 F018          	movff	fsr0l,??_low_isr+5
  2330  000032  CFEA F019          	movff	fsr0h,??_low_isr+6
  2331  000036  CFE1 F01A          	movff	fsr1l,??_low_isr+7
  2332  00003A  CFE2 F01B          	movff	fsr1h,??_low_isr+8
  2333  00003E  CFD9 F01C          	movff	fsr2l,??_low_isr+9
  2334  000042  CFDA F01D          	movff	fsr2h,??_low_isr+10
  2335  000046  CFF3 F01E          	movff	prodl,??_low_isr+11
  2336  00004A  CFF4 F01F          	movff	prodh,??_low_isr+12
  2337  00004E  CFF6 F020          	movff	tblptrl,??_low_isr+13
  2338  000052  CFF7 F021          	movff	tblptrh,??_low_isr+14
  2339  000056  CFF8 F022          	movff	tblptru,??_low_isr+15
  2340  00005A  CFF5 F023          	movff	tablat,??_low_isr+16
  2341  00005E  C054  F024         	movff	btemp,??_low_isr+17
  2342  000062  C055  F025         	movff	btemp+1,??_low_isr+18
  2343  000066  C056  F026         	movff	btemp+2,??_low_isr+19
  2344  00006A  C057  F027         	movff	btemp+3,??_low_isr+20
  2345                           
  2346                           ;enc1.c: 64: if(PIR1bits.TMR1IF == 1)
  2347  00006E  B09E               	btfsc	3998,0,c	;volatile
  2348                           
  2349                           ;enc1.c: 65: {
  2350                           ;enc1.c: 68: TMR1IF = 0;
  2351  000070  909E               	bcf	3998,0,c	;volatile
  2352                           
  2353                           ;enc1.c: 69: return;
  2354  000072  C027  F057         	movff	??_low_isr+20,btemp+3
  2355  000076  C026  F056         	movff	??_low_isr+19,btemp+2
  2356  00007A  C025  F055         	movff	??_low_isr+18,btemp+1
  2357  00007E  C024  F054         	movff	??_low_isr+17,btemp
  2358  000082  C023  FFF5         	movff	??_low_isr+16,tablat
  2359  000086  C022  FFF8         	movff	??_low_isr+15,tblptru
  2360  00008A  C021  FFF7         	movff	??_low_isr+14,tblptrh
  2361  00008E  C020  FFF6         	movff	??_low_isr+13,tblptrl
  2362  000092  C01F  FFF4         	movff	??_low_isr+12,prodh
  2363  000096  C01E  FFF3         	movff	??_low_isr+11,prodl
  2364  00009A  C01D  FFDA         	movff	??_low_isr+10,fsr2h
  2365  00009E  C01C  FFD9         	movff	??_low_isr+9,fsr2l
  2366  0000A2  C01B  FFE2         	movff	??_low_isr+8,fsr1h
  2367  0000A6  C01A  FFE1         	movff	??_low_isr+7,fsr1l
  2368  0000AA  C019  FFEA         	movff	??_low_isr+6,fsr0h
  2369  0000AE  C018  FFE9         	movff	??_low_isr+5,fsr0l
  2370  0000B2  C017  FFFB         	movff	??_low_isr+4,pclatu
  2371  0000B6  C016  FFFA         	movff	??_low_isr+3,pclath
  2372  0000BA  C015  FFE0         	movff	??_low_isr+2,bsr
  2373  0000BE  C014  FFE8         	movff	??_low_isr+1,wreg
  2374  0000C2  C013  FFD8         	movff	??_low_isr,status
  2375  0000C6  9054               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2376  0000C8  0010               	retfie	
  2377  0000CA                     __end_of_low_isr:
  2378                           	opt stack 0
  2379                           pclatu	equ	0xFFB
  2380                           pclath	equ	0xFFA
  2381                           tblptru	equ	0xFF8
  2382                           tblptrh	equ	0xFF7
  2383                           tblptrl	equ	0xFF6
  2384                           tablat	equ	0xFF5
  2385                           prodh	equ	0xFF4
  2386                           prodl	equ	0xFF3
  2387                           intcon	equ	0xFF2
  2388                           intcon2	equ	0xFF1
  2389                           indf0	equ	0xFEF
  2390                           postinc0	equ	0xFEE
  2391                           fsr0h	equ	0xFEA
  2392                           fsr0l	equ	0xFE9
  2393                           wreg	equ	0xFE8
  2394                           fsr1h	equ	0xFE2
  2395                           fsr1l	equ	0xFE1
  2396                           bsr	equ	0xFE0
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _high_isr *****************
  2405 ;; Defined at:
  2406 ;;		line 74 in file "enc1.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2420 ;;      Params:         0       0       0       0       0       0       0
  2421 ;;      Locals:         0       0       0       0       0       0       0
  2422 ;;      Temps:         18       0       0       0       0       0       0
  2423 ;;      Totals:        18       0       0       0       0       0       0
  2424 ;;Total ram usage:       18 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		Interrupt level 2
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	intcode
  2434  000008                     __pintcode:
  2435                           	opt stack 0
  2436  000008                     _high_isr:
  2437                           	opt stack 25
  2438                           
  2439                           ;incstack = 0
  2440  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2441  00000A  ED86  F004         	call	int_func,f	;refresh shadow registers
  2442                           pclatu	equ	0xFFB
  2443                           pclath	equ	0xFFA
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           prodh	equ	0xFF4
  2449                           prodl	equ	0xFF3
  2450                           intcon	equ	0xFF2
  2451                           intcon2	equ	0xFF1
  2452                           indf0	equ	0xFEF
  2453                           postinc0	equ	0xFEE
  2454                           fsr0h	equ	0xFEA
  2455                           fsr0l	equ	0xFE9
  2456                           wreg	equ	0xFE8
  2457                           fsr1h	equ	0xFE2
  2458                           fsr1l	equ	0xFE1
  2459                           bsr	equ	0xFE0
  2460                           indf2	equ	0xFDF
  2461                           postinc2	equ	0xFDE
  2462                           postdec2	equ	0xFDD
  2463                           fsr2h	equ	0xFDA
  2464                           fsr2l	equ	0xFD9
  2465                           status	equ	0xFD8
  2466                           
  2467                           	psect	intcode_body
  2468  00090C                     __pintcode_body:
  2469                           	opt stack 25
  2470  00090C                     int_func:
  2471                           	opt stack 25
  2472  00090C  0006               	pop		; remove dummy address from shadow register refresh
  2473  00090E  CFFA F001          	movff	pclath,??_high_isr
  2474  000912  CFFB F002          	movff	pclatu,??_high_isr+1
  2475  000916  CFE9 F003          	movff	fsr0l,??_high_isr+2
  2476  00091A  CFEA F004          	movff	fsr0h,??_high_isr+3
  2477  00091E  CFE1 F005          	movff	fsr1l,??_high_isr+4
  2478  000922  CFE2 F006          	movff	fsr1h,??_high_isr+5
  2479  000926  CFD9 F007          	movff	fsr2l,??_high_isr+6
  2480  00092A  CFDA F008          	movff	fsr2h,??_high_isr+7
  2481  00092E  CFF3 F009          	movff	prodl,??_high_isr+8
  2482  000932  CFF4 F00A          	movff	prodh,??_high_isr+9
  2483  000936  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  2484  00093A  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  2485  00093E  CFF8 F00D          	movff	tblptru,??_high_isr+12
  2486  000942  CFF5 F00E          	movff	tablat,??_high_isr+13
  2487  000946  C054  F00F         	movff	btemp,??_high_isr+14
  2488  00094A  C055  F010         	movff	btemp+1,??_high_isr+15
  2489  00094E  C056  F011         	movff	btemp+2,??_high_isr+16
  2490  000952  C057  F012         	movff	btemp+3,??_high_isr+17
  2491                           
  2492                           ;enc1.c: 76: if(INT0IF == 1)
  2493  000956  A2F2               	btfss	intcon,1,c	;volatile
  2494  000958  D003               	goto	i2l1112
  2495                           
  2496                           ;enc1.c: 77: {
  2497                           ;enc1.c: 78: cont++;
  2498  00095A  4A49               	infsnz	_cont,f,c	;volatile
  2499  00095C  2A4A               	incf	_cont+1,f,c	;volatile
  2500                           
  2501                           ;enc1.c: 80: INT0IF = 0;
  2502  00095E  92F2               	bcf	intcon,1,c	;volatile
  2503  000960                     i2l1112:
  2504                           
  2505                           ;enc1.c: 85: {
  2506                           
  2507                           ;enc1.c: 82: }
  2508                           ;enc1.c: 84: if(TMR1IF == 1)
  2509                           
  2510                           ;enc1.c: 81: return;
  2511  000960  C012  F057         	movff	??_high_isr+17,btemp+3
  2512  000964  C011  F056         	movff	??_high_isr+16,btemp+2
  2513  000968  C010  F055         	movff	??_high_isr+15,btemp+1
  2514  00096C  C00F  F054         	movff	??_high_isr+14,btemp
  2515  000970  C00E  FFF5         	movff	??_high_isr+13,tablat
  2516  000974  C00D  FFF8         	movff	??_high_isr+12,tblptru
  2517  000978  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  2518  00097C  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  2519  000980  C00A  FFF4         	movff	??_high_isr+9,prodh
  2520  000984  C009  FFF3         	movff	??_high_isr+8,prodl
  2521  000988  C008  FFDA         	movff	??_high_isr+7,fsr2h
  2522  00098C  C007  FFD9         	movff	??_high_isr+6,fsr2l
  2523  000990  C006  FFE2         	movff	??_high_isr+5,fsr1h
  2524  000994  C005  FFE1         	movff	??_high_isr+4,fsr1l
  2525  000998  C004  FFEA         	movff	??_high_isr+3,fsr0h
  2526  00099C  C003  FFE9         	movff	??_high_isr+2,fsr0l
  2527  0009A0  C002  FFFB         	movff	??_high_isr+1,pclatu
  2528  0009A4  C001  FFFA         	movff	??_high_isr,pclath
  2529  0009A8  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2530  0009AA  0011               	retfie		f
  2531  0009AC                     __end_of_high_isr:
  2532                           	opt stack 0
  2533                           pclatu	equ	0xFFB
  2534                           pclath	equ	0xFFA
  2535                           tblptru	equ	0xFF8
  2536                           tblptrh	equ	0xFF7
  2537                           tblptrl	equ	0xFF6
  2538                           tablat	equ	0xFF5
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           intcon2	equ	0xFF1
  2543                           indf0	equ	0xFEF
  2544                           postinc0	equ	0xFEE
  2545                           fsr0h	equ	0xFEA
  2546                           fsr0l	equ	0xFE9
  2547                           wreg	equ	0xFE8
  2548                           fsr1h	equ	0xFE2
  2549                           fsr1l	equ	0xFE1
  2550                           bsr	equ	0xFE0
  2551                           indf2	equ	0xFDF
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           pclatu	equ	0xFFB
  2558                           pclath	equ	0xFFA
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           intcon2	equ	0xFF1
  2567                           indf0	equ	0xFEF
  2568                           postinc0	equ	0xFEE
  2569                           fsr0h	equ	0xFEA
  2570                           fsr0l	equ	0xFE9
  2571                           wreg	equ	0xFE8
  2572                           fsr1h	equ	0xFE2
  2573                           fsr1l	equ	0xFE1
  2574                           bsr	equ	0xFE0
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582                           	psect	rparam
  2583  0000                     pclatu	equ	0xFFB
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           intcon	equ	0xFF2
  2592                           intcon2	equ	0xFF1
  2593                           indf0	equ	0xFEF
  2594                           postinc0	equ	0xFEE
  2595                           fsr0h	equ	0xFEA
  2596                           fsr0l	equ	0xFE9
  2597                           wreg	equ	0xFE8
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           bsr	equ	0xFE0
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608                           	psect	temp
  2609  000054                     btemp:
  2610                           	opt stack 0
  2611  000054                     	ds	1
  2612  0000                     int$flags	set	btemp
  2613  0000                     wtemp6	set	btemp+1
  2614                           pclatu	equ	0xFFB
  2615                           pclath	equ	0xFFA
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           intcon2	equ	0xFF1
  2624                           indf0	equ	0xFEF
  2625                           postinc0	equ	0xFEE
  2626                           fsr0h	equ	0xFEA
  2627                           fsr0l	equ	0xFE9
  2628                           wreg	equ	0xFE8
  2629                           fsr1h	equ	0xFE2
  2630                           fsr1l	equ	0xFE1
  2631                           bsr	equ	0xFE0
  2632                           indf2	equ	0xFDF
  2633                           postinc2	equ	0xFDE
  2634                           postdec2	equ	0xFDD
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      83
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 16
		 -> value(COMRAM[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2737
                                             70 COMRAM     2     2      0
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    1906
                                             51 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             39 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2     407
                                             43 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     210
                                             42 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0      90
                                             40 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     165
                                             42 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0      75
                                             40 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     259
                                             42 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0      90
                                             40 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      60
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      53       1       65.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53      15        0.0%
DATA                 0      0      53       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 31 04:34:15 2018

            lcd_cmd_hf@x 0029                       l66 09E6                       l91 0BCC  
                     l92 0BAC                       l94 0BB4                       l95 0BBC  
                     l96 0BC4                       bsr 000FE0      ___wmul@multiplicand 002A  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$XT 000000  
                    l111 0C04                      l103 0AAE                      l120 0C20  
                    l112 0BEA                      l104 0A86                      l121 0C22  
                    l113 0BEE                      l122 0C2A                      l123 0C2C  
                    l124 0C34                      l125 0C36                      l109 0BF4  
                    l126 0C3E                      l151 066C                      l160 0716  
                    l153 06C8                      l170 07CE                      l171 0826  
                    l172 07D4                      l164 0760                      l148 062A  
                    l165 0784                      l149 0644                      l166 078C  
                    l158 06EE                      l505 0C7E                      l584 0A50  
                    l585 0A48                      l594 0B7C                      l595 0B74  
                    l588 0A70                      l589 0A7A                      l598 0B94  
                    l599 0B9E             __CFG_CPB$OFF 000000                      u400 0B80  
                    u420 0AA6                      u430 0ACE                      u510 0746  
                    u370 0A54             __CFG_CPD$OFF 000000                      u427 0A9C  
                    u437 0AC4                      u550 0794                      u607 09F0  
                    u560 07B2                      u617 0B3E                      u707 0AF8  
                    u627 086C                      u580 082E                      u717 0CC2  
                    u637 087C                      u590 0846                      u647 088E  
                    u657 08A2                      u667 08B8                      u677 08CE  
                    u687 08E4                      u697 08FA                      _lcd 004B  
                    wreg 000FE8              lcd_gotoxy@x 002D              lcd_gotoxy@y 002B  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1270 071A  
                   STR_1 060B                     STR_2 061B                     _GIEH 007F97  
                   _GIEL 007F96                     _IPEN 007E87             __CFG_PWRT$ON 000000  
                   _cont 0049                     _main 09AC                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0054                     prodh 000FF4  
                   prodl 000FF3                     start 00CA            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0001  
        __end_of___lwdiv 0A84          __end_of___lwmod 0BA8                    _PORTB 000F81  
                  _PORTD 000F83                    _TRISB 000F93            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0B20  
        __end_of_lcd_lat 0CCE          __end_of_lcd_dwr 0B66          __end_of_lcd_msg 0AD6  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 060B                    _manda 0C16  
        __end_of_isdigit 0C86                    _value 004C          __end_of_low_isr 00CA  
         __CFG_BOREN$OFF 000000                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8                    wtemp6 0055          __end_of_sprintf 0854  
        __initialization 0C86             __end_of_main 0A32                   ??_main 0047  
          __activetblptr 000002                   ?_manda 0001                   _INT0IE 007F94  
                 _INT0IF 007F91                   i2l1112 0960                   _TMR1IF 007CF0  
                 _TMR1CS 007E69                   _TMR1IP 007CF8                   _TMR1ON 007E68  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 090C         __end_of_high_isr 09AC  
       __end_of_lcd_putc 0BE2                   ___wmul 0C42           __CFG_STVREN$ON 000000  
              ??___lwdiv 002C                ??___lwmod 0033                   clear_0 0C8C  
              ??_lcd_cmd 0029                ??_lcd_lat 0028                ??_lcd_dwr 0029  
              ??_lcd_msg 002E                ??_isdigit 0028             __mediumconst 0000  
              ??_low_isr 0013                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8        lcd_gotoxy@ADDRESS 002E                ??_sprintf 003A  
             __accesstop 0080  __end_of__initialization 0C92          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_manda 0C42  
                ??_manda 0028             sprintf@width 0044       __CFG_CCP2MX$PORTBE 000000  
                ?___wmul 0028                  _T1CKPS0 007E6C                  _T1CKPS1 007E6D  
                _INTEDG0 007F8E               _lcd_cmd_hf 0CA0               _lcd_gotoxy 0BE2  
              ?_lcd_init 0001                ?_high_isr 0001                ?_lcd_putc 0001  
                __Hparam 0000                  __Lparam 0000          __size_of___wmul 0026  
                ___lwdiv 0A32                  ___lwmod 0B66             __psmallconst 0600  
                __pcinit 0C86                  __ramtop 0600                  __ptext0 09AC  
                __ptext1 0620                  __ptext2 0C68                  __ptext3 0C42  
                __ptext4 0B66                  __ptext5 0A32                  __ptext6 0A84  
                __ptext7 0BA8                  __ptext8 0B20                  __ptext9 0854  
                _lcd_cmd 0AD6                  _lcd_lat 0CBA                  _lcd_dwr 0B20  
                _lcd_msg 0A84                _T1CONbits 000FCD                  _dpowers 0601  
                _isdigit 0C68                  _low_isr 0018                  _sprintf 0620  
             ??_lcd_init 002B               ??_high_isr 0001           __pintcode_body 090C  
             ??_lcd_putc 002B     end_of_initialization 0C92            __Lmediumconst 0000  
                int_func 090C                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE              ?_lcd_cmd_hf 0001              ?_lcd_gotoxy 002B  
         __end_of___wmul 0C68      start_initialization 0C86      __size_of_lcd_cmd_hf 001A  
    __size_of_lcd_gotoxy 0034                 ??___wmul 002C         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0049        __size_of_lcd_init 00B8        __size_of_high_isr 09A4  
            sprintf@flag 0041        __size_of_lcd_putc 003A              sprintf@prec 0040  
       ___lwdiv@dividend 0028                __pintcode 0008                 ?___lwdiv 0028  
               ?___lwmod 002F              __pintcodelo 0018                 ?_lcd_cmd 0001  
               ?_lcd_lat 0001                 ?_lcd_dwr 0001                 ?_lcd_msg 002C  
            __smallconst 0600                 ?_isdigit 0001                 ?_low_isr 0001  
       ___lwdiv@quotient 002C           __size_of_manda 002C                 ?_sprintf 0034  
         ___wmul@product 002C                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000        ___wmul@multiplier 0028             ??_lcd_cmd_hf 0029  
              lcd_putc@c 002B             ??_lcd_gotoxy 002C                manda@dato 0028  
               __Hrparam 0000                 __Lrparam 0000       __end_of_lcd_cmd_hf 0CBA  
     __end_of_lcd_gotoxy 0C16         __size_of___lwdiv 0052         __size_of___lwmod 0042  
            _isdigit$502 0029         __size_of_lcd_cmd 004A         __size_of_lcd_lat 0014  
       __size_of_lcd_dwr 0046         __size_of_lcd_msg 0052               sprintf@val 0042  
       __size_of_isdigit 001E          ___lwdiv@divisor 002A          ___lwdiv@counter 002E  
       __size_of_low_isr 00B2                 __ptext10 0CA0                 __ptext11 0BE2  
               __ptext12 0AD6                 __ptext13 0C16                 __ptext14 0CBA  
               _lcd_init 0854                 _high_isr 0008                 _lcd_putc 0BA8  
       __size_of_sprintf 0234            __size_of_main 0086                 int$flags 0054  
               lcd_cmd@x 002A                 lcd_dwr@x 002A                 lcd_msg@c 002C  
               isdigit@c 002A                 intlevel1 0000                 intlevel2 0000  
              sprintf@ap 003E                sprintf@sp 0034         ___lwmod@dividend 002F  
               sprintf@c 0046                 sprintf@f 0036          ___lwmod@divisor 0031  
        ___lwmod@counter 0033  
