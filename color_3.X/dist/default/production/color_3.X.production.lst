

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun May 13 01:20:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     __powers_:
    94                           	opt stack 0
    95  000601  0000               	dw	0
    96  000603  3F80               	dw	16256
    97  000605  0000               	dw	0
    98  000607  4120               	dw	16672
    99  000609  0000               	dw	0
   100  00060B  42C8               	dw	17096
   101  00060D  0000               	dw	0
   102  00060F  447A               	dw	17530
   103  000611  4000               	dw	16384
   104  000613  461C               	dw	17948
   105  000615  5000               	dw	20480
   106  000617  47C3               	dw	18371
   107  000619  2400               	dw	9216
   108  00061B  4974               	dw	18804
   109  00061D  9680               	dw	38528
   110  00061F  4B18               	dw	19224
   111  000621  BC20               	dw	48160
   112  000623  4CBE               	dw	19646
   113  000625  6B28               	dw	27432
   114  000627  4E6E               	dw	20078
   115  000629  02F9               	dw	761
   116  00062B  5015               	dw	20501
   117  00062D  78EC               	dw	30956
   118  00062F  60AD               	dw	24749
   119  000631  F2CA               	dw	62154
   120  000633  7149               	dw	29001
   121  000635                     __end_of__powers_:
   122                           	opt stack 0
   123  000635                     __npowers_:
   124                           	opt stack 0
   125  000635  0000               	dw	0
   126  000637  3F80               	dw	16256
   127  000639  CCCD               	dw	52429
   128  00063B  3DCC               	dw	15820
   129  00063D  D70A               	dw	55050
   130  00063F  3C23               	dw	15395
   131  000641  126F               	dw	4719
   132  000643  3A83               	dw	14979
   133  000645  B717               	dw	46871
   134  000647  38D1               	dw	14545
   135  000649  C5AC               	dw	50604
   136  00064B  3727               	dw	14119
   137  00064D  37BD               	dw	14269
   138  00064F  3586               	dw	13702
   139  000651  BF95               	dw	49045
   140  000653  33D6               	dw	13270
   141  000655  CC77               	dw	52343
   142  000657  322B               	dw	12843
   143  000659  705F               	dw	28767
   144  00065B  3089               	dw	12425
   145  00065D  E6FF               	dw	59135
   146  00065F  2EDB               	dw	11995
   147  000661  E508               	dw	58632
   148  000663  1E3C               	dw	7740
   149  000665  4260               	dw	16992
   150  000667  0DA2               	dw	3490
   151  000669                     __end_of__npowers_:
   152                           	opt stack 0
   153  000669                     _dpowers:
   154                           	opt stack 0
   155  000669  0001               	dw	1
   156  00066B  0000               	dw	0
   157  00066D  000A               	dw	10
   158  00066F  0000               	dw	0
   159  000671  0064               	dw	100
   160  000673  0000               	dw	0
   161  000675  03E8               	dw	1000
   162  000677  0000               	dw	0
   163  000679  2710               	dw	10000
   164  00067B  0000               	dw	0
   165  00067D  86A0               	dw	34464
   166  00067F  0001               	dw	1
   167  000681  4240               	dw	16960
   168  000683  000F               	dw	15
   169  000685  9680               	dw	38528
   170  000687  0098               	dw	152
   171  000689  E100               	dw	57600
   172  00068B  05F5               	dw	1525
   173  00068D  CA00               	dw	51712
   174  00068F  3B9A               	dw	15258
   175  000691                     __end_of_dpowers:
   176                           	opt stack 0
   177  0000                     _TMR1	set	4046
   178  0000                     _T1CONbits	set	4045
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTD	set	3971
   181  0000                     _INTEDG0	set	32654
   182  0000                     _INT0IE	set	32660
   183  0000                     _GIEL	set	32662
   184  0000                     _GIEH	set	32663
   185  0000                     _IPEN	set	32391
   186  0000                     _TMR1IE	set	31976
   187  0000                     _TMR1IP	set	31992
   188  0000                     _TMR1ON	set	32360
   189  0000                     _TMR1CS	set	32361
   190  0000                     _T1CKPS0	set	32364
   191  0000                     _T1CKPS1	set	32365
   192  0000                     _INT0IF	set	32657
   193  0000                     _TMR1IF	set	31984
   194  000691                     STR_1:
   195  000691  44                 	db	68	;'D'
   196  000692  65                 	db	101	;'e'
   197  000693  74                 	db	116	;'t'
   198  000694  65                 	db	101	;'e'
   199  000695  63                 	db	99	;'c'
   200  000696  74                 	db	116	;'t'
   201  000697  6F                 	db	111	;'o'
   202  000698  72                 	db	114	;'r'
   203  000699  20                 	db	32
   204  00069A  64                 	db	100	;'d'
   205  00069B  65                 	db	101	;'e'
   206  00069C  20                 	db	32
   207  00069D  63                 	db	99	;'c'
   208  00069E  6F                 	db	111	;'o'
   209  00069F  6C                 	db	108	;'l'
   210  0006A0  6F                 	db	111	;'o'
   211  0006A1  72                 	db	114	;'r'
   212  0006A2  00                 	db	0
   213  0006A3                     STR_2:
   214  0006A3  25                 	db	37
   215  0006A4  35                 	db	53	;'5'
   216  0006A5  2E                 	db	46
   217  0006A6  33                 	db	51	;'3'
   218  0006A7  66                 	db	102	;'f'
   219  0006A8  00                 	db	0
   220  0006A9                     STR_9:
   221  0006A9  41                 	db	65	;'A'
   222  0006AA  3D                 	db	61	;'='
   223  0006AB  20                 	db	32
   224  0006AC  00                 	db	0
   225  0006AD                     STR_3:
   226  0006AD  42                 	db	66	;'B'
   227  0006AE  3D                 	db	61	;'='
   228  0006AF  20                 	db	32
   229  0006B0  00                 	db	0
   230  0006B1                     STR_5:
   231  0006B1  52                 	db	82	;'R'
   232  0006B2  3D                 	db	61	;'='
   233  0006B3  20                 	db	32
   234  0006B4  00                 	db	0
   235  0006B5                     STR_7:
   236  0006B5  56                 	db	86	;'V'
   237  0006B6  3D                 	db	61	;'='
   238  0006B7  20                 	db	32
   239  0006B8  00                 	db	0
   240  0000                     
   241                           ; #config settings
   242  0006B9  00                 	db	0	; dummy byte at the end
   243  0000                     
   244                           	psect	cinit
   245  0033E6                     __pcinit:
   246                           	opt stack 0
   247  0033E6                     start_initialization:
   248                           	opt stack 0
   249  0033E6                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to BANK1 (8 bytes)
   253  0033E6  EE01  F030         	lfsr	0,__pbssBANK1
   254  0033EA  0E08               	movlw	8
   255  0033EC                     clear_0:
   256  0033EC  6AEE               	clrf	postinc0,c
   257  0033EE  06E8               	decf	wreg,f,c
   258  0033F0  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to BANK0 (8 bytes)
   261  0033F2  EE00  F0E4         	lfsr	0,__pbssBANK0
   262  0033F6  0E08               	movlw	8
   263  0033F8                     clear_1:
   264  0033F8  6AEE               	clrf	postinc0,c
   265  0033FA  06E8               	decf	wreg,f,c
   266  0033FC  E1FD               	bnz	clear_1
   267                           
   268                           ; Clear objects allocated to COMRAM (7 bytes)
   269  0033FE  EE00  F04A         	lfsr	0,__pbssCOMRAM
   270  003402  0E07               	movlw	7
   271  003404                     clear_2:
   272  003404  6AEE               	clrf	postinc0,c
   273  003406  06E8               	decf	wreg,f,c
   274  003408  E1FD               	bnz	clear_2
   275  00340A                     end_of_initialization:
   276                           	opt stack 0
   277  00340A                     __end_of__initialization:
   278                           	opt stack 0
   279  00340A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   280  00340C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   281  00340E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   282  003410  6EF8               	movwf	tblptru,c
   283  003412  0100               	movlb	0
   284  003414  EF20  F008         	goto	_main	;jump to C main() function
   285                           tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           
   289                           	psect	bssCOMRAM
   290  00004A                     __pbssCOMRAM:
   291                           	opt stack 0
   292  00004A                     _overflowCount:
   293                           	opt stack 0
   294  00004A                     	ds	4
   295  00004E                     _triggered:
   296                           	opt stack 0
   297  00004E                     	ds	1
   298  00004F                     _first:
   299                           	opt stack 0
   300  00004F                     	ds	1
   301  000050                     _lcd:
   302                           	opt stack 0
   303  000050                     	ds	1
   304                           tblptru	equ	0xFF8
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK0
   309  0000E4                     __pbssBANK0:
   310                           	opt stack 0
   311  0000E4                     _finishTime:
   312                           	opt stack 0
   313  0000E4                     	ds	4
   314  0000E8                     _startTime:
   315                           	opt stack 0
   316  0000E8                     	ds	4
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK1
   322  000130                     __pbssBANK1:
   323                           	opt stack 0
   324  000130                     _value:
   325                           	opt stack 0
   326  000130                     	ds	8
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackBANK1
   332  000100                     __pcstackBANK1:
   333                           	opt stack 0
   334  000100                     _sprintf$879:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x0
   338  000100                     	ds	4
   339  000104                     sprintf@ap:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x4
   343  000104                     	ds	2
   344  000106                     sprintf@val:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x6
   348  000106                     	ds	4
   349  00010A                     sprintf@flag:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0xA
   353  00010A                     	ds	2
   354  00010C                     sprintf@width:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0xC
   358  00010C                     	ds	2
   359  00010E                     sprintf@tmpval:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0xE
   363  00010E                     	ds	4
   364  000112                     sprintf@exp:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x12
   368  000112                     	ds	2
   369  000114                     sprintf@fval:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x14
   373  000114                     	ds	4
   374  000118                     sprintf@prec:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x18
   378  000118                     	ds	2
   379  00011A                     sprintf@c:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x1A
   383  00011A                     	ds	1
   384  00011B                     main@v:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0x1B
   388  00011B                     	ds	4
   389  00011F                     main@brillo:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x1F
   393  00011F                     	ds	4
   394  000123                     main@r:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x23
   398  000123                     	ds	4
   399  000127                     main@a:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x27
   403  000127                     	ds	4
   404  00012B                     main@i:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2B
   408  00012B                     	ds	1
   409  00012C                     main@freq:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x2C
   413  00012C                     	ds	4
   414                           tblptru	equ	0xFF8
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418                           	psect	cstackBANK0
   419  000080                     __pcstackBANK0:
   420                           	opt stack 0
   421  000080                     ___flmul@sign:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x0
   425  000080                     	ds	1
   426  000081                     ___flmul@aexp:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x1
   430  000081                     	ds	1
   431  000082                     ___flmul@grs:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x2
   435  000082                     	ds	4
   436  000086                     ___flmul@bexp:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x6
   440  000086                     	ds	1
   441  000087                     ___flmul@prod:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x7
   445  000087                     	ds	4
   446  00008B                     ___flmul@temp:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xB
   450  00008B                     	ds	2
   451  00008D                     ?___fldiv:
   452                           	opt stack 0
   453  00008D                     ?_fround:
   454                           	opt stack 0
   455  00008D                     ?_scale:
   456                           	opt stack 0
   457  00008D                     ___fldiv@b:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0xD
   461  00008D                     	ds	4
   462  000091                     ___fldiv@a:
   463                           	opt stack 0
   464  000091                     _fround$877:
   465                           	opt stack 0
   466  000091                     _scale$878:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x11
   470  000091                     	ds	4
   471  000095                     ??___fldiv:
   472  000095                     scale@scl:
   473                           	opt stack 0
   474  000095                     _fround$876:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x15
   478  000095                     	ds	1
   479  000096                     ?___fltol:
   480                           	opt stack 0
   481  000096                     ___fltol@f1:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x16
   485  000096                     	ds	3
   486  000099                     fround@prec:
   487                           	opt stack 0
   488  000099                     ___fldiv@sign:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  000099                     	ds	1
   493  00009A                     ??___fltol:
   494  00009A                     ___fldiv@rem:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x1A
   498  00009A                     	ds	4
   499  00009E                     ___fldiv@new_exp:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x1E
   503  00009E                     	ds	2
   504  0000A0                     ___fldiv@grs:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x20
   508  0000A0                     	ds	4
   509  0000A4                     ___fldiv@bexp:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x24
   513  0000A4                     	ds	1
   514  0000A5                     ___fldiv@aexp:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x25
   518  0000A5                     	ds	1
   519  0000A6                     ?_calcula:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x26
   523  0000A6                     	ds	4
   524  0000AA                     ??_calcula:
   525                           
   526                           ; 1 bytes @ 0x2A
   527  0000AA                     	ds	4
   528  0000AE                     calcula@elapsedTime:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x2E
   532  0000AE                     	ds	4
   533  0000B2                     calcula@freq:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x32
   537  0000B2                     	ds	4
   538  0000B6                     calcula@temp:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x36
   542  0000B6                     	ds	4
   543  0000BA                     ?___fladd:
   544                           	opt stack 0
   545  0000BA                     ___fladd@b:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x3A
   549  0000BA                     	ds	4
   550  0000BE                     ___fladd@a:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x3E
   554  0000BE                     	ds	4
   555  0000C2                     ??___fladd:
   556                           
   557                           ; 1 bytes @ 0x42
   558  0000C2                     	ds	8
   559  0000CA                     ___fladd@signs:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x4A
   563  0000CA                     	ds	1
   564  0000CB                     ___fladd@aexp:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x4B
   568  0000CB                     	ds	1
   569  0000CC                     ___fladd@bexp:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x4C
   573  0000CC                     	ds	1
   574  0000CD                     ___fladd@grs:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x4D
   578  0000CD                     	ds	1
   579  0000CE                     ?_calibra:
   580                           	opt stack 0
   581  0000CE                     ?___flsub:
   582                           	opt stack 0
   583  0000CE                     calibra@valor:
   584                           	opt stack 0
   585  0000CE                     ___flsub@b:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x4E
   589  0000CE                     	ds	4
   590  0000D2                     calibra@fd:
   591                           	opt stack 0
   592  0000D2                     ___flsub@a:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x52
   596  0000D2                     	ds	4
   597  0000D6                     ?_sprintf:
   598                           	opt stack 0
   599  0000D6                     sprintf@sp:
   600                           	opt stack 0
   601  0000D6                     calibra@fw:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x56
   605  0000D6                     	ds	2
   606  0000D8                     sprintf@f:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x58
   610  0000D8                     	ds	6
   611  0000DE                     ??_sprintf:
   612                           
   613                           ; 1 bytes @ 0x5E
   614  0000DE                     	ds	4
   615  0000E2                     ??_main:
   616                           
   617                           ; 1 bytes @ 0x62
   618  0000E2                     	ds	2
   619                           tblptru	equ	0xFF8
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           
   623                           	psect	cstackCOMRAM
   624  000001                     __pcstackCOMRAM:
   625                           	opt stack 0
   626  000001                     ??_high_isr:
   627  000001                     
   628                           ; 1 bytes @ 0x0
   629  000001                     	ds	22
   630  000017                     high_isr@counter:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x16
   634  000017                     	ds	2
   635  000019                     ??_low_isr:
   636                           
   637                           ; 1 bytes @ 0x18
   638  000019                     	ds	21
   639  00002E                     ??_isdigit:
   640  00002E                     ??_lcd_lat:
   641  00002E                     ?___wmul:
   642                           	opt stack 0
   643  00002E                     ?___awmod:
   644                           	opt stack 0
   645  00002E                     ?__tdiv_to_l_:
   646                           	opt stack 0
   647  00002E                     ?__div_to_l_:
   648                           	opt stack 0
   649  00002E                     ?___flneg:
   650                           	opt stack 0
   651  00002E                     ?___lldiv:
   652                           	opt stack 0
   653  00002E                     ?___llmod:
   654                           	opt stack 0
   655  00002E                     ?___xxtofl:
   656                           	opt stack 0
   657  00002E                     manda@dato:
   658                           	opt stack 0
   659  00002E                     seleccionarEscala@a:
   660                           	opt stack 0
   661  00002E                     seleccionarColor@col:
   662                           	opt stack 0
   663  00002E                     ___wmul@multiplier:
   664                           	opt stack 0
   665  00002E                     ___awmod@dividend:
   666                           	opt stack 0
   667  00002E                     __div_to_l_@f1:
   668                           	opt stack 0
   669  00002E                     ___flge@ff1:
   670                           	opt stack 0
   671  00002E                     ___flneg@f1:
   672                           	opt stack 0
   673  00002E                     __tdiv_to_l_@f1:
   674                           	opt stack 0
   675  00002E                     ___lldiv@dividend:
   676                           	opt stack 0
   677  00002E                     ___llmod@dividend:
   678                           	opt stack 0
   679  00002E                     ___xxtofl@val:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     ??_lcd_dwr:
   685  00002F                     ??_lcd_cmd:
   686  00002F                     lcd_cmd_hf@x:
   687                           	opt stack 0
   688  00002F                     _isdigit$523:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x2E
   692  00002F                     	ds	1
   693  000030                     lcd_cmd@x:
   694                           	opt stack 0
   695  000030                     lcd_dwr@x:
   696                           	opt stack 0
   697  000030                     isdigit@c:
   698                           	opt stack 0
   699  000030                     ___wmul@multiplicand:
   700                           	opt stack 0
   701  000030                     ___awmod@divisor:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x2F
   705  000030                     	ds	1
   706  000031                     ??_lcd_init:
   707  000031                     lcd_putc@c:
   708                           	opt stack 0
   709  000031                     lcd_gotoxy@y:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x30
   713  000031                     	ds	1
   714  000032                     ??_lcd_gotoxy:
   715  000032                     ??___xxtofl:
   716  000032                     ___awmod@counter:
   717                           	opt stack 0
   718  000032                     lcd_msg@c:
   719                           	opt stack 0
   720  000032                     ___wmul@product:
   721                           	opt stack 0
   722  000032                     __div_to_l_@f2:
   723                           	opt stack 0
   724  000032                     ___flge@ff2:
   725                           	opt stack 0
   726  000032                     __tdiv_to_l_@f2:
   727                           	opt stack 0
   728  000032                     ___lldiv@divisor:
   729                           	opt stack 0
   730  000032                     ___llmod@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x31
   734  000032                     	ds	1
   735  000033                     lcd_gotoxy@x:
   736                           	opt stack 0
   737  000033                     ___awmod@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x32
   741  000033                     	ds	1
   742  000034                     ?___awdiv:
   743                           	opt stack 0
   744  000034                     lcd_gotoxy@ADDRESS:
   745                           	opt stack 0
   746  000034                     ___awdiv@dividend:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x33
   750  000034                     	ds	2
   751  000036                     ??__tdiv_to_l_:
   752  000036                     ??___flge:
   753  000036                     ___llmod@counter:
   754                           	opt stack 0
   755  000036                     ___xxtofl@sign:
   756                           	opt stack 0
   757  000036                     ___awdiv@divisor:
   758                           	opt stack 0
   759  000036                     __div_to_l_@quot:
   760                           	opt stack 0
   761  000036                     ___lldiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x35
   765  000036                     	ds	1
   766  000037                     ___xxtofl@exp:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x36
   770  000037                     	ds	1
   771  000038                     ___awdiv@counter:
   772                           	opt stack 0
   773  000038                     ___xxtofl@arg:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x37
   777  000038                     	ds	1
   778  000039                     ___awdiv@sign:
   779                           	opt stack 0
   780  000039                     __tdiv_to_l_@quot:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x38
   784  000039                     	ds	1
   785  00003A                     __div_to_l_@cntr:
   786                           	opt stack 0
   787  00003A                     ___lldiv@counter:
   788                           	opt stack 0
   789  00003A                     ___awdiv@quotient:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x39
   793  00003A                     	ds	1
   794  00003B                     __div_to_l_@exp1:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3A
   798  00003B                     	ds	1
   799  00003C                     ?___flmul:
   800                           	opt stack 0
   801  00003C                     ___flmul@b:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x3B
   805  00003C                     	ds	1
   806  00003D                     __tdiv_to_l_@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x3C
   810  00003D                     	ds	1
   811  00003E                     __tdiv_to_l_@exp1:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x3D
   815  00003E                     	ds	2
   816  000040                     ___flmul@a:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x3F
   820  000040                     	ds	4
   821  000044                     ??___flmul:
   822                           
   823                           ; 1 bytes @ 0x43
   824  000044                     	ds	4
   825  000048                     ___fltol@sign1:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x47
   829  000048                     	ds	1
   830  000049                     ___fltol@exp1:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x48
   834  000049                     	ds	1
   835                           tblptru	equ	0xFF8
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 169 in file "color_3.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  freq            4   44[BANK1 ] float 
   849 ;;  a               4   39[BANK1 ] float 
   850 ;;  r               4   35[BANK1 ] float 
   851 ;;  brillo          4   31[BANK1 ] float 
   852 ;;  v               4   27[BANK1 ] float 
   853 ;;  i               1   43[BANK1 ] unsigned char 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   863 ;;      Params:         0       0       0       0       0       0       0
   864 ;;      Locals:         0       0      21       0       0       0       0
   865 ;;      Temps:          0       2       0       0       0       0       0
   866 ;;      Totals:         0       2      21       0       0       0       0
   867 ;;Total ram usage:       23 bytes
   868 ;; Hardware stack levels required when called:    6
   869 ;; This function calls:
   870 ;;		___fladd
   871 ;;		___fldiv
   872 ;;		___flge
   873 ;;		_calcula
   874 ;;		_calibra
   875 ;;		_lcd_gotoxy
   876 ;;		_lcd_init
   877 ;;		_lcd_msg
   878 ;;		_prepareForInterrupts
   879 ;;		_seleccionarColor
   880 ;;		_seleccionarEscala
   881 ;;		_sprintf
   882 ;; This function is called by:
   883 ;;		Startup code after reset
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text0
   888  001040                     __ptext0:
   889                           	opt stack 0
   890  001040                     _main:
   891                           	opt stack 25
   892                           
   893                           ;color_3.c: 171: char i;
   894                           ;color_3.c: 172: float freq=0.0;
   895                           
   896                           ;incstack = 0
   897  001040  0E00               	movlw	0
   898  001042  0101               	movlb	1	; () banked
   899  001044  6F2C               	movwf	main@freq& (0+255),b
   900  001046  0E00               	movlw	0
   901  001048  6F2D               	movwf	(main@freq+1)& (0+255),b
   902  00104A  0E00               	movlw	0
   903  00104C  6F2E               	movwf	(main@freq+2)& (0+255),b
   904  00104E  0E00               	movlw	0
   905  001050  6F2F               	movwf	(main@freq+3)& (0+255),b
   906                           
   907                           ; BSR set to: 1
   908                           ;color_3.c: 173: float r,v,a,brillo;
   909                           ;color_3.c: 175: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
   910  001052  9695               	bcf	3989,3,c	;volatile
   911                           
   912                           ; BSR set to: 1
   913                           ;color_3.c: 176: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
   914  001054  9495               	bcf	3989,2,c	;volatile
   915                           
   916                           ; BSR set to: 1
   917                           ;color_3.c: 177: (*(&(*(&PORTD + 0x12))) &=~ (1<<(1)));
   918  001056  9295               	bcf	3989,1,c	;volatile
   919                           
   920                           ; BSR set to: 1
   921                           ;color_3.c: 178: (*(&(*(&PORTD + 0x12))) &=~ (1<<(0)));
   922  001058  9095               	bcf	3989,0,c	;volatile
   923                           
   924                           ; BSR set to: 1
   925                           ;color_3.c: 179: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
   926  00105A  9895               	bcf	3989,4,c	;volatile
   927                           
   928                           ; BSR set to: 1
   929                           ;color_3.c: 181: lcd_init();
   930  00105C  EC9F  F017         	call	_lcd_init	;wreg free
   931                           
   932                           ;color_3.c: 182: lcd_msg("Detector de color");
   933  001060  0E91               	movlw	low STR_1
   934  001062  6E32               	movwf	lcd_msg@c,c
   935  001064  0E06               	movlw	high STR_1
   936  001066  6E33               	movwf	lcd_msg@c+1,c
   937  001068  ECEC  F018         	call	_lcd_msg	;wreg free
   938                           
   939                           ;color_3.c: 189: T1CONbits.RD16 = 1;
   940  00106C  8ECD               	bsf	4045,7,c	;volatile
   941                           
   942                           ;color_3.c: 190: T1CKPS1 = 0;
   943  00106E  9ACD               	bcf	4045,5,c	;volatile
   944                           
   945                           ;color_3.c: 191: T1CKPS0 = 0;
   946  001070  98CD               	bcf	4045,4,c	;volatile
   947                           
   948                           ;color_3.c: 192: TMR1CS = 0;
   949  001072  92CD               	bcf	4045,1,c	;volatile
   950                           
   951                           ;color_3.c: 193: TMR1ON = 1;
   952  001074  80CD               	bsf	4045,0,c	;volatile
   953                           
   954                           ;color_3.c: 194: TMR1IP = 0;
   955  001076  909F               	bcf	3999,0,c	;volatile
   956                           
   957                           ;color_3.c: 195: TMR1IE = 1;
   958  001078  809D               	bsf	3997,0,c	;volatile
   959                           
   960                           ;color_3.c: 197: prepareForInterrupts ();
   961  00107A  EC73  F01A         	call	_prepareForInterrupts	;wreg free
   962                           
   963                           ;color_3.c: 201: IPEN = 1;
   964  00107E  8ED0               	bsf	4048,7,c	;volatile
   965                           
   966                           ;color_3.c: 202: GIEH = 1;
   967  001080  8EF2               	bsf	intcon,7,c	;volatile
   968                           
   969                           ;color_3.c: 203: GIEL = 1;
   970  001082  8CF2               	bsf	intcon,6,c	;volatile
   971                           
   972                           ;color_3.c: 211: seleccionarEscala(baja);
   973  001084  0E02               	movlw	2
   974  001086  ECBD  F019         	call	_seleccionarEscala
   975  00108A                     
   976                           ;color_3.c: 216: {
   977                           ;color_3.c: 218: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
   978  00108A  0E10               	movlw	16
   979  00108C  1A8C               	xorwf	3980,f,c	;volatile
   980                           
   981                           ;color_3.c: 219: seleccionarColor(sf);
   982  00108E  0E02               	movlw	2
   983  001090  EC81  F019         	call	_seleccionarColor
   984                           
   985                           ;color_3.c: 220: for (i = 0 ;i < 30; i++)
   986  001094  0E00               	movlw	0
   987  001096  0101               	movlb	1	; () banked
   988  001098  6F2B               	movwf	main@i& (0+255),b
   989  00109A                     l5419:
   990                           
   991                           ; BSR set to: 1
   992  00109A  0E1D               	movlw	29
   993  00109C  652B               	cpfsgt	main@i& (0+255),b
   994  00109E  D001               	goto	l153
   995  0010A0  D028               	goto	u6180
   996  0010A2                     l153:
   997                           
   998                           ; BSR set to: 1
   999                           ;color_3.c: 221: {
  1000                           ;color_3.c: 222: _delay((unsigned long)((10)*(16000000/4000.0)));
  1001                           
  1002                           ; BSR set to: 1
  1003  0010A2  0E34               	movlw	52
  1004  0010A4  0100               	movlb	0	; () banked
  1005  0010A6  6FE2               	movwf	??_main& (0+255),b
  1006  0010A8  0EF1               	movlw	241
  1007  0010AA                     u6267:
  1008  0010AA  2EE8               	decfsz	wreg,f,c
  1009  0010AC  D7FE               	bra	u6267
  1010  0010AE  2FE2               	decfsz	??_main& (0+255),f,b
  1011  0010B0  D7FC               	bra	u6267
  1012  0010B2  D000               	nop2	
  1013                           
  1014                           ;color_3.c: 223: freq+= calcula();
  1015  0010B4  C12C  F0BA         	movff	main@freq,___fladd@b
  1016  0010B8  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1017  0010BC  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1018  0010C0  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1019  0010C4  EC47  F016         	call	_calcula	;wreg free
  1020  0010C8  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1021  0010CC  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1022  0010D0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1023  0010D4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1024  0010D8  EC0C  F00F         	call	___fladd	;wreg free
  1025  0010DC  C0BA  F12C         	movff	?___fladd,main@freq
  1026  0010E0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1027  0010E4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1028  0010E8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1029  0010EC  0101               	movlb	1	; () banked
  1030  0010EE  2B2B               	incf	main@i& (0+255),f,b
  1031  0010F0  D7D4               	goto	l5419
  1032  0010F2                     u6180:
  1033                           
  1034                           ; BSR set to: 1
  1035                           ;color_3.c: 224: }
  1036                           ;color_3.c: 225: freq/=30;
  1037                           
  1038                           ; BSR set to: 1
  1039  0010F2  C12C  F08D         	movff	main@freq,___fldiv@b
  1040  0010F6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1041  0010FA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1042  0010FE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1043  001102  0E00               	movlw	0
  1044  001104  0100               	movlb	0	; () banked
  1045  001106  6F91               	movwf	___fldiv@a& (0+255),b
  1046  001108  0E00               	movlw	0
  1047  00110A  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1048  00110C  0EF0               	movlw	240
  1049  00110E  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1050  001110  0E41               	movlw	65
  1051  001112  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1052  001114  ECAB  F010         	call	___fldiv	;wreg free
  1053  001118  C08D  F12C         	movff	?___fldiv,main@freq
  1054  00111C  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1055  001120  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1056  001124  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1057                           
  1058                           ;color_3.c: 226: brillo = freq;
  1059  001128  C12C  F11F         	movff	main@freq,main@brillo
  1060  00112C  C12D  F120         	movff	main@freq+1,main@brillo+1
  1061  001130  C12E  F121         	movff	main@freq+2,main@brillo+2
  1062  001134  C12F  F122         	movff	main@freq+3,main@brillo+3
  1063                           
  1064                           ;color_3.c: 227: freq = calibra(brillo,588.5,1821);
  1065  001138  C11F  F0CE         	movff	main@brillo,calibra@valor
  1066  00113C  C120  F0CF         	movff	main@brillo+1,calibra@valor+1
  1067  001140  C121  F0D0         	movff	main@brillo+2,calibra@valor+2
  1068  001144  C122  F0D1         	movff	main@brillo+3,calibra@valor+3
  1069  001148  0E00               	movlw	0
  1070  00114A  0100               	movlb	0	; () banked
  1071  00114C  6FD2               	movwf	calibra@fd& (0+255),b
  1072  00114E  0E20               	movlw	32
  1073  001150  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1074  001152  0E13               	movlw	19
  1075  001154  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1076  001156  0E44               	movlw	68
  1077  001158  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1078  00115A  0E00               	movlw	0
  1079  00115C  6FD6               	movwf	calibra@fw& (0+255),b
  1080  00115E  0EA0               	movlw	160
  1081  001160  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1082  001162  0EE3               	movlw	227
  1083  001164  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1084  001166  0E44               	movlw	68
  1085  001168  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1086  00116A  EC3A  F017         	call	_calibra	;wreg free
  1087  00116E  C0CE  F12C         	movff	?_calibra,main@freq
  1088  001172  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1089  001176  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1090  00117A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1091                           
  1092                           ;color_3.c: 228: sprintf(value,"%5.3f",freq);
  1093  00117E  0E30               	movlw	low _value
  1094  001180  0100               	movlb	0	; () banked
  1095  001182  6FD6               	movwf	sprintf@sp& (0+255),b
  1096  001184  0E01               	movlw	high _value
  1097  001186  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1098  001188  0EA3               	movlw	low STR_2
  1099  00118A  6FD8               	movwf	sprintf@f& (0+255),b
  1100  00118C  0E06               	movlw	high STR_2
  1101  00118E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1102  001190  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1103  001194  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1104  001198  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1105  00119C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1106  0011A0  EC5D  F003         	call	_sprintf	;wreg free
  1107                           
  1108                           ;color_3.c: 229: lcd_gotoxy(1,2);
  1109  0011A4  0E02               	movlw	2
  1110  0011A6  6E31               	movwf	lcd_gotoxy@y,c
  1111  0011A8  0E01               	movlw	1
  1112  0011AA  ECD9  F019         	call	_lcd_gotoxy
  1113                           
  1114                           ;color_3.c: 230: lcd_msg("B= ");
  1115  0011AE  0EAD               	movlw	low STR_3
  1116  0011B0  6E32               	movwf	lcd_msg@c,c
  1117  0011B2  0E06               	movlw	high STR_3
  1118  0011B4  6E33               	movwf	lcd_msg@c+1,c
  1119  0011B6  ECEC  F018         	call	_lcd_msg	;wreg free
  1120                           
  1121                           ;color_3.c: 231: lcd_msg(value);
  1122  0011BA  0E30               	movlw	low _value
  1123  0011BC  6E32               	movwf	lcd_msg@c,c
  1124  0011BE  0E01               	movlw	high _value
  1125  0011C0  6E33               	movwf	lcd_msg@c+1,c
  1126  0011C2  ECEC  F018         	call	_lcd_msg	;wreg free
  1127                           
  1128                           ;color_3.c: 232: freq=0.0;
  1129  0011C6  0E00               	movlw	0
  1130  0011C8  0101               	movlb	1	; () banked
  1131  0011CA  6F2C               	movwf	main@freq& (0+255),b
  1132  0011CC  0E00               	movlw	0
  1133  0011CE  6F2D               	movwf	(main@freq+1)& (0+255),b
  1134  0011D0  0E00               	movlw	0
  1135  0011D2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1136  0011D4  0E00               	movlw	0
  1137  0011D6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1138                           
  1139                           ; BSR set to: 1
  1140                           ;color_3.c: 233: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1141  0011D8  0E15               	movlw	21
  1142  0011DA  0100               	movlb	0	; () banked
  1143  0011DC  6FE3               	movwf	(??_main+1)& (0+255),b
  1144  0011DE  0E4B               	movlw	75
  1145  0011E0  6FE2               	movwf	??_main& (0+255),b
  1146  0011E2  0EBE               	movlw	190
  1147  0011E4                     u6277:
  1148  0011E4  2EE8               	decfsz	wreg,f,c
  1149  0011E6  D7FE               	bra	u6277
  1150  0011E8  2FE2               	decfsz	??_main& (0+255),f,b
  1151  0011EA  D7FC               	bra	u6277
  1152  0011EC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1153  0011EE  D7FA               	bra	u6277
  1154  0011F0  F000               	nop	
  1155                           
  1156                           ;color_3.c: 237: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1157  0011F2  0E10               	movlw	16
  1158  0011F4  1A8C               	xorwf	3980,f,c	;volatile
  1159                           
  1160                           ;color_3.c: 238: seleccionarColor(rojo);
  1161  0011F6  0E00               	movlw	0
  1162  0011F8  EC81  F019         	call	_seleccionarColor
  1163                           
  1164                           ;color_3.c: 239: for (i = 0 ;i < 30; i++)
  1165  0011FC  0E00               	movlw	0
  1166  0011FE  0101               	movlb	1	; () banked
  1167  001200  6F2B               	movwf	main@i& (0+255),b
  1168  001202                     l5455:
  1169                           
  1170                           ; BSR set to: 1
  1171  001202  0E1D               	movlw	29
  1172  001204  652B               	cpfsgt	main@i& (0+255),b
  1173  001206  D001               	goto	l155
  1174  001208  D028               	goto	u6200
  1175  00120A                     l155:
  1176                           
  1177                           ; BSR set to: 1
  1178                           ;color_3.c: 240: {
  1179                           ;color_3.c: 241: _delay((unsigned long)((10)*(16000000/4000.0)));
  1180                           
  1181                           ; BSR set to: 1
  1182  00120A  0E34               	movlw	52
  1183  00120C  0100               	movlb	0	; () banked
  1184  00120E  6FE2               	movwf	??_main& (0+255),b
  1185  001210  0EF1               	movlw	241
  1186  001212                     u6287:
  1187  001212  2EE8               	decfsz	wreg,f,c
  1188  001214  D7FE               	bra	u6287
  1189  001216  2FE2               	decfsz	??_main& (0+255),f,b
  1190  001218  D7FC               	bra	u6287
  1191  00121A  D000               	nop2	
  1192                           
  1193                           ;color_3.c: 242: freq+= calcula();
  1194  00121C  C12C  F0BA         	movff	main@freq,___fladd@b
  1195  001220  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1196  001224  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1197  001228  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1198  00122C  EC47  F016         	call	_calcula	;wreg free
  1199  001230  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1200  001234  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1201  001238  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1202  00123C  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1203  001240  EC0C  F00F         	call	___fladd	;wreg free
  1204  001244  C0BA  F12C         	movff	?___fladd,main@freq
  1205  001248  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1206  00124C  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1207  001250  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1208  001254  0101               	movlb	1	; () banked
  1209  001256  2B2B               	incf	main@i& (0+255),f,b
  1210  001258  D7D4               	goto	l5455
  1211  00125A                     u6200:
  1212                           
  1213                           ; BSR set to: 1
  1214                           ;color_3.c: 243: }
  1215                           ;color_3.c: 244: freq/=30;
  1216                           
  1217                           ; BSR set to: 1
  1218  00125A  C12C  F08D         	movff	main@freq,___fldiv@b
  1219  00125E  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1220  001262  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1221  001266  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1222  00126A  0E00               	movlw	0
  1223  00126C  0100               	movlb	0	; () banked
  1224  00126E  6F91               	movwf	___fldiv@a& (0+255),b
  1225  001270  0E00               	movlw	0
  1226  001272  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1227  001274  0EF0               	movlw	240
  1228  001276  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1229  001278  0E41               	movlw	65
  1230  00127A  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1231  00127C  ECAB  F010         	call	___fldiv	;wreg free
  1232  001280  C08D  F12C         	movff	?___fldiv,main@freq
  1233  001284  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1234  001288  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1235  00128C  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1236                           
  1237                           ;color_3.c: 245: r=freq;
  1238  001290  C12C  F123         	movff	main@freq,main@r
  1239  001294  C12D  F124         	movff	main@freq+1,main@r+1
  1240  001298  C12E  F125         	movff	main@freq+2,main@r+2
  1241  00129C  C12F  F126         	movff	main@freq+3,main@r+3
  1242                           
  1243                           ;color_3.c: 246: freq = calibra(r,743.4,1928);
  1244  0012A0  C123  F0CE         	movff	main@r,calibra@valor
  1245  0012A4  C124  F0CF         	movff	main@r+1,calibra@valor+1
  1246  0012A8  C125  F0D0         	movff	main@r+2,calibra@valor+2
  1247  0012AC  C126  F0D1         	movff	main@r+3,calibra@valor+3
  1248  0012B0  0E9A               	movlw	154
  1249  0012B2  0100               	movlb	0	; () banked
  1250  0012B4  6FD2               	movwf	calibra@fd& (0+255),b
  1251  0012B6  0ED9               	movlw	217
  1252  0012B8  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1253  0012BA  0E39               	movlw	57
  1254  0012BC  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1255  0012BE  0E44               	movlw	68
  1256  0012C0  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1257  0012C2  0E00               	movlw	0
  1258  0012C4  6FD6               	movwf	calibra@fw& (0+255),b
  1259  0012C6  0E00               	movlw	0
  1260  0012C8  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1261  0012CA  0EF1               	movlw	241
  1262  0012CC  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1263  0012CE  0E44               	movlw	68
  1264  0012D0  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1265  0012D2  EC3A  F017         	call	_calibra	;wreg free
  1266  0012D6  C0CE  F12C         	movff	?_calibra,main@freq
  1267  0012DA  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1268  0012DE  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1269  0012E2  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1270                           
  1271                           ;color_3.c: 247: sprintf(value,"%5.3f",freq);
  1272  0012E6  0E30               	movlw	low _value
  1273  0012E8  0100               	movlb	0	; () banked
  1274  0012EA  6FD6               	movwf	sprintf@sp& (0+255),b
  1275  0012EC  0E01               	movlw	high _value
  1276  0012EE  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1277  0012F0  0EA3               	movlw	low STR_2
  1278  0012F2  6FD8               	movwf	sprintf@f& (0+255),b
  1279  0012F4  0E06               	movlw	high STR_2
  1280  0012F6  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1281  0012F8  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1282  0012FC  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1283  001300  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1284  001304  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1285  001308  EC5D  F003         	call	_sprintf	;wreg free
  1286                           
  1287                           ;color_3.c: 248: lcd_gotoxy(1,2);
  1288  00130C  0E02               	movlw	2
  1289  00130E  6E31               	movwf	lcd_gotoxy@y,c
  1290  001310  0E01               	movlw	1
  1291  001312  ECD9  F019         	call	_lcd_gotoxy
  1292                           
  1293                           ;color_3.c: 249: lcd_msg("R= ");
  1294  001316  0EB1               	movlw	low STR_5
  1295  001318  6E32               	movwf	lcd_msg@c,c
  1296  00131A  0E06               	movlw	high STR_5
  1297  00131C  6E33               	movwf	lcd_msg@c+1,c
  1298  00131E  ECEC  F018         	call	_lcd_msg	;wreg free
  1299                           
  1300                           ;color_3.c: 250: lcd_msg(value);
  1301  001322  0E30               	movlw	low _value
  1302  001324  6E32               	movwf	lcd_msg@c,c
  1303  001326  0E01               	movlw	high _value
  1304  001328  6E33               	movwf	lcd_msg@c+1,c
  1305  00132A  ECEC  F018         	call	_lcd_msg	;wreg free
  1306                           
  1307                           ;color_3.c: 252: freq=0.0;
  1308  00132E  0E00               	movlw	0
  1309  001330  0101               	movlb	1	; () banked
  1310  001332  6F2C               	movwf	main@freq& (0+255),b
  1311  001334  0E00               	movlw	0
  1312  001336  6F2D               	movwf	(main@freq+1)& (0+255),b
  1313  001338  0E00               	movlw	0
  1314  00133A  6F2E               	movwf	(main@freq+2)& (0+255),b
  1315  00133C  0E00               	movlw	0
  1316  00133E  6F2F               	movwf	(main@freq+3)& (0+255),b
  1317                           
  1318                           ; BSR set to: 1
  1319                           ;color_3.c: 253: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1320  001340  0E15               	movlw	21
  1321  001342  0100               	movlb	0	; () banked
  1322  001344  6FE3               	movwf	(??_main+1)& (0+255),b
  1323  001346  0E4B               	movlw	75
  1324  001348  6FE2               	movwf	??_main& (0+255),b
  1325  00134A  0EBE               	movlw	190
  1326  00134C                     u6297:
  1327  00134C  2EE8               	decfsz	wreg,f,c
  1328  00134E  D7FE               	bra	u6297
  1329  001350  2FE2               	decfsz	??_main& (0+255),f,b
  1330  001352  D7FC               	bra	u6297
  1331  001354  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1332  001356  D7FA               	bra	u6297
  1333  001358  F000               	nop	
  1334                           
  1335                           ;color_3.c: 256: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1336  00135A  0E10               	movlw	16
  1337  00135C  1A8C               	xorwf	3980,f,c	;volatile
  1338                           
  1339                           ;color_3.c: 257: seleccionarColor(verde);
  1340  00135E  0E03               	movlw	3
  1341  001360  EC81  F019         	call	_seleccionarColor
  1342                           
  1343                           ;color_3.c: 258: for (i = 0 ;i < 30; i++)
  1344  001364  0E00               	movlw	0
  1345  001366  0101               	movlb	1	; () banked
  1346  001368  6F2B               	movwf	main@i& (0+255),b
  1347  00136A                     l5491:
  1348                           
  1349                           ; BSR set to: 1
  1350  00136A  0E1D               	movlw	29
  1351  00136C  652B               	cpfsgt	main@i& (0+255),b
  1352  00136E  D001               	goto	l157
  1353  001370  D028               	goto	u6220
  1354  001372                     l157:
  1355                           
  1356                           ; BSR set to: 1
  1357                           ;color_3.c: 259: {
  1358                           ;color_3.c: 260: _delay((unsigned long)((10)*(16000000/4000.0)));
  1359                           
  1360                           ; BSR set to: 1
  1361  001372  0E34               	movlw	52
  1362  001374  0100               	movlb	0	; () banked
  1363  001376  6FE2               	movwf	??_main& (0+255),b
  1364  001378  0EF1               	movlw	241
  1365  00137A                     u6307:
  1366  00137A  2EE8               	decfsz	wreg,f,c
  1367  00137C  D7FE               	bra	u6307
  1368  00137E  2FE2               	decfsz	??_main& (0+255),f,b
  1369  001380  D7FC               	bra	u6307
  1370  001382  D000               	nop2	
  1371                           
  1372                           ;color_3.c: 261: freq+= calcula();
  1373  001384  C12C  F0BA         	movff	main@freq,___fladd@b
  1374  001388  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1375  00138C  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1376  001390  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1377  001394  EC47  F016         	call	_calcula	;wreg free
  1378  001398  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1379  00139C  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1380  0013A0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1381  0013A4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1382  0013A8  EC0C  F00F         	call	___fladd	;wreg free
  1383  0013AC  C0BA  F12C         	movff	?___fladd,main@freq
  1384  0013B0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1385  0013B4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1386  0013B8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1387  0013BC  0101               	movlb	1	; () banked
  1388  0013BE  2B2B               	incf	main@i& (0+255),f,b
  1389  0013C0  D7D4               	goto	l5491
  1390  0013C2                     u6220:
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;color_3.c: 262: }
  1394                           ;color_3.c: 263: freq/=30;
  1395                           
  1396                           ; BSR set to: 1
  1397  0013C2  C12C  F08D         	movff	main@freq,___fldiv@b
  1398  0013C6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1399  0013CA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1400  0013CE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1401  0013D2  0E00               	movlw	0
  1402  0013D4  0100               	movlb	0	; () banked
  1403  0013D6  6F91               	movwf	___fldiv@a& (0+255),b
  1404  0013D8  0E00               	movlw	0
  1405  0013DA  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1406  0013DC  0EF0               	movlw	240
  1407  0013DE  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1408  0013E0  0E41               	movlw	65
  1409  0013E2  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1410  0013E4  ECAB  F010         	call	___fldiv	;wreg free
  1411  0013E8  C08D  F12C         	movff	?___fldiv,main@freq
  1412  0013EC  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1413  0013F0  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1414  0013F4  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1415                           
  1416                           ;color_3.c: 264: v=freq;
  1417  0013F8  C12C  F11B         	movff	main@freq,main@v
  1418  0013FC  C12D  F11C         	movff	main@freq+1,main@v+1
  1419  001400  C12E  F11D         	movff	main@freq+2,main@v+2
  1420  001404  C12F  F11E         	movff	main@freq+3,main@v+3
  1421                           
  1422                           ;color_3.c: 265: freq = calibra(v,505.7,1498);
  1423  001408  C11B  F0CE         	movff	main@v,calibra@valor
  1424  00140C  C11C  F0CF         	movff	main@v+1,calibra@valor+1
  1425  001410  C11D  F0D0         	movff	main@v+2,calibra@valor+2
  1426  001414  C11E  F0D1         	movff	main@v+3,calibra@valor+3
  1427  001418  0E9A               	movlw	154
  1428  00141A  0100               	movlb	0	; () banked
  1429  00141C  6FD2               	movwf	calibra@fd& (0+255),b
  1430  00141E  0ED9               	movlw	217
  1431  001420  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1432  001422  0EFC               	movlw	252
  1433  001424  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1434  001426  0E43               	movlw	67
  1435  001428  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1436  00142A  0E00               	movlw	0
  1437  00142C  6FD6               	movwf	calibra@fw& (0+255),b
  1438  00142E  0E40               	movlw	64
  1439  001430  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1440  001432  0EBB               	movlw	187
  1441  001434  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1442  001436  0E44               	movlw	68
  1443  001438  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1444  00143A  EC3A  F017         	call	_calibra	;wreg free
  1445  00143E  C0CE  F12C         	movff	?_calibra,main@freq
  1446  001442  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1447  001446  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1448  00144A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1449                           
  1450                           ;color_3.c: 266: sprintf(value,"%5.3f",freq);
  1451  00144E  0E30               	movlw	low _value
  1452  001450  0100               	movlb	0	; () banked
  1453  001452  6FD6               	movwf	sprintf@sp& (0+255),b
  1454  001454  0E01               	movlw	high _value
  1455  001456  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1456  001458  0EA3               	movlw	low STR_2
  1457  00145A  6FD8               	movwf	sprintf@f& (0+255),b
  1458  00145C  0E06               	movlw	high STR_2
  1459  00145E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1460  001460  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1461  001464  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1462  001468  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1463  00146C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1464  001470  EC5D  F003         	call	_sprintf	;wreg free
  1465                           
  1466                           ;color_3.c: 267: lcd_gotoxy(1,2);
  1467  001474  0E02               	movlw	2
  1468  001476  6E31               	movwf	lcd_gotoxy@y,c
  1469  001478  0E01               	movlw	1
  1470  00147A  ECD9  F019         	call	_lcd_gotoxy
  1471                           
  1472                           ;color_3.c: 268: lcd_msg("V= ");
  1473  00147E  0EB5               	movlw	low STR_7
  1474  001480  6E32               	movwf	lcd_msg@c,c
  1475  001482  0E06               	movlw	high STR_7
  1476  001484  6E33               	movwf	lcd_msg@c+1,c
  1477  001486  ECEC  F018         	call	_lcd_msg	;wreg free
  1478                           
  1479                           ;color_3.c: 269: lcd_msg(value);
  1480  00148A  0E30               	movlw	low _value
  1481  00148C  6E32               	movwf	lcd_msg@c,c
  1482  00148E  0E01               	movlw	high _value
  1483  001490  6E33               	movwf	lcd_msg@c+1,c
  1484  001492  ECEC  F018         	call	_lcd_msg	;wreg free
  1485                           
  1486                           ;color_3.c: 270: freq=0.0;
  1487  001496  0E00               	movlw	0
  1488  001498  0101               	movlb	1	; () banked
  1489  00149A  6F2C               	movwf	main@freq& (0+255),b
  1490  00149C  0E00               	movlw	0
  1491  00149E  6F2D               	movwf	(main@freq+1)& (0+255),b
  1492  0014A0  0E00               	movlw	0
  1493  0014A2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1494  0014A4  0E00               	movlw	0
  1495  0014A6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1496                           
  1497                           ; BSR set to: 1
  1498                           ;color_3.c: 271: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1499  0014A8  0E15               	movlw	21
  1500  0014AA  0100               	movlb	0	; () banked
  1501  0014AC  6FE3               	movwf	(??_main+1)& (0+255),b
  1502  0014AE  0E4B               	movlw	75
  1503  0014B0  6FE2               	movwf	??_main& (0+255),b
  1504  0014B2  0EBE               	movlw	190
  1505  0014B4                     u6317:
  1506  0014B4  2EE8               	decfsz	wreg,f,c
  1507  0014B6  D7FE               	bra	u6317
  1508  0014B8  2FE2               	decfsz	??_main& (0+255),f,b
  1509  0014BA  D7FC               	bra	u6317
  1510  0014BC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1511  0014BE  D7FA               	bra	u6317
  1512  0014C0  F000               	nop	
  1513                           
  1514                           ;color_3.c: 274: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1515  0014C2  0E10               	movlw	16
  1516  0014C4  1A8C               	xorwf	3980,f,c	;volatile
  1517                           
  1518                           ;color_3.c: 275: seleccionarColor(azul);
  1519  0014C6  0E01               	movlw	1
  1520  0014C8  EC81  F019         	call	_seleccionarColor
  1521                           
  1522                           ;color_3.c: 276: for (i = 0 ;i < 30; i++)
  1523  0014CC  0E00               	movlw	0
  1524  0014CE  0101               	movlb	1	; () banked
  1525  0014D0  6F2B               	movwf	main@i& (0+255),b
  1526  0014D2                     l5527:
  1527                           
  1528                           ; BSR set to: 1
  1529  0014D2  0E1D               	movlw	29
  1530  0014D4  652B               	cpfsgt	main@i& (0+255),b
  1531  0014D6  D001               	goto	l159
  1532  0014D8  D028               	goto	u6240
  1533  0014DA                     l159:
  1534                           
  1535                           ; BSR set to: 1
  1536                           ;color_3.c: 277: {
  1537                           ;color_3.c: 278: _delay((unsigned long)((10)*(16000000/4000.0)));
  1538                           
  1539                           ; BSR set to: 1
  1540  0014DA  0E34               	movlw	52
  1541  0014DC  0100               	movlb	0	; () banked
  1542  0014DE  6FE2               	movwf	??_main& (0+255),b
  1543  0014E0  0EF1               	movlw	241
  1544  0014E2                     u6327:
  1545  0014E2  2EE8               	decfsz	wreg,f,c
  1546  0014E4  D7FE               	bra	u6327
  1547  0014E6  2FE2               	decfsz	??_main& (0+255),f,b
  1548  0014E8  D7FC               	bra	u6327
  1549  0014EA  D000               	nop2	
  1550                           
  1551                           ;color_3.c: 279: freq+= calcula();
  1552  0014EC  C12C  F0BA         	movff	main@freq,___fladd@b
  1553  0014F0  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1554  0014F4  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1555  0014F8  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1556  0014FC  EC47  F016         	call	_calcula	;wreg free
  1557  001500  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1558  001504  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1559  001508  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1560  00150C  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1561  001510  EC0C  F00F         	call	___fladd	;wreg free
  1562  001514  C0BA  F12C         	movff	?___fladd,main@freq
  1563  001518  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1564  00151C  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1565  001520  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1566  001524  0101               	movlb	1	; () banked
  1567  001526  2B2B               	incf	main@i& (0+255),f,b
  1568  001528  D7D4               	goto	l5527
  1569  00152A                     u6240:
  1570                           
  1571                           ; BSR set to: 1
  1572                           ;color_3.c: 280: }
  1573                           ;color_3.c: 281: freq/=30;
  1574                           
  1575                           ; BSR set to: 1
  1576  00152A  C12C  F08D         	movff	main@freq,___fldiv@b
  1577  00152E  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1578  001532  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1579  001536  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1580  00153A  0E00               	movlw	0
  1581  00153C  0100               	movlb	0	; () banked
  1582  00153E  6F91               	movwf	___fldiv@a& (0+255),b
  1583  001540  0E00               	movlw	0
  1584  001542  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1585  001544  0EF0               	movlw	240
  1586  001546  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1587  001548  0E41               	movlw	65
  1588  00154A  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1589  00154C  ECAB  F010         	call	___fldiv	;wreg free
  1590  001550  C08D  F12C         	movff	?___fldiv,main@freq
  1591  001554  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1592  001558  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1593  00155C  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1594                           
  1595                           ;color_3.c: 282: a=freq;
  1596  001560  C12C  F127         	movff	main@freq,main@a
  1597  001564  C12D  F128         	movff	main@freq+1,main@a+1
  1598  001568  C12E  F129         	movff	main@freq+2,main@a+2
  1599  00156C  C12F  F12A         	movff	main@freq+3,main@a+3
  1600                           
  1601                           ;color_3.c: 283: freq = calibra(a,1883,4824);
  1602  001570  C127  F0CE         	movff	main@a,calibra@valor
  1603  001574  C128  F0CF         	movff	main@a+1,calibra@valor+1
  1604  001578  C129  F0D0         	movff	main@a+2,calibra@valor+2
  1605  00157C  C12A  F0D1         	movff	main@a+3,calibra@valor+3
  1606  001580  0E00               	movlw	0
  1607  001582  0100               	movlb	0	; () banked
  1608  001584  6FD2               	movwf	calibra@fd& (0+255),b
  1609  001586  0E60               	movlw	96
  1610  001588  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1611  00158A  0EEB               	movlw	235
  1612  00158C  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1613  00158E  0E44               	movlw	68
  1614  001590  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1615  001592  0E00               	movlw	0
  1616  001594  6FD6               	movwf	calibra@fw& (0+255),b
  1617  001596  0EC0               	movlw	192
  1618  001598  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1619  00159A  0E96               	movlw	150
  1620  00159C  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1621  00159E  0E45               	movlw	69
  1622  0015A0  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1623  0015A2  EC3A  F017         	call	_calibra	;wreg free
  1624  0015A6  C0CE  F12C         	movff	?_calibra,main@freq
  1625  0015AA  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1626  0015AE  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1627  0015B2  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1628                           
  1629                           ;color_3.c: 284: sprintf(value,"%5.3f",freq);
  1630  0015B6  0E30               	movlw	low _value
  1631  0015B8  0100               	movlb	0	; () banked
  1632  0015BA  6FD6               	movwf	sprintf@sp& (0+255),b
  1633  0015BC  0E01               	movlw	high _value
  1634  0015BE  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1635  0015C0  0EA3               	movlw	low STR_2
  1636  0015C2  6FD8               	movwf	sprintf@f& (0+255),b
  1637  0015C4  0E06               	movlw	high STR_2
  1638  0015C6  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1639  0015C8  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1640  0015CC  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1641  0015D0  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1642  0015D4  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1643  0015D8  EC5D  F003         	call	_sprintf	;wreg free
  1644                           
  1645                           ;color_3.c: 285: lcd_gotoxy(1,2);
  1646  0015DC  0E02               	movlw	2
  1647  0015DE  6E31               	movwf	lcd_gotoxy@y,c
  1648  0015E0  0E01               	movlw	1
  1649  0015E2  ECD9  F019         	call	_lcd_gotoxy
  1650                           
  1651                           ;color_3.c: 286: lcd_msg("A= ");
  1652  0015E6  0EA9               	movlw	low STR_9
  1653  0015E8  6E32               	movwf	lcd_msg@c,c
  1654  0015EA  0E06               	movlw	high STR_9
  1655  0015EC  6E33               	movwf	lcd_msg@c+1,c
  1656  0015EE  ECEC  F018         	call	_lcd_msg	;wreg free
  1657                           
  1658                           ;color_3.c: 287: lcd_msg(value);
  1659  0015F2  0E30               	movlw	low _value
  1660  0015F4  6E32               	movwf	lcd_msg@c,c
  1661  0015F6  0E01               	movlw	high _value
  1662  0015F8  6E33               	movwf	lcd_msg@c+1,c
  1663  0015FA  ECEC  F018         	call	_lcd_msg	;wreg free
  1664                           
  1665                           ;color_3.c: 288: freq=0.0;
  1666  0015FE  0E00               	movlw	0
  1667  001600  0101               	movlb	1	; () banked
  1668  001602  6F2C               	movwf	main@freq& (0+255),b
  1669  001604  0E00               	movlw	0
  1670  001606  6F2D               	movwf	(main@freq+1)& (0+255),b
  1671  001608  0E00               	movlw	0
  1672  00160A  6F2E               	movwf	(main@freq+2)& (0+255),b
  1673  00160C  0E00               	movlw	0
  1674  00160E  6F2F               	movwf	(main@freq+3)& (0+255),b
  1675                           
  1676                           ; BSR set to: 1
  1677                           ;color_3.c: 289: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1678  001610  0E15               	movlw	21
  1679  001612  0100               	movlb	0	; () banked
  1680  001614  6FE3               	movwf	(??_main+1)& (0+255),b
  1681  001616  0E4B               	movlw	75
  1682  001618  6FE2               	movwf	??_main& (0+255),b
  1683  00161A  0EBE               	movlw	190
  1684  00161C                     u6337:
  1685  00161C  2EE8               	decfsz	wreg,f,c
  1686  00161E  D7FE               	bra	u6337
  1687  001620  2FE2               	decfsz	??_main& (0+255),f,b
  1688  001622  D7FC               	bra	u6337
  1689  001624  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1690  001626  D7FA               	bra	u6337
  1691  001628  F000               	nop	
  1692                           
  1693                           ;color_3.c: 291: freq=(((a) < (r)) ? (a) : (r));
  1694  00162A  C127  F02E         	movff	main@a,___flge@ff1
  1695  00162E  C128  F02F         	movff	main@a+1,___flge@ff1+1
  1696  001632  C129  F030         	movff	main@a+2,___flge@ff1+2
  1697  001636  C12A  F031         	movff	main@a+3,___flge@ff1+3
  1698  00163A  C123  F032         	movff	main@r,___flge@ff2
  1699  00163E  C124  F033         	movff	main@r+1,___flge@ff2+1
  1700  001642  C125  F034         	movff	main@r+2,___flge@ff2+2
  1701  001646  C126  F035         	movff	main@r+3,___flge@ff2+3
  1702  00164A  ECB7  F015         	call	___flge	;wreg free
  1703  00164E  A0D8               	btfss	status,0,c
  1704  001650  D009               	goto	l162
  1705  001652  C123  F12C         	movff	main@r,main@freq
  1706  001656  C124  F12D         	movff	main@r+1,main@freq+1
  1707  00165A  C125  F12E         	movff	main@r+2,main@freq+2
  1708  00165E  C126  F12F         	movff	main@r+3,main@freq+3
  1709  001662  D513               	goto	l152
  1710  001664                     l162:
  1711  001664  C127  F12C         	movff	main@a,main@freq
  1712  001668  C128  F12D         	movff	main@a+1,main@freq+1
  1713  00166C  C129  F12E         	movff	main@a+2,main@freq+2
  1714  001670  C12A  F12F         	movff	main@a+3,main@freq+3
  1715  001674  D50A               	goto	l152
  1716  001676                     __end_of_main:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           intcon	equ	0xFF2
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _sprintf *****************
  1725 ;; Defined at:
  1726 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  sp              2   86[BANK0 ] PTR unsigned char 
  1729 ;;		 -> value(8), 
  1730 ;;  f               2   88[BANK0 ] PTR const unsigned char 
  1731 ;;		 -> STR_8(6), STR_6(6), STR_4(6), STR_2(6), 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  fval            4   20[BANK1 ] PTR const unsigned char 
  1734 ;;  tmpval          4   14[BANK1 ] struct .
  1735 ;;  val             4    6[BANK1 ] unsigned long 
  1736 ;;  cp              3    0        PTR const unsigned char 
  1737 ;;  prec            2   24[BANK1 ] int 
  1738 ;;  exp             2   18[BANK1 ] int 
  1739 ;;  width           2   12[BANK1 ] int 
  1740 ;;  flag            2   10[BANK1 ] unsigned short 
  1741 ;;  ap              2    4[BANK1 ] PTR void [1]
  1742 ;;		 -> ?_sprintf(2), 
  1743 ;;  len             2    0        unsigned int 
  1744 ;;  c               1   26[BANK1 ] char 
  1745 ;;  d               1    0        unsigned char 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  2   86[BANK0 ] int 
  1748 ;; Registers used:
  1749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1755 ;;      Params:         0       8       0       0       0       0       0
  1756 ;;      Locals:         0       0      27       0       0       0       0
  1757 ;;      Temps:          0       4       0       0       0       0       0
  1758 ;;      Totals:         0      12      27       0       0       0       0
  1759 ;;Total ram usage:       39 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    4
  1762 ;; This function calls:
  1763 ;;		___awdiv
  1764 ;;		___fladd
  1765 ;;		___flge
  1766 ;;		___flmul
  1767 ;;		___flneg
  1768 ;;		___flsub
  1769 ;;		___fltol
  1770 ;;		___lldiv
  1771 ;;		___llmod
  1772 ;;		___wmul
  1773 ;;		___xxtofl
  1774 ;;		__div_to_l_
  1775 ;;		__tdiv_to_l_
  1776 ;;		_fround
  1777 ;;		_isdigit
  1778 ;;		_scale
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text1
  1785  0006BA                     __ptext1:
  1786                           	opt stack 0
  1787  0006BA                     _sprintf:
  1788                           	opt stack 26
  1789                           
  1790                           ;doprnt.c: 494: va_list ap;
  1791                           ;doprnt.c: 499: signed char c;
  1792                           ;doprnt.c: 501: int width;
  1793                           ;doprnt.c: 504: int prec;
  1794                           ;doprnt.c: 508: unsigned short flag;
  1795                           ;doprnt.c: 515: char d;
  1796                           ;doprnt.c: 516: double fval;
  1797                           ;doprnt.c: 517: int exp;
  1798                           ;doprnt.c: 523: union {
  1799                           ;doprnt.c: 524: unsigned long vd;
  1800                           ;doprnt.c: 525: double integ;
  1801                           ;doprnt.c: 526: } tmpval;
  1802                           ;doprnt.c: 528: unsigned long val;
  1803                           ;doprnt.c: 529: unsigned len;
  1804                           ;doprnt.c: 530: const char * cp;
  1805                           ;doprnt.c: 533: *ap = __va_start();
  1806                           
  1807                           ;incstack = 0
  1808  0006BA  0EDA               	movlw	low (?_sprintf+4)
  1809  0006BC  0101               	movlb	1	; () banked
  1810  0006BE  6F04               	movwf	sprintf@ap& (0+255),b
  1811  0006C0  0E00               	movlw	high (?_sprintf+4)
  1812  0006C2  6F05               	movwf	(sprintf@ap+1)& (0+255),b
  1813                           
  1814                           ;doprnt.c: 536: while(c = *f++) {
  1815  0006C4  EF0A  F008         	goto	l304
  1816  0006C8                     
  1817                           ; BSR set to: 1
  1818                           ;doprnt.c: 538: if(c != '%')
  1819                           
  1820                           ; BSR set to: 1
  1821  0006C8  0E25               	movlw	37
  1822  0006CA  191A               	xorwf	sprintf@c& (0+255),w,b
  1823  0006CC  B4D8               	btfsc	status,2,c
  1824  0006CE  D009               	goto	l233
  1825                           
  1826                           ; BSR set to: 1
  1827                           ;doprnt.c: 540: {
  1828                           ;doprnt.c: 541: ((*sp++ = (c)));
  1829  0006D0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  1830  0006D4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  1831  0006D8  C11A  FFDF         	movff	sprintf@c,indf2
  1832                           
  1833                           ; BSR set to: 1
  1834  0006DC  0100               	movlb	0	; () banked
  1835  0006DE  EF08  F008         	goto	l5365
  1836  0006E2                     l233:
  1837                           
  1838                           ;doprnt.c: 543: }
  1839                           ;doprnt.c: 546: width = 0;
  1840                           
  1841                           ; BSR set to: 0
  1842  0006E2  0E00               	movlw	0
  1843  0006E4  0101               	movlb	1	; () banked
  1844  0006E6  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1845  0006E8  0E00               	movlw	0
  1846  0006EA  6F0C               	movwf	sprintf@width& (0+255),b
  1847                           
  1848                           ;doprnt.c: 548: flag = 0;
  1849  0006EC  0E00               	movlw	0
  1850  0006EE  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  1851  0006F0  0E00               	movlw	0
  1852  0006F2  6F0A               	movwf	sprintf@flag& (0+255),b
  1853                           
  1854                           ; BSR set to: 1
  1855                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1856  0006F4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1857  0006F8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1858  0006FC                     	if	0	;tblptru may be non-zero
  1859  0006FC                     	endif
  1860  0006FC                     	if	0	;tblptru may be non-zero
  1861  0006FC                     	endif
  1862  0006FC  0008               	tblrd		*
  1863  0006FE  50F5               	movf	tablat,w,c
  1864  000700  EC4C  F01A         	call	_isdigit
  1865  000704  A0D8               	btfss	status,0,c
  1866  000706  D038               	goto	u5750
  1867                           
  1868                           ;doprnt.c: 598: width = 0;
  1869  000708  0E00               	movlw	0
  1870  00070A  0101               	movlb	1	; () banked
  1871  00070C  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1872  00070E  0E00               	movlw	0
  1873  000710  6F0C               	movwf	sprintf@width& (0+255),b
  1874  000712                     
  1875                           ;doprnt.c: 600: width *= 10;
  1876                           
  1877                           ; BSR set to: 1
  1878  000712  C10C  F02E         	movff	sprintf@width,___wmul@multiplier
  1879  000716  C10D  F02F         	movff	sprintf@width+1,___wmul@multiplier+1
  1880  00071A  0E00               	movlw	0
  1881  00071C  6E31               	movwf	___wmul@multiplicand+1,c
  1882  00071E  0E0A               	movlw	10
  1883  000720  6E30               	movwf	___wmul@multiplicand,c
  1884  000722  EC39  F01A         	call	___wmul	;wreg free
  1885  000726  C02E  F10C         	movff	?___wmul,sprintf@width
  1886  00072A  C02F  F10D         	movff	?___wmul+1,sprintf@width+1
  1887                           
  1888                           ;doprnt.c: 601: width += *f++ - '0';
  1889  00072E  0ED0               	movlw	208
  1890  000730  0100               	movlb	0	; () banked
  1891  000732  6FDE               	movwf	??_sprintf& (0+255),b
  1892  000734  0EFF               	movlw	255
  1893  000736  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  1894  000738  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1895  00073C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1896  000740                     	if	0	;tblptru may be non-zero
  1897  000740                     	endif
  1898  000740                     	if	0	;tblptru may be non-zero
  1899  000740                     	endif
  1900  000740  0008               	tblrd		*
  1901  000742  50F5               	movf	tablat,w,c
  1902  000744  6FE0               	movwf	(??_sprintf+2)& (0+255),b
  1903  000746  6BE1               	clrf	(??_sprintf+3)& (0+255),b
  1904  000748  51DE               	movf	??_sprintf& (0+255),w,b
  1905  00074A  27E0               	addwf	(??_sprintf+2)& (0+255),f,b
  1906  00074C  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  1907  00074E  23E1               	addwfc	(??_sprintf+3)& (0+255),f,b
  1908  000750  51E0               	movf	(??_sprintf+2)& (0+255),w,b
  1909  000752  0101               	movlb	1	; () banked
  1910  000754  270C               	addwf	sprintf@width& (0+255),f,b
  1911  000756  0100               	movlb	0	; () banked
  1912  000758  51E1               	movf	(??_sprintf+3)& (0+255),w,b
  1913  00075A  0101               	movlb	1	; () banked
  1914  00075C  230D               	addwfc	(sprintf@width+1)& (0+255),f,b
  1915                           
  1916                           ; BSR set to: 1
  1917  00075E  0100               	movlb	0	; () banked
  1918  000760  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1919  000762  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1923  000764  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1924  000768  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1925  00076C                     	if	0	;tblptru may be non-zero
  1926  00076C                     	endif
  1927  00076C                     	if	0	;tblptru may be non-zero
  1928  00076C                     	endif
  1929  00076C  0008               	tblrd		*
  1930  00076E  50F5               	movf	tablat,w,c
  1931  000770  EC4C  F01A         	call	_isdigit
  1932  000774  B0D8               	btfsc	status,0,c
  1933  000776  D7CD               	goto	l235
  1934  000778                     u5750:
  1935                           
  1936                           ;doprnt.c: 608: }
  1937                           ;doprnt.c: 611: if(*f == '.') {
  1938  000778  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1939  00077C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1940  000780                     	if	0	;tblptru may be non-zero
  1941  000780                     	endif
  1942  000780                     	if	0	;tblptru may be non-zero
  1943  000780                     	endif
  1944  000780  0008               	tblrd		*
  1945  000782  50F5               	movf	tablat,w,c
  1946  000784  0A2E               	xorlw	46
  1947  000786  A4D8               	btfss	status,2,c
  1948  000788  D033               	goto	l237
  1949                           
  1950                           ;doprnt.c: 612: flag |= 0x4000;
  1951  00078A  0101               	movlb	1	; () banked
  1952  00078C  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  1953                           
  1954                           ;doprnt.c: 613: f++;
  1955  00078E  0100               	movlb	0	; () banked
  1956  000790  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1957  000792  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;doprnt.c: 620: {
  1961                           ;doprnt.c: 621: prec = 0;
  1962  000794  0E00               	movlw	0
  1963  000796  0101               	movlb	1	; () banked
  1964  000798  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1965  00079A  0E00               	movlw	0
  1966  00079C  6F18               	movwf	sprintf@prec& (0+255),b
  1967                           
  1968                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1969  00079E  D01D               	goto	l238
  1970  0007A0                     
  1971                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1972                           
  1973                           ; BSR set to: 1
  1974  0007A0  C118  F02E         	movff	sprintf@prec,___wmul@multiplier
  1975  0007A4  C119  F02F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1976  0007A8  0E00               	movlw	0
  1977  0007AA  6E31               	movwf	___wmul@multiplicand+1,c
  1978  0007AC  0E0A               	movlw	10
  1979  0007AE  6E30               	movwf	___wmul@multiplicand,c
  1980  0007B0  EC39  F01A         	call	___wmul	;wreg free
  1981  0007B4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1982  0007B8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1983  0007BC                     	if	0	;tblptru may be non-zero
  1984  0007BC                     	endif
  1985  0007BC                     	if	0	;tblptru may be non-zero
  1986  0007BC                     	endif
  1987  0007BC  0008               	tblrd		*
  1988  0007BE  50F5               	movf	tablat,w,c
  1989  0007C0  262E               	addwf	?___wmul,f,c
  1990  0007C2  0E00               	movlw	0
  1991  0007C4  222F               	addwfc	?___wmul+1,f,c
  1992  0007C6  0ED0               	movlw	208
  1993  0007C8  242E               	addwf	?___wmul,w,c
  1994  0007CA  0101               	movlb	1	; () banked
  1995  0007CC  6F18               	movwf	sprintf@prec& (0+255),b
  1996  0007CE  0EFF               	movlw	255
  1997  0007D0  202F               	addwfc	?___wmul+1,w,c
  1998  0007D2  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1999                           
  2000                           ; BSR set to: 1
  2001  0007D4  0100               	movlb	0	; () banked
  2002  0007D6  4BD8               	infsnz	sprintf@f& (0+255),f,b
  2003  0007D8  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  2004  0007DA                     l238:
  2005                           
  2006                           ; BSR set to: 0
  2007  0007DA  C0D8  FFF6         	movff	sprintf@f,tblptrl
  2008  0007DE  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  2009  0007E2                     	if	0	;tblptru may be non-zero
  2010  0007E2                     	endif
  2011  0007E2                     	if	0	;tblptru may be non-zero
  2012  0007E2                     	endif
  2013  0007E2  0008               	tblrd		*
  2014  0007E4  50F5               	movf	tablat,w,c
  2015  0007E6  EC4C  F01A         	call	_isdigit
  2016  0007EA  A0D8               	btfss	status,0,c
  2017  0007EC  D00A               	goto	l242
  2018  0007EE  D7D8               	goto	l239
  2019  0007F0                     l237:
  2020                           
  2021                           ;doprnt.c: 626: prec = 0;
  2022  0007F0  0E00               	movlw	0
  2023  0007F2  0101               	movlb	1	; () banked
  2024  0007F4  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2025  0007F6  0E00               	movlw	0
  2026  0007F8  6F18               	movwf	sprintf@prec& (0+255),b
  2027                           
  2028                           ; BSR set to: 1
  2029                           ;doprnt.c: 628: flag |= 0x1000;
  2030  0007FA  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  2031                           
  2032                           ; BSR set to: 1
  2033                           ;doprnt.c: 630: }
  2034                           ;doprnt.c: 635: switch(c = *f++) {
  2035  0007FC  D002               	goto	l242
  2036  0007FE                     
  2037                           ; BSR set to: 1
  2038                           ;doprnt.c: 663: flag |= 0x400;
  2039                           
  2040                           ; BSR set to: 1
  2041  0007FE  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  2042                           
  2043                           ;doprnt.c: 664: break;
  2044  000800  D014               	goto	l246
  2045  000802                     l242:
  2046                           
  2047                           ; BSR set to: 1
  2048  000802  C0D8  FFF6         	movff	sprintf@f,tblptrl
  2049  000806  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  2050  00080A  0100               	movlb	0	; () banked
  2051  00080C  4BD8               	infsnz	sprintf@f& (0+255),f,b
  2052  00080E  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  2053  000810                     	if	0	;tblptru may be non-zero
  2054  000810                     	endif
  2055  000810                     	if	0	;tblptru may be non-zero
  2056  000810                     	endif
  2057  000810  0008               	tblrd		*
  2058  000812  CFF5 F11A          	movff	tablat,sprintf@c
  2059  000816  0101               	movlb	1	; () banked
  2060  000818  511A               	movf	sprintf@c& (0+255),w,b
  2061                           
  2062                           ; Switch size 1, requested type "space"
  2063                           ; Number of cases is 2, Range of values is 0 to 102
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte            7     4 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  00081A  0A00               	xorlw	0	; case 0
  2069  00081C  B4D8               	btfsc	status,2,c
  2070  00081E  EF19  F008         	goto	u6160
  2071  000822  0A66               	xorlw	102	; case 102
  2072  000824  B4D8               	btfsc	status,2,c
  2073  000826  D7EB               	goto	l245
  2074  000828  D3F5               	goto	l304
  2075  00082A                     l246:
  2076                           
  2077                           ; BSR set to: 1
  2078                           ;doprnt.c: 825: if(flag & (0x700)) {
  2079                           
  2080                           ; BSR set to: 1
  2081  00082A  0E07               	movlw	7
  2082  00082C  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2083  00082E  B4D8               	btfsc	status,2,c
  2084  000830  D349               	goto	l248
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;doprnt.c: 827: if(flag & 0x1000)
  2088  000832  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  2089  000834  D004               	goto	l249
  2090                           
  2091                           ; BSR set to: 1
  2092                           ;doprnt.c: 829: prec = 6;
  2093  000836  0E00               	movlw	0
  2094  000838  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2095  00083A  0E06               	movlw	6
  2096  00083C  6F18               	movwf	sprintf@prec& (0+255),b
  2097  00083E                     l249:
  2098                           
  2099                           ; BSR set to: 1
  2100                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2101                           
  2102                           ; BSR set to: 1
  2103  00083E  C104  FFD9         	movff	sprintf@ap,fsr2l
  2104  000842  C105  FFDA         	movff	sprintf@ap+1,fsr2h
  2105  000846  CFDE F114          	movff	postinc2,sprintf@fval
  2106  00084A  CFDE F115          	movff	postinc2,sprintf@fval+1
  2107  00084E  CFDE F116          	movff	postinc2,sprintf@fval+2
  2108  000852  CFDE F117          	movff	postinc2,sprintf@fval+3
  2109                           
  2110                           ; BSR set to: 1
  2111  000856  0E04               	movlw	4
  2112  000858  2704               	addwf	sprintf@ap& (0+255),f,b
  2113  00085A  0E00               	movlw	0
  2114  00085C  2305               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;doprnt.c: 831: if(fval < 0.0) {
  2118  00085E  AF17               	btfss	(sprintf@fval+3)& (0+255),7,b
  2119  000860  D015               	goto	l250
  2120                           
  2121                           ; BSR set to: 1
  2122                           ;doprnt.c: 832: fval = -fval;
  2123  000862  C114  F02E         	movff	sprintf@fval,___flneg@f1
  2124  000866  C115  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  2125  00086A  C116  F030         	movff	sprintf@fval+2,___flneg@f1+2
  2126  00086E  C117  F031         	movff	sprintf@fval+3,___flneg@f1+3
  2127  000872  EC0C  F01A         	call	___flneg	;wreg free
  2128  000876  C02E  F114         	movff	?___flneg,sprintf@fval
  2129  00087A  C02F  F115         	movff	?___flneg+1,sprintf@fval+1
  2130  00087E  C030  F116         	movff	?___flneg+2,sprintf@fval+2
  2131  000882  C031  F117         	movff	?___flneg+3,sprintf@fval+3
  2132                           
  2133                           ;doprnt.c: 833: flag |= 0x03;
  2134  000886  0E03               	movlw	3
  2135  000888  0101               	movlb	1	; () banked
  2136  00088A  130A               	iorwf	sprintf@flag& (0+255),f,b
  2137  00088C                     l250:
  2138                           
  2139                           ; BSR set to: 1
  2140                           ;doprnt.c: 834: }
  2141                           ;doprnt.c: 835: exp = 0;
  2142                           
  2143                           ; BSR set to: 1
  2144  00088C  0E00               	movlw	0
  2145  00088E  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2146  000890  0E00               	movlw	0
  2147  000892  6F12               	movwf	sprintf@exp& (0+255),b
  2148                           
  2149                           ; BSR set to: 1
  2150                           ;doprnt.c: 836: if( fval!=0) {
  2151  000894  5114               	movf	sprintf@fval& (0+255),w,b
  2152  000896  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2153  000898  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2154  00089A  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2155  00089C  B4D8               	btfsc	status,2,c
  2156  00089E  D082               	goto	l255
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2160  0008A0  3516               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2161  0008A2  3517               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2162  0008A4  0F82               	addlw	130
  2163  0008A6  6F12               	movwf	sprintf@exp& (0+255),b
  2164  0008A8  6B13               	clrf	(sprintf@exp+1)& (0+255),b
  2165  0008AA  0EFF               	movlw	255
  2166  0008AC  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2167                           
  2168                           ; BSR set to: 1
  2169                           ;doprnt.c: 838: exp--;
  2170  0008AE  0712               	decf	sprintf@exp& (0+255),f,b
  2171  0008B0  A0D8               	btfss	status,0,c
  2172  0008B2  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2173                           
  2174                           ; BSR set to: 1
  2175                           ;doprnt.c: 839: exp *= 3;
  2176  0008B4  C112  F02E         	movff	sprintf@exp,___wmul@multiplier
  2177  0008B8  C113  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2178  0008BC  0E00               	movlw	0
  2179  0008BE  6E31               	movwf	___wmul@multiplicand+1,c
  2180  0008C0  0E03               	movlw	3
  2181  0008C2  6E30               	movwf	___wmul@multiplicand,c
  2182  0008C4  EC39  F01A         	call	___wmul	;wreg free
  2183  0008C8  C02E  F112         	movff	?___wmul,sprintf@exp
  2184  0008CC  C02F  F113         	movff	?___wmul+1,sprintf@exp+1
  2185                           
  2186                           ;doprnt.c: 840: exp /= 10;
  2187  0008D0  C112  F034         	movff	sprintf@exp,___awdiv@dividend
  2188  0008D4  C113  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  2189  0008D8  0E00               	movlw	0
  2190  0008DA  6E37               	movwf	___awdiv@divisor+1,c
  2191  0008DC  0E0A               	movlw	10
  2192  0008DE  6E36               	movwf	___awdiv@divisor,c
  2193  0008E0  ECFE  F017         	call	___awdiv	;wreg free
  2194  0008E4  C034  F112         	movff	?___awdiv,sprintf@exp
  2195  0008E8  C035  F113         	movff	?___awdiv+1,sprintf@exp+1
  2196                           
  2197                           ;doprnt.c: 841: if(exp < 0)
  2198  0008EC  0101               	movlb	1	; () banked
  2199  0008EE  AF13               	btfss	(sprintf@exp+1)& (0+255),7,b
  2200  0008F0  D003               	goto	l252
  2201                           
  2202                           ; BSR set to: 1
  2203                           ;doprnt.c: 842: exp--;
  2204  0008F2  0712               	decf	sprintf@exp& (0+255),f,b
  2205  0008F4  A0D8               	btfss	status,0,c
  2206  0008F6  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2207  0008F8                     l252:
  2208                           
  2209                           ; BSR set to: 1
  2210                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2211                           
  2212                           ; BSR set to: 1
  2213  0008F8  5112               	movf	sprintf@exp& (0+255),w,b
  2214  0008FA  0800               	sublw	0
  2215  0008FC  EC3B  F00B         	call	_scale
  2216  000900  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2217  000904  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2218  000908  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2219  00090C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2220                           
  2221                           ;doprnt.c: 847: tmpval.integ *= fval;
  2222  000910  C10E  F03C         	movff	sprintf@tmpval,___flmul@b
  2223  000914  C10F  F03D         	movff	sprintf@tmpval+1,___flmul@b+1
  2224  000918  C110  F03E         	movff	sprintf@tmpval+2,___flmul@b+2
  2225  00091C  C111  F03F         	movff	sprintf@tmpval+3,___flmul@b+3
  2226  000920  C114  F040         	movff	sprintf@fval,___flmul@a
  2227  000924  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2228  000928  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2229  00092C  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2230  000930  EC63  F00D         	call	___flmul	;wreg free
  2231  000934  C03C  F10E         	movff	?___flmul,sprintf@tmpval
  2232  000938  C03D  F10F         	movff	?___flmul+1,sprintf@tmpval+1
  2233  00093C  C03E  F110         	movff	?___flmul+2,sprintf@tmpval+2
  2234  000940  C03F  F111         	movff	?___flmul+3,sprintf@tmpval+3
  2235                           
  2236                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2237  000944  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2238  000948  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2239  00094C  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2240  000950  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2241  000954  0E00               	movlw	0
  2242  000956  6E32               	movwf	___flge@ff2,c
  2243  000958  0E00               	movlw	0
  2244  00095A  6E33               	movwf	___flge@ff2+1,c
  2245  00095C  0E80               	movlw	128
  2246  00095E  6E34               	movwf	___flge@ff2+2,c
  2247  000960  0E3F               	movlw	63
  2248  000962  6E35               	movwf	___flge@ff2+3,c
  2249  000964  ECB7  F015         	call	___flge	;wreg free
  2250  000968  B0D8               	btfsc	status,0,c
  2251  00096A  D005               	goto	l253
  2252                           
  2253                           ;doprnt.c: 849: exp--;
  2254  00096C  0101               	movlb	1	; () banked
  2255  00096E  0712               	decf	sprintf@exp& (0+255),f,b
  2256  000970  A0D8               	btfss	status,0,c
  2257  000972  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2258  000974  D017               	goto	l255
  2259  000976                     l253:
  2260                           
  2261                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2262                           
  2263                           ; BSR set to: 1
  2264  000976  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2265  00097A  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2266  00097E  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2267  000982  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2268  000986  0E00               	movlw	0
  2269  000988  6E32               	movwf	___flge@ff2,c
  2270  00098A  0E00               	movlw	0
  2271  00098C  6E33               	movwf	___flge@ff2+1,c
  2272  00098E  0E20               	movlw	32
  2273  000990  6E34               	movwf	___flge@ff2+2,c
  2274  000992  0E41               	movlw	65
  2275  000994  6E35               	movwf	___flge@ff2+3,c
  2276  000996  ECB7  F015         	call	___flge	;wreg free
  2277  00099A  A0D8               	btfss	status,0,c
  2278  00099C  D003               	goto	l255
  2279                           
  2280                           ;doprnt.c: 851: exp++;
  2281  00099E  0101               	movlb	1	; () banked
  2282  0009A0  4B12               	infsnz	sprintf@exp& (0+255),f,b
  2283  0009A2  2B13               	incf	(sprintf@exp+1)& (0+255),f,b
  2284  0009A4                     l255:
  2285                           
  2286                           ;doprnt.c: 852: }
  2287                           ;doprnt.c: 1112: if(prec <= 12)
  2288                           
  2289                           ; BSR set to: 1
  2290                           
  2291                           ; BSR set to: 1
  2292                           
  2293                           ; BSR set to: 1
  2294  0009A4  0101               	movlb	1	; () banked
  2295  0009A6  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2296  0009A8  D006               	goto	u5850
  2297  0009AA  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2298  0009AC  E121               	bnz	l5203
  2299  0009AE  0E0D               	movlw	13
  2300  0009B0  5D18               	subwf	sprintf@prec& (0+255),w,b
  2301  0009B2  B0D8               	btfsc	status,0,c
  2302  0009B4  D01D               	goto	l256
  2303  0009B6                     u5850:
  2304                           
  2305                           ; BSR set to: 1
  2306                           ;doprnt.c: 1113: fval += fround(prec);
  2307  0009B6  C114  F0BA         	movff	sprintf@fval,___fladd@b
  2308  0009BA  C115  F0BB         	movff	sprintf@fval+1,___fladd@b+1
  2309  0009BE  C116  F0BC         	movff	sprintf@fval+2,___fladd@b+2
  2310  0009C2  C117  F0BD         	movff	sprintf@fval+3,___fladd@b+3
  2311  0009C6  5118               	movf	sprintf@prec& (0+255),w,b
  2312  0009C8  EC06  F012         	call	_fround
  2313  0009CC  C08D  F0BE         	movff	?_fround,___fladd@a
  2314  0009D0  C08E  F0BF         	movff	?_fround+1,___fladd@a+1
  2315  0009D4  C08F  F0C0         	movff	?_fround+2,___fladd@a+2
  2316  0009D8  C090  F0C1         	movff	?_fround+3,___fladd@a+3
  2317  0009DC  EC0C  F00F         	call	___fladd	;wreg free
  2318  0009E0  C0BA  F114         	movff	?___fladd,sprintf@fval
  2319  0009E4  C0BB  F115         	movff	?___fladd+1,sprintf@fval+1
  2320  0009E8  C0BC  F116         	movff	?___fladd+2,sprintf@fval+2
  2321  0009EC  C0BD  F117         	movff	?___fladd+3,sprintf@fval+3
  2322  0009F0                     l256:
  2323  0009F0                     l5203:
  2324                           
  2325                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2326  0009F0  0101               	movlb	1	; () banked
  2327  0009F2  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2328  0009F4  D006               	goto	u5860
  2329  0009F6  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2330  0009F8  E124               	bnz	l5211
  2331  0009FA  0E0A               	movlw	10
  2332  0009FC  5D12               	subwf	sprintf@exp& (0+255),w,b
  2333  0009FE  B0D8               	btfsc	status,0,c
  2334  000A00  D020               	goto	u5890
  2335  000A02                     u5860:
  2336                           
  2337                           ; BSR set to: 1
  2338  000A02  5114               	movf	sprintf@fval& (0+255),w,b
  2339  000A04  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2340  000A06  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2341  000A08  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2342  000A0A  B4D8               	btfsc	status,2,c
  2343  000A0C  D065               	goto	l257
  2344                           
  2345                           ; BSR set to: 1
  2346  000A0E  C114  F096         	movff	sprintf@fval,___fltol@f1
  2347  000A12  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2348  000A16  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2349  000A1A  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2350  000A1E  ECCB  F016         	call	___fltol	;wreg free
  2351  000A22  0100               	movlb	0	; () banked
  2352  000A24  5196               	movf	?___fltol& (0+255),w,b
  2353  000A26  1197               	iorwf	(?___fltol+1)& (0+255),w,b
  2354  000A28  1198               	iorwf	(?___fltol+2)& (0+255),w,b
  2355  000A2A  1199               	iorwf	(?___fltol+3)& (0+255),w,b
  2356  000A2C  A4D8               	btfss	status,2,c
  2357  000A2E  D054               	goto	l257
  2358                           
  2359                           ; BSR set to: 0
  2360  000A30  0101               	movlb	1	; () banked
  2361  000A32  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2362  000A34  D051               	goto	l257
  2363  000A36  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2364  000A38  E104               	bnz	l5211
  2365  000A3A  0E02               	movlw	2
  2366  000A3C  5D12               	subwf	sprintf@exp& (0+255),w,b
  2367  000A3E  A0D8               	btfss	status,0,c
  2368  000A40  D04B               	goto	l257
  2369  000A42                     u5890:
  2370  000A42                     l5211:
  2371                           
  2372                           ; BSR set to: 1
  2373                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2374  000A42  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2375  000A46  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2376  000A4A  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2377  000A4E  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2378  000A52  0E5F               	movlw	95
  2379  000A54  6E32               	movwf	___flge@ff2,c
  2380  000A56  0E70               	movlw	112
  2381  000A58  6E33               	movwf	___flge@ff2+1,c
  2382  000A5A  0E89               	movlw	137
  2383  000A5C  6E34               	movwf	___flge@ff2+2,c
  2384  000A5E  0E40               	movlw	64
  2385  000A60  6E35               	movwf	___flge@ff2+3,c
  2386  000A62  ECB7  F015         	call	___flge	;wreg free
  2387  000A66  B0D8               	btfsc	status,0,c
  2388  000A68  D003               	goto	l260
  2389                           
  2390                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2391  000A6A  0101               	movlb	1	; () banked
  2392  000A6C  0EF7               	movlw	247
  2393  000A6E  D002               	goto	L1
  2394  000A70                     l260:
  2395                           
  2396                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2397                           
  2398                           ; BSR set to: 1
  2399  000A70  0101               	movlb	1	; () banked
  2400  000A72  0EF8               	movlw	248
  2401  000A74                     L1:
  2402  000A74  2712               	addwf	sprintf@exp& (0+255),f,b
  2403  000A76  0EFF               	movlw	255
  2404  000A78  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2408                           
  2409                           ; BSR set to: 1
  2410  000A7A  5112               	movf	sprintf@exp& (0+255),w,b
  2411  000A7C  EC3B  F00B         	call	_scale
  2412  000A80  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2413  000A84  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2414  000A88  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2415  000A8C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2416  000A90  C114  F02E         	movff	sprintf@fval,__div_to_l_@f1
  2417  000A94  C115  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2418  000A98  C116  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2419  000A9C  C117  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2420  000AA0  C10E  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  2421  000AA4  C10F  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2422  000AA8  C110  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2423  000AAC  C111  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2424  000AB0  EC90  F014         	call	__div_to_l_	;wreg free
  2425  000AB4  C02E  F106         	movff	?__div_to_l_,sprintf@val
  2426  000AB8  C02F  F107         	movff	?__div_to_l_+1,sprintf@val+1
  2427  000ABC  C030  F108         	movff	?__div_to_l_+2,sprintf@val+2
  2428  000AC0  C031  F109         	movff	?__div_to_l_+3,sprintf@val+3
  2429                           
  2430                           ;doprnt.c: 1129: fval = 0.0;
  2431  000AC4  0E00               	movlw	0
  2432  000AC6  0101               	movlb	1	; () banked
  2433  000AC8  6F14               	movwf	sprintf@fval& (0+255),b
  2434  000ACA  0E00               	movlw	0
  2435  000ACC  6F15               	movwf	(sprintf@fval+1)& (0+255),b
  2436  000ACE  0E00               	movlw	0
  2437  000AD0  6F16               	movwf	(sprintf@fval+2)& (0+255),b
  2438  000AD2  0E00               	movlw	0
  2439  000AD4  6F17               	movwf	(sprintf@fval+3)& (0+255),b
  2440                           
  2441                           ;doprnt.c: 1130: } else {
  2442  000AD6  D03C               	goto	l266
  2443  000AD8                     l257:
  2444                           
  2445                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2446                           
  2447                           ; BSR set to: 1
  2448  000AD8  C114  F096         	movff	sprintf@fval,___fltol@f1
  2449  000ADC  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2450  000AE0  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2451  000AE4  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2452  000AE8  ECCB  F016         	call	___fltol	;wreg free
  2453  000AEC  C096  F106         	movff	?___fltol,sprintf@val
  2454  000AF0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2455  000AF4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2456  000AF8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2457                           
  2458                           ;doprnt.c: 1132: fval -= (double)val;
  2459  000AFC  C114  F0CE         	movff	sprintf@fval,___flsub@b
  2460  000B00  C115  F0CF         	movff	sprintf@fval+1,___flsub@b+1
  2461  000B04  C116  F0D0         	movff	sprintf@fval+2,___flsub@b+2
  2462  000B08  C117  F0D1         	movff	sprintf@fval+3,___flsub@b+3
  2463  000B0C  C106  F02E         	movff	sprintf@val,___xxtofl@val
  2464  000B10  C107  F02F         	movff	sprintf@val+1,___xxtofl@val+1
  2465  000B14  C108  F030         	movff	sprintf@val+2,___xxtofl@val+2
  2466  000B18  C109  F031         	movff	sprintf@val+3,___xxtofl@val+3
  2467  000B1C  0E00               	movlw	0
  2468  000B1E  EC4F  F013         	call	___xxtofl
  2469  000B22  C02E  F0D2         	movff	?___xxtofl,___flsub@a
  2470  000B26  C02F  F0D3         	movff	?___xxtofl+1,___flsub@a+1
  2471  000B2A  C030  F0D4         	movff	?___xxtofl+2,___flsub@a+2
  2472  000B2E  C031  F0D5         	movff	?___xxtofl+3,___flsub@a+3
  2473  000B32  EC3A  F019         	call	___flsub	;wreg free
  2474  000B36  C0CE  F114         	movff	?___flsub,sprintf@fval
  2475  000B3A  C0CF  F115         	movff	?___flsub+1,sprintf@fval+1
  2476  000B3E  C0D0  F116         	movff	?___flsub+2,sprintf@fval+2
  2477  000B42  C0D1  F117         	movff	?___flsub+3,sprintf@fval+3
  2478                           
  2479                           ;doprnt.c: 1133: exp = 0;
  2480  000B46  0E00               	movlw	0
  2481  000B48  0101               	movlb	1	; () banked
  2482  000B4A  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2483  000B4C  0E00               	movlw	0
  2484  000B4E  6F12               	movwf	sprintf@exp& (0+255),b
  2485  000B50                     l266:
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;doprnt.c: 1134: }
  2489                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2490                           
  2491                           ; BSR set to: 1
  2492  000B50  0E01               	movlw	1
  2493  000B52  6F1A               	movwf	sprintf@c& (0+255),b
  2494  000B54                     l5231:
  2495                           
  2496                           ; BSR set to: 1
  2497  000B54  0E0A               	movlw	10
  2498  000B56  191A               	xorwf	sprintf@c& (0+255),w,b
  2499  000B58  B4D8               	btfsc	status,2,c
  2500  000B5A  D018               	goto	u5930
  2501                           
  2502                           ; BSR set to: 1
  2503                           ;doprnt.c: 1137: if(val < dpowers[c])
  2504                           
  2505                           ; BSR set to: 1
  2506                           
  2507                           ; BSR set to: 1
  2508  000B5C  511A               	movf	sprintf@c& (0+255),w,b
  2509  000B5E  0D04               	mullw	4
  2510  000B60  0E69               	movlw	low _dpowers
  2511  000B62  24F3               	addwf	prodl,w,c
  2512  000B64  6EF6               	movwf	tblptrl,c
  2513  000B66  0E06               	movlw	high _dpowers
  2514  000B68  20F4               	addwfc	prodh,w,c
  2515  000B6A  6EF7               	movwf	tblptrh,c
  2516  000B6C                     	if	0	;There are less than 3 active tblptr bytes
  2517  000B6C                     	endif
  2518  000B6C  0009               	tblrd		*+
  2519  000B6E  50F5               	movf	tablat,w,c
  2520  000B70  5D06               	subwf	sprintf@val& (0+255),w,b
  2521  000B72  0009               	tblrd		*+
  2522  000B74  50F5               	movf	tablat,w,c
  2523  000B76  5907               	subwfb	(sprintf@val+1)& (0+255),w,b
  2524  000B78  0009               	tblrd		*+
  2525  000B7A  50F5               	movf	tablat,w,c
  2526  000B7C  5908               	subwfb	(sprintf@val+2)& (0+255),w,b
  2527  000B7E  0009               	tblrd		*+
  2528  000B80  50F5               	movf	tablat,w,c
  2529  000B82  5909               	subwfb	(sprintf@val+3)& (0+255),w,b
  2530  000B84  A0D8               	btfss	status,0,c
  2531  000B86  D002               	goto	u5930
  2532                           
  2533                           ; BSR set to: 1
  2534                           
  2535                           ; BSR set to: 1
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;doprnt.c: 1138: break;
  2539  000B88  2B1A               	incf	sprintf@c& (0+255),f,b
  2540  000B8A  D7E4               	goto	l5231
  2541  000B8C                     u5930:
  2542                           
  2543                           ; BSR set to: 1
  2544                           ;doprnt.c: 1142: width -= prec + c + exp;
  2545                           
  2546                           ; BSR set to: 1
  2547  000B8C  C11A  F0DE         	movff	sprintf@c,??_sprintf
  2548  000B90  0100               	movlb	0	; () banked
  2549  000B92  6BDF               	clrf	(??_sprintf+1)& (0+255),b
  2550  000B94  BFDE               	btfsc	??_sprintf& (0+255),7,b
  2551  000B96  07DF               	decf	(??_sprintf+1)& (0+255),f,b
  2552  000B98  0101               	movlb	1	; () banked
  2553  000B9A  5118               	movf	sprintf@prec& (0+255),w,b
  2554  000B9C  0100               	movlb	0	; () banked
  2555  000B9E  27DE               	addwf	??_sprintf& (0+255),f,b
  2556  000BA0  0101               	movlb	1	; () banked
  2557  000BA2  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2558  000BA4  0100               	movlb	0	; () banked
  2559  000BA6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2560  000BA8  0101               	movlb	1	; () banked
  2561  000BAA  5112               	movf	sprintf@exp& (0+255),w,b
  2562  000BAC  0100               	movlb	0	; () banked
  2563  000BAE  27DE               	addwf	??_sprintf& (0+255),f,b
  2564  000BB0  0101               	movlb	1	; () banked
  2565  000BB2  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2566  000BB4  0100               	movlb	0	; () banked
  2567  000BB6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2568  000BB8  51DE               	movf	??_sprintf& (0+255),w,b
  2569  000BBA  0101               	movlb	1	; () banked
  2570  000BBC  5F0C               	subwf	sprintf@width& (0+255),f,b
  2571  000BBE  0100               	movlb	0	; () banked
  2572  000BC0  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  2573  000BC2  0101               	movlb	1	; () banked
  2574  000BC4  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  2575                           
  2576                           ;doprnt.c: 1143: if(
  2577                           ;doprnt.c: 1147: prec)
  2578  000BC6  5118               	movf	sprintf@prec& (0+255),w,b
  2579  000BC8  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2580  000BCA  B4D8               	btfsc	status,2,c
  2581  000BCC  D003               	goto	l270
  2582                           
  2583                           ; BSR set to: 1
  2584                           ;doprnt.c: 1148: width--;
  2585  000BCE  070C               	decf	sprintf@width& (0+255),f,b
  2586  000BD0  A0D8               	btfss	status,0,c
  2587  000BD2  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2588  000BD4                     l270:
  2589                           
  2590                           ; BSR set to: 1
  2591                           ;doprnt.c: 1149: if(flag & 0x03)
  2592                           
  2593                           ; BSR set to: 1
  2594  000BD4  0E03               	movlw	3
  2595  000BD6  150A               	andwf	sprintf@flag& (0+255),w,b
  2596  000BD8  0100               	movlb	0	; () banked
  2597  000BDA  6FDE               	movwf	??_sprintf& (0+255),b
  2598  000BDC  0E00               	movlw	0
  2599  000BDE  0101               	movlb	1	; () banked
  2600  000BE0  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2601  000BE2  0100               	movlb	0	; () banked
  2602  000BE4  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2603  000BE6  51DE               	movf	??_sprintf& (0+255),w,b
  2604  000BE8  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2605  000BEA  B4D8               	btfsc	status,2,c
  2606  000BEC  D00E               	goto	l272
  2607  000BEE  D009               	goto	l5255
  2608  000BF0                     l5251:
  2609                           
  2610                           ; BSR set to: 1
  2611                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2612  000BF0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2613  000BF4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2614  000BF8  0E20               	movlw	32
  2615  000BFA  6EDF               	movwf	indf2,c
  2616                           
  2617                           ; BSR set to: 1
  2618  000BFC  0100               	movlb	0	; () banked
  2619  000BFE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2620  000C00  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2621  000C02                     l5255:
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;doprnt.c: 1182: width--;
  2625  000C02  0101               	movlb	1	; () banked
  2626  000C04  070C               	decf	sprintf@width& (0+255),f,b
  2627  000C06  A0D8               	btfss	status,0,c
  2628  000C08  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2629  000C0A                     l272:
  2630                           
  2631                           ; BSR set to: 1
  2632  000C0A  0101               	movlb	1	; () banked
  2633  000C0C  BF0D               	btfsc	(sprintf@width+1)& (0+255),7,b
  2634  000C0E  D005               	goto	u5960
  2635  000C10  510D               	movf	(sprintf@width+1)& (0+255),w,b
  2636  000C12  E1EE               	bnz	l5251
  2637  000C14  050C               	decf	sprintf@width& (0+255),w,b
  2638  000C16  B0D8               	btfsc	status,0,c
  2639  000C18  D7EB               	goto	l273
  2640  000C1A                     u5960:
  2641                           
  2642                           ; BSR set to: 1
  2643                           ;doprnt.c: 1183: }
  2644                           ;doprnt.c: 1188: if(flag & 0x03)
  2645                           
  2646                           ; BSR set to: 1
  2647  000C1A  0E03               	movlw	3
  2648  000C1C  150A               	andwf	sprintf@flag& (0+255),w,b
  2649  000C1E  0100               	movlb	0	; () banked
  2650  000C20  6FDE               	movwf	??_sprintf& (0+255),b
  2651  000C22  0E00               	movlw	0
  2652  000C24  0101               	movlb	1	; () banked
  2653  000C26  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2654  000C28  0100               	movlb	0	; () banked
  2655  000C2A  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2656  000C2C  51DE               	movf	??_sprintf& (0+255),w,b
  2657  000C2E  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2658  000C30  B4D8               	btfsc	status,2,c
  2659  000C32  D053               	goto	l276
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2663  000C34  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2664  000C38  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2665  000C3C  0E2D               	movlw	45
  2666  000C3E  6EDF               	movwf	indf2,c
  2667  000C40  D04A               	goto	L2
  2668  000C42                     
  2669                           ;doprnt.c: 1200: {
  2670                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2671                           
  2672                           ; BSR set to: 0
  2673  000C42  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2674  000C46  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2675  000C4A  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2676  000C4E  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2677  000C52  0101               	movlb	1	; () banked
  2678  000C54  511A               	movf	sprintf@c& (0+255),w,b
  2679  000C56  0D04               	mullw	4
  2680  000C58  0E69               	movlw	low _dpowers
  2681  000C5A  24F3               	addwf	prodl,w,c
  2682  000C5C  6EF6               	movwf	tblptrl,c
  2683  000C5E  0E06               	movlw	high _dpowers
  2684  000C60  20F4               	addwfc	prodh,w,c
  2685  000C62  6EF7               	movwf	tblptrh,c
  2686  000C64                     	if	0	;There are less than 3 active tblptr bytes
  2687  000C64                     	endif
  2688  000C64  0009               	tblrd		*+
  2689  000C66  CFF5 F032          	movff	tablat,___lldiv@divisor
  2690  000C6A  0009               	tblrd		*+
  2691  000C6C  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2692  000C70  0009               	tblrd		*+
  2693  000C72  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2694  000C76  000A               	tblrd		*-
  2695  000C78  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2696  000C7C  EC40  F018         	call	___lldiv	;wreg free
  2697  000C80  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2698  000C84  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2699  000C88  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2700  000C8C  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2701                           
  2702                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2703  000C90  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2704  000C94  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2705  000C98  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2706  000C9C  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2707  000CA0  0E0A               	movlw	10
  2708  000CA2  6E32               	movwf	___llmod@divisor,c
  2709  000CA4  0E00               	movlw	0
  2710  000CA6  6E33               	movwf	___llmod@divisor+1,c
  2711  000CA8  0E00               	movlw	0
  2712  000CAA  6E34               	movwf	___llmod@divisor+2,c
  2713  000CAC  0E00               	movlw	0
  2714  000CAE  6E35               	movwf	___llmod@divisor+3,c
  2715  000CB0  ECB9  F018         	call	___llmod	;wreg free
  2716  000CB4  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2717  000CB8  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2718  000CBC  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2719  000CC0  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2720                           
  2721                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2722  000CC4  0101               	movlb	1	; () banked
  2723  000CC6  510E               	movf	sprintf@tmpval& (0+255),w,b
  2724  000CC8  0F30               	addlw	48
  2725  000CCA  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2726  000CCE  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2727  000CD2  6EDF               	movwf	indf2,c
  2728                           
  2729                           ; BSR set to: 1
  2730  000CD4  0100               	movlb	0	; () banked
  2731  000CD6                     L2:
  2732  000CD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2733  000CD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2734  000CDA                     l276:
  2735                           
  2736                           ; BSR set to: 0
  2737                           
  2738                           ; BSR set to: 0
  2739  000CDA  0101               	movlb	1	; () banked
  2740  000CDC  071A               	decf	sprintf@c& (0+255),f,b
  2741  000CDE  291A               	incf	sprintf@c& (0+255),w,b
  2742  000CE0  B4D8               	btfsc	status,2,c
  2743  000CE2  D00E               	goto	l279
  2744  000CE4  D7AE               	goto	l277
  2745  000CE6                     l5275:
  2746                           
  2747                           ; BSR set to: 1
  2748                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2749  000CE6  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2750  000CEA  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2751  000CEE  0E30               	movlw	48
  2752  000CF0  6EDF               	movwf	indf2,c
  2753                           
  2754                           ; BSR set to: 1
  2755  000CF2  0100               	movlb	0	; () banked
  2756  000CF4  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2757  000CF6  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;doprnt.c: 1209: exp--;
  2761  000CF8  0101               	movlb	1	; () banked
  2762  000CFA  0712               	decf	sprintf@exp& (0+255),f,b
  2763  000CFC  A0D8               	btfss	status,0,c
  2764  000CFE  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2765  000D00                     l279:
  2766                           
  2767                           ; BSR set to: 1
  2768                           
  2769                           ; BSR set to: 1
  2770  000D00  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2771  000D02  D005               	goto	u5990
  2772  000D04  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2773  000D06  E1EF               	bnz	l5275
  2774  000D08  0512               	decf	sprintf@exp& (0+255),w,b
  2775  000D0A  B0D8               	btfsc	status,0,c
  2776  000D0C  D7EC               	goto	l280
  2777  000D0E                     u5990:
  2778                           
  2779                           ; BSR set to: 1
  2780                           ;doprnt.c: 1210: }
  2781                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2782                           
  2783                           ; BSR set to: 1
  2784  000D0E  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2785  000D10  D009               	goto	l282
  2786  000D12  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2787  000D14  E104               	bnz	u6000
  2788  000D16  0E09               	movlw	9
  2789  000D18  5D18               	subwf	sprintf@prec& (0+255),w,b
  2790  000D1A  A0D8               	btfss	status,0,c
  2791  000D1C  D003               	goto	l282
  2792  000D1E                     u6000:
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2796  000D1E  0E08               	movlw	8
  2797  000D20  6F1A               	movwf	sprintf@c& (0+255),b
  2798  000D22  D002               	goto	l283
  2799  000D24                     l282:
  2800                           
  2801                           ; BSR set to: 1
  2802                           ;doprnt.c: 1213: else
  2803                           ;doprnt.c: 1214: c = prec;
  2804  000D24  C118  F11A         	movff	sprintf@prec,sprintf@c
  2805  000D28                     l283:
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;doprnt.c: 1215: prec -= c;
  2809                           
  2810                           ; BSR set to: 1
  2811  000D28  511A               	movf	sprintf@c& (0+255),w,b
  2812  000D2A  5F18               	subwf	sprintf@prec& (0+255),f,b
  2813  000D2C  0E00               	movlw	0
  2814  000D2E  BF1A               	btfsc	sprintf@c& (0+255),7,b
  2815  000D30  0EFF               	movlw	255
  2816  000D32  5B19               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;doprnt.c: 1219: if(c)
  2820  000D34  511A               	movf	sprintf@c& (0+255),w,b
  2821  000D36  B4D8               	btfsc	status,2,c
  2822  000D38  D009               	goto	l284
  2823                           
  2824                           ; BSR set to: 1
  2825                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2826  000D3A  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2827  000D3E  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2828  000D42  0E2E               	movlw	46
  2829  000D44  6EDF               	movwf	indf2,c
  2830                           
  2831                           ; BSR set to: 1
  2832  000D46  0100               	movlb	0	; () banked
  2833  000D48  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2834  000D4A  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2835  000D4C                     l284:
  2836                           
  2837                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2838                           
  2839                           ; BSR set to: 0
  2840  000D4C  0101               	movlb	1	; () banked
  2841  000D4E  511A               	movf	sprintf@c& (0+255),w,b
  2842  000D50  EC3B  F00B         	call	_scale
  2843  000D54  C08D  F100         	movff	?_scale,_sprintf$879
  2844  000D58  C08E  F101         	movff	?_scale+1,_sprintf$879+1
  2845  000D5C  C08F  F102         	movff	?_scale+2,_sprintf$879+2
  2846  000D60  C090  F103         	movff	?_scale+3,_sprintf$879+3
  2847                           
  2848                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2849  000D64  C114  F040         	movff	sprintf@fval,___flmul@a
  2850  000D68  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2851  000D6C  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2852  000D70  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2853  000D74  C100  F03C         	movff	_sprintf$879,___flmul@b
  2854  000D78  C101  F03D         	movff	_sprintf$879+1,___flmul@b+1
  2855  000D7C  C102  F03E         	movff	_sprintf$879+2,___flmul@b+2
  2856  000D80  C103  F03F         	movff	_sprintf$879+3,___flmul@b+3
  2857  000D84  EC63  F00D         	call	___flmul	;wreg free
  2858  000D88  C03C  F096         	movff	?___flmul,___fltol@f1
  2859  000D8C  C03D  F097         	movff	?___flmul+1,___fltol@f1+1
  2860  000D90  C03E  F098         	movff	?___flmul+2,___fltol@f1+2
  2861  000D94  C03F  F099         	movff	?___flmul+3,___fltol@f1+3
  2862  000D98  ECCB  F016         	call	___fltol	;wreg free
  2863  000D9C  C096  F106         	movff	?___fltol,sprintf@val
  2864  000DA0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2865  000DA4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2866  000DA8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2867                           
  2868                           ;doprnt.c: 1228: while(c--) {
  2869  000DAC  D073               	goto	l285
  2870  000DAE                     
  2871                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2872  000DAE  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2873  000DB2  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2874  000DB6  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2875  000DBA  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2876  000DBE  0101               	movlb	1	; () banked
  2877  000DC0  511A               	movf	sprintf@c& (0+255),w,b
  2878  000DC2  0D04               	mullw	4
  2879  000DC4  0E69               	movlw	low _dpowers
  2880  000DC6  24F3               	addwf	prodl,w,c
  2881  000DC8  6EF6               	movwf	tblptrl,c
  2882  000DCA  0E06               	movlw	high _dpowers
  2883  000DCC  20F4               	addwfc	prodh,w,c
  2884  000DCE  6EF7               	movwf	tblptrh,c
  2885  000DD0                     	if	0	;There are less than 3 active tblptr bytes
  2886  000DD0                     	endif
  2887  000DD0  0009               	tblrd		*+
  2888  000DD2  CFF5 F032          	movff	tablat,___lldiv@divisor
  2889  000DD6  0009               	tblrd		*+
  2890  000DD8  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2891  000DDC  0009               	tblrd		*+
  2892  000DDE  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2893  000DE2  000A               	tblrd		*-
  2894  000DE4  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2895  000DE8  EC40  F018         	call	___lldiv	;wreg free
  2896  000DEC  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2897  000DF0  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2898  000DF4  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2899  000DF8  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2900                           
  2901                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2902  000DFC  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2903  000E00  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2904  000E04  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2905  000E08  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2906  000E0C  0E0A               	movlw	10
  2907  000E0E  6E32               	movwf	___llmod@divisor,c
  2908  000E10  0E00               	movlw	0
  2909  000E12  6E33               	movwf	___llmod@divisor+1,c
  2910  000E14  0E00               	movlw	0
  2911  000E16  6E34               	movwf	___llmod@divisor+2,c
  2912  000E18  0E00               	movlw	0
  2913  000E1A  6E35               	movwf	___llmod@divisor+3,c
  2914  000E1C  ECB9  F018         	call	___llmod	;wreg free
  2915  000E20  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2916  000E24  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2917  000E28  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2918  000E2C  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2919                           
  2920                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2921  000E30  0101               	movlb	1	; () banked
  2922  000E32  510E               	movf	sprintf@tmpval& (0+255),w,b
  2923  000E34  0F30               	addlw	48
  2924  000E36  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2925  000E3A  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2926  000E3E  6EDF               	movwf	indf2,c
  2927                           
  2928                           ; BSR set to: 1
  2929  000E40  0100               	movlb	0	; () banked
  2930  000E42  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2931  000E44  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;doprnt.c: 1232: val %= dpowers[c];
  2935  000E46  C106  F02E         	movff	sprintf@val,___llmod@dividend
  2936  000E4A  C107  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2937  000E4E  C108  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2938  000E52  C109  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2939  000E56  0101               	movlb	1	; () banked
  2940  000E58  511A               	movf	sprintf@c& (0+255),w,b
  2941  000E5A  0D04               	mullw	4
  2942  000E5C  0E69               	movlw	low _dpowers
  2943  000E5E  24F3               	addwf	prodl,w,c
  2944  000E60  6EF6               	movwf	tblptrl,c
  2945  000E62  0E06               	movlw	high _dpowers
  2946  000E64  20F4               	addwfc	prodh,w,c
  2947  000E66  6EF7               	movwf	tblptrh,c
  2948  000E68                     	if	0	;There are less than 3 active tblptr bytes
  2949  000E68                     	endif
  2950  000E68  0009               	tblrd		*+
  2951  000E6A  CFF5 F032          	movff	tablat,___llmod@divisor
  2952  000E6E  0009               	tblrd		*+
  2953  000E70  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2954  000E74  0009               	tblrd		*+
  2955  000E76  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2956  000E7A  000A               	tblrd		*-
  2957  000E7C  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2958  000E80  ECB9  F018         	call	___llmod	;wreg free
  2959  000E84  C02E  F106         	movff	?___llmod,sprintf@val
  2960  000E88  C02F  F107         	movff	?___llmod+1,sprintf@val+1
  2961  000E8C  C030  F108         	movff	?___llmod+2,sprintf@val+2
  2962  000E90  C031  F109         	movff	?___llmod+3,sprintf@val+3
  2963  000E94                     l285:
  2964  000E94  0101               	movlb	1	; () banked
  2965  000E96  071A               	decf	sprintf@c& (0+255),f,b
  2966  000E98  291A               	incf	sprintf@c& (0+255),w,b
  2967  000E9A  B4D8               	btfsc	status,2,c
  2968  000E9C  D00E               	goto	l288
  2969  000E9E  D787               	goto	l286
  2970  000EA0                     
  2971                           ; BSR set to: 1
  2972                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2973                           
  2974                           ; BSR set to: 1
  2975  000EA0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2976  000EA4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2977  000EA8  0E30               	movlw	48
  2978  000EAA  6EDF               	movwf	indf2,c
  2979                           
  2980                           ; BSR set to: 1
  2981  000EAC  0100               	movlb	0	; () banked
  2982  000EAE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2983  000EB0  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;doprnt.c: 1237: prec--;
  2987  000EB2  0101               	movlb	1	; () banked
  2988  000EB4  0718               	decf	sprintf@prec& (0+255),f,b
  2989  000EB6  A0D8               	btfss	status,0,c
  2990  000EB8  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  2991  000EBA                     l288:
  2992                           
  2993                           ; BSR set to: 1
  2994                           
  2995                           ; BSR set to: 1
  2996  000EBA  5118               	movf	sprintf@prec& (0+255),w,b
  2997  000EBC  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2998  000EBE  B4D8               	btfsc	status,2,c
  2999  000EC0  D0A9               	goto	l304
  3000  000EC2  D7EE               	goto	l289
  3001  000EC4                     l248:
  3002                           
  3003                           ; BSR set to: 1
  3004                           ;doprnt.c: 1246: }
  3005                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3006                           
  3007                           ; BSR set to: 1
  3008  000EC4  5118               	movf	sprintf@prec& (0+255),w,b
  3009  000EC6  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3010  000EC8  A4D8               	btfss	status,2,c
  3011  000ECA  D008               	goto	l291
  3012                           
  3013                           ; BSR set to: 1
  3014  000ECC  5106               	movf	sprintf@val& (0+255),w,b
  3015  000ECE  1107               	iorwf	(sprintf@val+1)& (0+255),w,b
  3016  000ED0  1108               	iorwf	(sprintf@val+2)& (0+255),w,b
  3017  000ED2  1109               	iorwf	(sprintf@val+3)& (0+255),w,b
  3018  000ED4  A4D8               	btfss	status,2,c
  3019  000ED6  D002               	goto	l291
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;doprnt.c: 1291: prec++;
  3023  000ED8  4B18               	infsnz	sprintf@prec& (0+255),f,b
  3024  000EDA  2B19               	incf	(sprintf@prec+1)& (0+255),f,b
  3025  000EDC                     l291:
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;doprnt.c: 1339: if(c < prec)
  3029                           
  3030                           ; BSR set to: 1
  3031  000EDC  0E80               	movlw	128
  3032  000EDE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3033  000EE0  0E7F               	movlw	127
  3034  000EE2  0100               	movlb	0	; () banked
  3035  000EE4  6FDE               	movwf	??_sprintf& (0+255),b
  3036  000EE6  0101               	movlb	1	; () banked
  3037  000EE8  5118               	movf	sprintf@prec& (0+255),w,b
  3038  000EEA  5D1A               	subwf	sprintf@c& (0+255),w,b
  3039  000EEC  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3040  000EEE  0A80               	xorlw	128
  3041  000EF0  0100               	movlb	0	; () banked
  3042  000EF2  59DE               	subwfb	??_sprintf& (0+255),w,b
  3043  000EF4  B0D8               	btfsc	status,0,c
  3044  000EF6  D003               	goto	l292
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;doprnt.c: 1340: c = prec;
  3048  000EF8  C118  F11A         	movff	sprintf@prec,sprintf@c
  3049  000EFC  D015               	goto	l294
  3050  000EFE                     l292:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 1341: else if(prec < c)
  3054                           
  3055                           ; BSR set to: 0
  3056  000EFE  0101               	movlb	1	; () banked
  3057  000F00  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3058  000F02  0A80               	xorlw	128
  3059  000F04  0100               	movlb	0	; () banked
  3060  000F06  6FDE               	movwf	??_sprintf& (0+255),b
  3061  000F08  0101               	movlb	1	; () banked
  3062  000F0A  511A               	movf	sprintf@c& (0+255),w,b
  3063  000F0C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3064  000F0E  0E80               	movlw	128
  3065  000F10  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3066  000F12  0E7F               	movlw	127
  3067  000F14  0100               	movlb	0	; () banked
  3068  000F16  59DE               	subwfb	??_sprintf& (0+255),w,b
  3069  000F18  B0D8               	btfsc	status,0,c
  3070  000F1A  D006               	goto	l294
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;doprnt.c: 1342: prec = c;
  3074  000F1C  0101               	movlb	1	; () banked
  3075  000F1E  511A               	movf	sprintf@c& (0+255),w,b
  3076  000F20  6F18               	movwf	sprintf@prec& (0+255),b
  3077  000F22  6B19               	clrf	(sprintf@prec+1)& (0+255),b
  3078  000F24  BF18               	btfsc	sprintf@prec& (0+255),7,b
  3079  000F26  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  3080  000F28                     l294:
  3081                           
  3082                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3083                           
  3084                           ; BSR set to: 1
  3085                           
  3086                           ; BSR set to: 1
  3087  000F28  0101               	movlb	1	; () banked
  3088  000F2A  510C               	movf	sprintf@width& (0+255),w,b
  3089  000F2C  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3090  000F2E  B4D8               	btfsc	status,2,c
  3091  000F30  D011               	goto	l295
  3092                           
  3093                           ; BSR set to: 1
  3094  000F32  0E03               	movlw	3
  3095  000F34  150A               	andwf	sprintf@flag& (0+255),w,b
  3096  000F36  0100               	movlb	0	; () banked
  3097  000F38  6FDE               	movwf	??_sprintf& (0+255),b
  3098  000F3A  0E00               	movlw	0
  3099  000F3C  0101               	movlb	1	; () banked
  3100  000F3E  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3101  000F40  0100               	movlb	0	; () banked
  3102  000F42  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3103  000F44  51DE               	movf	??_sprintf& (0+255),w,b
  3104  000F46  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3105  000F48  B4D8               	btfsc	status,2,c
  3106  000F4A  D004               	goto	l295
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 1346: width--;
  3110  000F4C  0101               	movlb	1	; () banked
  3111  000F4E  070C               	decf	sprintf@width& (0+255),f,b
  3112  000F50  A0D8               	btfss	status,0,c
  3113  000F52  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3114  000F54                     l295:
  3115                           
  3116                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3117                           
  3118                           ; BSR set to: 1
  3119  000F54  0101               	movlb	1	; () banked
  3120  000F56  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  3121  000F58  D018               	goto	l298
  3122                           
  3123                           ; BSR set to: 1
  3124                           ;doprnt.c: 1349: if(width > prec)
  3125  000F5A  510C               	movf	sprintf@width& (0+255),w,b
  3126  000F5C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3127  000F5E  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3128  000F60  0A80               	xorlw	128
  3129  000F62  0100               	movlb	0	; () banked
  3130  000F64  6FDE               	movwf	??_sprintf& (0+255),b
  3131  000F66  0101               	movlb	1	; () banked
  3132  000F68  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3133  000F6A  0A80               	xorlw	128
  3134  000F6C  0100               	movlb	0	; () banked
  3135  000F6E  59DE               	subwfb	??_sprintf& (0+255),w,b
  3136  000F70  B0D8               	btfsc	status,0,c
  3137  000F72  D006               	goto	l297
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;doprnt.c: 1350: width -= prec;
  3141  000F74  0101               	movlb	1	; () banked
  3142  000F76  5118               	movf	sprintf@prec& (0+255),w,b
  3143  000F78  5F0C               	subwf	sprintf@width& (0+255),f,b
  3144  000F7A  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3145  000F7C  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3146  000F7E  D005               	goto	l298
  3147  000F80                     l297:
  3148                           
  3149                           ;doprnt.c: 1351: else
  3150                           ;doprnt.c: 1352: width = 0;
  3151                           
  3152                           ; BSR set to: 1
  3153  000F80  0E00               	movlw	0
  3154  000F82  0101               	movlb	1	; () banked
  3155  000F84  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3156  000F86  0E00               	movlw	0
  3157  000F88  6F0C               	movwf	sprintf@width& (0+255),b
  3158  000F8A                     l298:
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;doprnt.c: 1353: }
  3162                           ;doprnt.c: 1381: if(width > c)
  3163                           
  3164                           ; BSR set to: 1
  3165                           
  3166                           ; BSR set to: 1
  3167  000F8A  0E80               	movlw	128
  3168  000F8C  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3169  000F8E  0E7F               	movlw	127
  3170  000F90  0100               	movlb	0	; () banked
  3171  000F92  6FDE               	movwf	??_sprintf& (0+255),b
  3172  000F94  0101               	movlb	1	; () banked
  3173  000F96  510C               	movf	sprintf@width& (0+255),w,b
  3174  000F98  5D1A               	subwf	sprintf@c& (0+255),w,b
  3175  000F9A  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3176  000F9C  0A80               	xorlw	128
  3177  000F9E  0100               	movlb	0	; () banked
  3178  000FA0  59DE               	subwfb	??_sprintf& (0+255),w,b
  3179  000FA2  B0D8               	btfsc	status,0,c
  3180  000FA4  D008               	goto	l299
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 1382: width -= c;
  3184  000FA6  0101               	movlb	1	; () banked
  3185  000FA8  511A               	movf	sprintf@c& (0+255),w,b
  3186  000FAA  5F0C               	subwf	sprintf@width& (0+255),f,b
  3187  000FAC  0E00               	movlw	0
  3188  000FAE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3189  000FB0  0EFF               	movlw	255
  3190  000FB2  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3191  000FB4  D005               	goto	l300
  3192  000FB6                     l299:
  3193                           
  3194                           ;doprnt.c: 1383: else
  3195                           ;doprnt.c: 1384: width = 0;
  3196                           
  3197                           ; BSR set to: 1
  3198  000FB6  0E00               	movlw	0
  3199  000FB8  0101               	movlb	1	; () banked
  3200  000FBA  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3201  000FBC  0E00               	movlw	0
  3202  000FBE  6F0C               	movwf	sprintf@width& (0+255),b
  3203  000FC0                     l300:
  3204                           
  3205                           ; BSR set to: 1
  3206                           ;doprnt.c: 1422: {
  3207                           ;doprnt.c: 1424: if(width
  3208                           ;doprnt.c: 1428: )
  3209                           
  3210                           ; BSR set to: 1
  3211  000FC0  510C               	movf	sprintf@width& (0+255),w,b
  3212  000FC2  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3213  000FC4  B4D8               	btfsc	status,2,c
  3214  000FC6  D011               	goto	u6140
  3215  000FC8                     u6130:
  3216                           
  3217                           ; BSR set to: 1
  3218                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3219                           
  3220                           ; BSR set to: 1
  3221                           
  3222                           ;doprnt.c: 1429: do
  3223  000FC8  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3224  000FCC  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3225  000FD0  0E20               	movlw	32
  3226  000FD2  6EDF               	movwf	indf2,c
  3227                           
  3228                           ; BSR set to: 1
  3229  000FD4  0100               	movlb	0	; () banked
  3230  000FD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3231  000FD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;doprnt.c: 1431: while(--width);
  3235  000FDA  0101               	movlb	1	; () banked
  3236  000FDC  070C               	decf	sprintf@width& (0+255),f,b
  3237  000FDE  A0D8               	btfss	status,0,c
  3238  000FE0  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3239  000FE2  510C               	movf	sprintf@width& (0+255),w,b
  3240  000FE4  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3241  000FE6  A4D8               	btfss	status,2,c
  3242  000FE8  D7EF               	goto	u6130
  3243  000FEA                     u6140:
  3244                           
  3245                           ; BSR set to: 1
  3246                           ;doprnt.c: 1438: if(flag & 0x03)
  3247                           
  3248                           ; BSR set to: 1
  3249                           
  3250                           ; BSR set to: 1
  3251  000FEA  0E03               	movlw	3
  3252  000FEC  150A               	andwf	sprintf@flag& (0+255),w,b
  3253  000FEE  0100               	movlb	0	; () banked
  3254  000FF0  6FDE               	movwf	??_sprintf& (0+255),b
  3255  000FF2  0E00               	movlw	0
  3256  000FF4  0101               	movlb	1	; () banked
  3257  000FF6  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3258  000FF8  0100               	movlb	0	; () banked
  3259  000FFA  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3260  000FFC  51DE               	movf	??_sprintf& (0+255),w,b
  3261  000FFE  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3262  001000  B4D8               	btfsc	status,2,c
  3263  001002  D008               	goto	l304
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3267  001004  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3268  001008  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3269  00100C  0E2D               	movlw	45
  3270  00100E  6EDF               	movwf	indf2,c
  3271  001010                     l5365:
  3272                           
  3273                           ; BSR set to: 0
  3274  001010  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3275  001012  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3276  001014                     l304:
  3277                           
  3278                           ; BSR set to: 0
  3279                           
  3280                           ; BSR set to: 0
  3281  001014  C0D8  FFF6         	movff	sprintf@f,tblptrl
  3282  001018  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  3283  00101C  0100               	movlb	0	; () banked
  3284  00101E  4BD8               	infsnz	sprintf@f& (0+255),f,b
  3285  001020  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  3286  001022                     	if	0	;tblptru may be non-zero
  3287  001022                     	endif
  3288  001022                     	if	0	;tblptru may be non-zero
  3289  001022                     	endif
  3290  001022  0008               	tblrd		*
  3291  001024  CFF5 F11A          	movff	tablat,sprintf@c
  3292  001028  0101               	movlb	1	; () banked
  3293  00102A  511A               	movf	sprintf@c& (0+255),w,b
  3294  00102C  A4D8               	btfss	status,2,c
  3295  00102E  EF64  F003         	goto	l232
  3296  001032                     u6160:
  3297                           
  3298                           ; BSR set to: 1
  3299                           ;doprnt.c: 1538: *sp = 0;
  3300                           
  3301                           ; BSR set to: 1
  3302                           
  3303                           ;doprnt.c: 1469: }
  3304                           ;doprnt.c: 1533: }
  3305                           ;doprnt.c: 1535: alldone:
  3306                           
  3307                           ; BSR set to: 1
  3308  001032  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3309  001036  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3310  00103A  0E00               	movlw	0
  3311  00103C  6EDF               	movwf	indf2,c
  3312  00103E  0012               	return	
  3313  001040                     __end_of_sprintf:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf2	equ	0xFDF
  3325                           postinc2	equ	0xFDE
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _scale *****************
  3331 ;; Defined at:
  3332 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  scl             1    wreg     char 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  scl             1   21[BANK0 ] char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  4   13[BANK0 ] char 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3346 ;;      Params:         0       4       0       0       0       0       0
  3347 ;;      Locals:         0       5       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0
  3349 ;;      Totals:         0       9       0       0       0       0       0
  3350 ;;Total ram usage:        9 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		___awdiv
  3355 ;;		___awmod
  3356 ;;		___flmul
  3357 ;; This function is called by:
  3358 ;;		_sprintf
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text2
  3363  001676                     __ptext2:
  3364                           	opt stack 0
  3365  001676                     _scale:
  3366                           	opt stack 26
  3367                           
  3368                           ; BSR set to: 1
  3369                           ;incstack = 0
  3370                           ;scale@scl stored from wreg
  3371  001676  0100               	movlb	0	; () banked
  3372  001678  6F95               	movwf	scale@scl& (0+255),b
  3373                           
  3374                           ;doprnt.c: 428: if(scl < 0) {
  3375  00167A  0100               	movlb	0	; () banked
  3376  00167C  AF95               	btfss	scale@scl& (0+255),7,b
  3377  00167E  D112               	goto	l221
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;doprnt.c: 429: scl = -scl;
  3381  001680  6D95               	negf	scale@scl& (0+255),b
  3382                           
  3383                           ;doprnt.c: 430: if(scl>=110)
  3384  001682  5195               	movf	scale@scl& (0+255),w,b
  3385  001684  0A80               	xorlw	128
  3386  001686  0F12               	addlw	-238
  3387  001688  A0D8               	btfss	status,0,c
  3388  00168A  D09A               	goto	l222
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3392  00168C  0E00               	movlw	0
  3393  00168E  6E37               	movwf	___awdiv@divisor+1,c
  3394  001690  0E0A               	movlw	10
  3395  001692  6E36               	movwf	___awdiv@divisor,c
  3396  001694  0E00               	movlw	0
  3397  001696  6E31               	movwf	___awmod@divisor+1,c
  3398  001698  0E64               	movlw	100
  3399  00169A  6E30               	movwf	___awmod@divisor,c
  3400  00169C  5195               	movf	scale@scl& (0+255),w,b
  3401  00169E  6E2E               	movwf	___awmod@dividend,c
  3402  0016A0  6A2F               	clrf	___awmod@dividend+1,c
  3403  0016A2  BE2E               	btfsc	___awmod@dividend,7,c
  3404  0016A4  062F               	decf	___awmod@dividend+1,f,c
  3405  0016A6  EC81  F018         	call	___awmod	;wreg free
  3406  0016AA  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3407  0016AE  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3408  0016B2  ECFE  F017         	call	___awdiv	;wreg free
  3409  0016B6  90D8               	bcf	status,0,c
  3410  0016B8  3634               	rlcf	?___awdiv,f,c
  3411  0016BA  3635               	rlcf	?___awdiv+1,f,c
  3412  0016BC  90D8               	bcf	status,0,c
  3413  0016BE  3634               	rlcf	?___awdiv,f,c
  3414  0016C0  3635               	rlcf	?___awdiv+1,f,c
  3415  0016C2  0E24               	movlw	36
  3416  0016C4  2634               	addwf	?___awdiv,f,c
  3417  0016C6  0E00               	movlw	0
  3418  0016C8  2235               	addwfc	?___awdiv+1,f,c
  3419  0016CA  0E35               	movlw	low __npowers_
  3420  0016CC  2434               	addwf	?___awdiv,w,c
  3421  0016CE  6EF6               	movwf	tblptrl,c
  3422  0016D0  0E06               	movlw	high __npowers_
  3423  0016D2  2035               	addwfc	?___awdiv+1,w,c
  3424  0016D4  6EF7               	movwf	tblptrh,c
  3425  0016D6                     	if	0	;There are less than 3 active tblptr bytes
  3426  0016D6                     	endif
  3427  0016D6  0009               	tblrd		*+
  3428  0016D8  CFF5 F040          	movff	tablat,___flmul@a
  3429  0016DC  0009               	tblrd		*+
  3430  0016DE  CFF5 F041          	movff	tablat,___flmul@a+1
  3431  0016E2  0009               	tblrd		*+
  3432  0016E4  CFF5 F042          	movff	tablat,___flmul@a+2
  3433  0016E8  000A               	tblrd		*-
  3434  0016EA  CFF5 F043          	movff	tablat,___flmul@a+3
  3435  0016EE  0E00               	movlw	0
  3436  0016F0  6E37               	movwf	___awdiv@divisor+1,c
  3437  0016F2  0E64               	movlw	100
  3438  0016F4  6E36               	movwf	___awdiv@divisor,c
  3439  0016F6  0100               	movlb	0	; () banked
  3440  0016F8  5195               	movf	scale@scl& (0+255),w,b
  3441  0016FA  6E34               	movwf	___awdiv@dividend,c
  3442  0016FC  6A35               	clrf	___awdiv@dividend+1,c
  3443  0016FE  BE34               	btfsc	___awdiv@dividend,7,c
  3444  001700  0635               	decf	___awdiv@dividend+1,f,c
  3445  001702  ECFE  F017         	call	___awdiv	;wreg free
  3446  001706  90D8               	bcf	status,0,c
  3447  001708  3634               	rlcf	?___awdiv,f,c
  3448  00170A  3635               	rlcf	?___awdiv+1,f,c
  3449  00170C  90D8               	bcf	status,0,c
  3450  00170E  3634               	rlcf	?___awdiv,f,c
  3451  001710  3635               	rlcf	?___awdiv+1,f,c
  3452  001712  0E48               	movlw	72
  3453  001714  2634               	addwf	?___awdiv,f,c
  3454  001716  0E00               	movlw	0
  3455  001718  2235               	addwfc	?___awdiv+1,f,c
  3456  00171A  0E35               	movlw	low __npowers_
  3457  00171C  2434               	addwf	?___awdiv,w,c
  3458  00171E  6EF6               	movwf	tblptrl,c
  3459  001720  0E06               	movlw	high __npowers_
  3460  001722  2035               	addwfc	?___awdiv+1,w,c
  3461  001724  6EF7               	movwf	tblptrh,c
  3462  001726                     	if	0	;There are less than 3 active tblptr bytes
  3463  001726                     	endif
  3464  001726  0009               	tblrd		*+
  3465  001728  CFF5 F03C          	movff	tablat,___flmul@b
  3466  00172C  0009               	tblrd		*+
  3467  00172E  CFF5 F03D          	movff	tablat,___flmul@b+1
  3468  001732  0009               	tblrd		*+
  3469  001734  CFF5 F03E          	movff	tablat,___flmul@b+2
  3470  001738  000A               	tblrd		*-
  3471  00173A  CFF5 F03F          	movff	tablat,___flmul@b+3
  3472  00173E  EC63  F00D         	call	___flmul	;wreg free
  3473  001742  C03C  F091         	movff	?___flmul,_scale$878
  3474  001746  C03D  F092         	movff	?___flmul+1,_scale$878+1
  3475  00174A  C03E  F093         	movff	?___flmul+2,_scale$878+2
  3476  00174E  C03F  F094         	movff	?___flmul+3,_scale$878+3
  3477                           
  3478                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3479  001752  C091  F03C         	movff	_scale$878,___flmul@b
  3480  001756  C092  F03D         	movff	_scale$878+1,___flmul@b+1
  3481  00175A  C093  F03E         	movff	_scale$878+2,___flmul@b+2
  3482  00175E  C094  F03F         	movff	_scale$878+3,___flmul@b+3
  3483  001762  0E00               	movlw	0
  3484  001764  6E31               	movwf	___awmod@divisor+1,c
  3485  001766  0E0A               	movlw	10
  3486  001768  6E30               	movwf	___awmod@divisor,c
  3487  00176A  0100               	movlb	0	; () banked
  3488  00176C  5195               	movf	scale@scl& (0+255),w,b
  3489  00176E  6E2E               	movwf	___awmod@dividend,c
  3490  001770  6A2F               	clrf	___awmod@dividend+1,c
  3491  001772  BE2E               	btfsc	___awmod@dividend,7,c
  3492  001774  062F               	decf	___awmod@dividend+1,f,c
  3493  001776  EC81  F018         	call	___awmod	;wreg free
  3494  00177A  90D8               	bcf	status,0,c
  3495  00177C  362E               	rlcf	?___awmod,f,c
  3496  00177E  362F               	rlcf	?___awmod+1,f,c
  3497  001780  90D8               	bcf	status,0,c
  3498  001782  362E               	rlcf	?___awmod,f,c
  3499  001784  362F               	rlcf	?___awmod+1,f,c
  3500  001786  0E35               	movlw	low __npowers_
  3501  001788  242E               	addwf	?___awmod,w,c
  3502  00178A  6EF6               	movwf	tblptrl,c
  3503  00178C  0E06               	movlw	high __npowers_
  3504  00178E  202F               	addwfc	?___awmod+1,w,c
  3505  001790  6EF7               	movwf	tblptrh,c
  3506  001792                     	if	0	;There are less than 3 active tblptr bytes
  3507  001792                     	endif
  3508  001792  0009               	tblrd		*+
  3509  001794  CFF5 F040          	movff	tablat,___flmul@a
  3510  001798  0009               	tblrd		*+
  3511  00179A  CFF5 F041          	movff	tablat,___flmul@a+1
  3512  00179E  0009               	tblrd		*+
  3513  0017A0  CFF5 F042          	movff	tablat,___flmul@a+2
  3514  0017A4  000A               	tblrd		*-
  3515  0017A6  CFF5 F043          	movff	tablat,___flmul@a+3
  3516  0017AA  EC63  F00D         	call	___flmul	;wreg free
  3517  0017AE  C03C  F08D         	movff	?___flmul,?_scale
  3518  0017B2  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3519  0017B6  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3520  0017BA  C03F  F090         	movff	?___flmul+3,?_scale+3
  3521  0017BE  0012               	return	
  3522  0017C0                     l222:
  3523                           
  3524                           ;doprnt.c: 432: else if(scl > 10)
  3525  0017C0  0100               	movlb	0	; () banked
  3526  0017C2  5195               	movf	scale@scl& (0+255),w,b
  3527  0017C4  0A80               	xorlw	128
  3528  0017C6  0F75               	addlw	-139
  3529  0017C8  A0D8               	btfss	status,0,c
  3530  0017CA  D056               	goto	l225
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3534  0017CC  0E00               	movlw	0
  3535  0017CE  6E37               	movwf	___awdiv@divisor+1,c
  3536  0017D0  0E0A               	movlw	10
  3537  0017D2  6E36               	movwf	___awdiv@divisor,c
  3538  0017D4  5195               	movf	scale@scl& (0+255),w,b
  3539  0017D6  6E34               	movwf	___awdiv@dividend,c
  3540  0017D8  6A35               	clrf	___awdiv@dividend+1,c
  3541  0017DA  BE34               	btfsc	___awdiv@dividend,7,c
  3542  0017DC  0635               	decf	___awdiv@dividend+1,f,c
  3543  0017DE  ECFE  F017         	call	___awdiv	;wreg free
  3544  0017E2  90D8               	bcf	status,0,c
  3545  0017E4  3634               	rlcf	?___awdiv,f,c
  3546  0017E6  3635               	rlcf	?___awdiv+1,f,c
  3547  0017E8  90D8               	bcf	status,0,c
  3548  0017EA  3634               	rlcf	?___awdiv,f,c
  3549  0017EC  3635               	rlcf	?___awdiv+1,f,c
  3550  0017EE  0E24               	movlw	36
  3551  0017F0  2634               	addwf	?___awdiv,f,c
  3552  0017F2  0E00               	movlw	0
  3553  0017F4  2235               	addwfc	?___awdiv+1,f,c
  3554  0017F6  0E35               	movlw	low __npowers_
  3555  0017F8  2434               	addwf	?___awdiv,w,c
  3556  0017FA  6EF6               	movwf	tblptrl,c
  3557  0017FC  0E06               	movlw	high __npowers_
  3558  0017FE  2035               	addwfc	?___awdiv+1,w,c
  3559  001800  6EF7               	movwf	tblptrh,c
  3560  001802                     	if	0	;There are less than 3 active tblptr bytes
  3561  001802                     	endif
  3562  001802  0009               	tblrd		*+
  3563  001804  CFF5 F03C          	movff	tablat,___flmul@b
  3564  001808  0009               	tblrd		*+
  3565  00180A  CFF5 F03D          	movff	tablat,___flmul@b+1
  3566  00180E  0009               	tblrd		*+
  3567  001810  CFF5 F03E          	movff	tablat,___flmul@b+2
  3568  001814  000A               	tblrd		*-
  3569  001816  CFF5 F03F          	movff	tablat,___flmul@b+3
  3570  00181A  0E00               	movlw	0
  3571  00181C  6E31               	movwf	___awmod@divisor+1,c
  3572  00181E  0E0A               	movlw	10
  3573  001820  6E30               	movwf	___awmod@divisor,c
  3574  001822  0100               	movlb	0	; () banked
  3575  001824  5195               	movf	scale@scl& (0+255),w,b
  3576  001826  6E2E               	movwf	___awmod@dividend,c
  3577  001828  6A2F               	clrf	___awmod@dividend+1,c
  3578  00182A  BE2E               	btfsc	___awmod@dividend,7,c
  3579  00182C  062F               	decf	___awmod@dividend+1,f,c
  3580  00182E  EC81  F018         	call	___awmod	;wreg free
  3581  001832  90D8               	bcf	status,0,c
  3582  001834  362E               	rlcf	?___awmod,f,c
  3583  001836  362F               	rlcf	?___awmod+1,f,c
  3584  001838  90D8               	bcf	status,0,c
  3585  00183A  362E               	rlcf	?___awmod,f,c
  3586  00183C  362F               	rlcf	?___awmod+1,f,c
  3587  00183E  0E35               	movlw	low __npowers_
  3588  001840  242E               	addwf	?___awmod,w,c
  3589  001842  6EF6               	movwf	tblptrl,c
  3590  001844  0E06               	movlw	high __npowers_
  3591  001846  202F               	addwfc	?___awmod+1,w,c
  3592  001848  6EF7               	movwf	tblptrh,c
  3593  00184A                     	if	0	;There are less than 3 active tblptr bytes
  3594  00184A                     	endif
  3595  00184A  0009               	tblrd		*+
  3596  00184C  CFF5 F040          	movff	tablat,___flmul@a
  3597  001850  0009               	tblrd		*+
  3598  001852  CFF5 F041          	movff	tablat,___flmul@a+1
  3599  001856  0009               	tblrd		*+
  3600  001858  CFF5 F042          	movff	tablat,___flmul@a+2
  3601  00185C  000A               	tblrd		*-
  3602  00185E  CFF5 F043          	movff	tablat,___flmul@a+3
  3603  001862  EC63  F00D         	call	___flmul	;wreg free
  3604  001866  C03C  F08D         	movff	?___flmul,?_scale
  3605  00186A  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3606  00186E  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3607  001872  C03F  F090         	movff	?___flmul+3,?_scale+3
  3608  001876  0012               	return	
  3609  001878                     l225:
  3610                           
  3611                           ;doprnt.c: 434: return _npowers_[scl];
  3612  001878  0100               	movlb	0	; () banked
  3613  00187A  5195               	movf	scale@scl& (0+255),w,b
  3614  00187C  0D04               	mullw	4
  3615  00187E  0E35               	movlw	low __npowers_
  3616  001880  24F3               	addwf	prodl,w,c
  3617  001882  6EF6               	movwf	tblptrl,c
  3618  001884  0E06               	movlw	high __npowers_
  3619  001886  20F4               	addwfc	prodh,w,c
  3620  001888  6EF7               	movwf	tblptrh,c
  3621  00188A                     	if	0	;There are less than 3 active tblptr bytes
  3622  00188A                     	endif
  3623  00188A  0009               	tblrd		*+
  3624  00188C  CFF5 F08D          	movff	tablat,?_scale
  3625  001890  0009               	tblrd		*+
  3626  001892  CFF5 F08E          	movff	tablat,?_scale+1
  3627  001896  0009               	tblrd		*+
  3628  001898  CFF5 F08F          	movff	tablat,?_scale+2
  3629  00189C  000A               	tblrd		*-
  3630  00189E  CFF5 F090          	movff	tablat,?_scale+3
  3631                           
  3632                           ; BSR set to: 0
  3633  0018A2  0012               	return	
  3634  0018A4                     l221:
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;doprnt.c: 435: }
  3638                           ;doprnt.c: 436: if(scl>=110)
  3639                           
  3640                           ; BSR set to: 0
  3641  0018A4  5195               	movf	scale@scl& (0+255),w,b
  3642  0018A6  0A80               	xorlw	128
  3643  0018A8  0F12               	addlw	-238
  3644  0018AA  A0D8               	btfss	status,0,c
  3645  0018AC  D09A               	goto	l226
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3649  0018AE  0E00               	movlw	0
  3650  0018B0  6E37               	movwf	___awdiv@divisor+1,c
  3651  0018B2  0E0A               	movlw	10
  3652  0018B4  6E36               	movwf	___awdiv@divisor,c
  3653  0018B6  0E00               	movlw	0
  3654  0018B8  6E31               	movwf	___awmod@divisor+1,c
  3655  0018BA  0E64               	movlw	100
  3656  0018BC  6E30               	movwf	___awmod@divisor,c
  3657  0018BE  5195               	movf	scale@scl& (0+255),w,b
  3658  0018C0  6E2E               	movwf	___awmod@dividend,c
  3659  0018C2  6A2F               	clrf	___awmod@dividend+1,c
  3660  0018C4  BE2E               	btfsc	___awmod@dividend,7,c
  3661  0018C6  062F               	decf	___awmod@dividend+1,f,c
  3662  0018C8  EC81  F018         	call	___awmod	;wreg free
  3663  0018CC  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3664  0018D0  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3665  0018D4  ECFE  F017         	call	___awdiv	;wreg free
  3666  0018D8  90D8               	bcf	status,0,c
  3667  0018DA  3634               	rlcf	?___awdiv,f,c
  3668  0018DC  3635               	rlcf	?___awdiv+1,f,c
  3669  0018DE  90D8               	bcf	status,0,c
  3670  0018E0  3634               	rlcf	?___awdiv,f,c
  3671  0018E2  3635               	rlcf	?___awdiv+1,f,c
  3672  0018E4  0E24               	movlw	36
  3673  0018E6  2634               	addwf	?___awdiv,f,c
  3674  0018E8  0E00               	movlw	0
  3675  0018EA  2235               	addwfc	?___awdiv+1,f,c
  3676  0018EC  0E01               	movlw	low __powers_
  3677  0018EE  2434               	addwf	?___awdiv,w,c
  3678  0018F0  6EF6               	movwf	tblptrl,c
  3679  0018F2  0E06               	movlw	high __powers_
  3680  0018F4  2035               	addwfc	?___awdiv+1,w,c
  3681  0018F6  6EF7               	movwf	tblptrh,c
  3682  0018F8                     	if	0	;There are less than 3 active tblptr bytes
  3683  0018F8                     	endif
  3684  0018F8  0009               	tblrd		*+
  3685  0018FA  CFF5 F040          	movff	tablat,___flmul@a
  3686  0018FE  0009               	tblrd		*+
  3687  001900  CFF5 F041          	movff	tablat,___flmul@a+1
  3688  001904  0009               	tblrd		*+
  3689  001906  CFF5 F042          	movff	tablat,___flmul@a+2
  3690  00190A  000A               	tblrd		*-
  3691  00190C  CFF5 F043          	movff	tablat,___flmul@a+3
  3692  001910  0E00               	movlw	0
  3693  001912  6E37               	movwf	___awdiv@divisor+1,c
  3694  001914  0E64               	movlw	100
  3695  001916  6E36               	movwf	___awdiv@divisor,c
  3696  001918  0100               	movlb	0	; () banked
  3697  00191A  5195               	movf	scale@scl& (0+255),w,b
  3698  00191C  6E34               	movwf	___awdiv@dividend,c
  3699  00191E  6A35               	clrf	___awdiv@dividend+1,c
  3700  001920  BE34               	btfsc	___awdiv@dividend,7,c
  3701  001922  0635               	decf	___awdiv@dividend+1,f,c
  3702  001924  ECFE  F017         	call	___awdiv	;wreg free
  3703  001928  90D8               	bcf	status,0,c
  3704  00192A  3634               	rlcf	?___awdiv,f,c
  3705  00192C  3635               	rlcf	?___awdiv+1,f,c
  3706  00192E  90D8               	bcf	status,0,c
  3707  001930  3634               	rlcf	?___awdiv,f,c
  3708  001932  3635               	rlcf	?___awdiv+1,f,c
  3709  001934  0E48               	movlw	72
  3710  001936  2634               	addwf	?___awdiv,f,c
  3711  001938  0E00               	movlw	0
  3712  00193A  2235               	addwfc	?___awdiv+1,f,c
  3713  00193C  0E01               	movlw	low __powers_
  3714  00193E  2434               	addwf	?___awdiv,w,c
  3715  001940  6EF6               	movwf	tblptrl,c
  3716  001942  0E06               	movlw	high __powers_
  3717  001944  2035               	addwfc	?___awdiv+1,w,c
  3718  001946  6EF7               	movwf	tblptrh,c
  3719  001948                     	if	0	;There are less than 3 active tblptr bytes
  3720  001948                     	endif
  3721  001948  0009               	tblrd		*+
  3722  00194A  CFF5 F03C          	movff	tablat,___flmul@b
  3723  00194E  0009               	tblrd		*+
  3724  001950  CFF5 F03D          	movff	tablat,___flmul@b+1
  3725  001954  0009               	tblrd		*+
  3726  001956  CFF5 F03E          	movff	tablat,___flmul@b+2
  3727  00195A  000A               	tblrd		*-
  3728  00195C  CFF5 F03F          	movff	tablat,___flmul@b+3
  3729  001960  EC63  F00D         	call	___flmul	;wreg free
  3730  001964  C03C  F091         	movff	?___flmul,_scale$878
  3731  001968  C03D  F092         	movff	?___flmul+1,_scale$878+1
  3732  00196C  C03E  F093         	movff	?___flmul+2,_scale$878+2
  3733  001970  C03F  F094         	movff	?___flmul+3,_scale$878+3
  3734                           
  3735                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3736  001974  C091  F03C         	movff	_scale$878,___flmul@b
  3737  001978  C092  F03D         	movff	_scale$878+1,___flmul@b+1
  3738  00197C  C093  F03E         	movff	_scale$878+2,___flmul@b+2
  3739  001980  C094  F03F         	movff	_scale$878+3,___flmul@b+3
  3740  001984  0E00               	movlw	0
  3741  001986  6E31               	movwf	___awmod@divisor+1,c
  3742  001988  0E0A               	movlw	10
  3743  00198A  6E30               	movwf	___awmod@divisor,c
  3744  00198C  0100               	movlb	0	; () banked
  3745  00198E  5195               	movf	scale@scl& (0+255),w,b
  3746  001990  6E2E               	movwf	___awmod@dividend,c
  3747  001992  6A2F               	clrf	___awmod@dividend+1,c
  3748  001994  BE2E               	btfsc	___awmod@dividend,7,c
  3749  001996  062F               	decf	___awmod@dividend+1,f,c
  3750  001998  EC81  F018         	call	___awmod	;wreg free
  3751  00199C  90D8               	bcf	status,0,c
  3752  00199E  362E               	rlcf	?___awmod,f,c
  3753  0019A0  362F               	rlcf	?___awmod+1,f,c
  3754  0019A2  90D8               	bcf	status,0,c
  3755  0019A4  362E               	rlcf	?___awmod,f,c
  3756  0019A6  362F               	rlcf	?___awmod+1,f,c
  3757  0019A8  0E01               	movlw	low __powers_
  3758  0019AA  242E               	addwf	?___awmod,w,c
  3759  0019AC  6EF6               	movwf	tblptrl,c
  3760  0019AE  0E06               	movlw	high __powers_
  3761  0019B0  202F               	addwfc	?___awmod+1,w,c
  3762  0019B2  6EF7               	movwf	tblptrh,c
  3763  0019B4                     	if	0	;There are less than 3 active tblptr bytes
  3764  0019B4                     	endif
  3765  0019B4  0009               	tblrd		*+
  3766  0019B6  CFF5 F040          	movff	tablat,___flmul@a
  3767  0019BA  0009               	tblrd		*+
  3768  0019BC  CFF5 F041          	movff	tablat,___flmul@a+1
  3769  0019C0  0009               	tblrd		*+
  3770  0019C2  CFF5 F042          	movff	tablat,___flmul@a+2
  3771  0019C6  000A               	tblrd		*-
  3772  0019C8  CFF5 F043          	movff	tablat,___flmul@a+3
  3773  0019CC  EC63  F00D         	call	___flmul	;wreg free
  3774  0019D0  C03C  F08D         	movff	?___flmul,?_scale
  3775  0019D4  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3776  0019D8  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3777  0019DC  C03F  F090         	movff	?___flmul+3,?_scale+3
  3778  0019E0  0012               	return	
  3779  0019E2                     l226:
  3780                           
  3781                           ;doprnt.c: 438: else if(scl > 10)
  3782  0019E2  0100               	movlb	0	; () banked
  3783  0019E4  5195               	movf	scale@scl& (0+255),w,b
  3784  0019E6  0A80               	xorlw	128
  3785  0019E8  0F75               	addlw	-139
  3786  0019EA  A0D8               	btfss	status,0,c
  3787  0019EC  D056               	goto	l228
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3791  0019EE  0E00               	movlw	0
  3792  0019F0  6E37               	movwf	___awdiv@divisor+1,c
  3793  0019F2  0E0A               	movlw	10
  3794  0019F4  6E36               	movwf	___awdiv@divisor,c
  3795  0019F6  5195               	movf	scale@scl& (0+255),w,b
  3796  0019F8  6E34               	movwf	___awdiv@dividend,c
  3797  0019FA  6A35               	clrf	___awdiv@dividend+1,c
  3798  0019FC  BE34               	btfsc	___awdiv@dividend,7,c
  3799  0019FE  0635               	decf	___awdiv@dividend+1,f,c
  3800  001A00  ECFE  F017         	call	___awdiv	;wreg free
  3801  001A04  90D8               	bcf	status,0,c
  3802  001A06  3634               	rlcf	?___awdiv,f,c
  3803  001A08  3635               	rlcf	?___awdiv+1,f,c
  3804  001A0A  90D8               	bcf	status,0,c
  3805  001A0C  3634               	rlcf	?___awdiv,f,c
  3806  001A0E  3635               	rlcf	?___awdiv+1,f,c
  3807  001A10  0E24               	movlw	36
  3808  001A12  2634               	addwf	?___awdiv,f,c
  3809  001A14  0E00               	movlw	0
  3810  001A16  2235               	addwfc	?___awdiv+1,f,c
  3811  001A18  0E01               	movlw	low __powers_
  3812  001A1A  2434               	addwf	?___awdiv,w,c
  3813  001A1C  6EF6               	movwf	tblptrl,c
  3814  001A1E  0E06               	movlw	high __powers_
  3815  001A20  2035               	addwfc	?___awdiv+1,w,c
  3816  001A22  6EF7               	movwf	tblptrh,c
  3817  001A24                     	if	0	;There are less than 3 active tblptr bytes
  3818  001A24                     	endif
  3819  001A24  0009               	tblrd		*+
  3820  001A26  CFF5 F03C          	movff	tablat,___flmul@b
  3821  001A2A  0009               	tblrd		*+
  3822  001A2C  CFF5 F03D          	movff	tablat,___flmul@b+1
  3823  001A30  0009               	tblrd		*+
  3824  001A32  CFF5 F03E          	movff	tablat,___flmul@b+2
  3825  001A36  000A               	tblrd		*-
  3826  001A38  CFF5 F03F          	movff	tablat,___flmul@b+3
  3827  001A3C  0E00               	movlw	0
  3828  001A3E  6E31               	movwf	___awmod@divisor+1,c
  3829  001A40  0E0A               	movlw	10
  3830  001A42  6E30               	movwf	___awmod@divisor,c
  3831  001A44  0100               	movlb	0	; () banked
  3832  001A46  5195               	movf	scale@scl& (0+255),w,b
  3833  001A48  6E2E               	movwf	___awmod@dividend,c
  3834  001A4A  6A2F               	clrf	___awmod@dividend+1,c
  3835  001A4C  BE2E               	btfsc	___awmod@dividend,7,c
  3836  001A4E  062F               	decf	___awmod@dividend+1,f,c
  3837  001A50  EC81  F018         	call	___awmod	;wreg free
  3838  001A54  90D8               	bcf	status,0,c
  3839  001A56  362E               	rlcf	?___awmod,f,c
  3840  001A58  362F               	rlcf	?___awmod+1,f,c
  3841  001A5A  90D8               	bcf	status,0,c
  3842  001A5C  362E               	rlcf	?___awmod,f,c
  3843  001A5E  362F               	rlcf	?___awmod+1,f,c
  3844  001A60  0E01               	movlw	low __powers_
  3845  001A62  242E               	addwf	?___awmod,w,c
  3846  001A64  6EF6               	movwf	tblptrl,c
  3847  001A66  0E06               	movlw	high __powers_
  3848  001A68  202F               	addwfc	?___awmod+1,w,c
  3849  001A6A  6EF7               	movwf	tblptrh,c
  3850  001A6C                     	if	0	;There are less than 3 active tblptr bytes
  3851  001A6C                     	endif
  3852  001A6C  0009               	tblrd		*+
  3853  001A6E  CFF5 F040          	movff	tablat,___flmul@a
  3854  001A72  0009               	tblrd		*+
  3855  001A74  CFF5 F041          	movff	tablat,___flmul@a+1
  3856  001A78  0009               	tblrd		*+
  3857  001A7A  CFF5 F042          	movff	tablat,___flmul@a+2
  3858  001A7E  000A               	tblrd		*-
  3859  001A80  CFF5 F043          	movff	tablat,___flmul@a+3
  3860  001A84  EC63  F00D         	call	___flmul	;wreg free
  3861  001A88  C03C  F08D         	movff	?___flmul,?_scale
  3862  001A8C  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3863  001A90  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3864  001A94  C03F  F090         	movff	?___flmul+3,?_scale+3
  3865  001A98  0012               	return	
  3866  001A9A                     l228:
  3867                           
  3868                           ;doprnt.c: 440: return _powers_[scl];
  3869  001A9A  0100               	movlb	0	; () banked
  3870  001A9C  5195               	movf	scale@scl& (0+255),w,b
  3871  001A9E  0D04               	mullw	4
  3872  001AA0  0E01               	movlw	low __powers_
  3873  001AA2  24F3               	addwf	prodl,w,c
  3874  001AA4  6EF6               	movwf	tblptrl,c
  3875  001AA6  0E06               	movlw	high __powers_
  3876  001AA8  20F4               	addwfc	prodh,w,c
  3877  001AAA  6EF7               	movwf	tblptrh,c
  3878  001AAC                     	if	0	;There are less than 3 active tblptr bytes
  3879  001AAC                     	endif
  3880  001AAC  0009               	tblrd		*+
  3881  001AAE  CFF5 F08D          	movff	tablat,?_scale
  3882  001AB2  0009               	tblrd		*+
  3883  001AB4  CFF5 F08E          	movff	tablat,?_scale+1
  3884  001AB8  0009               	tblrd		*+
  3885  001ABA  CFF5 F08F          	movff	tablat,?_scale+2
  3886  001ABE  000A               	tblrd		*-
  3887  001AC0  CFF5 F090          	movff	tablat,?_scale+3
  3888  001AC4  0012               	return	
  3889  001AC6                     __end_of_scale:
  3890                           	opt stack 0
  3891                           tblptru	equ	0xFF8
  3892                           tblptrh	equ	0xFF7
  3893                           tblptrl	equ	0xFF6
  3894                           tablat	equ	0xFF5
  3895                           prodh	equ	0xFF4
  3896                           prodl	equ	0xFF3
  3897                           intcon	equ	0xFF2
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _isdigit *****************
  3907 ;; Defined at:
  3908 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  c               1    wreg     unsigned char 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  c               1   47[COMRAM] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;		None               void
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3922 ;;      Params:         0       0       0       0       0       0       0
  3923 ;;      Locals:         2       0       0       0       0       0       0
  3924 ;;      Temps:          1       0       0       0       0       0       0
  3925 ;;      Totals:         3       0       0       0       0       0       0
  3926 ;;Total ram usage:        3 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    2
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_sprintf
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text3
  3937  003498                     __ptext3:
  3938                           	opt stack 0
  3939  003498                     _isdigit:
  3940                           	opt stack 27
  3941                           
  3942                           ;incstack = 0
  3943                           ;isdigit@c stored from wreg
  3944  003498  6E30               	movwf	isdigit@c,c
  3945  00349A  0E00               	movlw	0
  3946  00349C  6E2F               	movwf	_isdigit$523,c
  3947  00349E  0E3A               	movlw	58
  3948  0034A0  6030               	cpfslt	isdigit@c,c
  3949  0034A2  D005               	goto	l670
  3950  0034A4  0E2F               	movlw	47
  3951  0034A6  6430               	cpfsgt	isdigit@c,c
  3952  0034A8  D002               	goto	l670
  3953  0034AA  0E01               	movlw	1
  3954  0034AC  6E2F               	movwf	_isdigit$523,c
  3955  0034AE                     l670:
  3956  0034AE  C02F  F02E         	movff	_isdigit$523,??_isdigit
  3957  0034B2  302E               	rrcf	??_isdigit,w,c
  3958  0034B4  0012               	return	
  3959  0034B6                     __end_of_isdigit:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           intcon	equ	0xFF2
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           indf2	equ	0xFDF
  3971                           postinc2	equ	0xFDE
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _fround *****************
  3977 ;; Defined at:
  3978 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  prec            1    wreg     unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  prec            1   25[BANK0 ] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  4   13[BANK0 ] unsigned char 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         0       4       0       0       0       0       0
  3993 ;;      Locals:         0       9       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         0      13       0       0       0       0       0
  3996 ;;Total ram usage:       13 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    3
  3999 ;; This function calls:
  4000 ;;		___awdiv
  4001 ;;		___awmod
  4002 ;;		___flmul
  4003 ;; This function is called by:
  4004 ;;		_sprintf
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text4
  4009  00240C                     __ptext4:
  4010                           	opt stack 0
  4011  00240C                     _fround:
  4012                           	opt stack 26
  4013                           
  4014                           ;incstack = 0
  4015                           ;fround@prec stored from wreg
  4016  00240C  0100               	movlb	0	; () banked
  4017  00240E  6F99               	movwf	fround@prec& (0+255),b
  4018                           
  4019                           ;doprnt.c: 413: if(prec>=110)
  4020  002410  0E6D               	movlw	109
  4021  002412  0100               	movlb	0	; () banked
  4022  002414  6599               	cpfsgt	fround@prec& (0+255),b
  4023  002416  D0AC               	goto	l215
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4027  002418  0E00               	movlw	0
  4028  00241A  6E37               	movwf	___awdiv@divisor+1,c
  4029  00241C  0E0A               	movlw	10
  4030  00241E  6E36               	movwf	___awdiv@divisor,c
  4031  002420  0E00               	movlw	0
  4032  002422  6E31               	movwf	___awmod@divisor+1,c
  4033  002424  0E64               	movlw	100
  4034  002426  6E30               	movwf	___awmod@divisor,c
  4035  002428  C099  F02E         	movff	fround@prec,___awmod@dividend
  4036  00242C  6A2F               	clrf	___awmod@dividend+1,c
  4037  00242E  EC81  F018         	call	___awmod	;wreg free
  4038  002432  C02E  F034         	movff	?___awmod,___awdiv@dividend
  4039  002436  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  4040  00243A  ECFE  F017         	call	___awdiv	;wreg free
  4041  00243E  90D8               	bcf	status,0,c
  4042  002440  3634               	rlcf	?___awdiv,f,c
  4043  002442  3635               	rlcf	?___awdiv+1,f,c
  4044  002444  90D8               	bcf	status,0,c
  4045  002446  3634               	rlcf	?___awdiv,f,c
  4046  002448  3635               	rlcf	?___awdiv+1,f,c
  4047  00244A  0E24               	movlw	36
  4048  00244C  2634               	addwf	?___awdiv,f,c
  4049  00244E  0E00               	movlw	0
  4050  002450  2235               	addwfc	?___awdiv+1,f,c
  4051  002452  0E35               	movlw	low __npowers_
  4052  002454  2434               	addwf	?___awdiv,w,c
  4053  002456  6EF6               	movwf	tblptrl,c
  4054  002458  0E06               	movlw	high __npowers_
  4055  00245A  2035               	addwfc	?___awdiv+1,w,c
  4056  00245C  6EF7               	movwf	tblptrh,c
  4057  00245E                     	if	0	;There are less than 3 active tblptr bytes
  4058  00245E                     	endif
  4059  00245E  0009               	tblrd		*+
  4060  002460  CFF5 F040          	movff	tablat,___flmul@a
  4061  002464  0009               	tblrd		*+
  4062  002466  CFF5 F041          	movff	tablat,___flmul@a+1
  4063  00246A  0009               	tblrd		*+
  4064  00246C  CFF5 F042          	movff	tablat,___flmul@a+2
  4065  002470  000A               	tblrd		*-
  4066  002472  CFF5 F043          	movff	tablat,___flmul@a+3
  4067  002476  0E00               	movlw	0
  4068  002478  6E37               	movwf	___awdiv@divisor+1,c
  4069  00247A  0E64               	movlw	100
  4070  00247C  6E36               	movwf	___awdiv@divisor,c
  4071  00247E  C099  F034         	movff	fround@prec,___awdiv@dividend
  4072  002482  6A35               	clrf	___awdiv@dividend+1,c
  4073  002484  ECFE  F017         	call	___awdiv	;wreg free
  4074  002488  90D8               	bcf	status,0,c
  4075  00248A  3634               	rlcf	?___awdiv,f,c
  4076  00248C  3635               	rlcf	?___awdiv+1,f,c
  4077  00248E  90D8               	bcf	status,0,c
  4078  002490  3634               	rlcf	?___awdiv,f,c
  4079  002492  3635               	rlcf	?___awdiv+1,f,c
  4080  002494  0E48               	movlw	72
  4081  002496  2634               	addwf	?___awdiv,f,c
  4082  002498  0E00               	movlw	0
  4083  00249A  2235               	addwfc	?___awdiv+1,f,c
  4084  00249C  0E35               	movlw	low __npowers_
  4085  00249E  2434               	addwf	?___awdiv,w,c
  4086  0024A0  6EF6               	movwf	tblptrl,c
  4087  0024A2  0E06               	movlw	high __npowers_
  4088  0024A4  2035               	addwfc	?___awdiv+1,w,c
  4089  0024A6  6EF7               	movwf	tblptrh,c
  4090  0024A8                     	if	0	;There are less than 3 active tblptr bytes
  4091  0024A8                     	endif
  4092  0024A8  0009               	tblrd		*+
  4093  0024AA  CFF5 F03C          	movff	tablat,___flmul@b
  4094  0024AE  0009               	tblrd		*+
  4095  0024B0  CFF5 F03D          	movff	tablat,___flmul@b+1
  4096  0024B4  0009               	tblrd		*+
  4097  0024B6  CFF5 F03E          	movff	tablat,___flmul@b+2
  4098  0024BA  000A               	tblrd		*-
  4099  0024BC  CFF5 F03F          	movff	tablat,___flmul@b+3
  4100  0024C0  EC63  F00D         	call	___flmul	;wreg free
  4101  0024C4  C03C  F095         	movff	?___flmul,_fround$876
  4102  0024C8  C03D  F096         	movff	?___flmul+1,_fround$876+1
  4103  0024CC  C03E  F097         	movff	?___flmul+2,_fround$876+2
  4104  0024D0  C03F  F098         	movff	?___flmul+3,_fround$876+3
  4105                           
  4106                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4107  0024D4  0E00               	movlw	0
  4108  0024D6  6E31               	movwf	___awmod@divisor+1,c
  4109  0024D8  0E0A               	movlw	10
  4110  0024DA  6E30               	movwf	___awmod@divisor,c
  4111  0024DC  C099  F02E         	movff	fround@prec,___awmod@dividend
  4112  0024E0  6A2F               	clrf	___awmod@dividend+1,c
  4113  0024E2  EC81  F018         	call	___awmod	;wreg free
  4114  0024E6  90D8               	bcf	status,0,c
  4115  0024E8  362E               	rlcf	?___awmod,f,c
  4116  0024EA  362F               	rlcf	?___awmod+1,f,c
  4117  0024EC  90D8               	bcf	status,0,c
  4118  0024EE  362E               	rlcf	?___awmod,f,c
  4119  0024F0  362F               	rlcf	?___awmod+1,f,c
  4120  0024F2  0E35               	movlw	low __npowers_
  4121  0024F4  242E               	addwf	?___awmod,w,c
  4122  0024F6  6EF6               	movwf	tblptrl,c
  4123  0024F8  0E06               	movlw	high __npowers_
  4124  0024FA  202F               	addwfc	?___awmod+1,w,c
  4125  0024FC  6EF7               	movwf	tblptrh,c
  4126  0024FE                     	if	0	;There are less than 3 active tblptr bytes
  4127  0024FE                     	endif
  4128  0024FE  0009               	tblrd		*+
  4129  002500  CFF5 F040          	movff	tablat,___flmul@a
  4130  002504  0009               	tblrd		*+
  4131  002506  CFF5 F041          	movff	tablat,___flmul@a+1
  4132  00250A  0009               	tblrd		*+
  4133  00250C  CFF5 F042          	movff	tablat,___flmul@a+2
  4134  002510  000A               	tblrd		*-
  4135  002512  CFF5 F043          	movff	tablat,___flmul@a+3
  4136  002516  C095  F03C         	movff	_fround$876,___flmul@b
  4137  00251A  C096  F03D         	movff	_fround$876+1,___flmul@b+1
  4138  00251E  C097  F03E         	movff	_fround$876+2,___flmul@b+2
  4139  002522  C098  F03F         	movff	_fround$876+3,___flmul@b+3
  4140  002526  EC63  F00D         	call	___flmul	;wreg free
  4141  00252A  C03C  F091         	movff	?___flmul,_fround$877
  4142  00252E  C03D  F092         	movff	?___flmul+1,_fround$877+1
  4143  002532  C03E  F093         	movff	?___flmul+2,_fround$877+2
  4144  002536  C03F  F094         	movff	?___flmul+3,_fround$877+3
  4145                           
  4146                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4147  00253A  C091  F03C         	movff	_fround$877,___flmul@b
  4148  00253E  C092  F03D         	movff	_fround$877+1,___flmul@b+1
  4149  002542  C093  F03E         	movff	_fround$877+2,___flmul@b+2
  4150  002546  C094  F03F         	movff	_fround$877+3,___flmul@b+3
  4151  00254A  0E00               	movlw	0
  4152  00254C  6E40               	movwf	___flmul@a,c
  4153  00254E  0E00               	movlw	0
  4154  002550  6E41               	movwf	___flmul@a+1,c
  4155  002552  0E00               	movlw	0
  4156  002554  6E42               	movwf	___flmul@a+2,c
  4157  002556  0E3F               	movlw	63
  4158  002558  6E43               	movwf	___flmul@a+3,c
  4159  00255A  EC63  F00D         	call	___flmul	;wreg free
  4160  00255E  C03C  F08D         	movff	?___flmul,?_fround
  4161  002562  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4162  002566  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4163  00256A  C03F  F090         	movff	?___flmul+3,?_fround+3
  4164  00256E  0012               	return	
  4165  002570                     l215:
  4166                           
  4167                           ;doprnt.c: 415: else if(prec > 10)
  4168  002570  0E0A               	movlw	10
  4169  002572  0100               	movlb	0	; () banked
  4170  002574  6599               	cpfsgt	fround@prec& (0+255),b
  4171  002576  D06B               	goto	l218
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4175  002578  0E00               	movlw	0
  4176  00257A  6E31               	movwf	___awmod@divisor+1,c
  4177  00257C  0E0A               	movlw	10
  4178  00257E  6E30               	movwf	___awmod@divisor,c
  4179  002580  C099  F02E         	movff	fround@prec,___awmod@dividend
  4180  002584  6A2F               	clrf	___awmod@dividend+1,c
  4181  002586  EC81  F018         	call	___awmod	;wreg free
  4182  00258A  90D8               	bcf	status,0,c
  4183  00258C  362E               	rlcf	?___awmod,f,c
  4184  00258E  362F               	rlcf	?___awmod+1,f,c
  4185  002590  90D8               	bcf	status,0,c
  4186  002592  362E               	rlcf	?___awmod,f,c
  4187  002594  362F               	rlcf	?___awmod+1,f,c
  4188  002596  0E35               	movlw	low __npowers_
  4189  002598  242E               	addwf	?___awmod,w,c
  4190  00259A  6EF6               	movwf	tblptrl,c
  4191  00259C  0E06               	movlw	high __npowers_
  4192  00259E  202F               	addwfc	?___awmod+1,w,c
  4193  0025A0  6EF7               	movwf	tblptrh,c
  4194  0025A2                     	if	0	;There are less than 3 active tblptr bytes
  4195  0025A2                     	endif
  4196  0025A2  0009               	tblrd		*+
  4197  0025A4  CFF5 F040          	movff	tablat,___flmul@a
  4198  0025A8  0009               	tblrd		*+
  4199  0025AA  CFF5 F041          	movff	tablat,___flmul@a+1
  4200  0025AE  0009               	tblrd		*+
  4201  0025B0  CFF5 F042          	movff	tablat,___flmul@a+2
  4202  0025B4  000A               	tblrd		*-
  4203  0025B6  CFF5 F043          	movff	tablat,___flmul@a+3
  4204  0025BA  0E00               	movlw	0
  4205  0025BC  6E37               	movwf	___awdiv@divisor+1,c
  4206  0025BE  0E0A               	movlw	10
  4207  0025C0  6E36               	movwf	___awdiv@divisor,c
  4208  0025C2  C099  F034         	movff	fround@prec,___awdiv@dividend
  4209  0025C6  6A35               	clrf	___awdiv@dividend+1,c
  4210  0025C8  ECFE  F017         	call	___awdiv	;wreg free
  4211  0025CC  90D8               	bcf	status,0,c
  4212  0025CE  3634               	rlcf	?___awdiv,f,c
  4213  0025D0  3635               	rlcf	?___awdiv+1,f,c
  4214  0025D2  90D8               	bcf	status,0,c
  4215  0025D4  3634               	rlcf	?___awdiv,f,c
  4216  0025D6  3635               	rlcf	?___awdiv+1,f,c
  4217  0025D8  0E24               	movlw	36
  4218  0025DA  2634               	addwf	?___awdiv,f,c
  4219  0025DC  0E00               	movlw	0
  4220  0025DE  2235               	addwfc	?___awdiv+1,f,c
  4221  0025E0  0E35               	movlw	low __npowers_
  4222  0025E2  2434               	addwf	?___awdiv,w,c
  4223  0025E4  6EF6               	movwf	tblptrl,c
  4224  0025E6  0E06               	movlw	high __npowers_
  4225  0025E8  2035               	addwfc	?___awdiv+1,w,c
  4226  0025EA  6EF7               	movwf	tblptrh,c
  4227  0025EC                     	if	0	;There are less than 3 active tblptr bytes
  4228  0025EC                     	endif
  4229  0025EC  0009               	tblrd		*+
  4230  0025EE  CFF5 F03C          	movff	tablat,___flmul@b
  4231  0025F2  0009               	tblrd		*+
  4232  0025F4  CFF5 F03D          	movff	tablat,___flmul@b+1
  4233  0025F8  0009               	tblrd		*+
  4234  0025FA  CFF5 F03E          	movff	tablat,___flmul@b+2
  4235  0025FE  000A               	tblrd		*-
  4236  002600  CFF5 F03F          	movff	tablat,___flmul@b+3
  4237  002604  EC63  F00D         	call	___flmul	;wreg free
  4238  002608  C03C  F095         	movff	?___flmul,_fround$876
  4239  00260C  C03D  F096         	movff	?___flmul+1,_fround$876+1
  4240  002610  C03E  F097         	movff	?___flmul+2,_fround$876+2
  4241  002614  C03F  F098         	movff	?___flmul+3,_fround$876+3
  4242                           
  4243                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4244  002618  C095  F03C         	movff	_fround$876,___flmul@b
  4245  00261C  C096  F03D         	movff	_fround$876+1,___flmul@b+1
  4246  002620  C097  F03E         	movff	_fround$876+2,___flmul@b+2
  4247  002624  C098  F03F         	movff	_fround$876+3,___flmul@b+3
  4248  002628  0E00               	movlw	0
  4249  00262A  6E40               	movwf	___flmul@a,c
  4250  00262C  0E00               	movlw	0
  4251  00262E  6E41               	movwf	___flmul@a+1,c
  4252  002630  0E00               	movlw	0
  4253  002632  6E42               	movwf	___flmul@a+2,c
  4254  002634  0E3F               	movlw	63
  4255  002636  6E43               	movwf	___flmul@a+3,c
  4256  002638  EC63  F00D         	call	___flmul	;wreg free
  4257  00263C  C03C  F08D         	movff	?___flmul,?_fround
  4258  002640  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4259  002644  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4260  002648  C03F  F090         	movff	?___flmul+3,?_fround+3
  4261  00264C  0012               	return	
  4262  00264E                     l218:
  4263                           
  4264                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4265  00264E  0100               	movlb	0	; () banked
  4266  002650  5199               	movf	fround@prec& (0+255),w,b
  4267  002652  0D04               	mullw	4
  4268  002654  0E35               	movlw	low __npowers_
  4269  002656  24F3               	addwf	prodl,w,c
  4270  002658  6EF6               	movwf	tblptrl,c
  4271  00265A  0E06               	movlw	high __npowers_
  4272  00265C  20F4               	addwfc	prodh,w,c
  4273  00265E  6EF7               	movwf	tblptrh,c
  4274  002660                     	if	0	;There are less than 3 active tblptr bytes
  4275  002660                     	endif
  4276  002660  0009               	tblrd		*+
  4277  002662  CFF5 F03C          	movff	tablat,___flmul@b
  4278  002666  0009               	tblrd		*+
  4279  002668  CFF5 F03D          	movff	tablat,___flmul@b+1
  4280  00266C  0009               	tblrd		*+
  4281  00266E  CFF5 F03E          	movff	tablat,___flmul@b+2
  4282  002672  000A               	tblrd		*-
  4283  002674  CFF5 F03F          	movff	tablat,___flmul@b+3
  4284  002678  0E00               	movlw	0
  4285  00267A  6E40               	movwf	___flmul@a,c
  4286  00267C  0E00               	movlw	0
  4287  00267E  6E41               	movwf	___flmul@a+1,c
  4288  002680  0E00               	movlw	0
  4289  002682  6E42               	movwf	___flmul@a+2,c
  4290  002684  0E3F               	movlw	63
  4291  002686  6E43               	movwf	___flmul@a+3,c
  4292  002688  EC63  F00D         	call	___flmul	;wreg free
  4293  00268C  C03C  F08D         	movff	?___flmul,?_fround
  4294  002690  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4295  002694  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4296  002698  C03F  F090         	movff	?___flmul+3,?_fround+3
  4297  00269C  0012               	return	
  4298  00269E                     __end_of_fround:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function ___awmod *****************
  4316 ;; Defined at:
  4317 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  dividend        2   45[COMRAM] int 
  4320 ;;  divisor         2   47[COMRAM] int 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  sign            1   50[COMRAM] unsigned char 
  4323 ;;  counter         1   49[COMRAM] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  2   45[COMRAM] int 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4333 ;;      Params:         4       0       0       0       0       0       0
  4334 ;;      Locals:         2       0       0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0
  4336 ;;      Totals:         6       0       0       0       0       0       0
  4337 ;;Total ram usage:        6 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    2
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_fround
  4344 ;;		_scale
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text5
  4349  003102                     __ptext5:
  4350                           	opt stack 0
  4351  003102                     ___awmod:
  4352                           	opt stack 26
  4353                           
  4354                           ;incstack = 0
  4355  003102  0E00               	movlw	0
  4356  003104  6E33               	movwf	___awmod@sign,c
  4357  003106  AE2F               	btfss	___awmod@dividend+1,7,c
  4358  003108  D006               	goto	l487
  4359  00310A  6C2E               	negf	___awmod@dividend,c
  4360  00310C  1E2F               	comf	___awmod@dividend+1,f,c
  4361  00310E  B0D8               	btfsc	status,0,c
  4362  003110  2A2F               	incf	___awmod@dividend+1,f,c
  4363  003112  0E01               	movlw	1
  4364  003114  6E33               	movwf	___awmod@sign,c
  4365  003116                     l487:
  4366  003116  AE31               	btfss	___awmod@divisor+1,7,c
  4367  003118  D004               	goto	l488
  4368  00311A  6C30               	negf	___awmod@divisor,c
  4369  00311C  1E31               	comf	___awmod@divisor+1,f,c
  4370  00311E  B0D8               	btfsc	status,0,c
  4371  003120  2A31               	incf	___awmod@divisor+1,f,c
  4372  003122                     l488:
  4373  003122  5030               	movf	___awmod@divisor,w,c
  4374  003124  1031               	iorwf	___awmod@divisor+1,w,c
  4375  003126  B4D8               	btfsc	status,2,c
  4376  003128  D018               	goto	l495
  4377  00312A  0E01               	movlw	1
  4378  00312C  6E32               	movwf	___awmod@counter,c
  4379  00312E  D004               	goto	l490
  4380  003130  90D8               	bcf	status,0,c
  4381  003132  3630               	rlcf	___awmod@divisor,f,c
  4382  003134  3631               	rlcf	___awmod@divisor+1,f,c
  4383  003136  2A32               	incf	___awmod@counter,f,c
  4384  003138                     l490:
  4385  003138  AE31               	btfss	___awmod@divisor+1,7,c
  4386  00313A  D7FA               	goto	l491
  4387  00313C                     u4920:
  4388  00313C  5030               	movf	___awmod@divisor,w,c
  4389  00313E  5C2E               	subwf	___awmod@dividend,w,c
  4390  003140  5031               	movf	___awmod@divisor+1,w,c
  4391  003142  582F               	subwfb	___awmod@dividend+1,w,c
  4392  003144  A0D8               	btfss	status,0,c
  4393  003146  D004               	goto	l494
  4394  003148  5030               	movf	___awmod@divisor,w,c
  4395  00314A  5E2E               	subwf	___awmod@dividend,f,c
  4396  00314C  5031               	movf	___awmod@divisor+1,w,c
  4397  00314E  5A2F               	subwfb	___awmod@dividend+1,f,c
  4398  003150                     l494:
  4399  003150  90D8               	bcf	status,0,c
  4400  003152  3231               	rrcf	___awmod@divisor+1,f,c
  4401  003154  3230               	rrcf	___awmod@divisor,f,c
  4402  003156  2E32               	decfsz	___awmod@counter,f,c
  4403  003158  D7F1               	goto	u4920
  4404  00315A                     l495:
  4405  00315A  5033               	movf	___awmod@sign,w,c
  4406  00315C  B4D8               	btfsc	status,2,c
  4407  00315E  D004               	goto	l496
  4408  003160  6C2E               	negf	___awmod@dividend,c
  4409  003162  1E2F               	comf	___awmod@dividend+1,f,c
  4410  003164  B0D8               	btfsc	status,0,c
  4411  003166  2A2F               	incf	___awmod@dividend+1,f,c
  4412  003168                     l496:
  4413  003168  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4414  00316C  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4415  003170  0012               	return	
  4416  003172                     __end_of___awmod:
  4417                           	opt stack 0
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           prodh	equ	0xFF4
  4423                           prodl	equ	0xFF3
  4424                           intcon	equ	0xFF2
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function ___awdiv *****************
  4434 ;; Defined at:
  4435 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  dividend        2   51[COMRAM] int 
  4438 ;;  divisor         2   53[COMRAM] int 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  quotient        2   57[COMRAM] int 
  4441 ;;  sign            1   56[COMRAM] unsigned char 
  4442 ;;  counter         1   55[COMRAM] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  2   51[COMRAM] int 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4452 ;;      Params:         4       0       0       0       0       0       0
  4453 ;;      Locals:         4       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0
  4455 ;;      Totals:         8       0       0       0       0       0       0
  4456 ;;Total ram usage:        8 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    2
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_fround
  4463 ;;		_scale
  4464 ;;		_sprintf
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text6
  4469  002FFC                     __ptext6:
  4470                           	opt stack 0
  4471  002FFC                     ___awdiv:
  4472                           	opt stack 26
  4473                           
  4474                           ;incstack = 0
  4475  002FFC  0E00               	movlw	0
  4476  002FFE  6E39               	movwf	___awdiv@sign,c
  4477  003000  AE37               	btfss	___awdiv@divisor+1,7,c
  4478  003002  D006               	goto	l474
  4479  003004  6C36               	negf	___awdiv@divisor,c
  4480  003006  1E37               	comf	___awdiv@divisor+1,f,c
  4481  003008  B0D8               	btfsc	status,0,c
  4482  00300A  2A37               	incf	___awdiv@divisor+1,f,c
  4483  00300C  0E01               	movlw	1
  4484  00300E  6E39               	movwf	___awdiv@sign,c
  4485  003010                     l474:
  4486  003010  AE35               	btfss	___awdiv@dividend+1,7,c
  4487  003012  D006               	goto	l475
  4488  003014  6C34               	negf	___awdiv@dividend,c
  4489  003016  1E35               	comf	___awdiv@dividend+1,f,c
  4490  003018  B0D8               	btfsc	status,0,c
  4491  00301A  2A35               	incf	___awdiv@dividend+1,f,c
  4492  00301C  0E01               	movlw	1
  4493  00301E  1A39               	xorwf	___awdiv@sign,f,c
  4494  003020                     l475:
  4495  003020  0E00               	movlw	0
  4496  003022  6E3B               	movwf	___awdiv@quotient+1,c
  4497  003024  0E00               	movlw	0
  4498  003026  6E3A               	movwf	___awdiv@quotient,c
  4499  003028  5036               	movf	___awdiv@divisor,w,c
  4500  00302A  1037               	iorwf	___awdiv@divisor+1,w,c
  4501  00302C  B4D8               	btfsc	status,2,c
  4502  00302E  D01C               	goto	l482
  4503  003030  0E01               	movlw	1
  4504  003032  6E38               	movwf	___awdiv@counter,c
  4505  003034  D004               	goto	l477
  4506  003036  90D8               	bcf	status,0,c
  4507  003038  3636               	rlcf	___awdiv@divisor,f,c
  4508  00303A  3637               	rlcf	___awdiv@divisor+1,f,c
  4509  00303C  2A38               	incf	___awdiv@counter,f,c
  4510  00303E                     l477:
  4511  00303E  AE37               	btfss	___awdiv@divisor+1,7,c
  4512  003040  D7FA               	goto	l478
  4513  003042                     u4860:
  4514  003042  90D8               	bcf	status,0,c
  4515  003044  363A               	rlcf	___awdiv@quotient,f,c
  4516  003046  363B               	rlcf	___awdiv@quotient+1,f,c
  4517  003048  5036               	movf	___awdiv@divisor,w,c
  4518  00304A  5C34               	subwf	___awdiv@dividend,w,c
  4519  00304C  5037               	movf	___awdiv@divisor+1,w,c
  4520  00304E  5835               	subwfb	___awdiv@dividend+1,w,c
  4521  003050  A0D8               	btfss	status,0,c
  4522  003052  D005               	goto	l481
  4523  003054  5036               	movf	___awdiv@divisor,w,c
  4524  003056  5E34               	subwf	___awdiv@dividend,f,c
  4525  003058  5037               	movf	___awdiv@divisor+1,w,c
  4526  00305A  5A35               	subwfb	___awdiv@dividend+1,f,c
  4527  00305C  803A               	bsf	___awdiv@quotient,0,c
  4528  00305E                     l481:
  4529  00305E  90D8               	bcf	status,0,c
  4530  003060  3237               	rrcf	___awdiv@divisor+1,f,c
  4531  003062  3236               	rrcf	___awdiv@divisor,f,c
  4532  003064  2E38               	decfsz	___awdiv@counter,f,c
  4533  003066  D7ED               	goto	u4860
  4534  003068                     l482:
  4535  003068  5039               	movf	___awdiv@sign,w,c
  4536  00306A  B4D8               	btfsc	status,2,c
  4537  00306C  D004               	goto	l483
  4538  00306E  6C3A               	negf	___awdiv@quotient,c
  4539  003070  1E3B               	comf	___awdiv@quotient+1,f,c
  4540  003072  B0D8               	btfsc	status,0,c
  4541  003074  2A3B               	incf	___awdiv@quotient+1,f,c
  4542  003076                     l483:
  4543  003076  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4544  00307A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4545  00307E  0012               	return	
  4546  003080                     __end_of___awdiv:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           intcon	equ	0xFF2
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           fsr2h	equ	0xFDA
  4560                           fsr2l	equ	0xFD9
  4561                           status	equ	0xFD8
  4562                           
  4563 ;; *************** function __tdiv_to_l_ *****************
  4564 ;; Defined at:
  4565 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  f1              4   45[COMRAM] float 
  4568 ;;  f2              4   49[COMRAM] float 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  quot            4   56[COMRAM] unsigned long 
  4571 ;;  exp1            1   61[COMRAM] unsigned char 
  4572 ;;  cntr            1   60[COMRAM] unsigned char 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  4   45[COMRAM] unsigned long 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4582 ;;      Params:         8       0       0       0       0       0       0
  4583 ;;      Locals:         6       0       0       0       0       0       0
  4584 ;;      Temps:          3       0       0       0       0       0       0
  4585 ;;      Totals:        17       0       0       0       0       0       0
  4586 ;;Total ram usage:       17 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    2
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_sprintf
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           	psect	text7
  4597  0027EE                     __ptext7:
  4598                           	opt stack 0
  4599  0027EE                     __tdiv_to_l_:
  4600                           	opt stack 27
  4601                           
  4602                           ;incstack = 0
  4603  0027EE  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4604  0027F2  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4605  0027F4  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4606  0027F6  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4607  0027F8  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4608  0027FA  E301               	bnc	u5041
  4609  0027FC  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4610  0027FE                     u5041:
  4611  0027FE  5036               	movf	??__tdiv_to_l_,w,c
  4612  002800  6E3E               	movwf	__tdiv_to_l_@exp1,c
  4613  002802  503E               	movf	__tdiv_to_l_@exp1,w,c
  4614  002804  A4D8               	btfss	status,2,c
  4615  002806  D009               	goto	l610
  4616  002808  0E00               	movlw	0
  4617  00280A  6E2E               	movwf	?__tdiv_to_l_,c
  4618  00280C  0E00               	movlw	0
  4619  00280E  6E2F               	movwf	?__tdiv_to_l_+1,c
  4620  002810  0E00               	movlw	0
  4621  002812  6E30               	movwf	?__tdiv_to_l_+2,c
  4622  002814  0E00               	movlw	0
  4623  002816  6E31               	movwf	?__tdiv_to_l_+3,c
  4624  002818  0012               	return	
  4625  00281A                     l610:
  4626  00281A  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4627  00281E  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4628  002820  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4629  002822  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4630  002824  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4631  002826  E301               	bnc	u5061
  4632  002828  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4633  00282A                     u5061:
  4634  00282A  5036               	movf	??__tdiv_to_l_,w,c
  4635  00282C  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4636  00282E  503D               	movf	__tdiv_to_l_@cntr,w,c
  4637  002830  A4D8               	btfss	status,2,c
  4638  002832  D009               	goto	l612
  4639  002834  0E00               	movlw	0
  4640  002836  6E2E               	movwf	?__tdiv_to_l_,c
  4641  002838  0E00               	movlw	0
  4642  00283A  6E2F               	movwf	?__tdiv_to_l_+1,c
  4643  00283C  0E00               	movlw	0
  4644  00283E  6E30               	movwf	?__tdiv_to_l_+2,c
  4645  002840  0E00               	movlw	0
  4646  002842  6E31               	movwf	?__tdiv_to_l_+3,c
  4647  002844  0012               	return	
  4648  002846                     l612:
  4649  002846  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4650  002848  0EFF               	movlw	255
  4651  00284A  162E               	andwf	__tdiv_to_l_@f1,f,c
  4652  00284C  0EFF               	movlw	255
  4653  00284E  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4654  002850  0E00               	movlw	0
  4655  002852  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4656  002854  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4657  002856  0EFF               	movlw	255
  4658  002858  1632               	andwf	__tdiv_to_l_@f2,f,c
  4659  00285A  0EFF               	movlw	255
  4660  00285C  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4661  00285E  0E00               	movlw	0
  4662  002860  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4663  002862  0E00               	movlw	0
  4664  002864  6E39               	movwf	__tdiv_to_l_@quot,c
  4665  002866  0E00               	movlw	0
  4666  002868  6E3A               	movwf	__tdiv_to_l_@quot+1,c
  4667  00286A  0E00               	movlw	0
  4668  00286C  6E3B               	movwf	__tdiv_to_l_@quot+2,c
  4669  00286E  0E00               	movlw	0
  4670  002870  6E3C               	movwf	__tdiv_to_l_@quot+3,c
  4671  002872  0E7F               	movlw	127
  4672  002874  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4673  002876  503D               	movf	__tdiv_to_l_@cntr,w,c
  4674  002878  0F98               	addlw	152
  4675  00287A  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4676  00287C  0E18               	movlw	24
  4677  00287E  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4678  002880                     l613:
  4679  002880  90D8               	bcf	status,0,c
  4680  002882  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4681  002884  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4682  002886  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4683  002888  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4684  00288A  5032               	movf	__tdiv_to_l_@f2,w,c
  4685  00288C  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4686  00288E  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4687  002890  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4688  002892  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4689  002894  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4690  002896  A0D8               	btfss	status,0,c
  4691  002898  D007               	goto	l614
  4692  00289A  5032               	movf	__tdiv_to_l_@f2,w,c
  4693  00289C  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4694  00289E  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4695  0028A0  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4696  0028A2  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4697  0028A4  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4698  0028A6  8039               	bsf	__tdiv_to_l_@quot,0,c
  4699  0028A8                     l614:
  4700  0028A8  90D8               	bcf	status,0,c
  4701  0028AA  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4702  0028AC  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4703  0028AE  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4704  0028B0  2E3D               	decfsz	__tdiv_to_l_@cntr,f,c
  4705  0028B2  D7E6               	goto	l613
  4706  0028B4  AE3E               	btfss	__tdiv_to_l_@exp1,7,c
  4707  0028B6  D016               	goto	l616
  4708  0028B8  503E               	movf	__tdiv_to_l_@exp1,w,c
  4709  0028BA  0A80               	xorlw	128
  4710  0028BC  0F97               	addlw	151
  4711  0028BE  B0D8               	btfsc	status,0,c
  4712  0028C0  D009               	goto	l617
  4713  0028C2  0E00               	movlw	0
  4714  0028C4  6E2E               	movwf	?__tdiv_to_l_,c
  4715  0028C6  0E00               	movlw	0
  4716  0028C8  6E2F               	movwf	?__tdiv_to_l_+1,c
  4717  0028CA  0E00               	movlw	0
  4718  0028CC  6E30               	movwf	?__tdiv_to_l_+2,c
  4719  0028CE  0E00               	movlw	0
  4720  0028D0  6E31               	movwf	?__tdiv_to_l_+3,c
  4721  0028D2  0012               	return	
  4722  0028D4                     l617:
  4723  0028D4  90D8               	bcf	status,0,c
  4724  0028D6  323C               	rrcf	__tdiv_to_l_@quot+3,f,c
  4725  0028D8  323B               	rrcf	__tdiv_to_l_@quot+2,f,c
  4726  0028DA  323A               	rrcf	__tdiv_to_l_@quot+1,f,c
  4727  0028DC  3239               	rrcf	__tdiv_to_l_@quot,f,c
  4728  0028DE  3E3E               	incfsz	__tdiv_to_l_@exp1,f,c
  4729  0028E0  D7F9               	goto	l617
  4730  0028E2  D015               	goto	u5120
  4731  0028E4                     l616:
  4732  0028E4  0E17               	movlw	23
  4733  0028E6  643E               	cpfsgt	__tdiv_to_l_@exp1,c
  4734  0028E8  D00F               	goto	l622
  4735  0028EA  0E00               	movlw	0
  4736  0028EC  6E2E               	movwf	?__tdiv_to_l_,c
  4737  0028EE  0E00               	movlw	0
  4738  0028F0  6E2F               	movwf	?__tdiv_to_l_+1,c
  4739  0028F2  0E00               	movlw	0
  4740  0028F4  6E30               	movwf	?__tdiv_to_l_+2,c
  4741  0028F6  0E00               	movlw	0
  4742  0028F8  6E31               	movwf	?__tdiv_to_l_+3,c
  4743  0028FA  0012               	return	
  4744  0028FC  90D8               	bcf	status,0,c
  4745  0028FE  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4746  002900  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4747  002902  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4748  002904  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4749  002906  063E               	decf	__tdiv_to_l_@exp1,f,c
  4750  002908                     l622:
  4751  002908  503E               	movf	__tdiv_to_l_@exp1,w,c
  4752  00290A  A4D8               	btfss	status,2,c
  4753  00290C  D7F7               	goto	l623
  4754  00290E                     u5120:
  4755  00290E  C039  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4756  002912  C03A  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4757  002916  C03B  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4758  00291A  C03C  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4759  00291E  0012               	return		;funcret
  4760  002920                     __end_of__tdiv_to_l_:
  4761                           	opt stack 0
  4762                           tblptru	equ	0xFF8
  4763                           tblptrh	equ	0xFF7
  4764                           tblptrl	equ	0xFF6
  4765                           tablat	equ	0xFF5
  4766                           prodh	equ	0xFF4
  4767                           prodl	equ	0xFF3
  4768                           intcon	equ	0xFF2
  4769                           postinc0	equ	0xFEE
  4770                           wreg	equ	0xFE8
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           fsr2h	equ	0xFDA
  4774                           fsr2l	equ	0xFD9
  4775                           status	equ	0xFD8
  4776                           
  4777 ;; *************** function __div_to_l_ *****************
  4778 ;; Defined at:
  4779 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  f1              4   45[COMRAM] unsigned long 
  4782 ;;  f2              4   49[COMRAM] unsigned long 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  quot            4   53[COMRAM] unsigned long 
  4785 ;;  exp1            1   58[COMRAM] unsigned char 
  4786 ;;  cntr            1   57[COMRAM] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  4   45[COMRAM] unsigned long 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4796 ;;      Params:         8       0       0       0       0       0       0
  4797 ;;      Locals:         6       0       0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0
  4799 ;;      Totals:        14       0       0       0       0       0       0
  4800 ;;Total ram usage:       14 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    2
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_sprintf
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text8
  4811  002920                     __ptext8:
  4812                           	opt stack 0
  4813  002920                     __div_to_l_:
  4814                           	opt stack 27
  4815                           
  4816                           ;incstack = 0
  4817  002920  3430               	rlcf	__div_to_l_@f1+2,w,c
  4818  002922  3431               	rlcf	__div_to_l_@f1+3,w,c
  4819  002924  6E3B               	movwf	__div_to_l_@exp1,c
  4820  002926  503B               	movf	__div_to_l_@exp1,w,c
  4821  002928  A4D8               	btfss	status,2,c
  4822  00292A  D009               	goto	l506
  4823  00292C  0E00               	movlw	0
  4824  00292E  6E2E               	movwf	?__div_to_l_,c
  4825  002930  0E00               	movlw	0
  4826  002932  6E2F               	movwf	?__div_to_l_+1,c
  4827  002934  0E00               	movlw	0
  4828  002936  6E30               	movwf	?__div_to_l_+2,c
  4829  002938  0E00               	movlw	0
  4830  00293A  6E31               	movwf	?__div_to_l_+3,c
  4831  00293C  0012               	return	
  4832  00293E                     l506:
  4833  00293E  3434               	rlcf	__div_to_l_@f2+2,w,c
  4834  002940  3435               	rlcf	__div_to_l_@f2+3,w,c
  4835  002942  6E3A               	movwf	__div_to_l_@cntr,c
  4836  002944  503A               	movf	__div_to_l_@cntr,w,c
  4837  002946  A4D8               	btfss	status,2,c
  4838  002948  D009               	goto	l508
  4839  00294A  0E00               	movlw	0
  4840  00294C  6E2E               	movwf	?__div_to_l_,c
  4841  00294E  0E00               	movlw	0
  4842  002950  6E2F               	movwf	?__div_to_l_+1,c
  4843  002952  0E00               	movlw	0
  4844  002954  6E30               	movwf	?__div_to_l_+2,c
  4845  002956  0E00               	movlw	0
  4846  002958  6E31               	movwf	?__div_to_l_+3,c
  4847  00295A  0012               	return	
  4848  00295C                     l508:
  4849  00295C  8E30               	bsf	__div_to_l_@f1+2,7,c
  4850  00295E  0EFF               	movlw	255
  4851  002960  162E               	andwf	__div_to_l_@f1,f,c
  4852  002962  0EFF               	movlw	255
  4853  002964  162F               	andwf	__div_to_l_@f1+1,f,c
  4854  002966  0EFF               	movlw	255
  4855  002968  1630               	andwf	__div_to_l_@f1+2,f,c
  4856  00296A  0E00               	movlw	0
  4857  00296C  1631               	andwf	__div_to_l_@f1+3,f,c
  4858  00296E  8E34               	bsf	__div_to_l_@f2+2,7,c
  4859  002970  0EFF               	movlw	255
  4860  002972  1632               	andwf	__div_to_l_@f2,f,c
  4861  002974  0EFF               	movlw	255
  4862  002976  1633               	andwf	__div_to_l_@f2+1,f,c
  4863  002978  0EFF               	movlw	255
  4864  00297A  1634               	andwf	__div_to_l_@f2+2,f,c
  4865  00297C  0E00               	movlw	0
  4866  00297E  1635               	andwf	__div_to_l_@f2+3,f,c
  4867  002980  0E00               	movlw	0
  4868  002982  6E36               	movwf	__div_to_l_@quot,c
  4869  002984  0E00               	movlw	0
  4870  002986  6E37               	movwf	__div_to_l_@quot+1,c
  4871  002988  0E00               	movlw	0
  4872  00298A  6E38               	movwf	__div_to_l_@quot+2,c
  4873  00298C  0E00               	movlw	0
  4874  00298E  6E39               	movwf	__div_to_l_@quot+3,c
  4875  002990  0E7F               	movlw	127
  4876  002992  5E3B               	subwf	__div_to_l_@exp1,f,c
  4877  002994  503A               	movf	__div_to_l_@cntr,w,c
  4878  002996  0FA0               	addlw	160
  4879  002998  5E3B               	subwf	__div_to_l_@exp1,f,c
  4880  00299A  0E20               	movlw	32
  4881  00299C  6E3A               	movwf	__div_to_l_@cntr,c
  4882  00299E  90D8               	bcf	status,0,c
  4883  0029A0  3636               	rlcf	__div_to_l_@quot,f,c
  4884  0029A2  3637               	rlcf	__div_to_l_@quot+1,f,c
  4885  0029A4  3638               	rlcf	__div_to_l_@quot+2,f,c
  4886  0029A6  3639               	rlcf	__div_to_l_@quot+3,f,c
  4887  0029A8  5032               	movf	__div_to_l_@f2,w,c
  4888  0029AA  5C2E               	subwf	__div_to_l_@f1,w,c
  4889  0029AC  5033               	movf	__div_to_l_@f2+1,w,c
  4890  0029AE  582F               	subwfb	__div_to_l_@f1+1,w,c
  4891  0029B0  5034               	movf	__div_to_l_@f2+2,w,c
  4892  0029B2  5830               	subwfb	__div_to_l_@f1+2,w,c
  4893  0029B4  5035               	movf	__div_to_l_@f2+3,w,c
  4894  0029B6  5831               	subwfb	__div_to_l_@f1+3,w,c
  4895  0029B8  A0D8               	btfss	status,0,c
  4896  0029BA  D009               	goto	l510
  4897  0029BC  5032               	movf	__div_to_l_@f2,w,c
  4898  0029BE  5E2E               	subwf	__div_to_l_@f1,f,c
  4899  0029C0  5033               	movf	__div_to_l_@f2+1,w,c
  4900  0029C2  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4901  0029C4  5034               	movf	__div_to_l_@f2+2,w,c
  4902  0029C6  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4903  0029C8  5035               	movf	__div_to_l_@f2+3,w,c
  4904  0029CA  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4905  0029CC  8036               	bsf	__div_to_l_@quot,0,c
  4906  0029CE                     l510:
  4907  0029CE  90D8               	bcf	status,0,c
  4908  0029D0  362E               	rlcf	__div_to_l_@f1,f,c
  4909  0029D2  362F               	rlcf	__div_to_l_@f1+1,f,c
  4910  0029D4  3630               	rlcf	__div_to_l_@f1+2,f,c
  4911  0029D6  3631               	rlcf	__div_to_l_@f1+3,f,c
  4912  0029D8  2E3A               	decfsz	__div_to_l_@cntr,f,c
  4913  0029DA  D7E1               	goto	l509
  4914  0029DC  AE3B               	btfss	__div_to_l_@exp1,7,c
  4915  0029DE  D016               	goto	l512
  4916  0029E0  503B               	movf	__div_to_l_@exp1,w,c
  4917  0029E2  0A80               	xorlw	128
  4918  0029E4  0F9F               	addlw	159
  4919  0029E6  B0D8               	btfsc	status,0,c
  4920  0029E8  D009               	goto	l513
  4921  0029EA  0E00               	movlw	0
  4922  0029EC  6E2E               	movwf	?__div_to_l_,c
  4923  0029EE  0E00               	movlw	0
  4924  0029F0  6E2F               	movwf	?__div_to_l_+1,c
  4925  0029F2  0E00               	movlw	0
  4926  0029F4  6E30               	movwf	?__div_to_l_+2,c
  4927  0029F6  0E00               	movlw	0
  4928  0029F8  6E31               	movwf	?__div_to_l_+3,c
  4929  0029FA  0012               	return	
  4930  0029FC                     l513:
  4931  0029FC  90D8               	bcf	status,0,c
  4932  0029FE  3239               	rrcf	__div_to_l_@quot+3,f,c
  4933  002A00  3238               	rrcf	__div_to_l_@quot+2,f,c
  4934  002A02  3237               	rrcf	__div_to_l_@quot+1,f,c
  4935  002A04  3236               	rrcf	__div_to_l_@quot,f,c
  4936  002A06  3E3B               	incfsz	__div_to_l_@exp1,f,c
  4937  002A08  D7F9               	goto	l513
  4938  002A0A  D015               	goto	u5190
  4939  002A0C                     l512:
  4940  002A0C  0E1F               	movlw	31
  4941  002A0E  643B               	cpfsgt	__div_to_l_@exp1,c
  4942  002A10  D00F               	goto	l518
  4943  002A12  0E00               	movlw	0
  4944  002A14  6E2E               	movwf	?__div_to_l_,c
  4945  002A16  0E00               	movlw	0
  4946  002A18  6E2F               	movwf	?__div_to_l_+1,c
  4947  002A1A  0E00               	movlw	0
  4948  002A1C  6E30               	movwf	?__div_to_l_+2,c
  4949  002A1E  0E00               	movlw	0
  4950  002A20  6E31               	movwf	?__div_to_l_+3,c
  4951  002A22  0012               	return	
  4952  002A24  90D8               	bcf	status,0,c
  4953  002A26  3636               	rlcf	__div_to_l_@quot,f,c
  4954  002A28  3637               	rlcf	__div_to_l_@quot+1,f,c
  4955  002A2A  3638               	rlcf	__div_to_l_@quot+2,f,c
  4956  002A2C  3639               	rlcf	__div_to_l_@quot+3,f,c
  4957  002A2E  063B               	decf	__div_to_l_@exp1,f,c
  4958  002A30                     l518:
  4959  002A30  503B               	movf	__div_to_l_@exp1,w,c
  4960  002A32  A4D8               	btfss	status,2,c
  4961  002A34  D7F7               	goto	l519
  4962  002A36                     u5190:
  4963  002A36  C036  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4964  002A3A  C037  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4965  002A3E  C038  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4966  002A42  C039  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4967  002A46  0012               	return		;funcret
  4968  002A48                     __end_of__div_to_l_:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           indf2	equ	0xFDF
  4980                           postinc2	equ	0xFDE
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function ___wmul *****************
  4986 ;; Defined at:
  4987 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  multiplier      2   45[COMRAM] unsigned int 
  4990 ;;  multiplicand    2   47[COMRAM] unsigned int 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;  product         2   49[COMRAM] unsigned int 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  2   45[COMRAM] unsigned int 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0, prodl, prodh
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5002 ;;      Params:         4       0       0       0       0       0       0
  5003 ;;      Locals:         2       0       0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0
  5005 ;;      Totals:         6       0       0       0       0       0       0
  5006 ;;Total ram usage:        6 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    2
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_sprintf
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text9
  5017  003472                     __ptext9:
  5018                           	opt stack 0
  5019  003472                     ___wmul:
  5020                           	opt stack 27
  5021                           
  5022                           ;incstack = 0
  5023  003472  502E               	movf	___wmul@multiplier,w,c
  5024  003474  0230               	mulwf	___wmul@multiplicand,c
  5025  003476  CFF3 F032          	movff	prodl,___wmul@product
  5026  00347A  CFF4 F033          	movff	prodh,___wmul@product+1
  5027  00347E  502E               	movf	___wmul@multiplier,w,c
  5028  003480  0231               	mulwf	___wmul@multiplicand+1,c
  5029  003482  50F3               	movf	prodl,w,c
  5030  003484  2633               	addwf	___wmul@product+1,f,c
  5031  003486  502F               	movf	___wmul@multiplier+1,w,c
  5032  003488  0230               	mulwf	___wmul@multiplicand,c
  5033  00348A  50F3               	movf	prodl,w,c
  5034  00348C  2633               	addwf	___wmul@product+1,f,c
  5035  00348E  C032  F02E         	movff	___wmul@product,?___wmul
  5036  003492  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  5037  003496  0012               	return	
  5038  003498                     __end_of___wmul:
  5039                           	opt stack 0
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           postinc0	equ	0xFEE
  5048                           wreg	equ	0xFE8
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           fsr2h	equ	0xFDA
  5052                           fsr2l	equ	0xFD9
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function ___llmod *****************
  5056 ;; Defined at:
  5057 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  dividend        4   45[COMRAM] unsigned long 
  5060 ;;  divisor         4   49[COMRAM] unsigned long 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  counter         1   53[COMRAM] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  4   45[COMRAM] unsigned long 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5072 ;;      Params:         8       0       0       0       0       0       0
  5073 ;;      Locals:         1       0       0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0
  5075 ;;      Totals:         9       0       0       0       0       0       0
  5076 ;;Total ram usage:        9 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    2
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_sprintf
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text10
  5087  003172                     __ptext10:
  5088                           	opt stack 0
  5089  003172                     ___llmod:
  5090                           	opt stack 27
  5091                           
  5092                           ;incstack = 0
  5093  003172  5032               	movf	___llmod@divisor,w,c
  5094  003174  1033               	iorwf	___llmod@divisor+1,w,c
  5095  003176  1034               	iorwf	___llmod@divisor+2,w,c
  5096  003178  1035               	iorwf	___llmod@divisor+3,w,c
  5097  00317A  B4D8               	btfsc	status,2,c
  5098  00317C  D024               	goto	l711
  5099  00317E  0E01               	movlw	1
  5100  003180  6E36               	movwf	___llmod@counter,c
  5101  003182  D006               	goto	l706
  5102  003184  90D8               	bcf	status,0,c
  5103  003186  3632               	rlcf	___llmod@divisor,f,c
  5104  003188  3633               	rlcf	___llmod@divisor+1,f,c
  5105  00318A  3634               	rlcf	___llmod@divisor+2,f,c
  5106  00318C  3635               	rlcf	___llmod@divisor+3,f,c
  5107  00318E  2A36               	incf	___llmod@counter,f,c
  5108  003190                     l706:
  5109  003190  AE35               	btfss	___llmod@divisor+3,7,c
  5110  003192  D7F8               	goto	l707
  5111  003194                     u5600:
  5112  003194  5032               	movf	___llmod@divisor,w,c
  5113  003196  5C2E               	subwf	___llmod@dividend,w,c
  5114  003198  5033               	movf	___llmod@divisor+1,w,c
  5115  00319A  582F               	subwfb	___llmod@dividend+1,w,c
  5116  00319C  5034               	movf	___llmod@divisor+2,w,c
  5117  00319E  5830               	subwfb	___llmod@dividend+2,w,c
  5118  0031A0  5035               	movf	___llmod@divisor+3,w,c
  5119  0031A2  5831               	subwfb	___llmod@dividend+3,w,c
  5120  0031A4  A0D8               	btfss	status,0,c
  5121  0031A6  D008               	goto	l710
  5122  0031A8  5032               	movf	___llmod@divisor,w,c
  5123  0031AA  5E2E               	subwf	___llmod@dividend,f,c
  5124  0031AC  5033               	movf	___llmod@divisor+1,w,c
  5125  0031AE  5A2F               	subwfb	___llmod@dividend+1,f,c
  5126  0031B0  5034               	movf	___llmod@divisor+2,w,c
  5127  0031B2  5A30               	subwfb	___llmod@dividend+2,f,c
  5128  0031B4  5035               	movf	___llmod@divisor+3,w,c
  5129  0031B6  5A31               	subwfb	___llmod@dividend+3,f,c
  5130  0031B8                     l710:
  5131  0031B8  90D8               	bcf	status,0,c
  5132  0031BA  3235               	rrcf	___llmod@divisor+3,f,c
  5133  0031BC  3234               	rrcf	___llmod@divisor+2,f,c
  5134  0031BE  3233               	rrcf	___llmod@divisor+1,f,c
  5135  0031C0  3232               	rrcf	___llmod@divisor,f,c
  5136  0031C2  2E36               	decfsz	___llmod@counter,f,c
  5137  0031C4  D7E7               	goto	u5600
  5138  0031C6                     l711:
  5139  0031C6  C02E  F02E         	movff	___llmod@dividend,?___llmod
  5140  0031CA  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  5141  0031CE  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  5142  0031D2  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  5143  0031D6  0012               	return		;funcret
  5144  0031D8                     __end_of___llmod:
  5145                           	opt stack 0
  5146                           tblptru	equ	0xFF8
  5147                           tblptrh	equ	0xFF7
  5148                           tblptrl	equ	0xFF6
  5149                           tablat	equ	0xFF5
  5150                           prodh	equ	0xFF4
  5151                           prodl	equ	0xFF3
  5152                           intcon	equ	0xFF2
  5153                           postinc0	equ	0xFEE
  5154                           wreg	equ	0xFE8
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function ___lldiv *****************
  5162 ;; Defined at:
  5163 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  dividend        4   45[COMRAM] unsigned long 
  5166 ;;  divisor         4   49[COMRAM] unsigned long 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  quotient        4   53[COMRAM] unsigned long 
  5169 ;;  counter         1   57[COMRAM] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  4   45[COMRAM] unsigned long 
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5179 ;;      Params:         8       0       0       0       0       0       0
  5180 ;;      Locals:         5       0       0       0       0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0
  5182 ;;      Totals:        13       0       0       0       0       0       0
  5183 ;;Total ram usage:       13 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    2
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_sprintf
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text11
  5194  003080                     __ptext11:
  5195                           	opt stack 0
  5196  003080                     ___lldiv:
  5197                           	opt stack 27
  5198                           
  5199                           ;incstack = 0
  5200  003080  0E00               	movlw	0
  5201  003082  6E36               	movwf	___lldiv@quotient,c
  5202  003084  0E00               	movlw	0
  5203  003086  6E37               	movwf	___lldiv@quotient+1,c
  5204  003088  0E00               	movlw	0
  5205  00308A  6E38               	movwf	___lldiv@quotient+2,c
  5206  00308C  0E00               	movlw	0
  5207  00308E  6E39               	movwf	___lldiv@quotient+3,c
  5208  003090  5032               	movf	___lldiv@divisor,w,c
  5209  003092  1033               	iorwf	___lldiv@divisor+1,w,c
  5210  003094  1034               	iorwf	___lldiv@divisor+2,w,c
  5211  003096  1035               	iorwf	___lldiv@divisor+3,w,c
  5212  003098  B4D8               	btfsc	status,2,c
  5213  00309A  D02A               	goto	l701
  5214  00309C  0E01               	movlw	1
  5215  00309E  6E3A               	movwf	___lldiv@counter,c
  5216  0030A0  D006               	goto	l696
  5217  0030A2  90D8               	bcf	status,0,c
  5218  0030A4  3632               	rlcf	___lldiv@divisor,f,c
  5219  0030A6  3633               	rlcf	___lldiv@divisor+1,f,c
  5220  0030A8  3634               	rlcf	___lldiv@divisor+2,f,c
  5221  0030AA  3635               	rlcf	___lldiv@divisor+3,f,c
  5222  0030AC  2A3A               	incf	___lldiv@counter,f,c
  5223  0030AE                     l696:
  5224  0030AE  AE35               	btfss	___lldiv@divisor+3,7,c
  5225  0030B0  D7F8               	goto	l697
  5226  0030B2                     u5570:
  5227  0030B2  90D8               	bcf	status,0,c
  5228  0030B4  3636               	rlcf	___lldiv@quotient,f,c
  5229  0030B6  3637               	rlcf	___lldiv@quotient+1,f,c
  5230  0030B8  3638               	rlcf	___lldiv@quotient+2,f,c
  5231  0030BA  3639               	rlcf	___lldiv@quotient+3,f,c
  5232  0030BC  5032               	movf	___lldiv@divisor,w,c
  5233  0030BE  5C2E               	subwf	___lldiv@dividend,w,c
  5234  0030C0  5033               	movf	___lldiv@divisor+1,w,c
  5235  0030C2  582F               	subwfb	___lldiv@dividend+1,w,c
  5236  0030C4  5034               	movf	___lldiv@divisor+2,w,c
  5237  0030C6  5830               	subwfb	___lldiv@dividend+2,w,c
  5238  0030C8  5035               	movf	___lldiv@divisor+3,w,c
  5239  0030CA  5831               	subwfb	___lldiv@dividend+3,w,c
  5240  0030CC  A0D8               	btfss	status,0,c
  5241  0030CE  D009               	goto	l700
  5242  0030D0  5032               	movf	___lldiv@divisor,w,c
  5243  0030D2  5E2E               	subwf	___lldiv@dividend,f,c
  5244  0030D4  5033               	movf	___lldiv@divisor+1,w,c
  5245  0030D6  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5246  0030D8  5034               	movf	___lldiv@divisor+2,w,c
  5247  0030DA  5A30               	subwfb	___lldiv@dividend+2,f,c
  5248  0030DC  5035               	movf	___lldiv@divisor+3,w,c
  5249  0030DE  5A31               	subwfb	___lldiv@dividend+3,f,c
  5250  0030E0  8036               	bsf	___lldiv@quotient,0,c
  5251  0030E2                     l700:
  5252  0030E2  90D8               	bcf	status,0,c
  5253  0030E4  3235               	rrcf	___lldiv@divisor+3,f,c
  5254  0030E6  3234               	rrcf	___lldiv@divisor+2,f,c
  5255  0030E8  3233               	rrcf	___lldiv@divisor+1,f,c
  5256  0030EA  3232               	rrcf	___lldiv@divisor,f,c
  5257  0030EC  2E3A               	decfsz	___lldiv@counter,f,c
  5258  0030EE  D7E1               	goto	u5570
  5259  0030F0                     l701:
  5260  0030F0  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5261  0030F4  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5262  0030F8  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5263  0030FC  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5264  003100  0012               	return		;funcret
  5265  003102                     __end_of___lldiv:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           indf2	equ	0xFDF
  5277                           postinc2	equ	0xFDE
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function ___fltol *****************
  5283 ;; Defined at:
  5284 ;;		line 43 in file "/opt/microchip/xc8/v1.45/sources/common/fltol.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  f1              4   22[BANK0 ] unsigned long 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  exp1            1   72[COMRAM] unsigned char 
  5289 ;;  sign1           1   71[COMRAM] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  4   22[BANK0 ] long 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5299 ;;      Params:         0       4       0       0       0       0       0
  5300 ;;      Locals:         2       0       0       0       0       0       0
  5301 ;;      Temps:          0       4       0       0       0       0       0
  5302 ;;      Totals:         2       8       0       0       0       0       0
  5303 ;;Total ram usage:       10 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    2
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		_sprintf
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text12
  5314  002D96                     __ptext12:
  5315                           	opt stack 0
  5316  002D96                     ___fltol:
  5317                           	opt stack 27
  5318                           
  5319                           ;incstack = 0
  5320  002D96  0100               	movlb	0	; () banked
  5321  002D98  3598               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5322  002D9A  3599               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5323  002D9C  6E49               	movwf	___fltol@exp1,c
  5324  002D9E  5049               	movf	___fltol@exp1,w,c
  5325  002DA0  A4D8               	btfss	status,2,c
  5326  002DA2  D009               	goto	l553
  5327                           
  5328                           ; BSR set to: 0
  5329  002DA4  0E00               	movlw	0
  5330  002DA6  6F96               	movwf	?___fltol& (0+255),b
  5331  002DA8  0E00               	movlw	0
  5332  002DAA  6F97               	movwf	(?___fltol+1)& (0+255),b
  5333  002DAC  0E00               	movlw	0
  5334  002DAE  6F98               	movwf	(?___fltol+2)& (0+255),b
  5335  002DB0  0E00               	movlw	0
  5336  002DB2  6F99               	movwf	(?___fltol+3)& (0+255),b
  5337                           
  5338                           ; BSR set to: 0
  5339  002DB4  0012               	return	
  5340  002DB6                     l553:
  5341                           
  5342                           ; BSR set to: 0
  5343                           
  5344                           ; BSR set to: 0
  5345  002DB6  C096  F09A         	movff	___fltol@f1,??___fltol
  5346  002DBA  C097  F09B         	movff	___fltol@f1+1,??___fltol+1
  5347  002DBE  C098  F09C         	movff	___fltol@f1+2,??___fltol+2
  5348  002DC2  C099  F09D         	movff	___fltol@f1+3,??___fltol+3
  5349  002DC6  0E20               	movlw	32
  5350  002DC8  D005               	goto	u5500
  5351  002DCA                     u5505:
  5352  002DCA  90D8               	bcf	status,0,c
  5353  002DCC  339D               	rrcf	(??___fltol+3)& (0+255),f,b
  5354  002DCE  339C               	rrcf	(??___fltol+2)& (0+255),f,b
  5355  002DD0  339B               	rrcf	(??___fltol+1)& (0+255),f,b
  5356  002DD2  339A               	rrcf	??___fltol& (0+255),f,b
  5357  002DD4                     u5500:
  5358  002DD4  2EE8               	decfsz	wreg,f,c
  5359  002DD6  D7F9               	goto	u5505
  5360  002DD8  519A               	movf	??___fltol& (0+255),w,b
  5361  002DDA  6E48               	movwf	___fltol@sign1,c
  5362                           
  5363                           ; BSR set to: 0
  5364  002DDC  8F98               	bsf	(___fltol@f1+2)& (0+255),7,b
  5365                           
  5366                           ; BSR set to: 0
  5367  002DDE  0EFF               	movlw	255
  5368  002DE0  1796               	andwf	___fltol@f1& (0+255),f,b
  5369  002DE2  0EFF               	movlw	255
  5370  002DE4  1797               	andwf	(___fltol@f1+1)& (0+255),f,b
  5371  002DE6  0EFF               	movlw	255
  5372  002DE8  1798               	andwf	(___fltol@f1+2)& (0+255),f,b
  5373  002DEA  0E00               	movlw	0
  5374  002DEC  1799               	andwf	(___fltol@f1+3)& (0+255),f,b
  5375                           
  5376                           ; BSR set to: 0
  5377  002DEE  0E96               	movlw	150
  5378  002DF0  5E49               	subwf	___fltol@exp1,f,c
  5379                           
  5380                           ; BSR set to: 0
  5381  002DF2  AE49               	btfss	___fltol@exp1,7,c
  5382  002DF4  D016               	goto	l555
  5383                           
  5384                           ; BSR set to: 0
  5385  002DF6  5049               	movf	___fltol@exp1,w,c
  5386  002DF8  0A80               	xorlw	128
  5387  002DFA  0F97               	addlw	151
  5388  002DFC  B0D8               	btfsc	status,0,c
  5389  002DFE  D009               	goto	l556
  5390                           
  5391                           ; BSR set to: 0
  5392  002E00  0E00               	movlw	0
  5393  002E02  6F96               	movwf	?___fltol& (0+255),b
  5394  002E04  0E00               	movlw	0
  5395  002E06  6F97               	movwf	(?___fltol+1)& (0+255),b
  5396  002E08  0E00               	movlw	0
  5397  002E0A  6F98               	movwf	(?___fltol+2)& (0+255),b
  5398  002E0C  0E00               	movlw	0
  5399  002E0E  6F99               	movwf	(?___fltol+3)& (0+255),b
  5400                           
  5401                           ; BSR set to: 0
  5402  002E10  0012               	return	
  5403  002E12                     l556:
  5404                           
  5405                           ; BSR set to: 0
  5406                           
  5407                           ; BSR set to: 0
  5408                           
  5409                           ; BSR set to: 0
  5410  002E12  90D8               	bcf	status,0,c
  5411  002E14  3399               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5412  002E16  3398               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5413  002E18  3397               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5414  002E1A  3396               	rrcf	___fltol@f1& (0+255),f,b
  5415                           
  5416                           ; BSR set to: 0
  5417  002E1C  3E49               	incfsz	___fltol@exp1,f,c
  5418  002E1E  D7F9               	goto	l556
  5419                           
  5420                           ; BSR set to: 0
  5421  002E20  D015               	goto	u5540
  5422  002E22                     l555:
  5423                           
  5424                           ; BSR set to: 0
  5425                           
  5426                           ; BSR set to: 0
  5427  002E22  0E1F               	movlw	31
  5428  002E24  6449               	cpfsgt	___fltol@exp1,c
  5429  002E26  D00F               	goto	l561
  5430                           
  5431                           ; BSR set to: 0
  5432  002E28  0E00               	movlw	0
  5433  002E2A  6F96               	movwf	?___fltol& (0+255),b
  5434  002E2C  0E00               	movlw	0
  5435  002E2E  6F97               	movwf	(?___fltol+1)& (0+255),b
  5436  002E30  0E00               	movlw	0
  5437  002E32  6F98               	movwf	(?___fltol+2)& (0+255),b
  5438  002E34  0E00               	movlw	0
  5439  002E36  6F99               	movwf	(?___fltol+3)& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442  002E38  0012               	return	
  5443  002E3A                     
  5444                           ; BSR set to: 0
  5445                           
  5446                           ; BSR set to: 0
  5447  002E3A  90D8               	bcf	status,0,c
  5448  002E3C  3796               	rlcf	___fltol@f1& (0+255),f,b
  5449  002E3E  3797               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5450  002E40  3798               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5451  002E42  3799               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5452  002E44  0649               	decf	___fltol@exp1,f,c
  5453  002E46                     l561:
  5454                           
  5455                           ; BSR set to: 0
  5456                           
  5457                           ; BSR set to: 0
  5458  002E46  5049               	movf	___fltol@exp1,w,c
  5459  002E48  A4D8               	btfss	status,2,c
  5460  002E4A  D7F7               	goto	l562
  5461  002E4C                     u5540:
  5462                           
  5463                           ; BSR set to: 0
  5464                           
  5465                           ; BSR set to: 0
  5466                           
  5467                           ; BSR set to: 0
  5468  002E4C  5048               	movf	___fltol@sign1,w,c
  5469  002E4E  B4D8               	btfsc	status,2,c
  5470  002E50  D008               	goto	l564
  5471                           
  5472                           ; BSR set to: 0
  5473  002E52  1F99               	comf	(___fltol@f1+3)& (0+255),f,b
  5474  002E54  1F98               	comf	(___fltol@f1+2)& (0+255),f,b
  5475  002E56  1F97               	comf	(___fltol@f1+1)& (0+255),f,b
  5476  002E58  6D96               	negf	___fltol@f1& (0+255),b
  5477  002E5A  0E00               	movlw	0
  5478  002E5C  2397               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5479  002E5E  2398               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5480  002E60  2399               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5481  002E62                     l564:
  5482                           
  5483                           ; BSR set to: 0
  5484                           
  5485                           ; BSR set to: 0
  5486  002E62  C096  F096         	movff	___fltol@f1,?___fltol
  5487  002E66  C097  F097         	movff	___fltol@f1+1,?___fltol+1
  5488  002E6A  C098  F098         	movff	___fltol@f1+2,?___fltol+2
  5489  002E6E  C099  F099         	movff	___fltol@f1+3,?___fltol+3
  5490  002E72  0012               	return	
  5491  002E74                     __end_of___fltol:
  5492                           	opt stack 0
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function ___flsub *****************
  5509 ;; Defined at:
  5510 ;;		line 245 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  b               4   78[BANK0 ] long 
  5513 ;;  a               4   82[BANK0 ] long 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;		None
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  4   78[BANK0 ] long 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5525 ;;      Params:         0       8       0       0       0       0       0
  5526 ;;      Locals:         0       0       0       0       0       0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0
  5528 ;;      Totals:         0       8       0       0       0       0       0
  5529 ;;Total ram usage:        8 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    3
  5532 ;; This function calls:
  5533 ;;		___fladd
  5534 ;; This function is called by:
  5535 ;;		_sprintf
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           	psect	text13
  5540  003274                     __ptext13:
  5541                           	opt stack 0
  5542  003274                     ___flsub:
  5543                           	opt stack 26
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;incstack = 0
  5547  003274  0E00               	movlw	0
  5548  003276  0100               	movlb	0	; () banked
  5549  003278  1BD2               	xorwf	___flsub@a& (0+255),f,b
  5550  00327A  0E00               	movlw	0
  5551  00327C  1BD3               	xorwf	(___flsub@a+1)& (0+255),f,b
  5552  00327E  0E00               	movlw	0
  5553  003280  1BD4               	xorwf	(___flsub@a+2)& (0+255),f,b
  5554  003282  0E80               	movlw	128
  5555  003284  1BD5               	xorwf	(___flsub@a+3)& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558  003286  C0CE  F0BA         	movff	___flsub@b,___fladd@b
  5559  00328A  C0CF  F0BB         	movff	___flsub@b+1,___fladd@b+1
  5560  00328E  C0D0  F0BC         	movff	___flsub@b+2,___fladd@b+2
  5561  003292  C0D1  F0BD         	movff	___flsub@b+3,___fladd@b+3
  5562  003296  C0D2  F0BE         	movff	___flsub@a,___fladd@a
  5563  00329A  C0D3  F0BF         	movff	___flsub@a+1,___fladd@a+1
  5564  00329E  C0D4  F0C0         	movff	___flsub@a+2,___fladd@a+2
  5565  0032A2  C0D5  F0C1         	movff	___flsub@a+3,___fladd@a+3
  5566  0032A6  EC0C  F00F         	call	___fladd	;wreg free
  5567  0032AA  C0BA  F0CE         	movff	?___fladd,?___flsub
  5568  0032AE  C0BB  F0CF         	movff	?___fladd+1,?___flsub+1
  5569  0032B2  C0BC  F0D0         	movff	?___fladd+2,?___flsub+2
  5570  0032B6  C0BD  F0D1         	movff	?___fladd+3,?___flsub+3
  5571  0032BA  0012               	return	
  5572  0032BC                     __end_of___flsub:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           indf2	equ	0xFDF
  5584                           postinc2	equ	0xFDE
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function ___flge *****************
  5590 ;; Defined at:
  5591 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/flge.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  ff1             4   45[COMRAM] long 
  5594 ;;  ff2             4   49[COMRAM] long 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5606 ;;      Params:         8       0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0
  5608 ;;      Temps:          4       0       0       0       0       0       0
  5609 ;;      Totals:        12       0       0       0       0       0       0
  5610 ;;Total ram usage:       12 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    2
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_main
  5617 ;;		_sprintf
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text14
  5622  002B6E                     __ptext14:
  5623                           	opt stack 0
  5624  002B6E                     ___flge:
  5625                           	opt stack 27
  5626                           
  5627                           ;incstack = 0
  5628  002B6E  0E00               	movlw	0
  5629  002B70  142E               	andwf	___flge@ff1,w,c
  5630  002B72  6E36               	movwf	??___flge& (0+255),c
  5631  002B74  0E00               	movlw	0
  5632  002B76  142F               	andwf	___flge@ff1+1,w,c
  5633  002B78  6E37               	movwf	(??___flge+1)& (0+255),c
  5634  002B7A  0E80               	movlw	128
  5635  002B7C  1430               	andwf	___flge@ff1+2,w,c
  5636  002B7E  6E38               	movwf	(??___flge+2)& (0+255),c
  5637  002B80  0E7F               	movlw	127
  5638  002B82  1431               	andwf	___flge@ff1+3,w,c
  5639  002B84  6E39               	movwf	(??___flge+3)& (0+255),c
  5640  002B86  5036               	movf	??___flge,w,c
  5641  002B88  1037               	iorwf	??___flge+1,w,c
  5642  002B8A  1038               	iorwf	??___flge+2,w,c
  5643  002B8C  1039               	iorwf	??___flge+3,w,c
  5644  002B8E  A4D8               	btfss	status,2,c
  5645  002B90  D008               	goto	l523
  5646  002B92  0E00               	movlw	0
  5647  002B94  6E2E               	movwf	___flge@ff1,c
  5648  002B96  0E00               	movlw	0
  5649  002B98  6E2F               	movwf	___flge@ff1+1,c
  5650  002B9A  0E00               	movlw	0
  5651  002B9C  6E30               	movwf	___flge@ff1+2,c
  5652  002B9E  0E00               	movlw	0
  5653  002BA0  6E31               	movwf	___flge@ff1+3,c
  5654  002BA2                     l523:
  5655  002BA2  0E00               	movlw	0
  5656  002BA4  1432               	andwf	___flge@ff2,w,c
  5657  002BA6  6E36               	movwf	??___flge& (0+255),c
  5658  002BA8  0E00               	movlw	0
  5659  002BAA  1433               	andwf	___flge@ff2+1,w,c
  5660  002BAC  6E37               	movwf	(??___flge+1)& (0+255),c
  5661  002BAE  0E80               	movlw	128
  5662  002BB0  1434               	andwf	___flge@ff2+2,w,c
  5663  002BB2  6E38               	movwf	(??___flge+2)& (0+255),c
  5664  002BB4  0E7F               	movlw	127
  5665  002BB6  1435               	andwf	___flge@ff2+3,w,c
  5666  002BB8  6E39               	movwf	(??___flge+3)& (0+255),c
  5667  002BBA  5036               	movf	??___flge,w,c
  5668  002BBC  1037               	iorwf	??___flge+1,w,c
  5669  002BBE  1038               	iorwf	??___flge+2,w,c
  5670  002BC0  1039               	iorwf	??___flge+3,w,c
  5671  002BC2  A4D8               	btfss	status,2,c
  5672  002BC4  D008               	goto	l524
  5673  002BC6  0E00               	movlw	0
  5674  002BC8  6E32               	movwf	___flge@ff2,c
  5675  002BCA  0E00               	movlw	0
  5676  002BCC  6E33               	movwf	___flge@ff2+1,c
  5677  002BCE  0E00               	movlw	0
  5678  002BD0  6E34               	movwf	___flge@ff2+2,c
  5679  002BD2  0E00               	movlw	0
  5680  002BD4  6E35               	movwf	___flge@ff2+3,c
  5681  002BD6                     l524:
  5682  002BD6  AE31               	btfss	___flge@ff1+3,7,c
  5683  002BD8  D01D               	goto	l525
  5684  002BDA  C02E  F036         	movff	___flge@ff1,??___flge
  5685  002BDE  C02F  F037         	movff	___flge@ff1+1,??___flge+1
  5686  002BE2  C030  F038         	movff	___flge@ff1+2,??___flge+2
  5687  002BE6  C031  F039         	movff	___flge@ff1+3,??___flge+3
  5688  002BEA  1E36               	comf	??___flge,f,c
  5689  002BEC  1E37               	comf	??___flge+1,f,c
  5690  002BEE  1E38               	comf	??___flge+2,f,c
  5691  002BF0  1E39               	comf	??___flge+3,f,c
  5692  002BF2  2A36               	incf	??___flge,f,c
  5693  002BF4  0E00               	movlw	0
  5694  002BF6  2237               	addwfc	??___flge+1,f,c
  5695  002BF8  2238               	addwfc	??___flge+2,f,c
  5696  002BFA  2239               	addwfc	??___flge+3,f,c
  5697  002BFC  0E00               	movlw	0
  5698  002BFE  2436               	addwf	??___flge,w,c
  5699  002C00  6E2E               	movwf	___flge@ff1,c
  5700  002C02  0E00               	movlw	0
  5701  002C04  2037               	addwfc	??___flge+1,w,c
  5702  002C06  6E2F               	movwf	___flge@ff1+1,c
  5703  002C08  0E00               	movlw	0
  5704  002C0A  2038               	addwfc	??___flge+2,w,c
  5705  002C0C  6E30               	movwf	___flge@ff1+2,c
  5706  002C0E  0E80               	movlw	128
  5707  002C10  2039               	addwfc	??___flge+3,w,c
  5708  002C12  6E31               	movwf	___flge@ff1+3,c
  5709  002C14                     l525:
  5710  002C14  AE35               	btfss	___flge@ff2+3,7,c
  5711  002C16  D01D               	goto	l526
  5712  002C18  C032  F036         	movff	___flge@ff2,??___flge
  5713  002C1C  C033  F037         	movff	___flge@ff2+1,??___flge+1
  5714  002C20  C034  F038         	movff	___flge@ff2+2,??___flge+2
  5715  002C24  C035  F039         	movff	___flge@ff2+3,??___flge+3
  5716  002C28  1E36               	comf	??___flge,f,c
  5717  002C2A  1E37               	comf	??___flge+1,f,c
  5718  002C2C  1E38               	comf	??___flge+2,f,c
  5719  002C2E  1E39               	comf	??___flge+3,f,c
  5720  002C30  2A36               	incf	??___flge,f,c
  5721  002C32  0E00               	movlw	0
  5722  002C34  2237               	addwfc	??___flge+1,f,c
  5723  002C36  2238               	addwfc	??___flge+2,f,c
  5724  002C38  2239               	addwfc	??___flge+3,f,c
  5725  002C3A  0E00               	movlw	0
  5726  002C3C  2436               	addwf	??___flge,w,c
  5727  002C3E  6E32               	movwf	___flge@ff2,c
  5728  002C40  0E00               	movlw	0
  5729  002C42  2037               	addwfc	??___flge+1,w,c
  5730  002C44  6E33               	movwf	___flge@ff2+1,c
  5731  002C46  0E00               	movlw	0
  5732  002C48  2038               	addwfc	??___flge+2,w,c
  5733  002C4A  6E34               	movwf	___flge@ff2+2,c
  5734  002C4C  0E80               	movlw	128
  5735  002C4E  2039               	addwfc	??___flge+3,w,c
  5736  002C50  6E35               	movwf	___flge@ff2+3,c
  5737  002C52                     l526:
  5738  002C52  0E00               	movlw	0
  5739  002C54  1A2E               	xorwf	___flge@ff1,f,c
  5740  002C56  0E00               	movlw	0
  5741  002C58  1A2F               	xorwf	___flge@ff1+1,f,c
  5742  002C5A  0E00               	movlw	0
  5743  002C5C  1A30               	xorwf	___flge@ff1+2,f,c
  5744  002C5E  0E80               	movlw	128
  5745  002C60  1A31               	xorwf	___flge@ff1+3,f,c
  5746  002C62  0E00               	movlw	0
  5747  002C64  1A32               	xorwf	___flge@ff2,f,c
  5748  002C66  0E00               	movlw	0
  5749  002C68  1A33               	xorwf	___flge@ff2+1,f,c
  5750  002C6A  0E00               	movlw	0
  5751  002C6C  1A34               	xorwf	___flge@ff2+2,f,c
  5752  002C6E  0E80               	movlw	128
  5753  002C70  1A35               	xorwf	___flge@ff2+3,f,c
  5754  002C72  5032               	movf	___flge@ff2,w,c
  5755  002C74  5C2E               	subwf	___flge@ff1,w,c
  5756  002C76  5033               	movf	___flge@ff2+1,w,c
  5757  002C78  582F               	subwfb	___flge@ff1+1,w,c
  5758  002C7A  5034               	movf	___flge@ff2+2,w,c
  5759  002C7C  5830               	subwfb	___flge@ff1+2,w,c
  5760  002C7E  5035               	movf	___flge@ff2+3,w,c
  5761  002C80  5831               	subwfb	___flge@ff1+3,w,c
  5762  002C82  B0D8               	btfsc	status,0,c
  5763  002C84  D002               	goto	l4183
  5764  002C86  90D8               	bcf	status,0,c
  5765  002C88  0012               	return	
  5766  002C8A                     l4183:
  5767  002C8A  80D8               	bsf	status,0,c
  5768  002C8C  0012               	return	
  5769  002C8E                     __end_of___flge:
  5770                           	opt stack 0
  5771                           tblptru	equ	0xFF8
  5772                           tblptrh	equ	0xFF7
  5773                           tblptrl	equ	0xFF6
  5774                           tablat	equ	0xFF5
  5775                           prodh	equ	0xFF4
  5776                           prodl	equ	0xFF3
  5777                           intcon	equ	0xFF2
  5778                           postinc0	equ	0xFEE
  5779                           wreg	equ	0xFE8
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _seleccionarEscala *****************
  5787 ;; Defined at:
  5788 ;;		line 344 in file "color_3.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  a               1    wreg     enum E3216
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  a               1   45[COMRAM] enum E3216
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5802 ;;      Params:         0       0       0       0       0       0       0
  5803 ;;      Locals:         1       0       0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0
  5805 ;;      Totals:         1       0       0       0       0       0       0
  5806 ;;Total ram usage:        1 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    2
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text15
  5817  00337A                     __ptext15:
  5818                           	opt stack 0
  5819  00337A                     _seleccionarEscala:
  5820                           	opt stack 28
  5821                           
  5822                           ;incstack = 0
  5823                           ;seleccionarEscala@a stored from wreg
  5824  00337A  6E2E               	movwf	seleccionarEscala@a,c
  5825                           
  5826                           ;color_3.c: 346: switch(a)
  5827  00337C  D00C               	goto	l177
  5828  00337E                     
  5829                           ;color_3.c: 349: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5830  00337E  908C               	bcf	3980,0,c	;volatile
  5831                           
  5832                           ;color_3.c: 350: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5833  003380  928C               	bcf	3980,1,c	;volatile
  5834                           
  5835                           ;color_3.c: 351: break;
  5836  003382  0012               	return	
  5837  003384                     
  5838                           ;color_3.c: 353: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5839  003384  908C               	bcf	3980,0,c	;volatile
  5840                           
  5841                           ;color_3.c: 354: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5842  003386  828C               	bsf	3980,1,c	;volatile
  5843                           
  5844                           ;color_3.c: 355: break;
  5845  003388  0012               	return	
  5846  00338A                     
  5847                           ;color_3.c: 357: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5848  00338A  808C               	bsf	3980,0,c	;volatile
  5849                           
  5850                           ;color_3.c: 358: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5851  00338C  928C               	bcf	3980,1,c	;volatile
  5852                           
  5853                           ;color_3.c: 359: break;
  5854  00338E  0012               	return	
  5855  003390                     
  5856                           ;color_3.c: 361: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5857  003390  808C               	bsf	3980,0,c	;volatile
  5858                           
  5859                           ;color_3.c: 362: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5860  003392  828C               	bsf	3980,1,c	;volatile
  5861                           
  5862                           ;color_3.c: 364: }
  5863                           
  5864                           ;color_3.c: 363: break;
  5865  003394  0012               	return	
  5866  003396                     l177:
  5867  003396  502E               	movf	seleccionarEscala@a,w,c
  5868                           
  5869                           ; Switch size 1, requested type "space"
  5870                           ; Number of cases is 4, Range of values is 0 to 3
  5871                           ; switch strategies available:
  5872                           ; Name         Instructions Cycles
  5873                           ; simple_byte           13     7 (average)
  5874                           ;	Chosen strategy is simple_byte
  5875  003398  0A00               	xorlw	0	; case 0
  5876  00339A  B4D8               	btfsc	status,2,c
  5877  00339C  D7F9               	goto	l182
  5878  00339E  0A01               	xorlw	1	; case 1
  5879  0033A0  B4D8               	btfsc	status,2,c
  5880  0033A2  D7F3               	goto	l181
  5881  0033A4  0A03               	xorlw	3	; case 2
  5882  0033A6  B4D8               	btfsc	status,2,c
  5883  0033A8  D7ED               	goto	l180
  5884  0033AA  0A01               	xorlw	1	; case 3
  5885  0033AC  A4D8               	btfss	status,2,c
  5886  0033AE  0012               	return	
  5887  0033B0  D7E6               	goto	l178
  5888  0033B2                     __end_of_seleccionarEscala:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _seleccionarColor *****************
  5906 ;; Defined at:
  5907 ;;		line 379 in file "color_3.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  col             1    wreg     enum E3210
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  col             1   45[COMRAM] enum E3210
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2, status,0
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5921 ;;      Params:         0       0       0       0       0       0       0
  5922 ;;      Locals:         1       0       0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0
  5924 ;;      Totals:         1       0       0       0       0       0       0
  5925 ;;Total ram usage:        1 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    2
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text16
  5936  003302                     __ptext16:
  5937                           	opt stack 0
  5938  003302                     _seleccionarColor:
  5939                           	opt stack 28
  5940                           
  5941                           ;incstack = 0
  5942                           ;seleccionarColor@col stored from wreg
  5943  003302  6E2E               	movwf	seleccionarColor@col,c
  5944                           
  5945                           ;color_3.c: 381: switch(col)
  5946  003304  D00F               	goto	l186
  5947  003306                     
  5948                           ;color_3.c: 384: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5949  003306  948C               	bcf	3980,2,c	;volatile
  5950                           
  5951                           ;color_3.c: 385: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5952  003308  968C               	bcf	3980,3,c	;volatile
  5953                           
  5954                           ;color_3.c: 386: break;
  5955  00330A  0012               	return	
  5956  00330C                     
  5957                           ;color_3.c: 388: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5958  00330C  948C               	bcf	3980,2,c	;volatile
  5959                           
  5960                           ;color_3.c: 389: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5961  00330E  868C               	bsf	3980,3,c	;volatile
  5962                           
  5963                           ;color_3.c: 390: break;
  5964  003310  0012               	return	
  5965  003312                     
  5966                           ;color_3.c: 392: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5967  003312  848C               	bsf	3980,2,c	;volatile
  5968                           
  5969                           ;color_3.c: 393: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5970  003314  968C               	bcf	3980,3,c	;volatile
  5971                           
  5972                           ;color_3.c: 394: break;
  5973  003316  0012               	return	
  5974  003318                     
  5975                           ;color_3.c: 396: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5976  003318  848C               	bsf	3980,2,c	;volatile
  5977                           
  5978                           ;color_3.c: 397: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5979  00331A  868C               	bsf	3980,3,c	;volatile
  5980                           
  5981                           ;color_3.c: 398: break;
  5982  00331C  0012               	return	
  5983  00331E                     
  5984                           ;color_3.c: 400: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5985  00331E  848C               	bsf	3980,2,c	;volatile
  5986                           
  5987                           ;color_3.c: 401: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5988  003320  968C               	bcf	3980,3,c	;volatile
  5989                           
  5990                           ;color_3.c: 402: }
  5991  003322  0012               	return	
  5992  003324                     l186:
  5993  003324  502E               	movf	seleccionarColor@col,w,c
  5994                           
  5995                           ; Switch size 1, requested type "space"
  5996                           ; Number of cases is 4, Range of values is 0 to 3
  5997                           ; switch strategies available:
  5998                           ; Name         Instructions Cycles
  5999                           ; simple_byte           13     7 (average)
  6000                           ;	Chosen strategy is simple_byte
  6001  003326  0A00               	xorlw	0	; case 0
  6002  003328  B4D8               	btfsc	status,2,c
  6003  00332A  D7ED               	goto	l187
  6004  00332C  0A01               	xorlw	1	; case 1
  6005  00332E  B4D8               	btfsc	status,2,c
  6006  003330  D7ED               	goto	l189
  6007  003332  0A03               	xorlw	3	; case 2
  6008  003334  B4D8               	btfsc	status,2,c
  6009  003336  D7ED               	goto	l190
  6010  003338  0A01               	xorlw	1	; case 3
  6011  00333A  B4D8               	btfsc	status,2,c
  6012  00333C  D7ED               	goto	l191
  6013  00333E  D7EF               	goto	l192
  6014  003340                     __end_of_seleccionarColor:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031 ;; *************** function _lcd_msg *****************
  6032 ;; Defined at:
  6033 ;;		line 101 in file "../MyLibs/lcd4a.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  c               2   49[COMRAM] PTR unsigned char 
  6036 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  6037 ;;		 -> value(8), STR_1(18), 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;		None
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6049 ;;      Params:         2       0       0       0       0       0       0
  6050 ;;      Locals:         0       0       0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0
  6052 ;;      Totals:         2       0       0       0       0       0       0
  6053 ;;Total ram usage:        2 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    5
  6056 ;; This function calls:
  6057 ;;		_lcd_putc
  6058 ;; This function is called by:
  6059 ;;		_main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text17
  6064  0031D8                     __ptext17:
  6065                           	opt stack 0
  6066  0031D8                     _lcd_msg:
  6067                           	opt stack 25
  6068                           
  6069                           ;lcd4a.c: 103: while(*c != 0)
  6070                           
  6071                           ;incstack = 0
  6072  0031D8  D014               	goto	l36
  6073  0031DA                     
  6074                           ;lcd4a.c: 104: {
  6075                           ;lcd4a.c: 105: lcd_putc(*c++);
  6076  0031DA  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6077  0031DE  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6078  0031E2  6AF8               	clrf	tblptru,c
  6079  0031E4  0E05               	movlw	(high __ramtop+-1)
  6080  0031E6  64F7               	cpfsgt	tblptrh,c
  6081  0031E8  D003               	bra	u3657
  6082  0031EA  0008               	tblrd		*
  6083  0031EC  50F5               	movf	tablat,w,c
  6084  0031EE  D005               	bra	u3650
  6085  0031F0                     u3657:
  6086  0031F0  CFF6 FFE9          	movff	tblptrl,fsr0l
  6087  0031F4  CFF7 FFEA          	movff	tblptrh,fsr0h
  6088  0031F8  50EF               	movf	indf0,w,c
  6089  0031FA                     u3650:
  6090  0031FA  ECA0  F019         	call	_lcd_putc
  6091  0031FE  4A32               	infsnz	lcd_msg@c,f,c
  6092  003200  2A33               	incf	lcd_msg@c+1,f,c
  6093  003202                     l36:
  6094  003202  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6095  003206  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6096  00320A  6AF8               	clrf	tblptru,c
  6097  00320C  0E05               	movlw	(high __ramtop+-1)
  6098  00320E  64F7               	cpfsgt	tblptrh,c
  6099  003210  D003               	bra	u3667
  6100  003212  0008               	tblrd		*
  6101  003214  50F5               	movf	tablat,w,c
  6102  003216  D005               	bra	u3660
  6103  003218                     u3667:
  6104  003218  CFF6 FFE9          	movff	tblptrl,fsr0l
  6105  00321C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6106  003220  50EF               	movf	indf0,w,c
  6107  003222                     u3660:
  6108  003222  0900               	iorlw	0
  6109  003224  B4D8               	btfsc	status,2,c
  6110  003226  0012               	return	
  6111  003228  D7D8               	goto	l37
  6112  00322A                     __end_of_lcd_msg:
  6113                           	opt stack 0
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           indf0	equ	0xFEF
  6122                           postinc0	equ	0xFEE
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           indf2	equ	0xFDF
  6127                           postinc2	equ	0xFDE
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _lcd_putc *****************
  6133 ;; Defined at:
  6134 ;;		line 66 in file "../MyLibs/lcd4a.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  c               1    wreg     unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  c               1   48[COMRAM] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      void 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6148 ;;      Params:         0       0       0       0       0       0       0
  6149 ;;      Locals:         1       0       0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0
  6151 ;;      Totals:         1       0       0       0       0       0       0
  6152 ;;Total ram usage:        1 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    4
  6155 ;; This function calls:
  6156 ;;		_lcd_cmd
  6157 ;;		_lcd_dwr
  6158 ;; This function is called by:
  6159 ;;		_lcd_msg
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text18
  6164  003340                     __ptext18:
  6165                           	opt stack 0
  6166  003340                     _lcd_putc:
  6167                           	opt stack 25
  6168                           
  6169                           ;incstack = 0
  6170                           ;lcd_putc@c stored from wreg
  6171  003340  6E31               	movwf	lcd_putc@c,c
  6172                           
  6173                           ;lcd4a.c: 68: switch(c)
  6174  003342  D010               	goto	l24
  6175  003344                     
  6176                           ;lcd4a.c: 71: lcd_cmd(0x01);
  6177  003344  0E01               	movlw	1
  6178  003346  EC15  F019         	call	_lcd_cmd
  6179                           
  6180                           ;lcd4a.c: 72: break;
  6181  00334A  0012               	return	
  6182  00334C                     
  6183                           ;lcd4a.c: 74: lcd_cmd(3);
  6184  00334C  0E03               	movlw	3
  6185  00334E  EC15  F019         	call	_lcd_cmd
  6186                           
  6187                           ;lcd4a.c: 75: break;
  6188  003352  0012               	return	
  6189  003354                     
  6190                           ;lcd4a.c: 77: lcd_cmd(0x10);
  6191  003354  0E10               	movlw	16
  6192  003356  EC15  F019         	call	_lcd_cmd
  6193                           
  6194                           ;lcd4a.c: 78: break;
  6195  00335A  0012               	return	
  6196  00335C                     
  6197                           ;lcd4a.c: 80: lcd_dwr(c);
  6198  00335C  5031               	movf	lcd_putc@c,w,c
  6199  00335E  EC5E  F019         	call	_lcd_dwr
  6200                           
  6201                           ;lcd4a.c: 82: }
  6202                           
  6203                           ;lcd4a.c: 81: break;
  6204  003362  0012               	return	
  6205  003364                     l24:
  6206  003364  5031               	movf	lcd_putc@c,w,c
  6207                           
  6208                           ; Switch size 1, requested type "space"
  6209                           ; Number of cases is 3, Range of values is 8 to 12
  6210                           ; switch strategies available:
  6211                           ; Name         Instructions Cycles
  6212                           ; simple_byte           10     6 (average)
  6213                           ;	Chosen strategy is simple_byte
  6214  003366  0A08               	xorlw	8	; case 8
  6215  003368  B4D8               	btfsc	status,2,c
  6216  00336A  D7F4               	goto	l28
  6217  00336C  0A02               	xorlw	2	; case 10
  6218  00336E  B4D8               	btfsc	status,2,c
  6219  003370  D7ED               	goto	l27
  6220  003372  0A06               	xorlw	6	; case 12
  6221  003374  B4D8               	btfsc	status,2,c
  6222  003376  D7E6               	goto	l25
  6223  003378  D7F1               	goto	l29
  6224  00337A                     __end_of_lcd_putc:
  6225                           	opt stack 0
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           intcon	equ	0xFF2
  6233                           indf0	equ	0xFEF
  6234                           postinc0	equ	0xFEE
  6235                           fsr0h	equ	0xFEA
  6236                           fsr0l	equ	0xFE9
  6237                           wreg	equ	0xFE8
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           fsr2h	equ	0xFDA
  6241                           fsr2l	equ	0xFD9
  6242                           status	equ	0xFD8
  6243                           
  6244 ;; *************** function _lcd_dwr *****************
  6245 ;; Defined at:
  6246 ;;		line 86 in file "../MyLibs/lcd4a.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  x               1    wreg     unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  x               1   47[COMRAM] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6260 ;;      Params:         0       0       0       0       0       0       0
  6261 ;;      Locals:         1       0       0       0       0       0       0
  6262 ;;      Temps:          1       0       0       0       0       0       0
  6263 ;;      Totals:         2       0       0       0       0       0       0
  6264 ;;Total ram usage:        2 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    3
  6267 ;; This function calls:
  6268 ;;		_lcd_lat
  6269 ;;		_manda
  6270 ;; This function is called by:
  6271 ;;		_lcd_putc
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text19
  6276  0032BC                     __ptext19:
  6277                           	opt stack 0
  6278  0032BC                     _lcd_dwr:
  6279                           	opt stack 25
  6280                           
  6281                           ;incstack = 0
  6282                           ;lcd_dwr@x stored from wreg
  6283  0032BC  6E30               	movwf	lcd_dwr@x,c
  6284                           
  6285                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6286  0032BE  8A8C               	bsf	3980,5,c	;volatile
  6287                           
  6288                           ;lcd4a.c: 89: lcd &= 0x0F;
  6289  0032C0  0E0F               	movlw	15
  6290  0032C2  1650               	andwf	_lcd,f,c
  6291                           
  6292                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  6293  0032C4  5030               	movf	lcd_dwr@x,w,c
  6294  0032C6  0BF0               	andlw	240
  6295  0032C8  1250               	iorwf	_lcd,f,c
  6296                           
  6297                           ;lcd4a.c: 91: manda(lcd);
  6298  0032CA  5050               	movf	_lcd,w,c
  6299  0032CC  EC23  F01A         	call	_manda
  6300                           
  6301                           ;lcd4a.c: 92: lcd_lat();
  6302  0032D0  EC68  F01A         	call	_lcd_lat	;wreg free
  6303                           
  6304                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(16000000/4000.0)));
  6305  0032D4  0E15               	movlw	21
  6306  0032D6  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6307  0032D8  0EC6               	movlw	198
  6308  0032DA                     u6347:
  6309  0032DA  2EE8               	decfsz	wreg,f,c
  6310  0032DC  D7FE               	bra	u6347
  6311  0032DE  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6312  0032E0  D7FC               	bra	u6347
  6313  0032E2  D000               	nop2	
  6314                           
  6315                           ;lcd4a.c: 95: lcd &= 0x0F;
  6316  0032E4  0E0F               	movlw	15
  6317  0032E6  1650               	andwf	_lcd,f,c
  6318                           
  6319                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  6320  0032E8  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6321  0032EC  0E0F               	movlw	15
  6322  0032EE  162F               	andwf	??_lcd_dwr,f,c
  6323  0032F0  382F               	swapf	??_lcd_dwr,w,c
  6324  0032F2  0BF0               	andlw	240
  6325  0032F4  1250               	iorwf	_lcd,f,c
  6326                           
  6327                           ;lcd4a.c: 97: manda(lcd);
  6328  0032F6  5050               	movf	_lcd,w,c
  6329  0032F8  EC23  F01A         	call	_manda
  6330                           
  6331                           ;lcd4a.c: 98: lcd_lat();
  6332  0032FC  EC68  F01A         	call	_lcd_lat	;wreg free
  6333  003300  0012               	return		;funcret
  6334  003302                     __end_of_lcd_dwr:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           indf0	equ	0xFEF
  6344                           postinc0	equ	0xFEE
  6345                           fsr0h	equ	0xFEA
  6346                           fsr0l	equ	0xFE9
  6347                           wreg	equ	0xFE8
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           
  6354 ;; *************** function _lcd_init *****************
  6355 ;; Defined at:
  6356 ;;		line 135 in file "../MyLibs/lcd4a.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;		None
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;		None
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6370 ;;      Params:         0       0       0       0       0       0       0
  6371 ;;      Locals:         0       0       0       0       0       0       0
  6372 ;;      Temps:          1       0       0       0       0       0       0
  6373 ;;      Totals:         1       0       0       0       0       0       0
  6374 ;;Total ram usage:        1 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    4
  6377 ;; This function calls:
  6378 ;;		_lcd_cmd
  6379 ;;		_lcd_cmd_hf
  6380 ;; This function is called by:
  6381 ;;		_main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text20
  6386  002F3E                     __ptext20:
  6387                           	opt stack 0
  6388  002F3E                     _lcd_init:
  6389                           	opt stack 26
  6390                           
  6391                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  6392                           
  6393                           ;incstack = 0
  6394  002F3E  9E93               	bcf	3987,7,c	;volatile
  6395                           
  6396                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  6397  002F40  9C93               	bcf	3987,6,c	;volatile
  6398                           
  6399                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  6400  002F42  9A93               	bcf	3987,5,c	;volatile
  6401                           
  6402                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  6403  002F44  9893               	bcf	3987,4,c	;volatile
  6404                           
  6405                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  6406  002F46  9A95               	bcf	3989,5,c	;volatile
  6407                           
  6408                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  6409  002F48  9C95               	bcf	3989,6,c	;volatile
  6410                           
  6411                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  6412  002F4A  9E95               	bcf	3989,7,c	;volatile
  6413                           
  6414                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  6415  002F4C  9C8C               	bcf	3980,6,c	;volatile
  6416                           
  6417                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
  6418  002F4E  0E30               	movlw	48
  6419  002F50  EC5B  F01A         	call	_lcd_cmd_hf
  6420                           
  6421                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(16000000/4000.0)));
  6422  002F54  0E4E               	movlw	78
  6423  002F56  6E31               	movwf	??_lcd_init& (0+255),c
  6424  002F58  0EEB               	movlw	235
  6425  002F5A                     u6357:
  6426  002F5A  2EE8               	decfsz	wreg,f,c
  6427  002F5C  D7FE               	bra	u6357
  6428  002F5E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6429  002F60  D7FC               	bra	u6357
  6430  002F62  F000               	nop	
  6431                           
  6432                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
  6433  002F64  0E30               	movlw	48
  6434  002F66  EC5B  F01A         	call	_lcd_cmd_hf
  6435                           
  6436                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(16000000/4000.0)));
  6437  002F6A  0E10               	movlw	16
  6438  002F6C  6E31               	movwf	??_lcd_init& (0+255),c
  6439  002F6E  0E94               	movlw	148
  6440  002F70                     u6367:
  6441  002F70  2EE8               	decfsz	wreg,f,c
  6442  002F72  D7FE               	bra	u6367
  6443  002F74  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6444  002F76  D7FC               	bra	u6367
  6445  002F78  D000               	nop2	
  6446                           
  6447                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
  6448  002F7A  0E30               	movlw	48
  6449  002F7C  EC5B  F01A         	call	_lcd_cmd_hf
  6450                           
  6451                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(16000000/4000.0)));
  6452  002F80  0E4E               	movlw	78
  6453  002F82  6E31               	movwf	??_lcd_init& (0+255),c
  6454  002F84  0EEB               	movlw	235
  6455  002F86                     u6377:
  6456  002F86  2EE8               	decfsz	wreg,f,c
  6457  002F88  D7FE               	bra	u6377
  6458  002F8A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6459  002F8C  D7FC               	bra	u6377
  6460  002F8E  F000               	nop	
  6461                           
  6462                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
  6463  002F90  0E20               	movlw	32
  6464  002F92  EC5B  F01A         	call	_lcd_cmd_hf
  6465                           
  6466                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(16000000/4000.0)));
  6467  002F96  0E20               	movlw	32
  6468  002F98  6E31               	movwf	??_lcd_init& (0+255),c
  6469  002F9A  0E2A               	movlw	42
  6470  002F9C                     u6387:
  6471  002F9C  2EE8               	decfsz	wreg,f,c
  6472  002F9E  D7FE               	bra	u6387
  6473  002FA0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6474  002FA2  D7FC               	bra	u6387
  6475                           
  6476                           ;lcd4a.c: 166: lcd_cmd(0x28);
  6477  002FA4  0E28               	movlw	40
  6478  002FA6  EC15  F019         	call	_lcd_cmd
  6479                           
  6480                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(16000000/4000.0)));
  6481  002FAA  0E20               	movlw	32
  6482  002FAC  6E31               	movwf	??_lcd_init& (0+255),c
  6483  002FAE  0E2A               	movlw	42
  6484  002FB0                     u6397:
  6485  002FB0  2EE8               	decfsz	wreg,f,c
  6486  002FB2  D7FE               	bra	u6397
  6487  002FB4  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6488  002FB6  D7FC               	bra	u6397
  6489                           
  6490                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  6491  002FB8  0E0E               	movlw	14
  6492  002FBA  EC15  F019         	call	_lcd_cmd
  6493                           
  6494                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(16000000/4000.0)));
  6495  002FBE  0E20               	movlw	32
  6496  002FC0  6E31               	movwf	??_lcd_init& (0+255),c
  6497  002FC2  0E2A               	movlw	42
  6498  002FC4                     u6407:
  6499  002FC4  2EE8               	decfsz	wreg,f,c
  6500  002FC6  D7FE               	bra	u6407
  6501  002FC8  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6502  002FCA  D7FC               	bra	u6407
  6503                           
  6504                           ;lcd4a.c: 170: lcd_cmd(0x01);
  6505  002FCC  0E01               	movlw	1
  6506  002FCE  EC15  F019         	call	_lcd_cmd
  6507                           
  6508                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(16000000/4000.0)));
  6509  002FD2  0E20               	movlw	32
  6510  002FD4  6E31               	movwf	??_lcd_init& (0+255),c
  6511  002FD6  0E2A               	movlw	42
  6512  002FD8                     u6417:
  6513  002FD8  2EE8               	decfsz	wreg,f,c
  6514  002FDA  D7FE               	bra	u6417
  6515  002FDC  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6516  002FDE  D7FC               	bra	u6417
  6517                           
  6518                           ;lcd4a.c: 172: lcd_cmd(0x06);
  6519  002FE0  0E06               	movlw	6
  6520  002FE2  EC15  F019         	call	_lcd_cmd
  6521                           
  6522                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(16000000/4000.0)));
  6523  002FE6  0E20               	movlw	32
  6524  002FE8  6E31               	movwf	??_lcd_init& (0+255),c
  6525  002FEA  0E2A               	movlw	42
  6526  002FEC                     u6427:
  6527  002FEC  2EE8               	decfsz	wreg,f,c
  6528  002FEE  D7FE               	bra	u6427
  6529  002FF0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6530  002FF2  D7FC               	bra	u6427
  6531                           
  6532                           ;lcd4a.c: 174: lcd_cmd(0x80);
  6533  002FF4  0E80               	movlw	128
  6534  002FF6  EC15  F019         	call	_lcd_cmd
  6535  002FFA  0012               	return		;funcret
  6536  002FFC                     __end_of_lcd_init:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon	equ	0xFF2
  6545                           indf0	equ	0xFEF
  6546                           postinc0	equ	0xFEE
  6547                           fsr0h	equ	0xFEA
  6548                           fsr0l	equ	0xFE9
  6549                           wreg	equ	0xFE8
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _lcd_cmd_hf *****************
  6557 ;; Defined at:
  6558 ;;		line 56 in file "../MyLibs/lcd4a.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  x               1    wreg     unsigned char 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  x               1   46[COMRAM] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6572 ;;      Params:         0       0       0       0       0       0       0
  6573 ;;      Locals:         1       0       0       0       0       0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0
  6575 ;;      Totals:         1       0       0       0       0       0       0
  6576 ;;Total ram usage:        1 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    3
  6579 ;; This function calls:
  6580 ;;		_lcd_lat
  6581 ;;		_manda
  6582 ;; This function is called by:
  6583 ;;		_lcd_init
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text21
  6588  0034B6                     __ptext21:
  6589                           	opt stack 0
  6590  0034B6                     _lcd_cmd_hf:
  6591                           	opt stack 26
  6592                           
  6593                           ;incstack = 0
  6594                           ;lcd_cmd_hf@x stored from wreg
  6595  0034B6  6E2F               	movwf	lcd_cmd_hf@x,c
  6596                           
  6597                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6598  0034B8  9A8C               	bcf	3980,5,c	;volatile
  6599                           
  6600                           ;lcd4a.c: 59: lcd &= 0x0F;
  6601  0034BA  0E0F               	movlw	15
  6602  0034BC  1650               	andwf	_lcd,f,c
  6603                           
  6604                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  6605  0034BE  502F               	movf	lcd_cmd_hf@x,w,c
  6606  0034C0  0BF0               	andlw	240
  6607  0034C2  1250               	iorwf	_lcd,f,c
  6608                           
  6609                           ;lcd4a.c: 61: manda(lcd);
  6610  0034C4  5050               	movf	_lcd,w,c
  6611  0034C6  EC23  F01A         	call	_manda
  6612                           
  6613                           ;lcd4a.c: 62: lcd_lat();
  6614  0034CA  EC68  F01A         	call	_lcd_lat	;wreg free
  6615  0034CE  0012               	return		;funcret
  6616  0034D0                     __end_of_lcd_cmd_hf:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           indf0	equ	0xFEF
  6626                           postinc0	equ	0xFEE
  6627                           fsr0h	equ	0xFEA
  6628                           fsr0l	equ	0xFE9
  6629                           wreg	equ	0xFE8
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _lcd_gotoxy *****************
  6637 ;; Defined at:
  6638 ;;		line 114 in file "../MyLibs/lcd4a.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  x               1    wreg     unsigned char 
  6641 ;;  y               1   48[COMRAM] unsigned char 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  x               1   50[COMRAM] unsigned char 
  6644 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      void 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6654 ;;      Params:         1       0       0       0       0       0       0
  6655 ;;      Locals:         2       0       0       0       0       0       0
  6656 ;;      Temps:          1       0       0       0       0       0       0
  6657 ;;      Totals:         4       0       0       0       0       0       0
  6658 ;;Total ram usage:        4 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    4
  6661 ;; This function calls:
  6662 ;;		_lcd_cmd
  6663 ;; This function is called by:
  6664 ;;		_main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text22
  6669  0033B2                     __ptext22:
  6670                           	opt stack 0
  6671  0033B2                     _lcd_gotoxy:
  6672                           	opt stack 26
  6673                           
  6674                           ;incstack = 0
  6675                           ;lcd_gotoxy@x stored from wreg
  6676  0033B2  6E33               	movwf	lcd_gotoxy@x,c
  6677                           
  6678                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  6679  0033B4  0E00               	movlw	0
  6680  0033B6  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6681                           
  6682                           ;lcd4a.c: 118: switch(y)
  6683  0033B8  D005               	goto	l42
  6684  0033BA                     
  6685                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  6686  0033BA  0EC0               	movlw	192
  6687  0033BC  D001               	goto	L4
  6688  0033BE                     
  6689                           ;lcd4a.c: 127: ADDRESS = 0x80;
  6690  0033BE  0E80               	movlw	128
  6691  0033C0                     L4:
  6692  0033C0  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6693                           
  6694                           ;lcd4a.c: 130: }
  6695                           
  6696                           ;lcd4a.c: 128: break;
  6697  0033C2  D008               	goto	l44
  6698  0033C4                     l42:
  6699  0033C4  5031               	movf	lcd_gotoxy@y,w,c
  6700                           
  6701                           ; Switch size 1, requested type "space"
  6702                           ; Number of cases is 2, Range of values is 1 to 2
  6703                           ; switch strategies available:
  6704                           ; Name         Instructions Cycles
  6705                           ; simple_byte            7     4 (average)
  6706                           ;	Chosen strategy is simple_byte
  6707  0033C6  0A01               	xorlw	1	; case 1
  6708  0033C8  B4D8               	btfsc	status,2,c
  6709  0033CA  D7F9               	goto	l46
  6710  0033CC  0A03               	xorlw	3	; case 2
  6711  0033CE  B4D8               	btfsc	status,2,c
  6712  0033D0  D7F4               	goto	l45
  6713  0033D2  D7F5               	goto	l46
  6714  0033D4                     l44:
  6715                           
  6716                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6717  0033D4  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6718  0033D6  2433               	addwf	lcd_gotoxy@x,w,c
  6719  0033D8  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6720  0033DA  0432               	decf	??_lcd_gotoxy,w,c
  6721  0033DC  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6722                           
  6723                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  6724  0033DE  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6725  0033E0  EC15  F019         	call	_lcd_cmd
  6726  0033E4  0012               	return		;funcret
  6727  0033E6                     __end_of_lcd_gotoxy:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           intcon	equ	0xFF2
  6736                           indf0	equ	0xFEF
  6737                           postinc0	equ	0xFEE
  6738                           fsr0h	equ	0xFEA
  6739                           fsr0l	equ	0xFE9
  6740                           wreg	equ	0xFE8
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _lcd_cmd *****************
  6748 ;; Defined at:
  6749 ;;		line 40 in file "../MyLibs/lcd4a.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  x               1    wreg     unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  x               1   47[COMRAM] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, status,2, status,0, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6763 ;;      Params:         0       0       0       0       0       0       0
  6764 ;;      Locals:         1       0       0       0       0       0       0
  6765 ;;      Temps:          1       0       0       0       0       0       0
  6766 ;;      Totals:         2       0       0       0       0       0       0
  6767 ;;Total ram usage:        2 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    3
  6770 ;; This function calls:
  6771 ;;		_lcd_lat
  6772 ;;		_manda
  6773 ;; This function is called by:
  6774 ;;		_lcd_putc
  6775 ;;		_lcd_gotoxy
  6776 ;;		_lcd_init
  6777 ;;		_lcd_setcursor_vb
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text23
  6782  00322A                     __ptext23:
  6783                           	opt stack 0
  6784  00322A                     _lcd_cmd:
  6785                           	opt stack 25
  6786                           
  6787                           ;incstack = 0
  6788                           ;lcd_cmd@x stored from wreg
  6789  00322A  6E30               	movwf	lcd_cmd@x,c
  6790                           
  6791                           ;lcd4a.c: 42: lcd = 0;
  6792  00322C  0E00               	movlw	0
  6793  00322E  6E50               	movwf	_lcd,c
  6794                           
  6795                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6796  003230  9A8C               	bcf	3980,5,c	;volatile
  6797                           
  6798                           ;lcd4a.c: 44: lcd &= 0x0F;
  6799  003232  0E0F               	movlw	15
  6800  003234  1650               	andwf	_lcd,f,c
  6801                           
  6802                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  6803  003236  5030               	movf	lcd_cmd@x,w,c
  6804  003238  0BF0               	andlw	240
  6805  00323A  1250               	iorwf	_lcd,f,c
  6806                           
  6807                           ;lcd4a.c: 46: manda(lcd);
  6808  00323C  5050               	movf	_lcd,w,c
  6809  00323E  EC23  F01A         	call	_manda
  6810                           
  6811                           ;lcd4a.c: 47: lcd_lat();
  6812  003242  EC68  F01A         	call	_lcd_lat	;wreg free
  6813                           
  6814                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(16000000/4000.0)));
  6815  003246  0E15               	movlw	21
  6816  003248  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6817  00324A  0EC6               	movlw	198
  6818  00324C                     u6437:
  6819  00324C  2EE8               	decfsz	wreg,f,c
  6820  00324E  D7FE               	bra	u6437
  6821  003250  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6822  003252  D7FC               	bra	u6437
  6823  003254  D000               	nop2	
  6824                           
  6825                           ;lcd4a.c: 50: lcd &= 0x0F;
  6826  003256  0E0F               	movlw	15
  6827  003258  1650               	andwf	_lcd,f,c
  6828                           
  6829                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  6830  00325A  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6831  00325E  0E0F               	movlw	15
  6832  003260  162F               	andwf	??_lcd_cmd,f,c
  6833  003262  382F               	swapf	??_lcd_cmd,w,c
  6834  003264  0BF0               	andlw	240
  6835  003266  1250               	iorwf	_lcd,f,c
  6836                           
  6837                           ;lcd4a.c: 52: manda(lcd);
  6838  003268  5050               	movf	_lcd,w,c
  6839  00326A  EC23  F01A         	call	_manda
  6840                           
  6841                           ;lcd4a.c: 53: lcd_lat();
  6842  00326E  EC68  F01A         	call	_lcd_lat	;wreg free
  6843  003272  0012               	return		;funcret
  6844  003274                     __end_of_lcd_cmd:
  6845                           	opt stack 0
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           indf0	equ	0xFEF
  6854                           postinc0	equ	0xFEE
  6855                           fsr0h	equ	0xFEA
  6856                           fsr0l	equ	0xFE9
  6857                           wreg	equ	0xFE8
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _manda *****************
  6865 ;; Defined at:
  6866 ;;		line 178 in file "../MyLibs/lcd4a.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  dato            1    wreg     unsigned char 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  dato            1   45[COMRAM] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6880 ;;      Params:         0       0       0       0       0       0       0
  6881 ;;      Locals:         1       0       0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0
  6883 ;;      Totals:         1       0       0       0       0       0       0
  6884 ;;Total ram usage:        1 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    2
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_lcd_cmd
  6891 ;;		_lcd_cmd_hf
  6892 ;;		_lcd_dwr
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           	psect	text24
  6897  003446                     __ptext24:
  6898                           	opt stack 0
  6899  003446                     _manda:
  6900                           	opt stack 25
  6901                           
  6902                           ;incstack = 0
  6903                           ;manda@dato stored from wreg
  6904  003446  6E2E               	movwf	manda@dato,c
  6905                           
  6906                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6907  003448  A82E               	btfss	manda@dato,4,c
  6908  00344A  D002               	goto	l53
  6909  00344C  888A               	bsf	3978,4,c	;volatile
  6910  00344E  D001               	goto	l54
  6911  003450                     l53:
  6912                           
  6913                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6914  003450  988A               	bcf	3978,4,c	;volatile
  6915  003452                     l54:
  6916                           
  6917                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6918  003452  AA2E               	btfss	manda@dato,5,c
  6919  003454  D002               	goto	l55
  6920  003456  8A8A               	bsf	3978,5,c	;volatile
  6921  003458  D001               	goto	l56
  6922  00345A                     l55:
  6923                           
  6924                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6925  00345A  9A8A               	bcf	3978,5,c	;volatile
  6926  00345C                     l56:
  6927                           
  6928                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6929  00345C  AC2E               	btfss	manda@dato,6,c
  6930  00345E  D002               	goto	l57
  6931  003460  8C8A               	bsf	3978,6,c	;volatile
  6932  003462  D001               	goto	l58
  6933  003464                     l57:
  6934                           
  6935                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6936  003464  9C8A               	bcf	3978,6,c	;volatile
  6937  003466                     l58:
  6938                           
  6939                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6940  003466  AE2E               	btfss	manda@dato,7,c
  6941  003468  D002               	goto	l59
  6942  00346A  8E8A               	bsf	3978,7,c	;volatile
  6943  00346C  0012               	return	
  6944  00346E                     l59:
  6945                           
  6946                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6947  00346E  9E8A               	bcf	3978,7,c	;volatile
  6948  003470  0012               	return	
  6949  003472                     __end_of_manda:
  6950                           	opt stack 0
  6951                           tblptru	equ	0xFF8
  6952                           tblptrh	equ	0xFF7
  6953                           tblptrl	equ	0xFF6
  6954                           tablat	equ	0xFF5
  6955                           prodh	equ	0xFF4
  6956                           prodl	equ	0xFF3
  6957                           intcon	equ	0xFF2
  6958                           indf0	equ	0xFEF
  6959                           postinc0	equ	0xFEE
  6960                           fsr0h	equ	0xFEA
  6961                           fsr0l	equ	0xFE9
  6962                           wreg	equ	0xFE8
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _lcd_lat *****************
  6970 ;; Defined at:
  6971 ;;		line 29 in file "../MyLibs/lcd4a.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;		None
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6985 ;;      Params:         0       0       0       0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0
  6987 ;;      Temps:          1       0       0       0       0       0       0
  6988 ;;      Totals:         1       0       0       0       0       0       0
  6989 ;;Total ram usage:        1 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    2
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_lcd_cmd
  6996 ;;		_lcd_cmd_hf
  6997 ;;		_lcd_dwr
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text25
  7002  0034D0                     __ptext25:
  7003                           	opt stack 0
  7004  0034D0                     _lcd_lat:
  7005                           	opt stack 25
  7006                           
  7007                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  7008                           
  7009                           ;incstack = 0
  7010  0034D0  8E8C               	bsf	3980,7,c	;volatile
  7011                           
  7012                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(16000000/4000.0)));
  7013  0034D2  0E10               	movlw	16
  7014  0034D4  6E2E               	movwf	??_lcd_lat& (0+255),c
  7015  0034D6  0E94               	movlw	148
  7016  0034D8                     u6447:
  7017  0034D8  2EE8               	decfsz	wreg,f,c
  7018  0034DA  D7FE               	bra	u6447
  7019  0034DC  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  7020  0034DE  D7FC               	bra	u6447
  7021  0034E0  D000               	nop2	
  7022                           
  7023                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  7024  0034E2  9E8C               	bcf	3980,7,c	;volatile
  7025  0034E4  0012               	return		;funcret
  7026  0034E6                     __end_of_lcd_lat:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           indf0	equ	0xFEF
  7036                           postinc0	equ	0xFEE
  7037                           fsr0h	equ	0xFEA
  7038                           fsr0l	equ	0xFE9
  7039                           wreg	equ	0xFE8
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _calibra *****************
  7047 ;; Defined at:
  7048 ;;		line 405 in file "color_3.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  valor           4   78[BANK0 ] float 
  7051 ;;  fd              4   82[BANK0 ] float 
  7052 ;;  fw              4   86[BANK0 ] float 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  4   78[BANK0 ] float 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7064 ;;      Params:         0      12       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0
  7067 ;;      Totals:         0      12       0       0       0       0       0
  7068 ;;Total ram usage:       12 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    3
  7071 ;; This function calls:
  7072 ;;		___fladd
  7073 ;;		___fldiv
  7074 ;;		___flmul
  7075 ;;		___flneg
  7076 ;; This function is called by:
  7077 ;;		_main
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text26
  7082  002E74                     __ptext26:
  7083                           	opt stack 0
  7084  002E74                     _calibra:
  7085                           	opt stack 27
  7086                           
  7087                           ;color_3.c: 407: return (255*(valor-fd))/(fw-fd);
  7088                           
  7089                           ;incstack = 0
  7090  002E74  0E00               	movlw	0
  7091  002E76  6E40               	movwf	___flmul@a,c
  7092  002E78  0E00               	movlw	0
  7093  002E7A  6E41               	movwf	___flmul@a+1,c
  7094  002E7C  0E7F               	movlw	127
  7095  002E7E  6E42               	movwf	___flmul@a+2,c
  7096  002E80  0E43               	movlw	67
  7097  002E82  6E43               	movwf	___flmul@a+3,c
  7098  002E84  C0CE  F0BE         	movff	calibra@valor,___fladd@a
  7099  002E88  C0CF  F0BF         	movff	calibra@valor+1,___fladd@a+1
  7100  002E8C  C0D0  F0C0         	movff	calibra@valor+2,___fladd@a+2
  7101  002E90  C0D1  F0C1         	movff	calibra@valor+3,___fladd@a+3
  7102  002E94  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  7103  002E98  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  7104  002E9C  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  7105  002EA0  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  7106  002EA4  EC0C  F01A         	call	___flneg	;wreg free
  7107  002EA8  C02E  F0BA         	movff	?___flneg,___fladd@b
  7108  002EAC  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  7109  002EB0  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  7110  002EB4  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  7111  002EB8  EC0C  F00F         	call	___fladd	;wreg free
  7112  002EBC  C0BA  F03C         	movff	?___fladd,___flmul@b
  7113  002EC0  C0BB  F03D         	movff	?___fladd+1,___flmul@b+1
  7114  002EC4  C0BC  F03E         	movff	?___fladd+2,___flmul@b+2
  7115  002EC8  C0BD  F03F         	movff	?___fladd+3,___flmul@b+3
  7116  002ECC  EC63  F00D         	call	___flmul	;wreg free
  7117  002ED0  C03C  F08D         	movff	?___flmul,___fldiv@b
  7118  002ED4  C03D  F08E         	movff	?___flmul+1,___fldiv@b+1
  7119  002ED8  C03E  F08F         	movff	?___flmul+2,___fldiv@b+2
  7120  002EDC  C03F  F090         	movff	?___flmul+3,___fldiv@b+3
  7121  002EE0  C0D6  F0BE         	movff	calibra@fw,___fladd@a
  7122  002EE4  C0D7  F0BF         	movff	calibra@fw+1,___fladd@a+1
  7123  002EE8  C0D8  F0C0         	movff	calibra@fw+2,___fladd@a+2
  7124  002EEC  C0D9  F0C1         	movff	calibra@fw+3,___fladd@a+3
  7125  002EF0  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  7126  002EF4  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  7127  002EF8  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  7128  002EFC  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  7129  002F00  EC0C  F01A         	call	___flneg	;wreg free
  7130  002F04  C02E  F0BA         	movff	?___flneg,___fladd@b
  7131  002F08  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  7132  002F0C  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  7133  002F10  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  7134  002F14  EC0C  F00F         	call	___fladd	;wreg free
  7135  002F18  C0BA  F091         	movff	?___fladd,___fldiv@a
  7136  002F1C  C0BB  F092         	movff	?___fladd+1,___fldiv@a+1
  7137  002F20  C0BC  F093         	movff	?___fladd+2,___fldiv@a+2
  7138  002F24  C0BD  F094         	movff	?___fladd+3,___fldiv@a+3
  7139  002F28  ECAB  F010         	call	___fldiv	;wreg free
  7140  002F2C  C08D  F0CE         	movff	?___fldiv,?_calibra
  7141  002F30  C08E  F0CF         	movff	?___fldiv+1,?_calibra+1
  7142  002F34  C08F  F0D0         	movff	?___fldiv+2,?_calibra+2
  7143  002F38  C090  F0D1         	movff	?___fldiv+3,?_calibra+3
  7144  002F3C  0012               	return	
  7145  002F3E                     __end_of_calibra:
  7146                           	opt stack 0
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           intcon	equ	0xFF2
  7154                           indf0	equ	0xFEF
  7155                           postinc0	equ	0xFEE
  7156                           fsr0h	equ	0xFEA
  7157                           fsr0l	equ	0xFE9
  7158                           wreg	equ	0xFE8
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function ___flneg *****************
  7166 ;; Defined at:
  7167 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/flneg.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  f1              4   45[COMRAM] float 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  4   45[COMRAM] float 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7181 ;;      Params:         4       0       0       0       0       0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0
  7184 ;;      Totals:         4       0       0       0       0       0       0
  7185 ;;Total ram usage:        4 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    2
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_calibra
  7192 ;;		_sprintf
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text27
  7197  003418                     __ptext27:
  7198                           	opt stack 0
  7199  003418                     ___flneg:
  7200                           	opt stack 27
  7201                           
  7202                           ;incstack = 0
  7203  003418  502E               	movf	___flneg@f1,w,c
  7204  00341A  102F               	iorwf	___flneg@f1+1,w,c
  7205  00341C  1030               	iorwf	___flneg@f1+2,w,c
  7206  00341E  1031               	iorwf	___flneg@f1+3,w,c
  7207  003420  B4D8               	btfsc	status,2,c
  7208  003422  D008               	goto	l530
  7209  003424  0E00               	movlw	0
  7210  003426  1A2E               	xorwf	___flneg@f1,f,c
  7211  003428  0E00               	movlw	0
  7212  00342A  1A2F               	xorwf	___flneg@f1+1,f,c
  7213  00342C  0E00               	movlw	0
  7214  00342E  1A30               	xorwf	___flneg@f1+2,f,c
  7215  003430  0E80               	movlw	128
  7216  003432  1A31               	xorwf	___flneg@f1+3,f,c
  7217  003434                     l530:
  7218  003434  C02E  F02E         	movff	___flneg@f1,?___flneg
  7219  003438  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  7220  00343C  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  7221  003440  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  7222  003444  0012               	return	
  7223  003446                     __end_of___flneg:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           indf0	equ	0xFEF
  7233                           postinc0	equ	0xFEE
  7234                           fsr0h	equ	0xFEA
  7235                           fsr0l	equ	0xFE9
  7236                           wreg	equ	0xFE8
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function ___fladd *****************
  7244 ;; Defined at:
  7245 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  b               4   58[BANK0 ] float 
  7248 ;;  a               4   62[BANK0 ] float 
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;  grs             1   77[BANK0 ] unsigned char 
  7251 ;;  bexp            1   76[BANK0 ] unsigned char 
  7252 ;;  aexp            1   75[BANK0 ] unsigned char 
  7253 ;;  signs           1   74[BANK0 ] unsigned char 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  4   58[BANK0 ] unsigned char 
  7256 ;; Registers used:
  7257 ;;		wreg, status,2, status,0
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7263 ;;      Params:         0       8       0       0       0       0       0
  7264 ;;      Locals:         0       4       0       0       0       0       0
  7265 ;;      Temps:          0       8       0       0       0       0       0
  7266 ;;      Totals:         0      20       0       0       0       0       0
  7267 ;;Total ram usage:       20 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:    2
  7270 ;; This function calls:
  7271 ;;		Nothing
  7272 ;; This function is called by:
  7273 ;;		_main
  7274 ;;		_calibra
  7275 ;;		_sprintf
  7276 ;;		___flsub
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text28
  7281  001E18                     __ptext28:
  7282                           	opt stack 0
  7283  001E18                     ___fladd:
  7284                           	opt stack 26
  7285                           
  7286                           ;incstack = 0
  7287  001E18  0100               	movlb	0	; () banked
  7288  001E1A  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7289  001E1C  0B80               	andlw	128
  7290  001E1E  6FCA               	movwf	___fladd@signs& (0+255),b
  7291  001E20  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7292  001E22  25BD               	addwf	(___fladd@b+3)& (0+255),w,b
  7293  001E24  6FCC               	movwf	___fladd@bexp& (0+255),b
  7294                           
  7295                           ; BSR set to: 0
  7296  001E26  BFBC               	btfsc	(___fladd@b+2)& (0+255),7,b
  7297                           
  7298                           ; BSR set to: 0
  7299  001E28  81CC               	bsf	___fladd@bexp& (0+255),0,b
  7300                           
  7301                           ; BSR set to: 0
  7302                           
  7303                           ; BSR set to: 0
  7304  001E2A  51CC               	movf	___fladd@bexp& (0+255),w,b
  7305  001E2C  B4D8               	btfsc	status,2,c
  7306  001E2E  D00D               	goto	l778
  7307                           
  7308                           ; BSR set to: 0
  7309  001E30  29CC               	incf	___fladd@bexp& (0+255),w,b
  7310  001E32  A4D8               	btfss	status,2,c
  7311  001E34  D008               	goto	l779
  7312                           
  7313                           ; BSR set to: 0
  7314  001E36  0E00               	movlw	0
  7315  001E38  6FBA               	movwf	___fladd@b& (0+255),b
  7316  001E3A  0E00               	movlw	0
  7317  001E3C  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7318  001E3E  0E00               	movlw	0
  7319  001E40  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7320  001E42  0E00               	movlw	0
  7321  001E44  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7322  001E46                     l779:
  7323                           
  7324                           ; BSR set to: 0
  7325                           
  7326                           ; BSR set to: 0
  7327  001E46  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7328  001E48  D006               	goto	L5
  7329  001E4A                     l778:
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334  001E4A  0E00               	movlw	0
  7335  001E4C  6FBA               	movwf	___fladd@b& (0+255),b
  7336  001E4E  0E00               	movlw	0
  7337  001E50  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7338  001E52  0E00               	movlw	0
  7339  001E54  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7340  001E56                     L5:
  7341  001E56  0E00               	movlw	0
  7342  001E58  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7343                           
  7344                           ; BSR set to: 0
  7345                           
  7346                           ; BSR set to: 0
  7347  001E5A  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7348  001E5C  0B80               	andlw	128
  7349  001E5E  6FCB               	movwf	___fladd@aexp& (0+255),b
  7350                           
  7351                           ; BSR set to: 0
  7352  001E60  51CA               	movf	___fladd@signs& (0+255),w,b
  7353  001E62  19CB               	xorwf	___fladd@aexp& (0+255),w,b
  7354  001E64  A4D8               	btfss	status,2,c
  7355                           
  7356                           ; BSR set to: 0
  7357  001E66  8DCA               	bsf	___fladd@signs& (0+255),6,b
  7358                           
  7359                           ; BSR set to: 0
  7360                           
  7361                           ; BSR set to: 0
  7362  001E68  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7363  001E6A  25C1               	addwf	(___fladd@a+3)& (0+255),w,b
  7364  001E6C  6FCB               	movwf	___fladd@aexp& (0+255),b
  7365                           
  7366                           ; BSR set to: 0
  7367  001E6E  BFC0               	btfsc	(___fladd@a+2)& (0+255),7,b
  7368                           
  7369                           ; BSR set to: 0
  7370  001E70  81CB               	bsf	___fladd@aexp& (0+255),0,b
  7371                           
  7372                           ; BSR set to: 0
  7373                           
  7374                           ; BSR set to: 0
  7375  001E72  51CB               	movf	___fladd@aexp& (0+255),w,b
  7376  001E74  B4D8               	btfsc	status,2,c
  7377  001E76  D00D               	goto	l783
  7378                           
  7379                           ; BSR set to: 0
  7380  001E78  29CB               	incf	___fladd@aexp& (0+255),w,b
  7381  001E7A  A4D8               	btfss	status,2,c
  7382  001E7C  D008               	goto	l784
  7383                           
  7384                           ; BSR set to: 0
  7385  001E7E  0E00               	movlw	0
  7386  001E80  6FBE               	movwf	___fladd@a& (0+255),b
  7387  001E82  0E00               	movlw	0
  7388  001E84  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7389  001E86  0E00               	movlw	0
  7390  001E88  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7391  001E8A  0E00               	movlw	0
  7392  001E8C  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7393  001E8E                     l784:
  7394                           
  7395                           ; BSR set to: 0
  7396                           
  7397                           ; BSR set to: 0
  7398  001E8E  8FC0               	bsf	(___fladd@a+2)& (0+255),7,b
  7399  001E90  D006               	goto	L6
  7400  001E92                     l783:
  7401                           
  7402                           ; BSR set to: 0
  7403                           
  7404                           ; BSR set to: 0
  7405  001E92  0E00               	movlw	0
  7406  001E94  6FBE               	movwf	___fladd@a& (0+255),b
  7407  001E96  0E00               	movlw	0
  7408  001E98  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7409  001E9A  0E00               	movlw	0
  7410  001E9C  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7411  001E9E                     L6:
  7412  001E9E  0E00               	movlw	0
  7413  001EA0  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7414                           
  7415                           ; BSR set to: 0
  7416                           
  7417                           ; BSR set to: 0
  7418  001EA2  51CC               	movf	___fladd@bexp& (0+255),w,b
  7419  001EA4  5DCB               	subwf	___fladd@aexp& (0+255),w,b
  7420  001EA6  B0D8               	btfsc	status,0,c
  7421  001EA8  D022               	goto	l786
  7422                           
  7423                           ; BSR set to: 0
  7424  001EAA  ADCA               	btfss	___fladd@signs& (0+255),6,b
  7425  001EAC  D002               	goto	l787
  7426                           
  7427                           ; BSR set to: 0
  7428  001EAE  0E80               	movlw	128
  7429  001EB0  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7430  001EB2                     l787:
  7431                           
  7432                           ; BSR set to: 0
  7433                           
  7434                           ; BSR set to: 0
  7435  001EB2  C0CC  F0CD         	movff	___fladd@bexp,___fladd@grs
  7436                           
  7437                           ; BSR set to: 0
  7438  001EB6  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7439                           
  7440                           ; BSR set to: 0
  7441  001EBA  C0CD  F0CB         	movff	___fladd@grs,___fladd@aexp
  7442                           
  7443                           ; BSR set to: 0
  7444  001EBE  C0BA  F0CD         	movff	___fladd@b,___fladd@grs
  7445                           
  7446                           ; BSR set to: 0
  7447  001EC2  C0BE  F0BA         	movff	___fladd@a,___fladd@b
  7448                           
  7449                           ; BSR set to: 0
  7450  001EC6  C0CD  F0BE         	movff	___fladd@grs,___fladd@a
  7451                           
  7452                           ; BSR set to: 0
  7453  001ECA  C0BB  F0CD         	movff	___fladd@b+1,___fladd@grs
  7454                           
  7455                           ; BSR set to: 0
  7456  001ECE  C0BF  F0BB         	movff	___fladd@a+1,___fladd@b+1
  7457                           
  7458                           ; BSR set to: 0
  7459  001ED2  C0CD  F0BF         	movff	___fladd@grs,___fladd@a+1
  7460                           
  7461                           ; BSR set to: 0
  7462  001ED6  C0BC  F0CD         	movff	___fladd@b+2,___fladd@grs
  7463                           
  7464                           ; BSR set to: 0
  7465  001EDA  C0C0  F0BC         	movff	___fladd@a+2,___fladd@b+2
  7466                           
  7467                           ; BSR set to: 0
  7468  001EDE  C0CD  F0C0         	movff	___fladd@grs,___fladd@a+2
  7469                           
  7470                           ; BSR set to: 0
  7471  001EE2  C0BD  F0CD         	movff	___fladd@b+3,___fladd@grs
  7472                           
  7473                           ; BSR set to: 0
  7474  001EE6  C0C1  F0BD         	movff	___fladd@a+3,___fladd@b+3
  7475                           
  7476                           ; BSR set to: 0
  7477  001EEA  C0CD  F0C1         	movff	___fladd@grs,___fladd@a+3
  7478  001EEE                     l786:
  7479                           
  7480                           ; BSR set to: 0
  7481                           
  7482                           ; BSR set to: 0
  7483  001EEE  0E00               	movlw	0
  7484  001EF0  6FCD               	movwf	___fladd@grs& (0+255),b
  7485                           
  7486                           ; BSR set to: 0
  7487  001EF2  51CC               	movf	___fladd@bexp& (0+255),w,b
  7488  001EF4  6FC2               	movwf	??___fladd& (0+255),b
  7489  001EF6  6BC3               	clrf	(??___fladd+1)& (0+255),b
  7490  001EF8  1FC2               	comf	??___fladd& (0+255),f,b
  7491  001EFA  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7492  001EFC  4BC2               	infsnz	??___fladd& (0+255),f,b
  7493  001EFE  2BC3               	incf	(??___fladd+1)& (0+255),f,b
  7494  001F00  51CB               	movf	___fladd@aexp& (0+255),w,b
  7495  001F02  6FC4               	movwf	(??___fladd+2)& (0+255),b
  7496  001F04  6BC5               	clrf	(??___fladd+3)& (0+255),b
  7497  001F06  51C2               	movf	??___fladd& (0+255),w,b
  7498  001F08  27C4               	addwf	(??___fladd+2)& (0+255),f,b
  7499  001F0A  51C3               	movf	(??___fladd+1)& (0+255),w,b
  7500  001F0C  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7501  001F0E  BFC5               	btfsc	(??___fladd+3)& (0+255),7,b
  7502  001F10  D02C               	goto	l790
  7503  001F12  51C5               	movf	(??___fladd+3)& (0+255),w,b
  7504  001F14  E104               	bnz	u4340
  7505  001F16  0E1A               	movlw	26
  7506  001F18  5DC4               	subwf	(??___fladd+2)& (0+255),w,b
  7507  001F1A  A0D8               	btfss	status,0,c
  7508  001F1C  D026               	goto	l790
  7509  001F1E                     u4340:
  7510                           
  7511                           ; BSR set to: 0
  7512  001F1E  51BA               	movf	___fladd@b& (0+255),w,b
  7513  001F20  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7514  001F22  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7515  001F24  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7516  001F26  B4D8               	btfsc	status,2,c
  7517  001F28  D002               	goto	u4350
  7518  001F2A  0E01               	movlw	1
  7519  001F2C  D001               	goto	u4360
  7520  001F2E                     u4350:
  7521  001F2E  0E00               	movlw	0
  7522  001F30                     u4360:
  7523  001F30  6FCD               	movwf	___fladd@grs& (0+255),b
  7524                           
  7525                           ; BSR set to: 0
  7526  001F32  0E00               	movlw	0
  7527  001F34  6FBA               	movwf	___fladd@b& (0+255),b
  7528  001F36  0E00               	movlw	0
  7529  001F38  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7530  001F3A  0E00               	movlw	0
  7531  001F3C  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7532  001F3E  0E00               	movlw	0
  7533  001F40  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7534                           
  7535                           ; BSR set to: 0
  7536  001F42  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7537  001F46  D015               	goto	u4390
  7538  001F48                     l791:
  7539                           
  7540                           ; BSR set to: 0
  7541  001F48  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7542  001F4A  D005               	goto	l792
  7543                           
  7544                           ; BSR set to: 0
  7545  001F4C  90D8               	bcf	status,0,c
  7546  001F4E  31CD               	rrcf	___fladd@grs& (0+255),w,b
  7547  001F50  0901               	iorlw	1
  7548  001F52  6FCD               	movwf	___fladd@grs& (0+255),b
  7549  001F54  D002               	goto	l793
  7550  001F56                     l792:
  7551                           
  7552                           ; BSR set to: 0
  7553                           
  7554                           ; BSR set to: 0
  7555  001F56  90D8               	bcf	status,0,c
  7556  001F58  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7557  001F5A                     l793:
  7558                           
  7559                           ; BSR set to: 0
  7560                           
  7561                           ; BSR set to: 0
  7562  001F5A  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7563                           
  7564                           ; BSR set to: 0
  7565  001F5C  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7566                           
  7567                           ; BSR set to: 0
  7568                           
  7569                           ; BSR set to: 0
  7570  001F5E  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7571  001F60  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7572  001F62  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7573  001F64  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7574  001F66  33BA               	rrcf	___fladd@b& (0+255),f,b
  7575                           
  7576                           ; BSR set to: 0
  7577  001F68  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7578  001F6A                     l790:
  7579                           
  7580                           ; BSR set to: 0
  7581  001F6A  51CB               	movf	___fladd@aexp& (0+255),w,b
  7582  001F6C  5DCC               	subwf	___fladd@bexp& (0+255),w,b
  7583  001F6E  A0D8               	btfss	status,0,c
  7584  001F70  D7EB               	goto	l791
  7585  001F72                     u4390:
  7586                           
  7587                           ; BSR set to: 0
  7588                           
  7589                           ; BSR set to: 0
  7590  001F72  BDCA               	btfsc	___fladd@signs& (0+255),6,b
  7591  001F74  D029               	goto	l796
  7592                           
  7593                           ; BSR set to: 0
  7594  001F76  51CC               	movf	___fladd@bexp& (0+255),w,b
  7595  001F78  A4D8               	btfss	status,2,c
  7596  001F7A  D009               	goto	l797
  7597                           
  7598                           ; BSR set to: 0
  7599  001F7C  0E00               	movlw	0
  7600  001F7E  6FBA               	movwf	?___fladd& (0+255),b
  7601  001F80  0E00               	movlw	0
  7602  001F82  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7603  001F84  0E00               	movlw	0
  7604  001F86  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7605  001F88  0E00               	movlw	0
  7606  001F8A  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609  001F8C  0012               	return	
  7610  001F8E                     l797:
  7611                           
  7612                           ; BSR set to: 0
  7613                           
  7614                           ; BSR set to: 0
  7615  001F8E  51BE               	movf	___fladd@a& (0+255),w,b
  7616  001F90  27BA               	addwf	___fladd@b& (0+255),f,b
  7617  001F92  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7618  001F94  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7619  001F96  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7620  001F98  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7621  001F9A  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7622  001F9C  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7623                           
  7624                           ; BSR set to: 0
  7625  001F9E  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7626  001FA0  D083               	goto	u4520
  7627                           
  7628                           ; BSR set to: 0
  7629  001FA2  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7630  001FA4  D006               	goto	l800
  7631                           
  7632                           ; BSR set to: 0
  7633  001FA6  90D8               	bcf	status,0,c
  7634  001FA8  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7635  001FAA  51CD               	movf	___fladd@grs& (0+255),w,b
  7636  001FAC  0901               	iorlw	1
  7637  001FAE  6FCD               	movwf	___fladd@grs& (0+255),b
  7638  001FB0  D002               	goto	l801
  7639  001FB2                     l800:
  7640                           
  7641                           ; BSR set to: 0
  7642                           
  7643                           ; BSR set to: 0
  7644  001FB2  90D8               	bcf	status,0,c
  7645  001FB4  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7646  001FB6                     l801:
  7647                           
  7648                           ; BSR set to: 0
  7649                           
  7650                           ; BSR set to: 0
  7651  001FB6  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7652                           
  7653                           ; BSR set to: 0
  7654  001FB8  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7655                           
  7656                           ; BSR set to: 0
  7657                           
  7658                           ; BSR set to: 0
  7659  001FBA  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7660  001FBC  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7661  001FBE  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7662  001FC0  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7663  001FC2  33BA               	rrcf	___fladd@b& (0+255),f,b
  7664                           
  7665                           ; BSR set to: 0
  7666  001FC4  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7667                           
  7668                           ; BSR set to: 0
  7669  001FC6  D070               	goto	u4520
  7670  001FC8                     l796:
  7671                           
  7672                           ; BSR set to: 0
  7673                           
  7674                           ; BSR set to: 0
  7675  001FC8  51BE               	movf	___fladd@a& (0+255),w,b
  7676  001FCA  5DBA               	subwf	___fladd@b& (0+255),w,b
  7677  001FCC  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7678  001FCE  59BB               	subwfb	(___fladd@b+1)& (0+255),w,b
  7679  001FD0  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7680  001FD2  59BC               	subwfb	(___fladd@b+2)& (0+255),w,b
  7681  001FD4  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7682  001FD6  0A80               	xorlw	128
  7683  001FD8  6FC2               	movwf	??___fladd& (0+255),b
  7684  001FDA  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7685  001FDC  0A80               	xorlw	128
  7686  001FDE  59C2               	subwfb	??___fladd& (0+255),w,b
  7687  001FE0  B0D8               	btfsc	status,0,c
  7688  001FE2  D036               	goto	l804
  7689                           
  7690                           ; BSR set to: 0
  7691  001FE4  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7692  001FE8  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7693  001FEC  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7694  001FF0  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7695  001FF4  1FC2               	comf	??___fladd& (0+255),f,b
  7696  001FF6  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7697  001FF8  1FC4               	comf	(??___fladd+2)& (0+255),f,b
  7698  001FFA  1FC5               	comf	(??___fladd+3)& (0+255),f,b
  7699  001FFC  2BC2               	incf	??___fladd& (0+255),f,b
  7700  001FFE  0E00               	movlw	0
  7701  002000  23C3               	addwfc	(??___fladd+1)& (0+255),f,b
  7702  002002  23C4               	addwfc	(??___fladd+2)& (0+255),f,b
  7703  002004  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7704  002006  51BE               	movf	___fladd@a& (0+255),w,b
  7705  002008  25C2               	addwf	??___fladd& (0+255),w,b
  7706  00200A  6FC6               	movwf	(??___fladd+4)& (0+255),b
  7707  00200C  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7708  00200E  21C3               	addwfc	(??___fladd+1)& (0+255),w,b
  7709  002010  6FC7               	movwf	(??___fladd+5)& (0+255),b
  7710  002012  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7711  002014  21C4               	addwfc	(??___fladd+2)& (0+255),w,b
  7712  002016  6FC8               	movwf	(??___fladd+6)& (0+255),b
  7713  002018  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7714  00201A  21C5               	addwfc	(??___fladd+3)& (0+255),w,b
  7715  00201C  6FC9               	movwf	(??___fladd+7)& (0+255),b
  7716  00201E  0EFF               	movlw	255
  7717  002020  25C6               	addwf	(??___fladd+4)& (0+255),w,b
  7718  002022  6FBA               	movwf	___fladd@b& (0+255),b
  7719  002024  0EFF               	movlw	255
  7720  002026  21C7               	addwfc	(??___fladd+5)& (0+255),w,b
  7721  002028  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7722  00202A  0EFF               	movlw	255
  7723  00202C  21C8               	addwfc	(??___fladd+6)& (0+255),w,b
  7724  00202E  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7725  002030  0EFF               	movlw	255
  7726  002032  21C9               	addwfc	(??___fladd+7)& (0+255),w,b
  7727  002034  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7728  002036  0E80               	movlw	128
  7729  002038  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7730                           
  7731                           ; BSR set to: 0
  7732  00203A  6DCD               	negf	___fladd@grs& (0+255),b
  7733                           
  7734                           ; BSR set to: 0
  7735  00203C  51CD               	movf	___fladd@grs& (0+255),w,b
  7736  00203E  A4D8               	btfss	status,2,c
  7737  002040  D00F               	goto	l806
  7738                           
  7739                           ; BSR set to: 0
  7740  002042  0E01               	movlw	1
  7741  002044  27BA               	addwf	___fladd@b& (0+255),f,b
  7742  002046  0E00               	movlw	0
  7743  002048  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7744  00204A  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7745  00204C  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7746                           
  7747                           ; BSR set to: 0
  7748  00204E  D008               	goto	l806
  7749  002050                     l804:
  7750                           
  7751                           ; BSR set to: 0
  7752                           
  7753                           ; BSR set to: 0
  7754  002050  51BE               	movf	___fladd@a& (0+255),w,b
  7755  002052  5FBA               	subwf	___fladd@b& (0+255),f,b
  7756  002054  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7757  002056  5BBB               	subwfb	(___fladd@b+1)& (0+255),f,b
  7758  002058  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7759  00205A  5BBC               	subwfb	(___fladd@b+2)& (0+255),f,b
  7760  00205C  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7761  00205E  5BBD               	subwfb	(___fladd@b+3)& (0+255),f,b
  7762  002060                     l806:
  7763                           
  7764                           ; BSR set to: 0
  7765  002060  51BA               	movf	___fladd@b& (0+255),w,b
  7766  002062  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7767  002064  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7768  002066  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7769  002068  A4D8               	btfss	status,2,c
  7770  00206A  D01C               	goto	l813
  7771                           
  7772                           ; BSR set to: 0
  7773  00206C  51CD               	movf	___fladd@grs& (0+255),w,b
  7774  00206E  A4D8               	btfss	status,2,c
  7775  002070  D019               	goto	l813
  7776                           
  7777                           ; BSR set to: 0
  7778  002072  0E00               	movlw	0
  7779  002074  6FBA               	movwf	?___fladd& (0+255),b
  7780  002076  0E00               	movlw	0
  7781  002078  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7782  00207A  0E00               	movlw	0
  7783  00207C  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7784  00207E  0E00               	movlw	0
  7785  002080  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7786                           
  7787                           ; BSR set to: 0
  7788  002082  0012               	return	
  7789  002084                     
  7790                           ; BSR set to: 0
  7791                           
  7792                           ; BSR set to: 0
  7793  002084  90D8               	bcf	status,0,c
  7794  002086  37BA               	rlcf	___fladd@b& (0+255),f,b
  7795  002088  37BB               	rlcf	(___fladd@b+1)& (0+255),f,b
  7796  00208A  37BC               	rlcf	(___fladd@b+2)& (0+255),f,b
  7797  00208C  37BD               	rlcf	(___fladd@b+3)& (0+255),f,b
  7798                           
  7799                           ; BSR set to: 0
  7800  00208E  BFCD               	btfsc	___fladd@grs& (0+255),7,b
  7801                           
  7802                           ; BSR set to: 0
  7803  002090  81BA               	bsf	___fladd@b& (0+255),0,b
  7804                           
  7805                           ; BSR set to: 0
  7806                           
  7807                           ; BSR set to: 0
  7808  002092  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7809  002094  D002               	goto	l811
  7810                           
  7811                           ; BSR set to: 0
  7812  002096  80D8               	bsf	status,0,c
  7813  002098  D001               	goto	L7
  7814  00209A                     l811:
  7815                           
  7816                           ; BSR set to: 0
  7817                           
  7818                           ; BSR set to: 0
  7819  00209A  90D8               	bcf	status,0,c
  7820  00209C                     L7:
  7821  00209C  37CD               	rlcf	___fladd@grs& (0+255),f,b
  7822                           
  7823                           ; BSR set to: 0
  7824                           
  7825                           ; BSR set to: 0
  7826  00209E  51CC               	movf	___fladd@bexp& (0+255),w,b
  7827  0020A0  A4D8               	btfss	status,2,c
  7828                           
  7829                           ; BSR set to: 0
  7830  0020A2  07CC               	decf	___fladd@bexp& (0+255),f,b
  7831  0020A4                     l813:
  7832                           
  7833                           ; BSR set to: 0
  7834                           
  7835                           ; BSR set to: 0
  7836                           
  7837                           ; BSR set to: 0
  7838  0020A4  AFBC               	btfss	(___fladd@b+2)& (0+255),7,b
  7839  0020A6  D7EE               	goto	l809
  7840  0020A8                     u4520:
  7841                           
  7842                           ; BSR set to: 0
  7843                           
  7844                           ; BSR set to: 0
  7845                           
  7846                           ; BSR set to: 0
  7847  0020A8  0E00               	movlw	0
  7848  0020AA  6FCB               	movwf	___fladd@aexp& (0+255),b
  7849                           
  7850                           ; BSR set to: 0
  7851  0020AC  AFCD               	btfss	___fladd@grs& (0+255),7,b
  7852  0020AE  D00A               	goto	l818
  7853                           
  7854                           ; BSR set to: 0
  7855  0020B0  C0CD  F0C2         	movff	___fladd@grs,??___fladd
  7856  0020B4  0E7F               	movlw	127
  7857  0020B6  17C2               	andwf	??___fladd& (0+255),f,b
  7858  0020B8  A4D8               	btfss	status,2,c
  7859  0020BA  D002               	goto	u4550
  7860                           
  7861                           ; BSR set to: 0
  7862                           
  7863                           ; BSR set to: 0
  7864  0020BC  A1BA               	btfss	___fladd@b& (0+255),0,b
  7865  0020BE  D002               	goto	l818
  7866  0020C0                     u4550:
  7867                           
  7868                           ; BSR set to: 0
  7869  0020C0  0E01               	movlw	1
  7870  0020C2  6FCB               	movwf	___fladd@aexp& (0+255),b
  7871  0020C4                     l818:
  7872                           
  7873                           ; BSR set to: 0
  7874                           
  7875                           ; BSR set to: 0
  7876                           
  7877                           ; BSR set to: 0
  7878  0020C4  51CB               	movf	___fladd@aexp& (0+255),w,b
  7879  0020C6  B4D8               	btfsc	status,2,c
  7880  0020C8  D020               	goto	l821
  7881                           
  7882                           ; BSR set to: 0
  7883  0020CA  0E01               	movlw	1
  7884  0020CC  27BA               	addwf	___fladd@b& (0+255),f,b
  7885  0020CE  0E00               	movlw	0
  7886  0020D0  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7887  0020D2  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7888  0020D4  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7889                           
  7890                           ; BSR set to: 0
  7891  0020D6  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7892  0020D8  D018               	goto	l821
  7893                           
  7894                           ; BSR set to: 0
  7895  0020DA  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7896  0020DE  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7897  0020E2  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7898  0020E6  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7899  0020EA  35C5               	rlcf	(??___fladd+3)& (0+255),w,b
  7900  0020EC  33C5               	rrcf	(??___fladd+3)& (0+255),f,b
  7901  0020EE  33C4               	rrcf	(??___fladd+2)& (0+255),f,b
  7902  0020F0  33C3               	rrcf	(??___fladd+1)& (0+255),f,b
  7903  0020F2  33C2               	rrcf	??___fladd& (0+255),f,b
  7904  0020F4  C0C2  F0BA         	movff	??___fladd,___fladd@b
  7905  0020F8  C0C3  F0BB         	movff	??___fladd+1,___fladd@b+1
  7906  0020FC  C0C4  F0BC         	movff	??___fladd+2,___fladd@b+2
  7907  002100  C0C5  F0BD         	movff	??___fladd+3,___fladd@b+3
  7908  002104  29CC               	incf	___fladd@bexp& (0+255),w,b
  7909  002106  A4D8               	btfss	status,2,c
  7910                           
  7911                           ; BSR set to: 0
  7912  002108  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7913  00210A                     l821:
  7914                           
  7915                           ; BSR set to: 0
  7916                           
  7917                           ; BSR set to: 0
  7918                           
  7919                           ; BSR set to: 0
  7920                           
  7921                           ; BSR set to: 0
  7922  00210A  29CC               	incf	___fladd@bexp& (0+255),w,b
  7923  00210C  B4D8               	btfsc	status,2,c
  7924  00210E  D003               	goto	u4600
  7925                           
  7926                           ; BSR set to: 0
  7927  002110  51CC               	movf	___fladd@bexp& (0+255),w,b
  7928  002112  A4D8               	btfss	status,2,c
  7929  002114  D00D               	goto	l825
  7930  002116                     u4600:
  7931                           
  7932                           ; BSR set to: 0
  7933                           
  7934                           ; BSR set to: 0
  7935  002116  0E00               	movlw	0
  7936  002118  6FBA               	movwf	___fladd@b& (0+255),b
  7937  00211A  0E00               	movlw	0
  7938  00211C  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7939  00211E  0E00               	movlw	0
  7940  002120  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7941  002122  0E00               	movlw	0
  7942  002124  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7943  002126  51CC               	movf	___fladd@bexp& (0+255),w,b
  7944  002128  A4D8               	btfss	status,2,c
  7945  00212A  D002               	goto	l825
  7946                           
  7947                           ; BSR set to: 0
  7948  00212C  0E00               	movlw	0
  7949  00212E  6FCA               	movwf	___fladd@signs& (0+255),b
  7950  002130                     l825:
  7951                           
  7952                           ; BSR set to: 0
  7953                           
  7954                           ; BSR set to: 0
  7955                           
  7956                           ; BSR set to: 0
  7957  002130  A1CC               	btfss	___fladd@bexp& (0+255),0,b
  7958  002132  D002               	goto	l826
  7959                           
  7960                           ; BSR set to: 0
  7961  002134  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7962  002136  D001               	goto	l827
  7963  002138                     l826:
  7964                           
  7965                           ; BSR set to: 0
  7966                           
  7967                           ; BSR set to: 0
  7968  002138  9FBC               	bcf	(___fladd@b+2)& (0+255),7,b
  7969  00213A                     l827:
  7970                           
  7971                           ; BSR set to: 0
  7972                           
  7973                           ; BSR set to: 0
  7974  00213A  90D8               	bcf	status,0,c
  7975  00213C  31CC               	rrcf	___fladd@bexp& (0+255),w,b
  7976  00213E  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7977                           
  7978                           ; BSR set to: 0
  7979  002140  BFCA               	btfsc	___fladd@signs& (0+255),7,b
  7980                           
  7981                           ; BSR set to: 0
  7982  002142  8FBD               	bsf	(___fladd@b+3)& (0+255),7,b
  7983                           
  7984                           ; BSR set to: 0
  7985                           
  7986                           ; BSR set to: 0
  7987  002144  C0BA  F0BA         	movff	___fladd@b,?___fladd
  7988  002148  C0BB  F0BB         	movff	___fladd@b+1,?___fladd+1
  7989  00214C  C0BC  F0BC         	movff	___fladd@b+2,?___fladd+2
  7990  002150  C0BD  F0BD         	movff	___fladd@b+3,?___fladd+3
  7991  002154  0012               	return	
  7992  002156                     __end_of___fladd:
  7993                           	opt stack 0
  7994                           tblptru	equ	0xFF8
  7995                           tblptrh	equ	0xFF7
  7996                           tblptrl	equ	0xFF6
  7997                           tablat	equ	0xFF5
  7998                           prodh	equ	0xFF4
  7999                           prodl	equ	0xFF3
  8000                           intcon	equ	0xFF2
  8001                           indf0	equ	0xFEF
  8002                           postinc0	equ	0xFEE
  8003                           fsr0h	equ	0xFEA
  8004                           fsr0l	equ	0xFE9
  8005                           wreg	equ	0xFE8
  8006                           indf2	equ	0xFDF
  8007                           postinc2	equ	0xFDE
  8008                           fsr2h	equ	0xFDA
  8009                           fsr2l	equ	0xFD9
  8010                           status	equ	0xFD8
  8011                           
  8012 ;; *************** function _calcula *****************
  8013 ;; Defined at:
  8014 ;;		line 298 in file "color_3.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;		None
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  temp            4   54[BANK0 ] float 
  8019 ;;  freq            4   50[BANK0 ] float 
  8020 ;;  elapsedTime     4   46[BANK0 ] unsigned long 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  4   38[BANK0 ] float 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8030 ;;      Params:         0       4       0       0       0       0       0
  8031 ;;      Locals:         0      12       0       0       0       0       0
  8032 ;;      Temps:          0       4       0       0       0       0       0
  8033 ;;      Totals:         0      20       0       0       0       0       0
  8034 ;;Total ram usage:       20 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    3
  8037 ;; This function calls:
  8038 ;;		___fldiv
  8039 ;;		___flmul
  8040 ;;		___xxtofl
  8041 ;;		_prepareForInterrupts
  8042 ;; This function is called by:
  8043 ;;		_main
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text29
  8048  002C8E                     __ptext29:
  8049                           	opt stack 0
  8050  002C8E                     _calcula:
  8051                           	opt stack 27
  8052                           
  8053                           ;color_3.c: 300: float freq = 0.0;
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;incstack = 0
  8057  002C8E  0E00               	movlw	0
  8058  002C90  0100               	movlb	0	; () banked
  8059  002C92  6FB2               	movwf	calcula@freq& (0+255),b
  8060  002C94  0E00               	movlw	0
  8061  002C96  6FB3               	movwf	(calcula@freq+1)& (0+255),b
  8062  002C98  0E00               	movlw	0
  8063  002C9A  6FB4               	movwf	(calcula@freq+2)& (0+255),b
  8064  002C9C  0E00               	movlw	0
  8065  002C9E  6FB5               	movwf	(calcula@freq+3)& (0+255),b
  8066                           
  8067                           ;color_3.c: 301: float temp = 0.0;
  8068  002CA0  0E00               	movlw	0
  8069  002CA2  6FB6               	movwf	calcula@temp& (0+255),b
  8070  002CA4  0E00               	movlw	0
  8071  002CA6  6FB7               	movwf	(calcula@temp+1)& (0+255),b
  8072  002CA8  0E00               	movlw	0
  8073  002CAA  6FB8               	movwf	(calcula@temp+2)& (0+255),b
  8074  002CAC  0E00               	movlw	0
  8075  002CAE  6FB9               	movwf	(calcula@temp+3)& (0+255),b
  8076                           
  8077                           ;color_3.c: 302: if (!triggered)
  8078  002CB0  504E               	movf	_triggered,w,c	;volatile
  8079  002CB2  B4D8               	btfsc	status,2,c
  8080  002CB4  0012               	return	
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;color_3.c: 307: }
  8084                           ;color_3.c: 309: unsigned long elapsedTime = finishTime - startTime;
  8085                           
  8086                           ; BSR set to: 0
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;color_3.c: 303: {
  8090                           ;color_3.c: 306: return;
  8091  002CB6  C0E8  F0AA         	movff	_startTime,??_calcula	;volatile
  8092  002CBA  C0E9  F0AB         	movff	_startTime+1,??_calcula+1	;volatile
  8093  002CBE  C0EA  F0AC         	movff	_startTime+2,??_calcula+2	;volatile
  8094  002CC2  C0EB  F0AD         	movff	_startTime+3,??_calcula+3	;volatile
  8095  002CC6  1FAA               	comf	??_calcula& (0+255),f,b
  8096  002CC8  1FAB               	comf	(??_calcula+1)& (0+255),f,b
  8097  002CCA  1FAC               	comf	(??_calcula+2)& (0+255),f,b
  8098  002CCC  1FAD               	comf	(??_calcula+3)& (0+255),f,b
  8099  002CCE  2BAA               	incf	??_calcula& (0+255),f,b
  8100  002CD0  0E00               	movlw	0
  8101  002CD2  23AB               	addwfc	(??_calcula+1)& (0+255),f,b
  8102  002CD4  23AC               	addwfc	(??_calcula+2)& (0+255),f,b
  8103  002CD6  23AD               	addwfc	(??_calcula+3)& (0+255),f,b
  8104  002CD8  51E4               	movf	_finishTime& (0+255),w,b	;volatile
  8105  002CDA  25AA               	addwf	??_calcula& (0+255),w,b
  8106  002CDC  6FAE               	movwf	calcula@elapsedTime& (0+255),b
  8107  002CDE  51E5               	movf	(_finishTime+1)& (0+255),w,b	;volatile
  8108  002CE0  21AB               	addwfc	(??_calcula+1)& (0+255),w,b
  8109  002CE2  6FAF               	movwf	(calcula@elapsedTime+1)& (0+255),b
  8110  002CE4  51E6               	movf	(_finishTime+2)& (0+255),w,b	;volatile
  8111  002CE6  21AC               	addwfc	(??_calcula+2)& (0+255),w,b
  8112  002CE8  6FB0               	movwf	(calcula@elapsedTime+2)& (0+255),b
  8113  002CEA  51E7               	movf	(_finishTime+3)& (0+255),w,b	;volatile
  8114  002CEC  21AD               	addwfc	(??_calcula+3)& (0+255),w,b
  8115  002CEE  6FB1               	movwf	(calcula@elapsedTime+3)& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;color_3.c: 311: temp = (float) (elapsedTime);
  8119  002CF0  C0AE  F02E         	movff	calcula@elapsedTime,___xxtofl@val
  8120  002CF4  C0AF  F02F         	movff	calcula@elapsedTime+1,___xxtofl@val+1
  8121  002CF8  C0B0  F030         	movff	calcula@elapsedTime+2,___xxtofl@val+2
  8122  002CFC  C0B1  F031         	movff	calcula@elapsedTime+3,___xxtofl@val+3
  8123  002D00  0E00               	movlw	0
  8124  002D02  EC4F  F013         	call	___xxtofl
  8125  002D06  C02E  F0B6         	movff	?___xxtofl,calcula@temp
  8126  002D0A  C02F  F0B7         	movff	?___xxtofl+1,calcula@temp+1
  8127  002D0E  C030  F0B8         	movff	?___xxtofl+2,calcula@temp+2
  8128  002D12  C031  F0B9         	movff	?___xxtofl+3,calcula@temp+3
  8129                           
  8130                           ;color_3.c: 312: temp *= 250e-9;
  8131  002D16  C0B6  F03C         	movff	calcula@temp,___flmul@b
  8132  002D1A  C0B7  F03D         	movff	calcula@temp+1,___flmul@b+1
  8133  002D1E  C0B8  F03E         	movff	calcula@temp+2,___flmul@b+2
  8134  002D22  C0B9  F03F         	movff	calcula@temp+3,___flmul@b+3
  8135  002D26  0EBD               	movlw	189
  8136  002D28  6E40               	movwf	___flmul@a,c
  8137  002D2A  0E37               	movlw	55
  8138  002D2C  6E41               	movwf	___flmul@a+1,c
  8139  002D2E  0E86               	movlw	134
  8140  002D30  6E42               	movwf	___flmul@a+2,c
  8141  002D32  0E34               	movlw	52
  8142  002D34  6E43               	movwf	___flmul@a+3,c
  8143  002D36  EC63  F00D         	call	___flmul	;wreg free
  8144  002D3A  C03C  F0B6         	movff	?___flmul,calcula@temp
  8145  002D3E  C03D  F0B7         	movff	?___flmul+1,calcula@temp+1
  8146  002D42  C03E  F0B8         	movff	?___flmul+2,calcula@temp+2
  8147  002D46  C03F  F0B9         	movff	?___flmul+3,calcula@temp+3
  8148                           
  8149                           ;color_3.c: 313: freq = 1.0/(temp);
  8150  002D4A  0E00               	movlw	0
  8151  002D4C  0100               	movlb	0	; () banked
  8152  002D4E  6F8D               	movwf	___fldiv@b& (0+255),b
  8153  002D50  0E00               	movlw	0
  8154  002D52  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  8155  002D54  0E80               	movlw	128
  8156  002D56  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  8157  002D58  0E3F               	movlw	63
  8158  002D5A  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  8159  002D5C  C0B6  F091         	movff	calcula@temp,___fldiv@a
  8160  002D60  C0B7  F092         	movff	calcula@temp+1,___fldiv@a+1
  8161  002D64  C0B8  F093         	movff	calcula@temp+2,___fldiv@a+2
  8162  002D68  C0B9  F094         	movff	calcula@temp+3,___fldiv@a+3
  8163  002D6C  ECAB  F010         	call	___fldiv	;wreg free
  8164  002D70  C08D  F0B2         	movff	?___fldiv,calcula@freq
  8165  002D74  C08E  F0B3         	movff	?___fldiv+1,calcula@freq+1
  8166  002D78  C08F  F0B4         	movff	?___fldiv+2,calcula@freq+2
  8167  002D7C  C090  F0B5         	movff	?___fldiv+3,calcula@freq+3
  8168                           
  8169                           ;color_3.c: 314: prepareForInterrupts ();
  8170  002D80  EC73  F01A         	call	_prepareForInterrupts	;wreg free
  8171                           
  8172                           ;color_3.c: 315: return freq;
  8173  002D84  C0B2  F0A6         	movff	calcula@freq,?_calcula
  8174  002D88  C0B3  F0A7         	movff	calcula@freq+1,?_calcula+1
  8175  002D8C  C0B4  F0A8         	movff	calcula@freq+2,?_calcula+2
  8176  002D90  C0B5  F0A9         	movff	calcula@freq+3,?_calcula+3
  8177  002D94  0012               	return	
  8178  002D96                     __end_of_calcula:
  8179                           	opt stack 0
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           intcon	equ	0xFF2
  8187                           indf0	equ	0xFEF
  8188                           postinc0	equ	0xFEE
  8189                           fsr0h	equ	0xFEA
  8190                           fsr0l	equ	0xFE9
  8191                           wreg	equ	0xFE8
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           fsr2h	equ	0xFDA
  8195                           fsr2l	equ	0xFD9
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _prepareForInterrupts *****************
  8199 ;; Defined at:
  8200 ;;		line 318 in file "color_3.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;		None
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8214 ;;      Params:         0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0       0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0
  8217 ;;      Totals:         0       0       0       0       0       0       0
  8218 ;;Total ram usage:        0 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    2
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_main
  8225 ;;		_calcula
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           	psect	text30
  8230  0034E6                     __ptext30:
  8231                           	opt stack 0
  8232  0034E6                     _prepareForInterrupts:
  8233                           	opt stack 28
  8234                           
  8235                           ;color_3.c: 322: first = true;
  8236                           
  8237                           ;color_3.c: 321: INT0IF == 0;
  8238                           
  8239                           ;incstack = 0
  8240  0034E6  0E01               	movlw	1
  8241  0034E8  6E4F               	movwf	_first,c	;volatile
  8242                           
  8243                           ;color_3.c: 323: triggered = false;
  8244  0034EA  0E00               	movlw	0
  8245  0034EC  6E4E               	movwf	_triggered,c	;volatile
  8246                           
  8247                           ;color_3.c: 328: INT0IE = 1;
  8248  0034EE  88F2               	bsf	intcon,4,c	;volatile
  8249                           
  8250                           ;color_3.c: 329: INTEDG0 = 1;
  8251  0034F0  8CF1               	bsf	intcon2,6,c	;volatile
  8252  0034F2  0012               	return		;funcret
  8253  0034F4                     __end_of_prepareForInterrupts:
  8254                           	opt stack 0
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           intcon2	equ	0xFF1
  8263                           indf0	equ	0xFEF
  8264                           postinc0	equ	0xFEE
  8265                           fsr0h	equ	0xFEA
  8266                           fsr0l	equ	0xFE9
  8267                           wreg	equ	0xFE8
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function ___xxtofl *****************
  8275 ;; Defined at:
  8276 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/xxtofl.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  sign            1    wreg     unsigned char 
  8279 ;;  val             4   45[COMRAM] long 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  sign            1   53[COMRAM] unsigned char 
  8282 ;;  arg             4   55[COMRAM] unsigned long 
  8283 ;;  exp             1   54[COMRAM] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  4   45[COMRAM] unsigned char 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8293 ;;      Params:         4       0       0       0       0       0       0
  8294 ;;      Locals:         6       0       0       0       0       0       0
  8295 ;;      Temps:          4       0       0       0       0       0       0
  8296 ;;      Totals:        14       0       0       0       0       0       0
  8297 ;;Total ram usage:       14 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    2
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_calcula
  8304 ;;		_sprintf
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           	psect	text31
  8309  00269E                     __ptext31:
  8310                           	opt stack 0
  8311  00269E                     ___xxtofl:
  8312                           	opt stack 27
  8313                           
  8314                           ;incstack = 0
  8315                           ;___xxtofl@sign stored from wreg
  8316  00269E  6E36               	movwf	___xxtofl@sign,c
  8317  0026A0  5036               	movf	___xxtofl@sign,w,c
  8318  0026A2  A4D8               	btfss	status,2,c
  8319  0026A4  AE31               	btfss	___xxtofl@val+3,7,c
  8320  0026A6  D01A               	goto	l897
  8321  0026A8  C02E  F032         	movff	___xxtofl@val,??___xxtofl
  8322  0026AC  C02F  F033         	movff	___xxtofl@val+1,??___xxtofl+1
  8323  0026B0  C030  F034         	movff	___xxtofl@val+2,??___xxtofl+2
  8324  0026B4  C031  F035         	movff	___xxtofl@val+3,??___xxtofl+3
  8325  0026B8  1E32               	comf	??___xxtofl,f,c
  8326  0026BA  1E33               	comf	??___xxtofl+1,f,c
  8327  0026BC  1E34               	comf	??___xxtofl+2,f,c
  8328  0026BE  1E35               	comf	??___xxtofl+3,f,c
  8329  0026C0  2A32               	incf	??___xxtofl,f,c
  8330  0026C2  0E00               	movlw	0
  8331  0026C4  2233               	addwfc	??___xxtofl+1,f,c
  8332  0026C6  2234               	addwfc	??___xxtofl+2,f,c
  8333  0026C8  2235               	addwfc	??___xxtofl+3,f,c
  8334  0026CA  C032  F038         	movff	??___xxtofl,___xxtofl@arg
  8335  0026CE  C033  F039         	movff	??___xxtofl+1,___xxtofl@arg+1
  8336  0026D2  C034  F03A         	movff	??___xxtofl+2,___xxtofl@arg+2
  8337  0026D6  C035  F03B         	movff	??___xxtofl+3,___xxtofl@arg+3
  8338  0026DA  D008               	goto	l898
  8339  0026DC                     l897:
  8340  0026DC  C02E  F038         	movff	___xxtofl@val,___xxtofl@arg
  8341  0026E0  C02F  F039         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8342  0026E4  C030  F03A         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8343  0026E8  C031  F03B         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8344  0026EC                     l898:
  8345  0026EC  502E               	movf	___xxtofl@val,w,c
  8346  0026EE  102F               	iorwf	___xxtofl@val+1,w,c
  8347  0026F0  1030               	iorwf	___xxtofl@val+2,w,c
  8348  0026F2  1031               	iorwf	___xxtofl@val+3,w,c
  8349  0026F4  A4D8               	btfss	status,2,c
  8350  0026F6  D009               	goto	l899
  8351  0026F8  0E00               	movlw	0
  8352  0026FA  6E2E               	movwf	?___xxtofl,c
  8353  0026FC  0E00               	movlw	0
  8354  0026FE  6E2F               	movwf	?___xxtofl+1,c
  8355  002700  0E00               	movlw	0
  8356  002702  6E30               	movwf	?___xxtofl+2,c
  8357  002704  0E00               	movlw	0
  8358  002706  6E31               	movwf	?___xxtofl+3,c
  8359  002708  0012               	return	
  8360  00270A                     l899:
  8361  00270A  0E96               	movlw	150
  8362  00270C  6E37               	movwf	___xxtofl@exp,c
  8363  00270E  D006               	goto	l901
  8364  002710  2A37               	incf	___xxtofl@exp,f,c
  8365  002712  90D8               	bcf	status,0,c
  8366  002714  323B               	rrcf	___xxtofl@arg+3,f,c
  8367  002716  323A               	rrcf	___xxtofl@arg+2,f,c
  8368  002718  3239               	rrcf	___xxtofl@arg+1,f,c
  8369  00271A  3238               	rrcf	___xxtofl@arg,f,c
  8370  00271C                     l901:
  8371  00271C  0E00               	movlw	0
  8372  00271E  1438               	andwf	___xxtofl@arg,w,c
  8373  002720  6E32               	movwf	??___xxtofl& (0+255),c
  8374  002722  0E00               	movlw	0
  8375  002724  1439               	andwf	___xxtofl@arg+1,w,c
  8376  002726  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8377  002728  0E00               	movlw	0
  8378  00272A  143A               	andwf	___xxtofl@arg+2,w,c
  8379  00272C  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8380  00272E  0EFE               	movlw	254
  8381  002730  143B               	andwf	___xxtofl@arg+3,w,c
  8382  002732  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8383  002734  5032               	movf	??___xxtofl,w,c
  8384  002736  1033               	iorwf	??___xxtofl+1,w,c
  8385  002738  1034               	iorwf	??___xxtofl+2,w,c
  8386  00273A  1035               	iorwf	??___xxtofl+3,w,c
  8387  00273C  B4D8               	btfsc	status,2,c
  8388  00273E  D00D               	goto	l904
  8389  002740  D7E7               	goto	l902
  8390  002742  2A37               	incf	___xxtofl@exp,f,c
  8391  002744  0E01               	movlw	1
  8392  002746  2638               	addwf	___xxtofl@arg,f,c
  8393  002748  0E00               	movlw	0
  8394  00274A  2239               	addwfc	___xxtofl@arg+1,f,c
  8395  00274C  223A               	addwfc	___xxtofl@arg+2,f,c
  8396  00274E  223B               	addwfc	___xxtofl@arg+3,f,c
  8397  002750  90D8               	bcf	status,0,c
  8398  002752  323B               	rrcf	___xxtofl@arg+3,f,c
  8399  002754  323A               	rrcf	___xxtofl@arg+2,f,c
  8400  002756  3239               	rrcf	___xxtofl@arg+1,f,c
  8401  002758  3238               	rrcf	___xxtofl@arg,f,c
  8402  00275A                     l904:
  8403  00275A  0E00               	movlw	0
  8404  00275C  1438               	andwf	___xxtofl@arg,w,c
  8405  00275E  6E32               	movwf	??___xxtofl& (0+255),c
  8406  002760  0E00               	movlw	0
  8407  002762  1439               	andwf	___xxtofl@arg+1,w,c
  8408  002764  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8409  002766  0E00               	movlw	0
  8410  002768  143A               	andwf	___xxtofl@arg+2,w,c
  8411  00276A  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8412  00276C  0EFF               	movlw	255
  8413  00276E  143B               	andwf	___xxtofl@arg+3,w,c
  8414  002770  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8415  002772  5032               	movf	??___xxtofl,w,c
  8416  002774  1033               	iorwf	??___xxtofl+1,w,c
  8417  002776  1034               	iorwf	??___xxtofl+2,w,c
  8418  002778  1035               	iorwf	??___xxtofl+3,w,c
  8419  00277A  B4D8               	btfsc	status,2,c
  8420  00277C  D007               	goto	l907
  8421  00277E  D7E1               	goto	l905
  8422  002780  0637               	decf	___xxtofl@exp,f,c
  8423  002782  90D8               	bcf	status,0,c
  8424  002784  3638               	rlcf	___xxtofl@arg,f,c
  8425  002786  3639               	rlcf	___xxtofl@arg+1,f,c
  8426  002788  363A               	rlcf	___xxtofl@arg+2,f,c
  8427  00278A  363B               	rlcf	___xxtofl@arg+3,f,c
  8428  00278C                     l907:
  8429  00278C  BE3A               	btfsc	___xxtofl@arg+2,7,c
  8430  00278E  D003               	goto	u5680
  8431  002790  0E02               	movlw	2
  8432  002792  6037               	cpfslt	___xxtofl@exp,c
  8433  002794  D7F5               	goto	l908
  8434  002796                     u5680:
  8435  002796  B037               	btfsc	___xxtofl@exp,0,c
  8436  002798  D008               	goto	l912
  8437  00279A  0EFF               	movlw	255
  8438  00279C  1638               	andwf	___xxtofl@arg,f,c
  8439  00279E  0EFF               	movlw	255
  8440  0027A0  1639               	andwf	___xxtofl@arg+1,f,c
  8441  0027A2  0E7F               	movlw	127
  8442  0027A4  163A               	andwf	___xxtofl@arg+2,f,c
  8443  0027A6  0EFF               	movlw	255
  8444  0027A8  163B               	andwf	___xxtofl@arg+3,f,c
  8445  0027AA                     l912:
  8446  0027AA  90D8               	bcf	status,0,c
  8447  0027AC  3237               	rrcf	___xxtofl@exp,f,c
  8448  0027AE  C037  F032         	movff	___xxtofl@exp,??___xxtofl
  8449  0027B2  6A33               	clrf	(??___xxtofl+1)& (0+255),c
  8450  0027B4  6A34               	clrf	(??___xxtofl+2)& (0+255),c
  8451  0027B6  6A35               	clrf	(??___xxtofl+3)& (0+255),c
  8452  0027B8  C032  F035         	movff	??___xxtofl,??___xxtofl+3
  8453  0027BC  6A34               	clrf	??___xxtofl+2,c
  8454  0027BE  6A33               	clrf	??___xxtofl+1,c
  8455  0027C0  6A32               	clrf	??___xxtofl,c
  8456  0027C2  5032               	movf	??___xxtofl,w,c
  8457  0027C4  1238               	iorwf	___xxtofl@arg,f,c
  8458  0027C6  5033               	movf	??___xxtofl+1,w,c
  8459  0027C8  1239               	iorwf	___xxtofl@arg+1,f,c
  8460  0027CA  5034               	movf	??___xxtofl+2,w,c
  8461  0027CC  123A               	iorwf	___xxtofl@arg+2,f,c
  8462  0027CE  5035               	movf	??___xxtofl+3,w,c
  8463  0027D0  123B               	iorwf	___xxtofl@arg+3,f,c
  8464  0027D2  5036               	movf	___xxtofl@sign,w,c
  8465  0027D4  A4D8               	btfss	status,2,c
  8466  0027D6  AE31               	btfss	___xxtofl@val+3,7,c
  8467  0027D8  D001               	goto	l913
  8468  0027DA  8E3B               	bsf	___xxtofl@arg+3,7,c
  8469  0027DC                     l913:
  8470  0027DC  C038  F02E         	movff	___xxtofl@arg,?___xxtofl
  8471  0027E0  C039  F02F         	movff	___xxtofl@arg+1,?___xxtofl+1
  8472  0027E4  C03A  F030         	movff	___xxtofl@arg+2,?___xxtofl+2
  8473  0027E8  C03B  F031         	movff	___xxtofl@arg+3,?___xxtofl+3
  8474  0027EC  0012               	return	
  8475  0027EE                     __end_of___xxtofl:
  8476                           	opt stack 0
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           intcon	equ	0xFF2
  8484                           intcon2	equ	0xFF1
  8485                           indf0	equ	0xFEF
  8486                           postinc0	equ	0xFEE
  8487                           fsr0h	equ	0xFEA
  8488                           fsr0l	equ	0xFE9
  8489                           wreg	equ	0xFE8
  8490                           indf2	equ	0xFDF
  8491                           postinc2	equ	0xFDE
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function ___flmul *****************
  8497 ;; Defined at:
  8498 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/sprcmul.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  b               4   59[COMRAM] unsigned char 
  8501 ;;  a               4   63[COMRAM] unsigned char 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  prod            4    7[BANK0 ] struct .
  8504 ;;  grs             4    2[BANK0 ] unsigned long 
  8505 ;;  temp            2   11[BANK0 ] struct .
  8506 ;;  bexp            1    6[BANK0 ] unsigned char 
  8507 ;;  aexp            1    1[BANK0 ] unsigned char 
  8508 ;;  sign            1    0[BANK0 ] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  4   59[COMRAM] unsigned char 
  8511 ;; Registers used:
  8512 ;;		wreg, status,2, status,0, prodl, prodh
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8518 ;;      Params:         8       0       0       0       0       0       0
  8519 ;;      Locals:         0      13       0       0       0       0       0
  8520 ;;      Temps:          4       0       0       0       0       0       0
  8521 ;;      Totals:        12      13       0       0       0       0       0
  8522 ;;Total ram usage:       25 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    2
  8525 ;; This function calls:
  8526 ;;		Nothing
  8527 ;; This function is called by:
  8528 ;;		_calcula
  8529 ;;		_calibra
  8530 ;;		_fround
  8531 ;;		_scale
  8532 ;;		_sprintf
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text32
  8537  001AC6                     __ptext32:
  8538                           	opt stack 0
  8539  001AC6                     ___flmul:
  8540                           	opt stack 26
  8541                           
  8542                           ;incstack = 0
  8543  001AC6  503F               	movf	___flmul@b+3,w,c
  8544  001AC8  0B80               	andlw	128
  8545  001ACA  0100               	movlb	0	; () banked
  8546  001ACC  6F80               	movwf	___flmul@sign& (0+255),b
  8547  001ACE  503F               	movf	___flmul@b+3,w,c
  8548  001AD0  243F               	addwf	___flmul@b+3,w,c
  8549  001AD2  6F86               	movwf	___flmul@bexp& (0+255),b
  8550                           
  8551                           ; BSR set to: 0
  8552  001AD4  BE3E               	btfsc	___flmul@b+2,7,c
  8553                           
  8554                           ; BSR set to: 0
  8555  001AD6  8186               	bsf	___flmul@bexp& (0+255),0,b
  8556                           
  8557                           ; BSR set to: 0
  8558                           
  8559                           ; BSR set to: 0
  8560  001AD8  5186               	movf	___flmul@bexp& (0+255),w,b
  8561  001ADA  B4D8               	btfsc	status,2,c
  8562  001ADC  D00D               	goto	l869
  8563                           
  8564                           ; BSR set to: 0
  8565  001ADE  2986               	incf	___flmul@bexp& (0+255),w,b
  8566  001AE0  A4D8               	btfss	status,2,c
  8567  001AE2  D008               	goto	l870
  8568                           
  8569                           ; BSR set to: 0
  8570  001AE4  0E00               	movlw	0
  8571  001AE6  6E3C               	movwf	___flmul@b,c
  8572  001AE8  0E00               	movlw	0
  8573  001AEA  6E3D               	movwf	___flmul@b+1,c
  8574  001AEC  0E00               	movlw	0
  8575  001AEE  6E3E               	movwf	___flmul@b+2,c
  8576  001AF0  0E00               	movlw	0
  8577  001AF2  6E3F               	movwf	___flmul@b+3,c
  8578  001AF4                     l870:
  8579                           
  8580                           ; BSR set to: 0
  8581                           
  8582                           ; BSR set to: 0
  8583  001AF4  8E3E               	bsf	___flmul@b+2,7,c
  8584  001AF6  D008               	goto	l871
  8585  001AF8                     l869:
  8586                           
  8587                           ; BSR set to: 0
  8588                           
  8589                           ; BSR set to: 0
  8590  001AF8  0E00               	movlw	0
  8591  001AFA  6E3C               	movwf	___flmul@b,c
  8592  001AFC  0E00               	movlw	0
  8593  001AFE  6E3D               	movwf	___flmul@b+1,c
  8594  001B00  0E00               	movlw	0
  8595  001B02  6E3E               	movwf	___flmul@b+2,c
  8596  001B04  0E00               	movlw	0
  8597  001B06  6E3F               	movwf	___flmul@b+3,c
  8598  001B08                     l871:
  8599                           
  8600                           ; BSR set to: 0
  8601                           
  8602                           ; BSR set to: 0
  8603  001B08  5043               	movf	___flmul@a+3,w,c
  8604  001B0A  0B80               	andlw	128
  8605  001B0C  1B80               	xorwf	___flmul@sign& (0+255),f,b
  8606                           
  8607                           ; BSR set to: 0
  8608  001B0E  5043               	movf	___flmul@a+3,w,c
  8609  001B10  2443               	addwf	___flmul@a+3,w,c
  8610  001B12  6F81               	movwf	___flmul@aexp& (0+255),b
  8611                           
  8612                           ; BSR set to: 0
  8613  001B14  BE42               	btfsc	___flmul@a+2,7,c
  8614                           
  8615                           ; BSR set to: 0
  8616  001B16  8181               	bsf	___flmul@aexp& (0+255),0,b
  8617                           
  8618                           ; BSR set to: 0
  8619                           
  8620                           ; BSR set to: 0
  8621  001B18  5181               	movf	___flmul@aexp& (0+255),w,b
  8622  001B1A  B4D8               	btfsc	status,2,c
  8623  001B1C  D00D               	goto	l873
  8624                           
  8625                           ; BSR set to: 0
  8626  001B1E  2981               	incf	___flmul@aexp& (0+255),w,b
  8627  001B20  A4D8               	btfss	status,2,c
  8628  001B22  D008               	goto	l874
  8629                           
  8630                           ; BSR set to: 0
  8631  001B24  0E00               	movlw	0
  8632  001B26  6E40               	movwf	___flmul@a,c
  8633  001B28  0E00               	movlw	0
  8634  001B2A  6E41               	movwf	___flmul@a+1,c
  8635  001B2C  0E00               	movlw	0
  8636  001B2E  6E42               	movwf	___flmul@a+2,c
  8637  001B30  0E00               	movlw	0
  8638  001B32  6E43               	movwf	___flmul@a+3,c
  8639  001B34                     l874:
  8640                           
  8641                           ; BSR set to: 0
  8642                           
  8643                           ; BSR set to: 0
  8644  001B34  8E42               	bsf	___flmul@a+2,7,c
  8645  001B36  D008               	goto	l875
  8646  001B38                     l873:
  8647                           
  8648                           ; BSR set to: 0
  8649                           
  8650                           ; BSR set to: 0
  8651  001B38  0E00               	movlw	0
  8652  001B3A  6E40               	movwf	___flmul@a,c
  8653  001B3C  0E00               	movlw	0
  8654  001B3E  6E41               	movwf	___flmul@a+1,c
  8655  001B40  0E00               	movlw	0
  8656  001B42  6E42               	movwf	___flmul@a+2,c
  8657  001B44  0E00               	movlw	0
  8658  001B46  6E43               	movwf	___flmul@a+3,c
  8659  001B48                     l875:
  8660                           
  8661                           ; BSR set to: 0
  8662  001B48  5181               	movf	___flmul@aexp& (0+255),w,b
  8663  001B4A  B4D8               	btfsc	status,2,c
  8664  001B4C  D003               	goto	u4710
  8665                           
  8666                           ; BSR set to: 0
  8667  001B4E  5186               	movf	___flmul@bexp& (0+255),w,b
  8668  001B50  A4D8               	btfss	status,2,c
  8669  001B52  D009               	goto	l876
  8670  001B54                     u4710:
  8671                           
  8672                           ; BSR set to: 0
  8673                           
  8674                           ; BSR set to: 0
  8675  001B54  0E00               	movlw	0
  8676  001B56  6E3C               	movwf	?___flmul,c
  8677  001B58  0E00               	movlw	0
  8678  001B5A  6E3D               	movwf	?___flmul+1,c
  8679  001B5C  0E00               	movlw	0
  8680  001B5E  6E3E               	movwf	?___flmul+2,c
  8681  001B60  0E00               	movlw	0
  8682  001B62  6E3F               	movwf	?___flmul+3,c
  8683                           
  8684                           ; BSR set to: 0
  8685  001B64  0012               	return	
  8686  001B66                     l876:
  8687                           
  8688                           ; BSR set to: 0
  8689                           
  8690                           ; BSR set to: 0
  8691  001B66  5042               	movf	___flmul@a+2,w,c
  8692  001B68  023C               	mulwf	___flmul@b,c
  8693  001B6A  CFF3 F08B          	movff	prodl,___flmul@temp
  8694  001B6E  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8695                           
  8696                           ; BSR set to: 0
  8697  001B72  518B               	movf	___flmul@temp& (0+255),w,b
  8698  001B74  6F82               	movwf	___flmul@grs& (0+255),b
  8699  001B76  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  8700  001B78  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  8701  001B7A  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  8702                           
  8703                           ; BSR set to: 0
  8704  001B7C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8705  001B7E  6F87               	movwf	___flmul@prod& (0+255),b
  8706  001B80  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  8707  001B82  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  8708  001B84  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  8709  001B86  5041               	movf	___flmul@a+1,w,c
  8710  001B88  023D               	mulwf	___flmul@b+1,c
  8711  001B8A  CFF3 F08B          	movff	prodl,___flmul@temp
  8712  001B8E  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8713                           
  8714                           ; BSR set to: 0
  8715  001B92  518B               	movf	___flmul@temp& (0+255),w,b
  8716  001B94  2782               	addwf	___flmul@grs& (0+255),f,b
  8717  001B96  0E00               	movlw	0
  8718  001B98  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8719  001B9A  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8720  001B9C  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8721                           
  8722                           ; BSR set to: 0
  8723  001B9E  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8724  001BA0  2787               	addwf	___flmul@prod& (0+255),f,b
  8725  001BA2  0E00               	movlw	0
  8726  001BA4  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8727  001BA6  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8728  001BA8  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8729  001BAA  5040               	movf	___flmul@a,w,c
  8730  001BAC  023E               	mulwf	___flmul@b+2,c
  8731  001BAE  CFF3 F08B          	movff	prodl,___flmul@temp
  8732  001BB2  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8733                           
  8734                           ; BSR set to: 0
  8735  001BB6  518B               	movf	___flmul@temp& (0+255),w,b
  8736  001BB8  2782               	addwf	___flmul@grs& (0+255),f,b
  8737  001BBA  0E00               	movlw	0
  8738  001BBC  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8739  001BBE  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8740  001BC0  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8741                           
  8742                           ; BSR set to: 0
  8743  001BC2  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8744  001BC4  2787               	addwf	___flmul@prod& (0+255),f,b
  8745  001BC6  0E00               	movlw	0
  8746  001BC8  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8747  001BCA  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8748  001BCC  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8749                           
  8750                           ; BSR set to: 0
  8751  001BCE  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8752  001BD2  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8753  001BD6  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8754  001BDA  6B82               	clrf	___flmul@grs& (0+255),b
  8755                           
  8756                           ; BSR set to: 0
  8757  001BDC  5040               	movf	___flmul@a,w,c
  8758  001BDE  023D               	mulwf	___flmul@b+1,c
  8759  001BE0  CFF3 F08B          	movff	prodl,___flmul@temp
  8760  001BE4  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8761                           
  8762                           ; BSR set to: 0
  8763  001BE8  518B               	movf	___flmul@temp& (0+255),w,b
  8764  001BEA  2782               	addwf	___flmul@grs& (0+255),f,b
  8765  001BEC  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8766  001BEE  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8767  001BF0  0E00               	movlw	0
  8768  001BF2  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8769  001BF4  0E00               	movlw	0
  8770  001BF6  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8771                           
  8772                           ; BSR set to: 0
  8773  001BF8  5041               	movf	___flmul@a+1,w,c
  8774  001BFA  023C               	mulwf	___flmul@b,c
  8775  001BFC  CFF3 F08B          	movff	prodl,___flmul@temp
  8776  001C00  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8777                           
  8778                           ; BSR set to: 0
  8779  001C04  518B               	movf	___flmul@temp& (0+255),w,b
  8780  001C06  2782               	addwf	___flmul@grs& (0+255),f,b
  8781  001C08  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8782  001C0A  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8783  001C0C  0E00               	movlw	0
  8784  001C0E  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8785  001C10  0E00               	movlw	0
  8786  001C12  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8787                           
  8788                           ; BSR set to: 0
  8789  001C14  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8790  001C18  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8791  001C1C  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8792  001C20  6B82               	clrf	___flmul@grs& (0+255),b
  8793  001C22  5040               	movf	___flmul@a,w,c
  8794  001C24  023C               	mulwf	___flmul@b,c
  8795  001C26  CFF3 F08B          	movff	prodl,___flmul@temp
  8796  001C2A  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8797                           
  8798                           ; BSR set to: 0
  8799  001C2E  518B               	movf	___flmul@temp& (0+255),w,b
  8800  001C30  2782               	addwf	___flmul@grs& (0+255),f,b
  8801  001C32  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8802  001C34  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8803  001C36  0E00               	movlw	0
  8804  001C38  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8805  001C3A  0E00               	movlw	0
  8806  001C3C  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8807                           
  8808                           ; BSR set to: 0
  8809  001C3E  5042               	movf	___flmul@a+2,w,c
  8810  001C40  023D               	mulwf	___flmul@b+1,c
  8811  001C42  CFF3 F08B          	movff	prodl,___flmul@temp
  8812  001C46  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8813  001C4A  518B               	movf	___flmul@temp& (0+255),w,b
  8814  001C4C  2787               	addwf	___flmul@prod& (0+255),f,b
  8815  001C4E  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8816  001C50  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8817  001C52  0E00               	movlw	0
  8818  001C54  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8819  001C56  0E00               	movlw	0
  8820  001C58  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8821                           
  8822                           ; BSR set to: 0
  8823  001C5A  5041               	movf	___flmul@a+1,w,c
  8824  001C5C  023E               	mulwf	___flmul@b+2,c
  8825  001C5E  CFF3 F08B          	movff	prodl,___flmul@temp
  8826  001C62  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8827                           
  8828                           ; BSR set to: 0
  8829  001C66  518B               	movf	___flmul@temp& (0+255),w,b
  8830  001C68  2787               	addwf	___flmul@prod& (0+255),f,b
  8831  001C6A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8832  001C6C  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8833  001C6E  0E00               	movlw	0
  8834  001C70  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8835  001C72  0E00               	movlw	0
  8836  001C74  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8837  001C76  5042               	movf	___flmul@a+2,w,c
  8838  001C78  023E               	mulwf	___flmul@b+2,c
  8839  001C7A  CFF3 F08B          	movff	prodl,___flmul@temp
  8840  001C7E  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8841                           
  8842                           ; BSR set to: 0
  8843  001C82  518B               	movf	___flmul@temp& (0+255),w,b
  8844  001C84  6E44               	movwf	??___flmul& (0+255),c
  8845  001C86  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8846  001C88  6E45               	movwf	(??___flmul+1)& (0+255),c
  8847  001C8A  6A46               	clrf	(??___flmul+2)& (0+255),c
  8848  001C8C  6A47               	clrf	(??___flmul+3)& (0+255),c
  8849  001C8E  C046  F047         	movff	??___flmul+2,??___flmul+3
  8850  001C92  C045  F046         	movff	??___flmul+1,??___flmul+2
  8851  001C96  C044  F045         	movff	??___flmul,??___flmul+1
  8852  001C9A  6A44               	clrf	??___flmul,c
  8853  001C9C  5044               	movf	??___flmul,w,c
  8854  001C9E  2787               	addwf	___flmul@prod& (0+255),f,b
  8855  001CA0  5045               	movf	??___flmul+1,w,c
  8856  001CA2  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8857  001CA4  5046               	movf	??___flmul+2,w,c
  8858  001CA6  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8859  001CA8  5047               	movf	??___flmul+3,w,c
  8860  001CAA  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8861                           
  8862                           ; BSR set to: 0
  8863  001CAC  C082  F044         	movff	___flmul@grs,??___flmul
  8864  001CB0  C083  F045         	movff	___flmul@grs+1,??___flmul+1
  8865  001CB4  C084  F046         	movff	___flmul@grs+2,??___flmul+2
  8866  001CB8  C085  F047         	movff	___flmul@grs+3,??___flmul+3
  8867  001CBC  0E19               	movlw	25
  8868  001CBE  D005               	goto	u4720
  8869  001CC0                     u4725:
  8870  001CC0  90D8               	bcf	status,0,c
  8871  001CC2  3247               	rrcf	??___flmul+3,f,c
  8872  001CC4  3246               	rrcf	??___flmul+2,f,c
  8873  001CC6  3245               	rrcf	??___flmul+1,f,c
  8874  001CC8  3244               	rrcf	??___flmul,f,c
  8875  001CCA                     u4720:
  8876  001CCA  2EE8               	decfsz	wreg,f,c
  8877  001CCC  D7F9               	goto	u4725
  8878  001CCE  5044               	movf	??___flmul,w,c
  8879  001CD0  2787               	addwf	___flmul@prod& (0+255),f,b
  8880  001CD2  5045               	movf	??___flmul+1,w,c
  8881  001CD4  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8882  001CD6  5046               	movf	??___flmul+2,w,c
  8883  001CD8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8884  001CDA  5047               	movf	??___flmul+3,w,c
  8885  001CDC  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8886                           
  8887                           ; BSR set to: 0
  8888  001CDE  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8889  001CE2  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8890  001CE6  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8891  001CEA  6B82               	clrf	___flmul@grs& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894  001CEC  5181               	movf	___flmul@aexp& (0+255),w,b
  8895  001CEE  C086  F044         	movff	___flmul@bexp,??___flmul
  8896  001CF2  6A45               	clrf	(??___flmul+1)& (0+255),c
  8897  001CF4  2644               	addwf	??___flmul,f,c
  8898  001CF6  0E00               	movlw	0
  8899  001CF8  2245               	addwfc	??___flmul+1,f,c
  8900  001CFA  0E82               	movlw	130
  8901  001CFC  2444               	addwf	??___flmul,w,c
  8902  001CFE  6F8B               	movwf	___flmul@temp& (0+255),b
  8903  001D00  0EFF               	movlw	255
  8904  001D02  2045               	addwfc	??___flmul+1,w,c
  8905  001D04  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  8906  001D06  D00F               	goto	l880
  8907  001D08                     
  8908                           ; BSR set to: 0
  8909                           
  8910                           ; BSR set to: 0
  8911  001D08  90D8               	bcf	status,0,c
  8912  001D0A  3787               	rlcf	___flmul@prod& (0+255),f,b
  8913  001D0C  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  8914  001D0E  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  8915  001D10  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  8916                           
  8917                           ; BSR set to: 0
  8918  001D12  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  8919                           
  8920                           ; BSR set to: 0
  8921  001D14  8187               	bsf	___flmul@prod& (0+255),0,b
  8922                           
  8923                           ; BSR set to: 0
  8924  001D16  90D8               	bcf	status,0,c
  8925  001D18  3782               	rlcf	___flmul@grs& (0+255),f,b
  8926  001D1A  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  8927  001D1C  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  8928  001D1E  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  8929  001D20  078B               	decf	___flmul@temp& (0+255),f,b
  8930  001D22  A0D8               	btfss	status,0,c
  8931  001D24  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  8932  001D26                     l880:
  8933                           
  8934                           ; BSR set to: 0
  8935                           
  8936                           ; BSR set to: 0
  8937  001D26  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  8938  001D28  D7EF               	goto	l881
  8939                           
  8940                           ; BSR set to: 0
  8941                           
  8942                           ; BSR set to: 0
  8943  001D2A  0E00               	movlw	0
  8944  001D2C  6F81               	movwf	___flmul@aexp& (0+255),b
  8945                           
  8946                           ; BSR set to: 0
  8947  001D2E  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  8948  001D30  D016               	goto	l887
  8949                           
  8950                           ; BSR set to: 0
  8951  001D32  0EFF               	movlw	255
  8952  001D34  1582               	andwf	___flmul@grs& (0+255),w,b
  8953  001D36  6E44               	movwf	??___flmul& (0+255),c
  8954  001D38  0EFF               	movlw	255
  8955  001D3A  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  8956  001D3C  6E45               	movwf	(??___flmul+1)& (0+255),c
  8957  001D3E  0EFF               	movlw	255
  8958  001D40  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  8959  001D42  6E46               	movwf	(??___flmul+2)& (0+255),c
  8960  001D44  0E7F               	movlw	127
  8961  001D46  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  8962  001D48  6E47               	movwf	(??___flmul+3)& (0+255),c
  8963  001D4A  5044               	movf	??___flmul,w,c
  8964  001D4C  1045               	iorwf	??___flmul+1,w,c
  8965  001D4E  1046               	iorwf	??___flmul+2,w,c
  8966  001D50  1047               	iorwf	??___flmul+3,w,c
  8967  001D52  A4D8               	btfss	status,2,c
  8968  001D54  D002               	goto	u4770
  8969                           
  8970                           ; BSR set to: 0
  8971                           
  8972                           ; BSR set to: 0
  8973  001D56  A187               	btfss	___flmul@prod& (0+255),0,b
  8974  001D58  D002               	goto	l887
  8975  001D5A                     u4770:
  8976                           
  8977                           ; BSR set to: 0
  8978  001D5A  0E01               	movlw	1
  8979  001D5C  6F81               	movwf	___flmul@aexp& (0+255),b
  8980  001D5E                     l887:
  8981                           
  8982                           ; BSR set to: 0
  8983                           
  8984                           ; BSR set to: 0
  8985                           
  8986                           ; BSR set to: 0
  8987  001D5E  5181               	movf	___flmul@aexp& (0+255),w,b
  8988  001D60  B4D8               	btfsc	status,2,c
  8989  001D62  D01F               	goto	l889
  8990                           
  8991                           ; BSR set to: 0
  8992  001D64  0E01               	movlw	1
  8993  001D66  2787               	addwf	___flmul@prod& (0+255),f,b
  8994  001D68  0E00               	movlw	0
  8995  001D6A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8996  001D6C  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8997  001D6E  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8998                           
  8999                           ; BSR set to: 0
  9000  001D70  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  9001  001D72  D017               	goto	l889
  9002                           
  9003                           ; BSR set to: 0
  9004  001D74  C087  F044         	movff	___flmul@prod,??___flmul
  9005  001D78  C088  F045         	movff	___flmul@prod+1,??___flmul+1
  9006  001D7C  C089  F046         	movff	___flmul@prod+2,??___flmul+2
  9007  001D80  C08A  F047         	movff	___flmul@prod+3,??___flmul+3
  9008  001D84  3447               	rlcf	??___flmul+3,w,c
  9009  001D86  3247               	rrcf	??___flmul+3,f,c
  9010  001D88  3246               	rrcf	??___flmul+2,f,c
  9011  001D8A  3245               	rrcf	??___flmul+1,f,c
  9012  001D8C  3244               	rrcf	??___flmul,f,c
  9013  001D8E  C044  F087         	movff	??___flmul,___flmul@prod
  9014  001D92  C045  F088         	movff	??___flmul+1,___flmul@prod+1
  9015  001D96  C046  F089         	movff	??___flmul+2,___flmul@prod+2
  9016  001D9A  C047  F08A         	movff	??___flmul+3,___flmul@prod+3
  9017                           
  9018                           ; BSR set to: 0
  9019  001D9E  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  9020  001DA0  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  9021  001DA2                     l889:
  9022                           
  9023                           ; BSR set to: 0
  9024                           
  9025                           ; BSR set to: 0
  9026                           
  9027                           ; BSR set to: 0
  9028  001DA2  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9029  001DA4  D00D               	goto	l890
  9030  001DA6  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9031  001DA8  E103               	bnz	u4800
  9032  001DAA  298B               	incf	___flmul@temp& (0+255),w,b
  9033  001DAC  A0D8               	btfss	status,0,c
  9034  001DAE  D008               	goto	l890
  9035  001DB0                     u4800:
  9036                           
  9037                           ; BSR set to: 0
  9038  001DB0  0E00               	movlw	0
  9039  001DB2  6F87               	movwf	___flmul@prod& (0+255),b
  9040  001DB4  0E00               	movlw	0
  9041  001DB6  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9042  001DB8  0E80               	movlw	128
  9043  001DBA  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9044  001DBC  0E7F               	movlw	127
  9045  001DBE  D020               	goto	L8
  9046  001DC0                     l890:
  9047                           
  9048                           ; BSR set to: 0
  9049                           
  9050                           ; BSR set to: 0
  9051  001DC0  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9052  001DC2  D005               	goto	u4810
  9053  001DC4  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9054  001DC6  E10E               	bnz	l892
  9055  001DC8  058B               	decf	___flmul@temp& (0+255),w,b
  9056  001DCA  B0D8               	btfsc	status,0,c
  9057  001DCC  D00B               	goto	l892
  9058  001DCE                     u4810:
  9059                           
  9060                           ; BSR set to: 0
  9061  001DCE  0E00               	movlw	0
  9062  001DD0  6F87               	movwf	___flmul@prod& (0+255),b
  9063  001DD2  0E00               	movlw	0
  9064  001DD4  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9065  001DD6  0E00               	movlw	0
  9066  001DD8  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9067  001DDA  0E00               	movlw	0
  9068  001DDC  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9069  001DDE  0E00               	movlw	0
  9070  001DE0  6F80               	movwf	___flmul@sign& (0+255),b
  9071  001DE2  D00F               	goto	l893
  9072  001DE4                     l892:
  9073                           
  9074                           ; BSR set to: 0
  9075  001DE4  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  9076                           
  9077                           ; BSR set to: 0
  9078  001DE8  0EFF               	movlw	255
  9079  001DEA  1787               	andwf	___flmul@prod& (0+255),f,b
  9080  001DEC  0EFF               	movlw	255
  9081  001DEE  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  9082  001DF0  0E7F               	movlw	127
  9083  001DF2  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  9084  001DF4  0E00               	movlw	0
  9085  001DF6  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  9086                           
  9087                           ; BSR set to: 0
  9088  001DF8  B186               	btfsc	___flmul@bexp& (0+255),0,b
  9089                           
  9090                           ; BSR set to: 0
  9091  001DFA  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  9092                           
  9093                           ; BSR set to: 0
  9094                           
  9095                           ; BSR set to: 0
  9096  001DFC  90D8               	bcf	status,0,c
  9097  001DFE  3186               	rrcf	___flmul@bexp& (0+255),w,b
  9098  001E00                     L8:
  9099  001E00  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9100  001E02                     l893:
  9101                           
  9102                           ; BSR set to: 0
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107  001E02  5180               	movf	___flmul@sign& (0+255),w,b
  9108  001E04  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  9109                           
  9110                           ; BSR set to: 0
  9111  001E06  C087  F03C         	movff	___flmul@prod,?___flmul
  9112  001E0A  C088  F03D         	movff	___flmul@prod+1,?___flmul+1
  9113  001E0E  C089  F03E         	movff	___flmul@prod+2,?___flmul+2
  9114  001E12  C08A  F03F         	movff	___flmul@prod+3,?___flmul+3
  9115  001E16  0012               	return	
  9116  001E18                     __end_of___flmul:
  9117                           	opt stack 0
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           intcon	equ	0xFF2
  9125                           intcon2	equ	0xFF1
  9126                           indf0	equ	0xFEF
  9127                           postinc0	equ	0xFEE
  9128                           fsr0h	equ	0xFEA
  9129                           fsr0l	equ	0xFE9
  9130                           wreg	equ	0xFE8
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function ___fldiv *****************
  9138 ;; Defined at:
  9139 ;;		line 11 in file "/opt/microchip/xc8/v1.45/sources/common/sprcdiv.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  b               4   13[BANK0 ] unsigned char 
  9142 ;;  a               4   17[BANK0 ] unsigned char 
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;  grs             4   32[BANK0 ] unsigned long 
  9145 ;;  rem             4   26[BANK0 ] unsigned long 
  9146 ;;  new_exp         2   30[BANK0 ] int 
  9147 ;;  aexp            1   37[BANK0 ] unsigned char 
  9148 ;;  bexp            1   36[BANK0 ] unsigned char 
  9149 ;;  sign            1   25[BANK0 ] unsigned char 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  4   13[BANK0 ] unsigned char 
  9152 ;; Registers used:
  9153 ;;		wreg, status,2, status,0
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9159 ;;      Params:         0       8       0       0       0       0       0
  9160 ;;      Locals:         0      13       0       0       0       0       0
  9161 ;;      Temps:          0       4       0       0       0       0       0
  9162 ;;      Totals:         0      25       0       0       0       0       0
  9163 ;;Total ram usage:       25 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    2
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_main
  9170 ;;		_calcula
  9171 ;;		_calibra
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text33
  9176  002156                     __ptext33:
  9177                           	opt stack 0
  9178  002156                     ___fldiv:
  9179                           	opt stack 27
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;incstack = 0
  9183  002156  0100               	movlb	0	; () banked
  9184  002158  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9185  00215A  0B80               	andlw	128
  9186  00215C  6F99               	movwf	___fldiv@sign& (0+255),b
  9187  00215E  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9188  002160  2590               	addwf	(___fldiv@b+3)& (0+255),w,b
  9189  002162  6FA4               	movwf	___fldiv@bexp& (0+255),b
  9190                           
  9191                           ; BSR set to: 0
  9192  002164  BF8F               	btfsc	(___fldiv@b+2)& (0+255),7,b
  9193                           
  9194                           ; BSR set to: 0
  9195  002166  81A4               	bsf	___fldiv@bexp& (0+255),0,b
  9196                           
  9197                           ; BSR set to: 0
  9198                           
  9199                           ; BSR set to: 0
  9200  002168  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9201  00216A  B4D8               	btfsc	status,2,c
  9202  00216C  D00D               	goto	l835
  9203                           
  9204                           ; BSR set to: 0
  9205  00216E  29A4               	incf	___fldiv@bexp& (0+255),w,b
  9206  002170  A4D8               	btfss	status,2,c
  9207  002172  D008               	goto	l836
  9208                           
  9209                           ; BSR set to: 0
  9210  002174  0E00               	movlw	0
  9211  002176  6F8D               	movwf	___fldiv@b& (0+255),b
  9212  002178  0E00               	movlw	0
  9213  00217A  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9214  00217C  0E00               	movlw	0
  9215  00217E  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9216  002180  0E00               	movlw	0
  9217  002182  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9218  002184                     l836:
  9219                           
  9220                           ; BSR set to: 0
  9221                           
  9222                           ; BSR set to: 0
  9223  002184  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9224  002186  D006               	goto	L9
  9225  002188                     l835:
  9226                           
  9227                           ; BSR set to: 0
  9228                           
  9229                           ; BSR set to: 0
  9230  002188  0E00               	movlw	0
  9231  00218A  6F8D               	movwf	___fldiv@b& (0+255),b
  9232  00218C  0E00               	movlw	0
  9233  00218E  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9234  002190  0E00               	movlw	0
  9235  002192  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9236  002194                     L9:
  9237  002194  0E00               	movlw	0
  9238  002196  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9239                           
  9240                           ; BSR set to: 0
  9241                           
  9242                           ; BSR set to: 0
  9243  002198  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9244  00219A  0B80               	andlw	128
  9245  00219C  1B99               	xorwf	___fldiv@sign& (0+255),f,b
  9246                           
  9247                           ; BSR set to: 0
  9248  00219E  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9249  0021A0  2594               	addwf	(___fldiv@a+3)& (0+255),w,b
  9250  0021A2  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9251                           
  9252                           ; BSR set to: 0
  9253  0021A4  BF93               	btfsc	(___fldiv@a+2)& (0+255),7,b
  9254                           
  9255                           ; BSR set to: 0
  9256  0021A6  81A5               	bsf	___fldiv@aexp& (0+255),0,b
  9257                           
  9258                           ; BSR set to: 0
  9259                           
  9260                           ; BSR set to: 0
  9261  0021A8  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9262  0021AA  B4D8               	btfsc	status,2,c
  9263  0021AC  D00D               	goto	l839
  9264                           
  9265                           ; BSR set to: 0
  9266  0021AE  29A5               	incf	___fldiv@aexp& (0+255),w,b
  9267  0021B0  A4D8               	btfss	status,2,c
  9268  0021B2  D008               	goto	l840
  9269                           
  9270                           ; BSR set to: 0
  9271  0021B4  0E00               	movlw	0
  9272  0021B6  6F91               	movwf	___fldiv@a& (0+255),b
  9273  0021B8  0E00               	movlw	0
  9274  0021BA  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9275  0021BC  0E00               	movlw	0
  9276  0021BE  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9277  0021C0  0E00               	movlw	0
  9278  0021C2  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9279  0021C4                     l840:
  9280                           
  9281                           ; BSR set to: 0
  9282                           
  9283                           ; BSR set to: 0
  9284  0021C4  8F93               	bsf	(___fldiv@a+2)& (0+255),7,b
  9285  0021C6  D006               	goto	L10
  9286  0021C8                     l839:
  9287                           
  9288                           ; BSR set to: 0
  9289                           
  9290                           ; BSR set to: 0
  9291  0021C8  0E00               	movlw	0
  9292  0021CA  6F91               	movwf	___fldiv@a& (0+255),b
  9293  0021CC  0E00               	movlw	0
  9294  0021CE  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9295  0021D0  0E00               	movlw	0
  9296  0021D2  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9297  0021D4                     L10:
  9298  0021D4  0E00               	movlw	0
  9299  0021D6  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9300                           
  9301                           ; BSR set to: 0
  9302                           
  9303                           ; BSR set to: 0
  9304  0021D8  5191               	movf	___fldiv@a& (0+255),w,b
  9305  0021DA  1192               	iorwf	(___fldiv@a+1)& (0+255),w,b
  9306  0021DC  1193               	iorwf	(___fldiv@a+2)& (0+255),w,b
  9307  0021DE  1194               	iorwf	(___fldiv@a+3)& (0+255),w,b
  9308  0021E0  A4D8               	btfss	status,2,c
  9309  0021E2  D015               	goto	l842
  9310                           
  9311                           ; BSR set to: 0
  9312  0021E4  0E00               	movlw	0
  9313  0021E6  6F8D               	movwf	___fldiv@b& (0+255),b
  9314  0021E8  0E00               	movlw	0
  9315  0021EA  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9316  0021EC  0E00               	movlw	0
  9317  0021EE  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9318  0021F0  0E00               	movlw	0
  9319  0021F2  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9320                           
  9321                           ; BSR set to: 0
  9322  0021F4  0E80               	movlw	128
  9323  0021F6  138F               	iorwf	(___fldiv@b+2)& (0+255),f,b
  9324  0021F8  0E7F               	movlw	127
  9325  0021FA  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9326                           
  9327                           ; BSR set to: 0
  9328  0021FC  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9329  002200  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9330  002204  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9331  002208  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9332                           
  9333                           ; BSR set to: 0
  9334  00220C  0012               	return	
  9335  00220E                     l842:
  9336                           
  9337                           ; BSR set to: 0
  9338                           
  9339                           ; BSR set to: 0
  9340  00220E  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9341  002210  A4D8               	btfss	status,2,c
  9342  002212  D011               	goto	l844
  9343                           
  9344                           ; BSR set to: 0
  9345  002214  0E00               	movlw	0
  9346  002216  6F8D               	movwf	___fldiv@b& (0+255),b
  9347  002218  0E00               	movlw	0
  9348  00221A  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9349  00221C  0E00               	movlw	0
  9350  00221E  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9351  002220  0E00               	movlw	0
  9352  002222  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9353                           
  9354                           ; BSR set to: 0
  9355  002224  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9356  002228  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9357  00222C  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9358  002230  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9359                           
  9360                           ; BSR set to: 0
  9361  002234  0012               	return	
  9362  002236                     l844:
  9363                           
  9364                           ; BSR set to: 0
  9365                           
  9366                           ; BSR set to: 0
  9367  002236  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9368  002238  6F95               	movwf	??___fldiv& (0+255),b
  9369  00223A  6B96               	clrf	(??___fldiv+1)& (0+255),b
  9370  00223C  1F95               	comf	??___fldiv& (0+255),f,b
  9371  00223E  1F96               	comf	(??___fldiv+1)& (0+255),f,b
  9372  002240  4B95               	infsnz	??___fldiv& (0+255),f,b
  9373  002242  2B96               	incf	(??___fldiv+1)& (0+255),f,b
  9374  002244  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9375  002246  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9376  002248  6B98               	clrf	(??___fldiv+3)& (0+255),b
  9377  00224A  5195               	movf	??___fldiv& (0+255),w,b
  9378  00224C  2797               	addwf	(??___fldiv+2)& (0+255),f,b
  9379  00224E  5196               	movf	(??___fldiv+1)& (0+255),w,b
  9380  002250  2398               	addwfc	(??___fldiv+3)& (0+255),f,b
  9381  002252  0E7F               	movlw	127
  9382  002254  2597               	addwf	(??___fldiv+2)& (0+255),w,b
  9383  002256  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9384  002258  0E00               	movlw	0
  9385  00225A  2198               	addwfc	(??___fldiv+3)& (0+255),w,b
  9386  00225C  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9387                           
  9388                           ; BSR set to: 0
  9389  00225E  C08D  F09A         	movff	___fldiv@b,___fldiv@rem
  9390  002262  C08E  F09B         	movff	___fldiv@b+1,___fldiv@rem+1
  9391  002266  C08F  F09C         	movff	___fldiv@b+2,___fldiv@rem+2
  9392  00226A  C090  F09D         	movff	___fldiv@b+3,___fldiv@rem+3
  9393                           
  9394                           ; BSR set to: 0
  9395  00226E  0E00               	movlw	0
  9396  002270  6F8D               	movwf	___fldiv@b& (0+255),b
  9397  002272  0E00               	movlw	0
  9398  002274  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9399  002276  0E00               	movlw	0
  9400  002278  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9401  00227A  0E00               	movlw	0
  9402  00227C  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405  00227E  0E00               	movlw	0
  9406  002280  6FA0               	movwf	___fldiv@grs& (0+255),b
  9407  002282  0E00               	movlw	0
  9408  002284  6FA1               	movwf	(___fldiv@grs+1)& (0+255),b
  9409  002286  0E00               	movlw	0
  9410  002288  6FA2               	movwf	(___fldiv@grs+2)& (0+255),b
  9411  00228A  0E00               	movlw	0
  9412  00228C  6FA3               	movwf	(___fldiv@grs+3)& (0+255),b
  9413                           
  9414                           ; BSR set to: 0
  9415  00228E  0E00               	movlw	0
  9416  002290  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9417  002292  D028               	goto	l845
  9418  002294                     
  9419                           ; BSR set to: 0
  9420                           
  9421                           ; BSR set to: 0
  9422  002294  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9423  002296  B4D8               	btfsc	status,2,c
  9424  002298  D011               	goto	l847
  9425                           
  9426                           ; BSR set to: 0
  9427  00229A  90D8               	bcf	status,0,c
  9428  00229C  379A               	rlcf	___fldiv@rem& (0+255),f,b
  9429  00229E  379B               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  9430  0022A0  379C               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  9431  0022A2  379D               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  9432  0022A4  90D8               	bcf	status,0,c
  9433  0022A6  378D               	rlcf	___fldiv@b& (0+255),f,b
  9434  0022A8  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9435  0022AA  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9436  0022AC  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9437                           
  9438                           ; BSR set to: 0
  9439  0022AE  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9440                           
  9441                           ; BSR set to: 0
  9442  0022B0  818D               	bsf	___fldiv@b& (0+255),0,b
  9443                           
  9444                           ; BSR set to: 0
  9445  0022B2  90D8               	bcf	status,0,c
  9446  0022B4  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9447  0022B6  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9448  0022B8  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9449  0022BA  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9450  0022BC                     l847:
  9451                           
  9452                           ; BSR set to: 0
  9453                           
  9454                           ; BSR set to: 0
  9455  0022BC  5191               	movf	___fldiv@a& (0+255),w,b
  9456  0022BE  5D9A               	subwf	___fldiv@rem& (0+255),w,b
  9457  0022C0  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9458  0022C2  599B               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  9459  0022C4  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9460  0022C6  599C               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  9461  0022C8  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9462  0022CA  599D               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  9463  0022CC  A0D8               	btfss	status,0,c
  9464  0022CE  D009               	goto	l849
  9465                           
  9466                           ; BSR set to: 0
  9467  0022D0  8DA3               	bsf	(___fldiv@grs+3)& (0+255),6,b
  9468                           
  9469                           ; BSR set to: 0
  9470  0022D2  5191               	movf	___fldiv@a& (0+255),w,b
  9471  0022D4  5F9A               	subwf	___fldiv@rem& (0+255),f,b
  9472  0022D6  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9473  0022D8  5B9B               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  9474  0022DA  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9475  0022DC  5B9C               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  9476  0022DE  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9477  0022E0  5B9D               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  9478  0022E2                     l849:
  9479                           
  9480                           ; BSR set to: 0
  9481                           
  9482                           ; BSR set to: 0
  9483  0022E2  2BA5               	incf	___fldiv@aexp& (0+255),f,b
  9484  0022E4                     l845:
  9485                           
  9486                           ; BSR set to: 0
  9487  0022E4  0E19               	movlw	25
  9488  0022E6  65A5               	cpfsgt	___fldiv@aexp& (0+255),b
  9489  0022E8  D7D5               	goto	l846
  9490                           
  9491                           ; BSR set to: 0
  9492                           
  9493                           ; BSR set to: 0
  9494  0022EA  519A               	movf	___fldiv@rem& (0+255),w,b
  9495  0022EC  119B               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  9496  0022EE  119C               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  9497  0022F0  119D               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  9498  0022F2  B4D8               	btfsc	status,2,c
  9499  0022F4  D011               	goto	l852
  9500                           
  9501                           ; BSR set to: 0
  9502  0022F6  81A0               	bsf	___fldiv@grs& (0+255),0,b
  9503                           
  9504                           ; BSR set to: 0
  9505  0022F8  D00F               	goto	l852
  9506  0022FA                     
  9507                           ; BSR set to: 0
  9508                           
  9509                           ; BSR set to: 0
  9510  0022FA  90D8               	bcf	status,0,c
  9511  0022FC  378D               	rlcf	___fldiv@b& (0+255),f,b
  9512  0022FE  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9513  002300  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9514  002302  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9515                           
  9516                           ; BSR set to: 0
  9517  002304  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9518                           
  9519                           ; BSR set to: 0
  9520  002306  818D               	bsf	___fldiv@b& (0+255),0,b
  9521                           
  9522                           ; BSR set to: 0
  9523  002308  90D8               	bcf	status,0,c
  9524  00230A  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9525  00230C  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9526  00230E  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9527  002310  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9528  002312  079E               	decf	___fldiv@new_exp& (0+255),f,b
  9529  002314  A0D8               	btfss	status,0,c
  9530  002316  079F               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  9531  002318                     l852:
  9532                           
  9533                           ; BSR set to: 0
  9534                           
  9535                           ; BSR set to: 0
  9536  002318  AF8F               	btfss	(___fldiv@b+2)& (0+255),7,b
  9537  00231A  D7EF               	goto	l853
  9538                           
  9539                           ; BSR set to: 0
  9540                           
  9541                           ; BSR set to: 0
  9542  00231C  0E00               	movlw	0
  9543  00231E  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546  002320  AFA3               	btfss	(___fldiv@grs+3)& (0+255),7,b
  9547  002322  D016               	goto	l859
  9548                           
  9549                           ; BSR set to: 0
  9550  002324  0EFF               	movlw	255
  9551  002326  15A0               	andwf	___fldiv@grs& (0+255),w,b
  9552  002328  6F95               	movwf	??___fldiv& (0+255),b
  9553  00232A  0EFF               	movlw	255
  9554  00232C  15A1               	andwf	(___fldiv@grs+1)& (0+255),w,b
  9555  00232E  6F96               	movwf	(??___fldiv+1)& (0+255),b
  9556  002330  0EFF               	movlw	255
  9557  002332  15A2               	andwf	(___fldiv@grs+2)& (0+255),w,b
  9558  002334  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9559  002336  0E7F               	movlw	127
  9560  002338  15A3               	andwf	(___fldiv@grs+3)& (0+255),w,b
  9561  00233A  6F98               	movwf	(??___fldiv+3)& (0+255),b
  9562  00233C  5195               	movf	??___fldiv& (0+255),w,b
  9563  00233E  1196               	iorwf	(??___fldiv+1)& (0+255),w,b
  9564  002340  1197               	iorwf	(??___fldiv+2)& (0+255),w,b
  9565  002342  1198               	iorwf	(??___fldiv+3)& (0+255),w,b
  9566  002344  A4D8               	btfss	status,2,c
  9567  002346  D002               	goto	u5370
  9568                           
  9569                           ; BSR set to: 0
  9570                           
  9571                           ; BSR set to: 0
  9572  002348  A18D               	btfss	___fldiv@b& (0+255),0,b
  9573  00234A  D002               	goto	l859
  9574  00234C                     u5370:
  9575                           
  9576                           ; BSR set to: 0
  9577  00234C  0E01               	movlw	1
  9578  00234E  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9579  002350                     l859:
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584                           
  9585                           ; BSR set to: 0
  9586  002350  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9587  002352  B4D8               	btfsc	status,2,c
  9588  002354  D01F               	goto	l861
  9589                           
  9590                           ; BSR set to: 0
  9591  002356  0E01               	movlw	1
  9592  002358  278D               	addwf	___fldiv@b& (0+255),f,b
  9593  00235A  0E00               	movlw	0
  9594  00235C  238E               	addwfc	(___fldiv@b+1)& (0+255),f,b
  9595  00235E  238F               	addwfc	(___fldiv@b+2)& (0+255),f,b
  9596  002360  2390               	addwfc	(___fldiv@b+3)& (0+255),f,b
  9597                           
  9598                           ; BSR set to: 0
  9599  002362  A190               	btfss	(___fldiv@b+3)& (0+255),0,b
  9600  002364  D017               	goto	l861
  9601                           
  9602                           ; BSR set to: 0
  9603  002366  C08D  F095         	movff	___fldiv@b,??___fldiv
  9604  00236A  C08E  F096         	movff	___fldiv@b+1,??___fldiv+1
  9605  00236E  C08F  F097         	movff	___fldiv@b+2,??___fldiv+2
  9606  002372  C090  F098         	movff	___fldiv@b+3,??___fldiv+3
  9607  002376  3598               	rlcf	(??___fldiv+3)& (0+255),w,b
  9608  002378  3398               	rrcf	(??___fldiv+3)& (0+255),f,b
  9609  00237A  3397               	rrcf	(??___fldiv+2)& (0+255),f,b
  9610  00237C  3396               	rrcf	(??___fldiv+1)& (0+255),f,b
  9611  00237E  3395               	rrcf	??___fldiv& (0+255),f,b
  9612  002380  C095  F08D         	movff	??___fldiv,___fldiv@b
  9613  002384  C096  F08E         	movff	??___fldiv+1,___fldiv@b+1
  9614  002388  C097  F08F         	movff	??___fldiv+2,___fldiv@b+2
  9615  00238C  C098  F090         	movff	??___fldiv+3,___fldiv@b+3
  9616                           
  9617                           ; BSR set to: 0
  9618  002390  4B9E               	infsnz	___fldiv@new_exp& (0+255),f,b
  9619  002392  2B9F               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  9620  002394                     l861:
  9621                           
  9622                           ; BSR set to: 0
  9623                           
  9624                           ; BSR set to: 0
  9625                           
  9626                           ; BSR set to: 0
  9627  002394  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9628  002396  D010               	goto	l862
  9629  002398  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9630  00239A  E103               	bnz	u5400
  9631  00239C  299E               	incf	___fldiv@new_exp& (0+255),w,b
  9632  00239E  A0D8               	btfss	status,0,c
  9633  0023A0  D00B               	goto	l862
  9634  0023A2                     u5400:
  9635                           
  9636                           ; BSR set to: 0
  9637  0023A2  0E00               	movlw	0
  9638  0023A4  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9639  0023A6  699E               	setf	___fldiv@new_exp& (0+255),b
  9640  0023A8  0E00               	movlw	0
  9641  0023AA  6F8D               	movwf	___fldiv@b& (0+255),b
  9642  0023AC  0E00               	movlw	0
  9643  0023AE  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9644  0023B0  0E00               	movlw	0
  9645  0023B2  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9646  0023B4  0E00               	movlw	0
  9647  0023B6  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9648  0023B8                     l862:
  9649                           
  9650                           ; BSR set to: 0
  9651                           
  9652                           ; BSR set to: 0
  9653  0023B8  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9654  0023BA  D005               	goto	u5410
  9655  0023BC  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9656  0023BE  E111               	bnz	l4913
  9657  0023C0  059E               	decf	___fldiv@new_exp& (0+255),w,b
  9658  0023C2  B0D8               	btfsc	status,0,c
  9659  0023C4  D00E               	goto	l863
  9660  0023C6                     u5410:
  9661                           
  9662                           ; BSR set to: 0
  9663  0023C6  0E00               	movlw	0
  9664  0023C8  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9665  0023CA  0E00               	movlw	0
  9666  0023CC  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9667  0023CE  0E00               	movlw	0
  9668  0023D0  6F8D               	movwf	___fldiv@b& (0+255),b
  9669  0023D2  0E00               	movlw	0
  9670  0023D4  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9671  0023D6  0E00               	movlw	0
  9672  0023D8  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9673  0023DA  0E00               	movlw	0
  9674  0023DC  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9675  0023DE  0E00               	movlw	0
  9676  0023E0  6F99               	movwf	___fldiv@sign& (0+255),b
  9677  0023E2                     l863:
  9678  0023E2                     l4913:
  9679                           
  9680                           ; BSR set to: 0
  9681  0023E2  C09E  F0A4         	movff	___fldiv@new_exp,___fldiv@bexp
  9682                           
  9683                           ; BSR set to: 0
  9684  0023E6  A1A4               	btfss	___fldiv@bexp& (0+255),0,b
  9685  0023E8  D002               	goto	l864
  9686                           
  9687                           ; BSR set to: 0
  9688  0023EA  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9689  0023EC  D001               	goto	l865
  9690  0023EE                     l864:
  9691                           
  9692                           ; BSR set to: 0
  9693                           
  9694                           ; BSR set to: 0
  9695  0023EE  9F8F               	bcf	(___fldiv@b+2)& (0+255),7,b
  9696  0023F0                     l865:
  9697                           
  9698                           ; BSR set to: 0
  9699                           
  9700                           ; BSR set to: 0
  9701  0023F0  90D8               	bcf	status,0,c
  9702  0023F2  31A4               	rrcf	___fldiv@bexp& (0+255),w,b
  9703  0023F4  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9704                           
  9705                           ; BSR set to: 0
  9706  0023F6  5199               	movf	___fldiv@sign& (0+255),w,b
  9707  0023F8  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9708                           
  9709                           ; BSR set to: 0
  9710  0023FA  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9711  0023FE  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9712  002402  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9713  002406  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9714  00240A  0012               	return	
  9715  00240C                     __end_of___fldiv:
  9716                           	opt stack 0
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon	equ	0xFF2
  9724                           intcon2	equ	0xFF1
  9725                           indf0	equ	0xFEF
  9726                           postinc0	equ	0xFEE
  9727                           fsr0h	equ	0xFEA
  9728                           fsr0l	equ	0xFE9
  9729                           wreg	equ	0xFE8
  9730                           indf2	equ	0xFDF
  9731                           postinc2	equ	0xFDE
  9732                           fsr2h	equ	0xFDA
  9733                           fsr2l	equ	0xFD9
  9734                           status	equ	0xFD8
  9735                           
  9736 ;; *************** function _low_isr *****************
  9737 ;; Defined at:
  9738 ;;		line 112 in file "color_3.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;		None
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  1    wreg      void 
  9745 ;; Registers used:
  9746 ;;		wreg, status,2, status,0
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9752 ;;      Params:         0       0       0       0       0       0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0
  9754 ;;      Temps:         21       0       0       0       0       0       0
  9755 ;;      Totals:        21       0       0       0       0       0       0
  9756 ;;Total ram usage:       21 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    1
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		Interrupt level 1
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           	psect	intcodelo
  9767  000018                     __pintcodelo:
  9768                           	opt stack 0
  9769  000018                     _low_isr:
  9770                           	opt stack 25
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;incstack = 0
  9774  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9775  00001A  CFD8 F019          	movff	status,??_low_isr
  9776  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  9777  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  9778  000026  CFFA F01C          	movff	pclath,??_low_isr+3
  9779  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
  9780  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
  9781  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
  9782  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
  9783  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
  9784  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
  9785  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
  9786  000046  CFF3 F024          	movff	prodl,??_low_isr+11
  9787  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
  9788  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
  9789  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
  9790  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
  9791  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
  9792  00005E  C051  F02A         	movff	btemp,??_low_isr+17
  9793  000062  C052  F02B         	movff	btemp+1,??_low_isr+18
  9794  000066  C053  F02C         	movff	btemp+2,??_low_isr+19
  9795  00006A  C054  F02D         	movff	btemp+3,??_low_isr+20
  9796                           
  9797                           ;color_3.c: 114: if(TMR1IF == 1)
  9798  00006E  A09E               	btfss	3998,0,c	;volatile
  9799  000070  D007               	goto	i1l2373
  9800                           
  9801                           ;color_3.c: 115: {
  9802                           ;color_3.c: 116: overflowCount++;
  9803  000072  0E01               	movlw	1
  9804  000074  264A               	addwf	_overflowCount,f,c	;volatile
  9805  000076  0E00               	movlw	0
  9806  000078  224B               	addwfc	_overflowCount+1,f,c	;volatile
  9807  00007A  224C               	addwfc	_overflowCount+2,f,c	;volatile
  9808  00007C  224D               	addwfc	_overflowCount+3,f,c	;volatile
  9809                           
  9810                           ;color_3.c: 117: TMR1IF =0;
  9811  00007E  909E               	bcf	3998,0,c	;volatile
  9812  000080                     i1l2373:
  9813                           
  9814                           ;color_3.c: 118: return;
  9815  000080  C02D  F054         	movff	??_low_isr+20,btemp+3
  9816  000084  C02C  F053         	movff	??_low_isr+19,btemp+2
  9817  000088  C02B  F052         	movff	??_low_isr+18,btemp+1
  9818  00008C  C02A  F051         	movff	??_low_isr+17,btemp
  9819  000090  C029  FFF5         	movff	??_low_isr+16,tablat
  9820  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
  9821  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
  9822  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
  9823  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
  9824  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
  9825  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
  9826  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
  9827  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
  9828  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
  9829  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
  9830  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
  9831  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
  9832  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
  9833  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
  9834  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
  9835  0000D0  C019  FFD8         	movff	??_low_isr,status
  9836  0000D4  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9837  0000D6  0010               	retfie	
  9838  0000D8                     __end_of_low_isr:
  9839                           	opt stack 0
  9840                           pclatu	equ	0xFFB
  9841                           pclath	equ	0xFFA
  9842                           tblptru	equ	0xFF8
  9843                           tblptrh	equ	0xFF7
  9844                           tblptrl	equ	0xFF6
  9845                           tablat	equ	0xFF5
  9846                           prodh	equ	0xFF4
  9847                           prodl	equ	0xFF3
  9848                           intcon	equ	0xFF2
  9849                           intcon2	equ	0xFF1
  9850                           indf0	equ	0xFEF
  9851                           postinc0	equ	0xFEE
  9852                           fsr0h	equ	0xFEA
  9853                           fsr0l	equ	0xFE9
  9854                           wreg	equ	0xFE8
  9855                           fsr1h	equ	0xFE2
  9856                           fsr1l	equ	0xFE1
  9857                           bsr	equ	0xFE0
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           fsr2h	equ	0xFDA
  9861                           fsr2l	equ	0xFD9
  9862                           status	equ	0xFD8
  9863                           
  9864 ;; *************** function _high_isr *****************
  9865 ;; Defined at:
  9866 ;;		line 122 in file "color_3.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;  counter         2   22[COMRAM] unsigned int 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  1    wreg      void 
  9873 ;; Registers used:
  9874 ;;		wreg, status,2, status,0
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9880 ;;      Params:         0       0       0       0       0       0       0
  9881 ;;      Locals:         2       0       0       0       0       0       0
  9882 ;;      Temps:         22       0       0       0       0       0       0
  9883 ;;      Totals:        24       0       0       0       0       0       0
  9884 ;;Total ram usage:       24 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; This function calls:
  9887 ;;		Nothing
  9888 ;; This function is called by:
  9889 ;;		Interrupt level 2
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	intcode
  9894  000008                     __pintcode:
  9895                           	opt stack 0
  9896  000008                     _high_isr:
  9897                           	opt stack 25
  9898                           
  9899                           ;incstack = 0
  9900  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9901  00000A  ED24  F015         	call	int_func,f	;refresh shadow registers
  9902                           pclatu	equ	0xFFB
  9903                           pclath	equ	0xFFA
  9904                           tblptru	equ	0xFF8
  9905                           tblptrh	equ	0xFF7
  9906                           tblptrl	equ	0xFF6
  9907                           tablat	equ	0xFF5
  9908                           prodh	equ	0xFF4
  9909                           prodl	equ	0xFF3
  9910                           intcon	equ	0xFF2
  9911                           intcon2	equ	0xFF1
  9912                           indf0	equ	0xFEF
  9913                           postinc0	equ	0xFEE
  9914                           fsr0h	equ	0xFEA
  9915                           fsr0l	equ	0xFE9
  9916                           wreg	equ	0xFE8
  9917                           fsr1h	equ	0xFE2
  9918                           fsr1l	equ	0xFE1
  9919                           bsr	equ	0xFE0
  9920                           indf2	equ	0xFDF
  9921                           postinc2	equ	0xFDE
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926                           	psect	intcode_body
  9927  002A48                     __pintcode_body:
  9928                           	opt stack 25
  9929  002A48                     int_func:
  9930                           	opt stack 25
  9931  002A48  0006               	pop		; remove dummy address from shadow register refresh
  9932  002A4A  CFFA F005          	movff	pclath,??_high_isr+4
  9933  002A4E  CFFB F006          	movff	pclatu,??_high_isr+5
  9934  002A52  CFE9 F007          	movff	fsr0l,??_high_isr+6
  9935  002A56  CFEA F008          	movff	fsr0h,??_high_isr+7
  9936  002A5A  CFE1 F009          	movff	fsr1l,??_high_isr+8
  9937  002A5E  CFE2 F00A          	movff	fsr1h,??_high_isr+9
  9938  002A62  CFD9 F00B          	movff	fsr2l,??_high_isr+10
  9939  002A66  CFDA F00C          	movff	fsr2h,??_high_isr+11
  9940  002A6A  CFF3 F00D          	movff	prodl,??_high_isr+12
  9941  002A6E  CFF4 F00E          	movff	prodh,??_high_isr+13
  9942  002A72  CFF6 F00F          	movff	tblptrl,??_high_isr+14
  9943  002A76  CFF7 F010          	movff	tblptrh,??_high_isr+15
  9944  002A7A  CFF8 F011          	movff	tblptru,??_high_isr+16
  9945  002A7E  CFF5 F012          	movff	tablat,??_high_isr+17
  9946  002A82  C051  F013         	movff	btemp,??_high_isr+18
  9947  002A86  C052  F014         	movff	btemp+1,??_high_isr+19
  9948  002A8A  C053  F015         	movff	btemp+2,??_high_isr+20
  9949  002A8E  C054  F016         	movff	btemp+3,??_high_isr+21
  9950                           
  9951                           ;color_3.c: 125: if(INT0IF == 1)
  9952  002A92  A2F2               	btfss	intcon,1,c	;volatile
  9953  002A94  D046               	goto	i2l3993
  9954                           
  9955                           ;color_3.c: 126: {
  9956                           ;color_3.c: 127: unsigned int counter = TMR1;
  9957  002A96  CFCE F017          	movff	4046,high_isr@counter	;volatile
  9958  002A9A  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
  9959                           
  9960                           ;color_3.c: 130: if (triggered)
  9961  002A9E  504E               	movf	_triggered,w,c	;volatile
  9962  002AA0  A4D8               	btfss	status,2,c
  9963  002AA2  D03E               	goto	i2l3991
  9964                           
  9965                           ;color_3.c: 134: }
  9966                           ;color_3.c: 136: if (first)
  9967                           
  9968                           ;color_3.c: 133: return;
  9969                           
  9970                           ;color_3.c: 131: {
  9971                           ;color_3.c: 132: INT0IF = 0;
  9972  002AA4  504F               	movf	_first,w,c	;volatile
  9973  002AA6  B4D8               	btfsc	status,2,c
  9974  002AA8  D01E               	goto	i2l147
  9975                           
  9976                           ;color_3.c: 137: {
  9977                           ;color_3.c: 138: startTime = (overflowCount << 16) + counter;
  9978  002AAA  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
  9979  002AAE  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  9980  002AB2  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  9981  002AB6  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  9982  002ABA  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  9983  002ABE  C001  F003         	movff	??_high_isr,??_high_isr+2
  9984  002AC2  6A02               	clrf	??_high_isr+1,c
  9985  002AC4  6A01               	clrf	??_high_isr,c
  9986  002AC6  5017               	movf	high_isr@counter,w,c
  9987  002AC8  2401               	addwf	??_high_isr,w,c
  9988  002ACA  0100               	movlb	0	; () banked
  9989  002ACC  6FE8               	movwf	_startTime& (0+255),b	;volatile
  9990  002ACE  5018               	movf	high_isr@counter+1,w,c
  9991  002AD0  2002               	addwfc	??_high_isr+1,w,c
  9992  002AD2  6FE9               	movwf	(_startTime+1)& (0+255),b	;volatile
  9993  002AD4  0E00               	movlw	0
  9994  002AD6  2003               	addwfc	??_high_isr+2,w,c
  9995  002AD8  6FEA               	movwf	(_startTime+2)& (0+255),b	;volatile
  9996  002ADA  0E00               	movlw	0
  9997  002ADC  2004               	addwfc	??_high_isr+3,w,c
  9998  002ADE  6FEB               	movwf	(_startTime+3)& (0+255),b	;volatile
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;color_3.c: 139: first = false;
 10002  002AE0  0E00               	movlw	0
 10003  002AE2  6E4F               	movwf	_first,c	;volatile
 10004  002AE4  D01D               	goto	i2l3991
 10005  002AE6                     i2l147:
 10006                           
 10007                           ;color_3.c: 142: }
 10008                           ;color_3.c: 144: finishTime = (overflowCount << 16) + counter;
 10009                           
 10010                           ; BSR set to: 0
 10011  002AE6  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 10012  002AEA  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10013  002AEE  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10014  002AF2  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10015  002AF6  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10016  002AFA  C001  F003         	movff	??_high_isr,??_high_isr+2
 10017  002AFE  6A02               	clrf	??_high_isr+1,c
 10018  002B00  6A01               	clrf	??_high_isr,c
 10019  002B02  5017               	movf	high_isr@counter,w,c
 10020  002B04  2401               	addwf	??_high_isr,w,c
 10021  002B06  0100               	movlb	0	; () banked
 10022  002B08  6FE4               	movwf	_finishTime& (0+255),b	;volatile
 10023  002B0A  5018               	movf	high_isr@counter+1,w,c
 10024  002B0C  2002               	addwfc	??_high_isr+1,w,c
 10025  002B0E  6FE5               	movwf	(_finishTime+1)& (0+255),b	;volatile
 10026  002B10  0E00               	movlw	0
 10027  002B12  2003               	addwfc	??_high_isr+2,w,c
 10028  002B14  6FE6               	movwf	(_finishTime+2)& (0+255),b	;volatile
 10029  002B16  0E00               	movlw	0
 10030  002B18  2004               	addwfc	??_high_isr+3,w,c
 10031  002B1A  6FE7               	movwf	(_finishTime+3)& (0+255),b	;volatile
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;color_3.c: 145: triggered = true;
 10035  002B1C  0E01               	movlw	1
 10036  002B1E  6E4E               	movwf	_triggered,c	;volatile
 10037  002B20                     i2l3991:
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;color_3.c: 146: INT0IF = 0;
 10041  002B20  92F2               	bcf	intcon,1,c	;volatile
 10042  002B22                     i2l3993:
 10043                           
 10044                           ; BSR set to: 0
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;color_3.c: 147: return;
 10048  002B22  C016  F054         	movff	??_high_isr+21,btemp+3
 10049  002B26  C015  F053         	movff	??_high_isr+20,btemp+2
 10050  002B2A  C014  F052         	movff	??_high_isr+19,btemp+1
 10051  002B2E  C013  F051         	movff	??_high_isr+18,btemp
 10052  002B32  C012  FFF5         	movff	??_high_isr+17,tablat
 10053  002B36  C011  FFF8         	movff	??_high_isr+16,tblptru
 10054  002B3A  C010  FFF7         	movff	??_high_isr+15,tblptrh
 10055  002B3E  C00F  FFF6         	movff	??_high_isr+14,tblptrl
 10056  002B42  C00E  FFF4         	movff	??_high_isr+13,prodh
 10057  002B46  C00D  FFF3         	movff	??_high_isr+12,prodl
 10058  002B4A  C00C  FFDA         	movff	??_high_isr+11,fsr2h
 10059  002B4E  C00B  FFD9         	movff	??_high_isr+10,fsr2l
 10060  002B52  C00A  FFE2         	movff	??_high_isr+9,fsr1h
 10061  002B56  C009  FFE1         	movff	??_high_isr+8,fsr1l
 10062  002B5A  C008  FFEA         	movff	??_high_isr+7,fsr0h
 10063  002B5E  C007  FFE9         	movff	??_high_isr+6,fsr0l
 10064  002B62  C006  FFFB         	movff	??_high_isr+5,pclatu
 10065  002B66  C005  FFFA         	movff	??_high_isr+4,pclath
 10066  002B6A  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10067  002B6C  0011               	retfie		f
 10068  002B6E                     __end_of_high_isr:
 10069                           	opt stack 0
 10070                           pclatu	equ	0xFFB
 10071                           pclath	equ	0xFFA
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           intcon2	equ	0xFF1
 10080                           indf0	equ	0xFEF
 10081                           postinc0	equ	0xFEE
 10082                           fsr0h	equ	0xFEA
 10083                           fsr0l	equ	0xFE9
 10084                           wreg	equ	0xFE8
 10085                           fsr1h	equ	0xFE2
 10086                           fsr1l	equ	0xFE1
 10087                           bsr	equ	0xFE0
 10088                           indf2	equ	0xFDF
 10089                           postinc2	equ	0xFDE
 10090                           fsr2h	equ	0xFDA
 10091                           fsr2l	equ	0xFD9
 10092                           status	equ	0xFD8
 10093                           pclatu	equ	0xFFB
 10094                           pclath	equ	0xFFA
 10095                           tblptru	equ	0xFF8
 10096                           tblptrh	equ	0xFF7
 10097                           tblptrl	equ	0xFF6
 10098                           tablat	equ	0xFF5
 10099                           prodh	equ	0xFF4
 10100                           prodl	equ	0xFF3
 10101                           intcon	equ	0xFF2
 10102                           intcon2	equ	0xFF1
 10103                           indf0	equ	0xFEF
 10104                           postinc0	equ	0xFEE
 10105                           fsr0h	equ	0xFEA
 10106                           fsr0l	equ	0xFE9
 10107                           wreg	equ	0xFE8
 10108                           fsr1h	equ	0xFE2
 10109                           fsr1l	equ	0xFE1
 10110                           bsr	equ	0xFE0
 10111                           indf2	equ	0xFDF
 10112                           postinc2	equ	0xFDE
 10113                           fsr2h	equ	0xFDA
 10114                           fsr2l	equ	0xFD9
 10115                           status	equ	0xFD8
 10116                           
 10117                           	psect	rparam
 10118  0000                     pclatu	equ	0xFFB
 10119                           pclath	equ	0xFFA
 10120                           tblptru	equ	0xFF8
 10121                           tblptrh	equ	0xFF7
 10122                           tblptrl	equ	0xFF6
 10123                           tablat	equ	0xFF5
 10124                           prodh	equ	0xFF4
 10125                           prodl	equ	0xFF3
 10126                           intcon	equ	0xFF2
 10127                           intcon2	equ	0xFF1
 10128                           indf0	equ	0xFEF
 10129                           postinc0	equ	0xFEE
 10130                           fsr0h	equ	0xFEA
 10131                           fsr0l	equ	0xFE9
 10132                           wreg	equ	0xFE8
 10133                           fsr1h	equ	0xFE2
 10134                           fsr1l	equ	0xFE1
 10135                           bsr	equ	0xFE0
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           fsr2h	equ	0xFDA
 10139                           fsr2l	equ	0xFD9
 10140                           status	equ	0xFD8
 10141                           
 10142                           	psect	temp
 10143  000051                     btemp:
 10144                           	opt stack 0
 10145  000051                     	ds	1
 10146  0000                     int$flags	set	btemp
 10147  0000                     wtemp6	set	btemp+1
 10148                           pclatu	equ	0xFFB
 10149                           pclath	equ	0xFFA
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           intcon2	equ	0xFF1
 10158                           indf0	equ	0xFEF
 10159                           postinc0	equ	0xFEE
 10160                           fsr0h	equ	0xFEA
 10161                           fsr0l	equ	0xFE9
 10162                           wreg	equ	0xFE8
 10163                           fsr1h	equ	0xFE2
 10164                           fsr1l	equ	0xFE1
 10165                           bsr	equ	0xFE0
 10166                           indf2	equ	0xFDF
 10167                           postinc2	equ	0xFDE
 10168                           fsr2h	equ	0xFDA
 10169                           fsr2l	equ	0xFD9
 10170                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     73      80
    BANK0           128    100     108
    BANK1           256     48      56
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[6]), STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK1[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> value(BANK1[8]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___awdiv->___awmod
    ___fltol->___flmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    _calibra->___flmul
    ___fladd->___flmul
    _calcula->___flmul
    ___flmul->___awdiv
    ___fldiv->___flmul

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    _calibra->___fladd
    ___fladd->_calcula
    _calcula->___fldiv
    ___fldiv->___flmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   81459
                                             98 BANK0      2     2      0
                                             27 BANK1     21    21      0
                            ___fladd
                            ___fldiv
                             ___flge
                            _calcula
                            _calibra
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
                   _seleccionarColor
                  _seleccionarEscala
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   47224
                                             86 BANK0     12     4      8
                                              0 BANK1     27    27      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   10140
                                             13 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4    9861
                                             13 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             45 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             45 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     607
                                             71 COMRAM     2     2      0
                                             22 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4907
                                             78 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     986
                                             45 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _seleccionarEscala                                    1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _seleccionarColor                                     1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2    1037
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     308
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     242
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     110
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     529
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      88
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibra                                             12     0     12   14109
                                             78 BANK0     12     0     12
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     335
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4522
                                             58 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                            _calcula (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcula                                             20    16      4    8846
                                             38 BANK0     20    16      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     656
                                             45 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5213
                                             59 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2835
                                             13 BANK0     25    17      8
                            ___flmul (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___fladd
     ___fldiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
     _calcula (ARG)
       ___fldiv
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___xxtofl
       _prepareForInterrupts
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
   ___fldiv
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
   ___flge
   _calcula
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___xxtofl
     _prepareForInterrupts
   _calibra
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts
   _seleccionarColor
   _seleccionarEscala
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      38       7       21.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     64      6C       5       84.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     49      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4      15        0.0%
DATA                 0      0      F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun May 13 01:20:01 2018

                 ___fldiv@aexp 00A5                   ___fldiv@bexp 00A4                   ___fldiv@sign 0099  
                  lcd_cmd_hf@x 002F                             l24 3364                             l25 3344  
                           l42 33C4                             l27 334C                             l44 33D4  
                           l28 3354                             l36 3202                             l53 3450  
                           l45 33BA                             l29 335C                             l37 31DA  
                           l54 3452                             l46 33BE                             l55 345A  
                           l56 345C                             l57 3464                             l58 3466  
                           l59 346E                   ___awdiv@sign 0039                             bsr 000FE0  
          ___wmul@multiplicand 0030                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                            l300 0FC0                            l221 18A4  
                          l222 17C0                            l215 2570                            l304 1014  
                          l232 06C8                            l152 108A                            l225 1878  
                          l233 06E2                            l153 10A2                            l218 264E  
                          l226 19E2                            l250 088C                            l242 0802  
                          l162 1664                            l235 0712                            l155 120A  
                          l180 3384                            l228 1A9A                            l260 0A70  
                          l252 08F8                            l181 338A                            l253 0976  
                          l245 07FE                            l237 07F0                            l157 1372  
                          l190 3312                            l182 3390                            l510 29CE  
                          l270 0BD4                            l246 082A                            l238 07DA  
                          l191 3318                            l255 09A4                            l239 07A0  
                          l159 14DA                            l192 331E                            l512 2A0C  
                          l248 0EC4                            l280 0CE6                            l272 0C0A  
                          l256 09F0                            l177 3396                            l513 29FC  
                          l273 0BF0                            l257 0AD8                            l249 083E  
                          l530 3434                            l186 3324                            l178 337E  
                          l506 293E                            l610 281A                            l282 0D24  
                          l266 0B50                            l187 3306                            l523 2BA2  
                          l291 0EDC                            l283 0D28                            l524 2BD6  
                          l700 30E2                            l508 295C                            l612 2846  
                          l292 0EFE                            l284 0D4C                            l276 0CDA  
                          l189 330C                            l525 2C14                            l701 30F0  
                          l509 299E                            l613 2880                            l285 0E94  
                          l277 0C42                            l526 2C52                            l710 31B8  
                          l518 2A30                            l622 2908                            l614 28A8  
                          l294 0F28                            l286 0DAE                            l711 31C6  
                          l519 2A24                            l623 28FC                            l295 0F54  
                          l279 0D00                            l800 1FB2                            l616 28E4  
                          l288 0EBA                            l801 1FB6                            l561 2E46  
                          l553 2DB6                            l617 28D4                            l481 305E  
                          l297 0F80                            l289 0EA0                            l562 2E3A  
                          l706 3190                            l482 3068                            l474 3010  
                          l490 3138                            l298 0F8A                            l811 209A  
                          l555 2E22                            l707 3184                            l483 3076  
                          l475 3020                            l491 3130                            l299 0FB6  
                          l804 2050                            l564 2E62                            l556 2E12  
                          l901 271C                            l821 210A                            l813 20A4  
                          l477 303E                            l902 2710                            l806 2060  
                          l478 3036                            l494 3150                            l670 34AE  
                          l495 315A                            l487 3116                            l840 21C4  
                          l912 27AA                            l904 275A                            l496 3168  
                          l488 3122                            l913 27DC                            l905 2742  
                          l825 2130                            l809 2084                            l842 220E  
                          l826 2138                            l818 20C4                            l835 2188  
                          l907 278C                            l827 213A                            l852 2318  
                          l844 2236                            l836 2184                            l908 2780  
                          l861 2394                            l853 22FA                            l845 22E4  
                          l862 23B8                            l846 2294                            l870 1AF4  
                          l790 1F6A                            l863 23E2                            l847 22BC  
                          l839 21C8                            l871 1B08                            l791 1F48  
                          l783 1E92                            l864 23EE                            l880 1D26  
                          l792 1F56                            l784 1E8E                            l696 30AE  
                          l865 23F0                            l849 22E2                            l881 1D08  
                          l873 1B38                            l793 1F5A                            l697 30A2  
                          l890 1DC0                            l874 1B34                            l786 1EEE  
                          l778 1E4A                            l859 2350                            l875 1B48  
                          l787 1EB2                            l779 1E46                            l892 1DE4  
                          l876 1B66                            l796 1FC8                            l893 1E02  
                          l869 1AF8                            l797 1F8E                            l887 1D5E  
                          l889 1DA2                            l897 26DC                            l898 26EC  
                          l899 270A                   __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000  
                          _lcd 0050                   ___awmod@sign 0033                            wreg 000FE8  
                 ___flmul@aexp 0081                   ___flmul@bexp 0086                    _sprintf$879 0100  
                 ___flmul@sign 0080                   ___flmul@temp 008B                   ___flmul@prod 0087  
                  lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031                   __CFG_LVP$OFF 000000  
                 ___fltol@exp1 0049                   __CFG_WDT$OFF 000000                           l5211 0A42  
                         l5203 09F0                           l4183 2C8A                           l5231 0B54  
                         l5251 0BF0                           l5255 0C02                           l5275 0CE6  
                         l5419 109A                           l5365 1010                           l5527 14D2  
                         l5455 1202                           l4913 23E2                           l5491 136A  
                         STR_1 0691                           STR_2 06A3                           STR_3 06AD  
                         STR_4 06A3                           STR_5 06B1                           STR_6 06A3  
                         STR_7 06B5                           STR_8 06A3                           STR_9 06A9  
                         _GIEH 007F97                           _GIEL 007F96                           u5120 290E  
                         u6000 0D1E                           _IPEN 007E87                           u5041 27FE  
                         u4340 1F1E                           u5061 282A                           u4350 1F2E  
                         u5400 23A2                           u4600 2116                           u4520 20A8  
                         u4360 1F30                           u6200 125A                           u5410 23C6  
                         u3650 31FA                           u6130 0FC8                           u3660 3222  
                         u5500 2DD4                           u6140 0FEA                           u6220 13C2  
                         u4710 1B54                           u4550 20C0                           u4390 1F72  
                         u5190 2A36                           u4800 1DB0                           u4720 1CCA  
                         u5600 3194                           u6160 1032                           u6240 152A  
                         u3657 31F0                           u5505 2DCA                           u5370 234C  
                         u4810 1DCE                           u3667 3218                           u6307 137A  
                         u5540 2E4C                           u6180 10F2                           u4725 1CC0  
                         u6317 14B4                           u6407 2FC4                           u6327 14E2  
                         u4920 313C                           u6417 2FD8                           u6337 161C  
                         u4770 1D5A                           u5570 30B2                           u6427 2FEC  
                         u6347 32DA                           u6267 10AA                           u4860 3042  
                         u6437 324C                           u6357 2F5A                           u6277 11E4  
                         u5750 0778                           u6447 34D8                           u6367 2F70  
                         u6287 1212                           u5680 2796                           u6377 2F86  
                         u6297 134C                           u5930 0B8C                           u5850 09B6  
                         u6387 2F9C                           u5860 0A02                           u6397 2FB0  
                         u5960 0C1A                           u5890 0A42                           u5990 0D0E  
                         _TMR1 000FCE                   __CFG_PWRT$ON 000000            seleccionarColor@col 002E  
                         _main 1040                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0051                           prodh 000FF4                           prodl 000FF3  
                         start 00D8                  __CFG_IESO$OFF 000000                ___fldiv@new_exp 009E  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                  ___fltol@sign1 0048  
              __end_of___fladd 2156                          ?_main 0001                __end_of___fldiv 240C  
              __end_of___awdiv 3080                __end_of___flneg 3446                __end_of___awmod 3172  
              __end_of___flmul 1E18                __end_of___flsub 32BC                __end_of___fltol 2E74  
              __end_of___lldiv 3102                ___awdiv@divisor 0036                __end_of___llmod 31D8  
                        i2l147 2AE6                ___awdiv@counter 0038                          _PORTB 000F81  
                        _PORTD 000F83                __end_of_calibra 2F3E                __end_of_calcula 2D96  
     __end_of_seleccionarColor 3340                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 3274                __end_of_lcd_lat 34E6  
              __end_of_lcd_dwr 3302                __end_of_lcd_msg 322A                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
              __end_of_dpowers 0691                          _manda 3446                          _first 004F  
                        _scale 1676                __end_of_isdigit 34B6                          _value 0130  
                        main@a 0127                          main@i 012B                          main@r 0123  
                        main@v 011B                __end_of_low_isr 00D8                 __CFG_BOREN$OFF 000000  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
                        wtemp6 0052                __end_of_sprintf 1040                __initialization 33E6  
                 __end_of_main 1676                         ??_main 00E2                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0132                         ?_manda 0001               ___llmod@dividend 002E  
                       ?_scale 008D               ___awdiv@dividend 0034                         _INT0IE 007F94  
                       _INT0IF 007F91                         i1l2373 0080                         i2l3991 2B20  
                       i2l3993 2B22                         _TMR1IE 007CE8                         _TMR1IF 007CF0  
                       _TMR1CS 007E69                         _TMR1IP 007CF8                         _TMR1ON 007E68  
             __end_of___xxtofl 27EE                 __CFG_XINST$OFF 000000               __end_of__powers_ 0635  
             __end_of_lcd_init 2FFC               __end_of_high_isr 2B6E                         ___flge 2B6E  
             __end_of_lcd_putc 337A                      ??___fladd 00C2                         ___wmul 3472  
                    ??___fldiv 0095                      ??___awdiv 0038                      ??___flneg 0032  
               __CFG_STVREN$ON 000000                      ??___awmod 0032                      ??___flmul 0044  
                    ??___flsub 0048                      ??___fltol 009A                      ??___lldiv 0036  
                    ??___llmod 0036                      ??_calibra 0048                      ??_calcula 00AA  
                       _fround 240C  __size_of_prepareForInterrupts 000E                         clear_0 33EC  
                       clear_1 33F8                         clear_2 3404               ___awdiv@quotient 003A  
              ___awmod@divisor 0030                ___awmod@counter 0032                      ??_lcd_cmd 002F  
                    ??_lcd_lat 002E                      ??_lcd_dwr 002F                      ??_lcd_msg 0034  
                    ??_isdigit 002E                   __mediumconst 0000                      ??_low_isr 0019  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
            lcd_gotoxy@ADDRESS 0034                      ??_sprintf 00DE                     ___flge@ff1 002E  
                   ___flge@ff2 0032                   ___xxtofl@arg 0038                   ___xxtofl@exp 0037  
                 ___xxtofl@val 002E                     __accesstop 0080        __end_of__initialization 340A  
              __CFG_PBADEN$OFF 000000                     ___flneg@f1 002E                  ___rparam_used 000001  
                   ___fltol@f1 0096                 __pcstackCOMRAM 0001                  __end_of_manda 3472  
                __end_of_scale 1AC6                     __div_to_l_ 2920                        ??_manda 002E  
              __div_to_l_@exp1 003B                __div_to_l_@cntr 003A                        ??_scale 0048  
              __div_to_l_@quot 0036                   sprintf@width 010C                     __pbssBANK0 00E4  
                   __pbssBANK1 0130                  __div_to_l_@f1 002E                  __div_to_l_@f2 0032  
           __CFG_CCP2MX$PORTBE 000000                        ?___flge 002E                        ?___wmul 002E  
                      ?_fround 008D                        _T1CKPS0 007E6C                        _T1CKPS1 007E6D  
                      _INTEDG0 007F8E                     _lcd_cmd_hf 34B6                      ?___xxtofl 002E  
           calcula@elapsedTime 00AE              ?_seleccionarColor 0001                     _lcd_gotoxy 33B2  
           ??_seleccionarColor 002E                     _finishTime 00E4                      ?_lcd_init 0001  
                    ?_high_isr 0001                      ?_lcd_putc 0001              __end_of__npowers_ 0669  
                      __Hparam 0000                        __Lparam 0000                __size_of___flge 0120  
                      ___fladd 1E18                        ___fldiv 2156                        ___awdiv 2FFC  
                      ___flneg 3418                        ___awmod 3102                        ___flmul 1AC6  
                      ___flsub 3274                        ___fltol 2D96                        ___lldiv 3080  
              __size_of___wmul 0026                        ___llmod 3172                     _fround$876 0095  
                   _fround$877 0091                   __psmallconst 0600                        _calibra 2E74  
                      _calcula 2C8E                        __pcinit 33E6                __size_of_fround 0292  
                      __ramtop 0600                        __ptext0 1040                        __ptext1 06BA  
                      __ptext2 1676                        __ptext3 3498                        __ptext4 240C  
                      __ptext5 3102                        __ptext6 2FFC                        __ptext7 27EE  
                      __ptext8 2920                        __ptext9 3472                        _lcd_cmd 322A  
                      _lcd_lat 34D0                        _lcd_dwr 32BC                        _lcd_msg 31D8  
                    _T1CONbits 000FCD                    ?__div_to_l_ 002E                        _dpowers 0669  
                      _isdigit 3498                     ??___xxtofl 0032               ___awmod@dividend 002E  
                      _low_isr 0018                        _sprintf 06BA                     ??_lcd_init 0031  
                   ??_high_isr 0001                 __pintcode_body 2A48                     ??_lcd_putc 0031  
         end_of_initialization 340A                  __Lmediumconst 0000                        int_func 2A48  
              ___lldiv@divisor 0032                ___lldiv@counter 003A                        postinc0 000FEE  
                      postinc2 000FDE                 __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0032  
                ??__tdiv_to_l_ 0036                    ___fladd@grs 00CD                    ?_lcd_cmd_hf 0001  
                ___xxtofl@sign 0036                    ?_lcd_gotoxy 0031                    ___fldiv@grs 00A0  
                  ___fldiv@rem 009A   __end_of_prepareForInterrupts 34F4                    ___flmul@grs 0082  
                   main@brillo 011F             seleccionarEscala@a 002E            __size_of__div_to_l_ 0128  
               __end_of___flge 2C8E                 __end_of___wmul 3498                 __end_of_fround 269E  
                 calibra@valor 00CE            start_initialization 33E6            __end_of__tdiv_to_l_ 2920  
              high_isr@counter 0017                ___llmod@divisor 0032                ___llmod@counter 0036  
          __size_of_lcd_cmd_hf 001A                       ??___flge 0036            __size_of_lcd_gotoxy 0034  
                     ??___wmul 0032               __CFG_LPT1OSC$OFF 000000                       ??_fround 0048  
                sprintf@tmpval 010E                      ___fladd@a 00BE                      ___fladd@b 00BA  
                   fround@prec 0099                      ___fldiv@a 0091                      ___fldiv@b 008D  
                    ___flmul@a 0040                      ___flmul@b 003C                    __pbssCOMRAM 004A  
                    ___flsub@a 00D2                      ___flsub@b 00CE                  __pcstackBANK0 0080  
                __pcstackBANK1 0100              __size_of___xxtofl 0150              __size_of_lcd_init 00BE  
            __size_of_high_isr 2B66                    sprintf@flag 010A              __size_of_lcd_putc 003A  
                  sprintf@fval 0114                    sprintf@prec 0118      __size_of_seleccionarColor 003E  
                    __pintcode 0008                       ?___fladd 00BA                       ?___fldiv 008D  
                     ?___awdiv 0034                       ?___flneg 002E                       ?___awmod 002E  
                     ?___flmul 003C                       ?___flsub 00CE                       ?___fltol 0096  
                     ?___lldiv 002E                       ?___llmod 002E                      __npowers_ 0635  
                     ?_calibra 00CE                       ?_calcula 00A6                    __pintcodelo 0018  
         _prepareForInterrupts 34E6                    __tdiv_to_l_ 27EE                       ?_lcd_cmd 0001  
                     ?_lcd_lat 0001                       ?_lcd_dwr 0001                       ?_lcd_msg 0032  
                 ??__div_to_l_ 0036                    __smallconst 0600                       ?_isdigit 0001  
                    calibra@fd 00D2                      calibra@fw 00D6                       ?_low_isr 0001  
                    _scale$878 0091                 __size_of_manda 002C                       ?_sprintf 00D6  
               __size_of_scale 0450                 ___wmul@product 0032              _seleccionarEscala 337A  
           ?_seleccionarEscala 0001             __end_of__div_to_l_ 2A48               __CFG_WDTPS$32768 000000  
          ??_seleccionarEscala 002E          ?_prepareForInterrupts 0001              ___wmul@multiplier 002E  
                    _startTime 00E8                      _triggered 004E                   ??_lcd_cmd_hf 002F  
                    lcd_putc@c 0031                   ??_lcd_gotoxy 0032                      manda@dato 002E  
    __end_of_seleccionarEscala 33B2                    calcula@freq 00B2                    calcula@temp 00B6  
                     __Hrparam 0000                       __Lrparam 0000             __end_of_lcd_cmd_hf 34D0  
           __end_of_lcd_gotoxy 33E6               __size_of___fladd 033E               __size_of___fldiv 02B6  
             __size_of___awdiv 0084               __size_of___flneg 002E               __size_of___awmod 0070  
             __size_of___flmul 0352               __size_of___flsub 0048               __size_of___fltol 00DE  
             __size_of___lldiv 0082               __size_of___llmod 0066               __size_of_calibra 00CA  
             __size_of_calcula 0108                    _isdigit$523 002F               __size_of_lcd_cmd 004A  
             __size_of_lcd_lat 0016               __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052  
                   sprintf@exp 0112                     sprintf@val 0106                       ___xxtofl 269E  
             __size_of_isdigit 001E               __size_of_low_isr 00C0                       __ptext10 3172  
                     __ptext11 3080                       __ptext20 2F3E                       __ptext12 2D96  
                     __ptext21 34B6                       __ptext13 3274                       __ptext30 34E6  
                     __ptext22 33B2                       __ptext14 2B6E                       __ptext31 269E  
                     __ptext23 322A                       __ptext15 337A                       __ptext32 1AC6  
                     __ptext24 3446                       __ptext16 3302                       __ptext33 2156  
                     __ptext25 34D0                       __ptext17 31D8                       __ptext26 2E74  
                     __ptext18 3340                       __ptext27 3418                       __ptext19 32BC  
                     __ptext28 1E18                       __ptext29 2C8E                       __powers_ 0601  
                     _lcd_init 2F3E                       _high_isr 0008                       _lcd_putc 3340  
             __size_of_sprintf 0986                  __size_of_main 0636               _seleccionarColor 3302  
       ??_prepareForInterrupts 002E                       int$flags 0051                       lcd_cmd@x 0030  
                     lcd_dwr@x 0030                       lcd_msg@c 0032                       main@freq 012C  
                     isdigit@c 0030                       scale@scl 0095                       intlevel1 0000  
                     intlevel2 0000     __size_of_seleccionarEscala 0038                      sprintf@ap 0104  
             __tdiv_to_l_@exp1 003E               __tdiv_to_l_@cntr 003D                      sprintf@sp 00D6  
             __tdiv_to_l_@quot 0039               ___lldiv@dividend 002E                  _overflowCount 004A  
                 ?__tdiv_to_l_ 002E                       sprintf@c 011A                       sprintf@f 00D8  
             ___lldiv@quotient 0036                  ___fladd@signs 00CA                   ___fladd@aexp 00CB  
                 ___fladd@bexp 00CC  
