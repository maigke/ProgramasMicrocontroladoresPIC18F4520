

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun May 13 05:28:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     __powers_:
    94                           	opt stack 0
    95  000601  0000               	dw	0
    96  000603  3F80               	dw	16256
    97  000605  0000               	dw	0
    98  000607  4120               	dw	16672
    99  000609  0000               	dw	0
   100  00060B  42C8               	dw	17096
   101  00060D  0000               	dw	0
   102  00060F  447A               	dw	17530
   103  000611  4000               	dw	16384
   104  000613  461C               	dw	17948
   105  000615  5000               	dw	20480
   106  000617  47C3               	dw	18371
   107  000619  2400               	dw	9216
   108  00061B  4974               	dw	18804
   109  00061D  9680               	dw	38528
   110  00061F  4B18               	dw	19224
   111  000621  BC20               	dw	48160
   112  000623  4CBE               	dw	19646
   113  000625  6B28               	dw	27432
   114  000627  4E6E               	dw	20078
   115  000629  02F9               	dw	761
   116  00062B  5015               	dw	20501
   117  00062D  78EC               	dw	30956
   118  00062F  60AD               	dw	24749
   119  000631  F2CA               	dw	62154
   120  000633  7149               	dw	29001
   121  000635                     __end_of__powers_:
   122                           	opt stack 0
   123  000635                     __npowers_:
   124                           	opt stack 0
   125  000635  0000               	dw	0
   126  000637  3F80               	dw	16256
   127  000639  CCCD               	dw	52429
   128  00063B  3DCC               	dw	15820
   129  00063D  D70A               	dw	55050
   130  00063F  3C23               	dw	15395
   131  000641  126F               	dw	4719
   132  000643  3A83               	dw	14979
   133  000645  B717               	dw	46871
   134  000647  38D1               	dw	14545
   135  000649  C5AC               	dw	50604
   136  00064B  3727               	dw	14119
   137  00064D  37BD               	dw	14269
   138  00064F  3586               	dw	13702
   139  000651  BF95               	dw	49045
   140  000653  33D6               	dw	13270
   141  000655  CC77               	dw	52343
   142  000657  322B               	dw	12843
   143  000659  705F               	dw	28767
   144  00065B  3089               	dw	12425
   145  00065D  E6FF               	dw	59135
   146  00065F  2EDB               	dw	11995
   147  000661  E508               	dw	58632
   148  000663  1E3C               	dw	7740
   149  000665  4260               	dw	16992
   150  000667  0DA2               	dw	3490
   151  000669                     __end_of__npowers_:
   152                           	opt stack 0
   153  000669                     _dpowers:
   154                           	opt stack 0
   155  000669  0001               	dw	1
   156  00066B  0000               	dw	0
   157  00066D  000A               	dw	10
   158  00066F  0000               	dw	0
   159  000671  0064               	dw	100
   160  000673  0000               	dw	0
   161  000675  03E8               	dw	1000
   162  000677  0000               	dw	0
   163  000679  2710               	dw	10000
   164  00067B  0000               	dw	0
   165  00067D  86A0               	dw	34464
   166  00067F  0001               	dw	1
   167  000681  4240               	dw	16960
   168  000683  000F               	dw	15
   169  000685  9680               	dw	38528
   170  000687  0098               	dw	152
   171  000689  E100               	dw	57600
   172  00068B  05F5               	dw	1525
   173  00068D  CA00               	dw	51712
   174  00068F  3B9A               	dw	15258
   175  000691                     __end_of_dpowers:
   176                           	opt stack 0
   177  0000                     _TMR1	set	4046
   178  0000                     _T1CONbits	set	4045
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTD	set	3971
   181  0000                     _INTEDG0	set	32654
   182  0000                     _INT0IE	set	32660
   183  0000                     _GIEL	set	32662
   184  0000                     _GIEH	set	32663
   185  0000                     _IPEN	set	32391
   186  0000                     _TMR1IE	set	31976
   187  0000                     _TMR1IP	set	31992
   188  0000                     _TMR1ON	set	32360
   189  0000                     _TMR1CS	set	32361
   190  0000                     _T1CKPS0	set	32364
   191  0000                     _T1CKPS1	set	32365
   192  0000                     _INT0IF	set	32657
   193  0000                     _TMR1IF	set	31984
   194  000691                     STR_1:
   195  000691  44                 	db	68	;'D'
   196  000692  65                 	db	101	;'e'
   197  000693  74                 	db	116	;'t'
   198  000694  65                 	db	101	;'e'
   199  000695  63                 	db	99	;'c'
   200  000696  74                 	db	116	;'t'
   201  000697  6F                 	db	111	;'o'
   202  000698  72                 	db	114	;'r'
   203  000699  20                 	db	32
   204  00069A  64                 	db	100	;'d'
   205  00069B  65                 	db	101	;'e'
   206  00069C  20                 	db	32
   207  00069D  63                 	db	99	;'c'
   208  00069E  6F                 	db	111	;'o'
   209  00069F  6C                 	db	108	;'l'
   210  0006A0  6F                 	db	111	;'o'
   211  0006A1  72                 	db	114	;'r'
   212  0006A2  00                 	db	0
   213  0006A3                     STR_2:
   214  0006A3  25                 	db	37
   215  0006A4  35                 	db	53	;'5'
   216  0006A5  2E                 	db	46
   217  0006A6  33                 	db	51	;'3'
   218  0006A7  66                 	db	102	;'f'
   219  0006A8  00                 	db	0
   220  0006A9                     STR_9:
   221  0006A9  41                 	db	65	;'A'
   222  0006AA  3D                 	db	61	;'='
   223  0006AB  20                 	db	32
   224  0006AC  00                 	db	0
   225  0006AD                     STR_3:
   226  0006AD  42                 	db	66	;'B'
   227  0006AE  3D                 	db	61	;'='
   228  0006AF  20                 	db	32
   229  0006B0  00                 	db	0
   230  0006B1                     STR_5:
   231  0006B1  52                 	db	82	;'R'
   232  0006B2  3D                 	db	61	;'='
   233  0006B3  20                 	db	32
   234  0006B4  00                 	db	0
   235  0006B5                     STR_7:
   236  0006B5  56                 	db	86	;'V'
   237  0006B6  3D                 	db	61	;'='
   238  0006B7  20                 	db	32
   239  0006B8  00                 	db	0
   240  0000                     
   241                           ; #config settings
   242  0006B9  00                 	db	0	; dummy byte at the end
   243  0000                     
   244                           	psect	cinit
   245  003402                     __pcinit:
   246                           	opt stack 0
   247  003402                     start_initialization:
   248                           	opt stack 0
   249  003402                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to BANK1 (8 bytes)
   253  003402  EE01  F030         	lfsr	0,__pbssBANK1
   254  003406  0E08               	movlw	8
   255  003408                     clear_0:
   256  003408  6AEE               	clrf	postinc0,c
   257  00340A  06E8               	decf	wreg,f,c
   258  00340C  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to BANK0 (8 bytes)
   261  00340E  EE00  F0E4         	lfsr	0,__pbssBANK0
   262  003412  0E08               	movlw	8
   263  003414                     clear_1:
   264  003414  6AEE               	clrf	postinc0,c
   265  003416  06E8               	decf	wreg,f,c
   266  003418  E1FD               	bnz	clear_1
   267                           
   268                           ; Clear objects allocated to COMRAM (7 bytes)
   269  00341A  EE00  F04A         	lfsr	0,__pbssCOMRAM
   270  00341E  0E07               	movlw	7
   271  003420                     clear_2:
   272  003420  6AEE               	clrf	postinc0,c
   273  003422  06E8               	decf	wreg,f,c
   274  003424  E1FD               	bnz	clear_2
   275  003426                     end_of_initialization:
   276                           	opt stack 0
   277  003426                     __end_of__initialization:
   278                           	opt stack 0
   279  003426  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   280  003428  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   281  00342A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   282  00342C  6EF8               	movwf	tblptru,c
   283  00342E  0100               	movlb	0
   284  003430  EF20  F008         	goto	_main	;jump to C main() function
   285                           tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           
   289                           	psect	bssCOMRAM
   290  00004A                     __pbssCOMRAM:
   291                           	opt stack 0
   292  00004A                     _overflowCount:
   293                           	opt stack 0
   294  00004A                     	ds	4
   295  00004E                     _triggered:
   296                           	opt stack 0
   297  00004E                     	ds	1
   298  00004F                     _first:
   299                           	opt stack 0
   300  00004F                     	ds	1
   301  000050                     _lcd:
   302                           	opt stack 0
   303  000050                     	ds	1
   304                           tblptru	equ	0xFF8
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK0
   309  0000E4                     __pbssBANK0:
   310                           	opt stack 0
   311  0000E4                     _finishTime:
   312                           	opt stack 0
   313  0000E4                     	ds	4
   314  0000E8                     _startTime:
   315                           	opt stack 0
   316  0000E8                     	ds	4
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK1
   322  000130                     __pbssBANK1:
   323                           	opt stack 0
   324  000130                     _value:
   325                           	opt stack 0
   326  000130                     	ds	8
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackBANK1
   332  000100                     __pcstackBANK1:
   333                           	opt stack 0
   334  000100                     _sprintf$880:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x0
   338  000100                     	ds	4
   339  000104                     sprintf@ap:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x4
   343  000104                     	ds	2
   344  000106                     sprintf@val:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x6
   348  000106                     	ds	4
   349  00010A                     sprintf@flag:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0xA
   353  00010A                     	ds	2
   354  00010C                     sprintf@width:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0xC
   358  00010C                     	ds	2
   359  00010E                     sprintf@tmpval:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0xE
   363  00010E                     	ds	4
   364  000112                     sprintf@exp:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x12
   368  000112                     	ds	2
   369  000114                     sprintf@fval:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x14
   373  000114                     	ds	4
   374  000118                     sprintf@prec:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x18
   378  000118                     	ds	2
   379  00011A                     sprintf@c:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x1A
   383  00011A                     	ds	1
   384  00011B                     main@r:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0x1B
   388  00011B                     	ds	4
   389  00011F                     main@v:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x1F
   393  00011F                     	ds	4
   394  000123                     main@a:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x23
   398  000123                     	ds	4
   399  000127                     main@brillo:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x27
   403  000127                     	ds	4
   404  00012B                     main@i:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2B
   408  00012B                     	ds	1
   409  00012C                     main@freq:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x2C
   413  00012C                     	ds	4
   414                           tblptru	equ	0xFF8
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418                           	psect	cstackBANK0
   419  000080                     __pcstackBANK0:
   420                           	opt stack 0
   421  000080                     ___flmul@sign:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x0
   425  000080                     	ds	1
   426  000081                     ___flmul@aexp:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x1
   430  000081                     	ds	1
   431  000082                     ___flmul@grs:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x2
   435  000082                     	ds	4
   436  000086                     ___flmul@bexp:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x6
   440  000086                     	ds	1
   441  000087                     ___flmul@prod:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x7
   445  000087                     	ds	4
   446  00008B                     ___flmul@temp:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xB
   450  00008B                     	ds	2
   451  00008D                     ?___fldiv:
   452                           	opt stack 0
   453  00008D                     ?_fround:
   454                           	opt stack 0
   455  00008D                     ?_scale:
   456                           	opt stack 0
   457  00008D                     ___fldiv@b:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0xD
   461  00008D                     	ds	4
   462  000091                     ___fldiv@a:
   463                           	opt stack 0
   464  000091                     _fround$878:
   465                           	opt stack 0
   466  000091                     _scale$879:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x11
   470  000091                     	ds	4
   471  000095                     ??___fldiv:
   472  000095                     scale@scl:
   473                           	opt stack 0
   474  000095                     _fround$877:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x15
   478  000095                     	ds	1
   479  000096                     ?___fltol:
   480                           	opt stack 0
   481  000096                     ___fltol@f1:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x16
   485  000096                     	ds	3
   486  000099                     fround@prec:
   487                           	opt stack 0
   488  000099                     ___fldiv@sign:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  000099                     	ds	1
   493  00009A                     ??___fltol:
   494  00009A                     ___fldiv@rem:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x1A
   498  00009A                     	ds	4
   499  00009E                     ___fldiv@new_exp:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x1E
   503  00009E                     	ds	2
   504  0000A0                     ___fldiv@grs:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x20
   508  0000A0                     	ds	4
   509  0000A4                     ___fldiv@bexp:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x24
   513  0000A4                     	ds	1
   514  0000A5                     ___fldiv@aexp:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x25
   518  0000A5                     	ds	1
   519  0000A6                     ?_calcula:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x26
   523  0000A6                     	ds	4
   524  0000AA                     ??_calcula:
   525                           
   526                           ; 1 bytes @ 0x2A
   527  0000AA                     	ds	4
   528  0000AE                     calcula@elapsedTime:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x2E
   532  0000AE                     	ds	4
   533  0000B2                     calcula@freq:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x32
   537  0000B2                     	ds	4
   538  0000B6                     calcula@temp:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x36
   542  0000B6                     	ds	4
   543  0000BA                     ?___fladd:
   544                           	opt stack 0
   545  0000BA                     ___fladd@b:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x3A
   549  0000BA                     	ds	4
   550  0000BE                     ___fladd@a:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x3E
   554  0000BE                     	ds	4
   555  0000C2                     ??___fladd:
   556                           
   557                           ; 1 bytes @ 0x42
   558  0000C2                     	ds	8
   559  0000CA                     ___fladd@signs:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x4A
   563  0000CA                     	ds	1
   564  0000CB                     ___fladd@aexp:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x4B
   568  0000CB                     	ds	1
   569  0000CC                     ___fladd@bexp:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x4C
   573  0000CC                     	ds	1
   574  0000CD                     ___fladd@grs:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x4D
   578  0000CD                     	ds	1
   579  0000CE                     ?_calibra:
   580                           	opt stack 0
   581  0000CE                     ?___flsub:
   582                           	opt stack 0
   583  0000CE                     calibra@valor:
   584                           	opt stack 0
   585  0000CE                     ___flsub@b:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x4E
   589  0000CE                     	ds	4
   590  0000D2                     calibra@fd:
   591                           	opt stack 0
   592  0000D2                     ___flsub@a:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x52
   596  0000D2                     	ds	4
   597  0000D6                     ?_sprintf:
   598                           	opt stack 0
   599  0000D6                     sprintf@sp:
   600                           	opt stack 0
   601  0000D6                     calibra@fw:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x56
   605  0000D6                     	ds	2
   606  0000D8                     sprintf@f:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x58
   610  0000D8                     	ds	2
   611  0000DA                     calibra@temp:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x5A
   615  0000DA                     	ds	4
   616  0000DE                     ??_sprintf:
   617                           
   618                           ; 1 bytes @ 0x5E
   619  0000DE                     	ds	4
   620  0000E2                     ??_main:
   621                           
   622                           ; 1 bytes @ 0x62
   623  0000E2                     	ds	2
   624                           tblptru	equ	0xFF8
   625                           postinc0	equ	0xFEE
   626                           wreg	equ	0xFE8
   627                           
   628                           	psect	cstackCOMRAM
   629  000001                     __pcstackCOMRAM:
   630                           	opt stack 0
   631  000001                     ??_high_isr:
   632  000001                     
   633                           ; 1 bytes @ 0x0
   634  000001                     	ds	22
   635  000017                     high_isr@counter:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x16
   639  000017                     	ds	2
   640  000019                     ??_low_isr:
   641                           
   642                           ; 1 bytes @ 0x18
   643  000019                     	ds	21
   644  00002E                     ??_isdigit:
   645  00002E                     ??_lcd_lat:
   646  00002E                     ?___wmul:
   647                           	opt stack 0
   648  00002E                     ?___awmod:
   649                           	opt stack 0
   650  00002E                     ?__tdiv_to_l_:
   651                           	opt stack 0
   652  00002E                     ?__div_to_l_:
   653                           	opt stack 0
   654  00002E                     ?___flneg:
   655                           	opt stack 0
   656  00002E                     ?___lldiv:
   657                           	opt stack 0
   658  00002E                     ?___llmod:
   659                           	opt stack 0
   660  00002E                     ?___xxtofl:
   661                           	opt stack 0
   662  00002E                     manda@dato:
   663                           	opt stack 0
   664  00002E                     seleccionarEscala@a:
   665                           	opt stack 0
   666  00002E                     seleccionarColor@col:
   667                           	opt stack 0
   668  00002E                     ___wmul@multiplier:
   669                           	opt stack 0
   670  00002E                     ___awmod@dividend:
   671                           	opt stack 0
   672  00002E                     __div_to_l_@f1:
   673                           	opt stack 0
   674  00002E                     ___flge@ff1:
   675                           	opt stack 0
   676  00002E                     ___flneg@f1:
   677                           	opt stack 0
   678  00002E                     __tdiv_to_l_@f1:
   679                           	opt stack 0
   680  00002E                     ___lldiv@dividend:
   681                           	opt stack 0
   682  00002E                     ___llmod@dividend:
   683                           	opt stack 0
   684  00002E                     ___xxtofl@val:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x2D
   688  00002E                     	ds	1
   689  00002F                     ??_lcd_dwr:
   690  00002F                     ??_lcd_cmd:
   691  00002F                     lcd_cmd_hf@x:
   692                           	opt stack 0
   693  00002F                     _isdigit$524:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2E
   697  00002F                     	ds	1
   698  000030                     lcd_cmd@x:
   699                           	opt stack 0
   700  000030                     lcd_dwr@x:
   701                           	opt stack 0
   702  000030                     isdigit@c:
   703                           	opt stack 0
   704  000030                     ___wmul@multiplicand:
   705                           	opt stack 0
   706  000030                     ___awmod@divisor:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x2F
   710  000030                     	ds	1
   711  000031                     ??_lcd_init:
   712  000031                     lcd_putc@c:
   713                           	opt stack 0
   714  000031                     lcd_gotoxy@y:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x30
   718  000031                     	ds	1
   719  000032                     ??_lcd_gotoxy:
   720  000032                     ??___xxtofl:
   721  000032                     ___awmod@counter:
   722                           	opt stack 0
   723  000032                     lcd_msg@c:
   724                           	opt stack 0
   725  000032                     ___wmul@product:
   726                           	opt stack 0
   727  000032                     __div_to_l_@f2:
   728                           	opt stack 0
   729  000032                     ___flge@ff2:
   730                           	opt stack 0
   731  000032                     __tdiv_to_l_@f2:
   732                           	opt stack 0
   733  000032                     ___lldiv@divisor:
   734                           	opt stack 0
   735  000032                     ___llmod@divisor:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x31
   739  000032                     	ds	1
   740  000033                     lcd_gotoxy@x:
   741                           	opt stack 0
   742  000033                     ___awmod@sign:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x32
   746  000033                     	ds	1
   747  000034                     ?___awdiv:
   748                           	opt stack 0
   749  000034                     lcd_gotoxy@ADDRESS:
   750                           	opt stack 0
   751  000034                     ___awdiv@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x33
   755  000034                     	ds	2
   756  000036                     ??__tdiv_to_l_:
   757  000036                     ??___flge:
   758  000036                     ___llmod@counter:
   759                           	opt stack 0
   760  000036                     ___xxtofl@sign:
   761                           	opt stack 0
   762  000036                     ___awdiv@divisor:
   763                           	opt stack 0
   764  000036                     __div_to_l_@quot:
   765                           	opt stack 0
   766  000036                     ___lldiv@quotient:
   767                           	opt stack 0
   768                           
   769                           ; 4 bytes @ 0x35
   770  000036                     	ds	1
   771  000037                     ___xxtofl@exp:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x36
   775  000037                     	ds	1
   776  000038                     ___awdiv@counter:
   777                           	opt stack 0
   778  000038                     ___xxtofl@arg:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x37
   782  000038                     	ds	1
   783  000039                     ___awdiv@sign:
   784                           	opt stack 0
   785  000039                     __tdiv_to_l_@quot:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x38
   789  000039                     	ds	1
   790  00003A                     __div_to_l_@cntr:
   791                           	opt stack 0
   792  00003A                     ___lldiv@counter:
   793                           	opt stack 0
   794  00003A                     ___awdiv@quotient:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x39
   798  00003A                     	ds	1
   799  00003B                     __div_to_l_@exp1:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3A
   803  00003B                     	ds	1
   804  00003C                     ?___flmul:
   805                           	opt stack 0
   806  00003C                     ___flmul@b:
   807                           	opt stack 0
   808                           
   809                           ; 4 bytes @ 0x3B
   810  00003C                     	ds	1
   811  00003D                     __tdiv_to_l_@cntr:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x3C
   815  00003D                     	ds	1
   816  00003E                     __tdiv_to_l_@exp1:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x3D
   820  00003E                     	ds	2
   821  000040                     ___flmul@a:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x3F
   825  000040                     	ds	4
   826  000044                     ??___flmul:
   827                           
   828                           ; 1 bytes @ 0x43
   829  000044                     	ds	4
   830  000048                     ___fltol@sign1:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x47
   834  000048                     	ds	1
   835  000049                     ___fltol@exp1:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x48
   839  000049                     	ds	1
   840                           tblptru	equ	0xFF8
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           
   844 ;;
   845 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   846 ;;
   847 ;; *************** function _main *****************
   848 ;; Defined at:
   849 ;;		line 169 in file "color_3.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  freq            4   44[BANK1 ] float 
   854 ;;  brillo          4   39[BANK1 ] float 
   855 ;;  a               4   35[BANK1 ] float 
   856 ;;  v               4   31[BANK1 ] float 
   857 ;;  r               4   27[BANK1 ] float 
   858 ;;  i               1   43[BANK1 ] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   868 ;;      Params:         0       0       0       0       0       0       0
   869 ;;      Locals:         0       0      21       0       0       0       0
   870 ;;      Temps:          0       2       0       0       0       0       0
   871 ;;      Totals:         0       2      21       0       0       0       0
   872 ;;Total ram usage:       23 bytes
   873 ;; Hardware stack levels required when called:    6
   874 ;; This function calls:
   875 ;;		___fladd
   876 ;;		___fldiv
   877 ;;		_calcula
   878 ;;		_calibra
   879 ;;		_lcd_gotoxy
   880 ;;		_lcd_init
   881 ;;		_lcd_msg
   882 ;;		_prepareForInterrupts
   883 ;;		_seleccionarColor
   884 ;;		_seleccionarEscala
   885 ;;		_sprintf
   886 ;; This function is called by:
   887 ;;		Startup code after reset
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text0
   892  001040                     __ptext0:
   893                           	opt stack 0
   894  001040                     _main:
   895                           	opt stack 25
   896                           
   897                           ;color_3.c: 171: char i;
   898                           ;color_3.c: 172: float freq=0.0;
   899                           
   900                           ;incstack = 0
   901  001040  0E00               	movlw	0
   902  001042  0101               	movlb	1	; () banked
   903  001044  6F2C               	movwf	main@freq& (0+255),b
   904  001046  0E00               	movlw	0
   905  001048  6F2D               	movwf	(main@freq+1)& (0+255),b
   906  00104A  0E00               	movlw	0
   907  00104C  6F2E               	movwf	(main@freq+2)& (0+255),b
   908  00104E  0E00               	movlw	0
   909  001050  6F2F               	movwf	(main@freq+3)& (0+255),b
   910                           
   911                           ; BSR set to: 1
   912                           ;color_3.c: 173: float r,v,a,brillo;
   913                           ;color_3.c: 175: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
   914  001052  9695               	bcf	3989,3,c	;volatile
   915                           
   916                           ; BSR set to: 1
   917                           ;color_3.c: 176: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
   918  001054  9495               	bcf	3989,2,c	;volatile
   919                           
   920                           ; BSR set to: 1
   921                           ;color_3.c: 177: (*(&(*(&PORTD + 0x12))) &=~ (1<<(1)));
   922  001056  9295               	bcf	3989,1,c	;volatile
   923                           
   924                           ; BSR set to: 1
   925                           ;color_3.c: 178: (*(&(*(&PORTD + 0x12))) &=~ (1<<(0)));
   926  001058  9095               	bcf	3989,0,c	;volatile
   927                           
   928                           ; BSR set to: 1
   929                           ;color_3.c: 179: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
   930  00105A  9895               	bcf	3989,4,c	;volatile
   931                           
   932                           ; BSR set to: 1
   933                           ;color_3.c: 181: lcd_init();
   934  00105C  ECAD  F017         	call	_lcd_init	;wreg free
   935                           
   936                           ;color_3.c: 182: lcd_msg("Detector de color");
   937  001060  0E91               	movlw	low STR_1
   938  001062  6E32               	movwf	lcd_msg@c,c
   939  001064  0E06               	movlw	high STR_1
   940  001066  6E33               	movwf	lcd_msg@c+1,c
   941  001068  ECFA  F018         	call	_lcd_msg	;wreg free
   942                           
   943                           ;color_3.c: 189: T1CONbits.RD16 = 1;
   944  00106C  8ECD               	bsf	4045,7,c	;volatile
   945                           
   946                           ;color_3.c: 190: T1CKPS1 = 0;
   947  00106E  9ACD               	bcf	4045,5,c	;volatile
   948                           
   949                           ;color_3.c: 191: T1CKPS0 = 0;
   950  001070  98CD               	bcf	4045,4,c	;volatile
   951                           
   952                           ;color_3.c: 192: TMR1CS = 0;
   953  001072  92CD               	bcf	4045,1,c	;volatile
   954                           
   955                           ;color_3.c: 193: TMR1ON = 1;
   956  001074  80CD               	bsf	4045,0,c	;volatile
   957                           
   958                           ;color_3.c: 194: TMR1IP = 0;
   959  001076  909F               	bcf	3999,0,c	;volatile
   960                           
   961                           ;color_3.c: 195: TMR1IE = 1;
   962  001078  809D               	bsf	3997,0,c	;volatile
   963                           
   964                           ;color_3.c: 197: prepareForInterrupts ();
   965  00107A  EC81  F01A         	call	_prepareForInterrupts	;wreg free
   966                           
   967                           ;color_3.c: 201: IPEN = 1;
   968  00107E  8ED0               	bsf	4048,7,c	;volatile
   969                           
   970                           ;color_3.c: 202: GIEH = 1;
   971  001080  8EF2               	bsf	intcon,7,c	;volatile
   972                           
   973                           ;color_3.c: 203: GIEL = 1;
   974  001082  8CF2               	bsf	intcon,6,c	;volatile
   975                           
   976                           ;color_3.c: 211: seleccionarEscala(baja);
   977  001084  0E02               	movlw	2
   978  001086  ECCB  F019         	call	_seleccionarEscala
   979  00108A                     
   980                           ;color_3.c: 216: {
   981                           ;color_3.c: 218: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
   982  00108A  0E10               	movlw	16
   983  00108C  1A8C               	xorwf	3980,f,c	;volatile
   984                           
   985                           ;color_3.c: 219: seleccionarColor(sf);
   986  00108E  0E02               	movlw	2
   987  001090  EC8F  F019         	call	_seleccionarColor
   988                           
   989                           ;color_3.c: 220: for (i = 0 ;i < 30; i++)
   990  001094  0E00               	movlw	0
   991  001096  0101               	movlb	1	; () banked
   992  001098  6F2B               	movwf	main@i& (0+255),b
   993  00109A                     l5433:
   994                           
   995                           ; BSR set to: 1
   996  00109A  0E1D               	movlw	29
   997  00109C  652B               	cpfsgt	main@i& (0+255),b
   998  00109E  D001               	goto	l153
   999  0010A0  D028               	goto	u6190
  1000  0010A2                     l153:
  1001                           
  1002                           ; BSR set to: 1
  1003                           ;color_3.c: 221: {
  1004                           ;color_3.c: 222: _delay((unsigned long)((10)*(16000000/4000.0)));
  1005                           
  1006                           ; BSR set to: 1
  1007  0010A2  0E34               	movlw	52
  1008  0010A4  0100               	movlb	0	; () banked
  1009  0010A6  6FE2               	movwf	??_main& (0+255),b
  1010  0010A8  0EF1               	movlw	241
  1011  0010AA                     u6267:
  1012  0010AA  2EE8               	decfsz	wreg,f,c
  1013  0010AC  D7FE               	bra	u6267
  1014  0010AE  2FE2               	decfsz	??_main& (0+255),f,b
  1015  0010B0  D7FC               	bra	u6267
  1016  0010B2  D000               	nop2	
  1017                           
  1018                           ;color_3.c: 223: freq+= calcula();
  1019  0010B4  C12C  F0BA         	movff	main@freq,___fladd@b
  1020  0010B8  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1021  0010BC  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1022  0010C0  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1023  0010C4  EC26  F016         	call	_calcula	;wreg free
  1024  0010C8  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1025  0010CC  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1026  0010D0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1027  0010D4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1028  0010D8  ECEB  F00E         	call	___fladd	;wreg free
  1029  0010DC  C0BA  F12C         	movff	?___fladd,main@freq
  1030  0010E0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1031  0010E4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1032  0010E8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1033  0010EC  0101               	movlb	1	; () banked
  1034  0010EE  2B2B               	incf	main@i& (0+255),f,b
  1035  0010F0  D7D4               	goto	l5433
  1036  0010F2                     u6190:
  1037                           
  1038                           ; BSR set to: 1
  1039                           ;color_3.c: 224: }
  1040                           ;color_3.c: 225: freq/=30;
  1041                           
  1042                           ; BSR set to: 1
  1043  0010F2  C12C  F08D         	movff	main@freq,___fldiv@b
  1044  0010F6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1045  0010FA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1046  0010FE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1047  001102  0E00               	movlw	0
  1048  001104  0100               	movlb	0	; () banked
  1049  001106  6F91               	movwf	___fldiv@a& (0+255),b
  1050  001108  0E00               	movlw	0
  1051  00110A  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1052  00110C  0EF0               	movlw	240
  1053  00110E  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1054  001110  0E41               	movlw	65
  1055  001112  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1056  001114  EC8A  F010         	call	___fldiv	;wreg free
  1057  001118  C08D  F12C         	movff	?___fldiv,main@freq
  1058  00111C  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1059  001120  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1060  001124  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1061                           
  1062                           ;color_3.c: 226: brillo = freq;
  1063  001128  C12C  F127         	movff	main@freq,main@brillo
  1064  00112C  C12D  F128         	movff	main@freq+1,main@brillo+1
  1065  001130  C12E  F129         	movff	main@freq+2,main@brillo+2
  1066  001134  C12F  F12A         	movff	main@freq+3,main@brillo+3
  1067                           
  1068                           ;color_3.c: 227: freq = calibra(brillo,1883,8205);
  1069  001138  C127  F0CE         	movff	main@brillo,calibra@valor
  1070  00113C  C128  F0CF         	movff	main@brillo+1,calibra@valor+1
  1071  001140  C129  F0D0         	movff	main@brillo+2,calibra@valor+2
  1072  001144  C12A  F0D1         	movff	main@brillo+3,calibra@valor+3
  1073  001148  0E00               	movlw	0
  1074  00114A  0100               	movlb	0	; () banked
  1075  00114C  6FD2               	movwf	calibra@fd& (0+255),b
  1076  00114E  0E60               	movlw	96
  1077  001150  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1078  001152  0EEB               	movlw	235
  1079  001154  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1080  001156  0E44               	movlw	68
  1081  001158  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1082  00115A  0E00               	movlw	0
  1083  00115C  6FD6               	movwf	calibra@fw& (0+255),b
  1084  00115E  0E34               	movlw	52
  1085  001160  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1086  001162  0E00               	movlw	0
  1087  001164  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1088  001166  0E46               	movlw	70
  1089  001168  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1090  00116A  ECB3  F016         	call	_calibra	;wreg free
  1091  00116E  C0CE  F12C         	movff	?_calibra,main@freq
  1092  001172  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1093  001176  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1094  00117A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1095                           
  1096                           ;color_3.c: 228: sprintf(value,"%5.3f",freq);
  1097  00117E  0E30               	movlw	low _value
  1098  001180  0100               	movlb	0	; () banked
  1099  001182  6FD6               	movwf	sprintf@sp& (0+255),b
  1100  001184  0E01               	movlw	high _value
  1101  001186  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1102  001188  0EA3               	movlw	low STR_2
  1103  00118A  6FD8               	movwf	sprintf@f& (0+255),b
  1104  00118C  0E06               	movlw	high STR_2
  1105  00118E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1106  001190  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1107  001194  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1108  001198  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1109  00119C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1110  0011A0  EC5D  F003         	call	_sprintf	;wreg free
  1111                           
  1112                           ;color_3.c: 229: lcd_gotoxy(1,2);
  1113  0011A4  0E02               	movlw	2
  1114  0011A6  6E31               	movwf	lcd_gotoxy@y,c
  1115  0011A8  0E01               	movlw	1
  1116  0011AA  ECE7  F019         	call	_lcd_gotoxy
  1117                           
  1118                           ;color_3.c: 230: lcd_msg("B= ");
  1119  0011AE  0EAD               	movlw	low STR_3
  1120  0011B0  6E32               	movwf	lcd_msg@c,c
  1121  0011B2  0E06               	movlw	high STR_3
  1122  0011B4  6E33               	movwf	lcd_msg@c+1,c
  1123  0011B6  ECFA  F018         	call	_lcd_msg	;wreg free
  1124                           
  1125                           ;color_3.c: 231: lcd_msg(value);
  1126  0011BA  0E30               	movlw	low _value
  1127  0011BC  6E32               	movwf	lcd_msg@c,c
  1128  0011BE  0E01               	movlw	high _value
  1129  0011C0  6E33               	movwf	lcd_msg@c+1,c
  1130  0011C2  ECFA  F018         	call	_lcd_msg	;wreg free
  1131                           
  1132                           ;color_3.c: 232: freq=0.0;
  1133  0011C6  0E00               	movlw	0
  1134  0011C8  0101               	movlb	1	; () banked
  1135  0011CA  6F2C               	movwf	main@freq& (0+255),b
  1136  0011CC  0E00               	movlw	0
  1137  0011CE  6F2D               	movwf	(main@freq+1)& (0+255),b
  1138  0011D0  0E00               	movlw	0
  1139  0011D2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1140  0011D4  0E00               	movlw	0
  1141  0011D6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1142                           
  1143                           ; BSR set to: 1
  1144                           ;color_3.c: 233: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1145  0011D8  0E1F               	movlw	31
  1146  0011DA  0100               	movlb	0	; () banked
  1147  0011DC  6FE3               	movwf	(??_main+1)& (0+255),b
  1148  0011DE  0E71               	movlw	113
  1149  0011E0  6FE2               	movwf	??_main& (0+255),b
  1150  0011E2  0E1E               	movlw	30
  1151  0011E4                     u6277:
  1152  0011E4  2EE8               	decfsz	wreg,f,c
  1153  0011E6  D7FE               	bra	u6277
  1154  0011E8  2FE2               	decfsz	??_main& (0+255),f,b
  1155  0011EA  D7FC               	bra	u6277
  1156  0011EC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1157  0011EE  D7FA               	bra	u6277
  1158  0011F0  F000               	nop	
  1159                           
  1160                           ;color_3.c: 237: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1161  0011F2  0E10               	movlw	16
  1162  0011F4  1A8C               	xorwf	3980,f,c	;volatile
  1163                           
  1164                           ;color_3.c: 238: seleccionarColor(rojo);
  1165  0011F6  0E00               	movlw	0
  1166  0011F8  EC8F  F019         	call	_seleccionarColor
  1167                           
  1168                           ;color_3.c: 239: for (i = 0 ;i < 30; i++)
  1169  0011FC  0E00               	movlw	0
  1170  0011FE  0101               	movlb	1	; () banked
  1171  001200  6F2B               	movwf	main@i& (0+255),b
  1172  001202                     l5469:
  1173                           
  1174                           ; BSR set to: 1
  1175  001202  0E1D               	movlw	29
  1176  001204  652B               	cpfsgt	main@i& (0+255),b
  1177  001206  D001               	goto	l155
  1178  001208  D028               	goto	u6210
  1179  00120A                     l155:
  1180                           
  1181                           ; BSR set to: 1
  1182                           ;color_3.c: 240: {
  1183                           ;color_3.c: 241: _delay((unsigned long)((10)*(16000000/4000.0)));
  1184                           
  1185                           ; BSR set to: 1
  1186  00120A  0E34               	movlw	52
  1187  00120C  0100               	movlb	0	; () banked
  1188  00120E  6FE2               	movwf	??_main& (0+255),b
  1189  001210  0EF1               	movlw	241
  1190  001212                     u6287:
  1191  001212  2EE8               	decfsz	wreg,f,c
  1192  001214  D7FE               	bra	u6287
  1193  001216  2FE2               	decfsz	??_main& (0+255),f,b
  1194  001218  D7FC               	bra	u6287
  1195  00121A  D000               	nop2	
  1196                           
  1197                           ;color_3.c: 242: freq+= calcula();
  1198  00121C  C12C  F0BA         	movff	main@freq,___fladd@b
  1199  001220  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1200  001224  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1201  001228  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1202  00122C  EC26  F016         	call	_calcula	;wreg free
  1203  001230  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1204  001234  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1205  001238  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1206  00123C  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1207  001240  ECEB  F00E         	call	___fladd	;wreg free
  1208  001244  C0BA  F12C         	movff	?___fladd,main@freq
  1209  001248  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1210  00124C  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1211  001250  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1212  001254  0101               	movlb	1	; () banked
  1213  001256  2B2B               	incf	main@i& (0+255),f,b
  1214  001258  D7D4               	goto	l5469
  1215  00125A                     u6210:
  1216                           
  1217                           ; BSR set to: 1
  1218                           ;color_3.c: 243: }
  1219                           ;color_3.c: 244: freq/=30;
  1220                           
  1221                           ; BSR set to: 1
  1222  00125A  C12C  F08D         	movff	main@freq,___fldiv@b
  1223  00125E  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1224  001262  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1225  001266  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1226  00126A  0E00               	movlw	0
  1227  00126C  0100               	movlb	0	; () banked
  1228  00126E  6F91               	movwf	___fldiv@a& (0+255),b
  1229  001270  0E00               	movlw	0
  1230  001272  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1231  001274  0EF0               	movlw	240
  1232  001276  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1233  001278  0E41               	movlw	65
  1234  00127A  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1235  00127C  EC8A  F010         	call	___fldiv	;wreg free
  1236  001280  C08D  F12C         	movff	?___fldiv,main@freq
  1237  001284  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1238  001288  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1239  00128C  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1240                           
  1241                           ;color_3.c: 245: r=freq;
  1242  001290  C12C  F11B         	movff	main@freq,main@r
  1243  001294  C12D  F11C         	movff	main@freq+1,main@r+1
  1244  001298  C12E  F11D         	movff	main@freq+2,main@r+2
  1245  00129C  C12F  F11E         	movff	main@freq+3,main@r+3
  1246                           
  1247                           ;color_3.c: 246: freq = calibra(r,743.4,2951.7);
  1248  0012A0  C11B  F0CE         	movff	main@r,calibra@valor
  1249  0012A4  C11C  F0CF         	movff	main@r+1,calibra@valor+1
  1250  0012A8  C11D  F0D0         	movff	main@r+2,calibra@valor+2
  1251  0012AC  C11E  F0D1         	movff	main@r+3,calibra@valor+3
  1252  0012B0  0E9A               	movlw	154
  1253  0012B2  0100               	movlb	0	; () banked
  1254  0012B4  6FD2               	movwf	calibra@fd& (0+255),b
  1255  0012B6  0ED9               	movlw	217
  1256  0012B8  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1257  0012BA  0E39               	movlw	57
  1258  0012BC  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1259  0012BE  0E44               	movlw	68
  1260  0012C0  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1261  0012C2  0E33               	movlw	51
  1262  0012C4  6FD6               	movwf	calibra@fw& (0+255),b
  1263  0012C6  0E7B               	movlw	123
  1264  0012C8  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1265  0012CA  0E38               	movlw	56
  1266  0012CC  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1267  0012CE  0E45               	movlw	69
  1268  0012D0  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1269  0012D2  ECB3  F016         	call	_calibra	;wreg free
  1270  0012D6  C0CE  F12C         	movff	?_calibra,main@freq
  1271  0012DA  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1272  0012DE  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1273  0012E2  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1274                           
  1275                           ;color_3.c: 247: sprintf(value,"%5.3f",freq);
  1276  0012E6  0E30               	movlw	low _value
  1277  0012E8  0100               	movlb	0	; () banked
  1278  0012EA  6FD6               	movwf	sprintf@sp& (0+255),b
  1279  0012EC  0E01               	movlw	high _value
  1280  0012EE  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1281  0012F0  0EA3               	movlw	low STR_2
  1282  0012F2  6FD8               	movwf	sprintf@f& (0+255),b
  1283  0012F4  0E06               	movlw	high STR_2
  1284  0012F6  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1285  0012F8  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1286  0012FC  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1287  001300  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1288  001304  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1289  001308  EC5D  F003         	call	_sprintf	;wreg free
  1290                           
  1291                           ;color_3.c: 248: lcd_gotoxy(1,2);
  1292  00130C  0E02               	movlw	2
  1293  00130E  6E31               	movwf	lcd_gotoxy@y,c
  1294  001310  0E01               	movlw	1
  1295  001312  ECE7  F019         	call	_lcd_gotoxy
  1296                           
  1297                           ;color_3.c: 249: lcd_msg("R= ");
  1298  001316  0EB1               	movlw	low STR_5
  1299  001318  6E32               	movwf	lcd_msg@c,c
  1300  00131A  0E06               	movlw	high STR_5
  1301  00131C  6E33               	movwf	lcd_msg@c+1,c
  1302  00131E  ECFA  F018         	call	_lcd_msg	;wreg free
  1303                           
  1304                           ;color_3.c: 250: lcd_msg(value);
  1305  001322  0E30               	movlw	low _value
  1306  001324  6E32               	movwf	lcd_msg@c,c
  1307  001326  0E01               	movlw	high _value
  1308  001328  6E33               	movwf	lcd_msg@c+1,c
  1309  00132A  ECFA  F018         	call	_lcd_msg	;wreg free
  1310                           
  1311                           ;color_3.c: 252: freq=0.0;
  1312  00132E  0E00               	movlw	0
  1313  001330  0101               	movlb	1	; () banked
  1314  001332  6F2C               	movwf	main@freq& (0+255),b
  1315  001334  0E00               	movlw	0
  1316  001336  6F2D               	movwf	(main@freq+1)& (0+255),b
  1317  001338  0E00               	movlw	0
  1318  00133A  6F2E               	movwf	(main@freq+2)& (0+255),b
  1319  00133C  0E00               	movlw	0
  1320  00133E  6F2F               	movwf	(main@freq+3)& (0+255),b
  1321                           
  1322                           ; BSR set to: 1
  1323                           ;color_3.c: 253: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1324  001340  0E1F               	movlw	31
  1325  001342  0100               	movlb	0	; () banked
  1326  001344  6FE3               	movwf	(??_main+1)& (0+255),b
  1327  001346  0E71               	movlw	113
  1328  001348  6FE2               	movwf	??_main& (0+255),b
  1329  00134A  0E1E               	movlw	30
  1330  00134C                     u6297:
  1331  00134C  2EE8               	decfsz	wreg,f,c
  1332  00134E  D7FE               	bra	u6297
  1333  001350  2FE2               	decfsz	??_main& (0+255),f,b
  1334  001352  D7FC               	bra	u6297
  1335  001354  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1336  001356  D7FA               	bra	u6297
  1337  001358  F000               	nop	
  1338                           
  1339                           ;color_3.c: 256: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1340  00135A  0E10               	movlw	16
  1341  00135C  1A8C               	xorwf	3980,f,c	;volatile
  1342                           
  1343                           ;color_3.c: 257: seleccionarColor(verde);
  1344  00135E  0E03               	movlw	3
  1345  001360  EC8F  F019         	call	_seleccionarColor
  1346                           
  1347                           ;color_3.c: 258: for (i = 0 ;i < 30; i++)
  1348  001364  0E00               	movlw	0
  1349  001366  0101               	movlb	1	; () banked
  1350  001368  6F2B               	movwf	main@i& (0+255),b
  1351  00136A                     l5505:
  1352                           
  1353                           ; BSR set to: 1
  1354  00136A  0E1D               	movlw	29
  1355  00136C  652B               	cpfsgt	main@i& (0+255),b
  1356  00136E  D001               	goto	l157
  1357  001370  D028               	goto	u6230
  1358  001372                     l157:
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;color_3.c: 259: {
  1362                           ;color_3.c: 260: _delay((unsigned long)((10)*(16000000/4000.0)));
  1363                           
  1364                           ; BSR set to: 1
  1365  001372  0E34               	movlw	52
  1366  001374  0100               	movlb	0	; () banked
  1367  001376  6FE2               	movwf	??_main& (0+255),b
  1368  001378  0EF1               	movlw	241
  1369  00137A                     u6307:
  1370  00137A  2EE8               	decfsz	wreg,f,c
  1371  00137C  D7FE               	bra	u6307
  1372  00137E  2FE2               	decfsz	??_main& (0+255),f,b
  1373  001380  D7FC               	bra	u6307
  1374  001382  D000               	nop2	
  1375                           
  1376                           ;color_3.c: 261: freq+= calcula();
  1377  001384  C12C  F0BA         	movff	main@freq,___fladd@b
  1378  001388  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1379  00138C  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1380  001390  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1381  001394  EC26  F016         	call	_calcula	;wreg free
  1382  001398  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1383  00139C  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1384  0013A0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1385  0013A4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1386  0013A8  ECEB  F00E         	call	___fladd	;wreg free
  1387  0013AC  C0BA  F12C         	movff	?___fladd,main@freq
  1388  0013B0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1389  0013B4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1390  0013B8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1391  0013BC  0101               	movlb	1	; () banked
  1392  0013BE  2B2B               	incf	main@i& (0+255),f,b
  1393  0013C0  D7D4               	goto	l5505
  1394  0013C2                     u6230:
  1395                           
  1396                           ; BSR set to: 1
  1397                           ;color_3.c: 262: }
  1398                           ;color_3.c: 263: freq/=30;
  1399                           
  1400                           ; BSR set to: 1
  1401  0013C2  C12C  F08D         	movff	main@freq,___fldiv@b
  1402  0013C6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1403  0013CA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1404  0013CE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1405  0013D2  0E00               	movlw	0
  1406  0013D4  0100               	movlb	0	; () banked
  1407  0013D6  6F91               	movwf	___fldiv@a& (0+255),b
  1408  0013D8  0E00               	movlw	0
  1409  0013DA  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1410  0013DC  0EF0               	movlw	240
  1411  0013DE  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1412  0013E0  0E41               	movlw	65
  1413  0013E2  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1414  0013E4  EC8A  F010         	call	___fldiv	;wreg free
  1415  0013E8  C08D  F12C         	movff	?___fldiv,main@freq
  1416  0013EC  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1417  0013F0  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1418  0013F4  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1419                           
  1420                           ;color_3.c: 264: v=freq;
  1421  0013F8  C12C  F11F         	movff	main@freq,main@v
  1422  0013FC  C12D  F120         	movff	main@freq+1,main@v+1
  1423  001400  C12E  F121         	movff	main@freq+2,main@v+2
  1424  001404  C12F  F122         	movff	main@freq+3,main@v+3
  1425                           
  1426                           ;color_3.c: 265: freq = calibra(v,505.7,2442);
  1427  001408  C11F  F0CE         	movff	main@v,calibra@valor
  1428  00140C  C120  F0CF         	movff	main@v+1,calibra@valor+1
  1429  001410  C121  F0D0         	movff	main@v+2,calibra@valor+2
  1430  001414  C122  F0D1         	movff	main@v+3,calibra@valor+3
  1431  001418  0E9A               	movlw	154
  1432  00141A  0100               	movlb	0	; () banked
  1433  00141C  6FD2               	movwf	calibra@fd& (0+255),b
  1434  00141E  0ED9               	movlw	217
  1435  001420  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1436  001422  0EFC               	movlw	252
  1437  001424  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1438  001426  0E43               	movlw	67
  1439  001428  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1440  00142A  0E00               	movlw	0
  1441  00142C  6FD6               	movwf	calibra@fw& (0+255),b
  1442  00142E  0EA0               	movlw	160
  1443  001430  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1444  001432  0E18               	movlw	24
  1445  001434  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1446  001436  0E45               	movlw	69
  1447  001438  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1448  00143A  ECB3  F016         	call	_calibra	;wreg free
  1449  00143E  C0CE  F12C         	movff	?_calibra,main@freq
  1450  001442  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1451  001446  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1452  00144A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1453                           
  1454                           ;color_3.c: 266: sprintf(value,"%5.3f",freq);
  1455  00144E  0E30               	movlw	low _value
  1456  001450  0100               	movlb	0	; () banked
  1457  001452  6FD6               	movwf	sprintf@sp& (0+255),b
  1458  001454  0E01               	movlw	high _value
  1459  001456  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1460  001458  0EA3               	movlw	low STR_2
  1461  00145A  6FD8               	movwf	sprintf@f& (0+255),b
  1462  00145C  0E06               	movlw	high STR_2
  1463  00145E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1464  001460  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1465  001464  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1466  001468  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1467  00146C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1468  001470  EC5D  F003         	call	_sprintf	;wreg free
  1469                           
  1470                           ;color_3.c: 267: lcd_gotoxy(1,2);
  1471  001474  0E02               	movlw	2
  1472  001476  6E31               	movwf	lcd_gotoxy@y,c
  1473  001478  0E01               	movlw	1
  1474  00147A  ECE7  F019         	call	_lcd_gotoxy
  1475                           
  1476                           ;color_3.c: 268: lcd_msg("V= ");
  1477  00147E  0EB5               	movlw	low STR_7
  1478  001480  6E32               	movwf	lcd_msg@c,c
  1479  001482  0E06               	movlw	high STR_7
  1480  001484  6E33               	movwf	lcd_msg@c+1,c
  1481  001486  ECFA  F018         	call	_lcd_msg	;wreg free
  1482                           
  1483                           ;color_3.c: 269: lcd_msg(value);
  1484  00148A  0E30               	movlw	low _value
  1485  00148C  6E32               	movwf	lcd_msg@c,c
  1486  00148E  0E01               	movlw	high _value
  1487  001490  6E33               	movwf	lcd_msg@c+1,c
  1488  001492  ECFA  F018         	call	_lcd_msg	;wreg free
  1489                           
  1490                           ;color_3.c: 270: freq=0.0;
  1491  001496  0E00               	movlw	0
  1492  001498  0101               	movlb	1	; () banked
  1493  00149A  6F2C               	movwf	main@freq& (0+255),b
  1494  00149C  0E00               	movlw	0
  1495  00149E  6F2D               	movwf	(main@freq+1)& (0+255),b
  1496  0014A0  0E00               	movlw	0
  1497  0014A2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1498  0014A4  0E00               	movlw	0
  1499  0014A6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1500                           
  1501                           ; BSR set to: 1
  1502                           ;color_3.c: 271: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1503  0014A8  0E1F               	movlw	31
  1504  0014AA  0100               	movlb	0	; () banked
  1505  0014AC  6FE3               	movwf	(??_main+1)& (0+255),b
  1506  0014AE  0E71               	movlw	113
  1507  0014B0  6FE2               	movwf	??_main& (0+255),b
  1508  0014B2  0E1E               	movlw	30
  1509  0014B4                     u6317:
  1510  0014B4  2EE8               	decfsz	wreg,f,c
  1511  0014B6  D7FE               	bra	u6317
  1512  0014B8  2FE2               	decfsz	??_main& (0+255),f,b
  1513  0014BA  D7FC               	bra	u6317
  1514  0014BC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1515  0014BE  D7FA               	bra	u6317
  1516  0014C0  F000               	nop	
  1517                           
  1518                           ;color_3.c: 274: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1519  0014C2  0E10               	movlw	16
  1520  0014C4  1A8C               	xorwf	3980,f,c	;volatile
  1521                           
  1522                           ;color_3.c: 275: seleccionarColor(azul);
  1523  0014C6  0E01               	movlw	1
  1524  0014C8  EC8F  F019         	call	_seleccionarColor
  1525                           
  1526                           ;color_3.c: 276: for (i = 0 ;i < 30; i++)
  1527  0014CC  0E00               	movlw	0
  1528  0014CE  0101               	movlb	1	; () banked
  1529  0014D0  6F2B               	movwf	main@i& (0+255),b
  1530  0014D2                     l5541:
  1531                           
  1532                           ; BSR set to: 1
  1533  0014D2  0E1D               	movlw	29
  1534  0014D4  652B               	cpfsgt	main@i& (0+255),b
  1535  0014D6  D001               	goto	l159
  1536  0014D8  D01F               	goto	u6250
  1537  0014DA                     l159:
  1538                           
  1539                           ; BSR set to: 1
  1540                           ;color_3.c: 277: {
  1541                           ;color_3.c: 278: freq+= calcula();
  1542                           
  1543                           ; BSR set to: 1
  1544  0014DA  C12C  F0BA         	movff	main@freq,___fladd@b
  1545  0014DE  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1546  0014E2  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1547  0014E6  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1548  0014EA  EC26  F016         	call	_calcula	;wreg free
  1549  0014EE  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1550  0014F2  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1551  0014F6  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1552  0014FA  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1553  0014FE  ECEB  F00E         	call	___fladd	;wreg free
  1554  001502  C0BA  F12C         	movff	?___fladd,main@freq
  1555  001506  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1556  00150A  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1557  00150E  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1558  001512  0101               	movlb	1	; () banked
  1559  001514  2B2B               	incf	main@i& (0+255),f,b
  1560  001516  D7DD               	goto	l5541
  1561  001518                     u6250:
  1562                           
  1563                           ; BSR set to: 1
  1564                           ;color_3.c: 279: }
  1565                           ;color_3.c: 280: freq/=30;
  1566                           
  1567                           ; BSR set to: 1
  1568  001518  C12C  F08D         	movff	main@freq,___fldiv@b
  1569  00151C  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1570  001520  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1571  001524  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1572  001528  0E00               	movlw	0
  1573  00152A  0100               	movlb	0	; () banked
  1574  00152C  6F91               	movwf	___fldiv@a& (0+255),b
  1575  00152E  0E00               	movlw	0
  1576  001530  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1577  001532  0EF0               	movlw	240
  1578  001534  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1579  001536  0E41               	movlw	65
  1580  001538  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1581  00153A  EC8A  F010         	call	___fldiv	;wreg free
  1582  00153E  C08D  F12C         	movff	?___fldiv,main@freq
  1583  001542  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1584  001546  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1585  00154A  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1586                           
  1587                           ;color_3.c: 281: a=freq;
  1588  00154E  C12C  F123         	movff	main@freq,main@a
  1589  001552  C12D  F124         	movff	main@freq+1,main@a+1
  1590  001556  C12E  F125         	movff	main@freq+2,main@a+2
  1591  00155A  C12F  F126         	movff	main@freq+3,main@a+3
  1592                           
  1593                           ;color_3.c: 282: freq = calibra(a,588.5,3186);
  1594  00155E  C123  F0CE         	movff	main@a,calibra@valor
  1595  001562  C124  F0CF         	movff	main@a+1,calibra@valor+1
  1596  001566  C125  F0D0         	movff	main@a+2,calibra@valor+2
  1597  00156A  C126  F0D1         	movff	main@a+3,calibra@valor+3
  1598  00156E  0E00               	movlw	0
  1599  001570  0100               	movlb	0	; () banked
  1600  001572  6FD2               	movwf	calibra@fd& (0+255),b
  1601  001574  0E20               	movlw	32
  1602  001576  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1603  001578  0E13               	movlw	19
  1604  00157A  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1605  00157C  0E44               	movlw	68
  1606  00157E  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1607  001580  0E00               	movlw	0
  1608  001582  6FD6               	movwf	calibra@fw& (0+255),b
  1609  001584  0E20               	movlw	32
  1610  001586  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1611  001588  0E47               	movlw	71
  1612  00158A  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1613  00158C  0E45               	movlw	69
  1614  00158E  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1615  001590  ECB3  F016         	call	_calibra	;wreg free
  1616  001594  C0CE  F12C         	movff	?_calibra,main@freq
  1617  001598  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1618  00159C  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1619  0015A0  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1620                           
  1621                           ;color_3.c: 283: sprintf(value,"%5.3f",freq);
  1622  0015A4  0E30               	movlw	low _value
  1623  0015A6  0100               	movlb	0	; () banked
  1624  0015A8  6FD6               	movwf	sprintf@sp& (0+255),b
  1625  0015AA  0E01               	movlw	high _value
  1626  0015AC  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1627  0015AE  0EA3               	movlw	low STR_2
  1628  0015B0  6FD8               	movwf	sprintf@f& (0+255),b
  1629  0015B2  0E06               	movlw	high STR_2
  1630  0015B4  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1631  0015B6  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1632  0015BA  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1633  0015BE  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1634  0015C2  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1635  0015C6  EC5D  F003         	call	_sprintf	;wreg free
  1636                           
  1637                           ;color_3.c: 284: lcd_gotoxy(1,2);
  1638  0015CA  0E02               	movlw	2
  1639  0015CC  6E31               	movwf	lcd_gotoxy@y,c
  1640  0015CE  0E01               	movlw	1
  1641  0015D0  ECE7  F019         	call	_lcd_gotoxy
  1642                           
  1643                           ;color_3.c: 285: lcd_msg("A= ");
  1644  0015D4  0EA9               	movlw	low STR_9
  1645  0015D6  6E32               	movwf	lcd_msg@c,c
  1646  0015D8  0E06               	movlw	high STR_9
  1647  0015DA  6E33               	movwf	lcd_msg@c+1,c
  1648  0015DC  ECFA  F018         	call	_lcd_msg	;wreg free
  1649                           
  1650                           ;color_3.c: 286: lcd_msg(value);
  1651  0015E0  0E30               	movlw	low _value
  1652  0015E2  6E32               	movwf	lcd_msg@c,c
  1653  0015E4  0E01               	movlw	high _value
  1654  0015E6  6E33               	movwf	lcd_msg@c+1,c
  1655  0015E8  ECFA  F018         	call	_lcd_msg	;wreg free
  1656                           
  1657                           ;color_3.c: 287: freq=0.0;
  1658  0015EC  0E00               	movlw	0
  1659  0015EE  0101               	movlb	1	; () banked
  1660  0015F0  6F2C               	movwf	main@freq& (0+255),b
  1661  0015F2  0E00               	movlw	0
  1662  0015F4  6F2D               	movwf	(main@freq+1)& (0+255),b
  1663  0015F6  0E00               	movlw	0
  1664  0015F8  6F2E               	movwf	(main@freq+2)& (0+255),b
  1665  0015FA  0E00               	movlw	0
  1666  0015FC  6F2F               	movwf	(main@freq+3)& (0+255),b
  1667                           
  1668                           ; BSR set to: 1
  1669                           ;color_3.c: 288: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1670  0015FE  0E1F               	movlw	31
  1671  001600  0100               	movlb	0	; () banked
  1672  001602  6FE3               	movwf	(??_main+1)& (0+255),b
  1673  001604  0E71               	movlw	113
  1674  001606  6FE2               	movwf	??_main& (0+255),b
  1675  001608  0E1E               	movlw	30
  1676  00160A                     u6327:
  1677  00160A  2EE8               	decfsz	wreg,f,c
  1678  00160C  D7FE               	bra	u6327
  1679  00160E  2FE2               	decfsz	??_main& (0+255),f,b
  1680  001610  D7FC               	bra	u6327
  1681  001612  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1682  001614  D7FA               	bra	u6327
  1683  001616  F000               	nop	
  1684                           
  1685                           ;color_3.c: 290: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1686  001618  0E1F               	movlw	31
  1687  00161A  0100               	movlb	0	; () banked
  1688  00161C  6FE3               	movwf	(??_main+1)& (0+255),b
  1689  00161E  0E71               	movlw	113
  1690  001620  6FE2               	movwf	??_main& (0+255),b
  1691  001622  0E1E               	movlw	30
  1692  001624                     u6337:
  1693  001624  2EE8               	decfsz	wreg,f,c
  1694  001626  D7FE               	bra	u6337
  1695  001628  2FE2               	decfsz	??_main& (0+255),f,b
  1696  00162A  D7FC               	bra	u6337
  1697  00162C  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1698  00162E  D7FA               	bra	u6337
  1699  001630  F000               	nop	
  1700  001632  D52B               	goto	l152
  1701  001634                     __end_of_main:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           intcon	equ	0xFF2
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           
  1708 ;; *************** function _sprintf *****************
  1709 ;; Defined at:
  1710 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  sp              2   86[BANK0 ] PTR unsigned char 
  1713 ;;		 -> value(8), 
  1714 ;;  f               2   88[BANK0 ] PTR const unsigned char 
  1715 ;;		 -> STR_8(6), STR_6(6), STR_4(6), STR_2(6), 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  fval            4   20[BANK1 ] PTR const unsigned char 
  1718 ;;  tmpval          4   14[BANK1 ] struct .
  1719 ;;  val             4    6[BANK1 ] unsigned long 
  1720 ;;  cp              3    0        PTR const unsigned char 
  1721 ;;  prec            2   24[BANK1 ] int 
  1722 ;;  exp             2   18[BANK1 ] int 
  1723 ;;  width           2   12[BANK1 ] int 
  1724 ;;  flag            2   10[BANK1 ] unsigned short 
  1725 ;;  ap              2    4[BANK1 ] PTR void [1]
  1726 ;;		 -> ?_sprintf(2), 
  1727 ;;  len             2    0        unsigned int 
  1728 ;;  c               1   26[BANK1 ] char 
  1729 ;;  d               1    0        unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  2   86[BANK0 ] int 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1739 ;;      Params:         0       8       0       0       0       0       0
  1740 ;;      Locals:         0       0      27       0       0       0       0
  1741 ;;      Temps:          0       4       0       0       0       0       0
  1742 ;;      Totals:         0      12      27       0       0       0       0
  1743 ;;Total ram usage:       39 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    4
  1746 ;; This function calls:
  1747 ;;		___awdiv
  1748 ;;		___fladd
  1749 ;;		___flge
  1750 ;;		___flmul
  1751 ;;		___flneg
  1752 ;;		___flsub
  1753 ;;		___fltol
  1754 ;;		___lldiv
  1755 ;;		___llmod
  1756 ;;		___wmul
  1757 ;;		___xxtofl
  1758 ;;		__div_to_l_
  1759 ;;		__tdiv_to_l_
  1760 ;;		_fround
  1761 ;;		_isdigit
  1762 ;;		_scale
  1763 ;; This function is called by:
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text1
  1769  0006BA                     __ptext1:
  1770                           	opt stack 0
  1771  0006BA                     _sprintf:
  1772                           	opt stack 26
  1773                           
  1774                           ;doprnt.c: 494: va_list ap;
  1775                           ;doprnt.c: 499: signed char c;
  1776                           ;doprnt.c: 501: int width;
  1777                           ;doprnt.c: 504: int prec;
  1778                           ;doprnt.c: 508: unsigned short flag;
  1779                           ;doprnt.c: 515: char d;
  1780                           ;doprnt.c: 516: double fval;
  1781                           ;doprnt.c: 517: int exp;
  1782                           ;doprnt.c: 523: union {
  1783                           ;doprnt.c: 524: unsigned long vd;
  1784                           ;doprnt.c: 525: double integ;
  1785                           ;doprnt.c: 526: } tmpval;
  1786                           ;doprnt.c: 528: unsigned long val;
  1787                           ;doprnt.c: 529: unsigned len;
  1788                           ;doprnt.c: 530: const char * cp;
  1789                           ;doprnt.c: 533: *ap = __va_start();
  1790                           
  1791                           ;incstack = 0
  1792  0006BA  0EDA               	movlw	low (?_sprintf+4)
  1793  0006BC  0101               	movlb	1	; () banked
  1794  0006BE  6F04               	movwf	sprintf@ap& (0+255),b
  1795  0006C0  0E00               	movlw	high (?_sprintf+4)
  1796  0006C2  6F05               	movwf	(sprintf@ap+1)& (0+255),b
  1797                           
  1798                           ;doprnt.c: 536: while(c = *f++) {
  1799  0006C4  EF0A  F008         	goto	l302
  1800  0006C8                     
  1801                           ; BSR set to: 1
  1802                           ;doprnt.c: 538: if(c != '%')
  1803                           
  1804                           ; BSR set to: 1
  1805  0006C8  0E25               	movlw	37
  1806  0006CA  191A               	xorwf	sprintf@c& (0+255),w,b
  1807  0006CC  B4D8               	btfsc	status,2,c
  1808  0006CE  D009               	goto	l231
  1809                           
  1810                           ; BSR set to: 1
  1811                           ;doprnt.c: 540: {
  1812                           ;doprnt.c: 541: ((*sp++ = (c)));
  1813  0006D0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  1814  0006D4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  1815  0006D8  C11A  FFDF         	movff	sprintf@c,indf2
  1816                           
  1817                           ; BSR set to: 1
  1818  0006DC  0100               	movlb	0	; () banked
  1819  0006DE  EF08  F008         	goto	l5379
  1820  0006E2                     l231:
  1821                           
  1822                           ;doprnt.c: 543: }
  1823                           ;doprnt.c: 546: width = 0;
  1824                           
  1825                           ; BSR set to: 0
  1826  0006E2  0E00               	movlw	0
  1827  0006E4  0101               	movlb	1	; () banked
  1828  0006E6  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1829  0006E8  0E00               	movlw	0
  1830  0006EA  6F0C               	movwf	sprintf@width& (0+255),b
  1831                           
  1832                           ;doprnt.c: 548: flag = 0;
  1833  0006EC  0E00               	movlw	0
  1834  0006EE  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  1835  0006F0  0E00               	movlw	0
  1836  0006F2  6F0A               	movwf	sprintf@flag& (0+255),b
  1837                           
  1838                           ; BSR set to: 1
  1839                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1840  0006F4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1841  0006F8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1842  0006FC                     	if	0	;tblptru may be non-zero
  1843  0006FC                     	endif
  1844  0006FC                     	if	0	;tblptru may be non-zero
  1845  0006FC                     	endif
  1846  0006FC  0008               	tblrd		*
  1847  0006FE  50F5               	movf	tablat,w,c
  1848  000700  EC5A  F01A         	call	_isdigit
  1849  000704  A0D8               	btfss	status,0,c
  1850  000706  D038               	goto	u5760
  1851                           
  1852                           ;doprnt.c: 598: width = 0;
  1853  000708  0E00               	movlw	0
  1854  00070A  0101               	movlb	1	; () banked
  1855  00070C  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1856  00070E  0E00               	movlw	0
  1857  000710  6F0C               	movwf	sprintf@width& (0+255),b
  1858  000712                     
  1859                           ;doprnt.c: 600: width *= 10;
  1860                           
  1861                           ; BSR set to: 1
  1862  000712  C10C  F02E         	movff	sprintf@width,___wmul@multiplier
  1863  000716  C10D  F02F         	movff	sprintf@width+1,___wmul@multiplier+1
  1864  00071A  0E00               	movlw	0
  1865  00071C  6E31               	movwf	___wmul@multiplicand+1,c
  1866  00071E  0E0A               	movlw	10
  1867  000720  6E30               	movwf	___wmul@multiplicand,c
  1868  000722  EC47  F01A         	call	___wmul	;wreg free
  1869  000726  C02E  F10C         	movff	?___wmul,sprintf@width
  1870  00072A  C02F  F10D         	movff	?___wmul+1,sprintf@width+1
  1871                           
  1872                           ;doprnt.c: 601: width += *f++ - '0';
  1873  00072E  0ED0               	movlw	208
  1874  000730  0100               	movlb	0	; () banked
  1875  000732  6FDE               	movwf	??_sprintf& (0+255),b
  1876  000734  0EFF               	movlw	255
  1877  000736  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  1878  000738  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1879  00073C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1880  000740                     	if	0	;tblptru may be non-zero
  1881  000740                     	endif
  1882  000740                     	if	0	;tblptru may be non-zero
  1883  000740                     	endif
  1884  000740  0008               	tblrd		*
  1885  000742  50F5               	movf	tablat,w,c
  1886  000744  6FE0               	movwf	(??_sprintf+2)& (0+255),b
  1887  000746  6BE1               	clrf	(??_sprintf+3)& (0+255),b
  1888  000748  51DE               	movf	??_sprintf& (0+255),w,b
  1889  00074A  27E0               	addwf	(??_sprintf+2)& (0+255),f,b
  1890  00074C  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  1891  00074E  23E1               	addwfc	(??_sprintf+3)& (0+255),f,b
  1892  000750  51E0               	movf	(??_sprintf+2)& (0+255),w,b
  1893  000752  0101               	movlb	1	; () banked
  1894  000754  270C               	addwf	sprintf@width& (0+255),f,b
  1895  000756  0100               	movlb	0	; () banked
  1896  000758  51E1               	movf	(??_sprintf+3)& (0+255),w,b
  1897  00075A  0101               	movlb	1	; () banked
  1898  00075C  230D               	addwfc	(sprintf@width+1)& (0+255),f,b
  1899                           
  1900                           ; BSR set to: 1
  1901  00075E  0100               	movlb	0	; () banked
  1902  000760  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1903  000762  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1907  000764  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1908  000768  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1909  00076C                     	if	0	;tblptru may be non-zero
  1910  00076C                     	endif
  1911  00076C                     	if	0	;tblptru may be non-zero
  1912  00076C                     	endif
  1913  00076C  0008               	tblrd		*
  1914  00076E  50F5               	movf	tablat,w,c
  1915  000770  EC5A  F01A         	call	_isdigit
  1916  000774  B0D8               	btfsc	status,0,c
  1917  000776  D7CD               	goto	l233
  1918  000778                     u5760:
  1919                           
  1920                           ;doprnt.c: 608: }
  1921                           ;doprnt.c: 611: if(*f == '.') {
  1922  000778  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1923  00077C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1924  000780                     	if	0	;tblptru may be non-zero
  1925  000780                     	endif
  1926  000780                     	if	0	;tblptru may be non-zero
  1927  000780                     	endif
  1928  000780  0008               	tblrd		*
  1929  000782  50F5               	movf	tablat,w,c
  1930  000784  0A2E               	xorlw	46
  1931  000786  A4D8               	btfss	status,2,c
  1932  000788  D033               	goto	l235
  1933                           
  1934                           ;doprnt.c: 612: flag |= 0x4000;
  1935  00078A  0101               	movlb	1	; () banked
  1936  00078C  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  1937                           
  1938                           ;doprnt.c: 613: f++;
  1939  00078E  0100               	movlb	0	; () banked
  1940  000790  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1941  000792  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 620: {
  1945                           ;doprnt.c: 621: prec = 0;
  1946  000794  0E00               	movlw	0
  1947  000796  0101               	movlb	1	; () banked
  1948  000798  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1949  00079A  0E00               	movlw	0
  1950  00079C  6F18               	movwf	sprintf@prec& (0+255),b
  1951                           
  1952                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1953  00079E  D01D               	goto	l236
  1954  0007A0                     
  1955                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1956                           
  1957                           ; BSR set to: 1
  1958  0007A0  C118  F02E         	movff	sprintf@prec,___wmul@multiplier
  1959  0007A4  C119  F02F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1960  0007A8  0E00               	movlw	0
  1961  0007AA  6E31               	movwf	___wmul@multiplicand+1,c
  1962  0007AC  0E0A               	movlw	10
  1963  0007AE  6E30               	movwf	___wmul@multiplicand,c
  1964  0007B0  EC47  F01A         	call	___wmul	;wreg free
  1965  0007B4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1966  0007B8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1967  0007BC                     	if	0	;tblptru may be non-zero
  1968  0007BC                     	endif
  1969  0007BC                     	if	0	;tblptru may be non-zero
  1970  0007BC                     	endif
  1971  0007BC  0008               	tblrd		*
  1972  0007BE  50F5               	movf	tablat,w,c
  1973  0007C0  262E               	addwf	?___wmul,f,c
  1974  0007C2  0E00               	movlw	0
  1975  0007C4  222F               	addwfc	?___wmul+1,f,c
  1976  0007C6  0ED0               	movlw	208
  1977  0007C8  242E               	addwf	?___wmul,w,c
  1978  0007CA  0101               	movlb	1	; () banked
  1979  0007CC  6F18               	movwf	sprintf@prec& (0+255),b
  1980  0007CE  0EFF               	movlw	255
  1981  0007D0  202F               	addwfc	?___wmul+1,w,c
  1982  0007D2  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1983                           
  1984                           ; BSR set to: 1
  1985  0007D4  0100               	movlb	0	; () banked
  1986  0007D6  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1987  0007D8  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1988  0007DA                     l236:
  1989                           
  1990                           ; BSR set to: 0
  1991  0007DA  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1992  0007DE  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1993  0007E2                     	if	0	;tblptru may be non-zero
  1994  0007E2                     	endif
  1995  0007E2                     	if	0	;tblptru may be non-zero
  1996  0007E2                     	endif
  1997  0007E2  0008               	tblrd		*
  1998  0007E4  50F5               	movf	tablat,w,c
  1999  0007E6  EC5A  F01A         	call	_isdigit
  2000  0007EA  A0D8               	btfss	status,0,c
  2001  0007EC  D00A               	goto	l240
  2002  0007EE  D7D8               	goto	l237
  2003  0007F0                     l235:
  2004                           
  2005                           ;doprnt.c: 626: prec = 0;
  2006  0007F0  0E00               	movlw	0
  2007  0007F2  0101               	movlb	1	; () banked
  2008  0007F4  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2009  0007F6  0E00               	movlw	0
  2010  0007F8  6F18               	movwf	sprintf@prec& (0+255),b
  2011                           
  2012                           ; BSR set to: 1
  2013                           ;doprnt.c: 628: flag |= 0x1000;
  2014  0007FA  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  2015                           
  2016                           ; BSR set to: 1
  2017                           ;doprnt.c: 630: }
  2018                           ;doprnt.c: 635: switch(c = *f++) {
  2019  0007FC  D002               	goto	l240
  2020  0007FE                     
  2021                           ; BSR set to: 1
  2022                           ;doprnt.c: 663: flag |= 0x400;
  2023                           
  2024                           ; BSR set to: 1
  2025  0007FE  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  2026                           
  2027                           ;doprnt.c: 664: break;
  2028  000800  D014               	goto	l244
  2029  000802                     l240:
  2030                           
  2031                           ; BSR set to: 1
  2032  000802  C0D8  FFF6         	movff	sprintf@f,tblptrl
  2033  000806  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  2034  00080A  0100               	movlb	0	; () banked
  2035  00080C  4BD8               	infsnz	sprintf@f& (0+255),f,b
  2036  00080E  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  2037  000810                     	if	0	;tblptru may be non-zero
  2038  000810                     	endif
  2039  000810                     	if	0	;tblptru may be non-zero
  2040  000810                     	endif
  2041  000810  0008               	tblrd		*
  2042  000812  CFF5 F11A          	movff	tablat,sprintf@c
  2043  000816  0101               	movlb	1	; () banked
  2044  000818  511A               	movf	sprintf@c& (0+255),w,b
  2045                           
  2046                           ; Switch size 1, requested type "space"
  2047                           ; Number of cases is 2, Range of values is 0 to 102
  2048                           ; switch strategies available:
  2049                           ; Name         Instructions Cycles
  2050                           ; simple_byte            7     4 (average)
  2051                           ;	Chosen strategy is simple_byte
  2052  00081A  0A00               	xorlw	0	; case 0
  2053  00081C  B4D8               	btfsc	status,2,c
  2054  00081E  EF19  F008         	goto	u6170
  2055  000822  0A66               	xorlw	102	; case 102
  2056  000824  B4D8               	btfsc	status,2,c
  2057  000826  D7EB               	goto	l243
  2058  000828  D3F5               	goto	l302
  2059  00082A                     l244:
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;doprnt.c: 825: if(flag & (0x700)) {
  2063                           
  2064                           ; BSR set to: 1
  2065  00082A  0E07               	movlw	7
  2066  00082C  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2067  00082E  B4D8               	btfsc	status,2,c
  2068  000830  D349               	goto	l246
  2069                           
  2070                           ; BSR set to: 1
  2071                           ;doprnt.c: 827: if(flag & 0x1000)
  2072  000832  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  2073  000834  D004               	goto	l247
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;doprnt.c: 829: prec = 6;
  2077  000836  0E00               	movlw	0
  2078  000838  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2079  00083A  0E06               	movlw	6
  2080  00083C  6F18               	movwf	sprintf@prec& (0+255),b
  2081  00083E                     l247:
  2082                           
  2083                           ; BSR set to: 1
  2084                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2085                           
  2086                           ; BSR set to: 1
  2087  00083E  C104  FFD9         	movff	sprintf@ap,fsr2l
  2088  000842  C105  FFDA         	movff	sprintf@ap+1,fsr2h
  2089  000846  CFDE F114          	movff	postinc2,sprintf@fval
  2090  00084A  CFDE F115          	movff	postinc2,sprintf@fval+1
  2091  00084E  CFDE F116          	movff	postinc2,sprintf@fval+2
  2092  000852  CFDE F117          	movff	postinc2,sprintf@fval+3
  2093                           
  2094                           ; BSR set to: 1
  2095  000856  0E04               	movlw	4
  2096  000858  2704               	addwf	sprintf@ap& (0+255),f,b
  2097  00085A  0E00               	movlw	0
  2098  00085C  2305               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;doprnt.c: 831: if(fval < 0.0) {
  2102  00085E  AF17               	btfss	(sprintf@fval+3)& (0+255),7,b
  2103  000860  D015               	goto	l248
  2104                           
  2105                           ; BSR set to: 1
  2106                           ;doprnt.c: 832: fval = -fval;
  2107  000862  C114  F02E         	movff	sprintf@fval,___flneg@f1
  2108  000866  C115  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  2109  00086A  C116  F030         	movff	sprintf@fval+2,___flneg@f1+2
  2110  00086E  C117  F031         	movff	sprintf@fval+3,___flneg@f1+3
  2111  000872  EC1A  F01A         	call	___flneg	;wreg free
  2112  000876  C02E  F114         	movff	?___flneg,sprintf@fval
  2113  00087A  C02F  F115         	movff	?___flneg+1,sprintf@fval+1
  2114  00087E  C030  F116         	movff	?___flneg+2,sprintf@fval+2
  2115  000882  C031  F117         	movff	?___flneg+3,sprintf@fval+3
  2116                           
  2117                           ;doprnt.c: 833: flag |= 0x03;
  2118  000886  0E03               	movlw	3
  2119  000888  0101               	movlb	1	; () banked
  2120  00088A  130A               	iorwf	sprintf@flag& (0+255),f,b
  2121  00088C                     l248:
  2122                           
  2123                           ; BSR set to: 1
  2124                           ;doprnt.c: 834: }
  2125                           ;doprnt.c: 835: exp = 0;
  2126                           
  2127                           ; BSR set to: 1
  2128  00088C  0E00               	movlw	0
  2129  00088E  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2130  000890  0E00               	movlw	0
  2131  000892  6F12               	movwf	sprintf@exp& (0+255),b
  2132                           
  2133                           ; BSR set to: 1
  2134                           ;doprnt.c: 836: if( fval!=0) {
  2135  000894  5114               	movf	sprintf@fval& (0+255),w,b
  2136  000896  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2137  000898  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2138  00089A  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2139  00089C  B4D8               	btfsc	status,2,c
  2140  00089E  D082               	goto	l253
  2141                           
  2142                           ; BSR set to: 1
  2143                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2144  0008A0  3516               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2145  0008A2  3517               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2146  0008A4  0F82               	addlw	130
  2147  0008A6  6F12               	movwf	sprintf@exp& (0+255),b
  2148  0008A8  6B13               	clrf	(sprintf@exp+1)& (0+255),b
  2149  0008AA  0EFF               	movlw	255
  2150  0008AC  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2151                           
  2152                           ; BSR set to: 1
  2153                           ;doprnt.c: 838: exp--;
  2154  0008AE  0712               	decf	sprintf@exp& (0+255),f,b
  2155  0008B0  A0D8               	btfss	status,0,c
  2156  0008B2  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;doprnt.c: 839: exp *= 3;
  2160  0008B4  C112  F02E         	movff	sprintf@exp,___wmul@multiplier
  2161  0008B8  C113  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2162  0008BC  0E00               	movlw	0
  2163  0008BE  6E31               	movwf	___wmul@multiplicand+1,c
  2164  0008C0  0E03               	movlw	3
  2165  0008C2  6E30               	movwf	___wmul@multiplicand,c
  2166  0008C4  EC47  F01A         	call	___wmul	;wreg free
  2167  0008C8  C02E  F112         	movff	?___wmul,sprintf@exp
  2168  0008CC  C02F  F113         	movff	?___wmul+1,sprintf@exp+1
  2169                           
  2170                           ;doprnt.c: 840: exp /= 10;
  2171  0008D0  C112  F034         	movff	sprintf@exp,___awdiv@dividend
  2172  0008D4  C113  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  2173  0008D8  0E00               	movlw	0
  2174  0008DA  6E37               	movwf	___awdiv@divisor+1,c
  2175  0008DC  0E0A               	movlw	10
  2176  0008DE  6E36               	movwf	___awdiv@divisor,c
  2177  0008E0  EC0C  F018         	call	___awdiv	;wreg free
  2178  0008E4  C034  F112         	movff	?___awdiv,sprintf@exp
  2179  0008E8  C035  F113         	movff	?___awdiv+1,sprintf@exp+1
  2180                           
  2181                           ;doprnt.c: 841: if(exp < 0)
  2182  0008EC  0101               	movlb	1	; () banked
  2183  0008EE  AF13               	btfss	(sprintf@exp+1)& (0+255),7,b
  2184  0008F0  D003               	goto	l250
  2185                           
  2186                           ; BSR set to: 1
  2187                           ;doprnt.c: 842: exp--;
  2188  0008F2  0712               	decf	sprintf@exp& (0+255),f,b
  2189  0008F4  A0D8               	btfss	status,0,c
  2190  0008F6  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2191  0008F8                     l250:
  2192                           
  2193                           ; BSR set to: 1
  2194                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2195                           
  2196                           ; BSR set to: 1
  2197  0008F8  5112               	movf	sprintf@exp& (0+255),w,b
  2198  0008FA  0800               	sublw	0
  2199  0008FC  EC1A  F00B         	call	_scale
  2200  000900  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2201  000904  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2202  000908  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2203  00090C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2204                           
  2205                           ;doprnt.c: 847: tmpval.integ *= fval;
  2206  000910  C10E  F03C         	movff	sprintf@tmpval,___flmul@b
  2207  000914  C10F  F03D         	movff	sprintf@tmpval+1,___flmul@b+1
  2208  000918  C110  F03E         	movff	sprintf@tmpval+2,___flmul@b+2
  2209  00091C  C111  F03F         	movff	sprintf@tmpval+3,___flmul@b+3
  2210  000920  C114  F040         	movff	sprintf@fval,___flmul@a
  2211  000924  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2212  000928  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2213  00092C  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2214  000930  EC42  F00D         	call	___flmul	;wreg free
  2215  000934  C03C  F10E         	movff	?___flmul,sprintf@tmpval
  2216  000938  C03D  F10F         	movff	?___flmul+1,sprintf@tmpval+1
  2217  00093C  C03E  F110         	movff	?___flmul+2,sprintf@tmpval+2
  2218  000940  C03F  F111         	movff	?___flmul+3,sprintf@tmpval+3
  2219                           
  2220                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2221  000944  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2222  000948  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2223  00094C  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2224  000950  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2225  000954  0E00               	movlw	0
  2226  000956  6E32               	movwf	___flge@ff2,c
  2227  000958  0E00               	movlw	0
  2228  00095A  6E33               	movwf	___flge@ff2+1,c
  2229  00095C  0E80               	movlw	128
  2230  00095E  6E34               	movwf	___flge@ff2+2,c
  2231  000960  0E3F               	movlw	63
  2232  000962  6E35               	movwf	___flge@ff2+3,c
  2233  000964  EC96  F015         	call	___flge	;wreg free
  2234  000968  B0D8               	btfsc	status,0,c
  2235  00096A  D005               	goto	l251
  2236                           
  2237                           ;doprnt.c: 849: exp--;
  2238  00096C  0101               	movlb	1	; () banked
  2239  00096E  0712               	decf	sprintf@exp& (0+255),f,b
  2240  000970  A0D8               	btfss	status,0,c
  2241  000972  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2242  000974  D017               	goto	l253
  2243  000976                     l251:
  2244                           
  2245                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2246                           
  2247                           ; BSR set to: 1
  2248  000976  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2249  00097A  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2250  00097E  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2251  000982  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2252  000986  0E00               	movlw	0
  2253  000988  6E32               	movwf	___flge@ff2,c
  2254  00098A  0E00               	movlw	0
  2255  00098C  6E33               	movwf	___flge@ff2+1,c
  2256  00098E  0E20               	movlw	32
  2257  000990  6E34               	movwf	___flge@ff2+2,c
  2258  000992  0E41               	movlw	65
  2259  000994  6E35               	movwf	___flge@ff2+3,c
  2260  000996  EC96  F015         	call	___flge	;wreg free
  2261  00099A  A0D8               	btfss	status,0,c
  2262  00099C  D003               	goto	l253
  2263                           
  2264                           ;doprnt.c: 851: exp++;
  2265  00099E  0101               	movlb	1	; () banked
  2266  0009A0  4B12               	infsnz	sprintf@exp& (0+255),f,b
  2267  0009A2  2B13               	incf	(sprintf@exp+1)& (0+255),f,b
  2268  0009A4                     l253:
  2269                           
  2270                           ;doprnt.c: 852: }
  2271                           ;doprnt.c: 1112: if(prec <= 12)
  2272                           
  2273                           ; BSR set to: 1
  2274                           
  2275                           ; BSR set to: 1
  2276                           
  2277                           ; BSR set to: 1
  2278  0009A4  0101               	movlb	1	; () banked
  2279  0009A6  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2280  0009A8  D006               	goto	u5860
  2281  0009AA  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2282  0009AC  E121               	bnz	l5217
  2283  0009AE  0E0D               	movlw	13
  2284  0009B0  5D18               	subwf	sprintf@prec& (0+255),w,b
  2285  0009B2  B0D8               	btfsc	status,0,c
  2286  0009B4  D01D               	goto	l254
  2287  0009B6                     u5860:
  2288                           
  2289                           ; BSR set to: 1
  2290                           ;doprnt.c: 1113: fval += fround(prec);
  2291  0009B6  C114  F0BA         	movff	sprintf@fval,___fladd@b
  2292  0009BA  C115  F0BB         	movff	sprintf@fval+1,___fladd@b+1
  2293  0009BE  C116  F0BC         	movff	sprintf@fval+2,___fladd@b+2
  2294  0009C2  C117  F0BD         	movff	sprintf@fval+3,___fladd@b+3
  2295  0009C6  5118               	movf	sprintf@prec& (0+255),w,b
  2296  0009C8  ECE5  F011         	call	_fround
  2297  0009CC  C08D  F0BE         	movff	?_fround,___fladd@a
  2298  0009D0  C08E  F0BF         	movff	?_fround+1,___fladd@a+1
  2299  0009D4  C08F  F0C0         	movff	?_fround+2,___fladd@a+2
  2300  0009D8  C090  F0C1         	movff	?_fround+3,___fladd@a+3
  2301  0009DC  ECEB  F00E         	call	___fladd	;wreg free
  2302  0009E0  C0BA  F114         	movff	?___fladd,sprintf@fval
  2303  0009E4  C0BB  F115         	movff	?___fladd+1,sprintf@fval+1
  2304  0009E8  C0BC  F116         	movff	?___fladd+2,sprintf@fval+2
  2305  0009EC  C0BD  F117         	movff	?___fladd+3,sprintf@fval+3
  2306  0009F0                     l254:
  2307  0009F0                     l5217:
  2308                           
  2309                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2310  0009F0  0101               	movlb	1	; () banked
  2311  0009F2  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2312  0009F4  D006               	goto	u5870
  2313  0009F6  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2314  0009F8  E124               	bnz	l5225
  2315  0009FA  0E0A               	movlw	10
  2316  0009FC  5D12               	subwf	sprintf@exp& (0+255),w,b
  2317  0009FE  B0D8               	btfsc	status,0,c
  2318  000A00  D020               	goto	u5900
  2319  000A02                     u5870:
  2320                           
  2321                           ; BSR set to: 1
  2322  000A02  5114               	movf	sprintf@fval& (0+255),w,b
  2323  000A04  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2324  000A06  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2325  000A08  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2326  000A0A  B4D8               	btfsc	status,2,c
  2327  000A0C  D065               	goto	l255
  2328                           
  2329                           ; BSR set to: 1
  2330  000A0E  C114  F096         	movff	sprintf@fval,___fltol@f1
  2331  000A12  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2332  000A16  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2333  000A1A  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2334  000A1E  EC3E  F017         	call	___fltol	;wreg free
  2335  000A22  0100               	movlb	0	; () banked
  2336  000A24  5196               	movf	?___fltol& (0+255),w,b
  2337  000A26  1197               	iorwf	(?___fltol+1)& (0+255),w,b
  2338  000A28  1198               	iorwf	(?___fltol+2)& (0+255),w,b
  2339  000A2A  1199               	iorwf	(?___fltol+3)& (0+255),w,b
  2340  000A2C  A4D8               	btfss	status,2,c
  2341  000A2E  D054               	goto	l255
  2342                           
  2343                           ; BSR set to: 0
  2344  000A30  0101               	movlb	1	; () banked
  2345  000A32  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2346  000A34  D051               	goto	l255
  2347  000A36  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2348  000A38  E104               	bnz	l5225
  2349  000A3A  0E02               	movlw	2
  2350  000A3C  5D12               	subwf	sprintf@exp& (0+255),w,b
  2351  000A3E  A0D8               	btfss	status,0,c
  2352  000A40  D04B               	goto	l255
  2353  000A42                     u5900:
  2354  000A42                     l5225:
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2358  000A42  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2359  000A46  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2360  000A4A  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2361  000A4E  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2362  000A52  0E5F               	movlw	95
  2363  000A54  6E32               	movwf	___flge@ff2,c
  2364  000A56  0E70               	movlw	112
  2365  000A58  6E33               	movwf	___flge@ff2+1,c
  2366  000A5A  0E89               	movlw	137
  2367  000A5C  6E34               	movwf	___flge@ff2+2,c
  2368  000A5E  0E40               	movlw	64
  2369  000A60  6E35               	movwf	___flge@ff2+3,c
  2370  000A62  EC96  F015         	call	___flge	;wreg free
  2371  000A66  B0D8               	btfsc	status,0,c
  2372  000A68  D003               	goto	l258
  2373                           
  2374                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2375  000A6A  0101               	movlb	1	; () banked
  2376  000A6C  0EF7               	movlw	247
  2377  000A6E  D002               	goto	L1
  2378  000A70                     l258:
  2379                           
  2380                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2381                           
  2382                           ; BSR set to: 1
  2383  000A70  0101               	movlb	1	; () banked
  2384  000A72  0EF8               	movlw	248
  2385  000A74                     L1:
  2386  000A74  2712               	addwf	sprintf@exp& (0+255),f,b
  2387  000A76  0EFF               	movlw	255
  2388  000A78  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2392                           
  2393                           ; BSR set to: 1
  2394  000A7A  5112               	movf	sprintf@exp& (0+255),w,b
  2395  000A7C  EC1A  F00B         	call	_scale
  2396  000A80  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2397  000A84  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2398  000A88  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2399  000A8C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2400  000A90  C114  F02E         	movff	sprintf@fval,__div_to_l_@f1
  2401  000A94  C115  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2402  000A98  C116  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2403  000A9C  C117  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2404  000AA0  C10E  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  2405  000AA4  C10F  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2406  000AA8  C110  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2407  000AAC  C111  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2408  000AB0  EC6F  F014         	call	__div_to_l_	;wreg free
  2409  000AB4  C02E  F106         	movff	?__div_to_l_,sprintf@val
  2410  000AB8  C02F  F107         	movff	?__div_to_l_+1,sprintf@val+1
  2411  000ABC  C030  F108         	movff	?__div_to_l_+2,sprintf@val+2
  2412  000AC0  C031  F109         	movff	?__div_to_l_+3,sprintf@val+3
  2413                           
  2414                           ;doprnt.c: 1129: fval = 0.0;
  2415  000AC4  0E00               	movlw	0
  2416  000AC6  0101               	movlb	1	; () banked
  2417  000AC8  6F14               	movwf	sprintf@fval& (0+255),b
  2418  000ACA  0E00               	movlw	0
  2419  000ACC  6F15               	movwf	(sprintf@fval+1)& (0+255),b
  2420  000ACE  0E00               	movlw	0
  2421  000AD0  6F16               	movwf	(sprintf@fval+2)& (0+255),b
  2422  000AD2  0E00               	movlw	0
  2423  000AD4  6F17               	movwf	(sprintf@fval+3)& (0+255),b
  2424                           
  2425                           ;doprnt.c: 1130: } else {
  2426  000AD6  D03C               	goto	l264
  2427  000AD8                     l255:
  2428                           
  2429                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2430                           
  2431                           ; BSR set to: 1
  2432  000AD8  C114  F096         	movff	sprintf@fval,___fltol@f1
  2433  000ADC  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2434  000AE0  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2435  000AE4  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2436  000AE8  EC3E  F017         	call	___fltol	;wreg free
  2437  000AEC  C096  F106         	movff	?___fltol,sprintf@val
  2438  000AF0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2439  000AF4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2440  000AF8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2441                           
  2442                           ;doprnt.c: 1132: fval -= (double)val;
  2443  000AFC  C114  F0CE         	movff	sprintf@fval,___flsub@b
  2444  000B00  C115  F0CF         	movff	sprintf@fval+1,___flsub@b+1
  2445  000B04  C116  F0D0         	movff	sprintf@fval+2,___flsub@b+2
  2446  000B08  C117  F0D1         	movff	sprintf@fval+3,___flsub@b+3
  2447  000B0C  C106  F02E         	movff	sprintf@val,___xxtofl@val
  2448  000B10  C107  F02F         	movff	sprintf@val+1,___xxtofl@val+1
  2449  000B14  C108  F030         	movff	sprintf@val+2,___xxtofl@val+2
  2450  000B18  C109  F031         	movff	sprintf@val+3,___xxtofl@val+3
  2451  000B1C  0E00               	movlw	0
  2452  000B1E  EC2E  F013         	call	___xxtofl
  2453  000B22  C02E  F0D2         	movff	?___xxtofl,___flsub@a
  2454  000B26  C02F  F0D3         	movff	?___xxtofl+1,___flsub@a+1
  2455  000B2A  C030  F0D4         	movff	?___xxtofl+2,___flsub@a+2
  2456  000B2E  C031  F0D5         	movff	?___xxtofl+3,___flsub@a+3
  2457  000B32  EC48  F019         	call	___flsub	;wreg free
  2458  000B36  C0CE  F114         	movff	?___flsub,sprintf@fval
  2459  000B3A  C0CF  F115         	movff	?___flsub+1,sprintf@fval+1
  2460  000B3E  C0D0  F116         	movff	?___flsub+2,sprintf@fval+2
  2461  000B42  C0D1  F117         	movff	?___flsub+3,sprintf@fval+3
  2462                           
  2463                           ;doprnt.c: 1133: exp = 0;
  2464  000B46  0E00               	movlw	0
  2465  000B48  0101               	movlb	1	; () banked
  2466  000B4A  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2467  000B4C  0E00               	movlw	0
  2468  000B4E  6F12               	movwf	sprintf@exp& (0+255),b
  2469  000B50                     l264:
  2470                           
  2471                           ; BSR set to: 1
  2472                           ;doprnt.c: 1134: }
  2473                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2474                           
  2475                           ; BSR set to: 1
  2476  000B50  0E01               	movlw	1
  2477  000B52  6F1A               	movwf	sprintf@c& (0+255),b
  2478  000B54                     l5245:
  2479                           
  2480                           ; BSR set to: 1
  2481  000B54  0E0A               	movlw	10
  2482  000B56  191A               	xorwf	sprintf@c& (0+255),w,b
  2483  000B58  B4D8               	btfsc	status,2,c
  2484  000B5A  D018               	goto	u5940
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;doprnt.c: 1137: if(val < dpowers[c])
  2488                           
  2489                           ; BSR set to: 1
  2490                           
  2491                           ; BSR set to: 1
  2492  000B5C  511A               	movf	sprintf@c& (0+255),w,b
  2493  000B5E  0D04               	mullw	4
  2494  000B60  0E69               	movlw	low _dpowers
  2495  000B62  24F3               	addwf	prodl,w,c
  2496  000B64  6EF6               	movwf	tblptrl,c
  2497  000B66  0E06               	movlw	high _dpowers
  2498  000B68  20F4               	addwfc	prodh,w,c
  2499  000B6A  6EF7               	movwf	tblptrh,c
  2500  000B6C                     	if	0	;There are less than 3 active tblptr bytes
  2501  000B6C                     	endif
  2502  000B6C  0009               	tblrd		*+
  2503  000B6E  50F5               	movf	tablat,w,c
  2504  000B70  5D06               	subwf	sprintf@val& (0+255),w,b
  2505  000B72  0009               	tblrd		*+
  2506  000B74  50F5               	movf	tablat,w,c
  2507  000B76  5907               	subwfb	(sprintf@val+1)& (0+255),w,b
  2508  000B78  0009               	tblrd		*+
  2509  000B7A  50F5               	movf	tablat,w,c
  2510  000B7C  5908               	subwfb	(sprintf@val+2)& (0+255),w,b
  2511  000B7E  0009               	tblrd		*+
  2512  000B80  50F5               	movf	tablat,w,c
  2513  000B82  5909               	subwfb	(sprintf@val+3)& (0+255),w,b
  2514  000B84  A0D8               	btfss	status,0,c
  2515  000B86  D002               	goto	u5940
  2516                           
  2517                           ; BSR set to: 1
  2518                           
  2519                           ; BSR set to: 1
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;doprnt.c: 1138: break;
  2523  000B88  2B1A               	incf	sprintf@c& (0+255),f,b
  2524  000B8A  D7E4               	goto	l5245
  2525  000B8C                     u5940:
  2526                           
  2527                           ; BSR set to: 1
  2528                           ;doprnt.c: 1142: width -= prec + c + exp;
  2529                           
  2530                           ; BSR set to: 1
  2531  000B8C  C11A  F0DE         	movff	sprintf@c,??_sprintf
  2532  000B90  0100               	movlb	0	; () banked
  2533  000B92  6BDF               	clrf	(??_sprintf+1)& (0+255),b
  2534  000B94  BFDE               	btfsc	??_sprintf& (0+255),7,b
  2535  000B96  07DF               	decf	(??_sprintf+1)& (0+255),f,b
  2536  000B98  0101               	movlb	1	; () banked
  2537  000B9A  5118               	movf	sprintf@prec& (0+255),w,b
  2538  000B9C  0100               	movlb	0	; () banked
  2539  000B9E  27DE               	addwf	??_sprintf& (0+255),f,b
  2540  000BA0  0101               	movlb	1	; () banked
  2541  000BA2  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2542  000BA4  0100               	movlb	0	; () banked
  2543  000BA6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2544  000BA8  0101               	movlb	1	; () banked
  2545  000BAA  5112               	movf	sprintf@exp& (0+255),w,b
  2546  000BAC  0100               	movlb	0	; () banked
  2547  000BAE  27DE               	addwf	??_sprintf& (0+255),f,b
  2548  000BB0  0101               	movlb	1	; () banked
  2549  000BB2  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2550  000BB4  0100               	movlb	0	; () banked
  2551  000BB6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2552  000BB8  51DE               	movf	??_sprintf& (0+255),w,b
  2553  000BBA  0101               	movlb	1	; () banked
  2554  000BBC  5F0C               	subwf	sprintf@width& (0+255),f,b
  2555  000BBE  0100               	movlb	0	; () banked
  2556  000BC0  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  2557  000BC2  0101               	movlb	1	; () banked
  2558  000BC4  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  2559                           
  2560                           ;doprnt.c: 1143: if(
  2561                           ;doprnt.c: 1147: prec)
  2562  000BC6  5118               	movf	sprintf@prec& (0+255),w,b
  2563  000BC8  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2564  000BCA  B4D8               	btfsc	status,2,c
  2565  000BCC  D003               	goto	l268
  2566                           
  2567                           ; BSR set to: 1
  2568                           ;doprnt.c: 1148: width--;
  2569  000BCE  070C               	decf	sprintf@width& (0+255),f,b
  2570  000BD0  A0D8               	btfss	status,0,c
  2571  000BD2  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2572  000BD4                     l268:
  2573                           
  2574                           ; BSR set to: 1
  2575                           ;doprnt.c: 1149: if(flag & 0x03)
  2576                           
  2577                           ; BSR set to: 1
  2578  000BD4  0E03               	movlw	3
  2579  000BD6  150A               	andwf	sprintf@flag& (0+255),w,b
  2580  000BD8  0100               	movlb	0	; () banked
  2581  000BDA  6FDE               	movwf	??_sprintf& (0+255),b
  2582  000BDC  0E00               	movlw	0
  2583  000BDE  0101               	movlb	1	; () banked
  2584  000BE0  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2585  000BE2  0100               	movlb	0	; () banked
  2586  000BE4  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2587  000BE6  51DE               	movf	??_sprintf& (0+255),w,b
  2588  000BE8  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2589  000BEA  B4D8               	btfsc	status,2,c
  2590  000BEC  D00E               	goto	l270
  2591  000BEE  D009               	goto	l5269
  2592  000BF0                     l5265:
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2596  000BF0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2597  000BF4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2598  000BF8  0E20               	movlw	32
  2599  000BFA  6EDF               	movwf	indf2,c
  2600                           
  2601                           ; BSR set to: 1
  2602  000BFC  0100               	movlb	0	; () banked
  2603  000BFE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2604  000C00  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2605  000C02                     l5269:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;doprnt.c: 1182: width--;
  2609  000C02  0101               	movlb	1	; () banked
  2610  000C04  070C               	decf	sprintf@width& (0+255),f,b
  2611  000C06  A0D8               	btfss	status,0,c
  2612  000C08  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2613  000C0A                     l270:
  2614                           
  2615                           ; BSR set to: 1
  2616  000C0A  0101               	movlb	1	; () banked
  2617  000C0C  BF0D               	btfsc	(sprintf@width+1)& (0+255),7,b
  2618  000C0E  D005               	goto	u5970
  2619  000C10  510D               	movf	(sprintf@width+1)& (0+255),w,b
  2620  000C12  E1EE               	bnz	l5265
  2621  000C14  050C               	decf	sprintf@width& (0+255),w,b
  2622  000C16  B0D8               	btfsc	status,0,c
  2623  000C18  D7EB               	goto	l271
  2624  000C1A                     u5970:
  2625                           
  2626                           ; BSR set to: 1
  2627                           ;doprnt.c: 1183: }
  2628                           ;doprnt.c: 1188: if(flag & 0x03)
  2629                           
  2630                           ; BSR set to: 1
  2631  000C1A  0E03               	movlw	3
  2632  000C1C  150A               	andwf	sprintf@flag& (0+255),w,b
  2633  000C1E  0100               	movlb	0	; () banked
  2634  000C20  6FDE               	movwf	??_sprintf& (0+255),b
  2635  000C22  0E00               	movlw	0
  2636  000C24  0101               	movlb	1	; () banked
  2637  000C26  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2638  000C28  0100               	movlb	0	; () banked
  2639  000C2A  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2640  000C2C  51DE               	movf	??_sprintf& (0+255),w,b
  2641  000C2E  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2642  000C30  B4D8               	btfsc	status,2,c
  2643  000C32  D053               	goto	l274
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2647  000C34  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2648  000C38  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2649  000C3C  0E2D               	movlw	45
  2650  000C3E  6EDF               	movwf	indf2,c
  2651  000C40  D04A               	goto	L2
  2652  000C42                     
  2653                           ;doprnt.c: 1200: {
  2654                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2655                           
  2656                           ; BSR set to: 0
  2657  000C42  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2658  000C46  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2659  000C4A  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2660  000C4E  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2661  000C52  0101               	movlb	1	; () banked
  2662  000C54  511A               	movf	sprintf@c& (0+255),w,b
  2663  000C56  0D04               	mullw	4
  2664  000C58  0E69               	movlw	low _dpowers
  2665  000C5A  24F3               	addwf	prodl,w,c
  2666  000C5C  6EF6               	movwf	tblptrl,c
  2667  000C5E  0E06               	movlw	high _dpowers
  2668  000C60  20F4               	addwfc	prodh,w,c
  2669  000C62  6EF7               	movwf	tblptrh,c
  2670  000C64                     	if	0	;There are less than 3 active tblptr bytes
  2671  000C64                     	endif
  2672  000C64  0009               	tblrd		*+
  2673  000C66  CFF5 F032          	movff	tablat,___lldiv@divisor
  2674  000C6A  0009               	tblrd		*+
  2675  000C6C  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2676  000C70  0009               	tblrd		*+
  2677  000C72  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2678  000C76  000A               	tblrd		*-
  2679  000C78  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2680  000C7C  EC4E  F018         	call	___lldiv	;wreg free
  2681  000C80  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2682  000C84  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2683  000C88  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2684  000C8C  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2685                           
  2686                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2687  000C90  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2688  000C94  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2689  000C98  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2690  000C9C  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2691  000CA0  0E0A               	movlw	10
  2692  000CA2  6E32               	movwf	___llmod@divisor,c
  2693  000CA4  0E00               	movlw	0
  2694  000CA6  6E33               	movwf	___llmod@divisor+1,c
  2695  000CA8  0E00               	movlw	0
  2696  000CAA  6E34               	movwf	___llmod@divisor+2,c
  2697  000CAC  0E00               	movlw	0
  2698  000CAE  6E35               	movwf	___llmod@divisor+3,c
  2699  000CB0  ECC7  F018         	call	___llmod	;wreg free
  2700  000CB4  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2701  000CB8  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2702  000CBC  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2703  000CC0  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2704                           
  2705                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2706  000CC4  0101               	movlb	1	; () banked
  2707  000CC6  510E               	movf	sprintf@tmpval& (0+255),w,b
  2708  000CC8  0F30               	addlw	48
  2709  000CCA  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2710  000CCE  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2711  000CD2  6EDF               	movwf	indf2,c
  2712                           
  2713                           ; BSR set to: 1
  2714  000CD4  0100               	movlb	0	; () banked
  2715  000CD6                     L2:
  2716  000CD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2717  000CD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2718  000CDA                     l274:
  2719                           
  2720                           ; BSR set to: 0
  2721                           
  2722                           ; BSR set to: 0
  2723  000CDA  0101               	movlb	1	; () banked
  2724  000CDC  071A               	decf	sprintf@c& (0+255),f,b
  2725  000CDE  291A               	incf	sprintf@c& (0+255),w,b
  2726  000CE0  B4D8               	btfsc	status,2,c
  2727  000CE2  D00E               	goto	l277
  2728  000CE4  D7AE               	goto	l275
  2729  000CE6                     l5289:
  2730                           
  2731                           ; BSR set to: 1
  2732                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2733  000CE6  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2734  000CEA  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2735  000CEE  0E30               	movlw	48
  2736  000CF0  6EDF               	movwf	indf2,c
  2737                           
  2738                           ; BSR set to: 1
  2739  000CF2  0100               	movlb	0	; () banked
  2740  000CF4  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2741  000CF6  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;doprnt.c: 1209: exp--;
  2745  000CF8  0101               	movlb	1	; () banked
  2746  000CFA  0712               	decf	sprintf@exp& (0+255),f,b
  2747  000CFC  A0D8               	btfss	status,0,c
  2748  000CFE  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2749  000D00                     l277:
  2750                           
  2751                           ; BSR set to: 1
  2752                           
  2753                           ; BSR set to: 1
  2754  000D00  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2755  000D02  D005               	goto	u6000
  2756  000D04  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2757  000D06  E1EF               	bnz	l5289
  2758  000D08  0512               	decf	sprintf@exp& (0+255),w,b
  2759  000D0A  B0D8               	btfsc	status,0,c
  2760  000D0C  D7EC               	goto	l278
  2761  000D0E                     u6000:
  2762                           
  2763                           ; BSR set to: 1
  2764                           ;doprnt.c: 1210: }
  2765                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2766                           
  2767                           ; BSR set to: 1
  2768  000D0E  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2769  000D10  D009               	goto	l280
  2770  000D12  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2771  000D14  E104               	bnz	u6010
  2772  000D16  0E09               	movlw	9
  2773  000D18  5D18               	subwf	sprintf@prec& (0+255),w,b
  2774  000D1A  A0D8               	btfss	status,0,c
  2775  000D1C  D003               	goto	l280
  2776  000D1E                     u6010:
  2777                           
  2778                           ; BSR set to: 1
  2779                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2780  000D1E  0E08               	movlw	8
  2781  000D20  6F1A               	movwf	sprintf@c& (0+255),b
  2782  000D22  D002               	goto	l281
  2783  000D24                     l280:
  2784                           
  2785                           ; BSR set to: 1
  2786                           ;doprnt.c: 1213: else
  2787                           ;doprnt.c: 1214: c = prec;
  2788  000D24  C118  F11A         	movff	sprintf@prec,sprintf@c
  2789  000D28                     l281:
  2790                           
  2791                           ; BSR set to: 1
  2792                           ;doprnt.c: 1215: prec -= c;
  2793                           
  2794                           ; BSR set to: 1
  2795  000D28  511A               	movf	sprintf@c& (0+255),w,b
  2796  000D2A  5F18               	subwf	sprintf@prec& (0+255),f,b
  2797  000D2C  0E00               	movlw	0
  2798  000D2E  BF1A               	btfsc	sprintf@c& (0+255),7,b
  2799  000D30  0EFF               	movlw	255
  2800  000D32  5B19               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;doprnt.c: 1219: if(c)
  2804  000D34  511A               	movf	sprintf@c& (0+255),w,b
  2805  000D36  B4D8               	btfsc	status,2,c
  2806  000D38  D009               	goto	l282
  2807                           
  2808                           ; BSR set to: 1
  2809                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2810  000D3A  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2811  000D3E  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2812  000D42  0E2E               	movlw	46
  2813  000D44  6EDF               	movwf	indf2,c
  2814                           
  2815                           ; BSR set to: 1
  2816  000D46  0100               	movlb	0	; () banked
  2817  000D48  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2818  000D4A  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2819  000D4C                     l282:
  2820                           
  2821                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2822                           
  2823                           ; BSR set to: 0
  2824  000D4C  0101               	movlb	1	; () banked
  2825  000D4E  511A               	movf	sprintf@c& (0+255),w,b
  2826  000D50  EC1A  F00B         	call	_scale
  2827  000D54  C08D  F100         	movff	?_scale,_sprintf$880
  2828  000D58  C08E  F101         	movff	?_scale+1,_sprintf$880+1
  2829  000D5C  C08F  F102         	movff	?_scale+2,_sprintf$880+2
  2830  000D60  C090  F103         	movff	?_scale+3,_sprintf$880+3
  2831                           
  2832                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2833  000D64  C114  F040         	movff	sprintf@fval,___flmul@a
  2834  000D68  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2835  000D6C  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2836  000D70  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2837  000D74  C100  F03C         	movff	_sprintf$880,___flmul@b
  2838  000D78  C101  F03D         	movff	_sprintf$880+1,___flmul@b+1
  2839  000D7C  C102  F03E         	movff	_sprintf$880+2,___flmul@b+2
  2840  000D80  C103  F03F         	movff	_sprintf$880+3,___flmul@b+3
  2841  000D84  EC42  F00D         	call	___flmul	;wreg free
  2842  000D88  C03C  F096         	movff	?___flmul,___fltol@f1
  2843  000D8C  C03D  F097         	movff	?___flmul+1,___fltol@f1+1
  2844  000D90  C03E  F098         	movff	?___flmul+2,___fltol@f1+2
  2845  000D94  C03F  F099         	movff	?___flmul+3,___fltol@f1+3
  2846  000D98  EC3E  F017         	call	___fltol	;wreg free
  2847  000D9C  C096  F106         	movff	?___fltol,sprintf@val
  2848  000DA0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2849  000DA4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2850  000DA8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2851                           
  2852                           ;doprnt.c: 1228: while(c--) {
  2853  000DAC  D073               	goto	l283
  2854  000DAE                     
  2855                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2856  000DAE  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2857  000DB2  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2858  000DB6  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2859  000DBA  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2860  000DBE  0101               	movlb	1	; () banked
  2861  000DC0  511A               	movf	sprintf@c& (0+255),w,b
  2862  000DC2  0D04               	mullw	4
  2863  000DC4  0E69               	movlw	low _dpowers
  2864  000DC6  24F3               	addwf	prodl,w,c
  2865  000DC8  6EF6               	movwf	tblptrl,c
  2866  000DCA  0E06               	movlw	high _dpowers
  2867  000DCC  20F4               	addwfc	prodh,w,c
  2868  000DCE  6EF7               	movwf	tblptrh,c
  2869  000DD0                     	if	0	;There are less than 3 active tblptr bytes
  2870  000DD0                     	endif
  2871  000DD0  0009               	tblrd		*+
  2872  000DD2  CFF5 F032          	movff	tablat,___lldiv@divisor
  2873  000DD6  0009               	tblrd		*+
  2874  000DD8  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2875  000DDC  0009               	tblrd		*+
  2876  000DDE  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2877  000DE2  000A               	tblrd		*-
  2878  000DE4  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2879  000DE8  EC4E  F018         	call	___lldiv	;wreg free
  2880  000DEC  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2881  000DF0  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2882  000DF4  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2883  000DF8  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2884                           
  2885                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2886  000DFC  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2887  000E00  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2888  000E04  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2889  000E08  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2890  000E0C  0E0A               	movlw	10
  2891  000E0E  6E32               	movwf	___llmod@divisor,c
  2892  000E10  0E00               	movlw	0
  2893  000E12  6E33               	movwf	___llmod@divisor+1,c
  2894  000E14  0E00               	movlw	0
  2895  000E16  6E34               	movwf	___llmod@divisor+2,c
  2896  000E18  0E00               	movlw	0
  2897  000E1A  6E35               	movwf	___llmod@divisor+3,c
  2898  000E1C  ECC7  F018         	call	___llmod	;wreg free
  2899  000E20  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2900  000E24  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2901  000E28  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2902  000E2C  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2903                           
  2904                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2905  000E30  0101               	movlb	1	; () banked
  2906  000E32  510E               	movf	sprintf@tmpval& (0+255),w,b
  2907  000E34  0F30               	addlw	48
  2908  000E36  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2909  000E3A  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2910  000E3E  6EDF               	movwf	indf2,c
  2911                           
  2912                           ; BSR set to: 1
  2913  000E40  0100               	movlb	0	; () banked
  2914  000E42  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2915  000E44  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;doprnt.c: 1232: val %= dpowers[c];
  2919  000E46  C106  F02E         	movff	sprintf@val,___llmod@dividend
  2920  000E4A  C107  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2921  000E4E  C108  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2922  000E52  C109  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2923  000E56  0101               	movlb	1	; () banked
  2924  000E58  511A               	movf	sprintf@c& (0+255),w,b
  2925  000E5A  0D04               	mullw	4
  2926  000E5C  0E69               	movlw	low _dpowers
  2927  000E5E  24F3               	addwf	prodl,w,c
  2928  000E60  6EF6               	movwf	tblptrl,c
  2929  000E62  0E06               	movlw	high _dpowers
  2930  000E64  20F4               	addwfc	prodh,w,c
  2931  000E66  6EF7               	movwf	tblptrh,c
  2932  000E68                     	if	0	;There are less than 3 active tblptr bytes
  2933  000E68                     	endif
  2934  000E68  0009               	tblrd		*+
  2935  000E6A  CFF5 F032          	movff	tablat,___llmod@divisor
  2936  000E6E  0009               	tblrd		*+
  2937  000E70  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2938  000E74  0009               	tblrd		*+
  2939  000E76  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2940  000E7A  000A               	tblrd		*-
  2941  000E7C  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2942  000E80  ECC7  F018         	call	___llmod	;wreg free
  2943  000E84  C02E  F106         	movff	?___llmod,sprintf@val
  2944  000E88  C02F  F107         	movff	?___llmod+1,sprintf@val+1
  2945  000E8C  C030  F108         	movff	?___llmod+2,sprintf@val+2
  2946  000E90  C031  F109         	movff	?___llmod+3,sprintf@val+3
  2947  000E94                     l283:
  2948  000E94  0101               	movlb	1	; () banked
  2949  000E96  071A               	decf	sprintf@c& (0+255),f,b
  2950  000E98  291A               	incf	sprintf@c& (0+255),w,b
  2951  000E9A  B4D8               	btfsc	status,2,c
  2952  000E9C  D00E               	goto	l286
  2953  000E9E  D787               	goto	l284
  2954  000EA0                     
  2955                           ; BSR set to: 1
  2956                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2957                           
  2958                           ; BSR set to: 1
  2959  000EA0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2960  000EA4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2961  000EA8  0E30               	movlw	48
  2962  000EAA  6EDF               	movwf	indf2,c
  2963                           
  2964                           ; BSR set to: 1
  2965  000EAC  0100               	movlb	0	; () banked
  2966  000EAE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2967  000EB0  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;doprnt.c: 1237: prec--;
  2971  000EB2  0101               	movlb	1	; () banked
  2972  000EB4  0718               	decf	sprintf@prec& (0+255),f,b
  2973  000EB6  A0D8               	btfss	status,0,c
  2974  000EB8  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  2975  000EBA                     l286:
  2976                           
  2977                           ; BSR set to: 1
  2978                           
  2979                           ; BSR set to: 1
  2980  000EBA  5118               	movf	sprintf@prec& (0+255),w,b
  2981  000EBC  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2982  000EBE  B4D8               	btfsc	status,2,c
  2983  000EC0  D0A9               	goto	l302
  2984  000EC2  D7EE               	goto	l287
  2985  000EC4                     l246:
  2986                           
  2987                           ; BSR set to: 1
  2988                           ;doprnt.c: 1246: }
  2989                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2990                           
  2991                           ; BSR set to: 1
  2992  000EC4  5118               	movf	sprintf@prec& (0+255),w,b
  2993  000EC6  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2994  000EC8  A4D8               	btfss	status,2,c
  2995  000ECA  D008               	goto	l289
  2996                           
  2997                           ; BSR set to: 1
  2998  000ECC  5106               	movf	sprintf@val& (0+255),w,b
  2999  000ECE  1107               	iorwf	(sprintf@val+1)& (0+255),w,b
  3000  000ED0  1108               	iorwf	(sprintf@val+2)& (0+255),w,b
  3001  000ED2  1109               	iorwf	(sprintf@val+3)& (0+255),w,b
  3002  000ED4  A4D8               	btfss	status,2,c
  3003  000ED6  D002               	goto	l289
  3004                           
  3005                           ; BSR set to: 1
  3006                           ;doprnt.c: 1291: prec++;
  3007  000ED8  4B18               	infsnz	sprintf@prec& (0+255),f,b
  3008  000EDA  2B19               	incf	(sprintf@prec+1)& (0+255),f,b
  3009  000EDC                     l289:
  3010                           
  3011                           ; BSR set to: 1
  3012                           ;doprnt.c: 1339: if(c < prec)
  3013                           
  3014                           ; BSR set to: 1
  3015  000EDC  0E80               	movlw	128
  3016  000EDE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3017  000EE0  0E7F               	movlw	127
  3018  000EE2  0100               	movlb	0	; () banked
  3019  000EE4  6FDE               	movwf	??_sprintf& (0+255),b
  3020  000EE6  0101               	movlb	1	; () banked
  3021  000EE8  5118               	movf	sprintf@prec& (0+255),w,b
  3022  000EEA  5D1A               	subwf	sprintf@c& (0+255),w,b
  3023  000EEC  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3024  000EEE  0A80               	xorlw	128
  3025  000EF0  0100               	movlb	0	; () banked
  3026  000EF2  59DE               	subwfb	??_sprintf& (0+255),w,b
  3027  000EF4  B0D8               	btfsc	status,0,c
  3028  000EF6  D003               	goto	l290
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;doprnt.c: 1340: c = prec;
  3032  000EF8  C118  F11A         	movff	sprintf@prec,sprintf@c
  3033  000EFC  D015               	goto	l292
  3034  000EFE                     l290:
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;doprnt.c: 1341: else if(prec < c)
  3038                           
  3039                           ; BSR set to: 0
  3040  000EFE  0101               	movlb	1	; () banked
  3041  000F00  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3042  000F02  0A80               	xorlw	128
  3043  000F04  0100               	movlb	0	; () banked
  3044  000F06  6FDE               	movwf	??_sprintf& (0+255),b
  3045  000F08  0101               	movlb	1	; () banked
  3046  000F0A  511A               	movf	sprintf@c& (0+255),w,b
  3047  000F0C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3048  000F0E  0E80               	movlw	128
  3049  000F10  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3050  000F12  0E7F               	movlw	127
  3051  000F14  0100               	movlb	0	; () banked
  3052  000F16  59DE               	subwfb	??_sprintf& (0+255),w,b
  3053  000F18  B0D8               	btfsc	status,0,c
  3054  000F1A  D006               	goto	l292
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;doprnt.c: 1342: prec = c;
  3058  000F1C  0101               	movlb	1	; () banked
  3059  000F1E  511A               	movf	sprintf@c& (0+255),w,b
  3060  000F20  6F18               	movwf	sprintf@prec& (0+255),b
  3061  000F22  6B19               	clrf	(sprintf@prec+1)& (0+255),b
  3062  000F24  BF18               	btfsc	sprintf@prec& (0+255),7,b
  3063  000F26  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  3064  000F28                     l292:
  3065                           
  3066                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3067                           
  3068                           ; BSR set to: 1
  3069                           
  3070                           ; BSR set to: 1
  3071  000F28  0101               	movlb	1	; () banked
  3072  000F2A  510C               	movf	sprintf@width& (0+255),w,b
  3073  000F2C  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3074  000F2E  B4D8               	btfsc	status,2,c
  3075  000F30  D011               	goto	l293
  3076                           
  3077                           ; BSR set to: 1
  3078  000F32  0E03               	movlw	3
  3079  000F34  150A               	andwf	sprintf@flag& (0+255),w,b
  3080  000F36  0100               	movlb	0	; () banked
  3081  000F38  6FDE               	movwf	??_sprintf& (0+255),b
  3082  000F3A  0E00               	movlw	0
  3083  000F3C  0101               	movlb	1	; () banked
  3084  000F3E  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3085  000F40  0100               	movlb	0	; () banked
  3086  000F42  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3087  000F44  51DE               	movf	??_sprintf& (0+255),w,b
  3088  000F46  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3089  000F48  B4D8               	btfsc	status,2,c
  3090  000F4A  D004               	goto	l293
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 1346: width--;
  3094  000F4C  0101               	movlb	1	; () banked
  3095  000F4E  070C               	decf	sprintf@width& (0+255),f,b
  3096  000F50  A0D8               	btfss	status,0,c
  3097  000F52  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3098  000F54                     l293:
  3099                           
  3100                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3101                           
  3102                           ; BSR set to: 1
  3103  000F54  0101               	movlb	1	; () banked
  3104  000F56  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  3105  000F58  D018               	goto	l296
  3106                           
  3107                           ; BSR set to: 1
  3108                           ;doprnt.c: 1349: if(width > prec)
  3109  000F5A  510C               	movf	sprintf@width& (0+255),w,b
  3110  000F5C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3111  000F5E  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3112  000F60  0A80               	xorlw	128
  3113  000F62  0100               	movlb	0	; () banked
  3114  000F64  6FDE               	movwf	??_sprintf& (0+255),b
  3115  000F66  0101               	movlb	1	; () banked
  3116  000F68  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3117  000F6A  0A80               	xorlw	128
  3118  000F6C  0100               	movlb	0	; () banked
  3119  000F6E  59DE               	subwfb	??_sprintf& (0+255),w,b
  3120  000F70  B0D8               	btfsc	status,0,c
  3121  000F72  D006               	goto	l295
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;doprnt.c: 1350: width -= prec;
  3125  000F74  0101               	movlb	1	; () banked
  3126  000F76  5118               	movf	sprintf@prec& (0+255),w,b
  3127  000F78  5F0C               	subwf	sprintf@width& (0+255),f,b
  3128  000F7A  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3129  000F7C  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3130  000F7E  D005               	goto	l296
  3131  000F80                     l295:
  3132                           
  3133                           ;doprnt.c: 1351: else
  3134                           ;doprnt.c: 1352: width = 0;
  3135                           
  3136                           ; BSR set to: 1
  3137  000F80  0E00               	movlw	0
  3138  000F82  0101               	movlb	1	; () banked
  3139  000F84  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3140  000F86  0E00               	movlw	0
  3141  000F88  6F0C               	movwf	sprintf@width& (0+255),b
  3142  000F8A                     l296:
  3143                           
  3144                           ; BSR set to: 1
  3145                           ;doprnt.c: 1353: }
  3146                           ;doprnt.c: 1381: if(width > c)
  3147                           
  3148                           ; BSR set to: 1
  3149                           
  3150                           ; BSR set to: 1
  3151  000F8A  0E80               	movlw	128
  3152  000F8C  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3153  000F8E  0E7F               	movlw	127
  3154  000F90  0100               	movlb	0	; () banked
  3155  000F92  6FDE               	movwf	??_sprintf& (0+255),b
  3156  000F94  0101               	movlb	1	; () banked
  3157  000F96  510C               	movf	sprintf@width& (0+255),w,b
  3158  000F98  5D1A               	subwf	sprintf@c& (0+255),w,b
  3159  000F9A  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3160  000F9C  0A80               	xorlw	128
  3161  000F9E  0100               	movlb	0	; () banked
  3162  000FA0  59DE               	subwfb	??_sprintf& (0+255),w,b
  3163  000FA2  B0D8               	btfsc	status,0,c
  3164  000FA4  D008               	goto	l297
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;doprnt.c: 1382: width -= c;
  3168  000FA6  0101               	movlb	1	; () banked
  3169  000FA8  511A               	movf	sprintf@c& (0+255),w,b
  3170  000FAA  5F0C               	subwf	sprintf@width& (0+255),f,b
  3171  000FAC  0E00               	movlw	0
  3172  000FAE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3173  000FB0  0EFF               	movlw	255
  3174  000FB2  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3175  000FB4  D005               	goto	l298
  3176  000FB6                     l297:
  3177                           
  3178                           ;doprnt.c: 1383: else
  3179                           ;doprnt.c: 1384: width = 0;
  3180                           
  3181                           ; BSR set to: 1
  3182  000FB6  0E00               	movlw	0
  3183  000FB8  0101               	movlb	1	; () banked
  3184  000FBA  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3185  000FBC  0E00               	movlw	0
  3186  000FBE  6F0C               	movwf	sprintf@width& (0+255),b
  3187  000FC0                     l298:
  3188                           
  3189                           ; BSR set to: 1
  3190                           ;doprnt.c: 1422: {
  3191                           ;doprnt.c: 1424: if(width
  3192                           ;doprnt.c: 1428: )
  3193                           
  3194                           ; BSR set to: 1
  3195  000FC0  510C               	movf	sprintf@width& (0+255),w,b
  3196  000FC2  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3197  000FC4  B4D8               	btfsc	status,2,c
  3198  000FC6  D011               	goto	u6150
  3199  000FC8                     u6140:
  3200                           
  3201                           ; BSR set to: 1
  3202                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3203                           
  3204                           ; BSR set to: 1
  3205                           
  3206                           ;doprnt.c: 1429: do
  3207  000FC8  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3208  000FCC  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3209  000FD0  0E20               	movlw	32
  3210  000FD2  6EDF               	movwf	indf2,c
  3211                           
  3212                           ; BSR set to: 1
  3213  000FD4  0100               	movlb	0	; () banked
  3214  000FD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3215  000FD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;doprnt.c: 1431: while(--width);
  3219  000FDA  0101               	movlb	1	; () banked
  3220  000FDC  070C               	decf	sprintf@width& (0+255),f,b
  3221  000FDE  A0D8               	btfss	status,0,c
  3222  000FE0  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3223  000FE2  510C               	movf	sprintf@width& (0+255),w,b
  3224  000FE4  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3225  000FE6  A4D8               	btfss	status,2,c
  3226  000FE8  D7EF               	goto	u6140
  3227  000FEA                     u6150:
  3228                           
  3229                           ; BSR set to: 1
  3230                           ;doprnt.c: 1438: if(flag & 0x03)
  3231                           
  3232                           ; BSR set to: 1
  3233                           
  3234                           ; BSR set to: 1
  3235  000FEA  0E03               	movlw	3
  3236  000FEC  150A               	andwf	sprintf@flag& (0+255),w,b
  3237  000FEE  0100               	movlb	0	; () banked
  3238  000FF0  6FDE               	movwf	??_sprintf& (0+255),b
  3239  000FF2  0E00               	movlw	0
  3240  000FF4  0101               	movlb	1	; () banked
  3241  000FF6  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3242  000FF8  0100               	movlb	0	; () banked
  3243  000FFA  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3244  000FFC  51DE               	movf	??_sprintf& (0+255),w,b
  3245  000FFE  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3246  001000  B4D8               	btfsc	status,2,c
  3247  001002  D008               	goto	l302
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3251  001004  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3252  001008  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3253  00100C  0E2D               	movlw	45
  3254  00100E  6EDF               	movwf	indf2,c
  3255  001010                     l5379:
  3256                           
  3257                           ; BSR set to: 0
  3258  001010  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3259  001012  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3260  001014                     l302:
  3261                           
  3262                           ; BSR set to: 0
  3263                           
  3264                           ; BSR set to: 0
  3265  001014  C0D8  FFF6         	movff	sprintf@f,tblptrl
  3266  001018  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  3267  00101C  0100               	movlb	0	; () banked
  3268  00101E  4BD8               	infsnz	sprintf@f& (0+255),f,b
  3269  001020  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  3270  001022                     	if	0	;tblptru may be non-zero
  3271  001022                     	endif
  3272  001022                     	if	0	;tblptru may be non-zero
  3273  001022                     	endif
  3274  001022  0008               	tblrd		*
  3275  001024  CFF5 F11A          	movff	tablat,sprintf@c
  3276  001028  0101               	movlb	1	; () banked
  3277  00102A  511A               	movf	sprintf@c& (0+255),w,b
  3278  00102C  A4D8               	btfss	status,2,c
  3279  00102E  EF64  F003         	goto	l230
  3280  001032                     u6170:
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;doprnt.c: 1538: *sp = 0;
  3284                           
  3285                           ; BSR set to: 1
  3286                           
  3287                           ;doprnt.c: 1469: }
  3288                           ;doprnt.c: 1533: }
  3289                           ;doprnt.c: 1535: alldone:
  3290                           
  3291                           ; BSR set to: 1
  3292  001032  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3293  001036  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3294  00103A  0E00               	movlw	0
  3295  00103C  6EDF               	movwf	indf2,c
  3296  00103E  0012               	return	
  3297  001040                     __end_of_sprintf:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon	equ	0xFF2
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _scale *****************
  3315 ;; Defined at:
  3316 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  scl             1    wreg     char 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  scl             1   21[BANK0 ] char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  4   13[BANK0 ] char 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3330 ;;      Params:         0       4       0       0       0       0       0
  3331 ;;      Locals:         0       5       0       0       0       0       0
  3332 ;;      Temps:          0       0       0       0       0       0       0
  3333 ;;      Totals:         0       9       0       0       0       0       0
  3334 ;;Total ram usage:        9 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    3
  3337 ;; This function calls:
  3338 ;;		___awdiv
  3339 ;;		___awmod
  3340 ;;		___flmul
  3341 ;; This function is called by:
  3342 ;;		_sprintf
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text2
  3347  001634                     __ptext2:
  3348                           	opt stack 0
  3349  001634                     _scale:
  3350                           	opt stack 26
  3351                           
  3352                           ; BSR set to: 1
  3353                           ;incstack = 0
  3354                           ;scale@scl stored from wreg
  3355  001634  0100               	movlb	0	; () banked
  3356  001636  6F95               	movwf	scale@scl& (0+255),b
  3357                           
  3358                           ;doprnt.c: 428: if(scl < 0) {
  3359  001638  0100               	movlb	0	; () banked
  3360  00163A  AF95               	btfss	scale@scl& (0+255),7,b
  3361  00163C  D112               	goto	l219
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;doprnt.c: 429: scl = -scl;
  3365  00163E  6D95               	negf	scale@scl& (0+255),b
  3366                           
  3367                           ;doprnt.c: 430: if(scl>=110)
  3368  001640  5195               	movf	scale@scl& (0+255),w,b
  3369  001642  0A80               	xorlw	128
  3370  001644  0F12               	addlw	-238
  3371  001646  A0D8               	btfss	status,0,c
  3372  001648  D09A               	goto	l220
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3376  00164A  0E00               	movlw	0
  3377  00164C  6E37               	movwf	___awdiv@divisor+1,c
  3378  00164E  0E0A               	movlw	10
  3379  001650  6E36               	movwf	___awdiv@divisor,c
  3380  001652  0E00               	movlw	0
  3381  001654  6E31               	movwf	___awmod@divisor+1,c
  3382  001656  0E64               	movlw	100
  3383  001658  6E30               	movwf	___awmod@divisor,c
  3384  00165A  5195               	movf	scale@scl& (0+255),w,b
  3385  00165C  6E2E               	movwf	___awmod@dividend,c
  3386  00165E  6A2F               	clrf	___awmod@dividend+1,c
  3387  001660  BE2E               	btfsc	___awmod@dividend,7,c
  3388  001662  062F               	decf	___awmod@dividend+1,f,c
  3389  001664  EC8F  F018         	call	___awmod	;wreg free
  3390  001668  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3391  00166C  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3392  001670  EC0C  F018         	call	___awdiv	;wreg free
  3393  001674  90D8               	bcf	status,0,c
  3394  001676  3634               	rlcf	?___awdiv,f,c
  3395  001678  3635               	rlcf	?___awdiv+1,f,c
  3396  00167A  90D8               	bcf	status,0,c
  3397  00167C  3634               	rlcf	?___awdiv,f,c
  3398  00167E  3635               	rlcf	?___awdiv+1,f,c
  3399  001680  0E24               	movlw	36
  3400  001682  2634               	addwf	?___awdiv,f,c
  3401  001684  0E00               	movlw	0
  3402  001686  2235               	addwfc	?___awdiv+1,f,c
  3403  001688  0E35               	movlw	low __npowers_
  3404  00168A  2434               	addwf	?___awdiv,w,c
  3405  00168C  6EF6               	movwf	tblptrl,c
  3406  00168E  0E06               	movlw	high __npowers_
  3407  001690  2035               	addwfc	?___awdiv+1,w,c
  3408  001692  6EF7               	movwf	tblptrh,c
  3409  001694                     	if	0	;There are less than 3 active tblptr bytes
  3410  001694                     	endif
  3411  001694  0009               	tblrd		*+
  3412  001696  CFF5 F040          	movff	tablat,___flmul@a
  3413  00169A  0009               	tblrd		*+
  3414  00169C  CFF5 F041          	movff	tablat,___flmul@a+1
  3415  0016A0  0009               	tblrd		*+
  3416  0016A2  CFF5 F042          	movff	tablat,___flmul@a+2
  3417  0016A6  000A               	tblrd		*-
  3418  0016A8  CFF5 F043          	movff	tablat,___flmul@a+3
  3419  0016AC  0E00               	movlw	0
  3420  0016AE  6E37               	movwf	___awdiv@divisor+1,c
  3421  0016B0  0E64               	movlw	100
  3422  0016B2  6E36               	movwf	___awdiv@divisor,c
  3423  0016B4  0100               	movlb	0	; () banked
  3424  0016B6  5195               	movf	scale@scl& (0+255),w,b
  3425  0016B8  6E34               	movwf	___awdiv@dividend,c
  3426  0016BA  6A35               	clrf	___awdiv@dividend+1,c
  3427  0016BC  BE34               	btfsc	___awdiv@dividend,7,c
  3428  0016BE  0635               	decf	___awdiv@dividend+1,f,c
  3429  0016C0  EC0C  F018         	call	___awdiv	;wreg free
  3430  0016C4  90D8               	bcf	status,0,c
  3431  0016C6  3634               	rlcf	?___awdiv,f,c
  3432  0016C8  3635               	rlcf	?___awdiv+1,f,c
  3433  0016CA  90D8               	bcf	status,0,c
  3434  0016CC  3634               	rlcf	?___awdiv,f,c
  3435  0016CE  3635               	rlcf	?___awdiv+1,f,c
  3436  0016D0  0E48               	movlw	72
  3437  0016D2  2634               	addwf	?___awdiv,f,c
  3438  0016D4  0E00               	movlw	0
  3439  0016D6  2235               	addwfc	?___awdiv+1,f,c
  3440  0016D8  0E35               	movlw	low __npowers_
  3441  0016DA  2434               	addwf	?___awdiv,w,c
  3442  0016DC  6EF6               	movwf	tblptrl,c
  3443  0016DE  0E06               	movlw	high __npowers_
  3444  0016E0  2035               	addwfc	?___awdiv+1,w,c
  3445  0016E2  6EF7               	movwf	tblptrh,c
  3446  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  3447  0016E4                     	endif
  3448  0016E4  0009               	tblrd		*+
  3449  0016E6  CFF5 F03C          	movff	tablat,___flmul@b
  3450  0016EA  0009               	tblrd		*+
  3451  0016EC  CFF5 F03D          	movff	tablat,___flmul@b+1
  3452  0016F0  0009               	tblrd		*+
  3453  0016F2  CFF5 F03E          	movff	tablat,___flmul@b+2
  3454  0016F6  000A               	tblrd		*-
  3455  0016F8  CFF5 F03F          	movff	tablat,___flmul@b+3
  3456  0016FC  EC42  F00D         	call	___flmul	;wreg free
  3457  001700  C03C  F091         	movff	?___flmul,_scale$879
  3458  001704  C03D  F092         	movff	?___flmul+1,_scale$879+1
  3459  001708  C03E  F093         	movff	?___flmul+2,_scale$879+2
  3460  00170C  C03F  F094         	movff	?___flmul+3,_scale$879+3
  3461                           
  3462                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3463  001710  C091  F03C         	movff	_scale$879,___flmul@b
  3464  001714  C092  F03D         	movff	_scale$879+1,___flmul@b+1
  3465  001718  C093  F03E         	movff	_scale$879+2,___flmul@b+2
  3466  00171C  C094  F03F         	movff	_scale$879+3,___flmul@b+3
  3467  001720  0E00               	movlw	0
  3468  001722  6E31               	movwf	___awmod@divisor+1,c
  3469  001724  0E0A               	movlw	10
  3470  001726  6E30               	movwf	___awmod@divisor,c
  3471  001728  0100               	movlb	0	; () banked
  3472  00172A  5195               	movf	scale@scl& (0+255),w,b
  3473  00172C  6E2E               	movwf	___awmod@dividend,c
  3474  00172E  6A2F               	clrf	___awmod@dividend+1,c
  3475  001730  BE2E               	btfsc	___awmod@dividend,7,c
  3476  001732  062F               	decf	___awmod@dividend+1,f,c
  3477  001734  EC8F  F018         	call	___awmod	;wreg free
  3478  001738  90D8               	bcf	status,0,c
  3479  00173A  362E               	rlcf	?___awmod,f,c
  3480  00173C  362F               	rlcf	?___awmod+1,f,c
  3481  00173E  90D8               	bcf	status,0,c
  3482  001740  362E               	rlcf	?___awmod,f,c
  3483  001742  362F               	rlcf	?___awmod+1,f,c
  3484  001744  0E35               	movlw	low __npowers_
  3485  001746  242E               	addwf	?___awmod,w,c
  3486  001748  6EF6               	movwf	tblptrl,c
  3487  00174A  0E06               	movlw	high __npowers_
  3488  00174C  202F               	addwfc	?___awmod+1,w,c
  3489  00174E  6EF7               	movwf	tblptrh,c
  3490  001750                     	if	0	;There are less than 3 active tblptr bytes
  3491  001750                     	endif
  3492  001750  0009               	tblrd		*+
  3493  001752  CFF5 F040          	movff	tablat,___flmul@a
  3494  001756  0009               	tblrd		*+
  3495  001758  CFF5 F041          	movff	tablat,___flmul@a+1
  3496  00175C  0009               	tblrd		*+
  3497  00175E  CFF5 F042          	movff	tablat,___flmul@a+2
  3498  001762  000A               	tblrd		*-
  3499  001764  CFF5 F043          	movff	tablat,___flmul@a+3
  3500  001768  EC42  F00D         	call	___flmul	;wreg free
  3501  00176C  C03C  F08D         	movff	?___flmul,?_scale
  3502  001770  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3503  001774  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3504  001778  C03F  F090         	movff	?___flmul+3,?_scale+3
  3505  00177C  0012               	return	
  3506  00177E                     l220:
  3507                           
  3508                           ;doprnt.c: 432: else if(scl > 10)
  3509  00177E  0100               	movlb	0	; () banked
  3510  001780  5195               	movf	scale@scl& (0+255),w,b
  3511  001782  0A80               	xorlw	128
  3512  001784  0F75               	addlw	-139
  3513  001786  A0D8               	btfss	status,0,c
  3514  001788  D056               	goto	l223
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3518  00178A  0E00               	movlw	0
  3519  00178C  6E37               	movwf	___awdiv@divisor+1,c
  3520  00178E  0E0A               	movlw	10
  3521  001790  6E36               	movwf	___awdiv@divisor,c
  3522  001792  5195               	movf	scale@scl& (0+255),w,b
  3523  001794  6E34               	movwf	___awdiv@dividend,c
  3524  001796  6A35               	clrf	___awdiv@dividend+1,c
  3525  001798  BE34               	btfsc	___awdiv@dividend,7,c
  3526  00179A  0635               	decf	___awdiv@dividend+1,f,c
  3527  00179C  EC0C  F018         	call	___awdiv	;wreg free
  3528  0017A0  90D8               	bcf	status,0,c
  3529  0017A2  3634               	rlcf	?___awdiv,f,c
  3530  0017A4  3635               	rlcf	?___awdiv+1,f,c
  3531  0017A6  90D8               	bcf	status,0,c
  3532  0017A8  3634               	rlcf	?___awdiv,f,c
  3533  0017AA  3635               	rlcf	?___awdiv+1,f,c
  3534  0017AC  0E24               	movlw	36
  3535  0017AE  2634               	addwf	?___awdiv,f,c
  3536  0017B0  0E00               	movlw	0
  3537  0017B2  2235               	addwfc	?___awdiv+1,f,c
  3538  0017B4  0E35               	movlw	low __npowers_
  3539  0017B6  2434               	addwf	?___awdiv,w,c
  3540  0017B8  6EF6               	movwf	tblptrl,c
  3541  0017BA  0E06               	movlw	high __npowers_
  3542  0017BC  2035               	addwfc	?___awdiv+1,w,c
  3543  0017BE  6EF7               	movwf	tblptrh,c
  3544  0017C0                     	if	0	;There are less than 3 active tblptr bytes
  3545  0017C0                     	endif
  3546  0017C0  0009               	tblrd		*+
  3547  0017C2  CFF5 F03C          	movff	tablat,___flmul@b
  3548  0017C6  0009               	tblrd		*+
  3549  0017C8  CFF5 F03D          	movff	tablat,___flmul@b+1
  3550  0017CC  0009               	tblrd		*+
  3551  0017CE  CFF5 F03E          	movff	tablat,___flmul@b+2
  3552  0017D2  000A               	tblrd		*-
  3553  0017D4  CFF5 F03F          	movff	tablat,___flmul@b+3
  3554  0017D8  0E00               	movlw	0
  3555  0017DA  6E31               	movwf	___awmod@divisor+1,c
  3556  0017DC  0E0A               	movlw	10
  3557  0017DE  6E30               	movwf	___awmod@divisor,c
  3558  0017E0  0100               	movlb	0	; () banked
  3559  0017E2  5195               	movf	scale@scl& (0+255),w,b
  3560  0017E4  6E2E               	movwf	___awmod@dividend,c
  3561  0017E6  6A2F               	clrf	___awmod@dividend+1,c
  3562  0017E8  BE2E               	btfsc	___awmod@dividend,7,c
  3563  0017EA  062F               	decf	___awmod@dividend+1,f,c
  3564  0017EC  EC8F  F018         	call	___awmod	;wreg free
  3565  0017F0  90D8               	bcf	status,0,c
  3566  0017F2  362E               	rlcf	?___awmod,f,c
  3567  0017F4  362F               	rlcf	?___awmod+1,f,c
  3568  0017F6  90D8               	bcf	status,0,c
  3569  0017F8  362E               	rlcf	?___awmod,f,c
  3570  0017FA  362F               	rlcf	?___awmod+1,f,c
  3571  0017FC  0E35               	movlw	low __npowers_
  3572  0017FE  242E               	addwf	?___awmod,w,c
  3573  001800  6EF6               	movwf	tblptrl,c
  3574  001802  0E06               	movlw	high __npowers_
  3575  001804  202F               	addwfc	?___awmod+1,w,c
  3576  001806  6EF7               	movwf	tblptrh,c
  3577  001808                     	if	0	;There are less than 3 active tblptr bytes
  3578  001808                     	endif
  3579  001808  0009               	tblrd		*+
  3580  00180A  CFF5 F040          	movff	tablat,___flmul@a
  3581  00180E  0009               	tblrd		*+
  3582  001810  CFF5 F041          	movff	tablat,___flmul@a+1
  3583  001814  0009               	tblrd		*+
  3584  001816  CFF5 F042          	movff	tablat,___flmul@a+2
  3585  00181A  000A               	tblrd		*-
  3586  00181C  CFF5 F043          	movff	tablat,___flmul@a+3
  3587  001820  EC42  F00D         	call	___flmul	;wreg free
  3588  001824  C03C  F08D         	movff	?___flmul,?_scale
  3589  001828  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3590  00182C  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3591  001830  C03F  F090         	movff	?___flmul+3,?_scale+3
  3592  001834  0012               	return	
  3593  001836                     l223:
  3594                           
  3595                           ;doprnt.c: 434: return _npowers_[scl];
  3596  001836  0100               	movlb	0	; () banked
  3597  001838  5195               	movf	scale@scl& (0+255),w,b
  3598  00183A  0D04               	mullw	4
  3599  00183C  0E35               	movlw	low __npowers_
  3600  00183E  24F3               	addwf	prodl,w,c
  3601  001840  6EF6               	movwf	tblptrl,c
  3602  001842  0E06               	movlw	high __npowers_
  3603  001844  20F4               	addwfc	prodh,w,c
  3604  001846  6EF7               	movwf	tblptrh,c
  3605  001848                     	if	0	;There are less than 3 active tblptr bytes
  3606  001848                     	endif
  3607  001848  0009               	tblrd		*+
  3608  00184A  CFF5 F08D          	movff	tablat,?_scale
  3609  00184E  0009               	tblrd		*+
  3610  001850  CFF5 F08E          	movff	tablat,?_scale+1
  3611  001854  0009               	tblrd		*+
  3612  001856  CFF5 F08F          	movff	tablat,?_scale+2
  3613  00185A  000A               	tblrd		*-
  3614  00185C  CFF5 F090          	movff	tablat,?_scale+3
  3615                           
  3616                           ; BSR set to: 0
  3617  001860  0012               	return	
  3618  001862                     l219:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 435: }
  3622                           ;doprnt.c: 436: if(scl>=110)
  3623                           
  3624                           ; BSR set to: 0
  3625  001862  5195               	movf	scale@scl& (0+255),w,b
  3626  001864  0A80               	xorlw	128
  3627  001866  0F12               	addlw	-238
  3628  001868  A0D8               	btfss	status,0,c
  3629  00186A  D09A               	goto	l224
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3633  00186C  0E00               	movlw	0
  3634  00186E  6E37               	movwf	___awdiv@divisor+1,c
  3635  001870  0E0A               	movlw	10
  3636  001872  6E36               	movwf	___awdiv@divisor,c
  3637  001874  0E00               	movlw	0
  3638  001876  6E31               	movwf	___awmod@divisor+1,c
  3639  001878  0E64               	movlw	100
  3640  00187A  6E30               	movwf	___awmod@divisor,c
  3641  00187C  5195               	movf	scale@scl& (0+255),w,b
  3642  00187E  6E2E               	movwf	___awmod@dividend,c
  3643  001880  6A2F               	clrf	___awmod@dividend+1,c
  3644  001882  BE2E               	btfsc	___awmod@dividend,7,c
  3645  001884  062F               	decf	___awmod@dividend+1,f,c
  3646  001886  EC8F  F018         	call	___awmod	;wreg free
  3647  00188A  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3648  00188E  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3649  001892  EC0C  F018         	call	___awdiv	;wreg free
  3650  001896  90D8               	bcf	status,0,c
  3651  001898  3634               	rlcf	?___awdiv,f,c
  3652  00189A  3635               	rlcf	?___awdiv+1,f,c
  3653  00189C  90D8               	bcf	status,0,c
  3654  00189E  3634               	rlcf	?___awdiv,f,c
  3655  0018A0  3635               	rlcf	?___awdiv+1,f,c
  3656  0018A2  0E24               	movlw	36
  3657  0018A4  2634               	addwf	?___awdiv,f,c
  3658  0018A6  0E00               	movlw	0
  3659  0018A8  2235               	addwfc	?___awdiv+1,f,c
  3660  0018AA  0E01               	movlw	low __powers_
  3661  0018AC  2434               	addwf	?___awdiv,w,c
  3662  0018AE  6EF6               	movwf	tblptrl,c
  3663  0018B0  0E06               	movlw	high __powers_
  3664  0018B2  2035               	addwfc	?___awdiv+1,w,c
  3665  0018B4  6EF7               	movwf	tblptrh,c
  3666  0018B6                     	if	0	;There are less than 3 active tblptr bytes
  3667  0018B6                     	endif
  3668  0018B6  0009               	tblrd		*+
  3669  0018B8  CFF5 F040          	movff	tablat,___flmul@a
  3670  0018BC  0009               	tblrd		*+
  3671  0018BE  CFF5 F041          	movff	tablat,___flmul@a+1
  3672  0018C2  0009               	tblrd		*+
  3673  0018C4  CFF5 F042          	movff	tablat,___flmul@a+2
  3674  0018C8  000A               	tblrd		*-
  3675  0018CA  CFF5 F043          	movff	tablat,___flmul@a+3
  3676  0018CE  0E00               	movlw	0
  3677  0018D0  6E37               	movwf	___awdiv@divisor+1,c
  3678  0018D2  0E64               	movlw	100
  3679  0018D4  6E36               	movwf	___awdiv@divisor,c
  3680  0018D6  0100               	movlb	0	; () banked
  3681  0018D8  5195               	movf	scale@scl& (0+255),w,b
  3682  0018DA  6E34               	movwf	___awdiv@dividend,c
  3683  0018DC  6A35               	clrf	___awdiv@dividend+1,c
  3684  0018DE  BE34               	btfsc	___awdiv@dividend,7,c
  3685  0018E0  0635               	decf	___awdiv@dividend+1,f,c
  3686  0018E2  EC0C  F018         	call	___awdiv	;wreg free
  3687  0018E6  90D8               	bcf	status,0,c
  3688  0018E8  3634               	rlcf	?___awdiv,f,c
  3689  0018EA  3635               	rlcf	?___awdiv+1,f,c
  3690  0018EC  90D8               	bcf	status,0,c
  3691  0018EE  3634               	rlcf	?___awdiv,f,c
  3692  0018F0  3635               	rlcf	?___awdiv+1,f,c
  3693  0018F2  0E48               	movlw	72
  3694  0018F4  2634               	addwf	?___awdiv,f,c
  3695  0018F6  0E00               	movlw	0
  3696  0018F8  2235               	addwfc	?___awdiv+1,f,c
  3697  0018FA  0E01               	movlw	low __powers_
  3698  0018FC  2434               	addwf	?___awdiv,w,c
  3699  0018FE  6EF6               	movwf	tblptrl,c
  3700  001900  0E06               	movlw	high __powers_
  3701  001902  2035               	addwfc	?___awdiv+1,w,c
  3702  001904  6EF7               	movwf	tblptrh,c
  3703  001906                     	if	0	;There are less than 3 active tblptr bytes
  3704  001906                     	endif
  3705  001906  0009               	tblrd		*+
  3706  001908  CFF5 F03C          	movff	tablat,___flmul@b
  3707  00190C  0009               	tblrd		*+
  3708  00190E  CFF5 F03D          	movff	tablat,___flmul@b+1
  3709  001912  0009               	tblrd		*+
  3710  001914  CFF5 F03E          	movff	tablat,___flmul@b+2
  3711  001918  000A               	tblrd		*-
  3712  00191A  CFF5 F03F          	movff	tablat,___flmul@b+3
  3713  00191E  EC42  F00D         	call	___flmul	;wreg free
  3714  001922  C03C  F091         	movff	?___flmul,_scale$879
  3715  001926  C03D  F092         	movff	?___flmul+1,_scale$879+1
  3716  00192A  C03E  F093         	movff	?___flmul+2,_scale$879+2
  3717  00192E  C03F  F094         	movff	?___flmul+3,_scale$879+3
  3718                           
  3719                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3720  001932  C091  F03C         	movff	_scale$879,___flmul@b
  3721  001936  C092  F03D         	movff	_scale$879+1,___flmul@b+1
  3722  00193A  C093  F03E         	movff	_scale$879+2,___flmul@b+2
  3723  00193E  C094  F03F         	movff	_scale$879+3,___flmul@b+3
  3724  001942  0E00               	movlw	0
  3725  001944  6E31               	movwf	___awmod@divisor+1,c
  3726  001946  0E0A               	movlw	10
  3727  001948  6E30               	movwf	___awmod@divisor,c
  3728  00194A  0100               	movlb	0	; () banked
  3729  00194C  5195               	movf	scale@scl& (0+255),w,b
  3730  00194E  6E2E               	movwf	___awmod@dividend,c
  3731  001950  6A2F               	clrf	___awmod@dividend+1,c
  3732  001952  BE2E               	btfsc	___awmod@dividend,7,c
  3733  001954  062F               	decf	___awmod@dividend+1,f,c
  3734  001956  EC8F  F018         	call	___awmod	;wreg free
  3735  00195A  90D8               	bcf	status,0,c
  3736  00195C  362E               	rlcf	?___awmod,f,c
  3737  00195E  362F               	rlcf	?___awmod+1,f,c
  3738  001960  90D8               	bcf	status,0,c
  3739  001962  362E               	rlcf	?___awmod,f,c
  3740  001964  362F               	rlcf	?___awmod+1,f,c
  3741  001966  0E01               	movlw	low __powers_
  3742  001968  242E               	addwf	?___awmod,w,c
  3743  00196A  6EF6               	movwf	tblptrl,c
  3744  00196C  0E06               	movlw	high __powers_
  3745  00196E  202F               	addwfc	?___awmod+1,w,c
  3746  001970  6EF7               	movwf	tblptrh,c
  3747  001972                     	if	0	;There are less than 3 active tblptr bytes
  3748  001972                     	endif
  3749  001972  0009               	tblrd		*+
  3750  001974  CFF5 F040          	movff	tablat,___flmul@a
  3751  001978  0009               	tblrd		*+
  3752  00197A  CFF5 F041          	movff	tablat,___flmul@a+1
  3753  00197E  0009               	tblrd		*+
  3754  001980  CFF5 F042          	movff	tablat,___flmul@a+2
  3755  001984  000A               	tblrd		*-
  3756  001986  CFF5 F043          	movff	tablat,___flmul@a+3
  3757  00198A  EC42  F00D         	call	___flmul	;wreg free
  3758  00198E  C03C  F08D         	movff	?___flmul,?_scale
  3759  001992  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3760  001996  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3761  00199A  C03F  F090         	movff	?___flmul+3,?_scale+3
  3762  00199E  0012               	return	
  3763  0019A0                     l224:
  3764                           
  3765                           ;doprnt.c: 438: else if(scl > 10)
  3766  0019A0  0100               	movlb	0	; () banked
  3767  0019A2  5195               	movf	scale@scl& (0+255),w,b
  3768  0019A4  0A80               	xorlw	128
  3769  0019A6  0F75               	addlw	-139
  3770  0019A8  A0D8               	btfss	status,0,c
  3771  0019AA  D056               	goto	l226
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3775  0019AC  0E00               	movlw	0
  3776  0019AE  6E37               	movwf	___awdiv@divisor+1,c
  3777  0019B0  0E0A               	movlw	10
  3778  0019B2  6E36               	movwf	___awdiv@divisor,c
  3779  0019B4  5195               	movf	scale@scl& (0+255),w,b
  3780  0019B6  6E34               	movwf	___awdiv@dividend,c
  3781  0019B8  6A35               	clrf	___awdiv@dividend+1,c
  3782  0019BA  BE34               	btfsc	___awdiv@dividend,7,c
  3783  0019BC  0635               	decf	___awdiv@dividend+1,f,c
  3784  0019BE  EC0C  F018         	call	___awdiv	;wreg free
  3785  0019C2  90D8               	bcf	status,0,c
  3786  0019C4  3634               	rlcf	?___awdiv,f,c
  3787  0019C6  3635               	rlcf	?___awdiv+1,f,c
  3788  0019C8  90D8               	bcf	status,0,c
  3789  0019CA  3634               	rlcf	?___awdiv,f,c
  3790  0019CC  3635               	rlcf	?___awdiv+1,f,c
  3791  0019CE  0E24               	movlw	36
  3792  0019D0  2634               	addwf	?___awdiv,f,c
  3793  0019D2  0E00               	movlw	0
  3794  0019D4  2235               	addwfc	?___awdiv+1,f,c
  3795  0019D6  0E01               	movlw	low __powers_
  3796  0019D8  2434               	addwf	?___awdiv,w,c
  3797  0019DA  6EF6               	movwf	tblptrl,c
  3798  0019DC  0E06               	movlw	high __powers_
  3799  0019DE  2035               	addwfc	?___awdiv+1,w,c
  3800  0019E0  6EF7               	movwf	tblptrh,c
  3801  0019E2                     	if	0	;There are less than 3 active tblptr bytes
  3802  0019E2                     	endif
  3803  0019E2  0009               	tblrd		*+
  3804  0019E4  CFF5 F03C          	movff	tablat,___flmul@b
  3805  0019E8  0009               	tblrd		*+
  3806  0019EA  CFF5 F03D          	movff	tablat,___flmul@b+1
  3807  0019EE  0009               	tblrd		*+
  3808  0019F0  CFF5 F03E          	movff	tablat,___flmul@b+2
  3809  0019F4  000A               	tblrd		*-
  3810  0019F6  CFF5 F03F          	movff	tablat,___flmul@b+3
  3811  0019FA  0E00               	movlw	0
  3812  0019FC  6E31               	movwf	___awmod@divisor+1,c
  3813  0019FE  0E0A               	movlw	10
  3814  001A00  6E30               	movwf	___awmod@divisor,c
  3815  001A02  0100               	movlb	0	; () banked
  3816  001A04  5195               	movf	scale@scl& (0+255),w,b
  3817  001A06  6E2E               	movwf	___awmod@dividend,c
  3818  001A08  6A2F               	clrf	___awmod@dividend+1,c
  3819  001A0A  BE2E               	btfsc	___awmod@dividend,7,c
  3820  001A0C  062F               	decf	___awmod@dividend+1,f,c
  3821  001A0E  EC8F  F018         	call	___awmod	;wreg free
  3822  001A12  90D8               	bcf	status,0,c
  3823  001A14  362E               	rlcf	?___awmod,f,c
  3824  001A16  362F               	rlcf	?___awmod+1,f,c
  3825  001A18  90D8               	bcf	status,0,c
  3826  001A1A  362E               	rlcf	?___awmod,f,c
  3827  001A1C  362F               	rlcf	?___awmod+1,f,c
  3828  001A1E  0E01               	movlw	low __powers_
  3829  001A20  242E               	addwf	?___awmod,w,c
  3830  001A22  6EF6               	movwf	tblptrl,c
  3831  001A24  0E06               	movlw	high __powers_
  3832  001A26  202F               	addwfc	?___awmod+1,w,c
  3833  001A28  6EF7               	movwf	tblptrh,c
  3834  001A2A                     	if	0	;There are less than 3 active tblptr bytes
  3835  001A2A                     	endif
  3836  001A2A  0009               	tblrd		*+
  3837  001A2C  CFF5 F040          	movff	tablat,___flmul@a
  3838  001A30  0009               	tblrd		*+
  3839  001A32  CFF5 F041          	movff	tablat,___flmul@a+1
  3840  001A36  0009               	tblrd		*+
  3841  001A38  CFF5 F042          	movff	tablat,___flmul@a+2
  3842  001A3C  000A               	tblrd		*-
  3843  001A3E  CFF5 F043          	movff	tablat,___flmul@a+3
  3844  001A42  EC42  F00D         	call	___flmul	;wreg free
  3845  001A46  C03C  F08D         	movff	?___flmul,?_scale
  3846  001A4A  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3847  001A4E  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3848  001A52  C03F  F090         	movff	?___flmul+3,?_scale+3
  3849  001A56  0012               	return	
  3850  001A58                     l226:
  3851                           
  3852                           ;doprnt.c: 440: return _powers_[scl];
  3853  001A58  0100               	movlb	0	; () banked
  3854  001A5A  5195               	movf	scale@scl& (0+255),w,b
  3855  001A5C  0D04               	mullw	4
  3856  001A5E  0E01               	movlw	low __powers_
  3857  001A60  24F3               	addwf	prodl,w,c
  3858  001A62  6EF6               	movwf	tblptrl,c
  3859  001A64  0E06               	movlw	high __powers_
  3860  001A66  20F4               	addwfc	prodh,w,c
  3861  001A68  6EF7               	movwf	tblptrh,c
  3862  001A6A                     	if	0	;There are less than 3 active tblptr bytes
  3863  001A6A                     	endif
  3864  001A6A  0009               	tblrd		*+
  3865  001A6C  CFF5 F08D          	movff	tablat,?_scale
  3866  001A70  0009               	tblrd		*+
  3867  001A72  CFF5 F08E          	movff	tablat,?_scale+1
  3868  001A76  0009               	tblrd		*+
  3869  001A78  CFF5 F08F          	movff	tablat,?_scale+2
  3870  001A7C  000A               	tblrd		*-
  3871  001A7E  CFF5 F090          	movff	tablat,?_scale+3
  3872  001A82  0012               	return	
  3873  001A84                     __end_of_scale:
  3874                           	opt stack 0
  3875                           tblptru	equ	0xFF8
  3876                           tblptrh	equ	0xFF7
  3877                           tblptrl	equ	0xFF6
  3878                           tablat	equ	0xFF5
  3879                           prodh	equ	0xFF4
  3880                           prodl	equ	0xFF3
  3881                           intcon	equ	0xFF2
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _isdigit *****************
  3891 ;; Defined at:
  3892 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  c               1    wreg     unsigned char 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  c               1   47[COMRAM] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;		None               void
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3906 ;;      Params:         0       0       0       0       0       0       0
  3907 ;;      Locals:         2       0       0       0       0       0       0
  3908 ;;      Temps:          1       0       0       0       0       0       0
  3909 ;;      Totals:         3       0       0       0       0       0       0
  3910 ;;Total ram usage:        3 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    2
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_sprintf
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text3
  3921  0034B4                     __ptext3:
  3922                           	opt stack 0
  3923  0034B4                     _isdigit:
  3924                           	opt stack 27
  3925                           
  3926                           ;incstack = 0
  3927                           ;isdigit@c stored from wreg
  3928  0034B4  6E30               	movwf	isdigit@c,c
  3929  0034B6  0E00               	movlw	0
  3930  0034B8  6E2F               	movwf	_isdigit$524,c
  3931  0034BA  0E3A               	movlw	58
  3932  0034BC  6030               	cpfslt	isdigit@c,c
  3933  0034BE  D005               	goto	l668
  3934  0034C0  0E2F               	movlw	47
  3935  0034C2  6430               	cpfsgt	isdigit@c,c
  3936  0034C4  D002               	goto	l668
  3937  0034C6  0E01               	movlw	1
  3938  0034C8  6E2F               	movwf	_isdigit$524,c
  3939  0034CA                     l668:
  3940  0034CA  C02F  F02E         	movff	_isdigit$524,??_isdigit
  3941  0034CE  302E               	rrcf	??_isdigit,w,c
  3942  0034D0  0012               	return	
  3943  0034D2                     __end_of_isdigit:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           intcon	equ	0xFF2
  3952                           postinc0	equ	0xFEE
  3953                           wreg	equ	0xFE8
  3954                           indf2	equ	0xFDF
  3955                           postinc2	equ	0xFDE
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _fround *****************
  3961 ;; Defined at:
  3962 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  prec            1    wreg     unsigned char 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  prec            1   25[BANK0 ] unsigned char 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  4   13[BANK0 ] unsigned char 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3976 ;;      Params:         0       4       0       0       0       0       0
  3977 ;;      Locals:         0       9       0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0
  3979 ;;      Totals:         0      13       0       0       0       0       0
  3980 ;;Total ram usage:       13 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    3
  3983 ;; This function calls:
  3984 ;;		___awdiv
  3985 ;;		___awmod
  3986 ;;		___flmul
  3987 ;; This function is called by:
  3988 ;;		_sprintf
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text4
  3993  0023CA                     __ptext4:
  3994                           	opt stack 0
  3995  0023CA                     _fround:
  3996                           	opt stack 26
  3997                           
  3998                           ;incstack = 0
  3999                           ;fround@prec stored from wreg
  4000  0023CA  0100               	movlb	0	; () banked
  4001  0023CC  6F99               	movwf	fround@prec& (0+255),b
  4002                           
  4003                           ;doprnt.c: 413: if(prec>=110)
  4004  0023CE  0E6D               	movlw	109
  4005  0023D0  0100               	movlb	0	; () banked
  4006  0023D2  6599               	cpfsgt	fround@prec& (0+255),b
  4007  0023D4  D0AC               	goto	l213
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4011  0023D6  0E00               	movlw	0
  4012  0023D8  6E37               	movwf	___awdiv@divisor+1,c
  4013  0023DA  0E0A               	movlw	10
  4014  0023DC  6E36               	movwf	___awdiv@divisor,c
  4015  0023DE  0E00               	movlw	0
  4016  0023E0  6E31               	movwf	___awmod@divisor+1,c
  4017  0023E2  0E64               	movlw	100
  4018  0023E4  6E30               	movwf	___awmod@divisor,c
  4019  0023E6  C099  F02E         	movff	fround@prec,___awmod@dividend
  4020  0023EA  6A2F               	clrf	___awmod@dividend+1,c
  4021  0023EC  EC8F  F018         	call	___awmod	;wreg free
  4022  0023F0  C02E  F034         	movff	?___awmod,___awdiv@dividend
  4023  0023F4  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  4024  0023F8  EC0C  F018         	call	___awdiv	;wreg free
  4025  0023FC  90D8               	bcf	status,0,c
  4026  0023FE  3634               	rlcf	?___awdiv,f,c
  4027  002400  3635               	rlcf	?___awdiv+1,f,c
  4028  002402  90D8               	bcf	status,0,c
  4029  002404  3634               	rlcf	?___awdiv,f,c
  4030  002406  3635               	rlcf	?___awdiv+1,f,c
  4031  002408  0E24               	movlw	36
  4032  00240A  2634               	addwf	?___awdiv,f,c
  4033  00240C  0E00               	movlw	0
  4034  00240E  2235               	addwfc	?___awdiv+1,f,c
  4035  002410  0E35               	movlw	low __npowers_
  4036  002412  2434               	addwf	?___awdiv,w,c
  4037  002414  6EF6               	movwf	tblptrl,c
  4038  002416  0E06               	movlw	high __npowers_
  4039  002418  2035               	addwfc	?___awdiv+1,w,c
  4040  00241A  6EF7               	movwf	tblptrh,c
  4041  00241C                     	if	0	;There are less than 3 active tblptr bytes
  4042  00241C                     	endif
  4043  00241C  0009               	tblrd		*+
  4044  00241E  CFF5 F040          	movff	tablat,___flmul@a
  4045  002422  0009               	tblrd		*+
  4046  002424  CFF5 F041          	movff	tablat,___flmul@a+1
  4047  002428  0009               	tblrd		*+
  4048  00242A  CFF5 F042          	movff	tablat,___flmul@a+2
  4049  00242E  000A               	tblrd		*-
  4050  002430  CFF5 F043          	movff	tablat,___flmul@a+3
  4051  002434  0E00               	movlw	0
  4052  002436  6E37               	movwf	___awdiv@divisor+1,c
  4053  002438  0E64               	movlw	100
  4054  00243A  6E36               	movwf	___awdiv@divisor,c
  4055  00243C  C099  F034         	movff	fround@prec,___awdiv@dividend
  4056  002440  6A35               	clrf	___awdiv@dividend+1,c
  4057  002442  EC0C  F018         	call	___awdiv	;wreg free
  4058  002446  90D8               	bcf	status,0,c
  4059  002448  3634               	rlcf	?___awdiv,f,c
  4060  00244A  3635               	rlcf	?___awdiv+1,f,c
  4061  00244C  90D8               	bcf	status,0,c
  4062  00244E  3634               	rlcf	?___awdiv,f,c
  4063  002450  3635               	rlcf	?___awdiv+1,f,c
  4064  002452  0E48               	movlw	72
  4065  002454  2634               	addwf	?___awdiv,f,c
  4066  002456  0E00               	movlw	0
  4067  002458  2235               	addwfc	?___awdiv+1,f,c
  4068  00245A  0E35               	movlw	low __npowers_
  4069  00245C  2434               	addwf	?___awdiv,w,c
  4070  00245E  6EF6               	movwf	tblptrl,c
  4071  002460  0E06               	movlw	high __npowers_
  4072  002462  2035               	addwfc	?___awdiv+1,w,c
  4073  002464  6EF7               	movwf	tblptrh,c
  4074  002466                     	if	0	;There are less than 3 active tblptr bytes
  4075  002466                     	endif
  4076  002466  0009               	tblrd		*+
  4077  002468  CFF5 F03C          	movff	tablat,___flmul@b
  4078  00246C  0009               	tblrd		*+
  4079  00246E  CFF5 F03D          	movff	tablat,___flmul@b+1
  4080  002472  0009               	tblrd		*+
  4081  002474  CFF5 F03E          	movff	tablat,___flmul@b+2
  4082  002478  000A               	tblrd		*-
  4083  00247A  CFF5 F03F          	movff	tablat,___flmul@b+3
  4084  00247E  EC42  F00D         	call	___flmul	;wreg free
  4085  002482  C03C  F095         	movff	?___flmul,_fround$877
  4086  002486  C03D  F096         	movff	?___flmul+1,_fround$877+1
  4087  00248A  C03E  F097         	movff	?___flmul+2,_fround$877+2
  4088  00248E  C03F  F098         	movff	?___flmul+3,_fround$877+3
  4089                           
  4090                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4091  002492  0E00               	movlw	0
  4092  002494  6E31               	movwf	___awmod@divisor+1,c
  4093  002496  0E0A               	movlw	10
  4094  002498  6E30               	movwf	___awmod@divisor,c
  4095  00249A  C099  F02E         	movff	fround@prec,___awmod@dividend
  4096  00249E  6A2F               	clrf	___awmod@dividend+1,c
  4097  0024A0  EC8F  F018         	call	___awmod	;wreg free
  4098  0024A4  90D8               	bcf	status,0,c
  4099  0024A6  362E               	rlcf	?___awmod,f,c
  4100  0024A8  362F               	rlcf	?___awmod+1,f,c
  4101  0024AA  90D8               	bcf	status,0,c
  4102  0024AC  362E               	rlcf	?___awmod,f,c
  4103  0024AE  362F               	rlcf	?___awmod+1,f,c
  4104  0024B0  0E35               	movlw	low __npowers_
  4105  0024B2  242E               	addwf	?___awmod,w,c
  4106  0024B4  6EF6               	movwf	tblptrl,c
  4107  0024B6  0E06               	movlw	high __npowers_
  4108  0024B8  202F               	addwfc	?___awmod+1,w,c
  4109  0024BA  6EF7               	movwf	tblptrh,c
  4110  0024BC                     	if	0	;There are less than 3 active tblptr bytes
  4111  0024BC                     	endif
  4112  0024BC  0009               	tblrd		*+
  4113  0024BE  CFF5 F040          	movff	tablat,___flmul@a
  4114  0024C2  0009               	tblrd		*+
  4115  0024C4  CFF5 F041          	movff	tablat,___flmul@a+1
  4116  0024C8  0009               	tblrd		*+
  4117  0024CA  CFF5 F042          	movff	tablat,___flmul@a+2
  4118  0024CE  000A               	tblrd		*-
  4119  0024D0  CFF5 F043          	movff	tablat,___flmul@a+3
  4120  0024D4  C095  F03C         	movff	_fround$877,___flmul@b
  4121  0024D8  C096  F03D         	movff	_fround$877+1,___flmul@b+1
  4122  0024DC  C097  F03E         	movff	_fround$877+2,___flmul@b+2
  4123  0024E0  C098  F03F         	movff	_fround$877+3,___flmul@b+3
  4124  0024E4  EC42  F00D         	call	___flmul	;wreg free
  4125  0024E8  C03C  F091         	movff	?___flmul,_fround$878
  4126  0024EC  C03D  F092         	movff	?___flmul+1,_fround$878+1
  4127  0024F0  C03E  F093         	movff	?___flmul+2,_fround$878+2
  4128  0024F4  C03F  F094         	movff	?___flmul+3,_fround$878+3
  4129                           
  4130                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4131  0024F8  C091  F03C         	movff	_fround$878,___flmul@b
  4132  0024FC  C092  F03D         	movff	_fround$878+1,___flmul@b+1
  4133  002500  C093  F03E         	movff	_fround$878+2,___flmul@b+2
  4134  002504  C094  F03F         	movff	_fround$878+3,___flmul@b+3
  4135  002508  0E00               	movlw	0
  4136  00250A  6E40               	movwf	___flmul@a,c
  4137  00250C  0E00               	movlw	0
  4138  00250E  6E41               	movwf	___flmul@a+1,c
  4139  002510  0E00               	movlw	0
  4140  002512  6E42               	movwf	___flmul@a+2,c
  4141  002514  0E3F               	movlw	63
  4142  002516  6E43               	movwf	___flmul@a+3,c
  4143  002518  EC42  F00D         	call	___flmul	;wreg free
  4144  00251C  C03C  F08D         	movff	?___flmul,?_fround
  4145  002520  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4146  002524  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4147  002528  C03F  F090         	movff	?___flmul+3,?_fround+3
  4148  00252C  0012               	return	
  4149  00252E                     l213:
  4150                           
  4151                           ;doprnt.c: 415: else if(prec > 10)
  4152  00252E  0E0A               	movlw	10
  4153  002530  0100               	movlb	0	; () banked
  4154  002532  6599               	cpfsgt	fround@prec& (0+255),b
  4155  002534  D06B               	goto	l216
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4159  002536  0E00               	movlw	0
  4160  002538  6E31               	movwf	___awmod@divisor+1,c
  4161  00253A  0E0A               	movlw	10
  4162  00253C  6E30               	movwf	___awmod@divisor,c
  4163  00253E  C099  F02E         	movff	fround@prec,___awmod@dividend
  4164  002542  6A2F               	clrf	___awmod@dividend+1,c
  4165  002544  EC8F  F018         	call	___awmod	;wreg free
  4166  002548  90D8               	bcf	status,0,c
  4167  00254A  362E               	rlcf	?___awmod,f,c
  4168  00254C  362F               	rlcf	?___awmod+1,f,c
  4169  00254E  90D8               	bcf	status,0,c
  4170  002550  362E               	rlcf	?___awmod,f,c
  4171  002552  362F               	rlcf	?___awmod+1,f,c
  4172  002554  0E35               	movlw	low __npowers_
  4173  002556  242E               	addwf	?___awmod,w,c
  4174  002558  6EF6               	movwf	tblptrl,c
  4175  00255A  0E06               	movlw	high __npowers_
  4176  00255C  202F               	addwfc	?___awmod+1,w,c
  4177  00255E  6EF7               	movwf	tblptrh,c
  4178  002560                     	if	0	;There are less than 3 active tblptr bytes
  4179  002560                     	endif
  4180  002560  0009               	tblrd		*+
  4181  002562  CFF5 F040          	movff	tablat,___flmul@a
  4182  002566  0009               	tblrd		*+
  4183  002568  CFF5 F041          	movff	tablat,___flmul@a+1
  4184  00256C  0009               	tblrd		*+
  4185  00256E  CFF5 F042          	movff	tablat,___flmul@a+2
  4186  002572  000A               	tblrd		*-
  4187  002574  CFF5 F043          	movff	tablat,___flmul@a+3
  4188  002578  0E00               	movlw	0
  4189  00257A  6E37               	movwf	___awdiv@divisor+1,c
  4190  00257C  0E0A               	movlw	10
  4191  00257E  6E36               	movwf	___awdiv@divisor,c
  4192  002580  C099  F034         	movff	fround@prec,___awdiv@dividend
  4193  002584  6A35               	clrf	___awdiv@dividend+1,c
  4194  002586  EC0C  F018         	call	___awdiv	;wreg free
  4195  00258A  90D8               	bcf	status,0,c
  4196  00258C  3634               	rlcf	?___awdiv,f,c
  4197  00258E  3635               	rlcf	?___awdiv+1,f,c
  4198  002590  90D8               	bcf	status,0,c
  4199  002592  3634               	rlcf	?___awdiv,f,c
  4200  002594  3635               	rlcf	?___awdiv+1,f,c
  4201  002596  0E24               	movlw	36
  4202  002598  2634               	addwf	?___awdiv,f,c
  4203  00259A  0E00               	movlw	0
  4204  00259C  2235               	addwfc	?___awdiv+1,f,c
  4205  00259E  0E35               	movlw	low __npowers_
  4206  0025A0  2434               	addwf	?___awdiv,w,c
  4207  0025A2  6EF6               	movwf	tblptrl,c
  4208  0025A4  0E06               	movlw	high __npowers_
  4209  0025A6  2035               	addwfc	?___awdiv+1,w,c
  4210  0025A8  6EF7               	movwf	tblptrh,c
  4211  0025AA                     	if	0	;There are less than 3 active tblptr bytes
  4212  0025AA                     	endif
  4213  0025AA  0009               	tblrd		*+
  4214  0025AC  CFF5 F03C          	movff	tablat,___flmul@b
  4215  0025B0  0009               	tblrd		*+
  4216  0025B2  CFF5 F03D          	movff	tablat,___flmul@b+1
  4217  0025B6  0009               	tblrd		*+
  4218  0025B8  CFF5 F03E          	movff	tablat,___flmul@b+2
  4219  0025BC  000A               	tblrd		*-
  4220  0025BE  CFF5 F03F          	movff	tablat,___flmul@b+3
  4221  0025C2  EC42  F00D         	call	___flmul	;wreg free
  4222  0025C6  C03C  F095         	movff	?___flmul,_fround$877
  4223  0025CA  C03D  F096         	movff	?___flmul+1,_fround$877+1
  4224  0025CE  C03E  F097         	movff	?___flmul+2,_fround$877+2
  4225  0025D2  C03F  F098         	movff	?___flmul+3,_fround$877+3
  4226                           
  4227                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4228  0025D6  C095  F03C         	movff	_fround$877,___flmul@b
  4229  0025DA  C096  F03D         	movff	_fround$877+1,___flmul@b+1
  4230  0025DE  C097  F03E         	movff	_fround$877+2,___flmul@b+2
  4231  0025E2  C098  F03F         	movff	_fround$877+3,___flmul@b+3
  4232  0025E6  0E00               	movlw	0
  4233  0025E8  6E40               	movwf	___flmul@a,c
  4234  0025EA  0E00               	movlw	0
  4235  0025EC  6E41               	movwf	___flmul@a+1,c
  4236  0025EE  0E00               	movlw	0
  4237  0025F0  6E42               	movwf	___flmul@a+2,c
  4238  0025F2  0E3F               	movlw	63
  4239  0025F4  6E43               	movwf	___flmul@a+3,c
  4240  0025F6  EC42  F00D         	call	___flmul	;wreg free
  4241  0025FA  C03C  F08D         	movff	?___flmul,?_fround
  4242  0025FE  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4243  002602  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4244  002606  C03F  F090         	movff	?___flmul+3,?_fround+3
  4245  00260A  0012               	return	
  4246  00260C                     l216:
  4247                           
  4248                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4249  00260C  0100               	movlb	0	; () banked
  4250  00260E  5199               	movf	fround@prec& (0+255),w,b
  4251  002610  0D04               	mullw	4
  4252  002612  0E35               	movlw	low __npowers_
  4253  002614  24F3               	addwf	prodl,w,c
  4254  002616  6EF6               	movwf	tblptrl,c
  4255  002618  0E06               	movlw	high __npowers_
  4256  00261A  20F4               	addwfc	prodh,w,c
  4257  00261C  6EF7               	movwf	tblptrh,c
  4258  00261E                     	if	0	;There are less than 3 active tblptr bytes
  4259  00261E                     	endif
  4260  00261E  0009               	tblrd		*+
  4261  002620  CFF5 F03C          	movff	tablat,___flmul@b
  4262  002624  0009               	tblrd		*+
  4263  002626  CFF5 F03D          	movff	tablat,___flmul@b+1
  4264  00262A  0009               	tblrd		*+
  4265  00262C  CFF5 F03E          	movff	tablat,___flmul@b+2
  4266  002630  000A               	tblrd		*-
  4267  002632  CFF5 F03F          	movff	tablat,___flmul@b+3
  4268  002636  0E00               	movlw	0
  4269  002638  6E40               	movwf	___flmul@a,c
  4270  00263A  0E00               	movlw	0
  4271  00263C  6E41               	movwf	___flmul@a+1,c
  4272  00263E  0E00               	movlw	0
  4273  002640  6E42               	movwf	___flmul@a+2,c
  4274  002642  0E3F               	movlw	63
  4275  002644  6E43               	movwf	___flmul@a+3,c
  4276  002646  EC42  F00D         	call	___flmul	;wreg free
  4277  00264A  C03C  F08D         	movff	?___flmul,?_fround
  4278  00264E  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4279  002652  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4280  002656  C03F  F090         	movff	?___flmul+3,?_fround+3
  4281  00265A  0012               	return	
  4282  00265C                     __end_of_fround:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function ___awmod *****************
  4300 ;; Defined at:
  4301 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  dividend        2   45[COMRAM] int 
  4304 ;;  divisor         2   47[COMRAM] int 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  sign            1   50[COMRAM] unsigned char 
  4307 ;;  counter         1   49[COMRAM] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  2   45[COMRAM] int 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4317 ;;      Params:         4       0       0       0       0       0       0
  4318 ;;      Locals:         2       0       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0
  4320 ;;      Totals:         6       0       0       0       0       0       0
  4321 ;;Total ram usage:        6 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    2
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_fround
  4328 ;;		_scale
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text5
  4333  00311E                     __ptext5:
  4334                           	opt stack 0
  4335  00311E                     ___awmod:
  4336                           	opt stack 26
  4337                           
  4338                           ;incstack = 0
  4339  00311E  0E00               	movlw	0
  4340  003120  6E33               	movwf	___awmod@sign,c
  4341  003122  AE2F               	btfss	___awmod@dividend+1,7,c
  4342  003124  D006               	goto	l485
  4343  003126  6C2E               	negf	___awmod@dividend,c
  4344  003128  1E2F               	comf	___awmod@dividend+1,f,c
  4345  00312A  B0D8               	btfsc	status,0,c
  4346  00312C  2A2F               	incf	___awmod@dividend+1,f,c
  4347  00312E  0E01               	movlw	1
  4348  003130  6E33               	movwf	___awmod@sign,c
  4349  003132                     l485:
  4350  003132  AE31               	btfss	___awmod@divisor+1,7,c
  4351  003134  D004               	goto	l486
  4352  003136  6C30               	negf	___awmod@divisor,c
  4353  003138  1E31               	comf	___awmod@divisor+1,f,c
  4354  00313A  B0D8               	btfsc	status,0,c
  4355  00313C  2A31               	incf	___awmod@divisor+1,f,c
  4356  00313E                     l486:
  4357  00313E  5030               	movf	___awmod@divisor,w,c
  4358  003140  1031               	iorwf	___awmod@divisor+1,w,c
  4359  003142  B4D8               	btfsc	status,2,c
  4360  003144  D018               	goto	l493
  4361  003146  0E01               	movlw	1
  4362  003148  6E32               	movwf	___awmod@counter,c
  4363  00314A  D004               	goto	l488
  4364  00314C  90D8               	bcf	status,0,c
  4365  00314E  3630               	rlcf	___awmod@divisor,f,c
  4366  003150  3631               	rlcf	___awmod@divisor+1,f,c
  4367  003152  2A32               	incf	___awmod@counter,f,c
  4368  003154                     l488:
  4369  003154  AE31               	btfss	___awmod@divisor+1,7,c
  4370  003156  D7FA               	goto	l489
  4371  003158                     u4920:
  4372  003158  5030               	movf	___awmod@divisor,w,c
  4373  00315A  5C2E               	subwf	___awmod@dividend,w,c
  4374  00315C  5031               	movf	___awmod@divisor+1,w,c
  4375  00315E  582F               	subwfb	___awmod@dividend+1,w,c
  4376  003160  A0D8               	btfss	status,0,c
  4377  003162  D004               	goto	l492
  4378  003164  5030               	movf	___awmod@divisor,w,c
  4379  003166  5E2E               	subwf	___awmod@dividend,f,c
  4380  003168  5031               	movf	___awmod@divisor+1,w,c
  4381  00316A  5A2F               	subwfb	___awmod@dividend+1,f,c
  4382  00316C                     l492:
  4383  00316C  90D8               	bcf	status,0,c
  4384  00316E  3231               	rrcf	___awmod@divisor+1,f,c
  4385  003170  3230               	rrcf	___awmod@divisor,f,c
  4386  003172  2E32               	decfsz	___awmod@counter,f,c
  4387  003174  D7F1               	goto	u4920
  4388  003176                     l493:
  4389  003176  5033               	movf	___awmod@sign,w,c
  4390  003178  B4D8               	btfsc	status,2,c
  4391  00317A  D004               	goto	l494
  4392  00317C  6C2E               	negf	___awmod@dividend,c
  4393  00317E  1E2F               	comf	___awmod@dividend+1,f,c
  4394  003180  B0D8               	btfsc	status,0,c
  4395  003182  2A2F               	incf	___awmod@dividend+1,f,c
  4396  003184                     l494:
  4397  003184  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4398  003188  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4399  00318C  0012               	return	
  4400  00318E                     __end_of___awmod:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           intcon	equ	0xFF2
  4409                           postinc0	equ	0xFEE
  4410                           wreg	equ	0xFE8
  4411                           indf2	equ	0xFDF
  4412                           postinc2	equ	0xFDE
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function ___awdiv *****************
  4418 ;; Defined at:
  4419 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  dividend        2   51[COMRAM] int 
  4422 ;;  divisor         2   53[COMRAM] int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  quotient        2   57[COMRAM] int 
  4425 ;;  sign            1   56[COMRAM] unsigned char 
  4426 ;;  counter         1   55[COMRAM] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  2   51[COMRAM] int 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4436 ;;      Params:         4       0       0       0       0       0       0
  4437 ;;      Locals:         4       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0
  4439 ;;      Totals:         8       0       0       0       0       0       0
  4440 ;;Total ram usage:        8 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    2
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_fround
  4447 ;;		_scale
  4448 ;;		_sprintf
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text6
  4453  003018                     __ptext6:
  4454                           	opt stack 0
  4455  003018                     ___awdiv:
  4456                           	opt stack 26
  4457                           
  4458                           ;incstack = 0
  4459  003018  0E00               	movlw	0
  4460  00301A  6E39               	movwf	___awdiv@sign,c
  4461  00301C  AE37               	btfss	___awdiv@divisor+1,7,c
  4462  00301E  D006               	goto	l472
  4463  003020  6C36               	negf	___awdiv@divisor,c
  4464  003022  1E37               	comf	___awdiv@divisor+1,f,c
  4465  003024  B0D8               	btfsc	status,0,c
  4466  003026  2A37               	incf	___awdiv@divisor+1,f,c
  4467  003028  0E01               	movlw	1
  4468  00302A  6E39               	movwf	___awdiv@sign,c
  4469  00302C                     l472:
  4470  00302C  AE35               	btfss	___awdiv@dividend+1,7,c
  4471  00302E  D006               	goto	l473
  4472  003030  6C34               	negf	___awdiv@dividend,c
  4473  003032  1E35               	comf	___awdiv@dividend+1,f,c
  4474  003034  B0D8               	btfsc	status,0,c
  4475  003036  2A35               	incf	___awdiv@dividend+1,f,c
  4476  003038  0E01               	movlw	1
  4477  00303A  1A39               	xorwf	___awdiv@sign,f,c
  4478  00303C                     l473:
  4479  00303C  0E00               	movlw	0
  4480  00303E  6E3B               	movwf	___awdiv@quotient+1,c
  4481  003040  0E00               	movlw	0
  4482  003042  6E3A               	movwf	___awdiv@quotient,c
  4483  003044  5036               	movf	___awdiv@divisor,w,c
  4484  003046  1037               	iorwf	___awdiv@divisor+1,w,c
  4485  003048  B4D8               	btfsc	status,2,c
  4486  00304A  D01C               	goto	l480
  4487  00304C  0E01               	movlw	1
  4488  00304E  6E38               	movwf	___awdiv@counter,c
  4489  003050  D004               	goto	l475
  4490  003052  90D8               	bcf	status,0,c
  4491  003054  3636               	rlcf	___awdiv@divisor,f,c
  4492  003056  3637               	rlcf	___awdiv@divisor+1,f,c
  4493  003058  2A38               	incf	___awdiv@counter,f,c
  4494  00305A                     l475:
  4495  00305A  AE37               	btfss	___awdiv@divisor+1,7,c
  4496  00305C  D7FA               	goto	l476
  4497  00305E                     u4860:
  4498  00305E  90D8               	bcf	status,0,c
  4499  003060  363A               	rlcf	___awdiv@quotient,f,c
  4500  003062  363B               	rlcf	___awdiv@quotient+1,f,c
  4501  003064  5036               	movf	___awdiv@divisor,w,c
  4502  003066  5C34               	subwf	___awdiv@dividend,w,c
  4503  003068  5037               	movf	___awdiv@divisor+1,w,c
  4504  00306A  5835               	subwfb	___awdiv@dividend+1,w,c
  4505  00306C  A0D8               	btfss	status,0,c
  4506  00306E  D005               	goto	l479
  4507  003070  5036               	movf	___awdiv@divisor,w,c
  4508  003072  5E34               	subwf	___awdiv@dividend,f,c
  4509  003074  5037               	movf	___awdiv@divisor+1,w,c
  4510  003076  5A35               	subwfb	___awdiv@dividend+1,f,c
  4511  003078  803A               	bsf	___awdiv@quotient,0,c
  4512  00307A                     l479:
  4513  00307A  90D8               	bcf	status,0,c
  4514  00307C  3237               	rrcf	___awdiv@divisor+1,f,c
  4515  00307E  3236               	rrcf	___awdiv@divisor,f,c
  4516  003080  2E38               	decfsz	___awdiv@counter,f,c
  4517  003082  D7ED               	goto	u4860
  4518  003084                     l480:
  4519  003084  5039               	movf	___awdiv@sign,w,c
  4520  003086  B4D8               	btfsc	status,2,c
  4521  003088  D004               	goto	l481
  4522  00308A  6C3A               	negf	___awdiv@quotient,c
  4523  00308C  1E3B               	comf	___awdiv@quotient+1,f,c
  4524  00308E  B0D8               	btfsc	status,0,c
  4525  003090  2A3B               	incf	___awdiv@quotient+1,f,c
  4526  003092                     l481:
  4527  003092  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4528  003096  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4529  00309A  0012               	return	
  4530  00309C                     __end_of___awdiv:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon	equ	0xFF2
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function __tdiv_to_l_ *****************
  4548 ;; Defined at:
  4549 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  f1              4   45[COMRAM] float 
  4552 ;;  f2              4   49[COMRAM] float 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  quot            4   56[COMRAM] unsigned long 
  4555 ;;  exp1            1   61[COMRAM] unsigned char 
  4556 ;;  cntr            1   60[COMRAM] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  4   45[COMRAM] unsigned long 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4566 ;;      Params:         8       0       0       0       0       0       0
  4567 ;;      Locals:         6       0       0       0       0       0       0
  4568 ;;      Temps:          3       0       0       0       0       0       0
  4569 ;;      Totals:        17       0       0       0       0       0       0
  4570 ;;Total ram usage:       17 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    2
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_sprintf
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text7
  4581  0027AC                     __ptext7:
  4582                           	opt stack 0
  4583  0027AC                     __tdiv_to_l_:
  4584                           	opt stack 27
  4585                           
  4586                           ;incstack = 0
  4587  0027AC  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4588  0027B0  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4589  0027B2  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4590  0027B4  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4591  0027B6  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4592  0027B8  E301               	bnc	u5041
  4593  0027BA  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4594  0027BC                     u5041:
  4595  0027BC  5036               	movf	??__tdiv_to_l_,w,c
  4596  0027BE  6E3E               	movwf	__tdiv_to_l_@exp1,c
  4597  0027C0  503E               	movf	__tdiv_to_l_@exp1,w,c
  4598  0027C2  A4D8               	btfss	status,2,c
  4599  0027C4  D009               	goto	l608
  4600  0027C6  0E00               	movlw	0
  4601  0027C8  6E2E               	movwf	?__tdiv_to_l_,c
  4602  0027CA  0E00               	movlw	0
  4603  0027CC  6E2F               	movwf	?__tdiv_to_l_+1,c
  4604  0027CE  0E00               	movlw	0
  4605  0027D0  6E30               	movwf	?__tdiv_to_l_+2,c
  4606  0027D2  0E00               	movlw	0
  4607  0027D4  6E31               	movwf	?__tdiv_to_l_+3,c
  4608  0027D6  0012               	return	
  4609  0027D8                     l608:
  4610  0027D8  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4611  0027DC  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4612  0027DE  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4613  0027E0  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4614  0027E2  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4615  0027E4  E301               	bnc	u5061
  4616  0027E6  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4617  0027E8                     u5061:
  4618  0027E8  5036               	movf	??__tdiv_to_l_,w,c
  4619  0027EA  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4620  0027EC  503D               	movf	__tdiv_to_l_@cntr,w,c
  4621  0027EE  A4D8               	btfss	status,2,c
  4622  0027F0  D009               	goto	l610
  4623  0027F2  0E00               	movlw	0
  4624  0027F4  6E2E               	movwf	?__tdiv_to_l_,c
  4625  0027F6  0E00               	movlw	0
  4626  0027F8  6E2F               	movwf	?__tdiv_to_l_+1,c
  4627  0027FA  0E00               	movlw	0
  4628  0027FC  6E30               	movwf	?__tdiv_to_l_+2,c
  4629  0027FE  0E00               	movlw	0
  4630  002800  6E31               	movwf	?__tdiv_to_l_+3,c
  4631  002802  0012               	return	
  4632  002804                     l610:
  4633  002804  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4634  002806  0EFF               	movlw	255
  4635  002808  162E               	andwf	__tdiv_to_l_@f1,f,c
  4636  00280A  0EFF               	movlw	255
  4637  00280C  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4638  00280E  0E00               	movlw	0
  4639  002810  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4640  002812  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4641  002814  0EFF               	movlw	255
  4642  002816  1632               	andwf	__tdiv_to_l_@f2,f,c
  4643  002818  0EFF               	movlw	255
  4644  00281A  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4645  00281C  0E00               	movlw	0
  4646  00281E  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4647  002820  0E00               	movlw	0
  4648  002822  6E39               	movwf	__tdiv_to_l_@quot,c
  4649  002824  0E00               	movlw	0
  4650  002826  6E3A               	movwf	__tdiv_to_l_@quot+1,c
  4651  002828  0E00               	movlw	0
  4652  00282A  6E3B               	movwf	__tdiv_to_l_@quot+2,c
  4653  00282C  0E00               	movlw	0
  4654  00282E  6E3C               	movwf	__tdiv_to_l_@quot+3,c
  4655  002830  0E7F               	movlw	127
  4656  002832  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4657  002834  503D               	movf	__tdiv_to_l_@cntr,w,c
  4658  002836  0F98               	addlw	152
  4659  002838  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4660  00283A  0E18               	movlw	24
  4661  00283C  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4662  00283E                     l611:
  4663  00283E  90D8               	bcf	status,0,c
  4664  002840  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4665  002842  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4666  002844  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4667  002846  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4668  002848  5032               	movf	__tdiv_to_l_@f2,w,c
  4669  00284A  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4670  00284C  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4671  00284E  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4672  002850  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4673  002852  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4674  002854  A0D8               	btfss	status,0,c
  4675  002856  D007               	goto	l612
  4676  002858  5032               	movf	__tdiv_to_l_@f2,w,c
  4677  00285A  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4678  00285C  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4679  00285E  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4680  002860  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4681  002862  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4682  002864  8039               	bsf	__tdiv_to_l_@quot,0,c
  4683  002866                     l612:
  4684  002866  90D8               	bcf	status,0,c
  4685  002868  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4686  00286A  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4687  00286C  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4688  00286E  2E3D               	decfsz	__tdiv_to_l_@cntr,f,c
  4689  002870  D7E6               	goto	l611
  4690  002872  AE3E               	btfss	__tdiv_to_l_@exp1,7,c
  4691  002874  D016               	goto	l614
  4692  002876  503E               	movf	__tdiv_to_l_@exp1,w,c
  4693  002878  0A80               	xorlw	128
  4694  00287A  0F97               	addlw	151
  4695  00287C  B0D8               	btfsc	status,0,c
  4696  00287E  D009               	goto	l615
  4697  002880  0E00               	movlw	0
  4698  002882  6E2E               	movwf	?__tdiv_to_l_,c
  4699  002884  0E00               	movlw	0
  4700  002886  6E2F               	movwf	?__tdiv_to_l_+1,c
  4701  002888  0E00               	movlw	0
  4702  00288A  6E30               	movwf	?__tdiv_to_l_+2,c
  4703  00288C  0E00               	movlw	0
  4704  00288E  6E31               	movwf	?__tdiv_to_l_+3,c
  4705  002890  0012               	return	
  4706  002892                     l615:
  4707  002892  90D8               	bcf	status,0,c
  4708  002894  323C               	rrcf	__tdiv_to_l_@quot+3,f,c
  4709  002896  323B               	rrcf	__tdiv_to_l_@quot+2,f,c
  4710  002898  323A               	rrcf	__tdiv_to_l_@quot+1,f,c
  4711  00289A  3239               	rrcf	__tdiv_to_l_@quot,f,c
  4712  00289C  3E3E               	incfsz	__tdiv_to_l_@exp1,f,c
  4713  00289E  D7F9               	goto	l615
  4714  0028A0  D015               	goto	u5120
  4715  0028A2                     l614:
  4716  0028A2  0E17               	movlw	23
  4717  0028A4  643E               	cpfsgt	__tdiv_to_l_@exp1,c
  4718  0028A6  D00F               	goto	l620
  4719  0028A8  0E00               	movlw	0
  4720  0028AA  6E2E               	movwf	?__tdiv_to_l_,c
  4721  0028AC  0E00               	movlw	0
  4722  0028AE  6E2F               	movwf	?__tdiv_to_l_+1,c
  4723  0028B0  0E00               	movlw	0
  4724  0028B2  6E30               	movwf	?__tdiv_to_l_+2,c
  4725  0028B4  0E00               	movlw	0
  4726  0028B6  6E31               	movwf	?__tdiv_to_l_+3,c
  4727  0028B8  0012               	return	
  4728  0028BA  90D8               	bcf	status,0,c
  4729  0028BC  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4730  0028BE  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4731  0028C0  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4732  0028C2  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4733  0028C4  063E               	decf	__tdiv_to_l_@exp1,f,c
  4734  0028C6                     l620:
  4735  0028C6  503E               	movf	__tdiv_to_l_@exp1,w,c
  4736  0028C8  A4D8               	btfss	status,2,c
  4737  0028CA  D7F7               	goto	l621
  4738  0028CC                     u5120:
  4739  0028CC  C039  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4740  0028D0  C03A  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4741  0028D4  C03B  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4742  0028D8  C03C  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4743  0028DC  0012               	return		;funcret
  4744  0028DE                     __end_of__tdiv_to_l_:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           intcon	equ	0xFF2
  4753                           postinc0	equ	0xFEE
  4754                           wreg	equ	0xFE8
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function __div_to_l_ *****************
  4762 ;; Defined at:
  4763 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  f1              4   45[COMRAM] unsigned long 
  4766 ;;  f2              4   49[COMRAM] unsigned long 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  quot            4   53[COMRAM] unsigned long 
  4769 ;;  exp1            1   58[COMRAM] unsigned char 
  4770 ;;  cntr            1   57[COMRAM] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  4   45[COMRAM] unsigned long 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4780 ;;      Params:         8       0       0       0       0       0       0
  4781 ;;      Locals:         6       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0
  4783 ;;      Totals:        14       0       0       0       0       0       0
  4784 ;;Total ram usage:       14 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    2
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_sprintf
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text8
  4795  0028DE                     __ptext8:
  4796                           	opt stack 0
  4797  0028DE                     __div_to_l_:
  4798                           	opt stack 27
  4799                           
  4800                           ;incstack = 0
  4801  0028DE  3430               	rlcf	__div_to_l_@f1+2,w,c
  4802  0028E0  3431               	rlcf	__div_to_l_@f1+3,w,c
  4803  0028E2  6E3B               	movwf	__div_to_l_@exp1,c
  4804  0028E4  503B               	movf	__div_to_l_@exp1,w,c
  4805  0028E6  A4D8               	btfss	status,2,c
  4806  0028E8  D009               	goto	l504
  4807  0028EA  0E00               	movlw	0
  4808  0028EC  6E2E               	movwf	?__div_to_l_,c
  4809  0028EE  0E00               	movlw	0
  4810  0028F0  6E2F               	movwf	?__div_to_l_+1,c
  4811  0028F2  0E00               	movlw	0
  4812  0028F4  6E30               	movwf	?__div_to_l_+2,c
  4813  0028F6  0E00               	movlw	0
  4814  0028F8  6E31               	movwf	?__div_to_l_+3,c
  4815  0028FA  0012               	return	
  4816  0028FC                     l504:
  4817  0028FC  3434               	rlcf	__div_to_l_@f2+2,w,c
  4818  0028FE  3435               	rlcf	__div_to_l_@f2+3,w,c
  4819  002900  6E3A               	movwf	__div_to_l_@cntr,c
  4820  002902  503A               	movf	__div_to_l_@cntr,w,c
  4821  002904  A4D8               	btfss	status,2,c
  4822  002906  D009               	goto	l506
  4823  002908  0E00               	movlw	0
  4824  00290A  6E2E               	movwf	?__div_to_l_,c
  4825  00290C  0E00               	movlw	0
  4826  00290E  6E2F               	movwf	?__div_to_l_+1,c
  4827  002910  0E00               	movlw	0
  4828  002912  6E30               	movwf	?__div_to_l_+2,c
  4829  002914  0E00               	movlw	0
  4830  002916  6E31               	movwf	?__div_to_l_+3,c
  4831  002918  0012               	return	
  4832  00291A                     l506:
  4833  00291A  8E30               	bsf	__div_to_l_@f1+2,7,c
  4834  00291C  0EFF               	movlw	255
  4835  00291E  162E               	andwf	__div_to_l_@f1,f,c
  4836  002920  0EFF               	movlw	255
  4837  002922  162F               	andwf	__div_to_l_@f1+1,f,c
  4838  002924  0EFF               	movlw	255
  4839  002926  1630               	andwf	__div_to_l_@f1+2,f,c
  4840  002928  0E00               	movlw	0
  4841  00292A  1631               	andwf	__div_to_l_@f1+3,f,c
  4842  00292C  8E34               	bsf	__div_to_l_@f2+2,7,c
  4843  00292E  0EFF               	movlw	255
  4844  002930  1632               	andwf	__div_to_l_@f2,f,c
  4845  002932  0EFF               	movlw	255
  4846  002934  1633               	andwf	__div_to_l_@f2+1,f,c
  4847  002936  0EFF               	movlw	255
  4848  002938  1634               	andwf	__div_to_l_@f2+2,f,c
  4849  00293A  0E00               	movlw	0
  4850  00293C  1635               	andwf	__div_to_l_@f2+3,f,c
  4851  00293E  0E00               	movlw	0
  4852  002940  6E36               	movwf	__div_to_l_@quot,c
  4853  002942  0E00               	movlw	0
  4854  002944  6E37               	movwf	__div_to_l_@quot+1,c
  4855  002946  0E00               	movlw	0
  4856  002948  6E38               	movwf	__div_to_l_@quot+2,c
  4857  00294A  0E00               	movlw	0
  4858  00294C  6E39               	movwf	__div_to_l_@quot+3,c
  4859  00294E  0E7F               	movlw	127
  4860  002950  5E3B               	subwf	__div_to_l_@exp1,f,c
  4861  002952  503A               	movf	__div_to_l_@cntr,w,c
  4862  002954  0FA0               	addlw	160
  4863  002956  5E3B               	subwf	__div_to_l_@exp1,f,c
  4864  002958  0E20               	movlw	32
  4865  00295A  6E3A               	movwf	__div_to_l_@cntr,c
  4866  00295C  90D8               	bcf	status,0,c
  4867  00295E  3636               	rlcf	__div_to_l_@quot,f,c
  4868  002960  3637               	rlcf	__div_to_l_@quot+1,f,c
  4869  002962  3638               	rlcf	__div_to_l_@quot+2,f,c
  4870  002964  3639               	rlcf	__div_to_l_@quot+3,f,c
  4871  002966  5032               	movf	__div_to_l_@f2,w,c
  4872  002968  5C2E               	subwf	__div_to_l_@f1,w,c
  4873  00296A  5033               	movf	__div_to_l_@f2+1,w,c
  4874  00296C  582F               	subwfb	__div_to_l_@f1+1,w,c
  4875  00296E  5034               	movf	__div_to_l_@f2+2,w,c
  4876  002970  5830               	subwfb	__div_to_l_@f1+2,w,c
  4877  002972  5035               	movf	__div_to_l_@f2+3,w,c
  4878  002974  5831               	subwfb	__div_to_l_@f1+3,w,c
  4879  002976  A0D8               	btfss	status,0,c
  4880  002978  D009               	goto	l508
  4881  00297A  5032               	movf	__div_to_l_@f2,w,c
  4882  00297C  5E2E               	subwf	__div_to_l_@f1,f,c
  4883  00297E  5033               	movf	__div_to_l_@f2+1,w,c
  4884  002980  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4885  002982  5034               	movf	__div_to_l_@f2+2,w,c
  4886  002984  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4887  002986  5035               	movf	__div_to_l_@f2+3,w,c
  4888  002988  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4889  00298A  8036               	bsf	__div_to_l_@quot,0,c
  4890  00298C                     l508:
  4891  00298C  90D8               	bcf	status,0,c
  4892  00298E  362E               	rlcf	__div_to_l_@f1,f,c
  4893  002990  362F               	rlcf	__div_to_l_@f1+1,f,c
  4894  002992  3630               	rlcf	__div_to_l_@f1+2,f,c
  4895  002994  3631               	rlcf	__div_to_l_@f1+3,f,c
  4896  002996  2E3A               	decfsz	__div_to_l_@cntr,f,c
  4897  002998  D7E1               	goto	l507
  4898  00299A  AE3B               	btfss	__div_to_l_@exp1,7,c
  4899  00299C  D016               	goto	l510
  4900  00299E  503B               	movf	__div_to_l_@exp1,w,c
  4901  0029A0  0A80               	xorlw	128
  4902  0029A2  0F9F               	addlw	159
  4903  0029A4  B0D8               	btfsc	status,0,c
  4904  0029A6  D009               	goto	l511
  4905  0029A8  0E00               	movlw	0
  4906  0029AA  6E2E               	movwf	?__div_to_l_,c
  4907  0029AC  0E00               	movlw	0
  4908  0029AE  6E2F               	movwf	?__div_to_l_+1,c
  4909  0029B0  0E00               	movlw	0
  4910  0029B2  6E30               	movwf	?__div_to_l_+2,c
  4911  0029B4  0E00               	movlw	0
  4912  0029B6  6E31               	movwf	?__div_to_l_+3,c
  4913  0029B8  0012               	return	
  4914  0029BA                     l511:
  4915  0029BA  90D8               	bcf	status,0,c
  4916  0029BC  3239               	rrcf	__div_to_l_@quot+3,f,c
  4917  0029BE  3238               	rrcf	__div_to_l_@quot+2,f,c
  4918  0029C0  3237               	rrcf	__div_to_l_@quot+1,f,c
  4919  0029C2  3236               	rrcf	__div_to_l_@quot,f,c
  4920  0029C4  3E3B               	incfsz	__div_to_l_@exp1,f,c
  4921  0029C6  D7F9               	goto	l511
  4922  0029C8  D015               	goto	u5190
  4923  0029CA                     l510:
  4924  0029CA  0E1F               	movlw	31
  4925  0029CC  643B               	cpfsgt	__div_to_l_@exp1,c
  4926  0029CE  D00F               	goto	l516
  4927  0029D0  0E00               	movlw	0
  4928  0029D2  6E2E               	movwf	?__div_to_l_,c
  4929  0029D4  0E00               	movlw	0
  4930  0029D6  6E2F               	movwf	?__div_to_l_+1,c
  4931  0029D8  0E00               	movlw	0
  4932  0029DA  6E30               	movwf	?__div_to_l_+2,c
  4933  0029DC  0E00               	movlw	0
  4934  0029DE  6E31               	movwf	?__div_to_l_+3,c
  4935  0029E0  0012               	return	
  4936  0029E2  90D8               	bcf	status,0,c
  4937  0029E4  3636               	rlcf	__div_to_l_@quot,f,c
  4938  0029E6  3637               	rlcf	__div_to_l_@quot+1,f,c
  4939  0029E8  3638               	rlcf	__div_to_l_@quot+2,f,c
  4940  0029EA  3639               	rlcf	__div_to_l_@quot+3,f,c
  4941  0029EC  063B               	decf	__div_to_l_@exp1,f,c
  4942  0029EE                     l516:
  4943  0029EE  503B               	movf	__div_to_l_@exp1,w,c
  4944  0029F0  A4D8               	btfss	status,2,c
  4945  0029F2  D7F7               	goto	l517
  4946  0029F4                     u5190:
  4947  0029F4  C036  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4948  0029F8  C037  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4949  0029FC  C038  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4950  002A00  C039  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4951  002A04  0012               	return		;funcret
  4952  002A06                     __end_of__div_to_l_:
  4953                           	opt stack 0
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           postinc0	equ	0xFEE
  4962                           wreg	equ	0xFE8
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function ___wmul *****************
  4970 ;; Defined at:
  4971 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  multiplier      2   45[COMRAM] unsigned int 
  4974 ;;  multiplicand    2   47[COMRAM] unsigned int 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  product         2   49[COMRAM] unsigned int 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  2   45[COMRAM] unsigned int 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, prodl, prodh
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4986 ;;      Params:         4       0       0       0       0       0       0
  4987 ;;      Locals:         2       0       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0
  4989 ;;      Totals:         6       0       0       0       0       0       0
  4990 ;;Total ram usage:        6 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_sprintf
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text9
  5001  00348E                     __ptext9:
  5002                           	opt stack 0
  5003  00348E                     ___wmul:
  5004                           	opt stack 27
  5005                           
  5006                           ;incstack = 0
  5007  00348E  502E               	movf	___wmul@multiplier,w,c
  5008  003490  0230               	mulwf	___wmul@multiplicand,c
  5009  003492  CFF3 F032          	movff	prodl,___wmul@product
  5010  003496  CFF4 F033          	movff	prodh,___wmul@product+1
  5011  00349A  502E               	movf	___wmul@multiplier,w,c
  5012  00349C  0231               	mulwf	___wmul@multiplicand+1,c
  5013  00349E  50F3               	movf	prodl,w,c
  5014  0034A0  2633               	addwf	___wmul@product+1,f,c
  5015  0034A2  502F               	movf	___wmul@multiplier+1,w,c
  5016  0034A4  0230               	mulwf	___wmul@multiplicand,c
  5017  0034A6  50F3               	movf	prodl,w,c
  5018  0034A8  2633               	addwf	___wmul@product+1,f,c
  5019  0034AA  C032  F02E         	movff	___wmul@product,?___wmul
  5020  0034AE  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  5021  0034B2  0012               	return	
  5022  0034B4                     __end_of___wmul:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function ___llmod *****************
  5040 ;; Defined at:
  5041 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  dividend        4   45[COMRAM] unsigned long 
  5044 ;;  divisor         4   49[COMRAM] unsigned long 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  counter         1   53[COMRAM] unsigned char 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  4   45[COMRAM] unsigned long 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5056 ;;      Params:         8       0       0       0       0       0       0
  5057 ;;      Locals:         1       0       0       0       0       0       0
  5058 ;;      Temps:          0       0       0       0       0       0       0
  5059 ;;      Totals:         9       0       0       0       0       0       0
  5060 ;;Total ram usage:        9 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    2
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_sprintf
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	text10
  5071  00318E                     __ptext10:
  5072                           	opt stack 0
  5073  00318E                     ___llmod:
  5074                           	opt stack 27
  5075                           
  5076                           ;incstack = 0
  5077  00318E  5032               	movf	___llmod@divisor,w,c
  5078  003190  1033               	iorwf	___llmod@divisor+1,w,c
  5079  003192  1034               	iorwf	___llmod@divisor+2,w,c
  5080  003194  1035               	iorwf	___llmod@divisor+3,w,c
  5081  003196  B4D8               	btfsc	status,2,c
  5082  003198  D024               	goto	l709
  5083  00319A  0E01               	movlw	1
  5084  00319C  6E36               	movwf	___llmod@counter,c
  5085  00319E  D006               	goto	l704
  5086  0031A0  90D8               	bcf	status,0,c
  5087  0031A2  3632               	rlcf	___llmod@divisor,f,c
  5088  0031A4  3633               	rlcf	___llmod@divisor+1,f,c
  5089  0031A6  3634               	rlcf	___llmod@divisor+2,f,c
  5090  0031A8  3635               	rlcf	___llmod@divisor+3,f,c
  5091  0031AA  2A36               	incf	___llmod@counter,f,c
  5092  0031AC                     l704:
  5093  0031AC  AE35               	btfss	___llmod@divisor+3,7,c
  5094  0031AE  D7F8               	goto	l705
  5095  0031B0                     u5600:
  5096  0031B0  5032               	movf	___llmod@divisor,w,c
  5097  0031B2  5C2E               	subwf	___llmod@dividend,w,c
  5098  0031B4  5033               	movf	___llmod@divisor+1,w,c
  5099  0031B6  582F               	subwfb	___llmod@dividend+1,w,c
  5100  0031B8  5034               	movf	___llmod@divisor+2,w,c
  5101  0031BA  5830               	subwfb	___llmod@dividend+2,w,c
  5102  0031BC  5035               	movf	___llmod@divisor+3,w,c
  5103  0031BE  5831               	subwfb	___llmod@dividend+3,w,c
  5104  0031C0  A0D8               	btfss	status,0,c
  5105  0031C2  D008               	goto	l708
  5106  0031C4  5032               	movf	___llmod@divisor,w,c
  5107  0031C6  5E2E               	subwf	___llmod@dividend,f,c
  5108  0031C8  5033               	movf	___llmod@divisor+1,w,c
  5109  0031CA  5A2F               	subwfb	___llmod@dividend+1,f,c
  5110  0031CC  5034               	movf	___llmod@divisor+2,w,c
  5111  0031CE  5A30               	subwfb	___llmod@dividend+2,f,c
  5112  0031D0  5035               	movf	___llmod@divisor+3,w,c
  5113  0031D2  5A31               	subwfb	___llmod@dividend+3,f,c
  5114  0031D4                     l708:
  5115  0031D4  90D8               	bcf	status,0,c
  5116  0031D6  3235               	rrcf	___llmod@divisor+3,f,c
  5117  0031D8  3234               	rrcf	___llmod@divisor+2,f,c
  5118  0031DA  3233               	rrcf	___llmod@divisor+1,f,c
  5119  0031DC  3232               	rrcf	___llmod@divisor,f,c
  5120  0031DE  2E36               	decfsz	___llmod@counter,f,c
  5121  0031E0  D7E7               	goto	u5600
  5122  0031E2                     l709:
  5123  0031E2  C02E  F02E         	movff	___llmod@dividend,?___llmod
  5124  0031E6  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  5125  0031EA  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  5126  0031EE  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  5127  0031F2  0012               	return		;funcret
  5128  0031F4                     __end_of___llmod:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function ___lldiv *****************
  5146 ;; Defined at:
  5147 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  dividend        4   45[COMRAM] unsigned long 
  5150 ;;  divisor         4   49[COMRAM] unsigned long 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  quotient        4   53[COMRAM] unsigned long 
  5153 ;;  counter         1   57[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  4   45[COMRAM] unsigned long 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         8       0       0       0       0       0       0
  5164 ;;      Locals:         5       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0
  5166 ;;      Totals:        13       0       0       0       0       0       0
  5167 ;;Total ram usage:       13 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    2
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_sprintf
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text11
  5178  00309C                     __ptext11:
  5179                           	opt stack 0
  5180  00309C                     ___lldiv:
  5181                           	opt stack 27
  5182                           
  5183                           ;incstack = 0
  5184  00309C  0E00               	movlw	0
  5185  00309E  6E36               	movwf	___lldiv@quotient,c
  5186  0030A0  0E00               	movlw	0
  5187  0030A2  6E37               	movwf	___lldiv@quotient+1,c
  5188  0030A4  0E00               	movlw	0
  5189  0030A6  6E38               	movwf	___lldiv@quotient+2,c
  5190  0030A8  0E00               	movlw	0
  5191  0030AA  6E39               	movwf	___lldiv@quotient+3,c
  5192  0030AC  5032               	movf	___lldiv@divisor,w,c
  5193  0030AE  1033               	iorwf	___lldiv@divisor+1,w,c
  5194  0030B0  1034               	iorwf	___lldiv@divisor+2,w,c
  5195  0030B2  1035               	iorwf	___lldiv@divisor+3,w,c
  5196  0030B4  B4D8               	btfsc	status,2,c
  5197  0030B6  D02A               	goto	l699
  5198  0030B8  0E01               	movlw	1
  5199  0030BA  6E3A               	movwf	___lldiv@counter,c
  5200  0030BC  D006               	goto	l694
  5201  0030BE  90D8               	bcf	status,0,c
  5202  0030C0  3632               	rlcf	___lldiv@divisor,f,c
  5203  0030C2  3633               	rlcf	___lldiv@divisor+1,f,c
  5204  0030C4  3634               	rlcf	___lldiv@divisor+2,f,c
  5205  0030C6  3635               	rlcf	___lldiv@divisor+3,f,c
  5206  0030C8  2A3A               	incf	___lldiv@counter,f,c
  5207  0030CA                     l694:
  5208  0030CA  AE35               	btfss	___lldiv@divisor+3,7,c
  5209  0030CC  D7F8               	goto	l695
  5210  0030CE                     u5570:
  5211  0030CE  90D8               	bcf	status,0,c
  5212  0030D0  3636               	rlcf	___lldiv@quotient,f,c
  5213  0030D2  3637               	rlcf	___lldiv@quotient+1,f,c
  5214  0030D4  3638               	rlcf	___lldiv@quotient+2,f,c
  5215  0030D6  3639               	rlcf	___lldiv@quotient+3,f,c
  5216  0030D8  5032               	movf	___lldiv@divisor,w,c
  5217  0030DA  5C2E               	subwf	___lldiv@dividend,w,c
  5218  0030DC  5033               	movf	___lldiv@divisor+1,w,c
  5219  0030DE  582F               	subwfb	___lldiv@dividend+1,w,c
  5220  0030E0  5034               	movf	___lldiv@divisor+2,w,c
  5221  0030E2  5830               	subwfb	___lldiv@dividend+2,w,c
  5222  0030E4  5035               	movf	___lldiv@divisor+3,w,c
  5223  0030E6  5831               	subwfb	___lldiv@dividend+3,w,c
  5224  0030E8  A0D8               	btfss	status,0,c
  5225  0030EA  D009               	goto	l698
  5226  0030EC  5032               	movf	___lldiv@divisor,w,c
  5227  0030EE  5E2E               	subwf	___lldiv@dividend,f,c
  5228  0030F0  5033               	movf	___lldiv@divisor+1,w,c
  5229  0030F2  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5230  0030F4  5034               	movf	___lldiv@divisor+2,w,c
  5231  0030F6  5A30               	subwfb	___lldiv@dividend+2,f,c
  5232  0030F8  5035               	movf	___lldiv@divisor+3,w,c
  5233  0030FA  5A31               	subwfb	___lldiv@dividend+3,f,c
  5234  0030FC  8036               	bsf	___lldiv@quotient,0,c
  5235  0030FE                     l698:
  5236  0030FE  90D8               	bcf	status,0,c
  5237  003100  3235               	rrcf	___lldiv@divisor+3,f,c
  5238  003102  3234               	rrcf	___lldiv@divisor+2,f,c
  5239  003104  3233               	rrcf	___lldiv@divisor+1,f,c
  5240  003106  3232               	rrcf	___lldiv@divisor,f,c
  5241  003108  2E3A               	decfsz	___lldiv@counter,f,c
  5242  00310A  D7E1               	goto	u5570
  5243  00310C                     l699:
  5244  00310C  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5245  003110  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5246  003114  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5247  003118  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5248  00311C  0012               	return		;funcret
  5249  00311E                     __end_of___lldiv:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           fsr2h	equ	0xFDA
  5263                           fsr2l	equ	0xFD9
  5264                           status	equ	0xFD8
  5265                           
  5266 ;; *************** function ___fltol *****************
  5267 ;; Defined at:
  5268 ;;		line 43 in file "/opt/microchip/xc8/v1.45/sources/common/fltol.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;  f1              4   22[BANK0 ] unsigned long 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  exp1            1   72[COMRAM] unsigned char 
  5273 ;;  sign1           1   71[COMRAM] unsigned char 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  4   22[BANK0 ] long 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5283 ;;      Params:         0       4       0       0       0       0       0
  5284 ;;      Locals:         2       0       0       0       0       0       0
  5285 ;;      Temps:          0       4       0       0       0       0       0
  5286 ;;      Totals:         2       8       0       0       0       0       0
  5287 ;;Total ram usage:       10 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    2
  5290 ;; This function calls:
  5291 ;;		Nothing
  5292 ;; This function is called by:
  5293 ;;		_sprintf
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text12
  5298  002E7C                     __ptext12:
  5299                           	opt stack 0
  5300  002E7C                     ___fltol:
  5301                           	opt stack 27
  5302                           
  5303                           ;incstack = 0
  5304  002E7C  0100               	movlb	0	; () banked
  5305  002E7E  3598               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5306  002E80  3599               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5307  002E82  6E49               	movwf	___fltol@exp1,c
  5308  002E84  5049               	movf	___fltol@exp1,w,c
  5309  002E86  A4D8               	btfss	status,2,c
  5310  002E88  D009               	goto	l551
  5311                           
  5312                           ; BSR set to: 0
  5313  002E8A  0E00               	movlw	0
  5314  002E8C  6F96               	movwf	?___fltol& (0+255),b
  5315  002E8E  0E00               	movlw	0
  5316  002E90  6F97               	movwf	(?___fltol+1)& (0+255),b
  5317  002E92  0E00               	movlw	0
  5318  002E94  6F98               	movwf	(?___fltol+2)& (0+255),b
  5319  002E96  0E00               	movlw	0
  5320  002E98  6F99               	movwf	(?___fltol+3)& (0+255),b
  5321                           
  5322                           ; BSR set to: 0
  5323  002E9A  0012               	return	
  5324  002E9C                     l551:
  5325                           
  5326                           ; BSR set to: 0
  5327                           
  5328                           ; BSR set to: 0
  5329  002E9C  C096  F09A         	movff	___fltol@f1,??___fltol
  5330  002EA0  C097  F09B         	movff	___fltol@f1+1,??___fltol+1
  5331  002EA4  C098  F09C         	movff	___fltol@f1+2,??___fltol+2
  5332  002EA8  C099  F09D         	movff	___fltol@f1+3,??___fltol+3
  5333  002EAC  0E20               	movlw	32
  5334  002EAE  D005               	goto	u5500
  5335  002EB0                     u5505:
  5336  002EB0  90D8               	bcf	status,0,c
  5337  002EB2  339D               	rrcf	(??___fltol+3)& (0+255),f,b
  5338  002EB4  339C               	rrcf	(??___fltol+2)& (0+255),f,b
  5339  002EB6  339B               	rrcf	(??___fltol+1)& (0+255),f,b
  5340  002EB8  339A               	rrcf	??___fltol& (0+255),f,b
  5341  002EBA                     u5500:
  5342  002EBA  2EE8               	decfsz	wreg,f,c
  5343  002EBC  D7F9               	goto	u5505
  5344  002EBE  519A               	movf	??___fltol& (0+255),w,b
  5345  002EC0  6E48               	movwf	___fltol@sign1,c
  5346                           
  5347                           ; BSR set to: 0
  5348  002EC2  8F98               	bsf	(___fltol@f1+2)& (0+255),7,b
  5349                           
  5350                           ; BSR set to: 0
  5351  002EC4  0EFF               	movlw	255
  5352  002EC6  1796               	andwf	___fltol@f1& (0+255),f,b
  5353  002EC8  0EFF               	movlw	255
  5354  002ECA  1797               	andwf	(___fltol@f1+1)& (0+255),f,b
  5355  002ECC  0EFF               	movlw	255
  5356  002ECE  1798               	andwf	(___fltol@f1+2)& (0+255),f,b
  5357  002ED0  0E00               	movlw	0
  5358  002ED2  1799               	andwf	(___fltol@f1+3)& (0+255),f,b
  5359                           
  5360                           ; BSR set to: 0
  5361  002ED4  0E96               	movlw	150
  5362  002ED6  5E49               	subwf	___fltol@exp1,f,c
  5363                           
  5364                           ; BSR set to: 0
  5365  002ED8  AE49               	btfss	___fltol@exp1,7,c
  5366  002EDA  D016               	goto	l553
  5367                           
  5368                           ; BSR set to: 0
  5369  002EDC  5049               	movf	___fltol@exp1,w,c
  5370  002EDE  0A80               	xorlw	128
  5371  002EE0  0F97               	addlw	151
  5372  002EE2  B0D8               	btfsc	status,0,c
  5373  002EE4  D009               	goto	l554
  5374                           
  5375                           ; BSR set to: 0
  5376  002EE6  0E00               	movlw	0
  5377  002EE8  6F96               	movwf	?___fltol& (0+255),b
  5378  002EEA  0E00               	movlw	0
  5379  002EEC  6F97               	movwf	(?___fltol+1)& (0+255),b
  5380  002EEE  0E00               	movlw	0
  5381  002EF0  6F98               	movwf	(?___fltol+2)& (0+255),b
  5382  002EF2  0E00               	movlw	0
  5383  002EF4  6F99               	movwf	(?___fltol+3)& (0+255),b
  5384                           
  5385                           ; BSR set to: 0
  5386  002EF6  0012               	return	
  5387  002EF8                     l554:
  5388                           
  5389                           ; BSR set to: 0
  5390                           
  5391                           ; BSR set to: 0
  5392                           
  5393                           ; BSR set to: 0
  5394  002EF8  90D8               	bcf	status,0,c
  5395  002EFA  3399               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5396  002EFC  3398               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5397  002EFE  3397               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5398  002F00  3396               	rrcf	___fltol@f1& (0+255),f,b
  5399                           
  5400                           ; BSR set to: 0
  5401  002F02  3E49               	incfsz	___fltol@exp1,f,c
  5402  002F04  D7F9               	goto	l554
  5403                           
  5404                           ; BSR set to: 0
  5405  002F06  D015               	goto	u5540
  5406  002F08                     l553:
  5407                           
  5408                           ; BSR set to: 0
  5409                           
  5410                           ; BSR set to: 0
  5411  002F08  0E1F               	movlw	31
  5412  002F0A  6449               	cpfsgt	___fltol@exp1,c
  5413  002F0C  D00F               	goto	l559
  5414                           
  5415                           ; BSR set to: 0
  5416  002F0E  0E00               	movlw	0
  5417  002F10  6F96               	movwf	?___fltol& (0+255),b
  5418  002F12  0E00               	movlw	0
  5419  002F14  6F97               	movwf	(?___fltol+1)& (0+255),b
  5420  002F16  0E00               	movlw	0
  5421  002F18  6F98               	movwf	(?___fltol+2)& (0+255),b
  5422  002F1A  0E00               	movlw	0
  5423  002F1C  6F99               	movwf	(?___fltol+3)& (0+255),b
  5424                           
  5425                           ; BSR set to: 0
  5426  002F1E  0012               	return	
  5427  002F20                     
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431  002F20  90D8               	bcf	status,0,c
  5432  002F22  3796               	rlcf	___fltol@f1& (0+255),f,b
  5433  002F24  3797               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5434  002F26  3798               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5435  002F28  3799               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5436  002F2A  0649               	decf	___fltol@exp1,f,c
  5437  002F2C                     l559:
  5438                           
  5439                           ; BSR set to: 0
  5440                           
  5441                           ; BSR set to: 0
  5442  002F2C  5049               	movf	___fltol@exp1,w,c
  5443  002F2E  A4D8               	btfss	status,2,c
  5444  002F30  D7F7               	goto	l560
  5445  002F32                     u5540:
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ; BSR set to: 0
  5450                           
  5451                           ; BSR set to: 0
  5452  002F32  5048               	movf	___fltol@sign1,w,c
  5453  002F34  B4D8               	btfsc	status,2,c
  5454  002F36  D008               	goto	l562
  5455                           
  5456                           ; BSR set to: 0
  5457  002F38  1F99               	comf	(___fltol@f1+3)& (0+255),f,b
  5458  002F3A  1F98               	comf	(___fltol@f1+2)& (0+255),f,b
  5459  002F3C  1F97               	comf	(___fltol@f1+1)& (0+255),f,b
  5460  002F3E  6D96               	negf	___fltol@f1& (0+255),b
  5461  002F40  0E00               	movlw	0
  5462  002F42  2397               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5463  002F44  2398               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5464  002F46  2399               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5465  002F48                     l562:
  5466                           
  5467                           ; BSR set to: 0
  5468                           
  5469                           ; BSR set to: 0
  5470  002F48  C096  F096         	movff	___fltol@f1,?___fltol
  5471  002F4C  C097  F097         	movff	___fltol@f1+1,?___fltol+1
  5472  002F50  C098  F098         	movff	___fltol@f1+2,?___fltol+2
  5473  002F54  C099  F099         	movff	___fltol@f1+3,?___fltol+3
  5474  002F58  0012               	return	
  5475  002F5A                     __end_of___fltol:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           indf2	equ	0xFDF
  5487                           postinc2	equ	0xFDE
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function ___flsub *****************
  5493 ;; Defined at:
  5494 ;;		line 245 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  b               4   78[BANK0 ] long 
  5497 ;;  a               4   82[BANK0 ] long 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  4   78[BANK0 ] long 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5509 ;;      Params:         0       8       0       0       0       0       0
  5510 ;;      Locals:         0       0       0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0
  5512 ;;      Totals:         0       8       0       0       0       0       0
  5513 ;;Total ram usage:        8 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    3
  5516 ;; This function calls:
  5517 ;;		___fladd
  5518 ;; This function is called by:
  5519 ;;		_sprintf
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text13
  5524  003290                     __ptext13:
  5525                           	opt stack 0
  5526  003290                     ___flsub:
  5527                           	opt stack 26
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;incstack = 0
  5531  003290  0E00               	movlw	0
  5532  003292  0100               	movlb	0	; () banked
  5533  003294  1BD2               	xorwf	___flsub@a& (0+255),f,b
  5534  003296  0E00               	movlw	0
  5535  003298  1BD3               	xorwf	(___flsub@a+1)& (0+255),f,b
  5536  00329A  0E00               	movlw	0
  5537  00329C  1BD4               	xorwf	(___flsub@a+2)& (0+255),f,b
  5538  00329E  0E80               	movlw	128
  5539  0032A0  1BD5               	xorwf	(___flsub@a+3)& (0+255),f,b
  5540                           
  5541                           ; BSR set to: 0
  5542  0032A2  C0CE  F0BA         	movff	___flsub@b,___fladd@b
  5543  0032A6  C0CF  F0BB         	movff	___flsub@b+1,___fladd@b+1
  5544  0032AA  C0D0  F0BC         	movff	___flsub@b+2,___fladd@b+2
  5545  0032AE  C0D1  F0BD         	movff	___flsub@b+3,___fladd@b+3
  5546  0032B2  C0D2  F0BE         	movff	___flsub@a,___fladd@a
  5547  0032B6  C0D3  F0BF         	movff	___flsub@a+1,___fladd@a+1
  5548  0032BA  C0D4  F0C0         	movff	___flsub@a+2,___fladd@a+2
  5549  0032BE  C0D5  F0C1         	movff	___flsub@a+3,___fladd@a+3
  5550  0032C2  ECEB  F00E         	call	___fladd	;wreg free
  5551  0032C6  C0BA  F0CE         	movff	?___fladd,?___flsub
  5552  0032CA  C0BB  F0CF         	movff	?___fladd+1,?___flsub+1
  5553  0032CE  C0BC  F0D0         	movff	?___fladd+2,?___flsub+2
  5554  0032D2  C0BD  F0D1         	movff	?___fladd+3,?___flsub+3
  5555  0032D6  0012               	return	
  5556  0032D8                     __end_of___flsub:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           intcon	equ	0xFF2
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _seleccionarEscala *****************
  5574 ;; Defined at:
  5575 ;;		line 342 in file "color_3.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  a               1    wreg     enum E3216
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  a               1   45[COMRAM] enum E3216
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2, status,0
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5589 ;;      Params:         0       0       0       0       0       0       0
  5590 ;;      Locals:         1       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0
  5592 ;;      Totals:         1       0       0       0       0       0       0
  5593 ;;Total ram usage:        1 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    2
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_main
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text14
  5604  003396                     __ptext14:
  5605                           	opt stack 0
  5606  003396                     _seleccionarEscala:
  5607                           	opt stack 28
  5608                           
  5609                           ;incstack = 0
  5610                           ;seleccionarEscala@a stored from wreg
  5611  003396  6E2E               	movwf	seleccionarEscala@a,c
  5612                           
  5613                           ;color_3.c: 344: switch(a)
  5614  003398  D00C               	goto	l173
  5615  00339A                     
  5616                           ;color_3.c: 347: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5617  00339A  908C               	bcf	3980,0,c	;volatile
  5618                           
  5619                           ;color_3.c: 348: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5620  00339C  928C               	bcf	3980,1,c	;volatile
  5621                           
  5622                           ;color_3.c: 349: break;
  5623  00339E  0012               	return	
  5624  0033A0                     
  5625                           ;color_3.c: 351: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5626  0033A0  908C               	bcf	3980,0,c	;volatile
  5627                           
  5628                           ;color_3.c: 352: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5629  0033A2  828C               	bsf	3980,1,c	;volatile
  5630                           
  5631                           ;color_3.c: 353: break;
  5632  0033A4  0012               	return	
  5633  0033A6                     
  5634                           ;color_3.c: 355: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5635  0033A6  808C               	bsf	3980,0,c	;volatile
  5636                           
  5637                           ;color_3.c: 356: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5638  0033A8  928C               	bcf	3980,1,c	;volatile
  5639                           
  5640                           ;color_3.c: 357: break;
  5641  0033AA  0012               	return	
  5642  0033AC                     
  5643                           ;color_3.c: 359: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5644  0033AC  808C               	bsf	3980,0,c	;volatile
  5645                           
  5646                           ;color_3.c: 360: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5647  0033AE  828C               	bsf	3980,1,c	;volatile
  5648                           
  5649                           ;color_3.c: 362: }
  5650                           
  5651                           ;color_3.c: 361: break;
  5652  0033B0  0012               	return	
  5653  0033B2                     l173:
  5654  0033B2  502E               	movf	seleccionarEscala@a,w,c
  5655                           
  5656                           ; Switch size 1, requested type "space"
  5657                           ; Number of cases is 4, Range of values is 0 to 3
  5658                           ; switch strategies available:
  5659                           ; Name         Instructions Cycles
  5660                           ; simple_byte           13     7 (average)
  5661                           ;	Chosen strategy is simple_byte
  5662  0033B4  0A00               	xorlw	0	; case 0
  5663  0033B6  B4D8               	btfsc	status,2,c
  5664  0033B8  D7F9               	goto	l178
  5665  0033BA  0A01               	xorlw	1	; case 1
  5666  0033BC  B4D8               	btfsc	status,2,c
  5667  0033BE  D7F3               	goto	l177
  5668  0033C0  0A03               	xorlw	3	; case 2
  5669  0033C2  B4D8               	btfsc	status,2,c
  5670  0033C4  D7ED               	goto	l176
  5671  0033C6  0A01               	xorlw	1	; case 3
  5672  0033C8  A4D8               	btfss	status,2,c
  5673  0033CA  0012               	return	
  5674  0033CC  D7E6               	goto	l174
  5675  0033CE                     __end_of_seleccionarEscala:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           postinc0	equ	0xFEE
  5685                           wreg	equ	0xFE8
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _seleccionarColor *****************
  5693 ;; Defined at:
  5694 ;;		line 377 in file "color_3.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  col             1    wreg     enum E3210
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  col             1   45[COMRAM] enum E3210
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         0       0       0       0       0       0       0
  5709 ;;      Locals:         1       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0
  5711 ;;      Totals:         1       0       0       0       0       0       0
  5712 ;;Total ram usage:        1 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    2
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text15
  5723  00331E                     __ptext15:
  5724                           	opt stack 0
  5725  00331E                     _seleccionarColor:
  5726                           	opt stack 28
  5727                           
  5728                           ;incstack = 0
  5729                           ;seleccionarColor@col stored from wreg
  5730  00331E  6E2E               	movwf	seleccionarColor@col,c
  5731                           
  5732                           ;color_3.c: 379: switch(col)
  5733  003320  D00F               	goto	l182
  5734  003322                     
  5735                           ;color_3.c: 382: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5736  003322  948C               	bcf	3980,2,c	;volatile
  5737                           
  5738                           ;color_3.c: 383: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5739  003324  968C               	bcf	3980,3,c	;volatile
  5740                           
  5741                           ;color_3.c: 384: break;
  5742  003326  0012               	return	
  5743  003328                     
  5744                           ;color_3.c: 386: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5745  003328  948C               	bcf	3980,2,c	;volatile
  5746                           
  5747                           ;color_3.c: 387: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5748  00332A  868C               	bsf	3980,3,c	;volatile
  5749                           
  5750                           ;color_3.c: 388: break;
  5751  00332C  0012               	return	
  5752  00332E                     
  5753                           ;color_3.c: 390: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5754  00332E  848C               	bsf	3980,2,c	;volatile
  5755                           
  5756                           ;color_3.c: 391: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5757  003330  968C               	bcf	3980,3,c	;volatile
  5758                           
  5759                           ;color_3.c: 392: break;
  5760  003332  0012               	return	
  5761  003334                     
  5762                           ;color_3.c: 394: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5763  003334  848C               	bsf	3980,2,c	;volatile
  5764                           
  5765                           ;color_3.c: 395: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5766  003336  868C               	bsf	3980,3,c	;volatile
  5767                           
  5768                           ;color_3.c: 396: break;
  5769  003338  0012               	return	
  5770  00333A                     
  5771                           ;color_3.c: 398: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5772  00333A  848C               	bsf	3980,2,c	;volatile
  5773                           
  5774                           ;color_3.c: 399: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5775  00333C  968C               	bcf	3980,3,c	;volatile
  5776                           
  5777                           ;color_3.c: 400: }
  5778  00333E  0012               	return	
  5779  003340                     l182:
  5780  003340  502E               	movf	seleccionarColor@col,w,c
  5781                           
  5782                           ; Switch size 1, requested type "space"
  5783                           ; Number of cases is 4, Range of values is 0 to 3
  5784                           ; switch strategies available:
  5785                           ; Name         Instructions Cycles
  5786                           ; simple_byte           13     7 (average)
  5787                           ;	Chosen strategy is simple_byte
  5788  003342  0A00               	xorlw	0	; case 0
  5789  003344  B4D8               	btfsc	status,2,c
  5790  003346  D7ED               	goto	l183
  5791  003348  0A01               	xorlw	1	; case 1
  5792  00334A  B4D8               	btfsc	status,2,c
  5793  00334C  D7ED               	goto	l185
  5794  00334E  0A03               	xorlw	3	; case 2
  5795  003350  B4D8               	btfsc	status,2,c
  5796  003352  D7ED               	goto	l186
  5797  003354  0A01               	xorlw	1	; case 3
  5798  003356  B4D8               	btfsc	status,2,c
  5799  003358  D7ED               	goto	l187
  5800  00335A  D7EF               	goto	l188
  5801  00335C                     __end_of_seleccionarColor:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           intcon	equ	0xFF2
  5810                           postinc0	equ	0xFEE
  5811                           wreg	equ	0xFE8
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function _lcd_msg *****************
  5819 ;; Defined at:
  5820 ;;		line 101 in file "../MyLibs/lcd4a.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  c               2   49[COMRAM] PTR unsigned char 
  5823 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  5824 ;;		 -> value(8), STR_1(18), 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5836 ;;      Params:         2       0       0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0
  5839 ;;      Totals:         2       0       0       0       0       0       0
  5840 ;;Total ram usage:        2 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    5
  5843 ;; This function calls:
  5844 ;;		_lcd_putc
  5845 ;; This function is called by:
  5846 ;;		_main
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text16
  5851  0031F4                     __ptext16:
  5852                           	opt stack 0
  5853  0031F4                     _lcd_msg:
  5854                           	opt stack 25
  5855                           
  5856                           ;lcd4a.c: 103: while(*c != 0)
  5857                           
  5858                           ;incstack = 0
  5859  0031F4  D014               	goto	l36
  5860  0031F6                     
  5861                           ;lcd4a.c: 104: {
  5862                           ;lcd4a.c: 105: lcd_putc(*c++);
  5863  0031F6  C032  FFF6         	movff	lcd_msg@c,tblptrl
  5864  0031FA  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  5865  0031FE  6AF8               	clrf	tblptru,c
  5866  003200  0E05               	movlw	(high __ramtop+-1)
  5867  003202  64F7               	cpfsgt	tblptrh,c
  5868  003204  D003               	bra	u3657
  5869  003206  0008               	tblrd		*
  5870  003208  50F5               	movf	tablat,w,c
  5871  00320A  D005               	bra	u3650
  5872  00320C                     u3657:
  5873  00320C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5874  003210  CFF7 FFEA          	movff	tblptrh,fsr0h
  5875  003214  50EF               	movf	indf0,w,c
  5876  003216                     u3650:
  5877  003216  ECAE  F019         	call	_lcd_putc
  5878  00321A  4A32               	infsnz	lcd_msg@c,f,c
  5879  00321C  2A33               	incf	lcd_msg@c+1,f,c
  5880  00321E                     l36:
  5881  00321E  C032  FFF6         	movff	lcd_msg@c,tblptrl
  5882  003222  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  5883  003226  6AF8               	clrf	tblptru,c
  5884  003228  0E05               	movlw	(high __ramtop+-1)
  5885  00322A  64F7               	cpfsgt	tblptrh,c
  5886  00322C  D003               	bra	u3667
  5887  00322E  0008               	tblrd		*
  5888  003230  50F5               	movf	tablat,w,c
  5889  003232  D005               	bra	u3660
  5890  003234                     u3667:
  5891  003234  CFF6 FFE9          	movff	tblptrl,fsr0l
  5892  003238  CFF7 FFEA          	movff	tblptrh,fsr0h
  5893  00323C  50EF               	movf	indf0,w,c
  5894  00323E                     u3660:
  5895  00323E  0900               	iorlw	0
  5896  003240  B4D8               	btfsc	status,2,c
  5897  003242  0012               	return	
  5898  003244  D7D8               	goto	l37
  5899  003246                     __end_of_lcd_msg:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           indf0	equ	0xFEF
  5909                           postinc0	equ	0xFEE
  5910                           fsr0h	equ	0xFEA
  5911                           fsr0l	equ	0xFE9
  5912                           wreg	equ	0xFE8
  5913                           indf2	equ	0xFDF
  5914                           postinc2	equ	0xFDE
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function _lcd_putc *****************
  5920 ;; Defined at:
  5921 ;;		line 66 in file "../MyLibs/lcd4a.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  c               1    wreg     unsigned char 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  c               1   48[COMRAM] unsigned char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  1    wreg      void 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0, cstack
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5935 ;;      Params:         0       0       0       0       0       0       0
  5936 ;;      Locals:         1       0       0       0       0       0       0
  5937 ;;      Temps:          0       0       0       0       0       0       0
  5938 ;;      Totals:         1       0       0       0       0       0       0
  5939 ;;Total ram usage:        1 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    4
  5942 ;; This function calls:
  5943 ;;		_lcd_cmd
  5944 ;;		_lcd_dwr
  5945 ;; This function is called by:
  5946 ;;		_lcd_msg
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text17
  5951  00335C                     __ptext17:
  5952                           	opt stack 0
  5953  00335C                     _lcd_putc:
  5954                           	opt stack 25
  5955                           
  5956                           ;incstack = 0
  5957                           ;lcd_putc@c stored from wreg
  5958  00335C  6E31               	movwf	lcd_putc@c,c
  5959                           
  5960                           ;lcd4a.c: 68: switch(c)
  5961  00335E  D010               	goto	l24
  5962  003360                     
  5963                           ;lcd4a.c: 71: lcd_cmd(0x01);
  5964  003360  0E01               	movlw	1
  5965  003362  EC23  F019         	call	_lcd_cmd
  5966                           
  5967                           ;lcd4a.c: 72: break;
  5968  003366  0012               	return	
  5969  003368                     
  5970                           ;lcd4a.c: 74: lcd_cmd(3);
  5971  003368  0E03               	movlw	3
  5972  00336A  EC23  F019         	call	_lcd_cmd
  5973                           
  5974                           ;lcd4a.c: 75: break;
  5975  00336E  0012               	return	
  5976  003370                     
  5977                           ;lcd4a.c: 77: lcd_cmd(0x10);
  5978  003370  0E10               	movlw	16
  5979  003372  EC23  F019         	call	_lcd_cmd
  5980                           
  5981                           ;lcd4a.c: 78: break;
  5982  003376  0012               	return	
  5983  003378                     
  5984                           ;lcd4a.c: 80: lcd_dwr(c);
  5985  003378  5031               	movf	lcd_putc@c,w,c
  5986  00337A  EC6C  F019         	call	_lcd_dwr
  5987                           
  5988                           ;lcd4a.c: 82: }
  5989                           
  5990                           ;lcd4a.c: 81: break;
  5991  00337E  0012               	return	
  5992  003380                     l24:
  5993  003380  5031               	movf	lcd_putc@c,w,c
  5994                           
  5995                           ; Switch size 1, requested type "space"
  5996                           ; Number of cases is 3, Range of values is 8 to 12
  5997                           ; switch strategies available:
  5998                           ; Name         Instructions Cycles
  5999                           ; simple_byte           10     6 (average)
  6000                           ;	Chosen strategy is simple_byte
  6001  003382  0A08               	xorlw	8	; case 8
  6002  003384  B4D8               	btfsc	status,2,c
  6003  003386  D7F4               	goto	l28
  6004  003388  0A02               	xorlw	2	; case 10
  6005  00338A  B4D8               	btfsc	status,2,c
  6006  00338C  D7ED               	goto	l27
  6007  00338E  0A06               	xorlw	6	; case 12
  6008  003390  B4D8               	btfsc	status,2,c
  6009  003392  D7E6               	goto	l25
  6010  003394  D7F1               	goto	l29
  6011  003396                     __end_of_lcd_putc:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           indf0	equ	0xFEF
  6021                           postinc0	equ	0xFEE
  6022                           fsr0h	equ	0xFEA
  6023                           fsr0l	equ	0xFE9
  6024                           wreg	equ	0xFE8
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031 ;; *************** function _lcd_dwr *****************
  6032 ;; Defined at:
  6033 ;;		line 86 in file "../MyLibs/lcd4a.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  x               1    wreg     unsigned char 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  x               1   47[COMRAM] unsigned char 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6047 ;;      Params:         0       0       0       0       0       0       0
  6048 ;;      Locals:         1       0       0       0       0       0       0
  6049 ;;      Temps:          1       0       0       0       0       0       0
  6050 ;;      Totals:         2       0       0       0       0       0       0
  6051 ;;Total ram usage:        2 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    3
  6054 ;; This function calls:
  6055 ;;		_lcd_lat
  6056 ;;		_manda
  6057 ;; This function is called by:
  6058 ;;		_lcd_putc
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text18
  6063  0032D8                     __ptext18:
  6064                           	opt stack 0
  6065  0032D8                     _lcd_dwr:
  6066                           	opt stack 25
  6067                           
  6068                           ;incstack = 0
  6069                           ;lcd_dwr@x stored from wreg
  6070  0032D8  6E30               	movwf	lcd_dwr@x,c
  6071                           
  6072                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6073  0032DA  8A8C               	bsf	3980,5,c	;volatile
  6074                           
  6075                           ;lcd4a.c: 89: lcd &= 0x0F;
  6076  0032DC  0E0F               	movlw	15
  6077  0032DE  1650               	andwf	_lcd,f,c
  6078                           
  6079                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  6080  0032E0  5030               	movf	lcd_dwr@x,w,c
  6081  0032E2  0BF0               	andlw	240
  6082  0032E4  1250               	iorwf	_lcd,f,c
  6083                           
  6084                           ;lcd4a.c: 91: manda(lcd);
  6085  0032E6  5050               	movf	_lcd,w,c
  6086  0032E8  EC31  F01A         	call	_manda
  6087                           
  6088                           ;lcd4a.c: 92: lcd_lat();
  6089  0032EC  EC76  F01A         	call	_lcd_lat	;wreg free
  6090                           
  6091                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(16000000/4000.0)));
  6092  0032F0  0E15               	movlw	21
  6093  0032F2  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6094  0032F4  0EC6               	movlw	198
  6095  0032F6                     u6347:
  6096  0032F6  2EE8               	decfsz	wreg,f,c
  6097  0032F8  D7FE               	bra	u6347
  6098  0032FA  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6099  0032FC  D7FC               	bra	u6347
  6100  0032FE  D000               	nop2	
  6101                           
  6102                           ;lcd4a.c: 95: lcd &= 0x0F;
  6103  003300  0E0F               	movlw	15
  6104  003302  1650               	andwf	_lcd,f,c
  6105                           
  6106                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  6107  003304  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6108  003308  0E0F               	movlw	15
  6109  00330A  162F               	andwf	??_lcd_dwr,f,c
  6110  00330C  382F               	swapf	??_lcd_dwr,w,c
  6111  00330E  0BF0               	andlw	240
  6112  003310  1250               	iorwf	_lcd,f,c
  6113                           
  6114                           ;lcd4a.c: 97: manda(lcd);
  6115  003312  5050               	movf	_lcd,w,c
  6116  003314  EC31  F01A         	call	_manda
  6117                           
  6118                           ;lcd4a.c: 98: lcd_lat();
  6119  003318  EC76  F01A         	call	_lcd_lat	;wreg free
  6120  00331C  0012               	return		;funcret
  6121  00331E                     __end_of_lcd_dwr:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           indf0	equ	0xFEF
  6131                           postinc0	equ	0xFEE
  6132                           fsr0h	equ	0xFEA
  6133                           fsr0l	equ	0xFE9
  6134                           wreg	equ	0xFE8
  6135                           indf2	equ	0xFDF
  6136                           postinc2	equ	0xFDE
  6137                           fsr2h	equ	0xFDA
  6138                           fsr2l	equ	0xFD9
  6139                           status	equ	0xFD8
  6140                           
  6141 ;; *************** function _lcd_init *****************
  6142 ;; Defined at:
  6143 ;;		line 135 in file "../MyLibs/lcd4a.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;		None
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6157 ;;      Params:         0       0       0       0       0       0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0
  6159 ;;      Temps:          1       0       0       0       0       0       0
  6160 ;;      Totals:         1       0       0       0       0       0       0
  6161 ;;Total ram usage:        1 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    4
  6164 ;; This function calls:
  6165 ;;		_lcd_cmd
  6166 ;;		_lcd_cmd_hf
  6167 ;; This function is called by:
  6168 ;;		_main
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           	psect	text19
  6173  002F5A                     __ptext19:
  6174                           	opt stack 0
  6175  002F5A                     _lcd_init:
  6176                           	opt stack 26
  6177                           
  6178                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  6179                           
  6180                           ;incstack = 0
  6181  002F5A  9E93               	bcf	3987,7,c	;volatile
  6182                           
  6183                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  6184  002F5C  9C93               	bcf	3987,6,c	;volatile
  6185                           
  6186                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  6187  002F5E  9A93               	bcf	3987,5,c	;volatile
  6188                           
  6189                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  6190  002F60  9893               	bcf	3987,4,c	;volatile
  6191                           
  6192                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  6193  002F62  9A95               	bcf	3989,5,c	;volatile
  6194                           
  6195                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  6196  002F64  9C95               	bcf	3989,6,c	;volatile
  6197                           
  6198                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  6199  002F66  9E95               	bcf	3989,7,c	;volatile
  6200                           
  6201                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  6202  002F68  9C8C               	bcf	3980,6,c	;volatile
  6203                           
  6204                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
  6205  002F6A  0E30               	movlw	48
  6206  002F6C  EC69  F01A         	call	_lcd_cmd_hf
  6207                           
  6208                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(16000000/4000.0)));
  6209  002F70  0E4E               	movlw	78
  6210  002F72  6E31               	movwf	??_lcd_init& (0+255),c
  6211  002F74  0EEB               	movlw	235
  6212  002F76                     u6357:
  6213  002F76  2EE8               	decfsz	wreg,f,c
  6214  002F78  D7FE               	bra	u6357
  6215  002F7A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6216  002F7C  D7FC               	bra	u6357
  6217  002F7E  F000               	nop	
  6218                           
  6219                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
  6220  002F80  0E30               	movlw	48
  6221  002F82  EC69  F01A         	call	_lcd_cmd_hf
  6222                           
  6223                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(16000000/4000.0)));
  6224  002F86  0E10               	movlw	16
  6225  002F88  6E31               	movwf	??_lcd_init& (0+255),c
  6226  002F8A  0E94               	movlw	148
  6227  002F8C                     u6367:
  6228  002F8C  2EE8               	decfsz	wreg,f,c
  6229  002F8E  D7FE               	bra	u6367
  6230  002F90  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6231  002F92  D7FC               	bra	u6367
  6232  002F94  D000               	nop2	
  6233                           
  6234                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
  6235  002F96  0E30               	movlw	48
  6236  002F98  EC69  F01A         	call	_lcd_cmd_hf
  6237                           
  6238                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(16000000/4000.0)));
  6239  002F9C  0E4E               	movlw	78
  6240  002F9E  6E31               	movwf	??_lcd_init& (0+255),c
  6241  002FA0  0EEB               	movlw	235
  6242  002FA2                     u6377:
  6243  002FA2  2EE8               	decfsz	wreg,f,c
  6244  002FA4  D7FE               	bra	u6377
  6245  002FA6  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6246  002FA8  D7FC               	bra	u6377
  6247  002FAA  F000               	nop	
  6248                           
  6249                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
  6250  002FAC  0E20               	movlw	32
  6251  002FAE  EC69  F01A         	call	_lcd_cmd_hf
  6252                           
  6253                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(16000000/4000.0)));
  6254  002FB2  0E20               	movlw	32
  6255  002FB4  6E31               	movwf	??_lcd_init& (0+255),c
  6256  002FB6  0E2A               	movlw	42
  6257  002FB8                     u6387:
  6258  002FB8  2EE8               	decfsz	wreg,f,c
  6259  002FBA  D7FE               	bra	u6387
  6260  002FBC  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6261  002FBE  D7FC               	bra	u6387
  6262                           
  6263                           ;lcd4a.c: 166: lcd_cmd(0x28);
  6264  002FC0  0E28               	movlw	40
  6265  002FC2  EC23  F019         	call	_lcd_cmd
  6266                           
  6267                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(16000000/4000.0)));
  6268  002FC6  0E20               	movlw	32
  6269  002FC8  6E31               	movwf	??_lcd_init& (0+255),c
  6270  002FCA  0E2A               	movlw	42
  6271  002FCC                     u6397:
  6272  002FCC  2EE8               	decfsz	wreg,f,c
  6273  002FCE  D7FE               	bra	u6397
  6274  002FD0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6275  002FD2  D7FC               	bra	u6397
  6276                           
  6277                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  6278  002FD4  0E0E               	movlw	14
  6279  002FD6  EC23  F019         	call	_lcd_cmd
  6280                           
  6281                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(16000000/4000.0)));
  6282  002FDA  0E20               	movlw	32
  6283  002FDC  6E31               	movwf	??_lcd_init& (0+255),c
  6284  002FDE  0E2A               	movlw	42
  6285  002FE0                     u6407:
  6286  002FE0  2EE8               	decfsz	wreg,f,c
  6287  002FE2  D7FE               	bra	u6407
  6288  002FE4  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6289  002FE6  D7FC               	bra	u6407
  6290                           
  6291                           ;lcd4a.c: 170: lcd_cmd(0x01);
  6292  002FE8  0E01               	movlw	1
  6293  002FEA  EC23  F019         	call	_lcd_cmd
  6294                           
  6295                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(16000000/4000.0)));
  6296  002FEE  0E20               	movlw	32
  6297  002FF0  6E31               	movwf	??_lcd_init& (0+255),c
  6298  002FF2  0E2A               	movlw	42
  6299  002FF4                     u6417:
  6300  002FF4  2EE8               	decfsz	wreg,f,c
  6301  002FF6  D7FE               	bra	u6417
  6302  002FF8  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6303  002FFA  D7FC               	bra	u6417
  6304                           
  6305                           ;lcd4a.c: 172: lcd_cmd(0x06);
  6306  002FFC  0E06               	movlw	6
  6307  002FFE  EC23  F019         	call	_lcd_cmd
  6308                           
  6309                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(16000000/4000.0)));
  6310  003002  0E20               	movlw	32
  6311  003004  6E31               	movwf	??_lcd_init& (0+255),c
  6312  003006  0E2A               	movlw	42
  6313  003008                     u6427:
  6314  003008  2EE8               	decfsz	wreg,f,c
  6315  00300A  D7FE               	bra	u6427
  6316  00300C  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6317  00300E  D7FC               	bra	u6427
  6318                           
  6319                           ;lcd4a.c: 174: lcd_cmd(0x80);
  6320  003010  0E80               	movlw	128
  6321  003012  EC23  F019         	call	_lcd_cmd
  6322  003016  0012               	return		;funcret
  6323  003018                     __end_of_lcd_init:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           intcon	equ	0xFF2
  6332                           indf0	equ	0xFEF
  6333                           postinc0	equ	0xFEE
  6334                           fsr0h	equ	0xFEA
  6335                           fsr0l	equ	0xFE9
  6336                           wreg	equ	0xFE8
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _lcd_cmd_hf *****************
  6344 ;; Defined at:
  6345 ;;		line 56 in file "../MyLibs/lcd4a.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  x               1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  x               1   46[COMRAM] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      void 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6359 ;;      Params:         0       0       0       0       0       0       0
  6360 ;;      Locals:         1       0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0
  6362 ;;      Totals:         1       0       0       0       0       0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    3
  6366 ;; This function calls:
  6367 ;;		_lcd_lat
  6368 ;;		_manda
  6369 ;; This function is called by:
  6370 ;;		_lcd_init
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text20
  6375  0034D2                     __ptext20:
  6376                           	opt stack 0
  6377  0034D2                     _lcd_cmd_hf:
  6378                           	opt stack 26
  6379                           
  6380                           ;incstack = 0
  6381                           ;lcd_cmd_hf@x stored from wreg
  6382  0034D2  6E2F               	movwf	lcd_cmd_hf@x,c
  6383                           
  6384                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6385  0034D4  9A8C               	bcf	3980,5,c	;volatile
  6386                           
  6387                           ;lcd4a.c: 59: lcd &= 0x0F;
  6388  0034D6  0E0F               	movlw	15
  6389  0034D8  1650               	andwf	_lcd,f,c
  6390                           
  6391                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  6392  0034DA  502F               	movf	lcd_cmd_hf@x,w,c
  6393  0034DC  0BF0               	andlw	240
  6394  0034DE  1250               	iorwf	_lcd,f,c
  6395                           
  6396                           ;lcd4a.c: 61: manda(lcd);
  6397  0034E0  5050               	movf	_lcd,w,c
  6398  0034E2  EC31  F01A         	call	_manda
  6399                           
  6400                           ;lcd4a.c: 62: lcd_lat();
  6401  0034E6  EC76  F01A         	call	_lcd_lat	;wreg free
  6402  0034EA  0012               	return		;funcret
  6403  0034EC                     __end_of_lcd_cmd_hf:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           intcon	equ	0xFF2
  6412                           indf0	equ	0xFEF
  6413                           postinc0	equ	0xFEE
  6414                           fsr0h	equ	0xFEA
  6415                           fsr0l	equ	0xFE9
  6416                           wreg	equ	0xFE8
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _lcd_gotoxy *****************
  6424 ;; Defined at:
  6425 ;;		line 114 in file "../MyLibs/lcd4a.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  x               1    wreg     unsigned char 
  6428 ;;  y               1   48[COMRAM] unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  x               1   50[COMRAM] unsigned char 
  6431 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6441 ;;      Params:         1       0       0       0       0       0       0
  6442 ;;      Locals:         2       0       0       0       0       0       0
  6443 ;;      Temps:          1       0       0       0       0       0       0
  6444 ;;      Totals:         4       0       0       0       0       0       0
  6445 ;;Total ram usage:        4 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    4
  6448 ;; This function calls:
  6449 ;;		_lcd_cmd
  6450 ;; This function is called by:
  6451 ;;		_main
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	text21
  6456  0033CE                     __ptext21:
  6457                           	opt stack 0
  6458  0033CE                     _lcd_gotoxy:
  6459                           	opt stack 26
  6460                           
  6461                           ;incstack = 0
  6462                           ;lcd_gotoxy@x stored from wreg
  6463  0033CE  6E33               	movwf	lcd_gotoxy@x,c
  6464                           
  6465                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  6466  0033D0  0E00               	movlw	0
  6467  0033D2  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6468                           
  6469                           ;lcd4a.c: 118: switch(y)
  6470  0033D4  D005               	goto	l42
  6471  0033D6                     
  6472                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  6473  0033D6  0EC0               	movlw	192
  6474  0033D8  D001               	goto	L4
  6475  0033DA                     
  6476                           ;lcd4a.c: 127: ADDRESS = 0x80;
  6477  0033DA  0E80               	movlw	128
  6478  0033DC                     L4:
  6479  0033DC  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6480                           
  6481                           ;lcd4a.c: 130: }
  6482                           
  6483                           ;lcd4a.c: 128: break;
  6484  0033DE  D008               	goto	l44
  6485  0033E0                     l42:
  6486  0033E0  5031               	movf	lcd_gotoxy@y,w,c
  6487                           
  6488                           ; Switch size 1, requested type "space"
  6489                           ; Number of cases is 2, Range of values is 1 to 2
  6490                           ; switch strategies available:
  6491                           ; Name         Instructions Cycles
  6492                           ; simple_byte            7     4 (average)
  6493                           ;	Chosen strategy is simple_byte
  6494  0033E2  0A01               	xorlw	1	; case 1
  6495  0033E4  B4D8               	btfsc	status,2,c
  6496  0033E6  D7F9               	goto	l46
  6497  0033E8  0A03               	xorlw	3	; case 2
  6498  0033EA  B4D8               	btfsc	status,2,c
  6499  0033EC  D7F4               	goto	l45
  6500  0033EE  D7F5               	goto	l46
  6501  0033F0                     l44:
  6502                           
  6503                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6504  0033F0  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6505  0033F2  2433               	addwf	lcd_gotoxy@x,w,c
  6506  0033F4  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6507  0033F6  0432               	decf	??_lcd_gotoxy,w,c
  6508  0033F8  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6509                           
  6510                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  6511  0033FA  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6512  0033FC  EC23  F019         	call	_lcd_cmd
  6513  003400  0012               	return		;funcret
  6514  003402                     __end_of_lcd_gotoxy:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           indf0	equ	0xFEF
  6524                           postinc0	equ	0xFEE
  6525                           fsr0h	equ	0xFEA
  6526                           fsr0l	equ	0xFE9
  6527                           wreg	equ	0xFE8
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _lcd_cmd *****************
  6535 ;; Defined at:
  6536 ;;		line 40 in file "../MyLibs/lcd4a.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  x               1    wreg     unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  x               1   47[COMRAM] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       0       0       0       0       0       0
  6551 ;;      Locals:         1       0       0       0       0       0       0
  6552 ;;      Temps:          1       0       0       0       0       0       0
  6553 ;;      Totals:         2       0       0       0       0       0       0
  6554 ;;Total ram usage:        2 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    3
  6557 ;; This function calls:
  6558 ;;		_lcd_lat
  6559 ;;		_manda
  6560 ;; This function is called by:
  6561 ;;		_lcd_putc
  6562 ;;		_lcd_gotoxy
  6563 ;;		_lcd_init
  6564 ;;		_lcd_setcursor_vb
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text22
  6569  003246                     __ptext22:
  6570                           	opt stack 0
  6571  003246                     _lcd_cmd:
  6572                           	opt stack 25
  6573                           
  6574                           ;incstack = 0
  6575                           ;lcd_cmd@x stored from wreg
  6576  003246  6E30               	movwf	lcd_cmd@x,c
  6577                           
  6578                           ;lcd4a.c: 42: lcd = 0;
  6579  003248  0E00               	movlw	0
  6580  00324A  6E50               	movwf	_lcd,c
  6581                           
  6582                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6583  00324C  9A8C               	bcf	3980,5,c	;volatile
  6584                           
  6585                           ;lcd4a.c: 44: lcd &= 0x0F;
  6586  00324E  0E0F               	movlw	15
  6587  003250  1650               	andwf	_lcd,f,c
  6588                           
  6589                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  6590  003252  5030               	movf	lcd_cmd@x,w,c
  6591  003254  0BF0               	andlw	240
  6592  003256  1250               	iorwf	_lcd,f,c
  6593                           
  6594                           ;lcd4a.c: 46: manda(lcd);
  6595  003258  5050               	movf	_lcd,w,c
  6596  00325A  EC31  F01A         	call	_manda
  6597                           
  6598                           ;lcd4a.c: 47: lcd_lat();
  6599  00325E  EC76  F01A         	call	_lcd_lat	;wreg free
  6600                           
  6601                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(16000000/4000.0)));
  6602  003262  0E15               	movlw	21
  6603  003264  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6604  003266  0EC6               	movlw	198
  6605  003268                     u6437:
  6606  003268  2EE8               	decfsz	wreg,f,c
  6607  00326A  D7FE               	bra	u6437
  6608  00326C  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6609  00326E  D7FC               	bra	u6437
  6610  003270  D000               	nop2	
  6611                           
  6612                           ;lcd4a.c: 50: lcd &= 0x0F;
  6613  003272  0E0F               	movlw	15
  6614  003274  1650               	andwf	_lcd,f,c
  6615                           
  6616                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  6617  003276  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6618  00327A  0E0F               	movlw	15
  6619  00327C  162F               	andwf	??_lcd_cmd,f,c
  6620  00327E  382F               	swapf	??_lcd_cmd,w,c
  6621  003280  0BF0               	andlw	240
  6622  003282  1250               	iorwf	_lcd,f,c
  6623                           
  6624                           ;lcd4a.c: 52: manda(lcd);
  6625  003284  5050               	movf	_lcd,w,c
  6626  003286  EC31  F01A         	call	_manda
  6627                           
  6628                           ;lcd4a.c: 53: lcd_lat();
  6629  00328A  EC76  F01A         	call	_lcd_lat	;wreg free
  6630  00328E  0012               	return		;funcret
  6631  003290                     __end_of_lcd_cmd:
  6632                           	opt stack 0
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           indf0	equ	0xFEF
  6641                           postinc0	equ	0xFEE
  6642                           fsr0h	equ	0xFEA
  6643                           fsr0l	equ	0xFE9
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _manda *****************
  6652 ;; Defined at:
  6653 ;;		line 178 in file "../MyLibs/lcd4a.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  dato            1    wreg     unsigned char 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  dato            1   45[COMRAM] unsigned char 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6667 ;;      Params:         0       0       0       0       0       0       0
  6668 ;;      Locals:         1       0       0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0
  6670 ;;      Totals:         1       0       0       0       0       0       0
  6671 ;;Total ram usage:        1 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    2
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_lcd_cmd
  6678 ;;		_lcd_cmd_hf
  6679 ;;		_lcd_dwr
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text23
  6684  003462                     __ptext23:
  6685                           	opt stack 0
  6686  003462                     _manda:
  6687                           	opt stack 25
  6688                           
  6689                           ;incstack = 0
  6690                           ;manda@dato stored from wreg
  6691  003462  6E2E               	movwf	manda@dato,c
  6692                           
  6693                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6694  003464  A82E               	btfss	manda@dato,4,c
  6695  003466  D002               	goto	l53
  6696  003468  888A               	bsf	3978,4,c	;volatile
  6697  00346A  D001               	goto	l54
  6698  00346C                     l53:
  6699                           
  6700                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6701  00346C  988A               	bcf	3978,4,c	;volatile
  6702  00346E                     l54:
  6703                           
  6704                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6705  00346E  AA2E               	btfss	manda@dato,5,c
  6706  003470  D002               	goto	l55
  6707  003472  8A8A               	bsf	3978,5,c	;volatile
  6708  003474  D001               	goto	l56
  6709  003476                     l55:
  6710                           
  6711                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6712  003476  9A8A               	bcf	3978,5,c	;volatile
  6713  003478                     l56:
  6714                           
  6715                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6716  003478  AC2E               	btfss	manda@dato,6,c
  6717  00347A  D002               	goto	l57
  6718  00347C  8C8A               	bsf	3978,6,c	;volatile
  6719  00347E  D001               	goto	l58
  6720  003480                     l57:
  6721                           
  6722                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6723  003480  9C8A               	bcf	3978,6,c	;volatile
  6724  003482                     l58:
  6725                           
  6726                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6727  003482  AE2E               	btfss	manda@dato,7,c
  6728  003484  D002               	goto	l59
  6729  003486  8E8A               	bsf	3978,7,c	;volatile
  6730  003488  0012               	return	
  6731  00348A                     l59:
  6732                           
  6733                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6734  00348A  9E8A               	bcf	3978,7,c	;volatile
  6735  00348C  0012               	return	
  6736  00348E                     __end_of_manda:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           intcon	equ	0xFF2
  6745                           indf0	equ	0xFEF
  6746                           postinc0	equ	0xFEE
  6747                           fsr0h	equ	0xFEA
  6748                           fsr0l	equ	0xFE9
  6749                           wreg	equ	0xFE8
  6750                           indf2	equ	0xFDF
  6751                           postinc2	equ	0xFDE
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _lcd_lat *****************
  6757 ;; Defined at:
  6758 ;;		line 29 in file "../MyLibs/lcd4a.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6772 ;;      Params:         0       0       0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0
  6774 ;;      Temps:          1       0       0       0       0       0       0
  6775 ;;      Totals:         1       0       0       0       0       0       0
  6776 ;;Total ram usage:        1 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    2
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_lcd_cmd
  6783 ;;		_lcd_cmd_hf
  6784 ;;		_lcd_dwr
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text24
  6789  0034EC                     __ptext24:
  6790                           	opt stack 0
  6791  0034EC                     _lcd_lat:
  6792                           	opt stack 25
  6793                           
  6794                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  6795                           
  6796                           ;incstack = 0
  6797  0034EC  8E8C               	bsf	3980,7,c	;volatile
  6798                           
  6799                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(16000000/4000.0)));
  6800  0034EE  0E10               	movlw	16
  6801  0034F0  6E2E               	movwf	??_lcd_lat& (0+255),c
  6802  0034F2  0E94               	movlw	148
  6803  0034F4                     u6447:
  6804  0034F4  2EE8               	decfsz	wreg,f,c
  6805  0034F6  D7FE               	bra	u6447
  6806  0034F8  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  6807  0034FA  D7FC               	bra	u6447
  6808  0034FC  D000               	nop2	
  6809                           
  6810                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  6811  0034FE  9E8C               	bcf	3980,7,c	;volatile
  6812  003500  0012               	return		;funcret
  6813  003502                     __end_of_lcd_lat:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           indf0	equ	0xFEF
  6823                           postinc0	equ	0xFEE
  6824                           fsr0h	equ	0xFEA
  6825                           fsr0l	equ	0xFE9
  6826                           wreg	equ	0xFE8
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           fsr2h	equ	0xFDA
  6830                           fsr2l	equ	0xFD9
  6831                           status	equ	0xFD8
  6832                           
  6833 ;; *************** function _calibra *****************
  6834 ;; Defined at:
  6835 ;;		line 403 in file "color_3.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;  valor           4   78[BANK0 ] float 
  6838 ;;  fd              4   82[BANK0 ] float 
  6839 ;;  fw              4   86[BANK0 ] float 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  temp            4   90[BANK0 ] float 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  4   78[BANK0 ] float 
  6844 ;; Registers used:
  6845 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6851 ;;      Params:         0      12       0       0       0       0       0
  6852 ;;      Locals:         0       4       0       0       0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0
  6854 ;;      Totals:         0      16       0       0       0       0       0
  6855 ;;Total ram usage:       16 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    3
  6858 ;; This function calls:
  6859 ;;		___fladd
  6860 ;;		___fldiv
  6861 ;;		___flge
  6862 ;;		___flmul
  6863 ;;		___flneg
  6864 ;; This function is called by:
  6865 ;;		_main
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text25
  6870  002D66                     __ptext25:
  6871                           	opt stack 0
  6872  002D66                     _calibra:
  6873                           	opt stack 27
  6874                           
  6875                           ;color_3.c: 405: float temp;
  6876                           ;color_3.c: 406: temp = (255*(valor-fd))/(fw-fd);
  6877                           
  6878                           ;incstack = 0
  6879  002D66  0E00               	movlw	0
  6880  002D68  6E40               	movwf	___flmul@a,c
  6881  002D6A  0E00               	movlw	0
  6882  002D6C  6E41               	movwf	___flmul@a+1,c
  6883  002D6E  0E7F               	movlw	127
  6884  002D70  6E42               	movwf	___flmul@a+2,c
  6885  002D72  0E43               	movlw	67
  6886  002D74  6E43               	movwf	___flmul@a+3,c
  6887  002D76  C0CE  F0BE         	movff	calibra@valor,___fladd@a
  6888  002D7A  C0CF  F0BF         	movff	calibra@valor+1,___fladd@a+1
  6889  002D7E  C0D0  F0C0         	movff	calibra@valor+2,___fladd@a+2
  6890  002D82  C0D1  F0C1         	movff	calibra@valor+3,___fladd@a+3
  6891  002D86  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  6892  002D8A  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  6893  002D8E  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  6894  002D92  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  6895  002D96  EC1A  F01A         	call	___flneg	;wreg free
  6896  002D9A  C02E  F0BA         	movff	?___flneg,___fladd@b
  6897  002D9E  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  6898  002DA2  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  6899  002DA6  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  6900  002DAA  ECEB  F00E         	call	___fladd	;wreg free
  6901  002DAE  C0BA  F03C         	movff	?___fladd,___flmul@b
  6902  002DB2  C0BB  F03D         	movff	?___fladd+1,___flmul@b+1
  6903  002DB6  C0BC  F03E         	movff	?___fladd+2,___flmul@b+2
  6904  002DBA  C0BD  F03F         	movff	?___fladd+3,___flmul@b+3
  6905  002DBE  EC42  F00D         	call	___flmul	;wreg free
  6906  002DC2  C03C  F08D         	movff	?___flmul,___fldiv@b
  6907  002DC6  C03D  F08E         	movff	?___flmul+1,___fldiv@b+1
  6908  002DCA  C03E  F08F         	movff	?___flmul+2,___fldiv@b+2
  6909  002DCE  C03F  F090         	movff	?___flmul+3,___fldiv@b+3
  6910  002DD2  C0D6  F0BE         	movff	calibra@fw,___fladd@a
  6911  002DD6  C0D7  F0BF         	movff	calibra@fw+1,___fladd@a+1
  6912  002DDA  C0D8  F0C0         	movff	calibra@fw+2,___fladd@a+2
  6913  002DDE  C0D9  F0C1         	movff	calibra@fw+3,___fladd@a+3
  6914  002DE2  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  6915  002DE6  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  6916  002DEA  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  6917  002DEE  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  6918  002DF2  EC1A  F01A         	call	___flneg	;wreg free
  6919  002DF6  C02E  F0BA         	movff	?___flneg,___fladd@b
  6920  002DFA  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  6921  002DFE  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  6922  002E02  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  6923  002E06  ECEB  F00E         	call	___fladd	;wreg free
  6924  002E0A  C0BA  F091         	movff	?___fladd,___fldiv@a
  6925  002E0E  C0BB  F092         	movff	?___fladd+1,___fldiv@a+1
  6926  002E12  C0BC  F093         	movff	?___fladd+2,___fldiv@a+2
  6927  002E16  C0BD  F094         	movff	?___fladd+3,___fldiv@a+3
  6928  002E1A  EC8A  F010         	call	___fldiv	;wreg free
  6929  002E1E  C08D  F0DA         	movff	?___fldiv,calibra@temp
  6930  002E22  C08E  F0DB         	movff	?___fldiv+1,calibra@temp+1
  6931  002E26  C08F  F0DC         	movff	?___fldiv+2,calibra@temp+2
  6932  002E2A  C090  F0DD         	movff	?___fldiv+3,calibra@temp+3
  6933                           
  6934                           ;color_3.c: 407: if(temp >255)
  6935  002E2E  0E00               	movlw	0
  6936  002E30  6E2E               	movwf	___flge@ff1,c
  6937  002E32  0E00               	movlw	0
  6938  002E34  6E2F               	movwf	___flge@ff1+1,c
  6939  002E36  0E7F               	movlw	127
  6940  002E38  6E30               	movwf	___flge@ff1+2,c
  6941  002E3A  0E43               	movlw	67
  6942  002E3C  6E31               	movwf	___flge@ff1+3,c
  6943  002E3E  C0DA  F032         	movff	calibra@temp,___flge@ff2
  6944  002E42  C0DB  F033         	movff	calibra@temp+1,___flge@ff2+1
  6945  002E46  C0DC  F034         	movff	calibra@temp+2,___flge@ff2+2
  6946  002E4A  C0DD  F035         	movff	calibra@temp+3,___flge@ff2+3
  6947  002E4E  EC96  F015         	call	___flge	;wreg free
  6948  002E52  B0D8               	btfsc	status,0,c
  6949  002E54  D00A               	goto	l192
  6950                           
  6951                           ;color_3.c: 408: return 255;
  6952  002E56  0E00               	movlw	0
  6953  002E58  0100               	movlb	0	; () banked
  6954  002E5A  6FCE               	movwf	?_calibra& (0+255),b
  6955  002E5C  0E00               	movlw	0
  6956  002E5E  6FCF               	movwf	(?_calibra+1)& (0+255),b
  6957  002E60  0E7F               	movlw	127
  6958  002E62  6FD0               	movwf	(?_calibra+2)& (0+255),b
  6959  002E64  0E43               	movlw	67
  6960  002E66  6FD1               	movwf	(?_calibra+3)& (0+255),b
  6961                           
  6962                           ; BSR set to: 0
  6963                           
  6964                           ; BSR set to: 0
  6965  002E68  0012               	return	
  6966  002E6A                     l192:
  6967                           
  6968                           ;color_3.c: 409: else
  6969                           ;color_3.c: 410: return temp;
  6970  002E6A  C0DA  F0CE         	movff	calibra@temp,?_calibra
  6971  002E6E  C0DB  F0CF         	movff	calibra@temp+1,?_calibra+1
  6972  002E72  C0DC  F0D0         	movff	calibra@temp+2,?_calibra+2
  6973  002E76  C0DD  F0D1         	movff	calibra@temp+3,?_calibra+3
  6974  002E7A  0012               	return	
  6975  002E7C                     __end_of_calibra:
  6976                           	opt stack 0
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           indf0	equ	0xFEF
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function ___flneg *****************
  6996 ;; Defined at:
  6997 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/flneg.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  f1              4   45[COMRAM] float 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  4   45[COMRAM] float 
  7004 ;; Registers used:
  7005 ;;		wreg, status,2, status,0
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7011 ;;      Params:         4       0       0       0       0       0       0
  7012 ;;      Locals:         0       0       0       0       0       0       0
  7013 ;;      Temps:          0       0       0       0       0       0       0
  7014 ;;      Totals:         4       0       0       0       0       0       0
  7015 ;;Total ram usage:        4 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    2
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_calibra
  7022 ;;		_sprintf
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text26
  7027  003434                     __ptext26:
  7028                           	opt stack 0
  7029  003434                     ___flneg:
  7030                           	opt stack 27
  7031                           
  7032                           ;incstack = 0
  7033  003434  502E               	movf	___flneg@f1,w,c
  7034  003436  102F               	iorwf	___flneg@f1+1,w,c
  7035  003438  1030               	iorwf	___flneg@f1+2,w,c
  7036  00343A  1031               	iorwf	___flneg@f1+3,w,c
  7037  00343C  B4D8               	btfsc	status,2,c
  7038  00343E  D008               	goto	l528
  7039  003440  0E00               	movlw	0
  7040  003442  1A2E               	xorwf	___flneg@f1,f,c
  7041  003444  0E00               	movlw	0
  7042  003446  1A2F               	xorwf	___flneg@f1+1,f,c
  7043  003448  0E00               	movlw	0
  7044  00344A  1A30               	xorwf	___flneg@f1+2,f,c
  7045  00344C  0E80               	movlw	128
  7046  00344E  1A31               	xorwf	___flneg@f1+3,f,c
  7047  003450                     l528:
  7048  003450  C02E  F02E         	movff	___flneg@f1,?___flneg
  7049  003454  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  7050  003458  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  7051  00345C  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  7052  003460  0012               	return	
  7053  003462                     __end_of___flneg:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           intcon	equ	0xFF2
  7062                           indf0	equ	0xFEF
  7063                           postinc0	equ	0xFEE
  7064                           fsr0h	equ	0xFEA
  7065                           fsr0l	equ	0xFE9
  7066                           wreg	equ	0xFE8
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8
  7072                           
  7073 ;; *************** function ___flge *****************
  7074 ;; Defined at:
  7075 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/flge.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  ff1             4   45[COMRAM] float 
  7078 ;;  ff2             4   49[COMRAM] float 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;		None               void
  7083 ;; Registers used:
  7084 ;;		wreg, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7090 ;;      Params:         8       0       0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0
  7092 ;;      Temps:          4       0       0       0       0       0       0
  7093 ;;      Totals:        12       0       0       0       0       0       0
  7094 ;;Total ram usage:       12 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    2
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_calibra
  7101 ;;		_sprintf
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text27
  7106  002B2C                     __ptext27:
  7107                           	opt stack 0
  7108  002B2C                     ___flge:
  7109                           	opt stack 27
  7110                           
  7111                           ;incstack = 0
  7112  002B2C  0E00               	movlw	0
  7113  002B2E  142E               	andwf	___flge@ff1,w,c
  7114  002B30  6E36               	movwf	??___flge& (0+255),c
  7115  002B32  0E00               	movlw	0
  7116  002B34  142F               	andwf	___flge@ff1+1,w,c
  7117  002B36  6E37               	movwf	(??___flge+1)& (0+255),c
  7118  002B38  0E80               	movlw	128
  7119  002B3A  1430               	andwf	___flge@ff1+2,w,c
  7120  002B3C  6E38               	movwf	(??___flge+2)& (0+255),c
  7121  002B3E  0E7F               	movlw	127
  7122  002B40  1431               	andwf	___flge@ff1+3,w,c
  7123  002B42  6E39               	movwf	(??___flge+3)& (0+255),c
  7124  002B44  5036               	movf	??___flge,w,c
  7125  002B46  1037               	iorwf	??___flge+1,w,c
  7126  002B48  1038               	iorwf	??___flge+2,w,c
  7127  002B4A  1039               	iorwf	??___flge+3,w,c
  7128  002B4C  A4D8               	btfss	status,2,c
  7129  002B4E  D008               	goto	l521
  7130  002B50  0E00               	movlw	0
  7131  002B52  6E2E               	movwf	___flge@ff1,c
  7132  002B54  0E00               	movlw	0
  7133  002B56  6E2F               	movwf	___flge@ff1+1,c
  7134  002B58  0E00               	movlw	0
  7135  002B5A  6E30               	movwf	___flge@ff1+2,c
  7136  002B5C  0E00               	movlw	0
  7137  002B5E  6E31               	movwf	___flge@ff1+3,c
  7138  002B60                     l521:
  7139  002B60  0E00               	movlw	0
  7140  002B62  1432               	andwf	___flge@ff2,w,c
  7141  002B64  6E36               	movwf	??___flge& (0+255),c
  7142  002B66  0E00               	movlw	0
  7143  002B68  1433               	andwf	___flge@ff2+1,w,c
  7144  002B6A  6E37               	movwf	(??___flge+1)& (0+255),c
  7145  002B6C  0E80               	movlw	128
  7146  002B6E  1434               	andwf	___flge@ff2+2,w,c
  7147  002B70  6E38               	movwf	(??___flge+2)& (0+255),c
  7148  002B72  0E7F               	movlw	127
  7149  002B74  1435               	andwf	___flge@ff2+3,w,c
  7150  002B76  6E39               	movwf	(??___flge+3)& (0+255),c
  7151  002B78  5036               	movf	??___flge,w,c
  7152  002B7A  1037               	iorwf	??___flge+1,w,c
  7153  002B7C  1038               	iorwf	??___flge+2,w,c
  7154  002B7E  1039               	iorwf	??___flge+3,w,c
  7155  002B80  A4D8               	btfss	status,2,c
  7156  002B82  D008               	goto	l522
  7157  002B84  0E00               	movlw	0
  7158  002B86  6E32               	movwf	___flge@ff2,c
  7159  002B88  0E00               	movlw	0
  7160  002B8A  6E33               	movwf	___flge@ff2+1,c
  7161  002B8C  0E00               	movlw	0
  7162  002B8E  6E34               	movwf	___flge@ff2+2,c
  7163  002B90  0E00               	movlw	0
  7164  002B92  6E35               	movwf	___flge@ff2+3,c
  7165  002B94                     l522:
  7166  002B94  AE31               	btfss	___flge@ff1+3,7,c
  7167  002B96  D01D               	goto	l523
  7168  002B98  C02E  F036         	movff	___flge@ff1,??___flge
  7169  002B9C  C02F  F037         	movff	___flge@ff1+1,??___flge+1
  7170  002BA0  C030  F038         	movff	___flge@ff1+2,??___flge+2
  7171  002BA4  C031  F039         	movff	___flge@ff1+3,??___flge+3
  7172  002BA8  1E36               	comf	??___flge,f,c
  7173  002BAA  1E37               	comf	??___flge+1,f,c
  7174  002BAC  1E38               	comf	??___flge+2,f,c
  7175  002BAE  1E39               	comf	??___flge+3,f,c
  7176  002BB0  2A36               	incf	??___flge,f,c
  7177  002BB2  0E00               	movlw	0
  7178  002BB4  2237               	addwfc	??___flge+1,f,c
  7179  002BB6  2238               	addwfc	??___flge+2,f,c
  7180  002BB8  2239               	addwfc	??___flge+3,f,c
  7181  002BBA  0E00               	movlw	0
  7182  002BBC  2436               	addwf	??___flge,w,c
  7183  002BBE  6E2E               	movwf	___flge@ff1,c
  7184  002BC0  0E00               	movlw	0
  7185  002BC2  2037               	addwfc	??___flge+1,w,c
  7186  002BC4  6E2F               	movwf	___flge@ff1+1,c
  7187  002BC6  0E00               	movlw	0
  7188  002BC8  2038               	addwfc	??___flge+2,w,c
  7189  002BCA  6E30               	movwf	___flge@ff1+2,c
  7190  002BCC  0E80               	movlw	128
  7191  002BCE  2039               	addwfc	??___flge+3,w,c
  7192  002BD0  6E31               	movwf	___flge@ff1+3,c
  7193  002BD2                     l523:
  7194  002BD2  AE35               	btfss	___flge@ff2+3,7,c
  7195  002BD4  D01D               	goto	l524
  7196  002BD6  C032  F036         	movff	___flge@ff2,??___flge
  7197  002BDA  C033  F037         	movff	___flge@ff2+1,??___flge+1
  7198  002BDE  C034  F038         	movff	___flge@ff2+2,??___flge+2
  7199  002BE2  C035  F039         	movff	___flge@ff2+3,??___flge+3
  7200  002BE6  1E36               	comf	??___flge,f,c
  7201  002BE8  1E37               	comf	??___flge+1,f,c
  7202  002BEA  1E38               	comf	??___flge+2,f,c
  7203  002BEC  1E39               	comf	??___flge+3,f,c
  7204  002BEE  2A36               	incf	??___flge,f,c
  7205  002BF0  0E00               	movlw	0
  7206  002BF2  2237               	addwfc	??___flge+1,f,c
  7207  002BF4  2238               	addwfc	??___flge+2,f,c
  7208  002BF6  2239               	addwfc	??___flge+3,f,c
  7209  002BF8  0E00               	movlw	0
  7210  002BFA  2436               	addwf	??___flge,w,c
  7211  002BFC  6E32               	movwf	___flge@ff2,c
  7212  002BFE  0E00               	movlw	0
  7213  002C00  2037               	addwfc	??___flge+1,w,c
  7214  002C02  6E33               	movwf	___flge@ff2+1,c
  7215  002C04  0E00               	movlw	0
  7216  002C06  2038               	addwfc	??___flge+2,w,c
  7217  002C08  6E34               	movwf	___flge@ff2+2,c
  7218  002C0A  0E80               	movlw	128
  7219  002C0C  2039               	addwfc	??___flge+3,w,c
  7220  002C0E  6E35               	movwf	___flge@ff2+3,c
  7221  002C10                     l524:
  7222  002C10  0E00               	movlw	0
  7223  002C12  1A2E               	xorwf	___flge@ff1,f,c
  7224  002C14  0E00               	movlw	0
  7225  002C16  1A2F               	xorwf	___flge@ff1+1,f,c
  7226  002C18  0E00               	movlw	0
  7227  002C1A  1A30               	xorwf	___flge@ff1+2,f,c
  7228  002C1C  0E80               	movlw	128
  7229  002C1E  1A31               	xorwf	___flge@ff1+3,f,c
  7230  002C20  0E00               	movlw	0
  7231  002C22  1A32               	xorwf	___flge@ff2,f,c
  7232  002C24  0E00               	movlw	0
  7233  002C26  1A33               	xorwf	___flge@ff2+1,f,c
  7234  002C28  0E00               	movlw	0
  7235  002C2A  1A34               	xorwf	___flge@ff2+2,f,c
  7236  002C2C  0E80               	movlw	128
  7237  002C2E  1A35               	xorwf	___flge@ff2+3,f,c
  7238  002C30  5032               	movf	___flge@ff2,w,c
  7239  002C32  5C2E               	subwf	___flge@ff1,w,c
  7240  002C34  5033               	movf	___flge@ff2+1,w,c
  7241  002C36  582F               	subwfb	___flge@ff1+1,w,c
  7242  002C38  5034               	movf	___flge@ff2+2,w,c
  7243  002C3A  5830               	subwfb	___flge@ff1+2,w,c
  7244  002C3C  5035               	movf	___flge@ff2+3,w,c
  7245  002C3E  5831               	subwfb	___flge@ff1+3,w,c
  7246  002C40  B0D8               	btfsc	status,0,c
  7247  002C42  D002               	goto	l4189
  7248  002C44  90D8               	bcf	status,0,c
  7249  002C46  0012               	return	
  7250  002C48                     l4189:
  7251  002C48  80D8               	bsf	status,0,c
  7252  002C4A  0012               	return	
  7253  002C4C                     __end_of___flge:
  7254                           	opt stack 0
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           indf0	equ	0xFEF
  7263                           postinc0	equ	0xFEE
  7264                           fsr0h	equ	0xFEA
  7265                           fsr0l	equ	0xFE9
  7266                           wreg	equ	0xFE8
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function ___fladd *****************
  7274 ;; Defined at:
  7275 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  b               4   58[BANK0 ] float 
  7278 ;;  a               4   62[BANK0 ] float 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  grs             1   77[BANK0 ] unsigned char 
  7281 ;;  bexp            1   76[BANK0 ] unsigned char 
  7282 ;;  aexp            1   75[BANK0 ] unsigned char 
  7283 ;;  signs           1   74[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  4   58[BANK0 ] unsigned char 
  7286 ;; Registers used:
  7287 ;;		wreg, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7293 ;;      Params:         0       8       0       0       0       0       0
  7294 ;;      Locals:         0       4       0       0       0       0       0
  7295 ;;      Temps:          0       8       0       0       0       0       0
  7296 ;;      Totals:         0      20       0       0       0       0       0
  7297 ;;Total ram usage:       20 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    2
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		_main
  7304 ;;		_calibra
  7305 ;;		_sprintf
  7306 ;;		___flsub
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text28
  7311  001DD6                     __ptext28:
  7312                           	opt stack 0
  7313  001DD6                     ___fladd:
  7314                           	opt stack 26
  7315                           
  7316                           ;incstack = 0
  7317  001DD6  0100               	movlb	0	; () banked
  7318  001DD8  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7319  001DDA  0B80               	andlw	128
  7320  001DDC  6FCA               	movwf	___fladd@signs& (0+255),b
  7321  001DDE  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7322  001DE0  25BD               	addwf	(___fladd@b+3)& (0+255),w,b
  7323  001DE2  6FCC               	movwf	___fladd@bexp& (0+255),b
  7324                           
  7325                           ; BSR set to: 0
  7326  001DE4  BFBC               	btfsc	(___fladd@b+2)& (0+255),7,b
  7327                           
  7328                           ; BSR set to: 0
  7329  001DE6  81CC               	bsf	___fladd@bexp& (0+255),0,b
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334  001DE8  51CC               	movf	___fladd@bexp& (0+255),w,b
  7335  001DEA  B4D8               	btfsc	status,2,c
  7336  001DEC  D00D               	goto	l776
  7337                           
  7338                           ; BSR set to: 0
  7339  001DEE  29CC               	incf	___fladd@bexp& (0+255),w,b
  7340  001DF0  A4D8               	btfss	status,2,c
  7341  001DF2  D008               	goto	l777
  7342                           
  7343                           ; BSR set to: 0
  7344  001DF4  0E00               	movlw	0
  7345  001DF6  6FBA               	movwf	___fladd@b& (0+255),b
  7346  001DF8  0E00               	movlw	0
  7347  001DFA  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7348  001DFC  0E00               	movlw	0
  7349  001DFE  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7350  001E00  0E00               	movlw	0
  7351  001E02  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7352  001E04                     l777:
  7353                           
  7354                           ; BSR set to: 0
  7355                           
  7356                           ; BSR set to: 0
  7357  001E04  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7358  001E06  D006               	goto	L5
  7359  001E08                     l776:
  7360                           
  7361                           ; BSR set to: 0
  7362                           
  7363                           ; BSR set to: 0
  7364  001E08  0E00               	movlw	0
  7365  001E0A  6FBA               	movwf	___fladd@b& (0+255),b
  7366  001E0C  0E00               	movlw	0
  7367  001E0E  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7368  001E10  0E00               	movlw	0
  7369  001E12  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7370  001E14                     L5:
  7371  001E14  0E00               	movlw	0
  7372  001E16  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375                           
  7376                           ; BSR set to: 0
  7377  001E18  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7378  001E1A  0B80               	andlw	128
  7379  001E1C  6FCB               	movwf	___fladd@aexp& (0+255),b
  7380                           
  7381                           ; BSR set to: 0
  7382  001E1E  51CA               	movf	___fladd@signs& (0+255),w,b
  7383  001E20  19CB               	xorwf	___fladd@aexp& (0+255),w,b
  7384  001E22  A4D8               	btfss	status,2,c
  7385                           
  7386                           ; BSR set to: 0
  7387  001E24  8DCA               	bsf	___fladd@signs& (0+255),6,b
  7388                           
  7389                           ; BSR set to: 0
  7390                           
  7391                           ; BSR set to: 0
  7392  001E26  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7393  001E28  25C1               	addwf	(___fladd@a+3)& (0+255),w,b
  7394  001E2A  6FCB               	movwf	___fladd@aexp& (0+255),b
  7395                           
  7396                           ; BSR set to: 0
  7397  001E2C  BFC0               	btfsc	(___fladd@a+2)& (0+255),7,b
  7398                           
  7399                           ; BSR set to: 0
  7400  001E2E  81CB               	bsf	___fladd@aexp& (0+255),0,b
  7401                           
  7402                           ; BSR set to: 0
  7403                           
  7404                           ; BSR set to: 0
  7405  001E30  51CB               	movf	___fladd@aexp& (0+255),w,b
  7406  001E32  B4D8               	btfsc	status,2,c
  7407  001E34  D00D               	goto	l781
  7408                           
  7409                           ; BSR set to: 0
  7410  001E36  29CB               	incf	___fladd@aexp& (0+255),w,b
  7411  001E38  A4D8               	btfss	status,2,c
  7412  001E3A  D008               	goto	l782
  7413                           
  7414                           ; BSR set to: 0
  7415  001E3C  0E00               	movlw	0
  7416  001E3E  6FBE               	movwf	___fladd@a& (0+255),b
  7417  001E40  0E00               	movlw	0
  7418  001E42  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7419  001E44  0E00               	movlw	0
  7420  001E46  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7421  001E48  0E00               	movlw	0
  7422  001E4A  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7423  001E4C                     l782:
  7424                           
  7425                           ; BSR set to: 0
  7426                           
  7427                           ; BSR set to: 0
  7428  001E4C  8FC0               	bsf	(___fladd@a+2)& (0+255),7,b
  7429  001E4E  D006               	goto	L6
  7430  001E50                     l781:
  7431                           
  7432                           ; BSR set to: 0
  7433                           
  7434                           ; BSR set to: 0
  7435  001E50  0E00               	movlw	0
  7436  001E52  6FBE               	movwf	___fladd@a& (0+255),b
  7437  001E54  0E00               	movlw	0
  7438  001E56  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7439  001E58  0E00               	movlw	0
  7440  001E5A  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7441  001E5C                     L6:
  7442  001E5C  0E00               	movlw	0
  7443  001E5E  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7444                           
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  001E60  51CC               	movf	___fladd@bexp& (0+255),w,b
  7449  001E62  5DCB               	subwf	___fladd@aexp& (0+255),w,b
  7450  001E64  B0D8               	btfsc	status,0,c
  7451  001E66  D022               	goto	l784
  7452                           
  7453                           ; BSR set to: 0
  7454  001E68  ADCA               	btfss	___fladd@signs& (0+255),6,b
  7455  001E6A  D002               	goto	l785
  7456                           
  7457                           ; BSR set to: 0
  7458  001E6C  0E80               	movlw	128
  7459  001E6E  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7460  001E70                     l785:
  7461                           
  7462                           ; BSR set to: 0
  7463                           
  7464                           ; BSR set to: 0
  7465  001E70  C0CC  F0CD         	movff	___fladd@bexp,___fladd@grs
  7466                           
  7467                           ; BSR set to: 0
  7468  001E74  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7469                           
  7470                           ; BSR set to: 0
  7471  001E78  C0CD  F0CB         	movff	___fladd@grs,___fladd@aexp
  7472                           
  7473                           ; BSR set to: 0
  7474  001E7C  C0BA  F0CD         	movff	___fladd@b,___fladd@grs
  7475                           
  7476                           ; BSR set to: 0
  7477  001E80  C0BE  F0BA         	movff	___fladd@a,___fladd@b
  7478                           
  7479                           ; BSR set to: 0
  7480  001E84  C0CD  F0BE         	movff	___fladd@grs,___fladd@a
  7481                           
  7482                           ; BSR set to: 0
  7483  001E88  C0BB  F0CD         	movff	___fladd@b+1,___fladd@grs
  7484                           
  7485                           ; BSR set to: 0
  7486  001E8C  C0BF  F0BB         	movff	___fladd@a+1,___fladd@b+1
  7487                           
  7488                           ; BSR set to: 0
  7489  001E90  C0CD  F0BF         	movff	___fladd@grs,___fladd@a+1
  7490                           
  7491                           ; BSR set to: 0
  7492  001E94  C0BC  F0CD         	movff	___fladd@b+2,___fladd@grs
  7493                           
  7494                           ; BSR set to: 0
  7495  001E98  C0C0  F0BC         	movff	___fladd@a+2,___fladd@b+2
  7496                           
  7497                           ; BSR set to: 0
  7498  001E9C  C0CD  F0C0         	movff	___fladd@grs,___fladd@a+2
  7499                           
  7500                           ; BSR set to: 0
  7501  001EA0  C0BD  F0CD         	movff	___fladd@b+3,___fladd@grs
  7502                           
  7503                           ; BSR set to: 0
  7504  001EA4  C0C1  F0BD         	movff	___fladd@a+3,___fladd@b+3
  7505                           
  7506                           ; BSR set to: 0
  7507  001EA8  C0CD  F0C1         	movff	___fladd@grs,___fladd@a+3
  7508  001EAC                     l784:
  7509                           
  7510                           ; BSR set to: 0
  7511                           
  7512                           ; BSR set to: 0
  7513  001EAC  0E00               	movlw	0
  7514  001EAE  6FCD               	movwf	___fladd@grs& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517  001EB0  51CC               	movf	___fladd@bexp& (0+255),w,b
  7518  001EB2  6FC2               	movwf	??___fladd& (0+255),b
  7519  001EB4  6BC3               	clrf	(??___fladd+1)& (0+255),b
  7520  001EB6  1FC2               	comf	??___fladd& (0+255),f,b
  7521  001EB8  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7522  001EBA  4BC2               	infsnz	??___fladd& (0+255),f,b
  7523  001EBC  2BC3               	incf	(??___fladd+1)& (0+255),f,b
  7524  001EBE  51CB               	movf	___fladd@aexp& (0+255),w,b
  7525  001EC0  6FC4               	movwf	(??___fladd+2)& (0+255),b
  7526  001EC2  6BC5               	clrf	(??___fladd+3)& (0+255),b
  7527  001EC4  51C2               	movf	??___fladd& (0+255),w,b
  7528  001EC6  27C4               	addwf	(??___fladd+2)& (0+255),f,b
  7529  001EC8  51C3               	movf	(??___fladd+1)& (0+255),w,b
  7530  001ECA  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7531  001ECC  BFC5               	btfsc	(??___fladd+3)& (0+255),7,b
  7532  001ECE  D02C               	goto	l788
  7533  001ED0  51C5               	movf	(??___fladd+3)& (0+255),w,b
  7534  001ED2  E104               	bnz	u4340
  7535  001ED4  0E1A               	movlw	26
  7536  001ED6  5DC4               	subwf	(??___fladd+2)& (0+255),w,b
  7537  001ED8  A0D8               	btfss	status,0,c
  7538  001EDA  D026               	goto	l788
  7539  001EDC                     u4340:
  7540                           
  7541                           ; BSR set to: 0
  7542  001EDC  51BA               	movf	___fladd@b& (0+255),w,b
  7543  001EDE  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7544  001EE0  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7545  001EE2  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7546  001EE4  B4D8               	btfsc	status,2,c
  7547  001EE6  D002               	goto	u4350
  7548  001EE8  0E01               	movlw	1
  7549  001EEA  D001               	goto	u4360
  7550  001EEC                     u4350:
  7551  001EEC  0E00               	movlw	0
  7552  001EEE                     u4360:
  7553  001EEE  6FCD               	movwf	___fladd@grs& (0+255),b
  7554                           
  7555                           ; BSR set to: 0
  7556  001EF0  0E00               	movlw	0
  7557  001EF2  6FBA               	movwf	___fladd@b& (0+255),b
  7558  001EF4  0E00               	movlw	0
  7559  001EF6  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7560  001EF8  0E00               	movlw	0
  7561  001EFA  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7562  001EFC  0E00               	movlw	0
  7563  001EFE  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7564                           
  7565                           ; BSR set to: 0
  7566  001F00  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7567  001F04  D015               	goto	u4390
  7568  001F06                     l789:
  7569                           
  7570                           ; BSR set to: 0
  7571  001F06  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7572  001F08  D005               	goto	l790
  7573                           
  7574                           ; BSR set to: 0
  7575  001F0A  90D8               	bcf	status,0,c
  7576  001F0C  31CD               	rrcf	___fladd@grs& (0+255),w,b
  7577  001F0E  0901               	iorlw	1
  7578  001F10  6FCD               	movwf	___fladd@grs& (0+255),b
  7579  001F12  D002               	goto	l791
  7580  001F14                     l790:
  7581                           
  7582                           ; BSR set to: 0
  7583                           
  7584                           ; BSR set to: 0
  7585  001F14  90D8               	bcf	status,0,c
  7586  001F16  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7587  001F18                     l791:
  7588                           
  7589                           ; BSR set to: 0
  7590                           
  7591                           ; BSR set to: 0
  7592  001F18  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7593                           
  7594                           ; BSR set to: 0
  7595  001F1A  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7596                           
  7597                           ; BSR set to: 0
  7598                           
  7599                           ; BSR set to: 0
  7600  001F1C  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7601  001F1E  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7602  001F20  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7603  001F22  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7604  001F24  33BA               	rrcf	___fladd@b& (0+255),f,b
  7605                           
  7606                           ; BSR set to: 0
  7607  001F26  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7608  001F28                     l788:
  7609                           
  7610                           ; BSR set to: 0
  7611  001F28  51CB               	movf	___fladd@aexp& (0+255),w,b
  7612  001F2A  5DCC               	subwf	___fladd@bexp& (0+255),w,b
  7613  001F2C  A0D8               	btfss	status,0,c
  7614  001F2E  D7EB               	goto	l789
  7615  001F30                     u4390:
  7616                           
  7617                           ; BSR set to: 0
  7618                           
  7619                           ; BSR set to: 0
  7620  001F30  BDCA               	btfsc	___fladd@signs& (0+255),6,b
  7621  001F32  D029               	goto	l794
  7622                           
  7623                           ; BSR set to: 0
  7624  001F34  51CC               	movf	___fladd@bexp& (0+255),w,b
  7625  001F36  A4D8               	btfss	status,2,c
  7626  001F38  D009               	goto	l795
  7627                           
  7628                           ; BSR set to: 0
  7629  001F3A  0E00               	movlw	0
  7630  001F3C  6FBA               	movwf	?___fladd& (0+255),b
  7631  001F3E  0E00               	movlw	0
  7632  001F40  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7633  001F42  0E00               	movlw	0
  7634  001F44  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7635  001F46  0E00               	movlw	0
  7636  001F48  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7637                           
  7638                           ; BSR set to: 0
  7639  001F4A  0012               	return	
  7640  001F4C                     l795:
  7641                           
  7642                           ; BSR set to: 0
  7643                           
  7644                           ; BSR set to: 0
  7645  001F4C  51BE               	movf	___fladd@a& (0+255),w,b
  7646  001F4E  27BA               	addwf	___fladd@b& (0+255),f,b
  7647  001F50  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7648  001F52  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7649  001F54  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7650  001F56  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7651  001F58  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7652  001F5A  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  001F5C  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7656  001F5E  D083               	goto	u4520
  7657                           
  7658                           ; BSR set to: 0
  7659  001F60  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7660  001F62  D006               	goto	l798
  7661                           
  7662                           ; BSR set to: 0
  7663  001F64  90D8               	bcf	status,0,c
  7664  001F66  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7665  001F68  51CD               	movf	___fladd@grs& (0+255),w,b
  7666  001F6A  0901               	iorlw	1
  7667  001F6C  6FCD               	movwf	___fladd@grs& (0+255),b
  7668  001F6E  D002               	goto	l799
  7669  001F70                     l798:
  7670                           
  7671                           ; BSR set to: 0
  7672                           
  7673                           ; BSR set to: 0
  7674  001F70  90D8               	bcf	status,0,c
  7675  001F72  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7676  001F74                     l799:
  7677                           
  7678                           ; BSR set to: 0
  7679                           
  7680                           ; BSR set to: 0
  7681  001F74  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7682                           
  7683                           ; BSR set to: 0
  7684  001F76  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7685                           
  7686                           ; BSR set to: 0
  7687                           
  7688                           ; BSR set to: 0
  7689  001F78  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7690  001F7A  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7691  001F7C  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7692  001F7E  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7693  001F80  33BA               	rrcf	___fladd@b& (0+255),f,b
  7694                           
  7695                           ; BSR set to: 0
  7696  001F82  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7697                           
  7698                           ; BSR set to: 0
  7699  001F84  D070               	goto	u4520
  7700  001F86                     l794:
  7701                           
  7702                           ; BSR set to: 0
  7703                           
  7704                           ; BSR set to: 0
  7705  001F86  51BE               	movf	___fladd@a& (0+255),w,b
  7706  001F88  5DBA               	subwf	___fladd@b& (0+255),w,b
  7707  001F8A  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7708  001F8C  59BB               	subwfb	(___fladd@b+1)& (0+255),w,b
  7709  001F8E  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7710  001F90  59BC               	subwfb	(___fladd@b+2)& (0+255),w,b
  7711  001F92  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7712  001F94  0A80               	xorlw	128
  7713  001F96  6FC2               	movwf	??___fladd& (0+255),b
  7714  001F98  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7715  001F9A  0A80               	xorlw	128
  7716  001F9C  59C2               	subwfb	??___fladd& (0+255),w,b
  7717  001F9E  B0D8               	btfsc	status,0,c
  7718  001FA0  D036               	goto	l802
  7719                           
  7720                           ; BSR set to: 0
  7721  001FA2  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7722  001FA6  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7723  001FAA  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7724  001FAE  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7725  001FB2  1FC2               	comf	??___fladd& (0+255),f,b
  7726  001FB4  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7727  001FB6  1FC4               	comf	(??___fladd+2)& (0+255),f,b
  7728  001FB8  1FC5               	comf	(??___fladd+3)& (0+255),f,b
  7729  001FBA  2BC2               	incf	??___fladd& (0+255),f,b
  7730  001FBC  0E00               	movlw	0
  7731  001FBE  23C3               	addwfc	(??___fladd+1)& (0+255),f,b
  7732  001FC0  23C4               	addwfc	(??___fladd+2)& (0+255),f,b
  7733  001FC2  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7734  001FC4  51BE               	movf	___fladd@a& (0+255),w,b
  7735  001FC6  25C2               	addwf	??___fladd& (0+255),w,b
  7736  001FC8  6FC6               	movwf	(??___fladd+4)& (0+255),b
  7737  001FCA  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7738  001FCC  21C3               	addwfc	(??___fladd+1)& (0+255),w,b
  7739  001FCE  6FC7               	movwf	(??___fladd+5)& (0+255),b
  7740  001FD0  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7741  001FD2  21C4               	addwfc	(??___fladd+2)& (0+255),w,b
  7742  001FD4  6FC8               	movwf	(??___fladd+6)& (0+255),b
  7743  001FD6  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7744  001FD8  21C5               	addwfc	(??___fladd+3)& (0+255),w,b
  7745  001FDA  6FC9               	movwf	(??___fladd+7)& (0+255),b
  7746  001FDC  0EFF               	movlw	255
  7747  001FDE  25C6               	addwf	(??___fladd+4)& (0+255),w,b
  7748  001FE0  6FBA               	movwf	___fladd@b& (0+255),b
  7749  001FE2  0EFF               	movlw	255
  7750  001FE4  21C7               	addwfc	(??___fladd+5)& (0+255),w,b
  7751  001FE6  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7752  001FE8  0EFF               	movlw	255
  7753  001FEA  21C8               	addwfc	(??___fladd+6)& (0+255),w,b
  7754  001FEC  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7755  001FEE  0EFF               	movlw	255
  7756  001FF0  21C9               	addwfc	(??___fladd+7)& (0+255),w,b
  7757  001FF2  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7758  001FF4  0E80               	movlw	128
  7759  001FF6  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7760                           
  7761                           ; BSR set to: 0
  7762  001FF8  6DCD               	negf	___fladd@grs& (0+255),b
  7763                           
  7764                           ; BSR set to: 0
  7765  001FFA  51CD               	movf	___fladd@grs& (0+255),w,b
  7766  001FFC  A4D8               	btfss	status,2,c
  7767  001FFE  D00F               	goto	l804
  7768                           
  7769                           ; BSR set to: 0
  7770  002000  0E01               	movlw	1
  7771  002002  27BA               	addwf	___fladd@b& (0+255),f,b
  7772  002004  0E00               	movlw	0
  7773  002006  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7774  002008  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7775  00200A  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7776                           
  7777                           ; BSR set to: 0
  7778  00200C  D008               	goto	l804
  7779  00200E                     l802:
  7780                           
  7781                           ; BSR set to: 0
  7782                           
  7783                           ; BSR set to: 0
  7784  00200E  51BE               	movf	___fladd@a& (0+255),w,b
  7785  002010  5FBA               	subwf	___fladd@b& (0+255),f,b
  7786  002012  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7787  002014  5BBB               	subwfb	(___fladd@b+1)& (0+255),f,b
  7788  002016  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7789  002018  5BBC               	subwfb	(___fladd@b+2)& (0+255),f,b
  7790  00201A  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7791  00201C  5BBD               	subwfb	(___fladd@b+3)& (0+255),f,b
  7792  00201E                     l804:
  7793                           
  7794                           ; BSR set to: 0
  7795  00201E  51BA               	movf	___fladd@b& (0+255),w,b
  7796  002020  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7797  002022  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7798  002024  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7799  002026  A4D8               	btfss	status,2,c
  7800  002028  D01C               	goto	l811
  7801                           
  7802                           ; BSR set to: 0
  7803  00202A  51CD               	movf	___fladd@grs& (0+255),w,b
  7804  00202C  A4D8               	btfss	status,2,c
  7805  00202E  D019               	goto	l811
  7806                           
  7807                           ; BSR set to: 0
  7808  002030  0E00               	movlw	0
  7809  002032  6FBA               	movwf	?___fladd& (0+255),b
  7810  002034  0E00               	movlw	0
  7811  002036  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7812  002038  0E00               	movlw	0
  7813  00203A  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7814  00203C  0E00               	movlw	0
  7815  00203E  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7816                           
  7817                           ; BSR set to: 0
  7818  002040  0012               	return	
  7819  002042                     
  7820                           ; BSR set to: 0
  7821                           
  7822                           ; BSR set to: 0
  7823  002042  90D8               	bcf	status,0,c
  7824  002044  37BA               	rlcf	___fladd@b& (0+255),f,b
  7825  002046  37BB               	rlcf	(___fladd@b+1)& (0+255),f,b
  7826  002048  37BC               	rlcf	(___fladd@b+2)& (0+255),f,b
  7827  00204A  37BD               	rlcf	(___fladd@b+3)& (0+255),f,b
  7828                           
  7829                           ; BSR set to: 0
  7830  00204C  BFCD               	btfsc	___fladd@grs& (0+255),7,b
  7831                           
  7832                           ; BSR set to: 0
  7833  00204E  81BA               	bsf	___fladd@b& (0+255),0,b
  7834                           
  7835                           ; BSR set to: 0
  7836                           
  7837                           ; BSR set to: 0
  7838  002050  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7839  002052  D002               	goto	l809
  7840                           
  7841                           ; BSR set to: 0
  7842  002054  80D8               	bsf	status,0,c
  7843  002056  D001               	goto	L7
  7844  002058                     l809:
  7845                           
  7846                           ; BSR set to: 0
  7847                           
  7848                           ; BSR set to: 0
  7849  002058  90D8               	bcf	status,0,c
  7850  00205A                     L7:
  7851  00205A  37CD               	rlcf	___fladd@grs& (0+255),f,b
  7852                           
  7853                           ; BSR set to: 0
  7854                           
  7855                           ; BSR set to: 0
  7856  00205C  51CC               	movf	___fladd@bexp& (0+255),w,b
  7857  00205E  A4D8               	btfss	status,2,c
  7858                           
  7859                           ; BSR set to: 0
  7860  002060  07CC               	decf	___fladd@bexp& (0+255),f,b
  7861  002062                     l811:
  7862                           
  7863                           ; BSR set to: 0
  7864                           
  7865                           ; BSR set to: 0
  7866                           
  7867                           ; BSR set to: 0
  7868  002062  AFBC               	btfss	(___fladd@b+2)& (0+255),7,b
  7869  002064  D7EE               	goto	l807
  7870  002066                     u4520:
  7871                           
  7872                           ; BSR set to: 0
  7873                           
  7874                           ; BSR set to: 0
  7875                           
  7876                           ; BSR set to: 0
  7877  002066  0E00               	movlw	0
  7878  002068  6FCB               	movwf	___fladd@aexp& (0+255),b
  7879                           
  7880                           ; BSR set to: 0
  7881  00206A  AFCD               	btfss	___fladd@grs& (0+255),7,b
  7882  00206C  D00A               	goto	l816
  7883                           
  7884                           ; BSR set to: 0
  7885  00206E  C0CD  F0C2         	movff	___fladd@grs,??___fladd
  7886  002072  0E7F               	movlw	127
  7887  002074  17C2               	andwf	??___fladd& (0+255),f,b
  7888  002076  A4D8               	btfss	status,2,c
  7889  002078  D002               	goto	u4550
  7890                           
  7891                           ; BSR set to: 0
  7892                           
  7893                           ; BSR set to: 0
  7894  00207A  A1BA               	btfss	___fladd@b& (0+255),0,b
  7895  00207C  D002               	goto	l816
  7896  00207E                     u4550:
  7897                           
  7898                           ; BSR set to: 0
  7899  00207E  0E01               	movlw	1
  7900  002080  6FCB               	movwf	___fladd@aexp& (0+255),b
  7901  002082                     l816:
  7902                           
  7903                           ; BSR set to: 0
  7904                           
  7905                           ; BSR set to: 0
  7906                           
  7907                           ; BSR set to: 0
  7908  002082  51CB               	movf	___fladd@aexp& (0+255),w,b
  7909  002084  B4D8               	btfsc	status,2,c
  7910  002086  D020               	goto	l819
  7911                           
  7912                           ; BSR set to: 0
  7913  002088  0E01               	movlw	1
  7914  00208A  27BA               	addwf	___fladd@b& (0+255),f,b
  7915  00208C  0E00               	movlw	0
  7916  00208E  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7917  002090  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7918  002092  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7919                           
  7920                           ; BSR set to: 0
  7921  002094  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7922  002096  D018               	goto	l819
  7923                           
  7924                           ; BSR set to: 0
  7925  002098  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7926  00209C  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7927  0020A0  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7928  0020A4  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7929  0020A8  35C5               	rlcf	(??___fladd+3)& (0+255),w,b
  7930  0020AA  33C5               	rrcf	(??___fladd+3)& (0+255),f,b
  7931  0020AC  33C4               	rrcf	(??___fladd+2)& (0+255),f,b
  7932  0020AE  33C3               	rrcf	(??___fladd+1)& (0+255),f,b
  7933  0020B0  33C2               	rrcf	??___fladd& (0+255),f,b
  7934  0020B2  C0C2  F0BA         	movff	??___fladd,___fladd@b
  7935  0020B6  C0C3  F0BB         	movff	??___fladd+1,___fladd@b+1
  7936  0020BA  C0C4  F0BC         	movff	??___fladd+2,___fladd@b+2
  7937  0020BE  C0C5  F0BD         	movff	??___fladd+3,___fladd@b+3
  7938  0020C2  29CC               	incf	___fladd@bexp& (0+255),w,b
  7939  0020C4  A4D8               	btfss	status,2,c
  7940                           
  7941                           ; BSR set to: 0
  7942  0020C6  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7943  0020C8                     l819:
  7944                           
  7945                           ; BSR set to: 0
  7946                           
  7947                           ; BSR set to: 0
  7948                           
  7949                           ; BSR set to: 0
  7950                           
  7951                           ; BSR set to: 0
  7952  0020C8  29CC               	incf	___fladd@bexp& (0+255),w,b
  7953  0020CA  B4D8               	btfsc	status,2,c
  7954  0020CC  D003               	goto	u4600
  7955                           
  7956                           ; BSR set to: 0
  7957  0020CE  51CC               	movf	___fladd@bexp& (0+255),w,b
  7958  0020D0  A4D8               	btfss	status,2,c
  7959  0020D2  D00D               	goto	l823
  7960  0020D4                     u4600:
  7961                           
  7962                           ; BSR set to: 0
  7963                           
  7964                           ; BSR set to: 0
  7965  0020D4  0E00               	movlw	0
  7966  0020D6  6FBA               	movwf	___fladd@b& (0+255),b
  7967  0020D8  0E00               	movlw	0
  7968  0020DA  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7969  0020DC  0E00               	movlw	0
  7970  0020DE  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7971  0020E0  0E00               	movlw	0
  7972  0020E2  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7973  0020E4  51CC               	movf	___fladd@bexp& (0+255),w,b
  7974  0020E6  A4D8               	btfss	status,2,c
  7975  0020E8  D002               	goto	l823
  7976                           
  7977                           ; BSR set to: 0
  7978  0020EA  0E00               	movlw	0
  7979  0020EC  6FCA               	movwf	___fladd@signs& (0+255),b
  7980  0020EE                     l823:
  7981                           
  7982                           ; BSR set to: 0
  7983                           
  7984                           ; BSR set to: 0
  7985                           
  7986                           ; BSR set to: 0
  7987  0020EE  A1CC               	btfss	___fladd@bexp& (0+255),0,b
  7988  0020F0  D002               	goto	l824
  7989                           
  7990                           ; BSR set to: 0
  7991  0020F2  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7992  0020F4  D001               	goto	l825
  7993  0020F6                     l824:
  7994                           
  7995                           ; BSR set to: 0
  7996                           
  7997                           ; BSR set to: 0
  7998  0020F6  9FBC               	bcf	(___fladd@b+2)& (0+255),7,b
  7999  0020F8                     l825:
  8000                           
  8001                           ; BSR set to: 0
  8002                           
  8003                           ; BSR set to: 0
  8004  0020F8  90D8               	bcf	status,0,c
  8005  0020FA  31CC               	rrcf	___fladd@bexp& (0+255),w,b
  8006  0020FC  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  8007                           
  8008                           ; BSR set to: 0
  8009  0020FE  BFCA               	btfsc	___fladd@signs& (0+255),7,b
  8010                           
  8011                           ; BSR set to: 0
  8012  002100  8FBD               	bsf	(___fladd@b+3)& (0+255),7,b
  8013                           
  8014                           ; BSR set to: 0
  8015                           
  8016                           ; BSR set to: 0
  8017  002102  C0BA  F0BA         	movff	___fladd@b,?___fladd
  8018  002106  C0BB  F0BB         	movff	___fladd@b+1,?___fladd+1
  8019  00210A  C0BC  F0BC         	movff	___fladd@b+2,?___fladd+2
  8020  00210E  C0BD  F0BD         	movff	___fladd@b+3,?___fladd+3
  8021  002112  0012               	return	
  8022  002114                     __end_of___fladd:
  8023                           	opt stack 0
  8024                           tblptru	equ	0xFF8
  8025                           tblptrh	equ	0xFF7
  8026                           tblptrl	equ	0xFF6
  8027                           tablat	equ	0xFF5
  8028                           prodh	equ	0xFF4
  8029                           prodl	equ	0xFF3
  8030                           intcon	equ	0xFF2
  8031                           indf0	equ	0xFEF
  8032                           postinc0	equ	0xFEE
  8033                           fsr0h	equ	0xFEA
  8034                           fsr0l	equ	0xFE9
  8035                           wreg	equ	0xFE8
  8036                           indf2	equ	0xFDF
  8037                           postinc2	equ	0xFDE
  8038                           fsr2h	equ	0xFDA
  8039                           fsr2l	equ	0xFD9
  8040                           status	equ	0xFD8
  8041                           
  8042 ;; *************** function _calcula *****************
  8043 ;; Defined at:
  8044 ;;		line 297 in file "color_3.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  temp            4   54[BANK0 ] float 
  8049 ;;  freq            4   50[BANK0 ] float 
  8050 ;;  elapsedTime     4   46[BANK0 ] unsigned long 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  4   38[BANK0 ] float 
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8060 ;;      Params:         0       4       0       0       0       0       0
  8061 ;;      Locals:         0      12       0       0       0       0       0
  8062 ;;      Temps:          0       4       0       0       0       0       0
  8063 ;;      Totals:         0      20       0       0       0       0       0
  8064 ;;Total ram usage:       20 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    3
  8067 ;; This function calls:
  8068 ;;		___fldiv
  8069 ;;		___flmul
  8070 ;;		___xxtofl
  8071 ;;		_prepareForInterrupts
  8072 ;; This function is called by:
  8073 ;;		_main
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text29
  8078  002C4C                     __ptext29:
  8079                           	opt stack 0
  8080  002C4C                     _calcula:
  8081                           	opt stack 27
  8082                           
  8083                           ;color_3.c: 299: float freq = 0.0;
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;incstack = 0
  8087  002C4C  0E00               	movlw	0
  8088  002C4E  0100               	movlb	0	; () banked
  8089  002C50  6FB2               	movwf	calcula@freq& (0+255),b
  8090  002C52  0E00               	movlw	0
  8091  002C54  6FB3               	movwf	(calcula@freq+1)& (0+255),b
  8092  002C56  0E00               	movlw	0
  8093  002C58  6FB4               	movwf	(calcula@freq+2)& (0+255),b
  8094  002C5A  0E00               	movlw	0
  8095  002C5C  6FB5               	movwf	(calcula@freq+3)& (0+255),b
  8096                           
  8097                           ;color_3.c: 300: float temp = 0.0;
  8098  002C5E  0E00               	movlw	0
  8099  002C60  6FB6               	movwf	calcula@temp& (0+255),b
  8100  002C62  0E00               	movlw	0
  8101  002C64  6FB7               	movwf	(calcula@temp+1)& (0+255),b
  8102  002C66  0E00               	movlw	0
  8103  002C68  6FB8               	movwf	(calcula@temp+2)& (0+255),b
  8104  002C6A  0E00               	movlw	0
  8105  002C6C  6FB9               	movwf	(calcula@temp+3)& (0+255),b
  8106                           
  8107                           ;color_3.c: 301: if (!triggered)
  8108  002C6E  504E               	movf	_triggered,w,c	;volatile
  8109  002C70  B4D8               	btfsc	status,2,c
  8110  002C72  0012               	return	
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;color_3.c: 304: }
  8114                           ;color_3.c: 306: unsigned long elapsedTime = finishTime - startTime;
  8115                           
  8116                           ; BSR set to: 0
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;color_3.c: 302: {
  8120                           ;color_3.c: 303: return;
  8121  002C74  C0E8  F0AA         	movff	_startTime,??_calcula	;volatile
  8122  002C78  C0E9  F0AB         	movff	_startTime+1,??_calcula+1	;volatile
  8123  002C7C  C0EA  F0AC         	movff	_startTime+2,??_calcula+2	;volatile
  8124  002C80  C0EB  F0AD         	movff	_startTime+3,??_calcula+3	;volatile
  8125  002C84  1FAA               	comf	??_calcula& (0+255),f,b
  8126  002C86  1FAB               	comf	(??_calcula+1)& (0+255),f,b
  8127  002C88  1FAC               	comf	(??_calcula+2)& (0+255),f,b
  8128  002C8A  1FAD               	comf	(??_calcula+3)& (0+255),f,b
  8129  002C8C  2BAA               	incf	??_calcula& (0+255),f,b
  8130  002C8E  0E00               	movlw	0
  8131  002C90  23AB               	addwfc	(??_calcula+1)& (0+255),f,b
  8132  002C92  23AC               	addwfc	(??_calcula+2)& (0+255),f,b
  8133  002C94  23AD               	addwfc	(??_calcula+3)& (0+255),f,b
  8134  002C96  51E4               	movf	_finishTime& (0+255),w,b	;volatile
  8135  002C98  25AA               	addwf	??_calcula& (0+255),w,b
  8136  002C9A  6FAE               	movwf	calcula@elapsedTime& (0+255),b
  8137  002C9C  51E5               	movf	(_finishTime+1)& (0+255),w,b	;volatile
  8138  002C9E  21AB               	addwfc	(??_calcula+1)& (0+255),w,b
  8139  002CA0  6FAF               	movwf	(calcula@elapsedTime+1)& (0+255),b
  8140  002CA2  51E6               	movf	(_finishTime+2)& (0+255),w,b	;volatile
  8141  002CA4  21AC               	addwfc	(??_calcula+2)& (0+255),w,b
  8142  002CA6  6FB0               	movwf	(calcula@elapsedTime+2)& (0+255),b
  8143  002CA8  51E7               	movf	(_finishTime+3)& (0+255),w,b	;volatile
  8144  002CAA  21AD               	addwfc	(??_calcula+3)& (0+255),w,b
  8145  002CAC  6FB1               	movwf	(calcula@elapsedTime+3)& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;color_3.c: 308: temp = (float) (elapsedTime);
  8149  002CAE  C0AE  F02E         	movff	calcula@elapsedTime,___xxtofl@val
  8150  002CB2  C0AF  F02F         	movff	calcula@elapsedTime+1,___xxtofl@val+1
  8151  002CB6  C0B0  F030         	movff	calcula@elapsedTime+2,___xxtofl@val+2
  8152  002CBA  C0B1  F031         	movff	calcula@elapsedTime+3,___xxtofl@val+3
  8153  002CBE  0E00               	movlw	0
  8154  002CC0  EC2E  F013         	call	___xxtofl
  8155  002CC4  C02E  F0B6         	movff	?___xxtofl,calcula@temp
  8156  002CC8  C02F  F0B7         	movff	?___xxtofl+1,calcula@temp+1
  8157  002CCC  C030  F0B8         	movff	?___xxtofl+2,calcula@temp+2
  8158  002CD0  C031  F0B9         	movff	?___xxtofl+3,calcula@temp+3
  8159                           
  8160                           ;color_3.c: 309: temp *= 250e-9;
  8161  002CD4  C0B6  F03C         	movff	calcula@temp,___flmul@b
  8162  002CD8  C0B7  F03D         	movff	calcula@temp+1,___flmul@b+1
  8163  002CDC  C0B8  F03E         	movff	calcula@temp+2,___flmul@b+2
  8164  002CE0  C0B9  F03F         	movff	calcula@temp+3,___flmul@b+3
  8165  002CE4  0EBD               	movlw	189
  8166  002CE6  6E40               	movwf	___flmul@a,c
  8167  002CE8  0E37               	movlw	55
  8168  002CEA  6E41               	movwf	___flmul@a+1,c
  8169  002CEC  0E86               	movlw	134
  8170  002CEE  6E42               	movwf	___flmul@a+2,c
  8171  002CF0  0E34               	movlw	52
  8172  002CF2  6E43               	movwf	___flmul@a+3,c
  8173  002CF4  EC42  F00D         	call	___flmul	;wreg free
  8174  002CF8  C03C  F0B6         	movff	?___flmul,calcula@temp
  8175  002CFC  C03D  F0B7         	movff	?___flmul+1,calcula@temp+1
  8176  002D00  C03E  F0B8         	movff	?___flmul+2,calcula@temp+2
  8177  002D04  C03F  F0B9         	movff	?___flmul+3,calcula@temp+3
  8178                           
  8179                           ;color_3.c: 310: freq = 1.0/(temp);
  8180  002D08  0E00               	movlw	0
  8181  002D0A  0100               	movlb	0	; () banked
  8182  002D0C  6F8D               	movwf	___fldiv@b& (0+255),b
  8183  002D0E  0E00               	movlw	0
  8184  002D10  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  8185  002D12  0E80               	movlw	128
  8186  002D14  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  8187  002D16  0E3F               	movlw	63
  8188  002D18  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  8189  002D1A  C0B6  F091         	movff	calcula@temp,___fldiv@a
  8190  002D1E  C0B7  F092         	movff	calcula@temp+1,___fldiv@a+1
  8191  002D22  C0B8  F093         	movff	calcula@temp+2,___fldiv@a+2
  8192  002D26  C0B9  F094         	movff	calcula@temp+3,___fldiv@a+3
  8193  002D2A  EC8A  F010         	call	___fldiv	;wreg free
  8194  002D2E  C08D  F0B2         	movff	?___fldiv,calcula@freq
  8195  002D32  C08E  F0B3         	movff	?___fldiv+1,calcula@freq+1
  8196  002D36  C08F  F0B4         	movff	?___fldiv+2,calcula@freq+2
  8197  002D3A  C090  F0B5         	movff	?___fldiv+3,calcula@freq+3
  8198                           
  8199                           ;color_3.c: 311: prepareForInterrupts ();
  8200  002D3E  EC81  F01A         	call	_prepareForInterrupts	;wreg free
  8201                           
  8202                           ;color_3.c: 312: _delay((unsigned long)((10)*(16000000/4000.0)));
  8203  002D42  0E34               	movlw	52
  8204  002D44  0100               	movlb	0	; () banked
  8205  002D46  6FAA               	movwf	??_calcula& (0+255),b
  8206  002D48  0EF1               	movlw	241
  8207  002D4A                     u6457:
  8208  002D4A  2EE8               	decfsz	wreg,f,c
  8209  002D4C  D7FE               	bra	u6457
  8210  002D4E  2FAA               	decfsz	??_calcula& (0+255),f,b
  8211  002D50  D7FC               	bra	u6457
  8212  002D52  D000               	nop2	
  8213                           
  8214                           ;color_3.c: 313: return freq;
  8215  002D54  C0B2  F0A6         	movff	calcula@freq,?_calcula
  8216  002D58  C0B3  F0A7         	movff	calcula@freq+1,?_calcula+1
  8217  002D5C  C0B4  F0A8         	movff	calcula@freq+2,?_calcula+2
  8218  002D60  C0B5  F0A9         	movff	calcula@freq+3,?_calcula+3
  8219  002D64  0012               	return	
  8220  002D66                     __end_of_calcula:
  8221                           	opt stack 0
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           indf0	equ	0xFEF
  8230                           postinc0	equ	0xFEE
  8231                           fsr0h	equ	0xFEA
  8232                           fsr0l	equ	0xFE9
  8233                           wreg	equ	0xFE8
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function _prepareForInterrupts *****************
  8241 ;; Defined at:
  8242 ;;		line 316 in file "color_3.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;		None
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  1    wreg      void 
  8249 ;; Registers used:
  8250 ;;		wreg, status,2
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8256 ;;      Params:         0       0       0       0       0       0       0
  8257 ;;      Locals:         0       0       0       0       0       0       0
  8258 ;;      Temps:          0       0       0       0       0       0       0
  8259 ;;      Totals:         0       0       0       0       0       0       0
  8260 ;;Total ram usage:        0 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    2
  8263 ;; This function calls:
  8264 ;;		Nothing
  8265 ;; This function is called by:
  8266 ;;		_main
  8267 ;;		_calcula
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text30
  8272  003502                     __ptext30:
  8273                           	opt stack 0
  8274  003502                     _prepareForInterrupts:
  8275                           	opt stack 28
  8276                           
  8277                           ;color_3.c: 320: first = true;
  8278                           
  8279                           ;color_3.c: 319: INT0IF == 0;
  8280                           
  8281                           ;incstack = 0
  8282  003502  0E01               	movlw	1
  8283  003504  6E4F               	movwf	_first,c	;volatile
  8284                           
  8285                           ;color_3.c: 321: triggered = false;
  8286  003506  0E00               	movlw	0
  8287  003508  6E4E               	movwf	_triggered,c	;volatile
  8288                           
  8289                           ;color_3.c: 326: INT0IE = 1;
  8290  00350A  88F2               	bsf	intcon,4,c	;volatile
  8291                           
  8292                           ;color_3.c: 327: INTEDG0 = 1;
  8293  00350C  8CF1               	bsf	intcon2,6,c	;volatile
  8294  00350E  0012               	return		;funcret
  8295  003510                     __end_of_prepareForInterrupts:
  8296                           	opt stack 0
  8297                           tblptru	equ	0xFF8
  8298                           tblptrh	equ	0xFF7
  8299                           tblptrl	equ	0xFF6
  8300                           tablat	equ	0xFF5
  8301                           prodh	equ	0xFF4
  8302                           prodl	equ	0xFF3
  8303                           intcon	equ	0xFF2
  8304                           intcon2	equ	0xFF1
  8305                           indf0	equ	0xFEF
  8306                           postinc0	equ	0xFEE
  8307                           fsr0h	equ	0xFEA
  8308                           fsr0l	equ	0xFE9
  8309                           wreg	equ	0xFE8
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function ___xxtofl *****************
  8317 ;; Defined at:
  8318 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/xxtofl.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  sign            1    wreg     unsigned char 
  8321 ;;  val             4   45[COMRAM] long 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  sign            1   53[COMRAM] unsigned char 
  8324 ;;  arg             4   55[COMRAM] unsigned long 
  8325 ;;  exp             1   54[COMRAM] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  4   45[COMRAM] unsigned char 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8335 ;;      Params:         4       0       0       0       0       0       0
  8336 ;;      Locals:         6       0       0       0       0       0       0
  8337 ;;      Temps:          4       0       0       0       0       0       0
  8338 ;;      Totals:        14       0       0       0       0       0       0
  8339 ;;Total ram usage:       14 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    2
  8342 ;; This function calls:
  8343 ;;		Nothing
  8344 ;; This function is called by:
  8345 ;;		_calcula
  8346 ;;		_sprintf
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text31
  8351  00265C                     __ptext31:
  8352                           	opt stack 0
  8353  00265C                     ___xxtofl:
  8354                           	opt stack 27
  8355                           
  8356                           ;incstack = 0
  8357                           ;___xxtofl@sign stored from wreg
  8358  00265C  6E36               	movwf	___xxtofl@sign,c
  8359  00265E  5036               	movf	___xxtofl@sign,w,c
  8360  002660  A4D8               	btfss	status,2,c
  8361  002662  AE31               	btfss	___xxtofl@val+3,7,c
  8362  002664  D01A               	goto	l895
  8363  002666  C02E  F032         	movff	___xxtofl@val,??___xxtofl
  8364  00266A  C02F  F033         	movff	___xxtofl@val+1,??___xxtofl+1
  8365  00266E  C030  F034         	movff	___xxtofl@val+2,??___xxtofl+2
  8366  002672  C031  F035         	movff	___xxtofl@val+3,??___xxtofl+3
  8367  002676  1E32               	comf	??___xxtofl,f,c
  8368  002678  1E33               	comf	??___xxtofl+1,f,c
  8369  00267A  1E34               	comf	??___xxtofl+2,f,c
  8370  00267C  1E35               	comf	??___xxtofl+3,f,c
  8371  00267E  2A32               	incf	??___xxtofl,f,c
  8372  002680  0E00               	movlw	0
  8373  002682  2233               	addwfc	??___xxtofl+1,f,c
  8374  002684  2234               	addwfc	??___xxtofl+2,f,c
  8375  002686  2235               	addwfc	??___xxtofl+3,f,c
  8376  002688  C032  F038         	movff	??___xxtofl,___xxtofl@arg
  8377  00268C  C033  F039         	movff	??___xxtofl+1,___xxtofl@arg+1
  8378  002690  C034  F03A         	movff	??___xxtofl+2,___xxtofl@arg+2
  8379  002694  C035  F03B         	movff	??___xxtofl+3,___xxtofl@arg+3
  8380  002698  D008               	goto	l896
  8381  00269A                     l895:
  8382  00269A  C02E  F038         	movff	___xxtofl@val,___xxtofl@arg
  8383  00269E  C02F  F039         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8384  0026A2  C030  F03A         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8385  0026A6  C031  F03B         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8386  0026AA                     l896:
  8387  0026AA  502E               	movf	___xxtofl@val,w,c
  8388  0026AC  102F               	iorwf	___xxtofl@val+1,w,c
  8389  0026AE  1030               	iorwf	___xxtofl@val+2,w,c
  8390  0026B0  1031               	iorwf	___xxtofl@val+3,w,c
  8391  0026B2  A4D8               	btfss	status,2,c
  8392  0026B4  D009               	goto	l897
  8393  0026B6  0E00               	movlw	0
  8394  0026B8  6E2E               	movwf	?___xxtofl,c
  8395  0026BA  0E00               	movlw	0
  8396  0026BC  6E2F               	movwf	?___xxtofl+1,c
  8397  0026BE  0E00               	movlw	0
  8398  0026C0  6E30               	movwf	?___xxtofl+2,c
  8399  0026C2  0E00               	movlw	0
  8400  0026C4  6E31               	movwf	?___xxtofl+3,c
  8401  0026C6  0012               	return	
  8402  0026C8                     l897:
  8403  0026C8  0E96               	movlw	150
  8404  0026CA  6E37               	movwf	___xxtofl@exp,c
  8405  0026CC  D006               	goto	l899
  8406  0026CE  2A37               	incf	___xxtofl@exp,f,c
  8407  0026D0  90D8               	bcf	status,0,c
  8408  0026D2  323B               	rrcf	___xxtofl@arg+3,f,c
  8409  0026D4  323A               	rrcf	___xxtofl@arg+2,f,c
  8410  0026D6  3239               	rrcf	___xxtofl@arg+1,f,c
  8411  0026D8  3238               	rrcf	___xxtofl@arg,f,c
  8412  0026DA                     l899:
  8413  0026DA  0E00               	movlw	0
  8414  0026DC  1438               	andwf	___xxtofl@arg,w,c
  8415  0026DE  6E32               	movwf	??___xxtofl& (0+255),c
  8416  0026E0  0E00               	movlw	0
  8417  0026E2  1439               	andwf	___xxtofl@arg+1,w,c
  8418  0026E4  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8419  0026E6  0E00               	movlw	0
  8420  0026E8  143A               	andwf	___xxtofl@arg+2,w,c
  8421  0026EA  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8422  0026EC  0EFE               	movlw	254
  8423  0026EE  143B               	andwf	___xxtofl@arg+3,w,c
  8424  0026F0  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8425  0026F2  5032               	movf	??___xxtofl,w,c
  8426  0026F4  1033               	iorwf	??___xxtofl+1,w,c
  8427  0026F6  1034               	iorwf	??___xxtofl+2,w,c
  8428  0026F8  1035               	iorwf	??___xxtofl+3,w,c
  8429  0026FA  B4D8               	btfsc	status,2,c
  8430  0026FC  D00D               	goto	l902
  8431  0026FE  D7E7               	goto	l900
  8432  002700  2A37               	incf	___xxtofl@exp,f,c
  8433  002702  0E01               	movlw	1
  8434  002704  2638               	addwf	___xxtofl@arg,f,c
  8435  002706  0E00               	movlw	0
  8436  002708  2239               	addwfc	___xxtofl@arg+1,f,c
  8437  00270A  223A               	addwfc	___xxtofl@arg+2,f,c
  8438  00270C  223B               	addwfc	___xxtofl@arg+3,f,c
  8439  00270E  90D8               	bcf	status,0,c
  8440  002710  323B               	rrcf	___xxtofl@arg+3,f,c
  8441  002712  323A               	rrcf	___xxtofl@arg+2,f,c
  8442  002714  3239               	rrcf	___xxtofl@arg+1,f,c
  8443  002716  3238               	rrcf	___xxtofl@arg,f,c
  8444  002718                     l902:
  8445  002718  0E00               	movlw	0
  8446  00271A  1438               	andwf	___xxtofl@arg,w,c
  8447  00271C  6E32               	movwf	??___xxtofl& (0+255),c
  8448  00271E  0E00               	movlw	0
  8449  002720  1439               	andwf	___xxtofl@arg+1,w,c
  8450  002722  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8451  002724  0E00               	movlw	0
  8452  002726  143A               	andwf	___xxtofl@arg+2,w,c
  8453  002728  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8454  00272A  0EFF               	movlw	255
  8455  00272C  143B               	andwf	___xxtofl@arg+3,w,c
  8456  00272E  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8457  002730  5032               	movf	??___xxtofl,w,c
  8458  002732  1033               	iorwf	??___xxtofl+1,w,c
  8459  002734  1034               	iorwf	??___xxtofl+2,w,c
  8460  002736  1035               	iorwf	??___xxtofl+3,w,c
  8461  002738  B4D8               	btfsc	status,2,c
  8462  00273A  D007               	goto	l905
  8463  00273C  D7E1               	goto	l903
  8464  00273E  0637               	decf	___xxtofl@exp,f,c
  8465  002740  90D8               	bcf	status,0,c
  8466  002742  3638               	rlcf	___xxtofl@arg,f,c
  8467  002744  3639               	rlcf	___xxtofl@arg+1,f,c
  8468  002746  363A               	rlcf	___xxtofl@arg+2,f,c
  8469  002748  363B               	rlcf	___xxtofl@arg+3,f,c
  8470  00274A                     l905:
  8471  00274A  BE3A               	btfsc	___xxtofl@arg+2,7,c
  8472  00274C  D003               	goto	u5680
  8473  00274E  0E02               	movlw	2
  8474  002750  6037               	cpfslt	___xxtofl@exp,c
  8475  002752  D7F5               	goto	l906
  8476  002754                     u5680:
  8477  002754  B037               	btfsc	___xxtofl@exp,0,c
  8478  002756  D008               	goto	l910
  8479  002758  0EFF               	movlw	255
  8480  00275A  1638               	andwf	___xxtofl@arg,f,c
  8481  00275C  0EFF               	movlw	255
  8482  00275E  1639               	andwf	___xxtofl@arg+1,f,c
  8483  002760  0E7F               	movlw	127
  8484  002762  163A               	andwf	___xxtofl@arg+2,f,c
  8485  002764  0EFF               	movlw	255
  8486  002766  163B               	andwf	___xxtofl@arg+3,f,c
  8487  002768                     l910:
  8488  002768  90D8               	bcf	status,0,c
  8489  00276A  3237               	rrcf	___xxtofl@exp,f,c
  8490  00276C  C037  F032         	movff	___xxtofl@exp,??___xxtofl
  8491  002770  6A33               	clrf	(??___xxtofl+1)& (0+255),c
  8492  002772  6A34               	clrf	(??___xxtofl+2)& (0+255),c
  8493  002774  6A35               	clrf	(??___xxtofl+3)& (0+255),c
  8494  002776  C032  F035         	movff	??___xxtofl,??___xxtofl+3
  8495  00277A  6A34               	clrf	??___xxtofl+2,c
  8496  00277C  6A33               	clrf	??___xxtofl+1,c
  8497  00277E  6A32               	clrf	??___xxtofl,c
  8498  002780  5032               	movf	??___xxtofl,w,c
  8499  002782  1238               	iorwf	___xxtofl@arg,f,c
  8500  002784  5033               	movf	??___xxtofl+1,w,c
  8501  002786  1239               	iorwf	___xxtofl@arg+1,f,c
  8502  002788  5034               	movf	??___xxtofl+2,w,c
  8503  00278A  123A               	iorwf	___xxtofl@arg+2,f,c
  8504  00278C  5035               	movf	??___xxtofl+3,w,c
  8505  00278E  123B               	iorwf	___xxtofl@arg+3,f,c
  8506  002790  5036               	movf	___xxtofl@sign,w,c
  8507  002792  A4D8               	btfss	status,2,c
  8508  002794  AE31               	btfss	___xxtofl@val+3,7,c
  8509  002796  D001               	goto	l911
  8510  002798  8E3B               	bsf	___xxtofl@arg+3,7,c
  8511  00279A                     l911:
  8512  00279A  C038  F02E         	movff	___xxtofl@arg,?___xxtofl
  8513  00279E  C039  F02F         	movff	___xxtofl@arg+1,?___xxtofl+1
  8514  0027A2  C03A  F030         	movff	___xxtofl@arg+2,?___xxtofl+2
  8515  0027A6  C03B  F031         	movff	___xxtofl@arg+3,?___xxtofl+3
  8516  0027AA  0012               	return	
  8517  0027AC                     __end_of___xxtofl:
  8518                           	opt stack 0
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           indf0	equ	0xFEF
  8528                           postinc0	equ	0xFEE
  8529                           fsr0h	equ	0xFEA
  8530                           fsr0l	equ	0xFE9
  8531                           wreg	equ	0xFE8
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function ___flmul *****************
  8539 ;; Defined at:
  8540 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/sprcmul.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  b               4   59[COMRAM] unsigned char 
  8543 ;;  a               4   63[COMRAM] unsigned char 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  prod            4    7[BANK0 ] struct .
  8546 ;;  grs             4    2[BANK0 ] unsigned long 
  8547 ;;  temp            2   11[BANK0 ] struct .
  8548 ;;  bexp            1    6[BANK0 ] unsigned char 
  8549 ;;  aexp            1    1[BANK0 ] unsigned char 
  8550 ;;  sign            1    0[BANK0 ] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  4   59[COMRAM] unsigned char 
  8553 ;; Registers used:
  8554 ;;		wreg, status,2, status,0, prodl, prodh
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8560 ;;      Params:         8       0       0       0       0       0       0
  8561 ;;      Locals:         0      13       0       0       0       0       0
  8562 ;;      Temps:          4       0       0       0       0       0       0
  8563 ;;      Totals:        12      13       0       0       0       0       0
  8564 ;;Total ram usage:       25 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    2
  8567 ;; This function calls:
  8568 ;;		Nothing
  8569 ;; This function is called by:
  8570 ;;		_calcula
  8571 ;;		_calibra
  8572 ;;		_fround
  8573 ;;		_scale
  8574 ;;		_sprintf
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text32
  8579  001A84                     __ptext32:
  8580                           	opt stack 0
  8581  001A84                     ___flmul:
  8582                           	opt stack 26
  8583                           
  8584                           ;incstack = 0
  8585  001A84  503F               	movf	___flmul@b+3,w,c
  8586  001A86  0B80               	andlw	128
  8587  001A88  0100               	movlb	0	; () banked
  8588  001A8A  6F80               	movwf	___flmul@sign& (0+255),b
  8589  001A8C  503F               	movf	___flmul@b+3,w,c
  8590  001A8E  243F               	addwf	___flmul@b+3,w,c
  8591  001A90  6F86               	movwf	___flmul@bexp& (0+255),b
  8592                           
  8593                           ; BSR set to: 0
  8594  001A92  BE3E               	btfsc	___flmul@b+2,7,c
  8595                           
  8596                           ; BSR set to: 0
  8597  001A94  8186               	bsf	___flmul@bexp& (0+255),0,b
  8598                           
  8599                           ; BSR set to: 0
  8600                           
  8601                           ; BSR set to: 0
  8602  001A96  5186               	movf	___flmul@bexp& (0+255),w,b
  8603  001A98  B4D8               	btfsc	status,2,c
  8604  001A9A  D00D               	goto	l867
  8605                           
  8606                           ; BSR set to: 0
  8607  001A9C  2986               	incf	___flmul@bexp& (0+255),w,b
  8608  001A9E  A4D8               	btfss	status,2,c
  8609  001AA0  D008               	goto	l868
  8610                           
  8611                           ; BSR set to: 0
  8612  001AA2  0E00               	movlw	0
  8613  001AA4  6E3C               	movwf	___flmul@b,c
  8614  001AA6  0E00               	movlw	0
  8615  001AA8  6E3D               	movwf	___flmul@b+1,c
  8616  001AAA  0E00               	movlw	0
  8617  001AAC  6E3E               	movwf	___flmul@b+2,c
  8618  001AAE  0E00               	movlw	0
  8619  001AB0  6E3F               	movwf	___flmul@b+3,c
  8620  001AB2                     l868:
  8621                           
  8622                           ; BSR set to: 0
  8623                           
  8624                           ; BSR set to: 0
  8625  001AB2  8E3E               	bsf	___flmul@b+2,7,c
  8626  001AB4  D008               	goto	l869
  8627  001AB6                     l867:
  8628                           
  8629                           ; BSR set to: 0
  8630                           
  8631                           ; BSR set to: 0
  8632  001AB6  0E00               	movlw	0
  8633  001AB8  6E3C               	movwf	___flmul@b,c
  8634  001ABA  0E00               	movlw	0
  8635  001ABC  6E3D               	movwf	___flmul@b+1,c
  8636  001ABE  0E00               	movlw	0
  8637  001AC0  6E3E               	movwf	___flmul@b+2,c
  8638  001AC2  0E00               	movlw	0
  8639  001AC4  6E3F               	movwf	___flmul@b+3,c
  8640  001AC6                     l869:
  8641                           
  8642                           ; BSR set to: 0
  8643                           
  8644                           ; BSR set to: 0
  8645  001AC6  5043               	movf	___flmul@a+3,w,c
  8646  001AC8  0B80               	andlw	128
  8647  001ACA  1B80               	xorwf	___flmul@sign& (0+255),f,b
  8648                           
  8649                           ; BSR set to: 0
  8650  001ACC  5043               	movf	___flmul@a+3,w,c
  8651  001ACE  2443               	addwf	___flmul@a+3,w,c
  8652  001AD0  6F81               	movwf	___flmul@aexp& (0+255),b
  8653                           
  8654                           ; BSR set to: 0
  8655  001AD2  BE42               	btfsc	___flmul@a+2,7,c
  8656                           
  8657                           ; BSR set to: 0
  8658  001AD4  8181               	bsf	___flmul@aexp& (0+255),0,b
  8659                           
  8660                           ; BSR set to: 0
  8661                           
  8662                           ; BSR set to: 0
  8663  001AD6  5181               	movf	___flmul@aexp& (0+255),w,b
  8664  001AD8  B4D8               	btfsc	status,2,c
  8665  001ADA  D00D               	goto	l871
  8666                           
  8667                           ; BSR set to: 0
  8668  001ADC  2981               	incf	___flmul@aexp& (0+255),w,b
  8669  001ADE  A4D8               	btfss	status,2,c
  8670  001AE0  D008               	goto	l872
  8671                           
  8672                           ; BSR set to: 0
  8673  001AE2  0E00               	movlw	0
  8674  001AE4  6E40               	movwf	___flmul@a,c
  8675  001AE6  0E00               	movlw	0
  8676  001AE8  6E41               	movwf	___flmul@a+1,c
  8677  001AEA  0E00               	movlw	0
  8678  001AEC  6E42               	movwf	___flmul@a+2,c
  8679  001AEE  0E00               	movlw	0
  8680  001AF0  6E43               	movwf	___flmul@a+3,c
  8681  001AF2                     l872:
  8682                           
  8683                           ; BSR set to: 0
  8684                           
  8685                           ; BSR set to: 0
  8686  001AF2  8E42               	bsf	___flmul@a+2,7,c
  8687  001AF4  D008               	goto	l873
  8688  001AF6                     l871:
  8689                           
  8690                           ; BSR set to: 0
  8691                           
  8692                           ; BSR set to: 0
  8693  001AF6  0E00               	movlw	0
  8694  001AF8  6E40               	movwf	___flmul@a,c
  8695  001AFA  0E00               	movlw	0
  8696  001AFC  6E41               	movwf	___flmul@a+1,c
  8697  001AFE  0E00               	movlw	0
  8698  001B00  6E42               	movwf	___flmul@a+2,c
  8699  001B02  0E00               	movlw	0
  8700  001B04  6E43               	movwf	___flmul@a+3,c
  8701  001B06                     l873:
  8702                           
  8703                           ; BSR set to: 0
  8704  001B06  5181               	movf	___flmul@aexp& (0+255),w,b
  8705  001B08  B4D8               	btfsc	status,2,c
  8706  001B0A  D003               	goto	u4710
  8707                           
  8708                           ; BSR set to: 0
  8709  001B0C  5186               	movf	___flmul@bexp& (0+255),w,b
  8710  001B0E  A4D8               	btfss	status,2,c
  8711  001B10  D009               	goto	l874
  8712  001B12                     u4710:
  8713                           
  8714                           ; BSR set to: 0
  8715                           
  8716                           ; BSR set to: 0
  8717  001B12  0E00               	movlw	0
  8718  001B14  6E3C               	movwf	?___flmul,c
  8719  001B16  0E00               	movlw	0
  8720  001B18  6E3D               	movwf	?___flmul+1,c
  8721  001B1A  0E00               	movlw	0
  8722  001B1C  6E3E               	movwf	?___flmul+2,c
  8723  001B1E  0E00               	movlw	0
  8724  001B20  6E3F               	movwf	?___flmul+3,c
  8725                           
  8726                           ; BSR set to: 0
  8727  001B22  0012               	return	
  8728  001B24                     l874:
  8729                           
  8730                           ; BSR set to: 0
  8731                           
  8732                           ; BSR set to: 0
  8733  001B24  5042               	movf	___flmul@a+2,w,c
  8734  001B26  023C               	mulwf	___flmul@b,c
  8735  001B28  CFF3 F08B          	movff	prodl,___flmul@temp
  8736  001B2C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8737                           
  8738                           ; BSR set to: 0
  8739  001B30  518B               	movf	___flmul@temp& (0+255),w,b
  8740  001B32  6F82               	movwf	___flmul@grs& (0+255),b
  8741  001B34  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  8742  001B36  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  8743  001B38  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  8744                           
  8745                           ; BSR set to: 0
  8746  001B3A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8747  001B3C  6F87               	movwf	___flmul@prod& (0+255),b
  8748  001B3E  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  8749  001B40  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  8750  001B42  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  8751  001B44  5041               	movf	___flmul@a+1,w,c
  8752  001B46  023D               	mulwf	___flmul@b+1,c
  8753  001B48  CFF3 F08B          	movff	prodl,___flmul@temp
  8754  001B4C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8755                           
  8756                           ; BSR set to: 0
  8757  001B50  518B               	movf	___flmul@temp& (0+255),w,b
  8758  001B52  2782               	addwf	___flmul@grs& (0+255),f,b
  8759  001B54  0E00               	movlw	0
  8760  001B56  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8761  001B58  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8762  001B5A  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8763                           
  8764                           ; BSR set to: 0
  8765  001B5C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8766  001B5E  2787               	addwf	___flmul@prod& (0+255),f,b
  8767  001B60  0E00               	movlw	0
  8768  001B62  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8769  001B64  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8770  001B66  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8771  001B68  5040               	movf	___flmul@a,w,c
  8772  001B6A  023E               	mulwf	___flmul@b+2,c
  8773  001B6C  CFF3 F08B          	movff	prodl,___flmul@temp
  8774  001B70  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8775                           
  8776                           ; BSR set to: 0
  8777  001B74  518B               	movf	___flmul@temp& (0+255),w,b
  8778  001B76  2782               	addwf	___flmul@grs& (0+255),f,b
  8779  001B78  0E00               	movlw	0
  8780  001B7A  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8781  001B7C  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8782  001B7E  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8783                           
  8784                           ; BSR set to: 0
  8785  001B80  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8786  001B82  2787               	addwf	___flmul@prod& (0+255),f,b
  8787  001B84  0E00               	movlw	0
  8788  001B86  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8789  001B88  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8790  001B8A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8791                           
  8792                           ; BSR set to: 0
  8793  001B8C  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8794  001B90  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8795  001B94  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8796  001B98  6B82               	clrf	___flmul@grs& (0+255),b
  8797                           
  8798                           ; BSR set to: 0
  8799  001B9A  5040               	movf	___flmul@a,w,c
  8800  001B9C  023D               	mulwf	___flmul@b+1,c
  8801  001B9E  CFF3 F08B          	movff	prodl,___flmul@temp
  8802  001BA2  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8803                           
  8804                           ; BSR set to: 0
  8805  001BA6  518B               	movf	___flmul@temp& (0+255),w,b
  8806  001BA8  2782               	addwf	___flmul@grs& (0+255),f,b
  8807  001BAA  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8808  001BAC  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8809  001BAE  0E00               	movlw	0
  8810  001BB0  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8811  001BB2  0E00               	movlw	0
  8812  001BB4  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8813                           
  8814                           ; BSR set to: 0
  8815  001BB6  5041               	movf	___flmul@a+1,w,c
  8816  001BB8  023C               	mulwf	___flmul@b,c
  8817  001BBA  CFF3 F08B          	movff	prodl,___flmul@temp
  8818  001BBE  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8819                           
  8820                           ; BSR set to: 0
  8821  001BC2  518B               	movf	___flmul@temp& (0+255),w,b
  8822  001BC4  2782               	addwf	___flmul@grs& (0+255),f,b
  8823  001BC6  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8824  001BC8  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8825  001BCA  0E00               	movlw	0
  8826  001BCC  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8827  001BCE  0E00               	movlw	0
  8828  001BD0  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8829                           
  8830                           ; BSR set to: 0
  8831  001BD2  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8832  001BD6  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8833  001BDA  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8834  001BDE  6B82               	clrf	___flmul@grs& (0+255),b
  8835  001BE0  5040               	movf	___flmul@a,w,c
  8836  001BE2  023C               	mulwf	___flmul@b,c
  8837  001BE4  CFF3 F08B          	movff	prodl,___flmul@temp
  8838  001BE8  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8839                           
  8840                           ; BSR set to: 0
  8841  001BEC  518B               	movf	___flmul@temp& (0+255),w,b
  8842  001BEE  2782               	addwf	___flmul@grs& (0+255),f,b
  8843  001BF0  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8844  001BF2  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8845  001BF4  0E00               	movlw	0
  8846  001BF6  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8847  001BF8  0E00               	movlw	0
  8848  001BFA  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8849                           
  8850                           ; BSR set to: 0
  8851  001BFC  5042               	movf	___flmul@a+2,w,c
  8852  001BFE  023D               	mulwf	___flmul@b+1,c
  8853  001C00  CFF3 F08B          	movff	prodl,___flmul@temp
  8854  001C04  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8855  001C08  518B               	movf	___flmul@temp& (0+255),w,b
  8856  001C0A  2787               	addwf	___flmul@prod& (0+255),f,b
  8857  001C0C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8858  001C0E  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8859  001C10  0E00               	movlw	0
  8860  001C12  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8861  001C14  0E00               	movlw	0
  8862  001C16  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8863                           
  8864                           ; BSR set to: 0
  8865  001C18  5041               	movf	___flmul@a+1,w,c
  8866  001C1A  023E               	mulwf	___flmul@b+2,c
  8867  001C1C  CFF3 F08B          	movff	prodl,___flmul@temp
  8868  001C20  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8869                           
  8870                           ; BSR set to: 0
  8871  001C24  518B               	movf	___flmul@temp& (0+255),w,b
  8872  001C26  2787               	addwf	___flmul@prod& (0+255),f,b
  8873  001C28  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8874  001C2A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8875  001C2C  0E00               	movlw	0
  8876  001C2E  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8877  001C30  0E00               	movlw	0
  8878  001C32  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8879  001C34  5042               	movf	___flmul@a+2,w,c
  8880  001C36  023E               	mulwf	___flmul@b+2,c
  8881  001C38  CFF3 F08B          	movff	prodl,___flmul@temp
  8882  001C3C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8883                           
  8884                           ; BSR set to: 0
  8885  001C40  518B               	movf	___flmul@temp& (0+255),w,b
  8886  001C42  6E44               	movwf	??___flmul& (0+255),c
  8887  001C44  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8888  001C46  6E45               	movwf	(??___flmul+1)& (0+255),c
  8889  001C48  6A46               	clrf	(??___flmul+2)& (0+255),c
  8890  001C4A  6A47               	clrf	(??___flmul+3)& (0+255),c
  8891  001C4C  C046  F047         	movff	??___flmul+2,??___flmul+3
  8892  001C50  C045  F046         	movff	??___flmul+1,??___flmul+2
  8893  001C54  C044  F045         	movff	??___flmul,??___flmul+1
  8894  001C58  6A44               	clrf	??___flmul,c
  8895  001C5A  5044               	movf	??___flmul,w,c
  8896  001C5C  2787               	addwf	___flmul@prod& (0+255),f,b
  8897  001C5E  5045               	movf	??___flmul+1,w,c
  8898  001C60  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8899  001C62  5046               	movf	??___flmul+2,w,c
  8900  001C64  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8901  001C66  5047               	movf	??___flmul+3,w,c
  8902  001C68  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8903                           
  8904                           ; BSR set to: 0
  8905  001C6A  C082  F044         	movff	___flmul@grs,??___flmul
  8906  001C6E  C083  F045         	movff	___flmul@grs+1,??___flmul+1
  8907  001C72  C084  F046         	movff	___flmul@grs+2,??___flmul+2
  8908  001C76  C085  F047         	movff	___flmul@grs+3,??___flmul+3
  8909  001C7A  0E19               	movlw	25
  8910  001C7C  D005               	goto	u4720
  8911  001C7E                     u4725:
  8912  001C7E  90D8               	bcf	status,0,c
  8913  001C80  3247               	rrcf	??___flmul+3,f,c
  8914  001C82  3246               	rrcf	??___flmul+2,f,c
  8915  001C84  3245               	rrcf	??___flmul+1,f,c
  8916  001C86  3244               	rrcf	??___flmul,f,c
  8917  001C88                     u4720:
  8918  001C88  2EE8               	decfsz	wreg,f,c
  8919  001C8A  D7F9               	goto	u4725
  8920  001C8C  5044               	movf	??___flmul,w,c
  8921  001C8E  2787               	addwf	___flmul@prod& (0+255),f,b
  8922  001C90  5045               	movf	??___flmul+1,w,c
  8923  001C92  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8924  001C94  5046               	movf	??___flmul+2,w,c
  8925  001C96  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8926  001C98  5047               	movf	??___flmul+3,w,c
  8927  001C9A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8928                           
  8929                           ; BSR set to: 0
  8930  001C9C  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8931  001CA0  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8932  001CA4  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8933  001CA8  6B82               	clrf	___flmul@grs& (0+255),b
  8934                           
  8935                           ; BSR set to: 0
  8936  001CAA  5181               	movf	___flmul@aexp& (0+255),w,b
  8937  001CAC  C086  F044         	movff	___flmul@bexp,??___flmul
  8938  001CB0  6A45               	clrf	(??___flmul+1)& (0+255),c
  8939  001CB2  2644               	addwf	??___flmul,f,c
  8940  001CB4  0E00               	movlw	0
  8941  001CB6  2245               	addwfc	??___flmul+1,f,c
  8942  001CB8  0E82               	movlw	130
  8943  001CBA  2444               	addwf	??___flmul,w,c
  8944  001CBC  6F8B               	movwf	___flmul@temp& (0+255),b
  8945  001CBE  0EFF               	movlw	255
  8946  001CC0  2045               	addwfc	??___flmul+1,w,c
  8947  001CC2  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  8948  001CC4  D00F               	goto	l878
  8949  001CC6                     
  8950                           ; BSR set to: 0
  8951                           
  8952                           ; BSR set to: 0
  8953  001CC6  90D8               	bcf	status,0,c
  8954  001CC8  3787               	rlcf	___flmul@prod& (0+255),f,b
  8955  001CCA  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  8956  001CCC  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  8957  001CCE  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  8958                           
  8959                           ; BSR set to: 0
  8960  001CD0  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  8961                           
  8962                           ; BSR set to: 0
  8963  001CD2  8187               	bsf	___flmul@prod& (0+255),0,b
  8964                           
  8965                           ; BSR set to: 0
  8966  001CD4  90D8               	bcf	status,0,c
  8967  001CD6  3782               	rlcf	___flmul@grs& (0+255),f,b
  8968  001CD8  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  8969  001CDA  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  8970  001CDC  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  8971  001CDE  078B               	decf	___flmul@temp& (0+255),f,b
  8972  001CE0  A0D8               	btfss	status,0,c
  8973  001CE2  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  8974  001CE4                     l878:
  8975                           
  8976                           ; BSR set to: 0
  8977                           
  8978                           ; BSR set to: 0
  8979  001CE4  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  8980  001CE6  D7EF               	goto	l879
  8981                           
  8982                           ; BSR set to: 0
  8983                           
  8984                           ; BSR set to: 0
  8985  001CE8  0E00               	movlw	0
  8986  001CEA  6F81               	movwf	___flmul@aexp& (0+255),b
  8987                           
  8988                           ; BSR set to: 0
  8989  001CEC  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  8990  001CEE  D016               	goto	l885
  8991                           
  8992                           ; BSR set to: 0
  8993  001CF0  0EFF               	movlw	255
  8994  001CF2  1582               	andwf	___flmul@grs& (0+255),w,b
  8995  001CF4  6E44               	movwf	??___flmul& (0+255),c
  8996  001CF6  0EFF               	movlw	255
  8997  001CF8  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  8998  001CFA  6E45               	movwf	(??___flmul+1)& (0+255),c
  8999  001CFC  0EFF               	movlw	255
  9000  001CFE  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  9001  001D00  6E46               	movwf	(??___flmul+2)& (0+255),c
  9002  001D02  0E7F               	movlw	127
  9003  001D04  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  9004  001D06  6E47               	movwf	(??___flmul+3)& (0+255),c
  9005  001D08  5044               	movf	??___flmul,w,c
  9006  001D0A  1045               	iorwf	??___flmul+1,w,c
  9007  001D0C  1046               	iorwf	??___flmul+2,w,c
  9008  001D0E  1047               	iorwf	??___flmul+3,w,c
  9009  001D10  A4D8               	btfss	status,2,c
  9010  001D12  D002               	goto	u4770
  9011                           
  9012                           ; BSR set to: 0
  9013                           
  9014                           ; BSR set to: 0
  9015  001D14  A187               	btfss	___flmul@prod& (0+255),0,b
  9016  001D16  D002               	goto	l885
  9017  001D18                     u4770:
  9018                           
  9019                           ; BSR set to: 0
  9020  001D18  0E01               	movlw	1
  9021  001D1A  6F81               	movwf	___flmul@aexp& (0+255),b
  9022  001D1C                     l885:
  9023                           
  9024                           ; BSR set to: 0
  9025                           
  9026                           ; BSR set to: 0
  9027                           
  9028                           ; BSR set to: 0
  9029  001D1C  5181               	movf	___flmul@aexp& (0+255),w,b
  9030  001D1E  B4D8               	btfsc	status,2,c
  9031  001D20  D01F               	goto	l887
  9032                           
  9033                           ; BSR set to: 0
  9034  001D22  0E01               	movlw	1
  9035  001D24  2787               	addwf	___flmul@prod& (0+255),f,b
  9036  001D26  0E00               	movlw	0
  9037  001D28  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9038  001D2A  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9039  001D2C  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9040                           
  9041                           ; BSR set to: 0
  9042  001D2E  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  9043  001D30  D017               	goto	l887
  9044                           
  9045                           ; BSR set to: 0
  9046  001D32  C087  F044         	movff	___flmul@prod,??___flmul
  9047  001D36  C088  F045         	movff	___flmul@prod+1,??___flmul+1
  9048  001D3A  C089  F046         	movff	___flmul@prod+2,??___flmul+2
  9049  001D3E  C08A  F047         	movff	___flmul@prod+3,??___flmul+3
  9050  001D42  3447               	rlcf	??___flmul+3,w,c
  9051  001D44  3247               	rrcf	??___flmul+3,f,c
  9052  001D46  3246               	rrcf	??___flmul+2,f,c
  9053  001D48  3245               	rrcf	??___flmul+1,f,c
  9054  001D4A  3244               	rrcf	??___flmul,f,c
  9055  001D4C  C044  F087         	movff	??___flmul,___flmul@prod
  9056  001D50  C045  F088         	movff	??___flmul+1,___flmul@prod+1
  9057  001D54  C046  F089         	movff	??___flmul+2,___flmul@prod+2
  9058  001D58  C047  F08A         	movff	??___flmul+3,___flmul@prod+3
  9059                           
  9060                           ; BSR set to: 0
  9061  001D5C  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  9062  001D5E  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  9063  001D60                     l887:
  9064                           
  9065                           ; BSR set to: 0
  9066                           
  9067                           ; BSR set to: 0
  9068                           
  9069                           ; BSR set to: 0
  9070  001D60  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9071  001D62  D00D               	goto	l888
  9072  001D64  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9073  001D66  E103               	bnz	u4800
  9074  001D68  298B               	incf	___flmul@temp& (0+255),w,b
  9075  001D6A  A0D8               	btfss	status,0,c
  9076  001D6C  D008               	goto	l888
  9077  001D6E                     u4800:
  9078                           
  9079                           ; BSR set to: 0
  9080  001D6E  0E00               	movlw	0
  9081  001D70  6F87               	movwf	___flmul@prod& (0+255),b
  9082  001D72  0E00               	movlw	0
  9083  001D74  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9084  001D76  0E80               	movlw	128
  9085  001D78  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9086  001D7A  0E7F               	movlw	127
  9087  001D7C  D020               	goto	L8
  9088  001D7E                     l888:
  9089                           
  9090                           ; BSR set to: 0
  9091                           
  9092                           ; BSR set to: 0
  9093  001D7E  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9094  001D80  D005               	goto	u4810
  9095  001D82  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9096  001D84  E10E               	bnz	l890
  9097  001D86  058B               	decf	___flmul@temp& (0+255),w,b
  9098  001D88  B0D8               	btfsc	status,0,c
  9099  001D8A  D00B               	goto	l890
  9100  001D8C                     u4810:
  9101                           
  9102                           ; BSR set to: 0
  9103  001D8C  0E00               	movlw	0
  9104  001D8E  6F87               	movwf	___flmul@prod& (0+255),b
  9105  001D90  0E00               	movlw	0
  9106  001D92  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9107  001D94  0E00               	movlw	0
  9108  001D96  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9109  001D98  0E00               	movlw	0
  9110  001D9A  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9111  001D9C  0E00               	movlw	0
  9112  001D9E  6F80               	movwf	___flmul@sign& (0+255),b
  9113  001DA0  D00F               	goto	l891
  9114  001DA2                     l890:
  9115                           
  9116                           ; BSR set to: 0
  9117  001DA2  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  9118                           
  9119                           ; BSR set to: 0
  9120  001DA6  0EFF               	movlw	255
  9121  001DA8  1787               	andwf	___flmul@prod& (0+255),f,b
  9122  001DAA  0EFF               	movlw	255
  9123  001DAC  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  9124  001DAE  0E7F               	movlw	127
  9125  001DB0  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  9126  001DB2  0E00               	movlw	0
  9127  001DB4  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  9128                           
  9129                           ; BSR set to: 0
  9130  001DB6  B186               	btfsc	___flmul@bexp& (0+255),0,b
  9131                           
  9132                           ; BSR set to: 0
  9133  001DB8  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  9134                           
  9135                           ; BSR set to: 0
  9136                           
  9137                           ; BSR set to: 0
  9138  001DBA  90D8               	bcf	status,0,c
  9139  001DBC  3186               	rrcf	___flmul@bexp& (0+255),w,b
  9140  001DBE                     L8:
  9141  001DBE  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9142  001DC0                     l891:
  9143                           
  9144                           ; BSR set to: 0
  9145                           
  9146                           ; BSR set to: 0
  9147                           
  9148                           ; BSR set to: 0
  9149  001DC0  5180               	movf	___flmul@sign& (0+255),w,b
  9150  001DC2  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  9151                           
  9152                           ; BSR set to: 0
  9153  001DC4  C087  F03C         	movff	___flmul@prod,?___flmul
  9154  001DC8  C088  F03D         	movff	___flmul@prod+1,?___flmul+1
  9155  001DCC  C089  F03E         	movff	___flmul@prod+2,?___flmul+2
  9156  001DD0  C08A  F03F         	movff	___flmul@prod+3,?___flmul+3
  9157  001DD4  0012               	return	
  9158  001DD6                     __end_of___flmul:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           intcon2	equ	0xFF1
  9168                           indf0	equ	0xFEF
  9169                           postinc0	equ	0xFEE
  9170                           fsr0h	equ	0xFEA
  9171                           fsr0l	equ	0xFE9
  9172                           wreg	equ	0xFE8
  9173                           indf2	equ	0xFDF
  9174                           postinc2	equ	0xFDE
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function ___fldiv *****************
  9180 ;; Defined at:
  9181 ;;		line 11 in file "/opt/microchip/xc8/v1.45/sources/common/sprcdiv.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  b               4   13[BANK0 ] unsigned char 
  9184 ;;  a               4   17[BANK0 ] unsigned char 
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;  grs             4   32[BANK0 ] unsigned long 
  9187 ;;  rem             4   26[BANK0 ] unsigned long 
  9188 ;;  new_exp         2   30[BANK0 ] int 
  9189 ;;  aexp            1   37[BANK0 ] unsigned char 
  9190 ;;  bexp            1   36[BANK0 ] unsigned char 
  9191 ;;  sign            1   25[BANK0 ] unsigned char 
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  4   13[BANK0 ] unsigned char 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9201 ;;      Params:         0       8       0       0       0       0       0
  9202 ;;      Locals:         0      13       0       0       0       0       0
  9203 ;;      Temps:          0       4       0       0       0       0       0
  9204 ;;      Totals:         0      25       0       0       0       0       0
  9205 ;;Total ram usage:       25 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    2
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_main
  9212 ;;		_calcula
  9213 ;;		_calibra
  9214 ;; This function uses a non-reentrant model
  9215 ;;
  9216                           
  9217                           	psect	text33
  9218  002114                     __ptext33:
  9219                           	opt stack 0
  9220  002114                     ___fldiv:
  9221                           	opt stack 27
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;incstack = 0
  9225  002114  0100               	movlb	0	; () banked
  9226  002116  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9227  002118  0B80               	andlw	128
  9228  00211A  6F99               	movwf	___fldiv@sign& (0+255),b
  9229  00211C  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9230  00211E  2590               	addwf	(___fldiv@b+3)& (0+255),w,b
  9231  002120  6FA4               	movwf	___fldiv@bexp& (0+255),b
  9232                           
  9233                           ; BSR set to: 0
  9234  002122  BF8F               	btfsc	(___fldiv@b+2)& (0+255),7,b
  9235                           
  9236                           ; BSR set to: 0
  9237  002124  81A4               	bsf	___fldiv@bexp& (0+255),0,b
  9238                           
  9239                           ; BSR set to: 0
  9240                           
  9241                           ; BSR set to: 0
  9242  002126  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9243  002128  B4D8               	btfsc	status,2,c
  9244  00212A  D00D               	goto	l833
  9245                           
  9246                           ; BSR set to: 0
  9247  00212C  29A4               	incf	___fldiv@bexp& (0+255),w,b
  9248  00212E  A4D8               	btfss	status,2,c
  9249  002130  D008               	goto	l834
  9250                           
  9251                           ; BSR set to: 0
  9252  002132  0E00               	movlw	0
  9253  002134  6F8D               	movwf	___fldiv@b& (0+255),b
  9254  002136  0E00               	movlw	0
  9255  002138  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9256  00213A  0E00               	movlw	0
  9257  00213C  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9258  00213E  0E00               	movlw	0
  9259  002140  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9260  002142                     l834:
  9261                           
  9262                           ; BSR set to: 0
  9263                           
  9264                           ; BSR set to: 0
  9265  002142  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9266  002144  D006               	goto	L9
  9267  002146                     l833:
  9268                           
  9269                           ; BSR set to: 0
  9270                           
  9271                           ; BSR set to: 0
  9272  002146  0E00               	movlw	0
  9273  002148  6F8D               	movwf	___fldiv@b& (0+255),b
  9274  00214A  0E00               	movlw	0
  9275  00214C  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9276  00214E  0E00               	movlw	0
  9277  002150  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9278  002152                     L9:
  9279  002152  0E00               	movlw	0
  9280  002154  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9281                           
  9282                           ; BSR set to: 0
  9283                           
  9284                           ; BSR set to: 0
  9285  002156  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9286  002158  0B80               	andlw	128
  9287  00215A  1B99               	xorwf	___fldiv@sign& (0+255),f,b
  9288                           
  9289                           ; BSR set to: 0
  9290  00215C  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9291  00215E  2594               	addwf	(___fldiv@a+3)& (0+255),w,b
  9292  002160  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9293                           
  9294                           ; BSR set to: 0
  9295  002162  BF93               	btfsc	(___fldiv@a+2)& (0+255),7,b
  9296                           
  9297                           ; BSR set to: 0
  9298  002164  81A5               	bsf	___fldiv@aexp& (0+255),0,b
  9299                           
  9300                           ; BSR set to: 0
  9301                           
  9302                           ; BSR set to: 0
  9303  002166  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9304  002168  B4D8               	btfsc	status,2,c
  9305  00216A  D00D               	goto	l837
  9306                           
  9307                           ; BSR set to: 0
  9308  00216C  29A5               	incf	___fldiv@aexp& (0+255),w,b
  9309  00216E  A4D8               	btfss	status,2,c
  9310  002170  D008               	goto	l838
  9311                           
  9312                           ; BSR set to: 0
  9313  002172  0E00               	movlw	0
  9314  002174  6F91               	movwf	___fldiv@a& (0+255),b
  9315  002176  0E00               	movlw	0
  9316  002178  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9317  00217A  0E00               	movlw	0
  9318  00217C  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9319  00217E  0E00               	movlw	0
  9320  002180  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9321  002182                     l838:
  9322                           
  9323                           ; BSR set to: 0
  9324                           
  9325                           ; BSR set to: 0
  9326  002182  8F93               	bsf	(___fldiv@a+2)& (0+255),7,b
  9327  002184  D006               	goto	L10
  9328  002186                     l837:
  9329                           
  9330                           ; BSR set to: 0
  9331                           
  9332                           ; BSR set to: 0
  9333  002186  0E00               	movlw	0
  9334  002188  6F91               	movwf	___fldiv@a& (0+255),b
  9335  00218A  0E00               	movlw	0
  9336  00218C  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9337  00218E  0E00               	movlw	0
  9338  002190  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9339  002192                     L10:
  9340  002192  0E00               	movlw	0
  9341  002194  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9342                           
  9343                           ; BSR set to: 0
  9344                           
  9345                           ; BSR set to: 0
  9346  002196  5191               	movf	___fldiv@a& (0+255),w,b
  9347  002198  1192               	iorwf	(___fldiv@a+1)& (0+255),w,b
  9348  00219A  1193               	iorwf	(___fldiv@a+2)& (0+255),w,b
  9349  00219C  1194               	iorwf	(___fldiv@a+3)& (0+255),w,b
  9350  00219E  A4D8               	btfss	status,2,c
  9351  0021A0  D015               	goto	l840
  9352                           
  9353                           ; BSR set to: 0
  9354  0021A2  0E00               	movlw	0
  9355  0021A4  6F8D               	movwf	___fldiv@b& (0+255),b
  9356  0021A6  0E00               	movlw	0
  9357  0021A8  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9358  0021AA  0E00               	movlw	0
  9359  0021AC  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9360  0021AE  0E00               	movlw	0
  9361  0021B0  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9362                           
  9363                           ; BSR set to: 0
  9364  0021B2  0E80               	movlw	128
  9365  0021B4  138F               	iorwf	(___fldiv@b+2)& (0+255),f,b
  9366  0021B6  0E7F               	movlw	127
  9367  0021B8  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9368                           
  9369                           ; BSR set to: 0
  9370  0021BA  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9371  0021BE  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9372  0021C2  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9373  0021C6  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9374                           
  9375                           ; BSR set to: 0
  9376  0021CA  0012               	return	
  9377  0021CC                     l840:
  9378                           
  9379                           ; BSR set to: 0
  9380                           
  9381                           ; BSR set to: 0
  9382  0021CC  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9383  0021CE  A4D8               	btfss	status,2,c
  9384  0021D0  D011               	goto	l842
  9385                           
  9386                           ; BSR set to: 0
  9387  0021D2  0E00               	movlw	0
  9388  0021D4  6F8D               	movwf	___fldiv@b& (0+255),b
  9389  0021D6  0E00               	movlw	0
  9390  0021D8  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9391  0021DA  0E00               	movlw	0
  9392  0021DC  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9393  0021DE  0E00               	movlw	0
  9394  0021E0  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9395                           
  9396                           ; BSR set to: 0
  9397  0021E2  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9398  0021E6  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9399  0021EA  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9400  0021EE  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9401                           
  9402                           ; BSR set to: 0
  9403  0021F2  0012               	return	
  9404  0021F4                     l842:
  9405                           
  9406                           ; BSR set to: 0
  9407                           
  9408                           ; BSR set to: 0
  9409  0021F4  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9410  0021F6  6F95               	movwf	??___fldiv& (0+255),b
  9411  0021F8  6B96               	clrf	(??___fldiv+1)& (0+255),b
  9412  0021FA  1F95               	comf	??___fldiv& (0+255),f,b
  9413  0021FC  1F96               	comf	(??___fldiv+1)& (0+255),f,b
  9414  0021FE  4B95               	infsnz	??___fldiv& (0+255),f,b
  9415  002200  2B96               	incf	(??___fldiv+1)& (0+255),f,b
  9416  002202  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9417  002204  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9418  002206  6B98               	clrf	(??___fldiv+3)& (0+255),b
  9419  002208  5195               	movf	??___fldiv& (0+255),w,b
  9420  00220A  2797               	addwf	(??___fldiv+2)& (0+255),f,b
  9421  00220C  5196               	movf	(??___fldiv+1)& (0+255),w,b
  9422  00220E  2398               	addwfc	(??___fldiv+3)& (0+255),f,b
  9423  002210  0E7F               	movlw	127
  9424  002212  2597               	addwf	(??___fldiv+2)& (0+255),w,b
  9425  002214  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9426  002216  0E00               	movlw	0
  9427  002218  2198               	addwfc	(??___fldiv+3)& (0+255),w,b
  9428  00221A  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9429                           
  9430                           ; BSR set to: 0
  9431  00221C  C08D  F09A         	movff	___fldiv@b,___fldiv@rem
  9432  002220  C08E  F09B         	movff	___fldiv@b+1,___fldiv@rem+1
  9433  002224  C08F  F09C         	movff	___fldiv@b+2,___fldiv@rem+2
  9434  002228  C090  F09D         	movff	___fldiv@b+3,___fldiv@rem+3
  9435                           
  9436                           ; BSR set to: 0
  9437  00222C  0E00               	movlw	0
  9438  00222E  6F8D               	movwf	___fldiv@b& (0+255),b
  9439  002230  0E00               	movlw	0
  9440  002232  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9441  002234  0E00               	movlw	0
  9442  002236  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9443  002238  0E00               	movlw	0
  9444  00223A  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9445                           
  9446                           ; BSR set to: 0
  9447  00223C  0E00               	movlw	0
  9448  00223E  6FA0               	movwf	___fldiv@grs& (0+255),b
  9449  002240  0E00               	movlw	0
  9450  002242  6FA1               	movwf	(___fldiv@grs+1)& (0+255),b
  9451  002244  0E00               	movlw	0
  9452  002246  6FA2               	movwf	(___fldiv@grs+2)& (0+255),b
  9453  002248  0E00               	movlw	0
  9454  00224A  6FA3               	movwf	(___fldiv@grs+3)& (0+255),b
  9455                           
  9456                           ; BSR set to: 0
  9457  00224C  0E00               	movlw	0
  9458  00224E  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9459  002250  D028               	goto	l843
  9460  002252                     
  9461                           ; BSR set to: 0
  9462                           
  9463                           ; BSR set to: 0
  9464  002252  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9465  002254  B4D8               	btfsc	status,2,c
  9466  002256  D011               	goto	l845
  9467                           
  9468                           ; BSR set to: 0
  9469  002258  90D8               	bcf	status,0,c
  9470  00225A  379A               	rlcf	___fldiv@rem& (0+255),f,b
  9471  00225C  379B               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  9472  00225E  379C               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  9473  002260  379D               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  9474  002262  90D8               	bcf	status,0,c
  9475  002264  378D               	rlcf	___fldiv@b& (0+255),f,b
  9476  002266  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9477  002268  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9478  00226A  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9479                           
  9480                           ; BSR set to: 0
  9481  00226C  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9482                           
  9483                           ; BSR set to: 0
  9484  00226E  818D               	bsf	___fldiv@b& (0+255),0,b
  9485                           
  9486                           ; BSR set to: 0
  9487  002270  90D8               	bcf	status,0,c
  9488  002272  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9489  002274  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9490  002276  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9491  002278  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9492  00227A                     l845:
  9493                           
  9494                           ; BSR set to: 0
  9495                           
  9496                           ; BSR set to: 0
  9497  00227A  5191               	movf	___fldiv@a& (0+255),w,b
  9498  00227C  5D9A               	subwf	___fldiv@rem& (0+255),w,b
  9499  00227E  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9500  002280  599B               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  9501  002282  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9502  002284  599C               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  9503  002286  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9504  002288  599D               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  9505  00228A  A0D8               	btfss	status,0,c
  9506  00228C  D009               	goto	l847
  9507                           
  9508                           ; BSR set to: 0
  9509  00228E  8DA3               	bsf	(___fldiv@grs+3)& (0+255),6,b
  9510                           
  9511                           ; BSR set to: 0
  9512  002290  5191               	movf	___fldiv@a& (0+255),w,b
  9513  002292  5F9A               	subwf	___fldiv@rem& (0+255),f,b
  9514  002294  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9515  002296  5B9B               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  9516  002298  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9517  00229A  5B9C               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  9518  00229C  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9519  00229E  5B9D               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  9520  0022A0                     l847:
  9521                           
  9522                           ; BSR set to: 0
  9523                           
  9524                           ; BSR set to: 0
  9525  0022A0  2BA5               	incf	___fldiv@aexp& (0+255),f,b
  9526  0022A2                     l843:
  9527                           
  9528                           ; BSR set to: 0
  9529  0022A2  0E19               	movlw	25
  9530  0022A4  65A5               	cpfsgt	___fldiv@aexp& (0+255),b
  9531  0022A6  D7D5               	goto	l844
  9532                           
  9533                           ; BSR set to: 0
  9534                           
  9535                           ; BSR set to: 0
  9536  0022A8  519A               	movf	___fldiv@rem& (0+255),w,b
  9537  0022AA  119B               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  9538  0022AC  119C               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  9539  0022AE  119D               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  9540  0022B0  B4D8               	btfsc	status,2,c
  9541  0022B2  D011               	goto	l850
  9542                           
  9543                           ; BSR set to: 0
  9544  0022B4  81A0               	bsf	___fldiv@grs& (0+255),0,b
  9545                           
  9546                           ; BSR set to: 0
  9547  0022B6  D00F               	goto	l850
  9548  0022B8                     
  9549                           ; BSR set to: 0
  9550                           
  9551                           ; BSR set to: 0
  9552  0022B8  90D8               	bcf	status,0,c
  9553  0022BA  378D               	rlcf	___fldiv@b& (0+255),f,b
  9554  0022BC  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9555  0022BE  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9556  0022C0  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9557                           
  9558                           ; BSR set to: 0
  9559  0022C2  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9560                           
  9561                           ; BSR set to: 0
  9562  0022C4  818D               	bsf	___fldiv@b& (0+255),0,b
  9563                           
  9564                           ; BSR set to: 0
  9565  0022C6  90D8               	bcf	status,0,c
  9566  0022C8  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9567  0022CA  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9568  0022CC  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9569  0022CE  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9570  0022D0  079E               	decf	___fldiv@new_exp& (0+255),f,b
  9571  0022D2  A0D8               	btfss	status,0,c
  9572  0022D4  079F               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  9573  0022D6                     l850:
  9574                           
  9575                           ; BSR set to: 0
  9576                           
  9577                           ; BSR set to: 0
  9578  0022D6  AF8F               	btfss	(___fldiv@b+2)& (0+255),7,b
  9579  0022D8  D7EF               	goto	l851
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  0022DA  0E00               	movlw	0
  9585  0022DC  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588  0022DE  AFA3               	btfss	(___fldiv@grs+3)& (0+255),7,b
  9589  0022E0  D016               	goto	l857
  9590                           
  9591                           ; BSR set to: 0
  9592  0022E2  0EFF               	movlw	255
  9593  0022E4  15A0               	andwf	___fldiv@grs& (0+255),w,b
  9594  0022E6  6F95               	movwf	??___fldiv& (0+255),b
  9595  0022E8  0EFF               	movlw	255
  9596  0022EA  15A1               	andwf	(___fldiv@grs+1)& (0+255),w,b
  9597  0022EC  6F96               	movwf	(??___fldiv+1)& (0+255),b
  9598  0022EE  0EFF               	movlw	255
  9599  0022F0  15A2               	andwf	(___fldiv@grs+2)& (0+255),w,b
  9600  0022F2  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9601  0022F4  0E7F               	movlw	127
  9602  0022F6  15A3               	andwf	(___fldiv@grs+3)& (0+255),w,b
  9603  0022F8  6F98               	movwf	(??___fldiv+3)& (0+255),b
  9604  0022FA  5195               	movf	??___fldiv& (0+255),w,b
  9605  0022FC  1196               	iorwf	(??___fldiv+1)& (0+255),w,b
  9606  0022FE  1197               	iorwf	(??___fldiv+2)& (0+255),w,b
  9607  002300  1198               	iorwf	(??___fldiv+3)& (0+255),w,b
  9608  002302  A4D8               	btfss	status,2,c
  9609  002304  D002               	goto	u5370
  9610                           
  9611                           ; BSR set to: 0
  9612                           
  9613                           ; BSR set to: 0
  9614  002306  A18D               	btfss	___fldiv@b& (0+255),0,b
  9615  002308  D002               	goto	l857
  9616  00230A                     u5370:
  9617                           
  9618                           ; BSR set to: 0
  9619  00230A  0E01               	movlw	1
  9620  00230C  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9621  00230E                     l857:
  9622                           
  9623                           ; BSR set to: 0
  9624                           
  9625                           ; BSR set to: 0
  9626                           
  9627                           ; BSR set to: 0
  9628  00230E  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9629  002310  B4D8               	btfsc	status,2,c
  9630  002312  D01F               	goto	l859
  9631                           
  9632                           ; BSR set to: 0
  9633  002314  0E01               	movlw	1
  9634  002316  278D               	addwf	___fldiv@b& (0+255),f,b
  9635  002318  0E00               	movlw	0
  9636  00231A  238E               	addwfc	(___fldiv@b+1)& (0+255),f,b
  9637  00231C  238F               	addwfc	(___fldiv@b+2)& (0+255),f,b
  9638  00231E  2390               	addwfc	(___fldiv@b+3)& (0+255),f,b
  9639                           
  9640                           ; BSR set to: 0
  9641  002320  A190               	btfss	(___fldiv@b+3)& (0+255),0,b
  9642  002322  D017               	goto	l859
  9643                           
  9644                           ; BSR set to: 0
  9645  002324  C08D  F095         	movff	___fldiv@b,??___fldiv
  9646  002328  C08E  F096         	movff	___fldiv@b+1,??___fldiv+1
  9647  00232C  C08F  F097         	movff	___fldiv@b+2,??___fldiv+2
  9648  002330  C090  F098         	movff	___fldiv@b+3,??___fldiv+3
  9649  002334  3598               	rlcf	(??___fldiv+3)& (0+255),w,b
  9650  002336  3398               	rrcf	(??___fldiv+3)& (0+255),f,b
  9651  002338  3397               	rrcf	(??___fldiv+2)& (0+255),f,b
  9652  00233A  3396               	rrcf	(??___fldiv+1)& (0+255),f,b
  9653  00233C  3395               	rrcf	??___fldiv& (0+255),f,b
  9654  00233E  C095  F08D         	movff	??___fldiv,___fldiv@b
  9655  002342  C096  F08E         	movff	??___fldiv+1,___fldiv@b+1
  9656  002346  C097  F08F         	movff	??___fldiv+2,___fldiv@b+2
  9657  00234A  C098  F090         	movff	??___fldiv+3,___fldiv@b+3
  9658                           
  9659                           ; BSR set to: 0
  9660  00234E  4B9E               	infsnz	___fldiv@new_exp& (0+255),f,b
  9661  002350  2B9F               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  9662  002352                     l859:
  9663                           
  9664                           ; BSR set to: 0
  9665                           
  9666                           ; BSR set to: 0
  9667                           
  9668                           ; BSR set to: 0
  9669  002352  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9670  002354  D010               	goto	l860
  9671  002356  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9672  002358  E103               	bnz	u5400
  9673  00235A  299E               	incf	___fldiv@new_exp& (0+255),w,b
  9674  00235C  A0D8               	btfss	status,0,c
  9675  00235E  D00B               	goto	l860
  9676  002360                     u5400:
  9677                           
  9678                           ; BSR set to: 0
  9679  002360  0E00               	movlw	0
  9680  002362  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9681  002364  699E               	setf	___fldiv@new_exp& (0+255),b
  9682  002366  0E00               	movlw	0
  9683  002368  6F8D               	movwf	___fldiv@b& (0+255),b
  9684  00236A  0E00               	movlw	0
  9685  00236C  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9686  00236E  0E00               	movlw	0
  9687  002370  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9688  002372  0E00               	movlw	0
  9689  002374  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9690  002376                     l860:
  9691                           
  9692                           ; BSR set to: 0
  9693                           
  9694                           ; BSR set to: 0
  9695  002376  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9696  002378  D005               	goto	u5410
  9697  00237A  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9698  00237C  E111               	bnz	l4919
  9699  00237E  059E               	decf	___fldiv@new_exp& (0+255),w,b
  9700  002380  B0D8               	btfsc	status,0,c
  9701  002382  D00E               	goto	l861
  9702  002384                     u5410:
  9703                           
  9704                           ; BSR set to: 0
  9705  002384  0E00               	movlw	0
  9706  002386  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9707  002388  0E00               	movlw	0
  9708  00238A  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9709  00238C  0E00               	movlw	0
  9710  00238E  6F8D               	movwf	___fldiv@b& (0+255),b
  9711  002390  0E00               	movlw	0
  9712  002392  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9713  002394  0E00               	movlw	0
  9714  002396  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9715  002398  0E00               	movlw	0
  9716  00239A  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9717  00239C  0E00               	movlw	0
  9718  00239E  6F99               	movwf	___fldiv@sign& (0+255),b
  9719  0023A0                     l861:
  9720  0023A0                     l4919:
  9721                           
  9722                           ; BSR set to: 0
  9723  0023A0  C09E  F0A4         	movff	___fldiv@new_exp,___fldiv@bexp
  9724                           
  9725                           ; BSR set to: 0
  9726  0023A4  A1A4               	btfss	___fldiv@bexp& (0+255),0,b
  9727  0023A6  D002               	goto	l862
  9728                           
  9729                           ; BSR set to: 0
  9730  0023A8  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9731  0023AA  D001               	goto	l863
  9732  0023AC                     l862:
  9733                           
  9734                           ; BSR set to: 0
  9735                           
  9736                           ; BSR set to: 0
  9737  0023AC  9F8F               	bcf	(___fldiv@b+2)& (0+255),7,b
  9738  0023AE                     l863:
  9739                           
  9740                           ; BSR set to: 0
  9741                           
  9742                           ; BSR set to: 0
  9743  0023AE  90D8               	bcf	status,0,c
  9744  0023B0  31A4               	rrcf	___fldiv@bexp& (0+255),w,b
  9745  0023B2  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9746                           
  9747                           ; BSR set to: 0
  9748  0023B4  5199               	movf	___fldiv@sign& (0+255),w,b
  9749  0023B6  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9750                           
  9751                           ; BSR set to: 0
  9752  0023B8  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9753  0023BC  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9754  0023C0  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9755  0023C4  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9756  0023C8  0012               	return	
  9757  0023CA                     __end_of___fldiv:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           intcon	equ	0xFF2
  9766                           intcon2	equ	0xFF1
  9767                           indf0	equ	0xFEF
  9768                           postinc0	equ	0xFEE
  9769                           fsr0h	equ	0xFEA
  9770                           fsr0l	equ	0xFE9
  9771                           wreg	equ	0xFE8
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _low_isr *****************
  9779 ;; Defined at:
  9780 ;;		line 112 in file "color_3.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;		None
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  1    wreg      void 
  9787 ;; Registers used:
  9788 ;;		wreg, status,2, status,0
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9794 ;;      Params:         0       0       0       0       0       0       0
  9795 ;;      Locals:         0       0       0       0       0       0       0
  9796 ;;      Temps:         21       0       0       0       0       0       0
  9797 ;;      Totals:        21       0       0       0       0       0       0
  9798 ;;Total ram usage:       21 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    1
  9801 ;; This function calls:
  9802 ;;		Nothing
  9803 ;; This function is called by:
  9804 ;;		Interrupt level 1
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	intcodelo
  9809  000018                     __pintcodelo:
  9810                           	opt stack 0
  9811  000018                     _low_isr:
  9812                           	opt stack 25
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;incstack = 0
  9816  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9817  00001A  CFD8 F019          	movff	status,??_low_isr
  9818  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  9819  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  9820  000026  CFFA F01C          	movff	pclath,??_low_isr+3
  9821  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
  9822  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
  9823  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
  9824  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
  9825  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
  9826  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
  9827  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
  9828  000046  CFF3 F024          	movff	prodl,??_low_isr+11
  9829  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
  9830  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
  9831  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
  9832  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
  9833  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
  9834  00005E  C051  F02A         	movff	btemp,??_low_isr+17
  9835  000062  C052  F02B         	movff	btemp+1,??_low_isr+18
  9836  000066  C053  F02C         	movff	btemp+2,??_low_isr+19
  9837  00006A  C054  F02D         	movff	btemp+3,??_low_isr+20
  9838                           
  9839                           ;color_3.c: 114: if(TMR1IF == 1)
  9840  00006E  A09E               	btfss	3998,0,c	;volatile
  9841  000070  D007               	goto	i1l2379
  9842                           
  9843                           ;color_3.c: 115: {
  9844                           ;color_3.c: 116: overflowCount++;
  9845  000072  0E01               	movlw	1
  9846  000074  264A               	addwf	_overflowCount,f,c	;volatile
  9847  000076  0E00               	movlw	0
  9848  000078  224B               	addwfc	_overflowCount+1,f,c	;volatile
  9849  00007A  224C               	addwfc	_overflowCount+2,f,c	;volatile
  9850  00007C  224D               	addwfc	_overflowCount+3,f,c	;volatile
  9851                           
  9852                           ;color_3.c: 117: TMR1IF =0;
  9853  00007E  909E               	bcf	3998,0,c	;volatile
  9854  000080                     i1l2379:
  9855                           
  9856                           ;color_3.c: 118: return;
  9857  000080  C02D  F054         	movff	??_low_isr+20,btemp+3
  9858  000084  C02C  F053         	movff	??_low_isr+19,btemp+2
  9859  000088  C02B  F052         	movff	??_low_isr+18,btemp+1
  9860  00008C  C02A  F051         	movff	??_low_isr+17,btemp
  9861  000090  C029  FFF5         	movff	??_low_isr+16,tablat
  9862  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
  9863  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
  9864  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
  9865  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
  9866  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
  9867  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
  9868  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
  9869  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
  9870  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
  9871  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
  9872  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
  9873  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
  9874  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
  9875  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
  9876  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
  9877  0000D0  C019  FFD8         	movff	??_low_isr,status
  9878  0000D4  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9879  0000D6  0010               	retfie	
  9880  0000D8                     __end_of_low_isr:
  9881                           	opt stack 0
  9882                           pclatu	equ	0xFFB
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           indf0	equ	0xFEF
  9893                           postinc0	equ	0xFEE
  9894                           fsr0h	equ	0xFEA
  9895                           fsr0l	equ	0xFE9
  9896                           wreg	equ	0xFE8
  9897                           fsr1h	equ	0xFE2
  9898                           fsr1l	equ	0xFE1
  9899                           bsr	equ	0xFE0
  9900                           indf2	equ	0xFDF
  9901                           postinc2	equ	0xFDE
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _high_isr *****************
  9907 ;; Defined at:
  9908 ;;		line 122 in file "color_3.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  counter         2   22[COMRAM] unsigned int 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9922 ;;      Params:         0       0       0       0       0       0       0
  9923 ;;      Locals:         2       0       0       0       0       0       0
  9924 ;;      Temps:         22       0       0       0       0       0       0
  9925 ;;      Totals:        24       0       0       0       0       0       0
  9926 ;;Total ram usage:       24 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		Interrupt level 2
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           	psect	intcode
  9936  000008                     __pintcode:
  9937                           	opt stack 0
  9938  000008                     _high_isr:
  9939                           	opt stack 25
  9940                           
  9941                           ;incstack = 0
  9942  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9943  00000A  ED03  F015         	call	int_func,f	;refresh shadow registers
  9944                           pclatu	equ	0xFFB
  9945                           pclath	equ	0xFFA
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           prodh	equ	0xFF4
  9951                           prodl	equ	0xFF3
  9952                           intcon	equ	0xFF2
  9953                           intcon2	equ	0xFF1
  9954                           indf0	equ	0xFEF
  9955                           postinc0	equ	0xFEE
  9956                           fsr0h	equ	0xFEA
  9957                           fsr0l	equ	0xFE9
  9958                           wreg	equ	0xFE8
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           bsr	equ	0xFE0
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968                           	psect	intcode_body
  9969  002A06                     __pintcode_body:
  9970                           	opt stack 25
  9971  002A06                     int_func:
  9972                           	opt stack 25
  9973  002A06  0006               	pop		; remove dummy address from shadow register refresh
  9974  002A08  CFFA F005          	movff	pclath,??_high_isr+4
  9975  002A0C  CFFB F006          	movff	pclatu,??_high_isr+5
  9976  002A10  CFE9 F007          	movff	fsr0l,??_high_isr+6
  9977  002A14  CFEA F008          	movff	fsr0h,??_high_isr+7
  9978  002A18  CFE1 F009          	movff	fsr1l,??_high_isr+8
  9979  002A1C  CFE2 F00A          	movff	fsr1h,??_high_isr+9
  9980  002A20  CFD9 F00B          	movff	fsr2l,??_high_isr+10
  9981  002A24  CFDA F00C          	movff	fsr2h,??_high_isr+11
  9982  002A28  CFF3 F00D          	movff	prodl,??_high_isr+12
  9983  002A2C  CFF4 F00E          	movff	prodh,??_high_isr+13
  9984  002A30  CFF6 F00F          	movff	tblptrl,??_high_isr+14
  9985  002A34  CFF7 F010          	movff	tblptrh,??_high_isr+15
  9986  002A38  CFF8 F011          	movff	tblptru,??_high_isr+16
  9987  002A3C  CFF5 F012          	movff	tablat,??_high_isr+17
  9988  002A40  C051  F013         	movff	btemp,??_high_isr+18
  9989  002A44  C052  F014         	movff	btemp+1,??_high_isr+19
  9990  002A48  C053  F015         	movff	btemp+2,??_high_isr+20
  9991  002A4C  C054  F016         	movff	btemp+3,??_high_isr+21
  9992                           
  9993                           ;color_3.c: 125: if(INT0IF == 1)
  9994  002A50  A2F2               	btfss	intcon,1,c	;volatile
  9995  002A52  D046               	goto	i2l4003
  9996                           
  9997                           ;color_3.c: 126: {
  9998                           ;color_3.c: 127: unsigned int counter = TMR1;
  9999  002A54  CFCE F017          	movff	4046,high_isr@counter	;volatile
 10000  002A58  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
 10001                           
 10002                           ;color_3.c: 130: if (triggered)
 10003  002A5C  504E               	movf	_triggered,w,c	;volatile
 10004  002A5E  A4D8               	btfss	status,2,c
 10005  002A60  D03E               	goto	i2l4001
 10006                           
 10007                           ;color_3.c: 134: }
 10008                           ;color_3.c: 136: if (first)
 10009                           
 10010                           ;color_3.c: 133: return;
 10011                           
 10012                           ;color_3.c: 131: {
 10013                           ;color_3.c: 132: INT0IF = 0;
 10014  002A62  504F               	movf	_first,w,c	;volatile
 10015  002A64  B4D8               	btfsc	status,2,c
 10016  002A66  D01E               	goto	i2l147
 10017                           
 10018                           ;color_3.c: 137: {
 10019                           ;color_3.c: 138: startTime = (overflowCount << 16) + counter;
 10020  002A68  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 10021  002A6C  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10022  002A70  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10023  002A74  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10024  002A78  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10025  002A7C  C001  F003         	movff	??_high_isr,??_high_isr+2
 10026  002A80  6A02               	clrf	??_high_isr+1,c
 10027  002A82  6A01               	clrf	??_high_isr,c
 10028  002A84  5017               	movf	high_isr@counter,w,c
 10029  002A86  2401               	addwf	??_high_isr,w,c
 10030  002A88  0100               	movlb	0	; () banked
 10031  002A8A  6FE8               	movwf	_startTime& (0+255),b	;volatile
 10032  002A8C  5018               	movf	high_isr@counter+1,w,c
 10033  002A8E  2002               	addwfc	??_high_isr+1,w,c
 10034  002A90  6FE9               	movwf	(_startTime+1)& (0+255),b	;volatile
 10035  002A92  0E00               	movlw	0
 10036  002A94  2003               	addwfc	??_high_isr+2,w,c
 10037  002A96  6FEA               	movwf	(_startTime+2)& (0+255),b	;volatile
 10038  002A98  0E00               	movlw	0
 10039  002A9A  2004               	addwfc	??_high_isr+3,w,c
 10040  002A9C  6FEB               	movwf	(_startTime+3)& (0+255),b	;volatile
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;color_3.c: 139: first = false;
 10044  002A9E  0E00               	movlw	0
 10045  002AA0  6E4F               	movwf	_first,c	;volatile
 10046  002AA2  D01D               	goto	i2l4001
 10047  002AA4                     i2l147:
 10048                           
 10049                           ;color_3.c: 142: }
 10050                           ;color_3.c: 144: finishTime = (overflowCount << 16) + counter;
 10051                           
 10052                           ; BSR set to: 0
 10053  002AA4  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 10054  002AA8  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10055  002AAC  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10056  002AB0  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10057  002AB4  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10058  002AB8  C001  F003         	movff	??_high_isr,??_high_isr+2
 10059  002ABC  6A02               	clrf	??_high_isr+1,c
 10060  002ABE  6A01               	clrf	??_high_isr,c
 10061  002AC0  5017               	movf	high_isr@counter,w,c
 10062  002AC2  2401               	addwf	??_high_isr,w,c
 10063  002AC4  0100               	movlb	0	; () banked
 10064  002AC6  6FE4               	movwf	_finishTime& (0+255),b	;volatile
 10065  002AC8  5018               	movf	high_isr@counter+1,w,c
 10066  002ACA  2002               	addwfc	??_high_isr+1,w,c
 10067  002ACC  6FE5               	movwf	(_finishTime+1)& (0+255),b	;volatile
 10068  002ACE  0E00               	movlw	0
 10069  002AD0  2003               	addwfc	??_high_isr+2,w,c
 10070  002AD2  6FE6               	movwf	(_finishTime+2)& (0+255),b	;volatile
 10071  002AD4  0E00               	movlw	0
 10072  002AD6  2004               	addwfc	??_high_isr+3,w,c
 10073  002AD8  6FE7               	movwf	(_finishTime+3)& (0+255),b	;volatile
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;color_3.c: 145: triggered = true;
 10077  002ADA  0E01               	movlw	1
 10078  002ADC  6E4E               	movwf	_triggered,c	;volatile
 10079  002ADE                     i2l4001:
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;color_3.c: 146: INT0IF = 0;
 10083  002ADE  92F2               	bcf	intcon,1,c	;volatile
 10084  002AE0                     i2l4003:
 10085                           
 10086                           ; BSR set to: 0
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;color_3.c: 147: return;
 10090  002AE0  C016  F054         	movff	??_high_isr+21,btemp+3
 10091  002AE4  C015  F053         	movff	??_high_isr+20,btemp+2
 10092  002AE8  C014  F052         	movff	??_high_isr+19,btemp+1
 10093  002AEC  C013  F051         	movff	??_high_isr+18,btemp
 10094  002AF0  C012  FFF5         	movff	??_high_isr+17,tablat
 10095  002AF4  C011  FFF8         	movff	??_high_isr+16,tblptru
 10096  002AF8  C010  FFF7         	movff	??_high_isr+15,tblptrh
 10097  002AFC  C00F  FFF6         	movff	??_high_isr+14,tblptrl
 10098  002B00  C00E  FFF4         	movff	??_high_isr+13,prodh
 10099  002B04  C00D  FFF3         	movff	??_high_isr+12,prodl
 10100  002B08  C00C  FFDA         	movff	??_high_isr+11,fsr2h
 10101  002B0C  C00B  FFD9         	movff	??_high_isr+10,fsr2l
 10102  002B10  C00A  FFE2         	movff	??_high_isr+9,fsr1h
 10103  002B14  C009  FFE1         	movff	??_high_isr+8,fsr1l
 10104  002B18  C008  FFEA         	movff	??_high_isr+7,fsr0h
 10105  002B1C  C007  FFE9         	movff	??_high_isr+6,fsr0l
 10106  002B20  C006  FFFB         	movff	??_high_isr+5,pclatu
 10107  002B24  C005  FFFA         	movff	??_high_isr+4,pclath
 10108  002B28  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10109  002B2A  0011               	retfie		f
 10110  002B2C                     __end_of_high_isr:
 10111                           	opt stack 0
 10112                           pclatu	equ	0xFFB
 10113                           pclath	equ	0xFFA
 10114                           tblptru	equ	0xFF8
 10115                           tblptrh	equ	0xFF7
 10116                           tblptrl	equ	0xFF6
 10117                           tablat	equ	0xFF5
 10118                           prodh	equ	0xFF4
 10119                           prodl	equ	0xFF3
 10120                           intcon	equ	0xFF2
 10121                           intcon2	equ	0xFF1
 10122                           indf0	equ	0xFEF
 10123                           postinc0	equ	0xFEE
 10124                           fsr0h	equ	0xFEA
 10125                           fsr0l	equ	0xFE9
 10126                           wreg	equ	0xFE8
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           bsr	equ	0xFE0
 10130                           indf2	equ	0xFDF
 10131                           postinc2	equ	0xFDE
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           pclatu	equ	0xFFB
 10136                           pclath	equ	0xFFA
 10137                           tblptru	equ	0xFF8
 10138                           tblptrh	equ	0xFF7
 10139                           tblptrl	equ	0xFF6
 10140                           tablat	equ	0xFF5
 10141                           prodh	equ	0xFF4
 10142                           prodl	equ	0xFF3
 10143                           intcon	equ	0xFF2
 10144                           intcon2	equ	0xFF1
 10145                           indf0	equ	0xFEF
 10146                           postinc0	equ	0xFEE
 10147                           fsr0h	equ	0xFEA
 10148                           fsr0l	equ	0xFE9
 10149                           wreg	equ	0xFE8
 10150                           fsr1h	equ	0xFE2
 10151                           fsr1l	equ	0xFE1
 10152                           bsr	equ	0xFE0
 10153                           indf2	equ	0xFDF
 10154                           postinc2	equ	0xFDE
 10155                           fsr2h	equ	0xFDA
 10156                           fsr2l	equ	0xFD9
 10157                           status	equ	0xFD8
 10158                           
 10159                           	psect	rparam
 10160  0000                     pclatu	equ	0xFFB
 10161                           pclath	equ	0xFFA
 10162                           tblptru	equ	0xFF8
 10163                           tblptrh	equ	0xFF7
 10164                           tblptrl	equ	0xFF6
 10165                           tablat	equ	0xFF5
 10166                           prodh	equ	0xFF4
 10167                           prodl	equ	0xFF3
 10168                           intcon	equ	0xFF2
 10169                           intcon2	equ	0xFF1
 10170                           indf0	equ	0xFEF
 10171                           postinc0	equ	0xFEE
 10172                           fsr0h	equ	0xFEA
 10173                           fsr0l	equ	0xFE9
 10174                           wreg	equ	0xFE8
 10175                           fsr1h	equ	0xFE2
 10176                           fsr1l	equ	0xFE1
 10177                           bsr	equ	0xFE0
 10178                           indf2	equ	0xFDF
 10179                           postinc2	equ	0xFDE
 10180                           fsr2h	equ	0xFDA
 10181                           fsr2l	equ	0xFD9
 10182                           status	equ	0xFD8
 10183                           
 10184                           	psect	temp
 10185  000051                     btemp:
 10186                           	opt stack 0
 10187  000051                     	ds	1
 10188  0000                     int$flags	set	btemp
 10189  0000                     wtemp6	set	btemp+1
 10190                           pclatu	equ	0xFFB
 10191                           pclath	equ	0xFFA
 10192                           tblptru	equ	0xFF8
 10193                           tblptrh	equ	0xFF7
 10194                           tblptrl	equ	0xFF6
 10195                           tablat	equ	0xFF5
 10196                           prodh	equ	0xFF4
 10197                           prodl	equ	0xFF3
 10198                           intcon	equ	0xFF2
 10199                           intcon2	equ	0xFF1
 10200                           indf0	equ	0xFEF
 10201                           postinc0	equ	0xFEE
 10202                           fsr0h	equ	0xFEA
 10203                           fsr0l	equ	0xFE9
 10204                           wreg	equ	0xFE8
 10205                           fsr1h	equ	0xFE2
 10206                           fsr1l	equ	0xFE1
 10207                           bsr	equ	0xFE0
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     73      80
    BANK0           128    100     108
    BANK1           256     48      56
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[6]), STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK1[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> value(BANK1[8]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___awdiv->___awmod
    ___fltol->___flmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    _calibra->___flmul
    ___fladd->___flmul
    _calcula->___flmul
    ___flmul->___awdiv
    ___fldiv->___flmul

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    _calibra->___fladd
    ___fladd->_calcula
    _calcula->___fldiv
    ___fldiv->___flmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   81394
                                             98 BANK0      2     2      0
                                             27 BANK1     21    21      0
                            ___fladd
                            ___fldiv
                            _calcula
                            _calibra
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
                   _seleccionarColor
                  _seleccionarEscala
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   47224
                                             86 BANK0     12     4      8
                                              0 BANK1     27    27      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   10140
                                             13 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4    9861
                                             13 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             45 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             45 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     607
                                             71 COMRAM     2     2      0
                                             22 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4907
                                             78 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _seleccionarEscala                                    1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _seleccionarColor                                     1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2    1037
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     308
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     242
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     110
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     529
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      88
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibra                                             16     4     12   15160
                                             78 BANK0     16     4     12
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     335
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     986
                                             45 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4522
                                             58 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                            _calcula (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcula                                             20    16      4    8846
                                             38 BANK0     20    16      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     656
                                             45 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5213
                                             59 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2835
                                             13 BANK0     25    17      8
                            ___flmul (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___fladd
     ___fldiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
     _calcula (ARG)
       ___fldiv
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___xxtofl
       _prepareForInterrupts
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
   ___fldiv
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
   _calcula
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___xxtofl
     _prepareForInterrupts
   _calibra
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts
   _seleccionarColor
   _seleccionarEscala
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      38       7       21.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     64      6C       5       84.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     49      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4      15        0.0%
DATA                 0      0      F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun May 13 05:28:38 2018

                 ___fldiv@aexp 00A5                   ___fldiv@bexp 00A4                   ___fldiv@sign 0099  
                  lcd_cmd_hf@x 002F                             l24 3380                             l25 3360  
                           l42 33E0                             l27 3368                             l44 33F0  
                           l28 3370                             l36 321E                             l53 346C  
                           l45 33D6                             l29 3378                             l37 31F6  
                           l54 346E                             l46 33DA                             l55 3476  
                           l56 3478                             l57 3480                             l58 3482  
                           l59 348A                   ___awdiv@sign 0039                             bsr 000FE0  
          ___wmul@multiplicand 0030                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                            l220 177E                            l213 252E  
                          l302 1014                            l230 06C8                            l223 1836  
                          l231 06E2                            l216 260C                            l224 19A0  
                          l240 0802                            l152 108A                            l233 0712  
                          l153 10A2                            l226 1A58                            l250 08F8  
                          l219 1862                            l251 0976                            l243 07FE  
                          l235 07F0                            l155 120A                            l244 082A  
                          l236 07DA                            l173 33B2                            l253 09A4  
                          l237 07A0                            l157 1372                            l182 3340  
                          l174 339A                            l510 29CA                            l246 0EC4  
                          l270 0C0A                            l254 09F0                            l183 3322  
                          l511 29BA                            l271 0BF0                            l255 0AD8  
                          l247 083E                            l159 14DA                            l192 2E6A  
                          l176 33A0                            l504 28FC                            l280 0D24  
                          l264 0B50                            l248 088C                            l521 2B60  
                          l185 3328                            l177 33A6                            l281 0D28  
                          l522 2B94                            l186 332E                            l178 33AC  
                          l506 291A                            l610 2804                            l290 0EFE  
                          l282 0D4C                            l274 0CDA                            l258 0A70  
                          l523 2BD2                            l187 3334                            l507 295C  
                          l611 283E                            l283 0E94                            l275 0C42  
                          l524 2C10                            l188 333A                            l516 29EE  
                          l508 298C                            l620 28C6                            l612 2866  
                          l292 0F28                            l284 0DAE                            l268 0BD4  
                          l517 29E2                            l621 28BA                            l293 0F54  
                          l277 0D00                            l614 28A2                            l286 0EBA  
                          l278 0CE6                            l551 2E9C                            l615 2892  
                          l295 0F80                            l287 0EA0                            l528 3450  
                          l560 2F20                            l704 31AC                            l608 27D8  
                          l480 3084                            l472 302C                            l296 0F8A  
                          l553 2F08                            l705 31A0                            l481 3092  
                          l473 303C                            l297 0FB6                            l289 0EDC  
                          l802 200E                            l562 2F48                            l554 2EF8  
                          l298 0FC0                            l811 2062                            l475 305A  
                          l900 26CE                            l804 201E                            l708 31D4  
                          l476 3052                            l492 316C                            l709 31E2  
                          l493 3176                            l485 3132                            l910 2768  
                          l902 2718                            l494 3184                            l486 313E  
                          l911 279A                            l903 2700                            l823 20EE  
                          l807 2042                            l559 2F2C                            l479 307A  
                          l840 21CC                            l824 20F6                            l816 2082  
                          l488 3154                            l833 2146                            l905 274A  
                          l825 20F8                            l809 2058                            l489 314C  
                          l850 22D6                            l842 21F4                            l834 2142  
                          l906 273E                            l851 22B8                            l843 22A2  
                          l819 20C8                            l860 2376                            l844 2252  
                          l668 34CA                            l861 23A0                            l845 227A  
                          l837 2186                            l781 1E50                            l862 23AC  
                          l838 2182                            l790 1F14                            l782 1E4C  
                          l694 30CA                            l863 23AE                            l847 22A0  
                          l871 1AF6                            l791 1F18                            l695 30BE  
                          l872 1AF2                            l784 1EAC                            l776 1E08  
                          l857 230E                            l873 1B06                            l785 1E70  
                          l777 1E04                            l890 1DA2                            l874 1B24  
                          l794 1F86                            l698 30FE                            l859 2352  
                          l891 1DC0                            l867 1AB6                            l795 1F4C  
                          l699 310C                            l868 1AB2                            l788 1F28  
                          l885 1D1C                            l869 1AC6                            l789 1F06  
                          l878 1CE4                            l798 1F70                            l887 1D60  
                          l879 1CC6                            l895 269A                            l799 1F74  
                          l888 1D7E                            l896 26AA                            l897 26C8  
                          l899 26DA                   __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000  
                          _lcd 0050                   ___awmod@sign 0033                            wreg 000FE8  
                 ___flmul@aexp 0081                   ___flmul@bexp 0086                    _sprintf$880 0100  
                 ___flmul@sign 0080                   ___flmul@temp 008B                   ___flmul@prod 0087  
                  lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031                   __CFG_LVP$OFF 000000  
                 ___fltol@exp1 0049                   __CFG_WDT$OFF 000000                           l5225 0A42  
                         l5217 09F0                           l4189 2C48                           l5245 0B54  
                         l5265 0BF0                           l5505 136A                           l5433 109A  
                         l5269 0C02                           l5541 14D2                           l5289 0CE6  
                         l5379 1010                           l5469 1202                           l4919 23A0  
                         STR_1 0691                           STR_2 06A3                           STR_3 06AD  
                         STR_4 06A3                           STR_5 06B1                           STR_6 06A3  
                         STR_7 06B5                           STR_8 06A3                           STR_9 06A9  
                         _GIEH 007F97                           _GIEL 007F96                           u5120 28CC  
                         u6000 0D0E                           _IPEN 007E87                           u5041 27BC  
                         u6010 0D1E                           u4340 1EDC                           u5061 27E8  
                         u4350 1EEC                           u5400 2360                           u4600 20D4  
                         u4520 2066                           u4360 1EEE                           u5410 2384  
                         u3650 3216                           u6210 125A                           u3660 323E  
                         u5500 2EBA                           u6140 0FC8                           u4710 1B12  
                         u4550 207E                           u4390 1F30                           u5190 29F4  
                         u6150 0FEA                           u6230 13C2                           u4800 1D6E  
                         u4720 1C88                           u5600 31B0                           u3657 320C  
                         u5505 2EB0                           u5370 230A                           u4810 1D8C  
                         u6170 1032                           u6250 1518                           u3667 3234  
                         u6307 137A                           u5540 2F32                           u4725 1C7E  
                         u6317 14B4                           u6190 10F2                           u6407 2FE0  
                         u6327 160A                           u4920 3158                           u6417 2FF4  
                         u6337 1624                           u4770 1D18                           u5570 30CE  
                         u6427 3008                           u6347 32F6                           u6267 10AA  
                         u4860 305E                           u5900 0A42                           u6437 3268  
                         u6357 2F76                           u6277 11E4                           u6447 34F4  
                         u6367 2F8C                           u6287 1212                           u5680 2754  
                         u5760 0778                           u6457 2D4A                           u6377 2FA2  
                         u6297 134C                           u6387 2FB8                           u5940 0B8C  
                         u5860 09B6                           u6397 2FCC                           u5870 0A02  
                         u5970 0C1A                           _TMR1 000FCE                   __CFG_PWRT$ON 000000  
          seleccionarColor@col 002E                           _main 1040                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0051                           prodh 000FF4  
                         prodl 000FF3                           start 00D8                  __CFG_IESO$OFF 000000  
              ___fldiv@new_exp 009E                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
                ___fltol@sign1 0048                __end_of___fladd 2114                          ?_main 0001  
              __end_of___fldiv 23CA                __end_of___awdiv 309C                __end_of___flneg 3462  
              __end_of___awmod 318E                __end_of___flmul 1DD6                __end_of___flsub 32D8  
              __end_of___fltol 2F5A                __end_of___lldiv 311E                ___awdiv@divisor 0036  
              __end_of___llmod 31F4                          i2l147 2AA4                ___awdiv@counter 0038  
                        _PORTB 000F81                          _PORTD 000F83                __end_of_calibra 2E7C  
              __end_of_calcula 2D66       __end_of_seleccionarColor 335C                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 3290  
              __end_of_lcd_lat 3502                __end_of_lcd_dwr 331E                __end_of_lcd_msg 3246  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers 0691                          _manda 3462  
                        _first 004F                          _scale 1634                __end_of_isdigit 34D2  
                        _value 0130                          main@a 0123                          main@i 012B  
                        main@r 011B                          main@v 011F                __end_of_low_isr 00D8  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                          wtemp6 0052                __end_of_sprintf 1040  
              __initialization 3402                   __end_of_main 1634                         ??_main 00E2  
                __activetblptr 000002           __size_of__tdiv_to_l_ 0132                         ?_manda 0001  
             ___llmod@dividend 002E                         ?_scale 008D               ___awdiv@dividend 0034  
                       _INT0IE 007F94                         _INT0IF 007F91                         i1l2379 0080  
                       i2l4001 2ADE                         i2l4003 2AE0                         _TMR1IE 007CE8  
                       _TMR1IF 007CF0                         _TMR1CS 007E69                         _TMR1IP 007CF8  
                       _TMR1ON 007E68               __end_of___xxtofl 27AC                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 0635               __end_of_lcd_init 3018               __end_of_high_isr 2B2C  
                       ___flge 2B2C               __end_of_lcd_putc 3396                      ??___fladd 00C2  
                       ___wmul 348E                      ??___fldiv 0095                      ??___awdiv 0038  
                    ??___flneg 0032                 __CFG_STVREN$ON 000000                      ??___awmod 0032  
                    ??___flmul 0044                      ??___flsub 0048                      ??___fltol 009A  
                    ??___lldiv 0036                      ??___llmod 0036                      ??_calibra 0048  
                    ??_calcula 00AA                         _fround 23CA  __size_of_prepareForInterrupts 000E  
                       clear_0 3408                         clear_1 3414                         clear_2 3420  
             ___awdiv@quotient 003A                ___awmod@divisor 0030                ___awmod@counter 0032  
                    ??_lcd_cmd 002F                      ??_lcd_lat 002E                      ??_lcd_dwr 002F  
                    ??_lcd_msg 0034                      ??_isdigit 002E                   __mediumconst 0000  
                    ??_low_isr 0019                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8              lcd_gotoxy@ADDRESS 0034                      ??_sprintf 00DE  
                   ___flge@ff1 002E                     ___flge@ff2 0032                   ___xxtofl@arg 0038  
                 ___xxtofl@exp 0037                   ___xxtofl@val 002E                     __accesstop 0080  
      __end_of__initialization 3426                __CFG_PBADEN$OFF 000000                     ___flneg@f1 002E  
                ___rparam_used 000001                     ___fltol@f1 0096                 __pcstackCOMRAM 0001  
                __end_of_manda 348E                  __end_of_scale 1A84                     __div_to_l_ 28DE  
                      ??_manda 002E                __div_to_l_@exp1 003B                __div_to_l_@cntr 003A  
                      ??_scale 0048                __div_to_l_@quot 0036                   sprintf@width 010C  
                   __pbssBANK0 00E4                     __pbssBANK1 0130                  __div_to_l_@f1 002E  
                __div_to_l_@f2 0032             __CFG_CCP2MX$PORTBE 000000                        ?___flge 002E  
                      ?___wmul 002E                        ?_fround 008D                        _T1CKPS0 007E6C  
                      _T1CKPS1 007E6D                        _INTEDG0 007F8E                     _lcd_cmd_hf 34D2  
                    ?___xxtofl 002E             calcula@elapsedTime 00AE              ?_seleccionarColor 0001  
                   _lcd_gotoxy 33CE             ??_seleccionarColor 002E                     _finishTime 00E4  
                    ?_lcd_init 0001                      ?_high_isr 0001                      ?_lcd_putc 0001  
            __end_of__npowers_ 0669                        __Hparam 0000                        __Lparam 0000  
              __size_of___flge 0120                        ___fladd 1DD6                        ___fldiv 2114  
                      ___awdiv 3018                        ___flneg 3434                        ___awmod 311E  
                      ___flmul 1A84                        ___flsub 3290                        ___fltol 2E7C  
                      ___lldiv 309C                __size_of___wmul 0026                        ___llmod 318E  
                   _fround$877 0095                     _fround$878 0091                   __psmallconst 0600  
                      _calibra 2D66                        _calcula 2C4C                        __pcinit 3402  
              __size_of_fround 0292                        __ramtop 0600                        __ptext0 1040  
                      __ptext1 06BA                        __ptext2 1634                        __ptext3 34B4  
                      __ptext4 23CA                        __ptext5 311E                        __ptext6 3018  
                      __ptext7 27AC                        __ptext8 28DE                        __ptext9 348E  
                      _lcd_cmd 3246                        _lcd_lat 34EC                        _lcd_dwr 32D8  
                      _lcd_msg 31F4                      _T1CONbits 000FCD                    ?__div_to_l_ 002E  
                      _dpowers 0669                        _isdigit 34B4                     ??___xxtofl 0032  
             ___awmod@dividend 002E                        _low_isr 0018                        _sprintf 06BA  
                   ??_lcd_init 0031                     ??_high_isr 0001                 __pintcode_body 2A06  
                   ??_lcd_putc 0031           end_of_initialization 3426                  __Lmediumconst 0000  
                      int_func 2A06                ___lldiv@divisor 0032                ___lldiv@counter 003A  
                      postinc0 000FEE                        postinc2 000FDE                 __tdiv_to_l_@f1 002E  
               __tdiv_to_l_@f2 0032                  ??__tdiv_to_l_ 0036                    ___fladd@grs 00CD  
                  ?_lcd_cmd_hf 0001                  ___xxtofl@sign 0036                    ?_lcd_gotoxy 0031  
                  ___fldiv@grs 00A0                    ___fldiv@rem 009A   __end_of_prepareForInterrupts 3510  
                  ___flmul@grs 0082                     main@brillo 0127             seleccionarEscala@a 002E  
          __size_of__div_to_l_ 0128                 __end_of___flge 2C4C                 __end_of___wmul 34B4  
               __end_of_fround 265C                   calibra@valor 00CE            start_initialization 3402  
          __end_of__tdiv_to_l_ 28DE                high_isr@counter 0017                ___llmod@divisor 0032  
              ___llmod@counter 0036            __size_of_lcd_cmd_hf 001A                       ??___flge 0036  
          __size_of_lcd_gotoxy 0034                       ??___wmul 0032               __CFG_LPT1OSC$OFF 000000  
                     ??_fround 0048                  sprintf@tmpval 010E                      ___fladd@a 00BE  
                    ___fladd@b 00BA                     fround@prec 0099                      ___fldiv@a 0091  
                    ___fldiv@b 008D                      ___flmul@a 0040                      ___flmul@b 003C  
                  __pbssCOMRAM 004A                      ___flsub@a 00D2                      ___flsub@b 00CE  
                __pcstackBANK0 0080                  __pcstackBANK1 0100              __size_of___xxtofl 0150  
            __size_of_lcd_init 00BE              __size_of_high_isr 2B24                    sprintf@flag 010A  
            __size_of_lcd_putc 003A                    sprintf@fval 0114                    sprintf@prec 0118  
    __size_of_seleccionarColor 003E                      __pintcode 0008                       ?___fladd 00BA  
                     ?___fldiv 008D                       ?___awdiv 0034                       ?___flneg 002E  
                     ?___awmod 002E                       ?___flmul 003C                       ?___flsub 00CE  
                     ?___fltol 0096                       ?___lldiv 002E                       ?___llmod 002E  
                    __npowers_ 0635                       ?_calibra 00CE                       ?_calcula 00A6  
                  __pintcodelo 0018           _prepareForInterrupts 3502                    __tdiv_to_l_ 27AC  
                     ?_lcd_cmd 0001                       ?_lcd_lat 0001                       ?_lcd_dwr 0001  
                     ?_lcd_msg 0032                   ??__div_to_l_ 0036                    __smallconst 0600  
                     ?_isdigit 0001                      calibra@fd 00D2                      calibra@fw 00D6  
                     ?_low_isr 0001                      _scale$879 0091                 __size_of_manda 002C  
                     ?_sprintf 00D6                 __size_of_scale 0450                 ___wmul@product 0032  
            _seleccionarEscala 3396             ?_seleccionarEscala 0001             __end_of__div_to_l_ 2A06  
             __CFG_WDTPS$32768 000000            ??_seleccionarEscala 002E          ?_prepareForInterrupts 0001  
            ___wmul@multiplier 002E                      _startTime 00E8                      _triggered 004E  
                 ??_lcd_cmd_hf 002F                      lcd_putc@c 0031                   ??_lcd_gotoxy 0032  
                    manda@dato 002E                    calibra@temp 00DA      __end_of_seleccionarEscala 33CE  
                  calcula@freq 00B2                    calcula@temp 00B6                       __Hrparam 0000  
                     __Lrparam 0000             __end_of_lcd_cmd_hf 34EC             __end_of_lcd_gotoxy 3402  
             __size_of___fladd 033E               __size_of___fldiv 02B6               __size_of___awdiv 0084  
             __size_of___flneg 002E               __size_of___awmod 0070               __size_of___flmul 0352  
             __size_of___flsub 0048               __size_of___fltol 00DE               __size_of___lldiv 0082  
             __size_of___llmod 0066               __size_of_calibra 0116               __size_of_calcula 011A  
                  _isdigit$524 002F               __size_of_lcd_cmd 004A               __size_of_lcd_lat 0016  
             __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052                     sprintf@exp 0112  
                   sprintf@val 0106                       ___xxtofl 265C               __size_of_isdigit 001E  
             __size_of_low_isr 00C0                       __ptext10 318E                       __ptext11 309C  
                     __ptext20 34D2                       __ptext12 2E7C                       __ptext21 33CE  
                     __ptext13 3290                       __ptext30 3502                       __ptext22 3246  
                     __ptext14 3396                       __ptext31 265C                       __ptext23 3462  
                     __ptext15 331E                       __ptext32 1A84                       __ptext24 34EC  
                     __ptext16 31F4                       __ptext33 2114                       __ptext25 2D66  
                     __ptext17 335C                       __ptext26 3434                       __ptext18 32D8  
                     __ptext27 2B2C                       __ptext19 2F5A                       __ptext28 1DD6  
                     __ptext29 2C4C                       __powers_ 0601                       _lcd_init 2F5A  
                     _high_isr 0008                       _lcd_putc 335C               __size_of_sprintf 0986  
                __size_of_main 05F4               _seleccionarColor 331E         ??_prepareForInterrupts 002E  
                     int$flags 0051                       lcd_cmd@x 0030                       lcd_dwr@x 0030  
                     lcd_msg@c 0032                       main@freq 012C                       isdigit@c 0030  
                     scale@scl 0095                       intlevel1 0000                       intlevel2 0000  
   __size_of_seleccionarEscala 0038                      sprintf@ap 0104               __tdiv_to_l_@exp1 003E  
             __tdiv_to_l_@cntr 003D                      sprintf@sp 00D6               __tdiv_to_l_@quot 0039  
             ___lldiv@dividend 002E                  _overflowCount 004A                   ?__tdiv_to_l_ 002E  
                     sprintf@c 011A                       sprintf@f 00D8               ___lldiv@quotient 0036  
                ___fladd@signs 00CA                   ___fladd@aexp 00CB                   ___fladd@bexp 00CC  
