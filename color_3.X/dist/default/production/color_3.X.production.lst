

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun May 13 05:03:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     __powers_:
    94                           	opt stack 0
    95  000601  0000               	dw	0
    96  000603  3F80               	dw	16256
    97  000605  0000               	dw	0
    98  000607  4120               	dw	16672
    99  000609  0000               	dw	0
   100  00060B  42C8               	dw	17096
   101  00060D  0000               	dw	0
   102  00060F  447A               	dw	17530
   103  000611  4000               	dw	16384
   104  000613  461C               	dw	17948
   105  000615  5000               	dw	20480
   106  000617  47C3               	dw	18371
   107  000619  2400               	dw	9216
   108  00061B  4974               	dw	18804
   109  00061D  9680               	dw	38528
   110  00061F  4B18               	dw	19224
   111  000621  BC20               	dw	48160
   112  000623  4CBE               	dw	19646
   113  000625  6B28               	dw	27432
   114  000627  4E6E               	dw	20078
   115  000629  02F9               	dw	761
   116  00062B  5015               	dw	20501
   117  00062D  78EC               	dw	30956
   118  00062F  60AD               	dw	24749
   119  000631  F2CA               	dw	62154
   120  000633  7149               	dw	29001
   121  000635                     __end_of__powers_:
   122                           	opt stack 0
   123  000635                     __npowers_:
   124                           	opt stack 0
   125  000635  0000               	dw	0
   126  000637  3F80               	dw	16256
   127  000639  CCCD               	dw	52429
   128  00063B  3DCC               	dw	15820
   129  00063D  D70A               	dw	55050
   130  00063F  3C23               	dw	15395
   131  000641  126F               	dw	4719
   132  000643  3A83               	dw	14979
   133  000645  B717               	dw	46871
   134  000647  38D1               	dw	14545
   135  000649  C5AC               	dw	50604
   136  00064B  3727               	dw	14119
   137  00064D  37BD               	dw	14269
   138  00064F  3586               	dw	13702
   139  000651  BF95               	dw	49045
   140  000653  33D6               	dw	13270
   141  000655  CC77               	dw	52343
   142  000657  322B               	dw	12843
   143  000659  705F               	dw	28767
   144  00065B  3089               	dw	12425
   145  00065D  E6FF               	dw	59135
   146  00065F  2EDB               	dw	11995
   147  000661  E508               	dw	58632
   148  000663  1E3C               	dw	7740
   149  000665  4260               	dw	16992
   150  000667  0DA2               	dw	3490
   151  000669                     __end_of__npowers_:
   152                           	opt stack 0
   153  000669                     _dpowers:
   154                           	opt stack 0
   155  000669  0001               	dw	1
   156  00066B  0000               	dw	0
   157  00066D  000A               	dw	10
   158  00066F  0000               	dw	0
   159  000671  0064               	dw	100
   160  000673  0000               	dw	0
   161  000675  03E8               	dw	1000
   162  000677  0000               	dw	0
   163  000679  2710               	dw	10000
   164  00067B  0000               	dw	0
   165  00067D  86A0               	dw	34464
   166  00067F  0001               	dw	1
   167  000681  4240               	dw	16960
   168  000683  000F               	dw	15
   169  000685  9680               	dw	38528
   170  000687  0098               	dw	152
   171  000689  E100               	dw	57600
   172  00068B  05F5               	dw	1525
   173  00068D  CA00               	dw	51712
   174  00068F  3B9A               	dw	15258
   175  000691                     __end_of_dpowers:
   176                           	opt stack 0
   177  0000                     _TMR1	set	4046
   178  0000                     _T1CONbits	set	4045
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTD	set	3971
   181  0000                     _INTEDG0	set	32654
   182  0000                     _INT0IE	set	32660
   183  0000                     _GIEL	set	32662
   184  0000                     _GIEH	set	32663
   185  0000                     _IPEN	set	32391
   186  0000                     _TMR1IE	set	31976
   187  0000                     _TMR1IP	set	31992
   188  0000                     _TMR1ON	set	32360
   189  0000                     _TMR1CS	set	32361
   190  0000                     _T1CKPS0	set	32364
   191  0000                     _T1CKPS1	set	32365
   192  0000                     _INT0IF	set	32657
   193  0000                     _TMR1IF	set	31984
   194  000691                     STR_1:
   195  000691  44                 	db	68	;'D'
   196  000692  65                 	db	101	;'e'
   197  000693  74                 	db	116	;'t'
   198  000694  65                 	db	101	;'e'
   199  000695  63                 	db	99	;'c'
   200  000696  74                 	db	116	;'t'
   201  000697  6F                 	db	111	;'o'
   202  000698  72                 	db	114	;'r'
   203  000699  20                 	db	32
   204  00069A  64                 	db	100	;'d'
   205  00069B  65                 	db	101	;'e'
   206  00069C  20                 	db	32
   207  00069D  63                 	db	99	;'c'
   208  00069E  6F                 	db	111	;'o'
   209  00069F  6C                 	db	108	;'l'
   210  0006A0  6F                 	db	111	;'o'
   211  0006A1  72                 	db	114	;'r'
   212  0006A2  00                 	db	0
   213  0006A3                     STR_2:
   214  0006A3  25                 	db	37
   215  0006A4  35                 	db	53	;'5'
   216  0006A5  2E                 	db	46
   217  0006A6  33                 	db	51	;'3'
   218  0006A7  66                 	db	102	;'f'
   219  0006A8  00                 	db	0
   220  0006A9                     STR_9:
   221  0006A9  41                 	db	65	;'A'
   222  0006AA  3D                 	db	61	;'='
   223  0006AB  20                 	db	32
   224  0006AC  00                 	db	0
   225  0006AD                     STR_3:
   226  0006AD  42                 	db	66	;'B'
   227  0006AE  3D                 	db	61	;'='
   228  0006AF  20                 	db	32
   229  0006B0  00                 	db	0
   230  0006B1                     STR_5:
   231  0006B1  52                 	db	82	;'R'
   232  0006B2  3D                 	db	61	;'='
   233  0006B3  20                 	db	32
   234  0006B4  00                 	db	0
   235  0006B5                     STR_7:
   236  0006B5  56                 	db	86	;'V'
   237  0006B6  3D                 	db	61	;'='
   238  0006B7  20                 	db	32
   239  0006B8  00                 	db	0
   240  0000                     
   241                           ; #config settings
   242  0006B9  00                 	db	0	; dummy byte at the end
   243  0000                     
   244                           	psect	cinit
   245  0033B6                     __pcinit:
   246                           	opt stack 0
   247  0033B6                     start_initialization:
   248                           	opt stack 0
   249  0033B6                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to BANK1 (8 bytes)
   253  0033B6  EE01  F030         	lfsr	0,__pbssBANK1
   254  0033BA  0E08               	movlw	8
   255  0033BC                     clear_0:
   256  0033BC  6AEE               	clrf	postinc0,c
   257  0033BE  06E8               	decf	wreg,f,c
   258  0033C0  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to BANK0 (8 bytes)
   261  0033C2  EE00  F0E4         	lfsr	0,__pbssBANK0
   262  0033C6  0E08               	movlw	8
   263  0033C8                     clear_1:
   264  0033C8  6AEE               	clrf	postinc0,c
   265  0033CA  06E8               	decf	wreg,f,c
   266  0033CC  E1FD               	bnz	clear_1
   267                           
   268                           ; Clear objects allocated to COMRAM (7 bytes)
   269  0033CE  EE00  F04A         	lfsr	0,__pbssCOMRAM
   270  0033D2  0E07               	movlw	7
   271  0033D4                     clear_2:
   272  0033D4  6AEE               	clrf	postinc0,c
   273  0033D6  06E8               	decf	wreg,f,c
   274  0033D8  E1FD               	bnz	clear_2
   275  0033DA                     end_of_initialization:
   276                           	opt stack 0
   277  0033DA                     __end_of__initialization:
   278                           	opt stack 0
   279  0033DA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   280  0033DC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   281  0033DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   282  0033E0  6EF8               	movwf	tblptru,c
   283  0033E2  0100               	movlb	0
   284  0033E4  EF20  F008         	goto	_main	;jump to C main() function
   285                           tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           
   289                           	psect	bssCOMRAM
   290  00004A                     __pbssCOMRAM:
   291                           	opt stack 0
   292  00004A                     _overflowCount:
   293                           	opt stack 0
   294  00004A                     	ds	4
   295  00004E                     _triggered:
   296                           	opt stack 0
   297  00004E                     	ds	1
   298  00004F                     _first:
   299                           	opt stack 0
   300  00004F                     	ds	1
   301  000050                     _lcd:
   302                           	opt stack 0
   303  000050                     	ds	1
   304                           tblptru	equ	0xFF8
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK0
   309  0000E4                     __pbssBANK0:
   310                           	opt stack 0
   311  0000E4                     _finishTime:
   312                           	opt stack 0
   313  0000E4                     	ds	4
   314  0000E8                     _startTime:
   315                           	opt stack 0
   316  0000E8                     	ds	4
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK1
   322  000130                     __pbssBANK1:
   323                           	opt stack 0
   324  000130                     _value:
   325                           	opt stack 0
   326  000130                     	ds	8
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackBANK1
   332  000100                     __pcstackBANK1:
   333                           	opt stack 0
   334  000100                     _sprintf$879:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x0
   338  000100                     	ds	4
   339  000104                     sprintf@ap:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x4
   343  000104                     	ds	2
   344  000106                     sprintf@val:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x6
   348  000106                     	ds	4
   349  00010A                     sprintf@flag:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0xA
   353  00010A                     	ds	2
   354  00010C                     sprintf@width:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0xC
   358  00010C                     	ds	2
   359  00010E                     sprintf@tmpval:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0xE
   363  00010E                     	ds	4
   364  000112                     sprintf@exp:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x12
   368  000112                     	ds	2
   369  000114                     sprintf@fval:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x14
   373  000114                     	ds	4
   374  000118                     sprintf@prec:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x18
   378  000118                     	ds	2
   379  00011A                     sprintf@c:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x1A
   383  00011A                     	ds	1
   384  00011B                     main@r:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0x1B
   388  00011B                     	ds	4
   389  00011F                     main@v:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x1F
   393  00011F                     	ds	4
   394  000123                     main@a:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x23
   398  000123                     	ds	4
   399  000127                     main@brillo:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x27
   403  000127                     	ds	4
   404  00012B                     main@i:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2B
   408  00012B                     	ds	1
   409  00012C                     main@freq:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x2C
   413  00012C                     	ds	4
   414                           tblptru	equ	0xFF8
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418                           	psect	cstackBANK0
   419  000080                     __pcstackBANK0:
   420                           	opt stack 0
   421  000080                     ___flmul@sign:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x0
   425  000080                     	ds	1
   426  000081                     ___flmul@aexp:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x1
   430  000081                     	ds	1
   431  000082                     ___flmul@grs:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x2
   435  000082                     	ds	4
   436  000086                     ___flmul@bexp:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x6
   440  000086                     	ds	1
   441  000087                     ___flmul@prod:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x7
   445  000087                     	ds	4
   446  00008B                     ___flmul@temp:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xB
   450  00008B                     	ds	2
   451  00008D                     ?___fldiv:
   452                           	opt stack 0
   453  00008D                     ?_fround:
   454                           	opt stack 0
   455  00008D                     ?_scale:
   456                           	opt stack 0
   457  00008D                     ___fldiv@b:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0xD
   461  00008D                     	ds	4
   462  000091                     ___fldiv@a:
   463                           	opt stack 0
   464  000091                     _fround$877:
   465                           	opt stack 0
   466  000091                     _scale$878:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x11
   470  000091                     	ds	4
   471  000095                     ??___fldiv:
   472  000095                     scale@scl:
   473                           	opt stack 0
   474  000095                     _fround$876:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x15
   478  000095                     	ds	1
   479  000096                     ?___fltol:
   480                           	opt stack 0
   481  000096                     ___fltol@f1:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x16
   485  000096                     	ds	3
   486  000099                     fround@prec:
   487                           	opt stack 0
   488  000099                     ___fldiv@sign:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  000099                     	ds	1
   493  00009A                     ??___fltol:
   494  00009A                     ___fldiv@rem:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x1A
   498  00009A                     	ds	4
   499  00009E                     ___fldiv@new_exp:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x1E
   503  00009E                     	ds	2
   504  0000A0                     ___fldiv@grs:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x20
   508  0000A0                     	ds	4
   509  0000A4                     ___fldiv@bexp:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x24
   513  0000A4                     	ds	1
   514  0000A5                     ___fldiv@aexp:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x25
   518  0000A5                     	ds	1
   519  0000A6                     ?_calcula:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x26
   523  0000A6                     	ds	4
   524  0000AA                     ??_calcula:
   525                           
   526                           ; 1 bytes @ 0x2A
   527  0000AA                     	ds	4
   528  0000AE                     calcula@elapsedTime:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x2E
   532  0000AE                     	ds	4
   533  0000B2                     calcula@freq:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x32
   537  0000B2                     	ds	4
   538  0000B6                     calcula@temp:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x36
   542  0000B6                     	ds	4
   543  0000BA                     ?___fladd:
   544                           	opt stack 0
   545  0000BA                     ___fladd@b:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x3A
   549  0000BA                     	ds	4
   550  0000BE                     ___fladd@a:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x3E
   554  0000BE                     	ds	4
   555  0000C2                     ??___fladd:
   556                           
   557                           ; 1 bytes @ 0x42
   558  0000C2                     	ds	8
   559  0000CA                     ___fladd@signs:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x4A
   563  0000CA                     	ds	1
   564  0000CB                     ___fladd@aexp:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x4B
   568  0000CB                     	ds	1
   569  0000CC                     ___fladd@bexp:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x4C
   573  0000CC                     	ds	1
   574  0000CD                     ___fladd@grs:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x4D
   578  0000CD                     	ds	1
   579  0000CE                     ?_calibra:
   580                           	opt stack 0
   581  0000CE                     ?___flsub:
   582                           	opt stack 0
   583  0000CE                     calibra@valor:
   584                           	opt stack 0
   585  0000CE                     ___flsub@b:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x4E
   589  0000CE                     	ds	4
   590  0000D2                     calibra@fd:
   591                           	opt stack 0
   592  0000D2                     ___flsub@a:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x52
   596  0000D2                     	ds	4
   597  0000D6                     ?_sprintf:
   598                           	opt stack 0
   599  0000D6                     sprintf@sp:
   600                           	opt stack 0
   601  0000D6                     calibra@fw:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x56
   605  0000D6                     	ds	2
   606  0000D8                     sprintf@f:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x58
   610  0000D8                     	ds	6
   611  0000DE                     ??_sprintf:
   612                           
   613                           ; 1 bytes @ 0x5E
   614  0000DE                     	ds	4
   615  0000E2                     ??_main:
   616                           
   617                           ; 1 bytes @ 0x62
   618  0000E2                     	ds	2
   619                           tblptru	equ	0xFF8
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           
   623                           	psect	cstackCOMRAM
   624  000001                     __pcstackCOMRAM:
   625                           	opt stack 0
   626  000001                     ??_high_isr:
   627  000001                     
   628                           ; 1 bytes @ 0x0
   629  000001                     	ds	22
   630  000017                     high_isr@counter:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x16
   634  000017                     	ds	2
   635  000019                     ??_low_isr:
   636                           
   637                           ; 1 bytes @ 0x18
   638  000019                     	ds	21
   639  00002E                     ??_isdigit:
   640  00002E                     ??_lcd_lat:
   641  00002E                     ?___wmul:
   642                           	opt stack 0
   643  00002E                     ?___awmod:
   644                           	opt stack 0
   645  00002E                     ?__tdiv_to_l_:
   646                           	opt stack 0
   647  00002E                     ?__div_to_l_:
   648                           	opt stack 0
   649  00002E                     ?___flneg:
   650                           	opt stack 0
   651  00002E                     ?___lldiv:
   652                           	opt stack 0
   653  00002E                     ?___llmod:
   654                           	opt stack 0
   655  00002E                     ?___xxtofl:
   656                           	opt stack 0
   657  00002E                     manda@dato:
   658                           	opt stack 0
   659  00002E                     seleccionarEscala@a:
   660                           	opt stack 0
   661  00002E                     seleccionarColor@col:
   662                           	opt stack 0
   663  00002E                     ___wmul@multiplier:
   664                           	opt stack 0
   665  00002E                     ___awmod@dividend:
   666                           	opt stack 0
   667  00002E                     __div_to_l_@f1:
   668                           	opt stack 0
   669  00002E                     ___flge@ff1:
   670                           	opt stack 0
   671  00002E                     ___flneg@f1:
   672                           	opt stack 0
   673  00002E                     __tdiv_to_l_@f1:
   674                           	opt stack 0
   675  00002E                     ___lldiv@dividend:
   676                           	opt stack 0
   677  00002E                     ___llmod@dividend:
   678                           	opt stack 0
   679  00002E                     ___xxtofl@val:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     ??_lcd_dwr:
   685  00002F                     ??_lcd_cmd:
   686  00002F                     lcd_cmd_hf@x:
   687                           	opt stack 0
   688  00002F                     _isdigit$523:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x2E
   692  00002F                     	ds	1
   693  000030                     lcd_cmd@x:
   694                           	opt stack 0
   695  000030                     lcd_dwr@x:
   696                           	opt stack 0
   697  000030                     isdigit@c:
   698                           	opt stack 0
   699  000030                     ___wmul@multiplicand:
   700                           	opt stack 0
   701  000030                     ___awmod@divisor:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x2F
   705  000030                     	ds	1
   706  000031                     ??_lcd_init:
   707  000031                     lcd_putc@c:
   708                           	opt stack 0
   709  000031                     lcd_gotoxy@y:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x30
   713  000031                     	ds	1
   714  000032                     ??_lcd_gotoxy:
   715  000032                     ??___xxtofl:
   716  000032                     ___awmod@counter:
   717                           	opt stack 0
   718  000032                     lcd_msg@c:
   719                           	opt stack 0
   720  000032                     ___wmul@product:
   721                           	opt stack 0
   722  000032                     __div_to_l_@f2:
   723                           	opt stack 0
   724  000032                     ___flge@ff2:
   725                           	opt stack 0
   726  000032                     __tdiv_to_l_@f2:
   727                           	opt stack 0
   728  000032                     ___lldiv@divisor:
   729                           	opt stack 0
   730  000032                     ___llmod@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x31
   734  000032                     	ds	1
   735  000033                     lcd_gotoxy@x:
   736                           	opt stack 0
   737  000033                     ___awmod@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x32
   741  000033                     	ds	1
   742  000034                     ?___awdiv:
   743                           	opt stack 0
   744  000034                     lcd_gotoxy@ADDRESS:
   745                           	opt stack 0
   746  000034                     ___awdiv@dividend:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x33
   750  000034                     	ds	2
   751  000036                     ??__tdiv_to_l_:
   752  000036                     ??___flge:
   753  000036                     ___llmod@counter:
   754                           	opt stack 0
   755  000036                     ___xxtofl@sign:
   756                           	opt stack 0
   757  000036                     ___awdiv@divisor:
   758                           	opt stack 0
   759  000036                     __div_to_l_@quot:
   760                           	opt stack 0
   761  000036                     ___lldiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x35
   765  000036                     	ds	1
   766  000037                     ___xxtofl@exp:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x36
   770  000037                     	ds	1
   771  000038                     ___awdiv@counter:
   772                           	opt stack 0
   773  000038                     ___xxtofl@arg:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x37
   777  000038                     	ds	1
   778  000039                     ___awdiv@sign:
   779                           	opt stack 0
   780  000039                     __tdiv_to_l_@quot:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x38
   784  000039                     	ds	1
   785  00003A                     __div_to_l_@cntr:
   786                           	opt stack 0
   787  00003A                     ___lldiv@counter:
   788                           	opt stack 0
   789  00003A                     ___awdiv@quotient:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x39
   793  00003A                     	ds	1
   794  00003B                     __div_to_l_@exp1:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3A
   798  00003B                     	ds	1
   799  00003C                     ?___flmul:
   800                           	opt stack 0
   801  00003C                     ___flmul@b:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x3B
   805  00003C                     	ds	1
   806  00003D                     __tdiv_to_l_@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x3C
   810  00003D                     	ds	1
   811  00003E                     __tdiv_to_l_@exp1:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x3D
   815  00003E                     	ds	2
   816  000040                     ___flmul@a:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x3F
   820  000040                     	ds	4
   821  000044                     ??___flmul:
   822                           
   823                           ; 1 bytes @ 0x43
   824  000044                     	ds	4
   825  000048                     ___fltol@sign1:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x47
   829  000048                     	ds	1
   830  000049                     ___fltol@exp1:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x48
   834  000049                     	ds	1
   835                           tblptru	equ	0xFF8
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 169 in file "color_3.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  freq            4   44[BANK1 ] float 
   849 ;;  brillo          4   39[BANK1 ] float 
   850 ;;  a               4   35[BANK1 ] float 
   851 ;;  v               4   31[BANK1 ] float 
   852 ;;  r               4   27[BANK1 ] float 
   853 ;;  i               1   43[BANK1 ] unsigned char 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   863 ;;      Params:         0       0       0       0       0       0       0
   864 ;;      Locals:         0       0      21       0       0       0       0
   865 ;;      Temps:          0       2       0       0       0       0       0
   866 ;;      Totals:         0       2      21       0       0       0       0
   867 ;;Total ram usage:       23 bytes
   868 ;; Hardware stack levels required when called:    6
   869 ;; This function calls:
   870 ;;		___fladd
   871 ;;		___fldiv
   872 ;;		_calcula
   873 ;;		_calibra
   874 ;;		_lcd_gotoxy
   875 ;;		_lcd_init
   876 ;;		_lcd_msg
   877 ;;		_prepareForInterrupts
   878 ;;		_seleccionarColor
   879 ;;		_seleccionarEscala
   880 ;;		_sprintf
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text0
   887  001040                     __ptext0:
   888                           	opt stack 0
   889  001040                     _main:
   890                           	opt stack 25
   891                           
   892                           ;color_3.c: 171: char i;
   893                           ;color_3.c: 172: float freq=0.0;
   894                           
   895                           ;incstack = 0
   896  001040  0E00               	movlw	0
   897  001042  0101               	movlb	1	; () banked
   898  001044  6F2C               	movwf	main@freq& (0+255),b
   899  001046  0E00               	movlw	0
   900  001048  6F2D               	movwf	(main@freq+1)& (0+255),b
   901  00104A  0E00               	movlw	0
   902  00104C  6F2E               	movwf	(main@freq+2)& (0+255),b
   903  00104E  0E00               	movlw	0
   904  001050  6F2F               	movwf	(main@freq+3)& (0+255),b
   905                           
   906                           ; BSR set to: 1
   907                           ;color_3.c: 173: float r,v,a,brillo;
   908                           ;color_3.c: 175: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
   909  001052  9695               	bcf	3989,3,c	;volatile
   910                           
   911                           ; BSR set to: 1
   912                           ;color_3.c: 176: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
   913  001054  9495               	bcf	3989,2,c	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;color_3.c: 177: (*(&(*(&PORTD + 0x12))) &=~ (1<<(1)));
   917  001056  9295               	bcf	3989,1,c	;volatile
   918                           
   919                           ; BSR set to: 1
   920                           ;color_3.c: 178: (*(&(*(&PORTD + 0x12))) &=~ (1<<(0)));
   921  001058  9095               	bcf	3989,0,c	;volatile
   922                           
   923                           ; BSR set to: 1
   924                           ;color_3.c: 179: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
   925  00105A  9895               	bcf	3989,4,c	;volatile
   926                           
   927                           ; BSR set to: 1
   928                           ;color_3.c: 181: lcd_init();
   929  00105C  EC87  F017         	call	_lcd_init	;wreg free
   930                           
   931                           ;color_3.c: 182: lcd_msg("Detector de color");
   932  001060  0E91               	movlw	low STR_1
   933  001062  6E32               	movwf	lcd_msg@c,c
   934  001064  0E06               	movlw	high STR_1
   935  001066  6E33               	movwf	lcd_msg@c+1,c
   936  001068  ECD4  F018         	call	_lcd_msg	;wreg free
   937                           
   938                           ;color_3.c: 189: T1CONbits.RD16 = 1;
   939  00106C  8ECD               	bsf	4045,7,c	;volatile
   940                           
   941                           ;color_3.c: 190: T1CKPS1 = 0;
   942  00106E  9ACD               	bcf	4045,5,c	;volatile
   943                           
   944                           ;color_3.c: 191: T1CKPS0 = 0;
   945  001070  98CD               	bcf	4045,4,c	;volatile
   946                           
   947                           ;color_3.c: 192: TMR1CS = 0;
   948  001072  92CD               	bcf	4045,1,c	;volatile
   949                           
   950                           ;color_3.c: 193: TMR1ON = 1;
   951  001074  80CD               	bsf	4045,0,c	;volatile
   952                           
   953                           ;color_3.c: 194: TMR1IP = 0;
   954  001076  909F               	bcf	3999,0,c	;volatile
   955                           
   956                           ;color_3.c: 195: TMR1IE = 1;
   957  001078  809D               	bsf	3997,0,c	;volatile
   958                           
   959                           ;color_3.c: 197: prepareForInterrupts ();
   960  00107A  EC5B  F01A         	call	_prepareForInterrupts	;wreg free
   961                           
   962                           ;color_3.c: 201: IPEN = 1;
   963  00107E  8ED0               	bsf	4048,7,c	;volatile
   964                           
   965                           ;color_3.c: 202: GIEH = 1;
   966  001080  8EF2               	bsf	intcon,7,c	;volatile
   967                           
   968                           ;color_3.c: 203: GIEL = 1;
   969  001082  8CF2               	bsf	intcon,6,c	;volatile
   970                           
   971                           ;color_3.c: 211: seleccionarEscala(baja);
   972  001084  0E02               	movlw	2
   973  001086  ECA5  F019         	call	_seleccionarEscala
   974  00108A                     
   975                           ;color_3.c: 216: {
   976                           ;color_3.c: 218: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
   977  00108A  0E10               	movlw	16
   978  00108C  1A8C               	xorwf	3980,f,c	;volatile
   979                           
   980                           ;color_3.c: 219: seleccionarColor(sf);
   981  00108E  0E02               	movlw	2
   982  001090  EC69  F019         	call	_seleccionarColor
   983                           
   984                           ;color_3.c: 220: for (i = 0 ;i < 30; i++)
   985  001094  0E00               	movlw	0
   986  001096  0101               	movlb	1	; () banked
   987  001098  6F2B               	movwf	main@i& (0+255),b
   988  00109A                     l5413:
   989                           
   990                           ; BSR set to: 1
   991  00109A  0E1D               	movlw	29
   992  00109C  652B               	cpfsgt	main@i& (0+255),b
   993  00109E  D001               	goto	l153
   994  0010A0  D028               	goto	u6160
   995  0010A2                     l153:
   996                           
   997                           ; BSR set to: 1
   998                           ;color_3.c: 221: {
   999                           ;color_3.c: 222: _delay((unsigned long)((10)*(16000000/4000.0)));
  1000                           
  1001                           ; BSR set to: 1
  1002  0010A2  0E34               	movlw	52
  1003  0010A4  0100               	movlb	0	; () banked
  1004  0010A6  6FE2               	movwf	??_main& (0+255),b
  1005  0010A8  0EF1               	movlw	241
  1006  0010AA                     u6237:
  1007  0010AA  2EE8               	decfsz	wreg,f,c
  1008  0010AC  D7FE               	bra	u6237
  1009  0010AE  2FE2               	decfsz	??_main& (0+255),f,b
  1010  0010B0  D7FC               	bra	u6237
  1011  0010B2  D000               	nop2	
  1012                           
  1013                           ;color_3.c: 223: freq+= calcula();
  1014  0010B4  C12C  F0BA         	movff	main@freq,___fladd@b
  1015  0010B8  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1016  0010BC  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1017  0010C0  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1018  0010C4  EC26  F016         	call	_calcula	;wreg free
  1019  0010C8  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1020  0010CC  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1021  0010D0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1022  0010D4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1023  0010D8  ECEB  F00E         	call	___fladd	;wreg free
  1024  0010DC  C0BA  F12C         	movff	?___fladd,main@freq
  1025  0010E0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1026  0010E4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1027  0010E8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1028  0010EC  0101               	movlb	1	; () banked
  1029  0010EE  2B2B               	incf	main@i& (0+255),f,b
  1030  0010F0  D7D4               	goto	l5413
  1031  0010F2                     u6160:
  1032                           
  1033                           ; BSR set to: 1
  1034                           ;color_3.c: 224: }
  1035                           ;color_3.c: 225: freq/=30;
  1036                           
  1037                           ; BSR set to: 1
  1038  0010F2  C12C  F08D         	movff	main@freq,___fldiv@b
  1039  0010F6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1040  0010FA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1041  0010FE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1042  001102  0E00               	movlw	0
  1043  001104  0100               	movlb	0	; () banked
  1044  001106  6F91               	movwf	___fldiv@a& (0+255),b
  1045  001108  0E00               	movlw	0
  1046  00110A  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1047  00110C  0EF0               	movlw	240
  1048  00110E  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1049  001110  0E41               	movlw	65
  1050  001112  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1051  001114  EC8A  F010         	call	___fldiv	;wreg free
  1052  001118  C08D  F12C         	movff	?___fldiv,main@freq
  1053  00111C  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1054  001120  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1055  001124  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1056                           
  1057                           ;color_3.c: 226: brillo = freq;
  1058  001128  C12C  F127         	movff	main@freq,main@brillo
  1059  00112C  C12D  F128         	movff	main@freq+1,main@brillo+1
  1060  001130  C12E  F129         	movff	main@freq+2,main@brillo+2
  1061  001134  C12F  F12A         	movff	main@freq+3,main@brillo+3
  1062                           
  1063                           ;color_3.c: 227: freq = calibra(brillo,1883,8205);
  1064  001138  C127  F0CE         	movff	main@brillo,calibra@valor
  1065  00113C  C128  F0CF         	movff	main@brillo+1,calibra@valor+1
  1066  001140  C129  F0D0         	movff	main@brillo+2,calibra@valor+2
  1067  001144  C12A  F0D1         	movff	main@brillo+3,calibra@valor+3
  1068  001148  0E00               	movlw	0
  1069  00114A  0100               	movlb	0	; () banked
  1070  00114C  6FD2               	movwf	calibra@fd& (0+255),b
  1071  00114E  0E60               	movlw	96
  1072  001150  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1073  001152  0EEB               	movlw	235
  1074  001154  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1075  001156  0E44               	movlw	68
  1076  001158  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1077  00115A  0E00               	movlw	0
  1078  00115C  6FD6               	movwf	calibra@fw& (0+255),b
  1079  00115E  0E34               	movlw	52
  1080  001160  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1081  001162  0E00               	movlw	0
  1082  001164  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1083  001166  0E46               	movlw	70
  1084  001168  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1085  00116A  EC22  F017         	call	_calibra	;wreg free
  1086  00116E  C0CE  F12C         	movff	?_calibra,main@freq
  1087  001172  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1088  001176  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1089  00117A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1090                           
  1091                           ;color_3.c: 228: sprintf(value,"%5.3f",freq);
  1092  00117E  0E30               	movlw	low _value
  1093  001180  0100               	movlb	0	; () banked
  1094  001182  6FD6               	movwf	sprintf@sp& (0+255),b
  1095  001184  0E01               	movlw	high _value
  1096  001186  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1097  001188  0EA3               	movlw	low STR_2
  1098  00118A  6FD8               	movwf	sprintf@f& (0+255),b
  1099  00118C  0E06               	movlw	high STR_2
  1100  00118E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1101  001190  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1102  001194  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1103  001198  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1104  00119C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1105  0011A0  EC5D  F003         	call	_sprintf	;wreg free
  1106                           
  1107                           ;color_3.c: 229: lcd_gotoxy(1,2);
  1108  0011A4  0E02               	movlw	2
  1109  0011A6  6E31               	movwf	lcd_gotoxy@y,c
  1110  0011A8  0E01               	movlw	1
  1111  0011AA  ECC1  F019         	call	_lcd_gotoxy
  1112                           
  1113                           ;color_3.c: 230: lcd_msg("B= ");
  1114  0011AE  0EAD               	movlw	low STR_3
  1115  0011B0  6E32               	movwf	lcd_msg@c,c
  1116  0011B2  0E06               	movlw	high STR_3
  1117  0011B4  6E33               	movwf	lcd_msg@c+1,c
  1118  0011B6  ECD4  F018         	call	_lcd_msg	;wreg free
  1119                           
  1120                           ;color_3.c: 231: lcd_msg(value);
  1121  0011BA  0E30               	movlw	low _value
  1122  0011BC  6E32               	movwf	lcd_msg@c,c
  1123  0011BE  0E01               	movlw	high _value
  1124  0011C0  6E33               	movwf	lcd_msg@c+1,c
  1125  0011C2  ECD4  F018         	call	_lcd_msg	;wreg free
  1126                           
  1127                           ;color_3.c: 232: freq=0.0;
  1128  0011C6  0E00               	movlw	0
  1129  0011C8  0101               	movlb	1	; () banked
  1130  0011CA  6F2C               	movwf	main@freq& (0+255),b
  1131  0011CC  0E00               	movlw	0
  1132  0011CE  6F2D               	movwf	(main@freq+1)& (0+255),b
  1133  0011D0  0E00               	movlw	0
  1134  0011D2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1135  0011D4  0E00               	movlw	0
  1136  0011D6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1137                           
  1138                           ; BSR set to: 1
  1139                           ;color_3.c: 233: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1140  0011D8  0E1F               	movlw	31
  1141  0011DA  0100               	movlb	0	; () banked
  1142  0011DC  6FE3               	movwf	(??_main+1)& (0+255),b
  1143  0011DE  0E71               	movlw	113
  1144  0011E0  6FE2               	movwf	??_main& (0+255),b
  1145  0011E2  0E1E               	movlw	30
  1146  0011E4                     u6247:
  1147  0011E4  2EE8               	decfsz	wreg,f,c
  1148  0011E6  D7FE               	bra	u6247
  1149  0011E8  2FE2               	decfsz	??_main& (0+255),f,b
  1150  0011EA  D7FC               	bra	u6247
  1151  0011EC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1152  0011EE  D7FA               	bra	u6247
  1153  0011F0  F000               	nop	
  1154                           
  1155                           ;color_3.c: 237: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1156  0011F2  0E10               	movlw	16
  1157  0011F4  1A8C               	xorwf	3980,f,c	;volatile
  1158                           
  1159                           ;color_3.c: 238: seleccionarColor(rojo);
  1160  0011F6  0E00               	movlw	0
  1161  0011F8  EC69  F019         	call	_seleccionarColor
  1162                           
  1163                           ;color_3.c: 239: for (i = 0 ;i < 30; i++)
  1164  0011FC  0E00               	movlw	0
  1165  0011FE  0101               	movlb	1	; () banked
  1166  001200  6F2B               	movwf	main@i& (0+255),b
  1167  001202                     l5449:
  1168                           
  1169                           ; BSR set to: 1
  1170  001202  0E1D               	movlw	29
  1171  001204  652B               	cpfsgt	main@i& (0+255),b
  1172  001206  D001               	goto	l155
  1173  001208  D028               	goto	u6180
  1174  00120A                     l155:
  1175                           
  1176                           ; BSR set to: 1
  1177                           ;color_3.c: 240: {
  1178                           ;color_3.c: 241: _delay((unsigned long)((10)*(16000000/4000.0)));
  1179                           
  1180                           ; BSR set to: 1
  1181  00120A  0E34               	movlw	52
  1182  00120C  0100               	movlb	0	; () banked
  1183  00120E  6FE2               	movwf	??_main& (0+255),b
  1184  001210  0EF1               	movlw	241
  1185  001212                     u6257:
  1186  001212  2EE8               	decfsz	wreg,f,c
  1187  001214  D7FE               	bra	u6257
  1188  001216  2FE2               	decfsz	??_main& (0+255),f,b
  1189  001218  D7FC               	bra	u6257
  1190  00121A  D000               	nop2	
  1191                           
  1192                           ;color_3.c: 242: freq+= calcula();
  1193  00121C  C12C  F0BA         	movff	main@freq,___fladd@b
  1194  001220  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1195  001224  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1196  001228  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1197  00122C  EC26  F016         	call	_calcula	;wreg free
  1198  001230  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1199  001234  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1200  001238  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1201  00123C  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1202  001240  ECEB  F00E         	call	___fladd	;wreg free
  1203  001244  C0BA  F12C         	movff	?___fladd,main@freq
  1204  001248  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1205  00124C  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1206  001250  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1207  001254  0101               	movlb	1	; () banked
  1208  001256  2B2B               	incf	main@i& (0+255),f,b
  1209  001258  D7D4               	goto	l5449
  1210  00125A                     u6180:
  1211                           
  1212                           ; BSR set to: 1
  1213                           ;color_3.c: 243: }
  1214                           ;color_3.c: 244: freq/=30;
  1215                           
  1216                           ; BSR set to: 1
  1217  00125A  C12C  F08D         	movff	main@freq,___fldiv@b
  1218  00125E  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1219  001262  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1220  001266  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1221  00126A  0E00               	movlw	0
  1222  00126C  0100               	movlb	0	; () banked
  1223  00126E  6F91               	movwf	___fldiv@a& (0+255),b
  1224  001270  0E00               	movlw	0
  1225  001272  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1226  001274  0EF0               	movlw	240
  1227  001276  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1228  001278  0E41               	movlw	65
  1229  00127A  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1230  00127C  EC8A  F010         	call	___fldiv	;wreg free
  1231  001280  C08D  F12C         	movff	?___fldiv,main@freq
  1232  001284  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1233  001288  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1234  00128C  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1235                           
  1236                           ;color_3.c: 245: r=freq;
  1237  001290  C12C  F11B         	movff	main@freq,main@r
  1238  001294  C12D  F11C         	movff	main@freq+1,main@r+1
  1239  001298  C12E  F11D         	movff	main@freq+2,main@r+2
  1240  00129C  C12F  F11E         	movff	main@freq+3,main@r+3
  1241                           
  1242                           ;color_3.c: 246: freq = calibra(r,743.4,2951.7);
  1243  0012A0  C11B  F0CE         	movff	main@r,calibra@valor
  1244  0012A4  C11C  F0CF         	movff	main@r+1,calibra@valor+1
  1245  0012A8  C11D  F0D0         	movff	main@r+2,calibra@valor+2
  1246  0012AC  C11E  F0D1         	movff	main@r+3,calibra@valor+3
  1247  0012B0  0E9A               	movlw	154
  1248  0012B2  0100               	movlb	0	; () banked
  1249  0012B4  6FD2               	movwf	calibra@fd& (0+255),b
  1250  0012B6  0ED9               	movlw	217
  1251  0012B8  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1252  0012BA  0E39               	movlw	57
  1253  0012BC  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1254  0012BE  0E44               	movlw	68
  1255  0012C0  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1256  0012C2  0E33               	movlw	51
  1257  0012C4  6FD6               	movwf	calibra@fw& (0+255),b
  1258  0012C6  0E7B               	movlw	123
  1259  0012C8  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1260  0012CA  0E38               	movlw	56
  1261  0012CC  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1262  0012CE  0E45               	movlw	69
  1263  0012D0  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1264  0012D2  EC22  F017         	call	_calibra	;wreg free
  1265  0012D6  C0CE  F12C         	movff	?_calibra,main@freq
  1266  0012DA  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1267  0012DE  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1268  0012E2  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1269                           
  1270                           ;color_3.c: 247: sprintf(value,"%5.3f",freq);
  1271  0012E6  0E30               	movlw	low _value
  1272  0012E8  0100               	movlb	0	; () banked
  1273  0012EA  6FD6               	movwf	sprintf@sp& (0+255),b
  1274  0012EC  0E01               	movlw	high _value
  1275  0012EE  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1276  0012F0  0EA3               	movlw	low STR_2
  1277  0012F2  6FD8               	movwf	sprintf@f& (0+255),b
  1278  0012F4  0E06               	movlw	high STR_2
  1279  0012F6  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1280  0012F8  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1281  0012FC  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1282  001300  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1283  001304  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1284  001308  EC5D  F003         	call	_sprintf	;wreg free
  1285                           
  1286                           ;color_3.c: 248: lcd_gotoxy(1,2);
  1287  00130C  0E02               	movlw	2
  1288  00130E  6E31               	movwf	lcd_gotoxy@y,c
  1289  001310  0E01               	movlw	1
  1290  001312  ECC1  F019         	call	_lcd_gotoxy
  1291                           
  1292                           ;color_3.c: 249: lcd_msg("R= ");
  1293  001316  0EB1               	movlw	low STR_5
  1294  001318  6E32               	movwf	lcd_msg@c,c
  1295  00131A  0E06               	movlw	high STR_5
  1296  00131C  6E33               	movwf	lcd_msg@c+1,c
  1297  00131E  ECD4  F018         	call	_lcd_msg	;wreg free
  1298                           
  1299                           ;color_3.c: 250: lcd_msg(value);
  1300  001322  0E30               	movlw	low _value
  1301  001324  6E32               	movwf	lcd_msg@c,c
  1302  001326  0E01               	movlw	high _value
  1303  001328  6E33               	movwf	lcd_msg@c+1,c
  1304  00132A  ECD4  F018         	call	_lcd_msg	;wreg free
  1305                           
  1306                           ;color_3.c: 252: freq=0.0;
  1307  00132E  0E00               	movlw	0
  1308  001330  0101               	movlb	1	; () banked
  1309  001332  6F2C               	movwf	main@freq& (0+255),b
  1310  001334  0E00               	movlw	0
  1311  001336  6F2D               	movwf	(main@freq+1)& (0+255),b
  1312  001338  0E00               	movlw	0
  1313  00133A  6F2E               	movwf	(main@freq+2)& (0+255),b
  1314  00133C  0E00               	movlw	0
  1315  00133E  6F2F               	movwf	(main@freq+3)& (0+255),b
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;color_3.c: 253: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1319  001340  0E1F               	movlw	31
  1320  001342  0100               	movlb	0	; () banked
  1321  001344  6FE3               	movwf	(??_main+1)& (0+255),b
  1322  001346  0E71               	movlw	113
  1323  001348  6FE2               	movwf	??_main& (0+255),b
  1324  00134A  0E1E               	movlw	30
  1325  00134C                     u6267:
  1326  00134C  2EE8               	decfsz	wreg,f,c
  1327  00134E  D7FE               	bra	u6267
  1328  001350  2FE2               	decfsz	??_main& (0+255),f,b
  1329  001352  D7FC               	bra	u6267
  1330  001354  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1331  001356  D7FA               	bra	u6267
  1332  001358  F000               	nop	
  1333                           
  1334                           ;color_3.c: 256: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1335  00135A  0E10               	movlw	16
  1336  00135C  1A8C               	xorwf	3980,f,c	;volatile
  1337                           
  1338                           ;color_3.c: 257: seleccionarColor(verde);
  1339  00135E  0E03               	movlw	3
  1340  001360  EC69  F019         	call	_seleccionarColor
  1341                           
  1342                           ;color_3.c: 258: for (i = 0 ;i < 30; i++)
  1343  001364  0E00               	movlw	0
  1344  001366  0101               	movlb	1	; () banked
  1345  001368  6F2B               	movwf	main@i& (0+255),b
  1346  00136A                     l5485:
  1347                           
  1348                           ; BSR set to: 1
  1349  00136A  0E1D               	movlw	29
  1350  00136C  652B               	cpfsgt	main@i& (0+255),b
  1351  00136E  D001               	goto	l157
  1352  001370  D028               	goto	u6200
  1353  001372                     l157:
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;color_3.c: 259: {
  1357                           ;color_3.c: 260: _delay((unsigned long)((10)*(16000000/4000.0)));
  1358                           
  1359                           ; BSR set to: 1
  1360  001372  0E34               	movlw	52
  1361  001374  0100               	movlb	0	; () banked
  1362  001376  6FE2               	movwf	??_main& (0+255),b
  1363  001378  0EF1               	movlw	241
  1364  00137A                     u6277:
  1365  00137A  2EE8               	decfsz	wreg,f,c
  1366  00137C  D7FE               	bra	u6277
  1367  00137E  2FE2               	decfsz	??_main& (0+255),f,b
  1368  001380  D7FC               	bra	u6277
  1369  001382  D000               	nop2	
  1370                           
  1371                           ;color_3.c: 261: freq+= calcula();
  1372  001384  C12C  F0BA         	movff	main@freq,___fladd@b
  1373  001388  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1374  00138C  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1375  001390  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1376  001394  EC26  F016         	call	_calcula	;wreg free
  1377  001398  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1378  00139C  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1379  0013A0  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1380  0013A4  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1381  0013A8  ECEB  F00E         	call	___fladd	;wreg free
  1382  0013AC  C0BA  F12C         	movff	?___fladd,main@freq
  1383  0013B0  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1384  0013B4  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1385  0013B8  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1386  0013BC  0101               	movlb	1	; () banked
  1387  0013BE  2B2B               	incf	main@i& (0+255),f,b
  1388  0013C0  D7D4               	goto	l5485
  1389  0013C2                     u6200:
  1390                           
  1391                           ; BSR set to: 1
  1392                           ;color_3.c: 262: }
  1393                           ;color_3.c: 263: freq/=30;
  1394                           
  1395                           ; BSR set to: 1
  1396  0013C2  C12C  F08D         	movff	main@freq,___fldiv@b
  1397  0013C6  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1398  0013CA  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1399  0013CE  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1400  0013D2  0E00               	movlw	0
  1401  0013D4  0100               	movlb	0	; () banked
  1402  0013D6  6F91               	movwf	___fldiv@a& (0+255),b
  1403  0013D8  0E00               	movlw	0
  1404  0013DA  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1405  0013DC  0EF0               	movlw	240
  1406  0013DE  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1407  0013E0  0E41               	movlw	65
  1408  0013E2  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1409  0013E4  EC8A  F010         	call	___fldiv	;wreg free
  1410  0013E8  C08D  F12C         	movff	?___fldiv,main@freq
  1411  0013EC  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1412  0013F0  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1413  0013F4  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1414                           
  1415                           ;color_3.c: 264: v=freq;
  1416  0013F8  C12C  F11F         	movff	main@freq,main@v
  1417  0013FC  C12D  F120         	movff	main@freq+1,main@v+1
  1418  001400  C12E  F121         	movff	main@freq+2,main@v+2
  1419  001404  C12F  F122         	movff	main@freq+3,main@v+3
  1420                           
  1421                           ;color_3.c: 265: freq = calibra(v,505.7,2442);
  1422  001408  C11F  F0CE         	movff	main@v,calibra@valor
  1423  00140C  C120  F0CF         	movff	main@v+1,calibra@valor+1
  1424  001410  C121  F0D0         	movff	main@v+2,calibra@valor+2
  1425  001414  C122  F0D1         	movff	main@v+3,calibra@valor+3
  1426  001418  0E9A               	movlw	154
  1427  00141A  0100               	movlb	0	; () banked
  1428  00141C  6FD2               	movwf	calibra@fd& (0+255),b
  1429  00141E  0ED9               	movlw	217
  1430  001420  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1431  001422  0EFC               	movlw	252
  1432  001424  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1433  001426  0E43               	movlw	67
  1434  001428  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1435  00142A  0E00               	movlw	0
  1436  00142C  6FD6               	movwf	calibra@fw& (0+255),b
  1437  00142E  0EA0               	movlw	160
  1438  001430  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1439  001432  0E18               	movlw	24
  1440  001434  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1441  001436  0E45               	movlw	69
  1442  001438  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1443  00143A  EC22  F017         	call	_calibra	;wreg free
  1444  00143E  C0CE  F12C         	movff	?_calibra,main@freq
  1445  001442  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1446  001446  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1447  00144A  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1448                           
  1449                           ;color_3.c: 266: sprintf(value,"%5.3f",freq);
  1450  00144E  0E30               	movlw	low _value
  1451  001450  0100               	movlb	0	; () banked
  1452  001452  6FD6               	movwf	sprintf@sp& (0+255),b
  1453  001454  0E01               	movlw	high _value
  1454  001456  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1455  001458  0EA3               	movlw	low STR_2
  1456  00145A  6FD8               	movwf	sprintf@f& (0+255),b
  1457  00145C  0E06               	movlw	high STR_2
  1458  00145E  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1459  001460  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1460  001464  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1461  001468  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1462  00146C  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1463  001470  EC5D  F003         	call	_sprintf	;wreg free
  1464                           
  1465                           ;color_3.c: 267: lcd_gotoxy(1,2);
  1466  001474  0E02               	movlw	2
  1467  001476  6E31               	movwf	lcd_gotoxy@y,c
  1468  001478  0E01               	movlw	1
  1469  00147A  ECC1  F019         	call	_lcd_gotoxy
  1470                           
  1471                           ;color_3.c: 268: lcd_msg("V= ");
  1472  00147E  0EB5               	movlw	low STR_7
  1473  001480  6E32               	movwf	lcd_msg@c,c
  1474  001482  0E06               	movlw	high STR_7
  1475  001484  6E33               	movwf	lcd_msg@c+1,c
  1476  001486  ECD4  F018         	call	_lcd_msg	;wreg free
  1477                           
  1478                           ;color_3.c: 269: lcd_msg(value);
  1479  00148A  0E30               	movlw	low _value
  1480  00148C  6E32               	movwf	lcd_msg@c,c
  1481  00148E  0E01               	movlw	high _value
  1482  001490  6E33               	movwf	lcd_msg@c+1,c
  1483  001492  ECD4  F018         	call	_lcd_msg	;wreg free
  1484                           
  1485                           ;color_3.c: 270: freq=0.0;
  1486  001496  0E00               	movlw	0
  1487  001498  0101               	movlb	1	; () banked
  1488  00149A  6F2C               	movwf	main@freq& (0+255),b
  1489  00149C  0E00               	movlw	0
  1490  00149E  6F2D               	movwf	(main@freq+1)& (0+255),b
  1491  0014A0  0E00               	movlw	0
  1492  0014A2  6F2E               	movwf	(main@freq+2)& (0+255),b
  1493  0014A4  0E00               	movlw	0
  1494  0014A6  6F2F               	movwf	(main@freq+3)& (0+255),b
  1495                           
  1496                           ; BSR set to: 1
  1497                           ;color_3.c: 271: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1498  0014A8  0E1F               	movlw	31
  1499  0014AA  0100               	movlb	0	; () banked
  1500  0014AC  6FE3               	movwf	(??_main+1)& (0+255),b
  1501  0014AE  0E71               	movlw	113
  1502  0014B0  6FE2               	movwf	??_main& (0+255),b
  1503  0014B2  0E1E               	movlw	30
  1504  0014B4                     u6287:
  1505  0014B4  2EE8               	decfsz	wreg,f,c
  1506  0014B6  D7FE               	bra	u6287
  1507  0014B8  2FE2               	decfsz	??_main& (0+255),f,b
  1508  0014BA  D7FC               	bra	u6287
  1509  0014BC  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1510  0014BE  D7FA               	bra	u6287
  1511  0014C0  F000               	nop	
  1512                           
  1513                           ;color_3.c: 274: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1514  0014C2  0E10               	movlw	16
  1515  0014C4  1A8C               	xorwf	3980,f,c	;volatile
  1516                           
  1517                           ;color_3.c: 275: seleccionarColor(azul);
  1518  0014C6  0E01               	movlw	1
  1519  0014C8  EC69  F019         	call	_seleccionarColor
  1520                           
  1521                           ;color_3.c: 276: for (i = 0 ;i < 30; i++)
  1522  0014CC  0E00               	movlw	0
  1523  0014CE  0101               	movlb	1	; () banked
  1524  0014D0  6F2B               	movwf	main@i& (0+255),b
  1525  0014D2                     l5521:
  1526                           
  1527                           ; BSR set to: 1
  1528  0014D2  0E1D               	movlw	29
  1529  0014D4  652B               	cpfsgt	main@i& (0+255),b
  1530  0014D6  D001               	goto	l159
  1531  0014D8  D01F               	goto	u6220
  1532  0014DA                     l159:
  1533                           
  1534                           ; BSR set to: 1
  1535                           ;color_3.c: 277: {
  1536                           ;color_3.c: 278: freq+= calcula();
  1537                           
  1538                           ; BSR set to: 1
  1539  0014DA  C12C  F0BA         	movff	main@freq,___fladd@b
  1540  0014DE  C12D  F0BB         	movff	main@freq+1,___fladd@b+1
  1541  0014E2  C12E  F0BC         	movff	main@freq+2,___fladd@b+2
  1542  0014E6  C12F  F0BD         	movff	main@freq+3,___fladd@b+3
  1543  0014EA  EC26  F016         	call	_calcula	;wreg free
  1544  0014EE  C0A6  F0BE         	movff	?_calcula,___fladd@a
  1545  0014F2  C0A7  F0BF         	movff	?_calcula+1,___fladd@a+1
  1546  0014F6  C0A8  F0C0         	movff	?_calcula+2,___fladd@a+2
  1547  0014FA  C0A9  F0C1         	movff	?_calcula+3,___fladd@a+3
  1548  0014FE  ECEB  F00E         	call	___fladd	;wreg free
  1549  001502  C0BA  F12C         	movff	?___fladd,main@freq
  1550  001506  C0BB  F12D         	movff	?___fladd+1,main@freq+1
  1551  00150A  C0BC  F12E         	movff	?___fladd+2,main@freq+2
  1552  00150E  C0BD  F12F         	movff	?___fladd+3,main@freq+3
  1553  001512  0101               	movlb	1	; () banked
  1554  001514  2B2B               	incf	main@i& (0+255),f,b
  1555  001516  D7DD               	goto	l5521
  1556  001518                     u6220:
  1557                           
  1558                           ; BSR set to: 1
  1559                           ;color_3.c: 279: }
  1560                           ;color_3.c: 280: freq/=30;
  1561                           
  1562                           ; BSR set to: 1
  1563  001518  C12C  F08D         	movff	main@freq,___fldiv@b
  1564  00151C  C12D  F08E         	movff	main@freq+1,___fldiv@b+1
  1565  001520  C12E  F08F         	movff	main@freq+2,___fldiv@b+2
  1566  001524  C12F  F090         	movff	main@freq+3,___fldiv@b+3
  1567  001528  0E00               	movlw	0
  1568  00152A  0100               	movlb	0	; () banked
  1569  00152C  6F91               	movwf	___fldiv@a& (0+255),b
  1570  00152E  0E00               	movlw	0
  1571  001530  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  1572  001532  0EF0               	movlw	240
  1573  001534  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  1574  001536  0E41               	movlw	65
  1575  001538  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  1576  00153A  EC8A  F010         	call	___fldiv	;wreg free
  1577  00153E  C08D  F12C         	movff	?___fldiv,main@freq
  1578  001542  C08E  F12D         	movff	?___fldiv+1,main@freq+1
  1579  001546  C08F  F12E         	movff	?___fldiv+2,main@freq+2
  1580  00154A  C090  F12F         	movff	?___fldiv+3,main@freq+3
  1581                           
  1582                           ;color_3.c: 281: a=freq;
  1583  00154E  C12C  F123         	movff	main@freq,main@a
  1584  001552  C12D  F124         	movff	main@freq+1,main@a+1
  1585  001556  C12E  F125         	movff	main@freq+2,main@a+2
  1586  00155A  C12F  F126         	movff	main@freq+3,main@a+3
  1587                           
  1588                           ;color_3.c: 282: freq = calibra(a,588.5,3186);
  1589  00155E  C123  F0CE         	movff	main@a,calibra@valor
  1590  001562  C124  F0CF         	movff	main@a+1,calibra@valor+1
  1591  001566  C125  F0D0         	movff	main@a+2,calibra@valor+2
  1592  00156A  C126  F0D1         	movff	main@a+3,calibra@valor+3
  1593  00156E  0E00               	movlw	0
  1594  001570  0100               	movlb	0	; () banked
  1595  001572  6FD2               	movwf	calibra@fd& (0+255),b
  1596  001574  0E20               	movlw	32
  1597  001576  6FD3               	movwf	(calibra@fd+1)& (0+255),b
  1598  001578  0E13               	movlw	19
  1599  00157A  6FD4               	movwf	(calibra@fd+2)& (0+255),b
  1600  00157C  0E44               	movlw	68
  1601  00157E  6FD5               	movwf	(calibra@fd+3)& (0+255),b
  1602  001580  0E00               	movlw	0
  1603  001582  6FD6               	movwf	calibra@fw& (0+255),b
  1604  001584  0E20               	movlw	32
  1605  001586  6FD7               	movwf	(calibra@fw+1)& (0+255),b
  1606  001588  0E47               	movlw	71
  1607  00158A  6FD8               	movwf	(calibra@fw+2)& (0+255),b
  1608  00158C  0E45               	movlw	69
  1609  00158E  6FD9               	movwf	(calibra@fw+3)& (0+255),b
  1610  001590  EC22  F017         	call	_calibra	;wreg free
  1611  001594  C0CE  F12C         	movff	?_calibra,main@freq
  1612  001598  C0CF  F12D         	movff	?_calibra+1,main@freq+1
  1613  00159C  C0D0  F12E         	movff	?_calibra+2,main@freq+2
  1614  0015A0  C0D1  F12F         	movff	?_calibra+3,main@freq+3
  1615                           
  1616                           ;color_3.c: 283: sprintf(value,"%5.3f",freq);
  1617  0015A4  0E30               	movlw	low _value
  1618  0015A6  0100               	movlb	0	; () banked
  1619  0015A8  6FD6               	movwf	sprintf@sp& (0+255),b
  1620  0015AA  0E01               	movlw	high _value
  1621  0015AC  6FD7               	movwf	(sprintf@sp+1)& (0+255),b
  1622  0015AE  0EA3               	movlw	low STR_2
  1623  0015B0  6FD8               	movwf	sprintf@f& (0+255),b
  1624  0015B2  0E06               	movlw	high STR_2
  1625  0015B4  6FD9               	movwf	(sprintf@f+1)& (0+255),b
  1626  0015B6  C12C  F0DA         	movff	main@freq,?_sprintf+4
  1627  0015BA  C12D  F0DB         	movff	main@freq+1,?_sprintf+5
  1628  0015BE  C12E  F0DC         	movff	main@freq+2,?_sprintf+6
  1629  0015C2  C12F  F0DD         	movff	main@freq+3,?_sprintf+7
  1630  0015C6  EC5D  F003         	call	_sprintf	;wreg free
  1631                           
  1632                           ;color_3.c: 284: lcd_gotoxy(1,2);
  1633  0015CA  0E02               	movlw	2
  1634  0015CC  6E31               	movwf	lcd_gotoxy@y,c
  1635  0015CE  0E01               	movlw	1
  1636  0015D0  ECC1  F019         	call	_lcd_gotoxy
  1637                           
  1638                           ;color_3.c: 285: lcd_msg("A= ");
  1639  0015D4  0EA9               	movlw	low STR_9
  1640  0015D6  6E32               	movwf	lcd_msg@c,c
  1641  0015D8  0E06               	movlw	high STR_9
  1642  0015DA  6E33               	movwf	lcd_msg@c+1,c
  1643  0015DC  ECD4  F018         	call	_lcd_msg	;wreg free
  1644                           
  1645                           ;color_3.c: 286: lcd_msg(value);
  1646  0015E0  0E30               	movlw	low _value
  1647  0015E2  6E32               	movwf	lcd_msg@c,c
  1648  0015E4  0E01               	movlw	high _value
  1649  0015E6  6E33               	movwf	lcd_msg@c+1,c
  1650  0015E8  ECD4  F018         	call	_lcd_msg	;wreg free
  1651                           
  1652                           ;color_3.c: 287: freq=0.0;
  1653  0015EC  0E00               	movlw	0
  1654  0015EE  0101               	movlb	1	; () banked
  1655  0015F0  6F2C               	movwf	main@freq& (0+255),b
  1656  0015F2  0E00               	movlw	0
  1657  0015F4  6F2D               	movwf	(main@freq+1)& (0+255),b
  1658  0015F6  0E00               	movlw	0
  1659  0015F8  6F2E               	movwf	(main@freq+2)& (0+255),b
  1660  0015FA  0E00               	movlw	0
  1661  0015FC  6F2F               	movwf	(main@freq+3)& (0+255),b
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;color_3.c: 288: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1665  0015FE  0E1F               	movlw	31
  1666  001600  0100               	movlb	0	; () banked
  1667  001602  6FE3               	movwf	(??_main+1)& (0+255),b
  1668  001604  0E71               	movlw	113
  1669  001606  6FE2               	movwf	??_main& (0+255),b
  1670  001608  0E1E               	movlw	30
  1671  00160A                     u6297:
  1672  00160A  2EE8               	decfsz	wreg,f,c
  1673  00160C  D7FE               	bra	u6297
  1674  00160E  2FE2               	decfsz	??_main& (0+255),f,b
  1675  001610  D7FC               	bra	u6297
  1676  001612  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1677  001614  D7FA               	bra	u6297
  1678  001616  F000               	nop	
  1679                           
  1680                           ;color_3.c: 290: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1681  001618  0E1F               	movlw	31
  1682  00161A  0100               	movlb	0	; () banked
  1683  00161C  6FE3               	movwf	(??_main+1)& (0+255),b
  1684  00161E  0E71               	movlw	113
  1685  001620  6FE2               	movwf	??_main& (0+255),b
  1686  001622  0E1E               	movlw	30
  1687  001624                     u6307:
  1688  001624  2EE8               	decfsz	wreg,f,c
  1689  001626  D7FE               	bra	u6307
  1690  001628  2FE2               	decfsz	??_main& (0+255),f,b
  1691  00162A  D7FC               	bra	u6307
  1692  00162C  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1693  00162E  D7FA               	bra	u6307
  1694  001630  F000               	nop	
  1695  001632  D52B               	goto	l152
  1696  001634                     __end_of_main:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           intcon	equ	0xFF2
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           
  1703 ;; *************** function _sprintf *****************
  1704 ;; Defined at:
  1705 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  sp              2   86[BANK0 ] PTR unsigned char 
  1708 ;;		 -> value(8), 
  1709 ;;  f               2   88[BANK0 ] PTR const unsigned char 
  1710 ;;		 -> STR_8(6), STR_6(6), STR_4(6), STR_2(6), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  fval            4   20[BANK1 ] PTR const unsigned char 
  1713 ;;  tmpval          4   14[BANK1 ] struct .
  1714 ;;  val             4    6[BANK1 ] unsigned long 
  1715 ;;  cp              3    0        PTR const unsigned char 
  1716 ;;  prec            2   24[BANK1 ] int 
  1717 ;;  exp             2   18[BANK1 ] int 
  1718 ;;  width           2   12[BANK1 ] int 
  1719 ;;  flag            2   10[BANK1 ] unsigned short 
  1720 ;;  ap              2    4[BANK1 ] PTR void [1]
  1721 ;;		 -> ?_sprintf(2), 
  1722 ;;  len             2    0        unsigned int 
  1723 ;;  c               1   26[BANK1 ] char 
  1724 ;;  d               1    0        unsigned char 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  2   86[BANK0 ] int 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1734 ;;      Params:         0       8       0       0       0       0       0
  1735 ;;      Locals:         0       0      27       0       0       0       0
  1736 ;;      Temps:          0       4       0       0       0       0       0
  1737 ;;      Totals:         0      12      27       0       0       0       0
  1738 ;;Total ram usage:       39 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    4
  1741 ;; This function calls:
  1742 ;;		___awdiv
  1743 ;;		___fladd
  1744 ;;		___flge
  1745 ;;		___flmul
  1746 ;;		___flneg
  1747 ;;		___flsub
  1748 ;;		___fltol
  1749 ;;		___lldiv
  1750 ;;		___llmod
  1751 ;;		___wmul
  1752 ;;		___xxtofl
  1753 ;;		__div_to_l_
  1754 ;;		__tdiv_to_l_
  1755 ;;		_fround
  1756 ;;		_isdigit
  1757 ;;		_scale
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text1
  1764  0006BA                     __ptext1:
  1765                           	opt stack 0
  1766  0006BA                     _sprintf:
  1767                           	opt stack 26
  1768                           
  1769                           ;doprnt.c: 494: va_list ap;
  1770                           ;doprnt.c: 499: signed char c;
  1771                           ;doprnt.c: 501: int width;
  1772                           ;doprnt.c: 504: int prec;
  1773                           ;doprnt.c: 508: unsigned short flag;
  1774                           ;doprnt.c: 515: char d;
  1775                           ;doprnt.c: 516: double fval;
  1776                           ;doprnt.c: 517: int exp;
  1777                           ;doprnt.c: 523: union {
  1778                           ;doprnt.c: 524: unsigned long vd;
  1779                           ;doprnt.c: 525: double integ;
  1780                           ;doprnt.c: 526: } tmpval;
  1781                           ;doprnt.c: 528: unsigned long val;
  1782                           ;doprnt.c: 529: unsigned len;
  1783                           ;doprnt.c: 530: const char * cp;
  1784                           ;doprnt.c: 533: *ap = __va_start();
  1785                           
  1786                           ;incstack = 0
  1787  0006BA  0EDA               	movlw	low (?_sprintf+4)
  1788  0006BC  0101               	movlb	1	; () banked
  1789  0006BE  6F04               	movwf	sprintf@ap& (0+255),b
  1790  0006C0  0E00               	movlw	high (?_sprintf+4)
  1791  0006C2  6F05               	movwf	(sprintf@ap+1)& (0+255),b
  1792                           
  1793                           ;doprnt.c: 536: while(c = *f++) {
  1794  0006C4  EF0A  F008         	goto	l300
  1795  0006C8                     
  1796                           ; BSR set to: 1
  1797                           ;doprnt.c: 538: if(c != '%')
  1798                           
  1799                           ; BSR set to: 1
  1800  0006C8  0E25               	movlw	37
  1801  0006CA  191A               	xorwf	sprintf@c& (0+255),w,b
  1802  0006CC  B4D8               	btfsc	status,2,c
  1803  0006CE  D009               	goto	l229
  1804                           
  1805                           ; BSR set to: 1
  1806                           ;doprnt.c: 540: {
  1807                           ;doprnt.c: 541: ((*sp++ = (c)));
  1808  0006D0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  1809  0006D4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  1810  0006D8  C11A  FFDF         	movff	sprintf@c,indf2
  1811                           
  1812                           ; BSR set to: 1
  1813  0006DC  0100               	movlb	0	; () banked
  1814  0006DE  EF08  F008         	goto	l5359
  1815  0006E2                     l229:
  1816                           
  1817                           ;doprnt.c: 543: }
  1818                           ;doprnt.c: 546: width = 0;
  1819                           
  1820                           ; BSR set to: 0
  1821  0006E2  0E00               	movlw	0
  1822  0006E4  0101               	movlb	1	; () banked
  1823  0006E6  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1824  0006E8  0E00               	movlw	0
  1825  0006EA  6F0C               	movwf	sprintf@width& (0+255),b
  1826                           
  1827                           ;doprnt.c: 548: flag = 0;
  1828  0006EC  0E00               	movlw	0
  1829  0006EE  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  1830  0006F0  0E00               	movlw	0
  1831  0006F2  6F0A               	movwf	sprintf@flag& (0+255),b
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1835  0006F4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1836  0006F8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1837  0006FC                     	if	0	;tblptru may be non-zero
  1838  0006FC                     	endif
  1839  0006FC                     	if	0	;tblptru may be non-zero
  1840  0006FC                     	endif
  1841  0006FC  0008               	tblrd		*
  1842  0006FE  50F5               	movf	tablat,w,c
  1843  000700  EC34  F01A         	call	_isdigit
  1844  000704  A0D8               	btfss	status,0,c
  1845  000706  D038               	goto	u5730
  1846                           
  1847                           ;doprnt.c: 598: width = 0;
  1848  000708  0E00               	movlw	0
  1849  00070A  0101               	movlb	1	; () banked
  1850  00070C  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  1851  00070E  0E00               	movlw	0
  1852  000710  6F0C               	movwf	sprintf@width& (0+255),b
  1853  000712                     
  1854                           ;doprnt.c: 600: width *= 10;
  1855                           
  1856                           ; BSR set to: 1
  1857  000712  C10C  F02E         	movff	sprintf@width,___wmul@multiplier
  1858  000716  C10D  F02F         	movff	sprintf@width+1,___wmul@multiplier+1
  1859  00071A  0E00               	movlw	0
  1860  00071C  6E31               	movwf	___wmul@multiplicand+1,c
  1861  00071E  0E0A               	movlw	10
  1862  000720  6E30               	movwf	___wmul@multiplicand,c
  1863  000722  EC21  F01A         	call	___wmul	;wreg free
  1864  000726  C02E  F10C         	movff	?___wmul,sprintf@width
  1865  00072A  C02F  F10D         	movff	?___wmul+1,sprintf@width+1
  1866                           
  1867                           ;doprnt.c: 601: width += *f++ - '0';
  1868  00072E  0ED0               	movlw	208
  1869  000730  0100               	movlb	0	; () banked
  1870  000732  6FDE               	movwf	??_sprintf& (0+255),b
  1871  000734  0EFF               	movlw	255
  1872  000736  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  1873  000738  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1874  00073C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1875  000740                     	if	0	;tblptru may be non-zero
  1876  000740                     	endif
  1877  000740                     	if	0	;tblptru may be non-zero
  1878  000740                     	endif
  1879  000740  0008               	tblrd		*
  1880  000742  50F5               	movf	tablat,w,c
  1881  000744  6FE0               	movwf	(??_sprintf+2)& (0+255),b
  1882  000746  6BE1               	clrf	(??_sprintf+3)& (0+255),b
  1883  000748  51DE               	movf	??_sprintf& (0+255),w,b
  1884  00074A  27E0               	addwf	(??_sprintf+2)& (0+255),f,b
  1885  00074C  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  1886  00074E  23E1               	addwfc	(??_sprintf+3)& (0+255),f,b
  1887  000750  51E0               	movf	(??_sprintf+2)& (0+255),w,b
  1888  000752  0101               	movlb	1	; () banked
  1889  000754  270C               	addwf	sprintf@width& (0+255),f,b
  1890  000756  0100               	movlb	0	; () banked
  1891  000758  51E1               	movf	(??_sprintf+3)& (0+255),w,b
  1892  00075A  0101               	movlb	1	; () banked
  1893  00075C  230D               	addwfc	(sprintf@width+1)& (0+255),f,b
  1894                           
  1895                           ; BSR set to: 1
  1896  00075E  0100               	movlb	0	; () banked
  1897  000760  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1898  000762  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1902  000764  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1903  000768  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1904  00076C                     	if	0	;tblptru may be non-zero
  1905  00076C                     	endif
  1906  00076C                     	if	0	;tblptru may be non-zero
  1907  00076C                     	endif
  1908  00076C  0008               	tblrd		*
  1909  00076E  50F5               	movf	tablat,w,c
  1910  000770  EC34  F01A         	call	_isdigit
  1911  000774  B0D8               	btfsc	status,0,c
  1912  000776  D7CD               	goto	l231
  1913  000778                     u5730:
  1914                           
  1915                           ;doprnt.c: 608: }
  1916                           ;doprnt.c: 611: if(*f == '.') {
  1917  000778  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1918  00077C  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1919  000780                     	if	0	;tblptru may be non-zero
  1920  000780                     	endif
  1921  000780                     	if	0	;tblptru may be non-zero
  1922  000780                     	endif
  1923  000780  0008               	tblrd		*
  1924  000782  50F5               	movf	tablat,w,c
  1925  000784  0A2E               	xorlw	46
  1926  000786  A4D8               	btfss	status,2,c
  1927  000788  D033               	goto	l233
  1928                           
  1929                           ;doprnt.c: 612: flag |= 0x4000;
  1930  00078A  0101               	movlb	1	; () banked
  1931  00078C  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  1932                           
  1933                           ;doprnt.c: 613: f++;
  1934  00078E  0100               	movlb	0	; () banked
  1935  000790  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1936  000792  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;doprnt.c: 620: {
  1940                           ;doprnt.c: 621: prec = 0;
  1941  000794  0E00               	movlw	0
  1942  000796  0101               	movlb	1	; () banked
  1943  000798  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1944  00079A  0E00               	movlw	0
  1945  00079C  6F18               	movwf	sprintf@prec& (0+255),b
  1946                           
  1947                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1948  00079E  D01D               	goto	l234
  1949  0007A0                     
  1950                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1951                           
  1952                           ; BSR set to: 1
  1953  0007A0  C118  F02E         	movff	sprintf@prec,___wmul@multiplier
  1954  0007A4  C119  F02F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1955  0007A8  0E00               	movlw	0
  1956  0007AA  6E31               	movwf	___wmul@multiplicand+1,c
  1957  0007AC  0E0A               	movlw	10
  1958  0007AE  6E30               	movwf	___wmul@multiplicand,c
  1959  0007B0  EC21  F01A         	call	___wmul	;wreg free
  1960  0007B4  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1961  0007B8  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1962  0007BC                     	if	0	;tblptru may be non-zero
  1963  0007BC                     	endif
  1964  0007BC                     	if	0	;tblptru may be non-zero
  1965  0007BC                     	endif
  1966  0007BC  0008               	tblrd		*
  1967  0007BE  50F5               	movf	tablat,w,c
  1968  0007C0  262E               	addwf	?___wmul,f,c
  1969  0007C2  0E00               	movlw	0
  1970  0007C4  222F               	addwfc	?___wmul+1,f,c
  1971  0007C6  0ED0               	movlw	208
  1972  0007C8  242E               	addwf	?___wmul,w,c
  1973  0007CA  0101               	movlb	1	; () banked
  1974  0007CC  6F18               	movwf	sprintf@prec& (0+255),b
  1975  0007CE  0EFF               	movlw	255
  1976  0007D0  202F               	addwfc	?___wmul+1,w,c
  1977  0007D2  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  1978                           
  1979                           ; BSR set to: 1
  1980  0007D4  0100               	movlb	0	; () banked
  1981  0007D6  4BD8               	infsnz	sprintf@f& (0+255),f,b
  1982  0007D8  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  1983  0007DA                     l234:
  1984                           
  1985                           ; BSR set to: 0
  1986  0007DA  C0D8  FFF6         	movff	sprintf@f,tblptrl
  1987  0007DE  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  1988  0007E2                     	if	0	;tblptru may be non-zero
  1989  0007E2                     	endif
  1990  0007E2                     	if	0	;tblptru may be non-zero
  1991  0007E2                     	endif
  1992  0007E2  0008               	tblrd		*
  1993  0007E4  50F5               	movf	tablat,w,c
  1994  0007E6  EC34  F01A         	call	_isdigit
  1995  0007EA  A0D8               	btfss	status,0,c
  1996  0007EC  D00A               	goto	l238
  1997  0007EE  D7D8               	goto	l235
  1998  0007F0                     l233:
  1999                           
  2000                           ;doprnt.c: 626: prec = 0;
  2001  0007F0  0E00               	movlw	0
  2002  0007F2  0101               	movlb	1	; () banked
  2003  0007F4  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2004  0007F6  0E00               	movlw	0
  2005  0007F8  6F18               	movwf	sprintf@prec& (0+255),b
  2006                           
  2007                           ; BSR set to: 1
  2008                           ;doprnt.c: 628: flag |= 0x1000;
  2009  0007FA  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  2010                           
  2011                           ; BSR set to: 1
  2012                           ;doprnt.c: 630: }
  2013                           ;doprnt.c: 635: switch(c = *f++) {
  2014  0007FC  D002               	goto	l238
  2015  0007FE                     
  2016                           ; BSR set to: 1
  2017                           ;doprnt.c: 663: flag |= 0x400;
  2018                           
  2019                           ; BSR set to: 1
  2020  0007FE  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  2021                           
  2022                           ;doprnt.c: 664: break;
  2023  000800  D014               	goto	l242
  2024  000802                     l238:
  2025                           
  2026                           ; BSR set to: 1
  2027  000802  C0D8  FFF6         	movff	sprintf@f,tblptrl
  2028  000806  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  2029  00080A  0100               	movlb	0	; () banked
  2030  00080C  4BD8               	infsnz	sprintf@f& (0+255),f,b
  2031  00080E  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  2032  000810                     	if	0	;tblptru may be non-zero
  2033  000810                     	endif
  2034  000810                     	if	0	;tblptru may be non-zero
  2035  000810                     	endif
  2036  000810  0008               	tblrd		*
  2037  000812  CFF5 F11A          	movff	tablat,sprintf@c
  2038  000816  0101               	movlb	1	; () banked
  2039  000818  511A               	movf	sprintf@c& (0+255),w,b
  2040                           
  2041                           ; Switch size 1, requested type "space"
  2042                           ; Number of cases is 2, Range of values is 0 to 102
  2043                           ; switch strategies available:
  2044                           ; Name         Instructions Cycles
  2045                           ; simple_byte            7     4 (average)
  2046                           ;	Chosen strategy is simple_byte
  2047  00081A  0A00               	xorlw	0	; case 0
  2048  00081C  B4D8               	btfsc	status,2,c
  2049  00081E  EF19  F008         	goto	u6140
  2050  000822  0A66               	xorlw	102	; case 102
  2051  000824  B4D8               	btfsc	status,2,c
  2052  000826  D7EB               	goto	l241
  2053  000828  D3F5               	goto	l300
  2054  00082A                     l242:
  2055                           
  2056                           ; BSR set to: 1
  2057                           ;doprnt.c: 825: if(flag & (0x700)) {
  2058                           
  2059                           ; BSR set to: 1
  2060  00082A  0E07               	movlw	7
  2061  00082C  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2062  00082E  B4D8               	btfsc	status,2,c
  2063  000830  D349               	goto	l244
  2064                           
  2065                           ; BSR set to: 1
  2066                           ;doprnt.c: 827: if(flag & 0x1000)
  2067  000832  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  2068  000834  D004               	goto	l245
  2069                           
  2070                           ; BSR set to: 1
  2071                           ;doprnt.c: 829: prec = 6;
  2072  000836  0E00               	movlw	0
  2073  000838  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2074  00083A  0E06               	movlw	6
  2075  00083C  6F18               	movwf	sprintf@prec& (0+255),b
  2076  00083E                     l245:
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2080                           
  2081                           ; BSR set to: 1
  2082  00083E  C104  FFD9         	movff	sprintf@ap,fsr2l
  2083  000842  C105  FFDA         	movff	sprintf@ap+1,fsr2h
  2084  000846  CFDE F114          	movff	postinc2,sprintf@fval
  2085  00084A  CFDE F115          	movff	postinc2,sprintf@fval+1
  2086  00084E  CFDE F116          	movff	postinc2,sprintf@fval+2
  2087  000852  CFDE F117          	movff	postinc2,sprintf@fval+3
  2088                           
  2089                           ; BSR set to: 1
  2090  000856  0E04               	movlw	4
  2091  000858  2704               	addwf	sprintf@ap& (0+255),f,b
  2092  00085A  0E00               	movlw	0
  2093  00085C  2305               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2094                           
  2095                           ; BSR set to: 1
  2096                           ;doprnt.c: 831: if(fval < 0.0) {
  2097  00085E  AF17               	btfss	(sprintf@fval+3)& (0+255),7,b
  2098  000860  D015               	goto	l246
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;doprnt.c: 832: fval = -fval;
  2102  000862  C114  F02E         	movff	sprintf@fval,___flneg@f1
  2103  000866  C115  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  2104  00086A  C116  F030         	movff	sprintf@fval+2,___flneg@f1+2
  2105  00086E  C117  F031         	movff	sprintf@fval+3,___flneg@f1+3
  2106  000872  ECF4  F019         	call	___flneg	;wreg free
  2107  000876  C02E  F114         	movff	?___flneg,sprintf@fval
  2108  00087A  C02F  F115         	movff	?___flneg+1,sprintf@fval+1
  2109  00087E  C030  F116         	movff	?___flneg+2,sprintf@fval+2
  2110  000882  C031  F117         	movff	?___flneg+3,sprintf@fval+3
  2111                           
  2112                           ;doprnt.c: 833: flag |= 0x03;
  2113  000886  0E03               	movlw	3
  2114  000888  0101               	movlb	1	; () banked
  2115  00088A  130A               	iorwf	sprintf@flag& (0+255),f,b
  2116  00088C                     l246:
  2117                           
  2118                           ; BSR set to: 1
  2119                           ;doprnt.c: 834: }
  2120                           ;doprnt.c: 835: exp = 0;
  2121                           
  2122                           ; BSR set to: 1
  2123  00088C  0E00               	movlw	0
  2124  00088E  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2125  000890  0E00               	movlw	0
  2126  000892  6F12               	movwf	sprintf@exp& (0+255),b
  2127                           
  2128                           ; BSR set to: 1
  2129                           ;doprnt.c: 836: if( fval!=0) {
  2130  000894  5114               	movf	sprintf@fval& (0+255),w,b
  2131  000896  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2132  000898  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2133  00089A  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2134  00089C  B4D8               	btfsc	status,2,c
  2135  00089E  D082               	goto	l251
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2139  0008A0  3516               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2140  0008A2  3517               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2141  0008A4  0F82               	addlw	130
  2142  0008A6  6F12               	movwf	sprintf@exp& (0+255),b
  2143  0008A8  6B13               	clrf	(sprintf@exp+1)& (0+255),b
  2144  0008AA  0EFF               	movlw	255
  2145  0008AC  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2146                           
  2147                           ; BSR set to: 1
  2148                           ;doprnt.c: 838: exp--;
  2149  0008AE  0712               	decf	sprintf@exp& (0+255),f,b
  2150  0008B0  A0D8               	btfss	status,0,c
  2151  0008B2  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2152                           
  2153                           ; BSR set to: 1
  2154                           ;doprnt.c: 839: exp *= 3;
  2155  0008B4  C112  F02E         	movff	sprintf@exp,___wmul@multiplier
  2156  0008B8  C113  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2157  0008BC  0E00               	movlw	0
  2158  0008BE  6E31               	movwf	___wmul@multiplicand+1,c
  2159  0008C0  0E03               	movlw	3
  2160  0008C2  6E30               	movwf	___wmul@multiplicand,c
  2161  0008C4  EC21  F01A         	call	___wmul	;wreg free
  2162  0008C8  C02E  F112         	movff	?___wmul,sprintf@exp
  2163  0008CC  C02F  F113         	movff	?___wmul+1,sprintf@exp+1
  2164                           
  2165                           ;doprnt.c: 840: exp /= 10;
  2166  0008D0  C112  F034         	movff	sprintf@exp,___awdiv@dividend
  2167  0008D4  C113  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  2168  0008D8  0E00               	movlw	0
  2169  0008DA  6E37               	movwf	___awdiv@divisor+1,c
  2170  0008DC  0E0A               	movlw	10
  2171  0008DE  6E36               	movwf	___awdiv@divisor,c
  2172  0008E0  ECE6  F017         	call	___awdiv	;wreg free
  2173  0008E4  C034  F112         	movff	?___awdiv,sprintf@exp
  2174  0008E8  C035  F113         	movff	?___awdiv+1,sprintf@exp+1
  2175                           
  2176                           ;doprnt.c: 841: if(exp < 0)
  2177  0008EC  0101               	movlb	1	; () banked
  2178  0008EE  AF13               	btfss	(sprintf@exp+1)& (0+255),7,b
  2179  0008F0  D003               	goto	l248
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;doprnt.c: 842: exp--;
  2183  0008F2  0712               	decf	sprintf@exp& (0+255),f,b
  2184  0008F4  A0D8               	btfss	status,0,c
  2185  0008F6  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2186  0008F8                     l248:
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2190                           
  2191                           ; BSR set to: 1
  2192  0008F8  5112               	movf	sprintf@exp& (0+255),w,b
  2193  0008FA  0800               	sublw	0
  2194  0008FC  EC1A  F00B         	call	_scale
  2195  000900  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2196  000904  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2197  000908  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2198  00090C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2199                           
  2200                           ;doprnt.c: 847: tmpval.integ *= fval;
  2201  000910  C10E  F03C         	movff	sprintf@tmpval,___flmul@b
  2202  000914  C10F  F03D         	movff	sprintf@tmpval+1,___flmul@b+1
  2203  000918  C110  F03E         	movff	sprintf@tmpval+2,___flmul@b+2
  2204  00091C  C111  F03F         	movff	sprintf@tmpval+3,___flmul@b+3
  2205  000920  C114  F040         	movff	sprintf@fval,___flmul@a
  2206  000924  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2207  000928  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2208  00092C  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2209  000930  EC42  F00D         	call	___flmul	;wreg free
  2210  000934  C03C  F10E         	movff	?___flmul,sprintf@tmpval
  2211  000938  C03D  F10F         	movff	?___flmul+1,sprintf@tmpval+1
  2212  00093C  C03E  F110         	movff	?___flmul+2,sprintf@tmpval+2
  2213  000940  C03F  F111         	movff	?___flmul+3,sprintf@tmpval+3
  2214                           
  2215                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2216  000944  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2217  000948  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2218  00094C  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2219  000950  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2220  000954  0E00               	movlw	0
  2221  000956  6E32               	movwf	___flge@ff2,c
  2222  000958  0E00               	movlw	0
  2223  00095A  6E33               	movwf	___flge@ff2+1,c
  2224  00095C  0E80               	movlw	128
  2225  00095E  6E34               	movwf	___flge@ff2+2,c
  2226  000960  0E3F               	movlw	63
  2227  000962  6E35               	movwf	___flge@ff2+3,c
  2228  000964  EC96  F015         	call	___flge	;wreg free
  2229  000968  B0D8               	btfsc	status,0,c
  2230  00096A  D005               	goto	l249
  2231                           
  2232                           ;doprnt.c: 849: exp--;
  2233  00096C  0101               	movlb	1	; () banked
  2234  00096E  0712               	decf	sprintf@exp& (0+255),f,b
  2235  000970  A0D8               	btfss	status,0,c
  2236  000972  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2237  000974  D017               	goto	l251
  2238  000976                     l249:
  2239                           
  2240                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2241                           
  2242                           ; BSR set to: 1
  2243  000976  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2244  00097A  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2245  00097E  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2246  000982  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2247  000986  0E00               	movlw	0
  2248  000988  6E32               	movwf	___flge@ff2,c
  2249  00098A  0E00               	movlw	0
  2250  00098C  6E33               	movwf	___flge@ff2+1,c
  2251  00098E  0E20               	movlw	32
  2252  000990  6E34               	movwf	___flge@ff2+2,c
  2253  000992  0E41               	movlw	65
  2254  000994  6E35               	movwf	___flge@ff2+3,c
  2255  000996  EC96  F015         	call	___flge	;wreg free
  2256  00099A  A0D8               	btfss	status,0,c
  2257  00099C  D003               	goto	l251
  2258                           
  2259                           ;doprnt.c: 851: exp++;
  2260  00099E  0101               	movlb	1	; () banked
  2261  0009A0  4B12               	infsnz	sprintf@exp& (0+255),f,b
  2262  0009A2  2B13               	incf	(sprintf@exp+1)& (0+255),f,b
  2263  0009A4                     l251:
  2264                           
  2265                           ;doprnt.c: 852: }
  2266                           ;doprnt.c: 1112: if(prec <= 12)
  2267                           
  2268                           ; BSR set to: 1
  2269                           
  2270                           ; BSR set to: 1
  2271                           
  2272                           ; BSR set to: 1
  2273  0009A4  0101               	movlb	1	; () banked
  2274  0009A6  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2275  0009A8  D006               	goto	u5830
  2276  0009AA  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2277  0009AC  E121               	bnz	l5197
  2278  0009AE  0E0D               	movlw	13
  2279  0009B0  5D18               	subwf	sprintf@prec& (0+255),w,b
  2280  0009B2  B0D8               	btfsc	status,0,c
  2281  0009B4  D01D               	goto	l252
  2282  0009B6                     u5830:
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;doprnt.c: 1113: fval += fround(prec);
  2286  0009B6  C114  F0BA         	movff	sprintf@fval,___fladd@b
  2287  0009BA  C115  F0BB         	movff	sprintf@fval+1,___fladd@b+1
  2288  0009BE  C116  F0BC         	movff	sprintf@fval+2,___fladd@b+2
  2289  0009C2  C117  F0BD         	movff	sprintf@fval+3,___fladd@b+3
  2290  0009C6  5118               	movf	sprintf@prec& (0+255),w,b
  2291  0009C8  ECE5  F011         	call	_fround
  2292  0009CC  C08D  F0BE         	movff	?_fround,___fladd@a
  2293  0009D0  C08E  F0BF         	movff	?_fround+1,___fladd@a+1
  2294  0009D4  C08F  F0C0         	movff	?_fround+2,___fladd@a+2
  2295  0009D8  C090  F0C1         	movff	?_fround+3,___fladd@a+3
  2296  0009DC  ECEB  F00E         	call	___fladd	;wreg free
  2297  0009E0  C0BA  F114         	movff	?___fladd,sprintf@fval
  2298  0009E4  C0BB  F115         	movff	?___fladd+1,sprintf@fval+1
  2299  0009E8  C0BC  F116         	movff	?___fladd+2,sprintf@fval+2
  2300  0009EC  C0BD  F117         	movff	?___fladd+3,sprintf@fval+3
  2301  0009F0                     l252:
  2302  0009F0                     l5197:
  2303                           
  2304                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2305  0009F0  0101               	movlb	1	; () banked
  2306  0009F2  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2307  0009F4  D006               	goto	u5840
  2308  0009F6  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2309  0009F8  E124               	bnz	l5205
  2310  0009FA  0E0A               	movlw	10
  2311  0009FC  5D12               	subwf	sprintf@exp& (0+255),w,b
  2312  0009FE  B0D8               	btfsc	status,0,c
  2313  000A00  D020               	goto	u5870
  2314  000A02                     u5840:
  2315                           
  2316                           ; BSR set to: 1
  2317  000A02  5114               	movf	sprintf@fval& (0+255),w,b
  2318  000A04  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2319  000A06  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2320  000A08  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2321  000A0A  B4D8               	btfsc	status,2,c
  2322  000A0C  D065               	goto	l253
  2323                           
  2324                           ; BSR set to: 1
  2325  000A0E  C114  F096         	movff	sprintf@fval,___fltol@f1
  2326  000A12  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2327  000A16  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2328  000A1A  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2329  000A1E  ECB3  F016         	call	___fltol	;wreg free
  2330  000A22  0100               	movlb	0	; () banked
  2331  000A24  5196               	movf	?___fltol& (0+255),w,b
  2332  000A26  1197               	iorwf	(?___fltol+1)& (0+255),w,b
  2333  000A28  1198               	iorwf	(?___fltol+2)& (0+255),w,b
  2334  000A2A  1199               	iorwf	(?___fltol+3)& (0+255),w,b
  2335  000A2C  A4D8               	btfss	status,2,c
  2336  000A2E  D054               	goto	l253
  2337                           
  2338                           ; BSR set to: 0
  2339  000A30  0101               	movlb	1	; () banked
  2340  000A32  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2341  000A34  D051               	goto	l253
  2342  000A36  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2343  000A38  E104               	bnz	l5205
  2344  000A3A  0E02               	movlw	2
  2345  000A3C  5D12               	subwf	sprintf@exp& (0+255),w,b
  2346  000A3E  A0D8               	btfss	status,0,c
  2347  000A40  D04B               	goto	l253
  2348  000A42                     u5870:
  2349  000A42                     l5205:
  2350                           
  2351                           ; BSR set to: 1
  2352                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2353  000A42  C10E  F02E         	movff	sprintf@tmpval,___flge@ff1
  2354  000A46  C10F  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2355  000A4A  C110  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2356  000A4E  C111  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2357  000A52  0E5F               	movlw	95
  2358  000A54  6E32               	movwf	___flge@ff2,c
  2359  000A56  0E70               	movlw	112
  2360  000A58  6E33               	movwf	___flge@ff2+1,c
  2361  000A5A  0E89               	movlw	137
  2362  000A5C  6E34               	movwf	___flge@ff2+2,c
  2363  000A5E  0E40               	movlw	64
  2364  000A60  6E35               	movwf	___flge@ff2+3,c
  2365  000A62  EC96  F015         	call	___flge	;wreg free
  2366  000A66  B0D8               	btfsc	status,0,c
  2367  000A68  D003               	goto	l256
  2368                           
  2369                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2370  000A6A  0101               	movlb	1	; () banked
  2371  000A6C  0EF7               	movlw	247
  2372  000A6E  D002               	goto	L1
  2373  000A70                     l256:
  2374                           
  2375                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2376                           
  2377                           ; BSR set to: 1
  2378  000A70  0101               	movlb	1	; () banked
  2379  000A72  0EF8               	movlw	248
  2380  000A74                     L1:
  2381  000A74  2712               	addwf	sprintf@exp& (0+255),f,b
  2382  000A76  0EFF               	movlw	255
  2383  000A78  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2387                           
  2388                           ; BSR set to: 1
  2389  000A7A  5112               	movf	sprintf@exp& (0+255),w,b
  2390  000A7C  EC1A  F00B         	call	_scale
  2391  000A80  C08D  F10E         	movff	?_scale,sprintf@tmpval
  2392  000A84  C08E  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2393  000A88  C08F  F110         	movff	?_scale+2,sprintf@tmpval+2
  2394  000A8C  C090  F111         	movff	?_scale+3,sprintf@tmpval+3
  2395  000A90  C114  F02E         	movff	sprintf@fval,__div_to_l_@f1
  2396  000A94  C115  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2397  000A98  C116  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2398  000A9C  C117  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2399  000AA0  C10E  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  2400  000AA4  C10F  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2401  000AA8  C110  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2402  000AAC  C111  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2403  000AB0  EC6F  F014         	call	__div_to_l_	;wreg free
  2404  000AB4  C02E  F106         	movff	?__div_to_l_,sprintf@val
  2405  000AB8  C02F  F107         	movff	?__div_to_l_+1,sprintf@val+1
  2406  000ABC  C030  F108         	movff	?__div_to_l_+2,sprintf@val+2
  2407  000AC0  C031  F109         	movff	?__div_to_l_+3,sprintf@val+3
  2408                           
  2409                           ;doprnt.c: 1129: fval = 0.0;
  2410  000AC4  0E00               	movlw	0
  2411  000AC6  0101               	movlb	1	; () banked
  2412  000AC8  6F14               	movwf	sprintf@fval& (0+255),b
  2413  000ACA  0E00               	movlw	0
  2414  000ACC  6F15               	movwf	(sprintf@fval+1)& (0+255),b
  2415  000ACE  0E00               	movlw	0
  2416  000AD0  6F16               	movwf	(sprintf@fval+2)& (0+255),b
  2417  000AD2  0E00               	movlw	0
  2418  000AD4  6F17               	movwf	(sprintf@fval+3)& (0+255),b
  2419                           
  2420                           ;doprnt.c: 1130: } else {
  2421  000AD6  D03C               	goto	l262
  2422  000AD8                     l253:
  2423                           
  2424                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2425                           
  2426                           ; BSR set to: 1
  2427  000AD8  C114  F096         	movff	sprintf@fval,___fltol@f1
  2428  000ADC  C115  F097         	movff	sprintf@fval+1,___fltol@f1+1
  2429  000AE0  C116  F098         	movff	sprintf@fval+2,___fltol@f1+2
  2430  000AE4  C117  F099         	movff	sprintf@fval+3,___fltol@f1+3
  2431  000AE8  ECB3  F016         	call	___fltol	;wreg free
  2432  000AEC  C096  F106         	movff	?___fltol,sprintf@val
  2433  000AF0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2434  000AF4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2435  000AF8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2436                           
  2437                           ;doprnt.c: 1132: fval -= (double)val;
  2438  000AFC  C114  F0CE         	movff	sprintf@fval,___flsub@b
  2439  000B00  C115  F0CF         	movff	sprintf@fval+1,___flsub@b+1
  2440  000B04  C116  F0D0         	movff	sprintf@fval+2,___flsub@b+2
  2441  000B08  C117  F0D1         	movff	sprintf@fval+3,___flsub@b+3
  2442  000B0C  C106  F02E         	movff	sprintf@val,___xxtofl@val
  2443  000B10  C107  F02F         	movff	sprintf@val+1,___xxtofl@val+1
  2444  000B14  C108  F030         	movff	sprintf@val+2,___xxtofl@val+2
  2445  000B18  C109  F031         	movff	sprintf@val+3,___xxtofl@val+3
  2446  000B1C  0E00               	movlw	0
  2447  000B1E  EC2E  F013         	call	___xxtofl
  2448  000B22  C02E  F0D2         	movff	?___xxtofl,___flsub@a
  2449  000B26  C02F  F0D3         	movff	?___xxtofl+1,___flsub@a+1
  2450  000B2A  C030  F0D4         	movff	?___xxtofl+2,___flsub@a+2
  2451  000B2E  C031  F0D5         	movff	?___xxtofl+3,___flsub@a+3
  2452  000B32  EC22  F019         	call	___flsub	;wreg free
  2453  000B36  C0CE  F114         	movff	?___flsub,sprintf@fval
  2454  000B3A  C0CF  F115         	movff	?___flsub+1,sprintf@fval+1
  2455  000B3E  C0D0  F116         	movff	?___flsub+2,sprintf@fval+2
  2456  000B42  C0D1  F117         	movff	?___flsub+3,sprintf@fval+3
  2457                           
  2458                           ;doprnt.c: 1133: exp = 0;
  2459  000B46  0E00               	movlw	0
  2460  000B48  0101               	movlb	1	; () banked
  2461  000B4A  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2462  000B4C  0E00               	movlw	0
  2463  000B4E  6F12               	movwf	sprintf@exp& (0+255),b
  2464  000B50                     l262:
  2465                           
  2466                           ; BSR set to: 1
  2467                           ;doprnt.c: 1134: }
  2468                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2469                           
  2470                           ; BSR set to: 1
  2471  000B50  0E01               	movlw	1
  2472  000B52  6F1A               	movwf	sprintf@c& (0+255),b
  2473  000B54                     l5225:
  2474                           
  2475                           ; BSR set to: 1
  2476  000B54  0E0A               	movlw	10
  2477  000B56  191A               	xorwf	sprintf@c& (0+255),w,b
  2478  000B58  B4D8               	btfsc	status,2,c
  2479  000B5A  D018               	goto	u5910
  2480                           
  2481                           ; BSR set to: 1
  2482                           ;doprnt.c: 1137: if(val < dpowers[c])
  2483                           
  2484                           ; BSR set to: 1
  2485                           
  2486                           ; BSR set to: 1
  2487  000B5C  511A               	movf	sprintf@c& (0+255),w,b
  2488  000B5E  0D04               	mullw	4
  2489  000B60  0E69               	movlw	low _dpowers
  2490  000B62  24F3               	addwf	prodl,w,c
  2491  000B64  6EF6               	movwf	tblptrl,c
  2492  000B66  0E06               	movlw	high _dpowers
  2493  000B68  20F4               	addwfc	prodh,w,c
  2494  000B6A  6EF7               	movwf	tblptrh,c
  2495  000B6C                     	if	0	;There are less than 3 active tblptr bytes
  2496  000B6C                     	endif
  2497  000B6C  0009               	tblrd		*+
  2498  000B6E  50F5               	movf	tablat,w,c
  2499  000B70  5D06               	subwf	sprintf@val& (0+255),w,b
  2500  000B72  0009               	tblrd		*+
  2501  000B74  50F5               	movf	tablat,w,c
  2502  000B76  5907               	subwfb	(sprintf@val+1)& (0+255),w,b
  2503  000B78  0009               	tblrd		*+
  2504  000B7A  50F5               	movf	tablat,w,c
  2505  000B7C  5908               	subwfb	(sprintf@val+2)& (0+255),w,b
  2506  000B7E  0009               	tblrd		*+
  2507  000B80  50F5               	movf	tablat,w,c
  2508  000B82  5909               	subwfb	(sprintf@val+3)& (0+255),w,b
  2509  000B84  A0D8               	btfss	status,0,c
  2510  000B86  D002               	goto	u5910
  2511                           
  2512                           ; BSR set to: 1
  2513                           
  2514                           ; BSR set to: 1
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;doprnt.c: 1138: break;
  2518  000B88  2B1A               	incf	sprintf@c& (0+255),f,b
  2519  000B8A  D7E4               	goto	l5225
  2520  000B8C                     u5910:
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;doprnt.c: 1142: width -= prec + c + exp;
  2524                           
  2525                           ; BSR set to: 1
  2526  000B8C  C11A  F0DE         	movff	sprintf@c,??_sprintf
  2527  000B90  0100               	movlb	0	; () banked
  2528  000B92  6BDF               	clrf	(??_sprintf+1)& (0+255),b
  2529  000B94  BFDE               	btfsc	??_sprintf& (0+255),7,b
  2530  000B96  07DF               	decf	(??_sprintf+1)& (0+255),f,b
  2531  000B98  0101               	movlb	1	; () banked
  2532  000B9A  5118               	movf	sprintf@prec& (0+255),w,b
  2533  000B9C  0100               	movlb	0	; () banked
  2534  000B9E  27DE               	addwf	??_sprintf& (0+255),f,b
  2535  000BA0  0101               	movlb	1	; () banked
  2536  000BA2  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2537  000BA4  0100               	movlb	0	; () banked
  2538  000BA6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2539  000BA8  0101               	movlb	1	; () banked
  2540  000BAA  5112               	movf	sprintf@exp& (0+255),w,b
  2541  000BAC  0100               	movlb	0	; () banked
  2542  000BAE  27DE               	addwf	??_sprintf& (0+255),f,b
  2543  000BB0  0101               	movlb	1	; () banked
  2544  000BB2  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2545  000BB4  0100               	movlb	0	; () banked
  2546  000BB6  23DF               	addwfc	(??_sprintf+1)& (0+255),f,b
  2547  000BB8  51DE               	movf	??_sprintf& (0+255),w,b
  2548  000BBA  0101               	movlb	1	; () banked
  2549  000BBC  5F0C               	subwf	sprintf@width& (0+255),f,b
  2550  000BBE  0100               	movlb	0	; () banked
  2551  000BC0  51DF               	movf	(??_sprintf+1)& (0+255),w,b
  2552  000BC2  0101               	movlb	1	; () banked
  2553  000BC4  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  2554                           
  2555                           ;doprnt.c: 1143: if(
  2556                           ;doprnt.c: 1147: prec)
  2557  000BC6  5118               	movf	sprintf@prec& (0+255),w,b
  2558  000BC8  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2559  000BCA  B4D8               	btfsc	status,2,c
  2560  000BCC  D003               	goto	l266
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;doprnt.c: 1148: width--;
  2564  000BCE  070C               	decf	sprintf@width& (0+255),f,b
  2565  000BD0  A0D8               	btfss	status,0,c
  2566  000BD2  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2567  000BD4                     l266:
  2568                           
  2569                           ; BSR set to: 1
  2570                           ;doprnt.c: 1149: if(flag & 0x03)
  2571                           
  2572                           ; BSR set to: 1
  2573  000BD4  0E03               	movlw	3
  2574  000BD6  150A               	andwf	sprintf@flag& (0+255),w,b
  2575  000BD8  0100               	movlb	0	; () banked
  2576  000BDA  6FDE               	movwf	??_sprintf& (0+255),b
  2577  000BDC  0E00               	movlw	0
  2578  000BDE  0101               	movlb	1	; () banked
  2579  000BE0  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2580  000BE2  0100               	movlb	0	; () banked
  2581  000BE4  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2582  000BE6  51DE               	movf	??_sprintf& (0+255),w,b
  2583  000BE8  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2584  000BEA  B4D8               	btfsc	status,2,c
  2585  000BEC  D00E               	goto	l268
  2586  000BEE  D009               	goto	l5249
  2587  000BF0                     l5245:
  2588                           
  2589                           ; BSR set to: 1
  2590                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2591  000BF0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2592  000BF4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2593  000BF8  0E20               	movlw	32
  2594  000BFA  6EDF               	movwf	indf2,c
  2595                           
  2596                           ; BSR set to: 1
  2597  000BFC  0100               	movlb	0	; () banked
  2598  000BFE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2599  000C00  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2600  000C02                     l5249:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 1182: width--;
  2604  000C02  0101               	movlb	1	; () banked
  2605  000C04  070C               	decf	sprintf@width& (0+255),f,b
  2606  000C06  A0D8               	btfss	status,0,c
  2607  000C08  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2608  000C0A                     l268:
  2609                           
  2610                           ; BSR set to: 1
  2611  000C0A  0101               	movlb	1	; () banked
  2612  000C0C  BF0D               	btfsc	(sprintf@width+1)& (0+255),7,b
  2613  000C0E  D005               	goto	u5940
  2614  000C10  510D               	movf	(sprintf@width+1)& (0+255),w,b
  2615  000C12  E1EE               	bnz	l5245
  2616  000C14  050C               	decf	sprintf@width& (0+255),w,b
  2617  000C16  B0D8               	btfsc	status,0,c
  2618  000C18  D7EB               	goto	l269
  2619  000C1A                     u5940:
  2620                           
  2621                           ; BSR set to: 1
  2622                           ;doprnt.c: 1183: }
  2623                           ;doprnt.c: 1188: if(flag & 0x03)
  2624                           
  2625                           ; BSR set to: 1
  2626  000C1A  0E03               	movlw	3
  2627  000C1C  150A               	andwf	sprintf@flag& (0+255),w,b
  2628  000C1E  0100               	movlb	0	; () banked
  2629  000C20  6FDE               	movwf	??_sprintf& (0+255),b
  2630  000C22  0E00               	movlw	0
  2631  000C24  0101               	movlb	1	; () banked
  2632  000C26  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2633  000C28  0100               	movlb	0	; () banked
  2634  000C2A  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  2635  000C2C  51DE               	movf	??_sprintf& (0+255),w,b
  2636  000C2E  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  2637  000C30  B4D8               	btfsc	status,2,c
  2638  000C32  D053               	goto	l272
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2642  000C34  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2643  000C38  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2644  000C3C  0E2D               	movlw	45
  2645  000C3E  6EDF               	movwf	indf2,c
  2646  000C40  D04A               	goto	L2
  2647  000C42                     
  2648                           ;doprnt.c: 1200: {
  2649                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2650                           
  2651                           ; BSR set to: 0
  2652  000C42  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2653  000C46  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2654  000C4A  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2655  000C4E  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2656  000C52  0101               	movlb	1	; () banked
  2657  000C54  511A               	movf	sprintf@c& (0+255),w,b
  2658  000C56  0D04               	mullw	4
  2659  000C58  0E69               	movlw	low _dpowers
  2660  000C5A  24F3               	addwf	prodl,w,c
  2661  000C5C  6EF6               	movwf	tblptrl,c
  2662  000C5E  0E06               	movlw	high _dpowers
  2663  000C60  20F4               	addwfc	prodh,w,c
  2664  000C62  6EF7               	movwf	tblptrh,c
  2665  000C64                     	if	0	;There are less than 3 active tblptr bytes
  2666  000C64                     	endif
  2667  000C64  0009               	tblrd		*+
  2668  000C66  CFF5 F032          	movff	tablat,___lldiv@divisor
  2669  000C6A  0009               	tblrd		*+
  2670  000C6C  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2671  000C70  0009               	tblrd		*+
  2672  000C72  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2673  000C76  000A               	tblrd		*-
  2674  000C78  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2675  000C7C  EC28  F018         	call	___lldiv	;wreg free
  2676  000C80  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2677  000C84  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2678  000C88  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2679  000C8C  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2680                           
  2681                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2682  000C90  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2683  000C94  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2684  000C98  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2685  000C9C  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2686  000CA0  0E0A               	movlw	10
  2687  000CA2  6E32               	movwf	___llmod@divisor,c
  2688  000CA4  0E00               	movlw	0
  2689  000CA6  6E33               	movwf	___llmod@divisor+1,c
  2690  000CA8  0E00               	movlw	0
  2691  000CAA  6E34               	movwf	___llmod@divisor+2,c
  2692  000CAC  0E00               	movlw	0
  2693  000CAE  6E35               	movwf	___llmod@divisor+3,c
  2694  000CB0  ECA1  F018         	call	___llmod	;wreg free
  2695  000CB4  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2696  000CB8  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2697  000CBC  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2698  000CC0  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2699                           
  2700                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2701  000CC4  0101               	movlb	1	; () banked
  2702  000CC6  510E               	movf	sprintf@tmpval& (0+255),w,b
  2703  000CC8  0F30               	addlw	48
  2704  000CCA  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2705  000CCE  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2706  000CD2  6EDF               	movwf	indf2,c
  2707                           
  2708                           ; BSR set to: 1
  2709  000CD4  0100               	movlb	0	; () banked
  2710  000CD6                     L2:
  2711  000CD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2712  000CD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2713  000CDA                     l272:
  2714                           
  2715                           ; BSR set to: 0
  2716                           
  2717                           ; BSR set to: 0
  2718  000CDA  0101               	movlb	1	; () banked
  2719  000CDC  071A               	decf	sprintf@c& (0+255),f,b
  2720  000CDE  291A               	incf	sprintf@c& (0+255),w,b
  2721  000CE0  B4D8               	btfsc	status,2,c
  2722  000CE2  D00E               	goto	l275
  2723  000CE4  D7AE               	goto	l273
  2724  000CE6                     l5269:
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2728  000CE6  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2729  000CEA  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2730  000CEE  0E30               	movlw	48
  2731  000CF0  6EDF               	movwf	indf2,c
  2732                           
  2733                           ; BSR set to: 1
  2734  000CF2  0100               	movlb	0	; () banked
  2735  000CF4  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2736  000CF6  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 1209: exp--;
  2740  000CF8  0101               	movlb	1	; () banked
  2741  000CFA  0712               	decf	sprintf@exp& (0+255),f,b
  2742  000CFC  A0D8               	btfss	status,0,c
  2743  000CFE  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2744  000D00                     l275:
  2745                           
  2746                           ; BSR set to: 1
  2747                           
  2748                           ; BSR set to: 1
  2749  000D00  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2750  000D02  D005               	goto	u5970
  2751  000D04  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2752  000D06  E1EF               	bnz	l5269
  2753  000D08  0512               	decf	sprintf@exp& (0+255),w,b
  2754  000D0A  B0D8               	btfsc	status,0,c
  2755  000D0C  D7EC               	goto	l276
  2756  000D0E                     u5970:
  2757                           
  2758                           ; BSR set to: 1
  2759                           ;doprnt.c: 1210: }
  2760                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2761                           
  2762                           ; BSR set to: 1
  2763  000D0E  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2764  000D10  D009               	goto	l278
  2765  000D12  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2766  000D14  E104               	bnz	u5980
  2767  000D16  0E09               	movlw	9
  2768  000D18  5D18               	subwf	sprintf@prec& (0+255),w,b
  2769  000D1A  A0D8               	btfss	status,0,c
  2770  000D1C  D003               	goto	l278
  2771  000D1E                     u5980:
  2772                           
  2773                           ; BSR set to: 1
  2774                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2775  000D1E  0E08               	movlw	8
  2776  000D20  6F1A               	movwf	sprintf@c& (0+255),b
  2777  000D22  D002               	goto	l279
  2778  000D24                     l278:
  2779                           
  2780                           ; BSR set to: 1
  2781                           ;doprnt.c: 1213: else
  2782                           ;doprnt.c: 1214: c = prec;
  2783  000D24  C118  F11A         	movff	sprintf@prec,sprintf@c
  2784  000D28                     l279:
  2785                           
  2786                           ; BSR set to: 1
  2787                           ;doprnt.c: 1215: prec -= c;
  2788                           
  2789                           ; BSR set to: 1
  2790  000D28  511A               	movf	sprintf@c& (0+255),w,b
  2791  000D2A  5F18               	subwf	sprintf@prec& (0+255),f,b
  2792  000D2C  0E00               	movlw	0
  2793  000D2E  BF1A               	btfsc	sprintf@c& (0+255),7,b
  2794  000D30  0EFF               	movlw	255
  2795  000D32  5B19               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2796                           
  2797                           ; BSR set to: 1
  2798                           ;doprnt.c: 1219: if(c)
  2799  000D34  511A               	movf	sprintf@c& (0+255),w,b
  2800  000D36  B4D8               	btfsc	status,2,c
  2801  000D38  D009               	goto	l280
  2802                           
  2803                           ; BSR set to: 1
  2804                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2805  000D3A  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2806  000D3E  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2807  000D42  0E2E               	movlw	46
  2808  000D44  6EDF               	movwf	indf2,c
  2809                           
  2810                           ; BSR set to: 1
  2811  000D46  0100               	movlb	0	; () banked
  2812  000D48  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2813  000D4A  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2814  000D4C                     l280:
  2815                           
  2816                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2817                           
  2818                           ; BSR set to: 0
  2819  000D4C  0101               	movlb	1	; () banked
  2820  000D4E  511A               	movf	sprintf@c& (0+255),w,b
  2821  000D50  EC1A  F00B         	call	_scale
  2822  000D54  C08D  F100         	movff	?_scale,_sprintf$879
  2823  000D58  C08E  F101         	movff	?_scale+1,_sprintf$879+1
  2824  000D5C  C08F  F102         	movff	?_scale+2,_sprintf$879+2
  2825  000D60  C090  F103         	movff	?_scale+3,_sprintf$879+3
  2826                           
  2827                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2828  000D64  C114  F040         	movff	sprintf@fval,___flmul@a
  2829  000D68  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2830  000D6C  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2831  000D70  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2832  000D74  C100  F03C         	movff	_sprintf$879,___flmul@b
  2833  000D78  C101  F03D         	movff	_sprintf$879+1,___flmul@b+1
  2834  000D7C  C102  F03E         	movff	_sprintf$879+2,___flmul@b+2
  2835  000D80  C103  F03F         	movff	_sprintf$879+3,___flmul@b+3
  2836  000D84  EC42  F00D         	call	___flmul	;wreg free
  2837  000D88  C03C  F096         	movff	?___flmul,___fltol@f1
  2838  000D8C  C03D  F097         	movff	?___flmul+1,___fltol@f1+1
  2839  000D90  C03E  F098         	movff	?___flmul+2,___fltol@f1+2
  2840  000D94  C03F  F099         	movff	?___flmul+3,___fltol@f1+3
  2841  000D98  ECB3  F016         	call	___fltol	;wreg free
  2842  000D9C  C096  F106         	movff	?___fltol,sprintf@val
  2843  000DA0  C097  F107         	movff	?___fltol+1,sprintf@val+1
  2844  000DA4  C098  F108         	movff	?___fltol+2,sprintf@val+2
  2845  000DA8  C099  F109         	movff	?___fltol+3,sprintf@val+3
  2846                           
  2847                           ;doprnt.c: 1228: while(c--) {
  2848  000DAC  D073               	goto	l281
  2849  000DAE                     
  2850                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2851  000DAE  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2852  000DB2  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2853  000DB6  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2854  000DBA  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2855  000DBE  0101               	movlb	1	; () banked
  2856  000DC0  511A               	movf	sprintf@c& (0+255),w,b
  2857  000DC2  0D04               	mullw	4
  2858  000DC4  0E69               	movlw	low _dpowers
  2859  000DC6  24F3               	addwf	prodl,w,c
  2860  000DC8  6EF6               	movwf	tblptrl,c
  2861  000DCA  0E06               	movlw	high _dpowers
  2862  000DCC  20F4               	addwfc	prodh,w,c
  2863  000DCE  6EF7               	movwf	tblptrh,c
  2864  000DD0                     	if	0	;There are less than 3 active tblptr bytes
  2865  000DD0                     	endif
  2866  000DD0  0009               	tblrd		*+
  2867  000DD2  CFF5 F032          	movff	tablat,___lldiv@divisor
  2868  000DD6  0009               	tblrd		*+
  2869  000DD8  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2870  000DDC  0009               	tblrd		*+
  2871  000DDE  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2872  000DE2  000A               	tblrd		*-
  2873  000DE4  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2874  000DE8  EC28  F018         	call	___lldiv	;wreg free
  2875  000DEC  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2876  000DF0  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2877  000DF4  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2878  000DF8  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2879                           
  2880                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2881  000DFC  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2882  000E00  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2883  000E04  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2884  000E08  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2885  000E0C  0E0A               	movlw	10
  2886  000E0E  6E32               	movwf	___llmod@divisor,c
  2887  000E10  0E00               	movlw	0
  2888  000E12  6E33               	movwf	___llmod@divisor+1,c
  2889  000E14  0E00               	movlw	0
  2890  000E16  6E34               	movwf	___llmod@divisor+2,c
  2891  000E18  0E00               	movlw	0
  2892  000E1A  6E35               	movwf	___llmod@divisor+3,c
  2893  000E1C  ECA1  F018         	call	___llmod	;wreg free
  2894  000E20  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2895  000E24  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2896  000E28  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2897  000E2C  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2898                           
  2899                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2900  000E30  0101               	movlb	1	; () banked
  2901  000E32  510E               	movf	sprintf@tmpval& (0+255),w,b
  2902  000E34  0F30               	addlw	48
  2903  000E36  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2904  000E3A  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2905  000E3E  6EDF               	movwf	indf2,c
  2906                           
  2907                           ; BSR set to: 1
  2908  000E40  0100               	movlb	0	; () banked
  2909  000E42  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2910  000E44  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;doprnt.c: 1232: val %= dpowers[c];
  2914  000E46  C106  F02E         	movff	sprintf@val,___llmod@dividend
  2915  000E4A  C107  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2916  000E4E  C108  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2917  000E52  C109  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2918  000E56  0101               	movlb	1	; () banked
  2919  000E58  511A               	movf	sprintf@c& (0+255),w,b
  2920  000E5A  0D04               	mullw	4
  2921  000E5C  0E69               	movlw	low _dpowers
  2922  000E5E  24F3               	addwf	prodl,w,c
  2923  000E60  6EF6               	movwf	tblptrl,c
  2924  000E62  0E06               	movlw	high _dpowers
  2925  000E64  20F4               	addwfc	prodh,w,c
  2926  000E66  6EF7               	movwf	tblptrh,c
  2927  000E68                     	if	0	;There are less than 3 active tblptr bytes
  2928  000E68                     	endif
  2929  000E68  0009               	tblrd		*+
  2930  000E6A  CFF5 F032          	movff	tablat,___llmod@divisor
  2931  000E6E  0009               	tblrd		*+
  2932  000E70  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2933  000E74  0009               	tblrd		*+
  2934  000E76  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2935  000E7A  000A               	tblrd		*-
  2936  000E7C  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2937  000E80  ECA1  F018         	call	___llmod	;wreg free
  2938  000E84  C02E  F106         	movff	?___llmod,sprintf@val
  2939  000E88  C02F  F107         	movff	?___llmod+1,sprintf@val+1
  2940  000E8C  C030  F108         	movff	?___llmod+2,sprintf@val+2
  2941  000E90  C031  F109         	movff	?___llmod+3,sprintf@val+3
  2942  000E94                     l281:
  2943  000E94  0101               	movlb	1	; () banked
  2944  000E96  071A               	decf	sprintf@c& (0+255),f,b
  2945  000E98  291A               	incf	sprintf@c& (0+255),w,b
  2946  000E9A  B4D8               	btfsc	status,2,c
  2947  000E9C  D00E               	goto	l284
  2948  000E9E  D787               	goto	l282
  2949  000EA0                     
  2950                           ; BSR set to: 1
  2951                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2952                           
  2953                           ; BSR set to: 1
  2954  000EA0  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  2955  000EA4  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  2956  000EA8  0E30               	movlw	48
  2957  000EAA  6EDF               	movwf	indf2,c
  2958                           
  2959                           ; BSR set to: 1
  2960  000EAC  0100               	movlb	0	; () banked
  2961  000EAE  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  2962  000EB0  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;doprnt.c: 1237: prec--;
  2966  000EB2  0101               	movlb	1	; () banked
  2967  000EB4  0718               	decf	sprintf@prec& (0+255),f,b
  2968  000EB6  A0D8               	btfss	status,0,c
  2969  000EB8  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  2970  000EBA                     l284:
  2971                           
  2972                           ; BSR set to: 1
  2973                           
  2974                           ; BSR set to: 1
  2975  000EBA  5118               	movf	sprintf@prec& (0+255),w,b
  2976  000EBC  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2977  000EBE  B4D8               	btfsc	status,2,c
  2978  000EC0  D0A9               	goto	l300
  2979  000EC2  D7EE               	goto	l285
  2980  000EC4                     l244:
  2981                           
  2982                           ; BSR set to: 1
  2983                           ;doprnt.c: 1246: }
  2984                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2985                           
  2986                           ; BSR set to: 1
  2987  000EC4  5118               	movf	sprintf@prec& (0+255),w,b
  2988  000EC6  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2989  000EC8  A4D8               	btfss	status,2,c
  2990  000ECA  D008               	goto	l287
  2991                           
  2992                           ; BSR set to: 1
  2993  000ECC  5106               	movf	sprintf@val& (0+255),w,b
  2994  000ECE  1107               	iorwf	(sprintf@val+1)& (0+255),w,b
  2995  000ED0  1108               	iorwf	(sprintf@val+2)& (0+255),w,b
  2996  000ED2  1109               	iorwf	(sprintf@val+3)& (0+255),w,b
  2997  000ED4  A4D8               	btfss	status,2,c
  2998  000ED6  D002               	goto	l287
  2999                           
  3000                           ; BSR set to: 1
  3001                           ;doprnt.c: 1291: prec++;
  3002  000ED8  4B18               	infsnz	sprintf@prec& (0+255),f,b
  3003  000EDA  2B19               	incf	(sprintf@prec+1)& (0+255),f,b
  3004  000EDC                     l287:
  3005                           
  3006                           ; BSR set to: 1
  3007                           ;doprnt.c: 1339: if(c < prec)
  3008                           
  3009                           ; BSR set to: 1
  3010  000EDC  0E80               	movlw	128
  3011  000EDE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3012  000EE0  0E7F               	movlw	127
  3013  000EE2  0100               	movlb	0	; () banked
  3014  000EE4  6FDE               	movwf	??_sprintf& (0+255),b
  3015  000EE6  0101               	movlb	1	; () banked
  3016  000EE8  5118               	movf	sprintf@prec& (0+255),w,b
  3017  000EEA  5D1A               	subwf	sprintf@c& (0+255),w,b
  3018  000EEC  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3019  000EEE  0A80               	xorlw	128
  3020  000EF0  0100               	movlb	0	; () banked
  3021  000EF2  59DE               	subwfb	??_sprintf& (0+255),w,b
  3022  000EF4  B0D8               	btfsc	status,0,c
  3023  000EF6  D003               	goto	l288
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;doprnt.c: 1340: c = prec;
  3027  000EF8  C118  F11A         	movff	sprintf@prec,sprintf@c
  3028  000EFC  D015               	goto	l290
  3029  000EFE                     l288:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1341: else if(prec < c)
  3033                           
  3034                           ; BSR set to: 0
  3035  000EFE  0101               	movlb	1	; () banked
  3036  000F00  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3037  000F02  0A80               	xorlw	128
  3038  000F04  0100               	movlb	0	; () banked
  3039  000F06  6FDE               	movwf	??_sprintf& (0+255),b
  3040  000F08  0101               	movlb	1	; () banked
  3041  000F0A  511A               	movf	sprintf@c& (0+255),w,b
  3042  000F0C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3043  000F0E  0E80               	movlw	128
  3044  000F10  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3045  000F12  0E7F               	movlw	127
  3046  000F14  0100               	movlb	0	; () banked
  3047  000F16  59DE               	subwfb	??_sprintf& (0+255),w,b
  3048  000F18  B0D8               	btfsc	status,0,c
  3049  000F1A  D006               	goto	l290
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;doprnt.c: 1342: prec = c;
  3053  000F1C  0101               	movlb	1	; () banked
  3054  000F1E  511A               	movf	sprintf@c& (0+255),w,b
  3055  000F20  6F18               	movwf	sprintf@prec& (0+255),b
  3056  000F22  6B19               	clrf	(sprintf@prec+1)& (0+255),b
  3057  000F24  BF18               	btfsc	sprintf@prec& (0+255),7,b
  3058  000F26  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  3059  000F28                     l290:
  3060                           
  3061                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3062                           
  3063                           ; BSR set to: 1
  3064                           
  3065                           ; BSR set to: 1
  3066  000F28  0101               	movlb	1	; () banked
  3067  000F2A  510C               	movf	sprintf@width& (0+255),w,b
  3068  000F2C  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3069  000F2E  B4D8               	btfsc	status,2,c
  3070  000F30  D011               	goto	l291
  3071                           
  3072                           ; BSR set to: 1
  3073  000F32  0E03               	movlw	3
  3074  000F34  150A               	andwf	sprintf@flag& (0+255),w,b
  3075  000F36  0100               	movlb	0	; () banked
  3076  000F38  6FDE               	movwf	??_sprintf& (0+255),b
  3077  000F3A  0E00               	movlw	0
  3078  000F3C  0101               	movlb	1	; () banked
  3079  000F3E  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3080  000F40  0100               	movlb	0	; () banked
  3081  000F42  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3082  000F44  51DE               	movf	??_sprintf& (0+255),w,b
  3083  000F46  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3084  000F48  B4D8               	btfsc	status,2,c
  3085  000F4A  D004               	goto	l291
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 1346: width--;
  3089  000F4C  0101               	movlb	1	; () banked
  3090  000F4E  070C               	decf	sprintf@width& (0+255),f,b
  3091  000F50  A0D8               	btfss	status,0,c
  3092  000F52  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3093  000F54                     l291:
  3094                           
  3095                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3096                           
  3097                           ; BSR set to: 1
  3098  000F54  0101               	movlb	1	; () banked
  3099  000F56  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  3100  000F58  D018               	goto	l294
  3101                           
  3102                           ; BSR set to: 1
  3103                           ;doprnt.c: 1349: if(width > prec)
  3104  000F5A  510C               	movf	sprintf@width& (0+255),w,b
  3105  000F5C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3106  000F5E  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3107  000F60  0A80               	xorlw	128
  3108  000F62  0100               	movlb	0	; () banked
  3109  000F64  6FDE               	movwf	??_sprintf& (0+255),b
  3110  000F66  0101               	movlb	1	; () banked
  3111  000F68  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3112  000F6A  0A80               	xorlw	128
  3113  000F6C  0100               	movlb	0	; () banked
  3114  000F6E  59DE               	subwfb	??_sprintf& (0+255),w,b
  3115  000F70  B0D8               	btfsc	status,0,c
  3116  000F72  D006               	goto	l293
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;doprnt.c: 1350: width -= prec;
  3120  000F74  0101               	movlb	1	; () banked
  3121  000F76  5118               	movf	sprintf@prec& (0+255),w,b
  3122  000F78  5F0C               	subwf	sprintf@width& (0+255),f,b
  3123  000F7A  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3124  000F7C  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3125  000F7E  D005               	goto	l294
  3126  000F80                     l293:
  3127                           
  3128                           ;doprnt.c: 1351: else
  3129                           ;doprnt.c: 1352: width = 0;
  3130                           
  3131                           ; BSR set to: 1
  3132  000F80  0E00               	movlw	0
  3133  000F82  0101               	movlb	1	; () banked
  3134  000F84  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3135  000F86  0E00               	movlw	0
  3136  000F88  6F0C               	movwf	sprintf@width& (0+255),b
  3137  000F8A                     l294:
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;doprnt.c: 1353: }
  3141                           ;doprnt.c: 1381: if(width > c)
  3142                           
  3143                           ; BSR set to: 1
  3144                           
  3145                           ; BSR set to: 1
  3146  000F8A  0E80               	movlw	128
  3147  000F8C  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3148  000F8E  0E7F               	movlw	127
  3149  000F90  0100               	movlb	0	; () banked
  3150  000F92  6FDE               	movwf	??_sprintf& (0+255),b
  3151  000F94  0101               	movlb	1	; () banked
  3152  000F96  510C               	movf	sprintf@width& (0+255),w,b
  3153  000F98  5D1A               	subwf	sprintf@c& (0+255),w,b
  3154  000F9A  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3155  000F9C  0A80               	xorlw	128
  3156  000F9E  0100               	movlb	0	; () banked
  3157  000FA0  59DE               	subwfb	??_sprintf& (0+255),w,b
  3158  000FA2  B0D8               	btfsc	status,0,c
  3159  000FA4  D008               	goto	l295
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;doprnt.c: 1382: width -= c;
  3163  000FA6  0101               	movlb	1	; () banked
  3164  000FA8  511A               	movf	sprintf@c& (0+255),w,b
  3165  000FAA  5F0C               	subwf	sprintf@width& (0+255),f,b
  3166  000FAC  0E00               	movlw	0
  3167  000FAE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3168  000FB0  0EFF               	movlw	255
  3169  000FB2  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3170  000FB4  D005               	goto	l296
  3171  000FB6                     l295:
  3172                           
  3173                           ;doprnt.c: 1383: else
  3174                           ;doprnt.c: 1384: width = 0;
  3175                           
  3176                           ; BSR set to: 1
  3177  000FB6  0E00               	movlw	0
  3178  000FB8  0101               	movlb	1	; () banked
  3179  000FBA  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3180  000FBC  0E00               	movlw	0
  3181  000FBE  6F0C               	movwf	sprintf@width& (0+255),b
  3182  000FC0                     l296:
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;doprnt.c: 1422: {
  3186                           ;doprnt.c: 1424: if(width
  3187                           ;doprnt.c: 1428: )
  3188                           
  3189                           ; BSR set to: 1
  3190  000FC0  510C               	movf	sprintf@width& (0+255),w,b
  3191  000FC2  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3192  000FC4  B4D8               	btfsc	status,2,c
  3193  000FC6  D011               	goto	u6120
  3194  000FC8                     u6110:
  3195                           
  3196                           ; BSR set to: 1
  3197                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3198                           
  3199                           ; BSR set to: 1
  3200                           
  3201                           ;doprnt.c: 1429: do
  3202  000FC8  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3203  000FCC  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3204  000FD0  0E20               	movlw	32
  3205  000FD2  6EDF               	movwf	indf2,c
  3206                           
  3207                           ; BSR set to: 1
  3208  000FD4  0100               	movlb	0	; () banked
  3209  000FD6  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3210  000FD8  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;doprnt.c: 1431: while(--width);
  3214  000FDA  0101               	movlb	1	; () banked
  3215  000FDC  070C               	decf	sprintf@width& (0+255),f,b
  3216  000FDE  A0D8               	btfss	status,0,c
  3217  000FE0  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3218  000FE2  510C               	movf	sprintf@width& (0+255),w,b
  3219  000FE4  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3220  000FE6  A4D8               	btfss	status,2,c
  3221  000FE8  D7EF               	goto	u6110
  3222  000FEA                     u6120:
  3223                           
  3224                           ; BSR set to: 1
  3225                           ;doprnt.c: 1438: if(flag & 0x03)
  3226                           
  3227                           ; BSR set to: 1
  3228                           
  3229                           ; BSR set to: 1
  3230  000FEA  0E03               	movlw	3
  3231  000FEC  150A               	andwf	sprintf@flag& (0+255),w,b
  3232  000FEE  0100               	movlb	0	; () banked
  3233  000FF0  6FDE               	movwf	??_sprintf& (0+255),b
  3234  000FF2  0E00               	movlw	0
  3235  000FF4  0101               	movlb	1	; () banked
  3236  000FF6  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3237  000FF8  0100               	movlb	0	; () banked
  3238  000FFA  6FDF               	movwf	(??_sprintf+1)& (0+255),b
  3239  000FFC  51DE               	movf	??_sprintf& (0+255),w,b
  3240  000FFE  11DF               	iorwf	(??_sprintf+1)& (0+255),w,b
  3241  001000  B4D8               	btfsc	status,2,c
  3242  001002  D008               	goto	l300
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3246  001004  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3247  001008  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3248  00100C  0E2D               	movlw	45
  3249  00100E  6EDF               	movwf	indf2,c
  3250  001010                     l5359:
  3251                           
  3252                           ; BSR set to: 0
  3253  001010  4BD6               	infsnz	sprintf@sp& (0+255),f,b
  3254  001012  2BD7               	incf	(sprintf@sp+1)& (0+255),f,b
  3255  001014                     l300:
  3256                           
  3257                           ; BSR set to: 0
  3258                           
  3259                           ; BSR set to: 0
  3260  001014  C0D8  FFF6         	movff	sprintf@f,tblptrl
  3261  001018  C0D9  FFF7         	movff	sprintf@f+1,tblptrh
  3262  00101C  0100               	movlb	0	; () banked
  3263  00101E  4BD8               	infsnz	sprintf@f& (0+255),f,b
  3264  001020  2BD9               	incf	(sprintf@f+1)& (0+255),f,b
  3265  001022                     	if	0	;tblptru may be non-zero
  3266  001022                     	endif
  3267  001022                     	if	0	;tblptru may be non-zero
  3268  001022                     	endif
  3269  001022  0008               	tblrd		*
  3270  001024  CFF5 F11A          	movff	tablat,sprintf@c
  3271  001028  0101               	movlb	1	; () banked
  3272  00102A  511A               	movf	sprintf@c& (0+255),w,b
  3273  00102C  A4D8               	btfss	status,2,c
  3274  00102E  EF64  F003         	goto	l228
  3275  001032                     u6140:
  3276                           
  3277                           ; BSR set to: 1
  3278                           ;doprnt.c: 1538: *sp = 0;
  3279                           
  3280                           ; BSR set to: 1
  3281                           
  3282                           ;doprnt.c: 1469: }
  3283                           ;doprnt.c: 1533: }
  3284                           ;doprnt.c: 1535: alldone:
  3285                           
  3286                           ; BSR set to: 1
  3287  001032  C0D6  FFD9         	movff	sprintf@sp,fsr2l
  3288  001036  C0D7  FFDA         	movff	sprintf@sp+1,fsr2h
  3289  00103A  0E00               	movlw	0
  3290  00103C  6EDF               	movwf	indf2,c
  3291  00103E  0012               	return	
  3292  001040                     __end_of_sprintf:
  3293                           	opt stack 0
  3294                           tblptru	equ	0xFF8
  3295                           tblptrh	equ	0xFF7
  3296                           tblptrl	equ	0xFF6
  3297                           tablat	equ	0xFF5
  3298                           prodh	equ	0xFF4
  3299                           prodl	equ	0xFF3
  3300                           intcon	equ	0xFF2
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _scale *****************
  3310 ;; Defined at:
  3311 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  scl             1    wreg     char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  scl             1   21[BANK0 ] char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  4   13[BANK0 ] char 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3325 ;;      Params:         0       4       0       0       0       0       0
  3326 ;;      Locals:         0       5       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0
  3328 ;;      Totals:         0       9       0       0       0       0       0
  3329 ;;Total ram usage:        9 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    3
  3332 ;; This function calls:
  3333 ;;		___awdiv
  3334 ;;		___awmod
  3335 ;;		___flmul
  3336 ;; This function is called by:
  3337 ;;		_sprintf
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text2
  3342  001634                     __ptext2:
  3343                           	opt stack 0
  3344  001634                     _scale:
  3345                           	opt stack 26
  3346                           
  3347                           ; BSR set to: 1
  3348                           ;incstack = 0
  3349                           ;scale@scl stored from wreg
  3350  001634  0100               	movlb	0	; () banked
  3351  001636  6F95               	movwf	scale@scl& (0+255),b
  3352                           
  3353                           ;doprnt.c: 428: if(scl < 0) {
  3354  001638  0100               	movlb	0	; () banked
  3355  00163A  AF95               	btfss	scale@scl& (0+255),7,b
  3356  00163C  D112               	goto	l217
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 429: scl = -scl;
  3360  00163E  6D95               	negf	scale@scl& (0+255),b
  3361                           
  3362                           ;doprnt.c: 430: if(scl>=110)
  3363  001640  5195               	movf	scale@scl& (0+255),w,b
  3364  001642  0A80               	xorlw	128
  3365  001644  0F12               	addlw	-238
  3366  001646  A0D8               	btfss	status,0,c
  3367  001648  D09A               	goto	l218
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3371  00164A  0E00               	movlw	0
  3372  00164C  6E37               	movwf	___awdiv@divisor+1,c
  3373  00164E  0E0A               	movlw	10
  3374  001650  6E36               	movwf	___awdiv@divisor,c
  3375  001652  0E00               	movlw	0
  3376  001654  6E31               	movwf	___awmod@divisor+1,c
  3377  001656  0E64               	movlw	100
  3378  001658  6E30               	movwf	___awmod@divisor,c
  3379  00165A  5195               	movf	scale@scl& (0+255),w,b
  3380  00165C  6E2E               	movwf	___awmod@dividend,c
  3381  00165E  6A2F               	clrf	___awmod@dividend+1,c
  3382  001660  BE2E               	btfsc	___awmod@dividend,7,c
  3383  001662  062F               	decf	___awmod@dividend+1,f,c
  3384  001664  EC69  F018         	call	___awmod	;wreg free
  3385  001668  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3386  00166C  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3387  001670  ECE6  F017         	call	___awdiv	;wreg free
  3388  001674  90D8               	bcf	status,0,c
  3389  001676  3634               	rlcf	?___awdiv,f,c
  3390  001678  3635               	rlcf	?___awdiv+1,f,c
  3391  00167A  90D8               	bcf	status,0,c
  3392  00167C  3634               	rlcf	?___awdiv,f,c
  3393  00167E  3635               	rlcf	?___awdiv+1,f,c
  3394  001680  0E24               	movlw	36
  3395  001682  2634               	addwf	?___awdiv,f,c
  3396  001684  0E00               	movlw	0
  3397  001686  2235               	addwfc	?___awdiv+1,f,c
  3398  001688  0E35               	movlw	low __npowers_
  3399  00168A  2434               	addwf	?___awdiv,w,c
  3400  00168C  6EF6               	movwf	tblptrl,c
  3401  00168E  0E06               	movlw	high __npowers_
  3402  001690  2035               	addwfc	?___awdiv+1,w,c
  3403  001692  6EF7               	movwf	tblptrh,c
  3404  001694                     	if	0	;There are less than 3 active tblptr bytes
  3405  001694                     	endif
  3406  001694  0009               	tblrd		*+
  3407  001696  CFF5 F040          	movff	tablat,___flmul@a
  3408  00169A  0009               	tblrd		*+
  3409  00169C  CFF5 F041          	movff	tablat,___flmul@a+1
  3410  0016A0  0009               	tblrd		*+
  3411  0016A2  CFF5 F042          	movff	tablat,___flmul@a+2
  3412  0016A6  000A               	tblrd		*-
  3413  0016A8  CFF5 F043          	movff	tablat,___flmul@a+3
  3414  0016AC  0E00               	movlw	0
  3415  0016AE  6E37               	movwf	___awdiv@divisor+1,c
  3416  0016B0  0E64               	movlw	100
  3417  0016B2  6E36               	movwf	___awdiv@divisor,c
  3418  0016B4  0100               	movlb	0	; () banked
  3419  0016B6  5195               	movf	scale@scl& (0+255),w,b
  3420  0016B8  6E34               	movwf	___awdiv@dividend,c
  3421  0016BA  6A35               	clrf	___awdiv@dividend+1,c
  3422  0016BC  BE34               	btfsc	___awdiv@dividend,7,c
  3423  0016BE  0635               	decf	___awdiv@dividend+1,f,c
  3424  0016C0  ECE6  F017         	call	___awdiv	;wreg free
  3425  0016C4  90D8               	bcf	status,0,c
  3426  0016C6  3634               	rlcf	?___awdiv,f,c
  3427  0016C8  3635               	rlcf	?___awdiv+1,f,c
  3428  0016CA  90D8               	bcf	status,0,c
  3429  0016CC  3634               	rlcf	?___awdiv,f,c
  3430  0016CE  3635               	rlcf	?___awdiv+1,f,c
  3431  0016D0  0E48               	movlw	72
  3432  0016D2  2634               	addwf	?___awdiv,f,c
  3433  0016D4  0E00               	movlw	0
  3434  0016D6  2235               	addwfc	?___awdiv+1,f,c
  3435  0016D8  0E35               	movlw	low __npowers_
  3436  0016DA  2434               	addwf	?___awdiv,w,c
  3437  0016DC  6EF6               	movwf	tblptrl,c
  3438  0016DE  0E06               	movlw	high __npowers_
  3439  0016E0  2035               	addwfc	?___awdiv+1,w,c
  3440  0016E2  6EF7               	movwf	tblptrh,c
  3441  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  3442  0016E4                     	endif
  3443  0016E4  0009               	tblrd		*+
  3444  0016E6  CFF5 F03C          	movff	tablat,___flmul@b
  3445  0016EA  0009               	tblrd		*+
  3446  0016EC  CFF5 F03D          	movff	tablat,___flmul@b+1
  3447  0016F0  0009               	tblrd		*+
  3448  0016F2  CFF5 F03E          	movff	tablat,___flmul@b+2
  3449  0016F6  000A               	tblrd		*-
  3450  0016F8  CFF5 F03F          	movff	tablat,___flmul@b+3
  3451  0016FC  EC42  F00D         	call	___flmul	;wreg free
  3452  001700  C03C  F091         	movff	?___flmul,_scale$878
  3453  001704  C03D  F092         	movff	?___flmul+1,_scale$878+1
  3454  001708  C03E  F093         	movff	?___flmul+2,_scale$878+2
  3455  00170C  C03F  F094         	movff	?___flmul+3,_scale$878+3
  3456                           
  3457                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3458  001710  C091  F03C         	movff	_scale$878,___flmul@b
  3459  001714  C092  F03D         	movff	_scale$878+1,___flmul@b+1
  3460  001718  C093  F03E         	movff	_scale$878+2,___flmul@b+2
  3461  00171C  C094  F03F         	movff	_scale$878+3,___flmul@b+3
  3462  001720  0E00               	movlw	0
  3463  001722  6E31               	movwf	___awmod@divisor+1,c
  3464  001724  0E0A               	movlw	10
  3465  001726  6E30               	movwf	___awmod@divisor,c
  3466  001728  0100               	movlb	0	; () banked
  3467  00172A  5195               	movf	scale@scl& (0+255),w,b
  3468  00172C  6E2E               	movwf	___awmod@dividend,c
  3469  00172E  6A2F               	clrf	___awmod@dividend+1,c
  3470  001730  BE2E               	btfsc	___awmod@dividend,7,c
  3471  001732  062F               	decf	___awmod@dividend+1,f,c
  3472  001734  EC69  F018         	call	___awmod	;wreg free
  3473  001738  90D8               	bcf	status,0,c
  3474  00173A  362E               	rlcf	?___awmod,f,c
  3475  00173C  362F               	rlcf	?___awmod+1,f,c
  3476  00173E  90D8               	bcf	status,0,c
  3477  001740  362E               	rlcf	?___awmod,f,c
  3478  001742  362F               	rlcf	?___awmod+1,f,c
  3479  001744  0E35               	movlw	low __npowers_
  3480  001746  242E               	addwf	?___awmod,w,c
  3481  001748  6EF6               	movwf	tblptrl,c
  3482  00174A  0E06               	movlw	high __npowers_
  3483  00174C  202F               	addwfc	?___awmod+1,w,c
  3484  00174E  6EF7               	movwf	tblptrh,c
  3485  001750                     	if	0	;There are less than 3 active tblptr bytes
  3486  001750                     	endif
  3487  001750  0009               	tblrd		*+
  3488  001752  CFF5 F040          	movff	tablat,___flmul@a
  3489  001756  0009               	tblrd		*+
  3490  001758  CFF5 F041          	movff	tablat,___flmul@a+1
  3491  00175C  0009               	tblrd		*+
  3492  00175E  CFF5 F042          	movff	tablat,___flmul@a+2
  3493  001762  000A               	tblrd		*-
  3494  001764  CFF5 F043          	movff	tablat,___flmul@a+3
  3495  001768  EC42  F00D         	call	___flmul	;wreg free
  3496  00176C  C03C  F08D         	movff	?___flmul,?_scale
  3497  001770  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3498  001774  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3499  001778  C03F  F090         	movff	?___flmul+3,?_scale+3
  3500  00177C  0012               	return	
  3501  00177E                     l218:
  3502                           
  3503                           ;doprnt.c: 432: else if(scl > 10)
  3504  00177E  0100               	movlb	0	; () banked
  3505  001780  5195               	movf	scale@scl& (0+255),w,b
  3506  001782  0A80               	xorlw	128
  3507  001784  0F75               	addlw	-139
  3508  001786  A0D8               	btfss	status,0,c
  3509  001788  D056               	goto	l221
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3513  00178A  0E00               	movlw	0
  3514  00178C  6E37               	movwf	___awdiv@divisor+1,c
  3515  00178E  0E0A               	movlw	10
  3516  001790  6E36               	movwf	___awdiv@divisor,c
  3517  001792  5195               	movf	scale@scl& (0+255),w,b
  3518  001794  6E34               	movwf	___awdiv@dividend,c
  3519  001796  6A35               	clrf	___awdiv@dividend+1,c
  3520  001798  BE34               	btfsc	___awdiv@dividend,7,c
  3521  00179A  0635               	decf	___awdiv@dividend+1,f,c
  3522  00179C  ECE6  F017         	call	___awdiv	;wreg free
  3523  0017A0  90D8               	bcf	status,0,c
  3524  0017A2  3634               	rlcf	?___awdiv,f,c
  3525  0017A4  3635               	rlcf	?___awdiv+1,f,c
  3526  0017A6  90D8               	bcf	status,0,c
  3527  0017A8  3634               	rlcf	?___awdiv,f,c
  3528  0017AA  3635               	rlcf	?___awdiv+1,f,c
  3529  0017AC  0E24               	movlw	36
  3530  0017AE  2634               	addwf	?___awdiv,f,c
  3531  0017B0  0E00               	movlw	0
  3532  0017B2  2235               	addwfc	?___awdiv+1,f,c
  3533  0017B4  0E35               	movlw	low __npowers_
  3534  0017B6  2434               	addwf	?___awdiv,w,c
  3535  0017B8  6EF6               	movwf	tblptrl,c
  3536  0017BA  0E06               	movlw	high __npowers_
  3537  0017BC  2035               	addwfc	?___awdiv+1,w,c
  3538  0017BE  6EF7               	movwf	tblptrh,c
  3539  0017C0                     	if	0	;There are less than 3 active tblptr bytes
  3540  0017C0                     	endif
  3541  0017C0  0009               	tblrd		*+
  3542  0017C2  CFF5 F03C          	movff	tablat,___flmul@b
  3543  0017C6  0009               	tblrd		*+
  3544  0017C8  CFF5 F03D          	movff	tablat,___flmul@b+1
  3545  0017CC  0009               	tblrd		*+
  3546  0017CE  CFF5 F03E          	movff	tablat,___flmul@b+2
  3547  0017D2  000A               	tblrd		*-
  3548  0017D4  CFF5 F03F          	movff	tablat,___flmul@b+3
  3549  0017D8  0E00               	movlw	0
  3550  0017DA  6E31               	movwf	___awmod@divisor+1,c
  3551  0017DC  0E0A               	movlw	10
  3552  0017DE  6E30               	movwf	___awmod@divisor,c
  3553  0017E0  0100               	movlb	0	; () banked
  3554  0017E2  5195               	movf	scale@scl& (0+255),w,b
  3555  0017E4  6E2E               	movwf	___awmod@dividend,c
  3556  0017E6  6A2F               	clrf	___awmod@dividend+1,c
  3557  0017E8  BE2E               	btfsc	___awmod@dividend,7,c
  3558  0017EA  062F               	decf	___awmod@dividend+1,f,c
  3559  0017EC  EC69  F018         	call	___awmod	;wreg free
  3560  0017F0  90D8               	bcf	status,0,c
  3561  0017F2  362E               	rlcf	?___awmod,f,c
  3562  0017F4  362F               	rlcf	?___awmod+1,f,c
  3563  0017F6  90D8               	bcf	status,0,c
  3564  0017F8  362E               	rlcf	?___awmod,f,c
  3565  0017FA  362F               	rlcf	?___awmod+1,f,c
  3566  0017FC  0E35               	movlw	low __npowers_
  3567  0017FE  242E               	addwf	?___awmod,w,c
  3568  001800  6EF6               	movwf	tblptrl,c
  3569  001802  0E06               	movlw	high __npowers_
  3570  001804  202F               	addwfc	?___awmod+1,w,c
  3571  001806  6EF7               	movwf	tblptrh,c
  3572  001808                     	if	0	;There are less than 3 active tblptr bytes
  3573  001808                     	endif
  3574  001808  0009               	tblrd		*+
  3575  00180A  CFF5 F040          	movff	tablat,___flmul@a
  3576  00180E  0009               	tblrd		*+
  3577  001810  CFF5 F041          	movff	tablat,___flmul@a+1
  3578  001814  0009               	tblrd		*+
  3579  001816  CFF5 F042          	movff	tablat,___flmul@a+2
  3580  00181A  000A               	tblrd		*-
  3581  00181C  CFF5 F043          	movff	tablat,___flmul@a+3
  3582  001820  EC42  F00D         	call	___flmul	;wreg free
  3583  001824  C03C  F08D         	movff	?___flmul,?_scale
  3584  001828  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3585  00182C  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3586  001830  C03F  F090         	movff	?___flmul+3,?_scale+3
  3587  001834  0012               	return	
  3588  001836                     l221:
  3589                           
  3590                           ;doprnt.c: 434: return _npowers_[scl];
  3591  001836  0100               	movlb	0	; () banked
  3592  001838  5195               	movf	scale@scl& (0+255),w,b
  3593  00183A  0D04               	mullw	4
  3594  00183C  0E35               	movlw	low __npowers_
  3595  00183E  24F3               	addwf	prodl,w,c
  3596  001840  6EF6               	movwf	tblptrl,c
  3597  001842  0E06               	movlw	high __npowers_
  3598  001844  20F4               	addwfc	prodh,w,c
  3599  001846  6EF7               	movwf	tblptrh,c
  3600  001848                     	if	0	;There are less than 3 active tblptr bytes
  3601  001848                     	endif
  3602  001848  0009               	tblrd		*+
  3603  00184A  CFF5 F08D          	movff	tablat,?_scale
  3604  00184E  0009               	tblrd		*+
  3605  001850  CFF5 F08E          	movff	tablat,?_scale+1
  3606  001854  0009               	tblrd		*+
  3607  001856  CFF5 F08F          	movff	tablat,?_scale+2
  3608  00185A  000A               	tblrd		*-
  3609  00185C  CFF5 F090          	movff	tablat,?_scale+3
  3610                           
  3611                           ; BSR set to: 0
  3612  001860  0012               	return	
  3613  001862                     l217:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;doprnt.c: 435: }
  3617                           ;doprnt.c: 436: if(scl>=110)
  3618                           
  3619                           ; BSR set to: 0
  3620  001862  5195               	movf	scale@scl& (0+255),w,b
  3621  001864  0A80               	xorlw	128
  3622  001866  0F12               	addlw	-238
  3623  001868  A0D8               	btfss	status,0,c
  3624  00186A  D09A               	goto	l222
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3628  00186C  0E00               	movlw	0
  3629  00186E  6E37               	movwf	___awdiv@divisor+1,c
  3630  001870  0E0A               	movlw	10
  3631  001872  6E36               	movwf	___awdiv@divisor,c
  3632  001874  0E00               	movlw	0
  3633  001876  6E31               	movwf	___awmod@divisor+1,c
  3634  001878  0E64               	movlw	100
  3635  00187A  6E30               	movwf	___awmod@divisor,c
  3636  00187C  5195               	movf	scale@scl& (0+255),w,b
  3637  00187E  6E2E               	movwf	___awmod@dividend,c
  3638  001880  6A2F               	clrf	___awmod@dividend+1,c
  3639  001882  BE2E               	btfsc	___awmod@dividend,7,c
  3640  001884  062F               	decf	___awmod@dividend+1,f,c
  3641  001886  EC69  F018         	call	___awmod	;wreg free
  3642  00188A  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3643  00188E  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3644  001892  ECE6  F017         	call	___awdiv	;wreg free
  3645  001896  90D8               	bcf	status,0,c
  3646  001898  3634               	rlcf	?___awdiv,f,c
  3647  00189A  3635               	rlcf	?___awdiv+1,f,c
  3648  00189C  90D8               	bcf	status,0,c
  3649  00189E  3634               	rlcf	?___awdiv,f,c
  3650  0018A0  3635               	rlcf	?___awdiv+1,f,c
  3651  0018A2  0E24               	movlw	36
  3652  0018A4  2634               	addwf	?___awdiv,f,c
  3653  0018A6  0E00               	movlw	0
  3654  0018A8  2235               	addwfc	?___awdiv+1,f,c
  3655  0018AA  0E01               	movlw	low __powers_
  3656  0018AC  2434               	addwf	?___awdiv,w,c
  3657  0018AE  6EF6               	movwf	tblptrl,c
  3658  0018B0  0E06               	movlw	high __powers_
  3659  0018B2  2035               	addwfc	?___awdiv+1,w,c
  3660  0018B4  6EF7               	movwf	tblptrh,c
  3661  0018B6                     	if	0	;There are less than 3 active tblptr bytes
  3662  0018B6                     	endif
  3663  0018B6  0009               	tblrd		*+
  3664  0018B8  CFF5 F040          	movff	tablat,___flmul@a
  3665  0018BC  0009               	tblrd		*+
  3666  0018BE  CFF5 F041          	movff	tablat,___flmul@a+1
  3667  0018C2  0009               	tblrd		*+
  3668  0018C4  CFF5 F042          	movff	tablat,___flmul@a+2
  3669  0018C8  000A               	tblrd		*-
  3670  0018CA  CFF5 F043          	movff	tablat,___flmul@a+3
  3671  0018CE  0E00               	movlw	0
  3672  0018D0  6E37               	movwf	___awdiv@divisor+1,c
  3673  0018D2  0E64               	movlw	100
  3674  0018D4  6E36               	movwf	___awdiv@divisor,c
  3675  0018D6  0100               	movlb	0	; () banked
  3676  0018D8  5195               	movf	scale@scl& (0+255),w,b
  3677  0018DA  6E34               	movwf	___awdiv@dividend,c
  3678  0018DC  6A35               	clrf	___awdiv@dividend+1,c
  3679  0018DE  BE34               	btfsc	___awdiv@dividend,7,c
  3680  0018E0  0635               	decf	___awdiv@dividend+1,f,c
  3681  0018E2  ECE6  F017         	call	___awdiv	;wreg free
  3682  0018E6  90D8               	bcf	status,0,c
  3683  0018E8  3634               	rlcf	?___awdiv,f,c
  3684  0018EA  3635               	rlcf	?___awdiv+1,f,c
  3685  0018EC  90D8               	bcf	status,0,c
  3686  0018EE  3634               	rlcf	?___awdiv,f,c
  3687  0018F0  3635               	rlcf	?___awdiv+1,f,c
  3688  0018F2  0E48               	movlw	72
  3689  0018F4  2634               	addwf	?___awdiv,f,c
  3690  0018F6  0E00               	movlw	0
  3691  0018F8  2235               	addwfc	?___awdiv+1,f,c
  3692  0018FA  0E01               	movlw	low __powers_
  3693  0018FC  2434               	addwf	?___awdiv,w,c
  3694  0018FE  6EF6               	movwf	tblptrl,c
  3695  001900  0E06               	movlw	high __powers_
  3696  001902  2035               	addwfc	?___awdiv+1,w,c
  3697  001904  6EF7               	movwf	tblptrh,c
  3698  001906                     	if	0	;There are less than 3 active tblptr bytes
  3699  001906                     	endif
  3700  001906  0009               	tblrd		*+
  3701  001908  CFF5 F03C          	movff	tablat,___flmul@b
  3702  00190C  0009               	tblrd		*+
  3703  00190E  CFF5 F03D          	movff	tablat,___flmul@b+1
  3704  001912  0009               	tblrd		*+
  3705  001914  CFF5 F03E          	movff	tablat,___flmul@b+2
  3706  001918  000A               	tblrd		*-
  3707  00191A  CFF5 F03F          	movff	tablat,___flmul@b+3
  3708  00191E  EC42  F00D         	call	___flmul	;wreg free
  3709  001922  C03C  F091         	movff	?___flmul,_scale$878
  3710  001926  C03D  F092         	movff	?___flmul+1,_scale$878+1
  3711  00192A  C03E  F093         	movff	?___flmul+2,_scale$878+2
  3712  00192E  C03F  F094         	movff	?___flmul+3,_scale$878+3
  3713                           
  3714                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3715  001932  C091  F03C         	movff	_scale$878,___flmul@b
  3716  001936  C092  F03D         	movff	_scale$878+1,___flmul@b+1
  3717  00193A  C093  F03E         	movff	_scale$878+2,___flmul@b+2
  3718  00193E  C094  F03F         	movff	_scale$878+3,___flmul@b+3
  3719  001942  0E00               	movlw	0
  3720  001944  6E31               	movwf	___awmod@divisor+1,c
  3721  001946  0E0A               	movlw	10
  3722  001948  6E30               	movwf	___awmod@divisor,c
  3723  00194A  0100               	movlb	0	; () banked
  3724  00194C  5195               	movf	scale@scl& (0+255),w,b
  3725  00194E  6E2E               	movwf	___awmod@dividend,c
  3726  001950  6A2F               	clrf	___awmod@dividend+1,c
  3727  001952  BE2E               	btfsc	___awmod@dividend,7,c
  3728  001954  062F               	decf	___awmod@dividend+1,f,c
  3729  001956  EC69  F018         	call	___awmod	;wreg free
  3730  00195A  90D8               	bcf	status,0,c
  3731  00195C  362E               	rlcf	?___awmod,f,c
  3732  00195E  362F               	rlcf	?___awmod+1,f,c
  3733  001960  90D8               	bcf	status,0,c
  3734  001962  362E               	rlcf	?___awmod,f,c
  3735  001964  362F               	rlcf	?___awmod+1,f,c
  3736  001966  0E01               	movlw	low __powers_
  3737  001968  242E               	addwf	?___awmod,w,c
  3738  00196A  6EF6               	movwf	tblptrl,c
  3739  00196C  0E06               	movlw	high __powers_
  3740  00196E  202F               	addwfc	?___awmod+1,w,c
  3741  001970  6EF7               	movwf	tblptrh,c
  3742  001972                     	if	0	;There are less than 3 active tblptr bytes
  3743  001972                     	endif
  3744  001972  0009               	tblrd		*+
  3745  001974  CFF5 F040          	movff	tablat,___flmul@a
  3746  001978  0009               	tblrd		*+
  3747  00197A  CFF5 F041          	movff	tablat,___flmul@a+1
  3748  00197E  0009               	tblrd		*+
  3749  001980  CFF5 F042          	movff	tablat,___flmul@a+2
  3750  001984  000A               	tblrd		*-
  3751  001986  CFF5 F043          	movff	tablat,___flmul@a+3
  3752  00198A  EC42  F00D         	call	___flmul	;wreg free
  3753  00198E  C03C  F08D         	movff	?___flmul,?_scale
  3754  001992  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3755  001996  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3756  00199A  C03F  F090         	movff	?___flmul+3,?_scale+3
  3757  00199E  0012               	return	
  3758  0019A0                     l222:
  3759                           
  3760                           ;doprnt.c: 438: else if(scl > 10)
  3761  0019A0  0100               	movlb	0	; () banked
  3762  0019A2  5195               	movf	scale@scl& (0+255),w,b
  3763  0019A4  0A80               	xorlw	128
  3764  0019A6  0F75               	addlw	-139
  3765  0019A8  A0D8               	btfss	status,0,c
  3766  0019AA  D056               	goto	l224
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3770  0019AC  0E00               	movlw	0
  3771  0019AE  6E37               	movwf	___awdiv@divisor+1,c
  3772  0019B0  0E0A               	movlw	10
  3773  0019B2  6E36               	movwf	___awdiv@divisor,c
  3774  0019B4  5195               	movf	scale@scl& (0+255),w,b
  3775  0019B6  6E34               	movwf	___awdiv@dividend,c
  3776  0019B8  6A35               	clrf	___awdiv@dividend+1,c
  3777  0019BA  BE34               	btfsc	___awdiv@dividend,7,c
  3778  0019BC  0635               	decf	___awdiv@dividend+1,f,c
  3779  0019BE  ECE6  F017         	call	___awdiv	;wreg free
  3780  0019C2  90D8               	bcf	status,0,c
  3781  0019C4  3634               	rlcf	?___awdiv,f,c
  3782  0019C6  3635               	rlcf	?___awdiv+1,f,c
  3783  0019C8  90D8               	bcf	status,0,c
  3784  0019CA  3634               	rlcf	?___awdiv,f,c
  3785  0019CC  3635               	rlcf	?___awdiv+1,f,c
  3786  0019CE  0E24               	movlw	36
  3787  0019D0  2634               	addwf	?___awdiv,f,c
  3788  0019D2  0E00               	movlw	0
  3789  0019D4  2235               	addwfc	?___awdiv+1,f,c
  3790  0019D6  0E01               	movlw	low __powers_
  3791  0019D8  2434               	addwf	?___awdiv,w,c
  3792  0019DA  6EF6               	movwf	tblptrl,c
  3793  0019DC  0E06               	movlw	high __powers_
  3794  0019DE  2035               	addwfc	?___awdiv+1,w,c
  3795  0019E0  6EF7               	movwf	tblptrh,c
  3796  0019E2                     	if	0	;There are less than 3 active tblptr bytes
  3797  0019E2                     	endif
  3798  0019E2  0009               	tblrd		*+
  3799  0019E4  CFF5 F03C          	movff	tablat,___flmul@b
  3800  0019E8  0009               	tblrd		*+
  3801  0019EA  CFF5 F03D          	movff	tablat,___flmul@b+1
  3802  0019EE  0009               	tblrd		*+
  3803  0019F0  CFF5 F03E          	movff	tablat,___flmul@b+2
  3804  0019F4  000A               	tblrd		*-
  3805  0019F6  CFF5 F03F          	movff	tablat,___flmul@b+3
  3806  0019FA  0E00               	movlw	0
  3807  0019FC  6E31               	movwf	___awmod@divisor+1,c
  3808  0019FE  0E0A               	movlw	10
  3809  001A00  6E30               	movwf	___awmod@divisor,c
  3810  001A02  0100               	movlb	0	; () banked
  3811  001A04  5195               	movf	scale@scl& (0+255),w,b
  3812  001A06  6E2E               	movwf	___awmod@dividend,c
  3813  001A08  6A2F               	clrf	___awmod@dividend+1,c
  3814  001A0A  BE2E               	btfsc	___awmod@dividend,7,c
  3815  001A0C  062F               	decf	___awmod@dividend+1,f,c
  3816  001A0E  EC69  F018         	call	___awmod	;wreg free
  3817  001A12  90D8               	bcf	status,0,c
  3818  001A14  362E               	rlcf	?___awmod,f,c
  3819  001A16  362F               	rlcf	?___awmod+1,f,c
  3820  001A18  90D8               	bcf	status,0,c
  3821  001A1A  362E               	rlcf	?___awmod,f,c
  3822  001A1C  362F               	rlcf	?___awmod+1,f,c
  3823  001A1E  0E01               	movlw	low __powers_
  3824  001A20  242E               	addwf	?___awmod,w,c
  3825  001A22  6EF6               	movwf	tblptrl,c
  3826  001A24  0E06               	movlw	high __powers_
  3827  001A26  202F               	addwfc	?___awmod+1,w,c
  3828  001A28  6EF7               	movwf	tblptrh,c
  3829  001A2A                     	if	0	;There are less than 3 active tblptr bytes
  3830  001A2A                     	endif
  3831  001A2A  0009               	tblrd		*+
  3832  001A2C  CFF5 F040          	movff	tablat,___flmul@a
  3833  001A30  0009               	tblrd		*+
  3834  001A32  CFF5 F041          	movff	tablat,___flmul@a+1
  3835  001A36  0009               	tblrd		*+
  3836  001A38  CFF5 F042          	movff	tablat,___flmul@a+2
  3837  001A3C  000A               	tblrd		*-
  3838  001A3E  CFF5 F043          	movff	tablat,___flmul@a+3
  3839  001A42  EC42  F00D         	call	___flmul	;wreg free
  3840  001A46  C03C  F08D         	movff	?___flmul,?_scale
  3841  001A4A  C03D  F08E         	movff	?___flmul+1,?_scale+1
  3842  001A4E  C03E  F08F         	movff	?___flmul+2,?_scale+2
  3843  001A52  C03F  F090         	movff	?___flmul+3,?_scale+3
  3844  001A56  0012               	return	
  3845  001A58                     l224:
  3846                           
  3847                           ;doprnt.c: 440: return _powers_[scl];
  3848  001A58  0100               	movlb	0	; () banked
  3849  001A5A  5195               	movf	scale@scl& (0+255),w,b
  3850  001A5C  0D04               	mullw	4
  3851  001A5E  0E01               	movlw	low __powers_
  3852  001A60  24F3               	addwf	prodl,w,c
  3853  001A62  6EF6               	movwf	tblptrl,c
  3854  001A64  0E06               	movlw	high __powers_
  3855  001A66  20F4               	addwfc	prodh,w,c
  3856  001A68  6EF7               	movwf	tblptrh,c
  3857  001A6A                     	if	0	;There are less than 3 active tblptr bytes
  3858  001A6A                     	endif
  3859  001A6A  0009               	tblrd		*+
  3860  001A6C  CFF5 F08D          	movff	tablat,?_scale
  3861  001A70  0009               	tblrd		*+
  3862  001A72  CFF5 F08E          	movff	tablat,?_scale+1
  3863  001A76  0009               	tblrd		*+
  3864  001A78  CFF5 F08F          	movff	tablat,?_scale+2
  3865  001A7C  000A               	tblrd		*-
  3866  001A7E  CFF5 F090          	movff	tablat,?_scale+3
  3867  001A82  0012               	return	
  3868  001A84                     __end_of_scale:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _isdigit *****************
  3886 ;; Defined at:
  3887 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  c               1    wreg     unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  c               1   47[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3901 ;;      Params:         0       0       0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0
  3903 ;;      Temps:          1       0       0       0       0       0       0
  3904 ;;      Totals:         3       0       0       0       0       0       0
  3905 ;;Total ram usage:        3 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    2
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_sprintf
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text3
  3916  003468                     __ptext3:
  3917                           	opt stack 0
  3918  003468                     _isdigit:
  3919                           	opt stack 27
  3920                           
  3921                           ;incstack = 0
  3922                           ;isdigit@c stored from wreg
  3923  003468  6E30               	movwf	isdigit@c,c
  3924  00346A  0E00               	movlw	0
  3925  00346C  6E2F               	movwf	_isdigit$523,c
  3926  00346E  0E3A               	movlw	58
  3927  003470  6030               	cpfslt	isdigit@c,c
  3928  003472  D005               	goto	l666
  3929  003474  0E2F               	movlw	47
  3930  003476  6430               	cpfsgt	isdigit@c,c
  3931  003478  D002               	goto	l666
  3932  00347A  0E01               	movlw	1
  3933  00347C  6E2F               	movwf	_isdigit$523,c
  3934  00347E                     l666:
  3935  00347E  C02F  F02E         	movff	_isdigit$523,??_isdigit
  3936  003482  302E               	rrcf	??_isdigit,w,c
  3937  003484  0012               	return	
  3938  003486                     __end_of_isdigit:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8
  3954                           
  3955 ;; *************** function _fround *****************
  3956 ;; Defined at:
  3957 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  prec            1    wreg     unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  prec            1   25[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  4   13[BANK0 ] unsigned char 
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3971 ;;      Params:         0       4       0       0       0       0       0
  3972 ;;      Locals:         0       9       0       0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0
  3974 ;;      Totals:         0      13       0       0       0       0       0
  3975 ;;Total ram usage:       13 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    3
  3978 ;; This function calls:
  3979 ;;		___awdiv
  3980 ;;		___awmod
  3981 ;;		___flmul
  3982 ;; This function is called by:
  3983 ;;		_sprintf
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text4
  3988  0023CA                     __ptext4:
  3989                           	opt stack 0
  3990  0023CA                     _fround:
  3991                           	opt stack 26
  3992                           
  3993                           ;incstack = 0
  3994                           ;fround@prec stored from wreg
  3995  0023CA  0100               	movlb	0	; () banked
  3996  0023CC  6F99               	movwf	fround@prec& (0+255),b
  3997                           
  3998                           ;doprnt.c: 413: if(prec>=110)
  3999  0023CE  0E6D               	movlw	109
  4000  0023D0  0100               	movlb	0	; () banked
  4001  0023D2  6599               	cpfsgt	fround@prec& (0+255),b
  4002  0023D4  D0AC               	goto	l211
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4006  0023D6  0E00               	movlw	0
  4007  0023D8  6E37               	movwf	___awdiv@divisor+1,c
  4008  0023DA  0E0A               	movlw	10
  4009  0023DC  6E36               	movwf	___awdiv@divisor,c
  4010  0023DE  0E00               	movlw	0
  4011  0023E0  6E31               	movwf	___awmod@divisor+1,c
  4012  0023E2  0E64               	movlw	100
  4013  0023E4  6E30               	movwf	___awmod@divisor,c
  4014  0023E6  C099  F02E         	movff	fround@prec,___awmod@dividend
  4015  0023EA  6A2F               	clrf	___awmod@dividend+1,c
  4016  0023EC  EC69  F018         	call	___awmod	;wreg free
  4017  0023F0  C02E  F034         	movff	?___awmod,___awdiv@dividend
  4018  0023F4  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  4019  0023F8  ECE6  F017         	call	___awdiv	;wreg free
  4020  0023FC  90D8               	bcf	status,0,c
  4021  0023FE  3634               	rlcf	?___awdiv,f,c
  4022  002400  3635               	rlcf	?___awdiv+1,f,c
  4023  002402  90D8               	bcf	status,0,c
  4024  002404  3634               	rlcf	?___awdiv,f,c
  4025  002406  3635               	rlcf	?___awdiv+1,f,c
  4026  002408  0E24               	movlw	36
  4027  00240A  2634               	addwf	?___awdiv,f,c
  4028  00240C  0E00               	movlw	0
  4029  00240E  2235               	addwfc	?___awdiv+1,f,c
  4030  002410  0E35               	movlw	low __npowers_
  4031  002412  2434               	addwf	?___awdiv,w,c
  4032  002414  6EF6               	movwf	tblptrl,c
  4033  002416  0E06               	movlw	high __npowers_
  4034  002418  2035               	addwfc	?___awdiv+1,w,c
  4035  00241A  6EF7               	movwf	tblptrh,c
  4036  00241C                     	if	0	;There are less than 3 active tblptr bytes
  4037  00241C                     	endif
  4038  00241C  0009               	tblrd		*+
  4039  00241E  CFF5 F040          	movff	tablat,___flmul@a
  4040  002422  0009               	tblrd		*+
  4041  002424  CFF5 F041          	movff	tablat,___flmul@a+1
  4042  002428  0009               	tblrd		*+
  4043  00242A  CFF5 F042          	movff	tablat,___flmul@a+2
  4044  00242E  000A               	tblrd		*-
  4045  002430  CFF5 F043          	movff	tablat,___flmul@a+3
  4046  002434  0E00               	movlw	0
  4047  002436  6E37               	movwf	___awdiv@divisor+1,c
  4048  002438  0E64               	movlw	100
  4049  00243A  6E36               	movwf	___awdiv@divisor,c
  4050  00243C  C099  F034         	movff	fround@prec,___awdiv@dividend
  4051  002440  6A35               	clrf	___awdiv@dividend+1,c
  4052  002442  ECE6  F017         	call	___awdiv	;wreg free
  4053  002446  90D8               	bcf	status,0,c
  4054  002448  3634               	rlcf	?___awdiv,f,c
  4055  00244A  3635               	rlcf	?___awdiv+1,f,c
  4056  00244C  90D8               	bcf	status,0,c
  4057  00244E  3634               	rlcf	?___awdiv,f,c
  4058  002450  3635               	rlcf	?___awdiv+1,f,c
  4059  002452  0E48               	movlw	72
  4060  002454  2634               	addwf	?___awdiv,f,c
  4061  002456  0E00               	movlw	0
  4062  002458  2235               	addwfc	?___awdiv+1,f,c
  4063  00245A  0E35               	movlw	low __npowers_
  4064  00245C  2434               	addwf	?___awdiv,w,c
  4065  00245E  6EF6               	movwf	tblptrl,c
  4066  002460  0E06               	movlw	high __npowers_
  4067  002462  2035               	addwfc	?___awdiv+1,w,c
  4068  002464  6EF7               	movwf	tblptrh,c
  4069  002466                     	if	0	;There are less than 3 active tblptr bytes
  4070  002466                     	endif
  4071  002466  0009               	tblrd		*+
  4072  002468  CFF5 F03C          	movff	tablat,___flmul@b
  4073  00246C  0009               	tblrd		*+
  4074  00246E  CFF5 F03D          	movff	tablat,___flmul@b+1
  4075  002472  0009               	tblrd		*+
  4076  002474  CFF5 F03E          	movff	tablat,___flmul@b+2
  4077  002478  000A               	tblrd		*-
  4078  00247A  CFF5 F03F          	movff	tablat,___flmul@b+3
  4079  00247E  EC42  F00D         	call	___flmul	;wreg free
  4080  002482  C03C  F095         	movff	?___flmul,_fround$876
  4081  002486  C03D  F096         	movff	?___flmul+1,_fround$876+1
  4082  00248A  C03E  F097         	movff	?___flmul+2,_fround$876+2
  4083  00248E  C03F  F098         	movff	?___flmul+3,_fround$876+3
  4084                           
  4085                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4086  002492  0E00               	movlw	0
  4087  002494  6E31               	movwf	___awmod@divisor+1,c
  4088  002496  0E0A               	movlw	10
  4089  002498  6E30               	movwf	___awmod@divisor,c
  4090  00249A  C099  F02E         	movff	fround@prec,___awmod@dividend
  4091  00249E  6A2F               	clrf	___awmod@dividend+1,c
  4092  0024A0  EC69  F018         	call	___awmod	;wreg free
  4093  0024A4  90D8               	bcf	status,0,c
  4094  0024A6  362E               	rlcf	?___awmod,f,c
  4095  0024A8  362F               	rlcf	?___awmod+1,f,c
  4096  0024AA  90D8               	bcf	status,0,c
  4097  0024AC  362E               	rlcf	?___awmod,f,c
  4098  0024AE  362F               	rlcf	?___awmod+1,f,c
  4099  0024B0  0E35               	movlw	low __npowers_
  4100  0024B2  242E               	addwf	?___awmod,w,c
  4101  0024B4  6EF6               	movwf	tblptrl,c
  4102  0024B6  0E06               	movlw	high __npowers_
  4103  0024B8  202F               	addwfc	?___awmod+1,w,c
  4104  0024BA  6EF7               	movwf	tblptrh,c
  4105  0024BC                     	if	0	;There are less than 3 active tblptr bytes
  4106  0024BC                     	endif
  4107  0024BC  0009               	tblrd		*+
  4108  0024BE  CFF5 F040          	movff	tablat,___flmul@a
  4109  0024C2  0009               	tblrd		*+
  4110  0024C4  CFF5 F041          	movff	tablat,___flmul@a+1
  4111  0024C8  0009               	tblrd		*+
  4112  0024CA  CFF5 F042          	movff	tablat,___flmul@a+2
  4113  0024CE  000A               	tblrd		*-
  4114  0024D0  CFF5 F043          	movff	tablat,___flmul@a+3
  4115  0024D4  C095  F03C         	movff	_fround$876,___flmul@b
  4116  0024D8  C096  F03D         	movff	_fround$876+1,___flmul@b+1
  4117  0024DC  C097  F03E         	movff	_fround$876+2,___flmul@b+2
  4118  0024E0  C098  F03F         	movff	_fround$876+3,___flmul@b+3
  4119  0024E4  EC42  F00D         	call	___flmul	;wreg free
  4120  0024E8  C03C  F091         	movff	?___flmul,_fround$877
  4121  0024EC  C03D  F092         	movff	?___flmul+1,_fround$877+1
  4122  0024F0  C03E  F093         	movff	?___flmul+2,_fround$877+2
  4123  0024F4  C03F  F094         	movff	?___flmul+3,_fround$877+3
  4124                           
  4125                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4126  0024F8  C091  F03C         	movff	_fround$877,___flmul@b
  4127  0024FC  C092  F03D         	movff	_fround$877+1,___flmul@b+1
  4128  002500  C093  F03E         	movff	_fround$877+2,___flmul@b+2
  4129  002504  C094  F03F         	movff	_fround$877+3,___flmul@b+3
  4130  002508  0E00               	movlw	0
  4131  00250A  6E40               	movwf	___flmul@a,c
  4132  00250C  0E00               	movlw	0
  4133  00250E  6E41               	movwf	___flmul@a+1,c
  4134  002510  0E00               	movlw	0
  4135  002512  6E42               	movwf	___flmul@a+2,c
  4136  002514  0E3F               	movlw	63
  4137  002516  6E43               	movwf	___flmul@a+3,c
  4138  002518  EC42  F00D         	call	___flmul	;wreg free
  4139  00251C  C03C  F08D         	movff	?___flmul,?_fround
  4140  002520  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4141  002524  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4142  002528  C03F  F090         	movff	?___flmul+3,?_fround+3
  4143  00252C  0012               	return	
  4144  00252E                     l211:
  4145                           
  4146                           ;doprnt.c: 415: else if(prec > 10)
  4147  00252E  0E0A               	movlw	10
  4148  002530  0100               	movlb	0	; () banked
  4149  002532  6599               	cpfsgt	fround@prec& (0+255),b
  4150  002534  D06B               	goto	l214
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4154  002536  0E00               	movlw	0
  4155  002538  6E31               	movwf	___awmod@divisor+1,c
  4156  00253A  0E0A               	movlw	10
  4157  00253C  6E30               	movwf	___awmod@divisor,c
  4158  00253E  C099  F02E         	movff	fround@prec,___awmod@dividend
  4159  002542  6A2F               	clrf	___awmod@dividend+1,c
  4160  002544  EC69  F018         	call	___awmod	;wreg free
  4161  002548  90D8               	bcf	status,0,c
  4162  00254A  362E               	rlcf	?___awmod,f,c
  4163  00254C  362F               	rlcf	?___awmod+1,f,c
  4164  00254E  90D8               	bcf	status,0,c
  4165  002550  362E               	rlcf	?___awmod,f,c
  4166  002552  362F               	rlcf	?___awmod+1,f,c
  4167  002554  0E35               	movlw	low __npowers_
  4168  002556  242E               	addwf	?___awmod,w,c
  4169  002558  6EF6               	movwf	tblptrl,c
  4170  00255A  0E06               	movlw	high __npowers_
  4171  00255C  202F               	addwfc	?___awmod+1,w,c
  4172  00255E  6EF7               	movwf	tblptrh,c
  4173  002560                     	if	0	;There are less than 3 active tblptr bytes
  4174  002560                     	endif
  4175  002560  0009               	tblrd		*+
  4176  002562  CFF5 F040          	movff	tablat,___flmul@a
  4177  002566  0009               	tblrd		*+
  4178  002568  CFF5 F041          	movff	tablat,___flmul@a+1
  4179  00256C  0009               	tblrd		*+
  4180  00256E  CFF5 F042          	movff	tablat,___flmul@a+2
  4181  002572  000A               	tblrd		*-
  4182  002574  CFF5 F043          	movff	tablat,___flmul@a+3
  4183  002578  0E00               	movlw	0
  4184  00257A  6E37               	movwf	___awdiv@divisor+1,c
  4185  00257C  0E0A               	movlw	10
  4186  00257E  6E36               	movwf	___awdiv@divisor,c
  4187  002580  C099  F034         	movff	fround@prec,___awdiv@dividend
  4188  002584  6A35               	clrf	___awdiv@dividend+1,c
  4189  002586  ECE6  F017         	call	___awdiv	;wreg free
  4190  00258A  90D8               	bcf	status,0,c
  4191  00258C  3634               	rlcf	?___awdiv,f,c
  4192  00258E  3635               	rlcf	?___awdiv+1,f,c
  4193  002590  90D8               	bcf	status,0,c
  4194  002592  3634               	rlcf	?___awdiv,f,c
  4195  002594  3635               	rlcf	?___awdiv+1,f,c
  4196  002596  0E24               	movlw	36
  4197  002598  2634               	addwf	?___awdiv,f,c
  4198  00259A  0E00               	movlw	0
  4199  00259C  2235               	addwfc	?___awdiv+1,f,c
  4200  00259E  0E35               	movlw	low __npowers_
  4201  0025A0  2434               	addwf	?___awdiv,w,c
  4202  0025A2  6EF6               	movwf	tblptrl,c
  4203  0025A4  0E06               	movlw	high __npowers_
  4204  0025A6  2035               	addwfc	?___awdiv+1,w,c
  4205  0025A8  6EF7               	movwf	tblptrh,c
  4206  0025AA                     	if	0	;There are less than 3 active tblptr bytes
  4207  0025AA                     	endif
  4208  0025AA  0009               	tblrd		*+
  4209  0025AC  CFF5 F03C          	movff	tablat,___flmul@b
  4210  0025B0  0009               	tblrd		*+
  4211  0025B2  CFF5 F03D          	movff	tablat,___flmul@b+1
  4212  0025B6  0009               	tblrd		*+
  4213  0025B8  CFF5 F03E          	movff	tablat,___flmul@b+2
  4214  0025BC  000A               	tblrd		*-
  4215  0025BE  CFF5 F03F          	movff	tablat,___flmul@b+3
  4216  0025C2  EC42  F00D         	call	___flmul	;wreg free
  4217  0025C6  C03C  F095         	movff	?___flmul,_fround$876
  4218  0025CA  C03D  F096         	movff	?___flmul+1,_fround$876+1
  4219  0025CE  C03E  F097         	movff	?___flmul+2,_fround$876+2
  4220  0025D2  C03F  F098         	movff	?___flmul+3,_fround$876+3
  4221                           
  4222                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4223  0025D6  C095  F03C         	movff	_fround$876,___flmul@b
  4224  0025DA  C096  F03D         	movff	_fround$876+1,___flmul@b+1
  4225  0025DE  C097  F03E         	movff	_fround$876+2,___flmul@b+2
  4226  0025E2  C098  F03F         	movff	_fround$876+3,___flmul@b+3
  4227  0025E6  0E00               	movlw	0
  4228  0025E8  6E40               	movwf	___flmul@a,c
  4229  0025EA  0E00               	movlw	0
  4230  0025EC  6E41               	movwf	___flmul@a+1,c
  4231  0025EE  0E00               	movlw	0
  4232  0025F0  6E42               	movwf	___flmul@a+2,c
  4233  0025F2  0E3F               	movlw	63
  4234  0025F4  6E43               	movwf	___flmul@a+3,c
  4235  0025F6  EC42  F00D         	call	___flmul	;wreg free
  4236  0025FA  C03C  F08D         	movff	?___flmul,?_fround
  4237  0025FE  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4238  002602  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4239  002606  C03F  F090         	movff	?___flmul+3,?_fround+3
  4240  00260A  0012               	return	
  4241  00260C                     l214:
  4242                           
  4243                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4244  00260C  0100               	movlb	0	; () banked
  4245  00260E  5199               	movf	fround@prec& (0+255),w,b
  4246  002610  0D04               	mullw	4
  4247  002612  0E35               	movlw	low __npowers_
  4248  002614  24F3               	addwf	prodl,w,c
  4249  002616  6EF6               	movwf	tblptrl,c
  4250  002618  0E06               	movlw	high __npowers_
  4251  00261A  20F4               	addwfc	prodh,w,c
  4252  00261C  6EF7               	movwf	tblptrh,c
  4253  00261E                     	if	0	;There are less than 3 active tblptr bytes
  4254  00261E                     	endif
  4255  00261E  0009               	tblrd		*+
  4256  002620  CFF5 F03C          	movff	tablat,___flmul@b
  4257  002624  0009               	tblrd		*+
  4258  002626  CFF5 F03D          	movff	tablat,___flmul@b+1
  4259  00262A  0009               	tblrd		*+
  4260  00262C  CFF5 F03E          	movff	tablat,___flmul@b+2
  4261  002630  000A               	tblrd		*-
  4262  002632  CFF5 F03F          	movff	tablat,___flmul@b+3
  4263  002636  0E00               	movlw	0
  4264  002638  6E40               	movwf	___flmul@a,c
  4265  00263A  0E00               	movlw	0
  4266  00263C  6E41               	movwf	___flmul@a+1,c
  4267  00263E  0E00               	movlw	0
  4268  002640  6E42               	movwf	___flmul@a+2,c
  4269  002642  0E3F               	movlw	63
  4270  002644  6E43               	movwf	___flmul@a+3,c
  4271  002646  EC42  F00D         	call	___flmul	;wreg free
  4272  00264A  C03C  F08D         	movff	?___flmul,?_fround
  4273  00264E  C03D  F08E         	movff	?___flmul+1,?_fround+1
  4274  002652  C03E  F08F         	movff	?___flmul+2,?_fround+2
  4275  002656  C03F  F090         	movff	?___flmul+3,?_fround+3
  4276  00265A  0012               	return	
  4277  00265C                     __end_of_fround:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           intcon	equ	0xFF2
  4286                           postinc0	equ	0xFEE
  4287                           wreg	equ	0xFE8
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function ___awmod *****************
  4295 ;; Defined at:
  4296 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  dividend        2   45[COMRAM] int 
  4299 ;;  divisor         2   47[COMRAM] int 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  sign            1   50[COMRAM] unsigned char 
  4302 ;;  counter         1   49[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2   45[COMRAM] int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4312 ;;      Params:         4       0       0       0       0       0       0
  4313 ;;      Locals:         2       0       0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0
  4315 ;;      Totals:         6       0       0       0       0       0       0
  4316 ;;Total ram usage:        6 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    2
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_fround
  4323 ;;		_scale
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text5
  4328  0030D2                     __ptext5:
  4329                           	opt stack 0
  4330  0030D2                     ___awmod:
  4331                           	opt stack 26
  4332                           
  4333                           ;incstack = 0
  4334  0030D2  0E00               	movlw	0
  4335  0030D4  6E33               	movwf	___awmod@sign,c
  4336  0030D6  AE2F               	btfss	___awmod@dividend+1,7,c
  4337  0030D8  D006               	goto	l483
  4338  0030DA  6C2E               	negf	___awmod@dividend,c
  4339  0030DC  1E2F               	comf	___awmod@dividend+1,f,c
  4340  0030DE  B0D8               	btfsc	status,0,c
  4341  0030E0  2A2F               	incf	___awmod@dividend+1,f,c
  4342  0030E2  0E01               	movlw	1
  4343  0030E4  6E33               	movwf	___awmod@sign,c
  4344  0030E6                     l483:
  4345  0030E6  AE31               	btfss	___awmod@divisor+1,7,c
  4346  0030E8  D004               	goto	l484
  4347  0030EA  6C30               	negf	___awmod@divisor,c
  4348  0030EC  1E31               	comf	___awmod@divisor+1,f,c
  4349  0030EE  B0D8               	btfsc	status,0,c
  4350  0030F0  2A31               	incf	___awmod@divisor+1,f,c
  4351  0030F2                     l484:
  4352  0030F2  5030               	movf	___awmod@divisor,w,c
  4353  0030F4  1031               	iorwf	___awmod@divisor+1,w,c
  4354  0030F6  B4D8               	btfsc	status,2,c
  4355  0030F8  D018               	goto	l491
  4356  0030FA  0E01               	movlw	1
  4357  0030FC  6E32               	movwf	___awmod@counter,c
  4358  0030FE  D004               	goto	l486
  4359  003100  90D8               	bcf	status,0,c
  4360  003102  3630               	rlcf	___awmod@divisor,f,c
  4361  003104  3631               	rlcf	___awmod@divisor+1,f,c
  4362  003106  2A32               	incf	___awmod@counter,f,c
  4363  003108                     l486:
  4364  003108  AE31               	btfss	___awmod@divisor+1,7,c
  4365  00310A  D7FA               	goto	l487
  4366  00310C                     u4900:
  4367  00310C  5030               	movf	___awmod@divisor,w,c
  4368  00310E  5C2E               	subwf	___awmod@dividend,w,c
  4369  003110  5031               	movf	___awmod@divisor+1,w,c
  4370  003112  582F               	subwfb	___awmod@dividend+1,w,c
  4371  003114  A0D8               	btfss	status,0,c
  4372  003116  D004               	goto	l490
  4373  003118  5030               	movf	___awmod@divisor,w,c
  4374  00311A  5E2E               	subwf	___awmod@dividend,f,c
  4375  00311C  5031               	movf	___awmod@divisor+1,w,c
  4376  00311E  5A2F               	subwfb	___awmod@dividend+1,f,c
  4377  003120                     l490:
  4378  003120  90D8               	bcf	status,0,c
  4379  003122  3231               	rrcf	___awmod@divisor+1,f,c
  4380  003124  3230               	rrcf	___awmod@divisor,f,c
  4381  003126  2E32               	decfsz	___awmod@counter,f,c
  4382  003128  D7F1               	goto	u4900
  4383  00312A                     l491:
  4384  00312A  5033               	movf	___awmod@sign,w,c
  4385  00312C  B4D8               	btfsc	status,2,c
  4386  00312E  D004               	goto	l492
  4387  003130  6C2E               	negf	___awmod@dividend,c
  4388  003132  1E2F               	comf	___awmod@dividend+1,f,c
  4389  003134  B0D8               	btfsc	status,0,c
  4390  003136  2A2F               	incf	___awmod@dividend+1,f,c
  4391  003138                     l492:
  4392  003138  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4393  00313C  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4394  003140  0012               	return	
  4395  003142                     __end_of___awmod:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           indf2	equ	0xFDF
  4407                           postinc2	equ	0xFDE
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function ___awdiv *****************
  4413 ;; Defined at:
  4414 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  dividend        2   51[COMRAM] int 
  4417 ;;  divisor         2   53[COMRAM] int 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  quotient        2   57[COMRAM] int 
  4420 ;;  sign            1   56[COMRAM] unsigned char 
  4421 ;;  counter         1   55[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  2   51[COMRAM] int 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4431 ;;      Params:         4       0       0       0       0       0       0
  4432 ;;      Locals:         4       0       0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0
  4434 ;;      Totals:         8       0       0       0       0       0       0
  4435 ;;Total ram usage:        8 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    2
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_fround
  4442 ;;		_scale
  4443 ;;		_sprintf
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text6
  4448  002FCC                     __ptext6:
  4449                           	opt stack 0
  4450  002FCC                     ___awdiv:
  4451                           	opt stack 26
  4452                           
  4453                           ;incstack = 0
  4454  002FCC  0E00               	movlw	0
  4455  002FCE  6E39               	movwf	___awdiv@sign,c
  4456  002FD0  AE37               	btfss	___awdiv@divisor+1,7,c
  4457  002FD2  D006               	goto	l470
  4458  002FD4  6C36               	negf	___awdiv@divisor,c
  4459  002FD6  1E37               	comf	___awdiv@divisor+1,f,c
  4460  002FD8  B0D8               	btfsc	status,0,c
  4461  002FDA  2A37               	incf	___awdiv@divisor+1,f,c
  4462  002FDC  0E01               	movlw	1
  4463  002FDE  6E39               	movwf	___awdiv@sign,c
  4464  002FE0                     l470:
  4465  002FE0  AE35               	btfss	___awdiv@dividend+1,7,c
  4466  002FE2  D006               	goto	l471
  4467  002FE4  6C34               	negf	___awdiv@dividend,c
  4468  002FE6  1E35               	comf	___awdiv@dividend+1,f,c
  4469  002FE8  B0D8               	btfsc	status,0,c
  4470  002FEA  2A35               	incf	___awdiv@dividend+1,f,c
  4471  002FEC  0E01               	movlw	1
  4472  002FEE  1A39               	xorwf	___awdiv@sign,f,c
  4473  002FF0                     l471:
  4474  002FF0  0E00               	movlw	0
  4475  002FF2  6E3B               	movwf	___awdiv@quotient+1,c
  4476  002FF4  0E00               	movlw	0
  4477  002FF6  6E3A               	movwf	___awdiv@quotient,c
  4478  002FF8  5036               	movf	___awdiv@divisor,w,c
  4479  002FFA  1037               	iorwf	___awdiv@divisor+1,w,c
  4480  002FFC  B4D8               	btfsc	status,2,c
  4481  002FFE  D01C               	goto	l478
  4482  003000  0E01               	movlw	1
  4483  003002  6E38               	movwf	___awdiv@counter,c
  4484  003004  D004               	goto	l473
  4485  003006  90D8               	bcf	status,0,c
  4486  003008  3636               	rlcf	___awdiv@divisor,f,c
  4487  00300A  3637               	rlcf	___awdiv@divisor+1,f,c
  4488  00300C  2A38               	incf	___awdiv@counter,f,c
  4489  00300E                     l473:
  4490  00300E  AE37               	btfss	___awdiv@divisor+1,7,c
  4491  003010  D7FA               	goto	l474
  4492  003012                     u4840:
  4493  003012  90D8               	bcf	status,0,c
  4494  003014  363A               	rlcf	___awdiv@quotient,f,c
  4495  003016  363B               	rlcf	___awdiv@quotient+1,f,c
  4496  003018  5036               	movf	___awdiv@divisor,w,c
  4497  00301A  5C34               	subwf	___awdiv@dividend,w,c
  4498  00301C  5037               	movf	___awdiv@divisor+1,w,c
  4499  00301E  5835               	subwfb	___awdiv@dividend+1,w,c
  4500  003020  A0D8               	btfss	status,0,c
  4501  003022  D005               	goto	l477
  4502  003024  5036               	movf	___awdiv@divisor,w,c
  4503  003026  5E34               	subwf	___awdiv@dividend,f,c
  4504  003028  5037               	movf	___awdiv@divisor+1,w,c
  4505  00302A  5A35               	subwfb	___awdiv@dividend+1,f,c
  4506  00302C  803A               	bsf	___awdiv@quotient,0,c
  4507  00302E                     l477:
  4508  00302E  90D8               	bcf	status,0,c
  4509  003030  3237               	rrcf	___awdiv@divisor+1,f,c
  4510  003032  3236               	rrcf	___awdiv@divisor,f,c
  4511  003034  2E38               	decfsz	___awdiv@counter,f,c
  4512  003036  D7ED               	goto	u4840
  4513  003038                     l478:
  4514  003038  5039               	movf	___awdiv@sign,w,c
  4515  00303A  B4D8               	btfsc	status,2,c
  4516  00303C  D004               	goto	l479
  4517  00303E  6C3A               	negf	___awdiv@quotient,c
  4518  003040  1E3B               	comf	___awdiv@quotient+1,f,c
  4519  003042  B0D8               	btfsc	status,0,c
  4520  003044  2A3B               	incf	___awdiv@quotient+1,f,c
  4521  003046                     l479:
  4522  003046  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4523  00304A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4524  00304E  0012               	return	
  4525  003050                     __end_of___awdiv:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           indf2	equ	0xFDF
  4537                           postinc2	equ	0xFDE
  4538                           fsr2h	equ	0xFDA
  4539                           fsr2l	equ	0xFD9
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function __tdiv_to_l_ *****************
  4543 ;; Defined at:
  4544 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;  f1              4   45[COMRAM] float 
  4547 ;;  f2              4   49[COMRAM] float 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  quot            4   56[COMRAM] unsigned long 
  4550 ;;  exp1            1   61[COMRAM] unsigned char 
  4551 ;;  cntr            1   60[COMRAM] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  4   45[COMRAM] unsigned long 
  4554 ;; Registers used:
  4555 ;;		wreg, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4561 ;;      Params:         8       0       0       0       0       0       0
  4562 ;;      Locals:         6       0       0       0       0       0       0
  4563 ;;      Temps:          3       0       0       0       0       0       0
  4564 ;;      Totals:        17       0       0       0       0       0       0
  4565 ;;Total ram usage:       17 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    2
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_sprintf
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text7
  4576  0027AC                     __ptext7:
  4577                           	opt stack 0
  4578  0027AC                     __tdiv_to_l_:
  4579                           	opt stack 27
  4580                           
  4581                           ;incstack = 0
  4582  0027AC  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4583  0027B0  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4584  0027B2  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4585  0027B4  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4586  0027B6  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4587  0027B8  E301               	bnc	u5021
  4588  0027BA  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4589  0027BC                     u5021:
  4590  0027BC  5036               	movf	??__tdiv_to_l_,w,c
  4591  0027BE  6E3E               	movwf	__tdiv_to_l_@exp1,c
  4592  0027C0  503E               	movf	__tdiv_to_l_@exp1,w,c
  4593  0027C2  A4D8               	btfss	status,2,c
  4594  0027C4  D009               	goto	l606
  4595  0027C6  0E00               	movlw	0
  4596  0027C8  6E2E               	movwf	?__tdiv_to_l_,c
  4597  0027CA  0E00               	movlw	0
  4598  0027CC  6E2F               	movwf	?__tdiv_to_l_+1,c
  4599  0027CE  0E00               	movlw	0
  4600  0027D0  6E30               	movwf	?__tdiv_to_l_+2,c
  4601  0027D2  0E00               	movlw	0
  4602  0027D4  6E31               	movwf	?__tdiv_to_l_+3,c
  4603  0027D6  0012               	return	
  4604  0027D8                     l606:
  4605  0027D8  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4606  0027DC  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4607  0027DE  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4608  0027E0  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4609  0027E2  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4610  0027E4  E301               	bnc	u5041
  4611  0027E6  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4612  0027E8                     u5041:
  4613  0027E8  5036               	movf	??__tdiv_to_l_,w,c
  4614  0027EA  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4615  0027EC  503D               	movf	__tdiv_to_l_@cntr,w,c
  4616  0027EE  A4D8               	btfss	status,2,c
  4617  0027F0  D009               	goto	l608
  4618  0027F2  0E00               	movlw	0
  4619  0027F4  6E2E               	movwf	?__tdiv_to_l_,c
  4620  0027F6  0E00               	movlw	0
  4621  0027F8  6E2F               	movwf	?__tdiv_to_l_+1,c
  4622  0027FA  0E00               	movlw	0
  4623  0027FC  6E30               	movwf	?__tdiv_to_l_+2,c
  4624  0027FE  0E00               	movlw	0
  4625  002800  6E31               	movwf	?__tdiv_to_l_+3,c
  4626  002802  0012               	return	
  4627  002804                     l608:
  4628  002804  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4629  002806  0EFF               	movlw	255
  4630  002808  162E               	andwf	__tdiv_to_l_@f1,f,c
  4631  00280A  0EFF               	movlw	255
  4632  00280C  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4633  00280E  0E00               	movlw	0
  4634  002810  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4635  002812  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4636  002814  0EFF               	movlw	255
  4637  002816  1632               	andwf	__tdiv_to_l_@f2,f,c
  4638  002818  0EFF               	movlw	255
  4639  00281A  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4640  00281C  0E00               	movlw	0
  4641  00281E  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4642  002820  0E00               	movlw	0
  4643  002822  6E39               	movwf	__tdiv_to_l_@quot,c
  4644  002824  0E00               	movlw	0
  4645  002826  6E3A               	movwf	__tdiv_to_l_@quot+1,c
  4646  002828  0E00               	movlw	0
  4647  00282A  6E3B               	movwf	__tdiv_to_l_@quot+2,c
  4648  00282C  0E00               	movlw	0
  4649  00282E  6E3C               	movwf	__tdiv_to_l_@quot+3,c
  4650  002830  0E7F               	movlw	127
  4651  002832  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4652  002834  503D               	movf	__tdiv_to_l_@cntr,w,c
  4653  002836  0F98               	addlw	152
  4654  002838  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4655  00283A  0E18               	movlw	24
  4656  00283C  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4657  00283E                     l609:
  4658  00283E  90D8               	bcf	status,0,c
  4659  002840  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4660  002842  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4661  002844  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4662  002846  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4663  002848  5032               	movf	__tdiv_to_l_@f2,w,c
  4664  00284A  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4665  00284C  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4666  00284E  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4667  002850  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4668  002852  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4669  002854  A0D8               	btfss	status,0,c
  4670  002856  D007               	goto	l610
  4671  002858  5032               	movf	__tdiv_to_l_@f2,w,c
  4672  00285A  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4673  00285C  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4674  00285E  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4675  002860  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4676  002862  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4677  002864  8039               	bsf	__tdiv_to_l_@quot,0,c
  4678  002866                     l610:
  4679  002866  90D8               	bcf	status,0,c
  4680  002868  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4681  00286A  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4682  00286C  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4683  00286E  2E3D               	decfsz	__tdiv_to_l_@cntr,f,c
  4684  002870  D7E6               	goto	l609
  4685  002872  AE3E               	btfss	__tdiv_to_l_@exp1,7,c
  4686  002874  D016               	goto	l612
  4687  002876  503E               	movf	__tdiv_to_l_@exp1,w,c
  4688  002878  0A80               	xorlw	128
  4689  00287A  0F97               	addlw	151
  4690  00287C  B0D8               	btfsc	status,0,c
  4691  00287E  D009               	goto	l613
  4692  002880  0E00               	movlw	0
  4693  002882  6E2E               	movwf	?__tdiv_to_l_,c
  4694  002884  0E00               	movlw	0
  4695  002886  6E2F               	movwf	?__tdiv_to_l_+1,c
  4696  002888  0E00               	movlw	0
  4697  00288A  6E30               	movwf	?__tdiv_to_l_+2,c
  4698  00288C  0E00               	movlw	0
  4699  00288E  6E31               	movwf	?__tdiv_to_l_+3,c
  4700  002890  0012               	return	
  4701  002892                     l613:
  4702  002892  90D8               	bcf	status,0,c
  4703  002894  323C               	rrcf	__tdiv_to_l_@quot+3,f,c
  4704  002896  323B               	rrcf	__tdiv_to_l_@quot+2,f,c
  4705  002898  323A               	rrcf	__tdiv_to_l_@quot+1,f,c
  4706  00289A  3239               	rrcf	__tdiv_to_l_@quot,f,c
  4707  00289C  3E3E               	incfsz	__tdiv_to_l_@exp1,f,c
  4708  00289E  D7F9               	goto	l613
  4709  0028A0  D015               	goto	u5100
  4710  0028A2                     l612:
  4711  0028A2  0E17               	movlw	23
  4712  0028A4  643E               	cpfsgt	__tdiv_to_l_@exp1,c
  4713  0028A6  D00F               	goto	l618
  4714  0028A8  0E00               	movlw	0
  4715  0028AA  6E2E               	movwf	?__tdiv_to_l_,c
  4716  0028AC  0E00               	movlw	0
  4717  0028AE  6E2F               	movwf	?__tdiv_to_l_+1,c
  4718  0028B0  0E00               	movlw	0
  4719  0028B2  6E30               	movwf	?__tdiv_to_l_+2,c
  4720  0028B4  0E00               	movlw	0
  4721  0028B6  6E31               	movwf	?__tdiv_to_l_+3,c
  4722  0028B8  0012               	return	
  4723  0028BA  90D8               	bcf	status,0,c
  4724  0028BC  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4725  0028BE  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4726  0028C0  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4727  0028C2  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4728  0028C4  063E               	decf	__tdiv_to_l_@exp1,f,c
  4729  0028C6                     l618:
  4730  0028C6  503E               	movf	__tdiv_to_l_@exp1,w,c
  4731  0028C8  A4D8               	btfss	status,2,c
  4732  0028CA  D7F7               	goto	l619
  4733  0028CC                     u5100:
  4734  0028CC  C039  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4735  0028D0  C03A  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4736  0028D4  C03B  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4737  0028D8  C03C  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4738  0028DC  0012               	return		;funcret
  4739  0028DE                     __end_of__tdiv_to_l_:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           indf2	equ	0xFDF
  4751                           postinc2	equ	0xFDE
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function __div_to_l_ *****************
  4757 ;; Defined at:
  4758 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  f1              4   45[COMRAM] unsigned long 
  4761 ;;  f2              4   49[COMRAM] unsigned long 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  quot            4   53[COMRAM] unsigned long 
  4764 ;;  exp1            1   58[COMRAM] unsigned char 
  4765 ;;  cntr            1   57[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  4   45[COMRAM] unsigned long 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4775 ;;      Params:         8       0       0       0       0       0       0
  4776 ;;      Locals:         6       0       0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0
  4778 ;;      Totals:        14       0       0       0       0       0       0
  4779 ;;Total ram usage:       14 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    2
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_sprintf
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text8
  4790  0028DE                     __ptext8:
  4791                           	opt stack 0
  4792  0028DE                     __div_to_l_:
  4793                           	opt stack 27
  4794                           
  4795                           ;incstack = 0
  4796  0028DE  3430               	rlcf	__div_to_l_@f1+2,w,c
  4797  0028E0  3431               	rlcf	__div_to_l_@f1+3,w,c
  4798  0028E2  6E3B               	movwf	__div_to_l_@exp1,c
  4799  0028E4  503B               	movf	__div_to_l_@exp1,w,c
  4800  0028E6  A4D8               	btfss	status,2,c
  4801  0028E8  D009               	goto	l502
  4802  0028EA  0E00               	movlw	0
  4803  0028EC  6E2E               	movwf	?__div_to_l_,c
  4804  0028EE  0E00               	movlw	0
  4805  0028F0  6E2F               	movwf	?__div_to_l_+1,c
  4806  0028F2  0E00               	movlw	0
  4807  0028F4  6E30               	movwf	?__div_to_l_+2,c
  4808  0028F6  0E00               	movlw	0
  4809  0028F8  6E31               	movwf	?__div_to_l_+3,c
  4810  0028FA  0012               	return	
  4811  0028FC                     l502:
  4812  0028FC  3434               	rlcf	__div_to_l_@f2+2,w,c
  4813  0028FE  3435               	rlcf	__div_to_l_@f2+3,w,c
  4814  002900  6E3A               	movwf	__div_to_l_@cntr,c
  4815  002902  503A               	movf	__div_to_l_@cntr,w,c
  4816  002904  A4D8               	btfss	status,2,c
  4817  002906  D009               	goto	l504
  4818  002908  0E00               	movlw	0
  4819  00290A  6E2E               	movwf	?__div_to_l_,c
  4820  00290C  0E00               	movlw	0
  4821  00290E  6E2F               	movwf	?__div_to_l_+1,c
  4822  002910  0E00               	movlw	0
  4823  002912  6E30               	movwf	?__div_to_l_+2,c
  4824  002914  0E00               	movlw	0
  4825  002916  6E31               	movwf	?__div_to_l_+3,c
  4826  002918  0012               	return	
  4827  00291A                     l504:
  4828  00291A  8E30               	bsf	__div_to_l_@f1+2,7,c
  4829  00291C  0EFF               	movlw	255
  4830  00291E  162E               	andwf	__div_to_l_@f1,f,c
  4831  002920  0EFF               	movlw	255
  4832  002922  162F               	andwf	__div_to_l_@f1+1,f,c
  4833  002924  0EFF               	movlw	255
  4834  002926  1630               	andwf	__div_to_l_@f1+2,f,c
  4835  002928  0E00               	movlw	0
  4836  00292A  1631               	andwf	__div_to_l_@f1+3,f,c
  4837  00292C  8E34               	bsf	__div_to_l_@f2+2,7,c
  4838  00292E  0EFF               	movlw	255
  4839  002930  1632               	andwf	__div_to_l_@f2,f,c
  4840  002932  0EFF               	movlw	255
  4841  002934  1633               	andwf	__div_to_l_@f2+1,f,c
  4842  002936  0EFF               	movlw	255
  4843  002938  1634               	andwf	__div_to_l_@f2+2,f,c
  4844  00293A  0E00               	movlw	0
  4845  00293C  1635               	andwf	__div_to_l_@f2+3,f,c
  4846  00293E  0E00               	movlw	0
  4847  002940  6E36               	movwf	__div_to_l_@quot,c
  4848  002942  0E00               	movlw	0
  4849  002944  6E37               	movwf	__div_to_l_@quot+1,c
  4850  002946  0E00               	movlw	0
  4851  002948  6E38               	movwf	__div_to_l_@quot+2,c
  4852  00294A  0E00               	movlw	0
  4853  00294C  6E39               	movwf	__div_to_l_@quot+3,c
  4854  00294E  0E7F               	movlw	127
  4855  002950  5E3B               	subwf	__div_to_l_@exp1,f,c
  4856  002952  503A               	movf	__div_to_l_@cntr,w,c
  4857  002954  0FA0               	addlw	160
  4858  002956  5E3B               	subwf	__div_to_l_@exp1,f,c
  4859  002958  0E20               	movlw	32
  4860  00295A  6E3A               	movwf	__div_to_l_@cntr,c
  4861  00295C  90D8               	bcf	status,0,c
  4862  00295E  3636               	rlcf	__div_to_l_@quot,f,c
  4863  002960  3637               	rlcf	__div_to_l_@quot+1,f,c
  4864  002962  3638               	rlcf	__div_to_l_@quot+2,f,c
  4865  002964  3639               	rlcf	__div_to_l_@quot+3,f,c
  4866  002966  5032               	movf	__div_to_l_@f2,w,c
  4867  002968  5C2E               	subwf	__div_to_l_@f1,w,c
  4868  00296A  5033               	movf	__div_to_l_@f2+1,w,c
  4869  00296C  582F               	subwfb	__div_to_l_@f1+1,w,c
  4870  00296E  5034               	movf	__div_to_l_@f2+2,w,c
  4871  002970  5830               	subwfb	__div_to_l_@f1+2,w,c
  4872  002972  5035               	movf	__div_to_l_@f2+3,w,c
  4873  002974  5831               	subwfb	__div_to_l_@f1+3,w,c
  4874  002976  A0D8               	btfss	status,0,c
  4875  002978  D009               	goto	l506
  4876  00297A  5032               	movf	__div_to_l_@f2,w,c
  4877  00297C  5E2E               	subwf	__div_to_l_@f1,f,c
  4878  00297E  5033               	movf	__div_to_l_@f2+1,w,c
  4879  002980  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4880  002982  5034               	movf	__div_to_l_@f2+2,w,c
  4881  002984  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4882  002986  5035               	movf	__div_to_l_@f2+3,w,c
  4883  002988  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4884  00298A  8036               	bsf	__div_to_l_@quot,0,c
  4885  00298C                     l506:
  4886  00298C  90D8               	bcf	status,0,c
  4887  00298E  362E               	rlcf	__div_to_l_@f1,f,c
  4888  002990  362F               	rlcf	__div_to_l_@f1+1,f,c
  4889  002992  3630               	rlcf	__div_to_l_@f1+2,f,c
  4890  002994  3631               	rlcf	__div_to_l_@f1+3,f,c
  4891  002996  2E3A               	decfsz	__div_to_l_@cntr,f,c
  4892  002998  D7E1               	goto	l505
  4893  00299A  AE3B               	btfss	__div_to_l_@exp1,7,c
  4894  00299C  D016               	goto	l508
  4895  00299E  503B               	movf	__div_to_l_@exp1,w,c
  4896  0029A0  0A80               	xorlw	128
  4897  0029A2  0F9F               	addlw	159
  4898  0029A4  B0D8               	btfsc	status,0,c
  4899  0029A6  D009               	goto	l509
  4900  0029A8  0E00               	movlw	0
  4901  0029AA  6E2E               	movwf	?__div_to_l_,c
  4902  0029AC  0E00               	movlw	0
  4903  0029AE  6E2F               	movwf	?__div_to_l_+1,c
  4904  0029B0  0E00               	movlw	0
  4905  0029B2  6E30               	movwf	?__div_to_l_+2,c
  4906  0029B4  0E00               	movlw	0
  4907  0029B6  6E31               	movwf	?__div_to_l_+3,c
  4908  0029B8  0012               	return	
  4909  0029BA                     l509:
  4910  0029BA  90D8               	bcf	status,0,c
  4911  0029BC  3239               	rrcf	__div_to_l_@quot+3,f,c
  4912  0029BE  3238               	rrcf	__div_to_l_@quot+2,f,c
  4913  0029C0  3237               	rrcf	__div_to_l_@quot+1,f,c
  4914  0029C2  3236               	rrcf	__div_to_l_@quot,f,c
  4915  0029C4  3E3B               	incfsz	__div_to_l_@exp1,f,c
  4916  0029C6  D7F9               	goto	l509
  4917  0029C8  D015               	goto	u5170
  4918  0029CA                     l508:
  4919  0029CA  0E1F               	movlw	31
  4920  0029CC  643B               	cpfsgt	__div_to_l_@exp1,c
  4921  0029CE  D00F               	goto	l514
  4922  0029D0  0E00               	movlw	0
  4923  0029D2  6E2E               	movwf	?__div_to_l_,c
  4924  0029D4  0E00               	movlw	0
  4925  0029D6  6E2F               	movwf	?__div_to_l_+1,c
  4926  0029D8  0E00               	movlw	0
  4927  0029DA  6E30               	movwf	?__div_to_l_+2,c
  4928  0029DC  0E00               	movlw	0
  4929  0029DE  6E31               	movwf	?__div_to_l_+3,c
  4930  0029E0  0012               	return	
  4931  0029E2  90D8               	bcf	status,0,c
  4932  0029E4  3636               	rlcf	__div_to_l_@quot,f,c
  4933  0029E6  3637               	rlcf	__div_to_l_@quot+1,f,c
  4934  0029E8  3638               	rlcf	__div_to_l_@quot+2,f,c
  4935  0029EA  3639               	rlcf	__div_to_l_@quot+3,f,c
  4936  0029EC  063B               	decf	__div_to_l_@exp1,f,c
  4937  0029EE                     l514:
  4938  0029EE  503B               	movf	__div_to_l_@exp1,w,c
  4939  0029F0  A4D8               	btfss	status,2,c
  4940  0029F2  D7F7               	goto	l515
  4941  0029F4                     u5170:
  4942  0029F4  C036  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4943  0029F8  C037  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4944  0029FC  C038  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4945  002A00  C039  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4946  002A04  0012               	return		;funcret
  4947  002A06                     __end_of__div_to_l_:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function ___wmul *****************
  4965 ;; Defined at:
  4966 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  multiplier      2   45[COMRAM] unsigned int 
  4969 ;;  multiplicand    2   47[COMRAM] unsigned int 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  product         2   49[COMRAM] unsigned int 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  2   45[COMRAM] unsigned int 
  4974 ;; Registers used:
  4975 ;;		wreg, status,2, status,0, prodl, prodh
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4981 ;;      Params:         4       0       0       0       0       0       0
  4982 ;;      Locals:         2       0       0       0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0
  4984 ;;      Totals:         6       0       0       0       0       0       0
  4985 ;;Total ram usage:        6 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    2
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_sprintf
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text9
  4996  003442                     __ptext9:
  4997                           	opt stack 0
  4998  003442                     ___wmul:
  4999                           	opt stack 27
  5000                           
  5001                           ;incstack = 0
  5002  003442  502E               	movf	___wmul@multiplier,w,c
  5003  003444  0230               	mulwf	___wmul@multiplicand,c
  5004  003446  CFF3 F032          	movff	prodl,___wmul@product
  5005  00344A  CFF4 F033          	movff	prodh,___wmul@product+1
  5006  00344E  502E               	movf	___wmul@multiplier,w,c
  5007  003450  0231               	mulwf	___wmul@multiplicand+1,c
  5008  003452  50F3               	movf	prodl,w,c
  5009  003454  2633               	addwf	___wmul@product+1,f,c
  5010  003456  502F               	movf	___wmul@multiplier+1,w,c
  5011  003458  0230               	mulwf	___wmul@multiplicand,c
  5012  00345A  50F3               	movf	prodl,w,c
  5013  00345C  2633               	addwf	___wmul@product+1,f,c
  5014  00345E  C032  F02E         	movff	___wmul@product,?___wmul
  5015  003462  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  5016  003466  0012               	return	
  5017  003468                     __end_of___wmul:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           postinc0	equ	0xFEE
  5027                           wreg	equ	0xFE8
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           fsr2h	equ	0xFDA
  5031                           fsr2l	equ	0xFD9
  5032                           status	equ	0xFD8
  5033                           
  5034 ;; *************** function ___llmod *****************
  5035 ;; Defined at:
  5036 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  dividend        4   45[COMRAM] unsigned long 
  5039 ;;  divisor         4   49[COMRAM] unsigned long 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  counter         1   53[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  4   45[COMRAM] unsigned long 
  5044 ;; Registers used:
  5045 ;;		wreg, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5051 ;;      Params:         8       0       0       0       0       0       0
  5052 ;;      Locals:         1       0       0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0
  5054 ;;      Totals:         9       0       0       0       0       0       0
  5055 ;;Total ram usage:        9 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    2
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_sprintf
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text10
  5066  003142                     __ptext10:
  5067                           	opt stack 0
  5068  003142                     ___llmod:
  5069                           	opt stack 27
  5070                           
  5071                           ;incstack = 0
  5072  003142  5032               	movf	___llmod@divisor,w,c
  5073  003144  1033               	iorwf	___llmod@divisor+1,w,c
  5074  003146  1034               	iorwf	___llmod@divisor+2,w,c
  5075  003148  1035               	iorwf	___llmod@divisor+3,w,c
  5076  00314A  B4D8               	btfsc	status,2,c
  5077  00314C  D024               	goto	l707
  5078  00314E  0E01               	movlw	1
  5079  003150  6E36               	movwf	___llmod@counter,c
  5080  003152  D006               	goto	l702
  5081  003154  90D8               	bcf	status,0,c
  5082  003156  3632               	rlcf	___llmod@divisor,f,c
  5083  003158  3633               	rlcf	___llmod@divisor+1,f,c
  5084  00315A  3634               	rlcf	___llmod@divisor+2,f,c
  5085  00315C  3635               	rlcf	___llmod@divisor+3,f,c
  5086  00315E  2A36               	incf	___llmod@counter,f,c
  5087  003160                     l702:
  5088  003160  AE35               	btfss	___llmod@divisor+3,7,c
  5089  003162  D7F8               	goto	l703
  5090  003164                     u5580:
  5091  003164  5032               	movf	___llmod@divisor,w,c
  5092  003166  5C2E               	subwf	___llmod@dividend,w,c
  5093  003168  5033               	movf	___llmod@divisor+1,w,c
  5094  00316A  582F               	subwfb	___llmod@dividend+1,w,c
  5095  00316C  5034               	movf	___llmod@divisor+2,w,c
  5096  00316E  5830               	subwfb	___llmod@dividend+2,w,c
  5097  003170  5035               	movf	___llmod@divisor+3,w,c
  5098  003172  5831               	subwfb	___llmod@dividend+3,w,c
  5099  003174  A0D8               	btfss	status,0,c
  5100  003176  D008               	goto	l706
  5101  003178  5032               	movf	___llmod@divisor,w,c
  5102  00317A  5E2E               	subwf	___llmod@dividend,f,c
  5103  00317C  5033               	movf	___llmod@divisor+1,w,c
  5104  00317E  5A2F               	subwfb	___llmod@dividend+1,f,c
  5105  003180  5034               	movf	___llmod@divisor+2,w,c
  5106  003182  5A30               	subwfb	___llmod@dividend+2,f,c
  5107  003184  5035               	movf	___llmod@divisor+3,w,c
  5108  003186  5A31               	subwfb	___llmod@dividend+3,f,c
  5109  003188                     l706:
  5110  003188  90D8               	bcf	status,0,c
  5111  00318A  3235               	rrcf	___llmod@divisor+3,f,c
  5112  00318C  3234               	rrcf	___llmod@divisor+2,f,c
  5113  00318E  3233               	rrcf	___llmod@divisor+1,f,c
  5114  003190  3232               	rrcf	___llmod@divisor,f,c
  5115  003192  2E36               	decfsz	___llmod@counter,f,c
  5116  003194  D7E7               	goto	u5580
  5117  003196                     l707:
  5118  003196  C02E  F02E         	movff	___llmod@dividend,?___llmod
  5119  00319A  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  5120  00319E  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  5121  0031A2  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  5122  0031A6  0012               	return		;funcret
  5123  0031A8                     __end_of___llmod:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           intcon	equ	0xFF2
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function ___lldiv *****************
  5141 ;; Defined at:
  5142 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  dividend        4   45[COMRAM] unsigned long 
  5145 ;;  divisor         4   49[COMRAM] unsigned long 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  quotient        4   53[COMRAM] unsigned long 
  5148 ;;  counter         1   57[COMRAM] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  4   45[COMRAM] unsigned long 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5158 ;;      Params:         8       0       0       0       0       0       0
  5159 ;;      Locals:         5       0       0       0       0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0
  5161 ;;      Totals:        13       0       0       0       0       0       0
  5162 ;;Total ram usage:       13 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    2
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_sprintf
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text11
  5173  003050                     __ptext11:
  5174                           	opt stack 0
  5175  003050                     ___lldiv:
  5176                           	opt stack 27
  5177                           
  5178                           ;incstack = 0
  5179  003050  0E00               	movlw	0
  5180  003052  6E36               	movwf	___lldiv@quotient,c
  5181  003054  0E00               	movlw	0
  5182  003056  6E37               	movwf	___lldiv@quotient+1,c
  5183  003058  0E00               	movlw	0
  5184  00305A  6E38               	movwf	___lldiv@quotient+2,c
  5185  00305C  0E00               	movlw	0
  5186  00305E  6E39               	movwf	___lldiv@quotient+3,c
  5187  003060  5032               	movf	___lldiv@divisor,w,c
  5188  003062  1033               	iorwf	___lldiv@divisor+1,w,c
  5189  003064  1034               	iorwf	___lldiv@divisor+2,w,c
  5190  003066  1035               	iorwf	___lldiv@divisor+3,w,c
  5191  003068  B4D8               	btfsc	status,2,c
  5192  00306A  D02A               	goto	l697
  5193  00306C  0E01               	movlw	1
  5194  00306E  6E3A               	movwf	___lldiv@counter,c
  5195  003070  D006               	goto	l692
  5196  003072  90D8               	bcf	status,0,c
  5197  003074  3632               	rlcf	___lldiv@divisor,f,c
  5198  003076  3633               	rlcf	___lldiv@divisor+1,f,c
  5199  003078  3634               	rlcf	___lldiv@divisor+2,f,c
  5200  00307A  3635               	rlcf	___lldiv@divisor+3,f,c
  5201  00307C  2A3A               	incf	___lldiv@counter,f,c
  5202  00307E                     l692:
  5203  00307E  AE35               	btfss	___lldiv@divisor+3,7,c
  5204  003080  D7F8               	goto	l693
  5205  003082                     u5550:
  5206  003082  90D8               	bcf	status,0,c
  5207  003084  3636               	rlcf	___lldiv@quotient,f,c
  5208  003086  3637               	rlcf	___lldiv@quotient+1,f,c
  5209  003088  3638               	rlcf	___lldiv@quotient+2,f,c
  5210  00308A  3639               	rlcf	___lldiv@quotient+3,f,c
  5211  00308C  5032               	movf	___lldiv@divisor,w,c
  5212  00308E  5C2E               	subwf	___lldiv@dividend,w,c
  5213  003090  5033               	movf	___lldiv@divisor+1,w,c
  5214  003092  582F               	subwfb	___lldiv@dividend+1,w,c
  5215  003094  5034               	movf	___lldiv@divisor+2,w,c
  5216  003096  5830               	subwfb	___lldiv@dividend+2,w,c
  5217  003098  5035               	movf	___lldiv@divisor+3,w,c
  5218  00309A  5831               	subwfb	___lldiv@dividend+3,w,c
  5219  00309C  A0D8               	btfss	status,0,c
  5220  00309E  D009               	goto	l696
  5221  0030A0  5032               	movf	___lldiv@divisor,w,c
  5222  0030A2  5E2E               	subwf	___lldiv@dividend,f,c
  5223  0030A4  5033               	movf	___lldiv@divisor+1,w,c
  5224  0030A6  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5225  0030A8  5034               	movf	___lldiv@divisor+2,w,c
  5226  0030AA  5A30               	subwfb	___lldiv@dividend+2,f,c
  5227  0030AC  5035               	movf	___lldiv@divisor+3,w,c
  5228  0030AE  5A31               	subwfb	___lldiv@dividend+3,f,c
  5229  0030B0  8036               	bsf	___lldiv@quotient,0,c
  5230  0030B2                     l696:
  5231  0030B2  90D8               	bcf	status,0,c
  5232  0030B4  3235               	rrcf	___lldiv@divisor+3,f,c
  5233  0030B6  3234               	rrcf	___lldiv@divisor+2,f,c
  5234  0030B8  3233               	rrcf	___lldiv@divisor+1,f,c
  5235  0030BA  3232               	rrcf	___lldiv@divisor,f,c
  5236  0030BC  2E3A               	decfsz	___lldiv@counter,f,c
  5237  0030BE  D7E1               	goto	u5550
  5238  0030C0                     l697:
  5239  0030C0  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5240  0030C4  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5241  0030C8  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5242  0030CC  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5243  0030D0  0012               	return		;funcret
  5244  0030D2                     __end_of___lldiv:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           postinc0	equ	0xFEE
  5254                           wreg	equ	0xFE8
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           
  5261 ;; *************** function ___fltol *****************
  5262 ;; Defined at:
  5263 ;;		line 43 in file "/opt/microchip/xc8/v1.45/sources/common/fltol.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  f1              4   22[BANK0 ] unsigned long 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;  exp1            1   72[COMRAM] unsigned char 
  5268 ;;  sign1           1   71[COMRAM] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  4   22[BANK0 ] long 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5278 ;;      Params:         0       4       0       0       0       0       0
  5279 ;;      Locals:         2       0       0       0       0       0       0
  5280 ;;      Temps:          0       4       0       0       0       0       0
  5281 ;;      Totals:         2       8       0       0       0       0       0
  5282 ;;Total ram usage:       10 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    2
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_sprintf
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text12
  5293  002D66                     __ptext12:
  5294                           	opt stack 0
  5295  002D66                     ___fltol:
  5296                           	opt stack 27
  5297                           
  5298                           ;incstack = 0
  5299  002D66  0100               	movlb	0	; () banked
  5300  002D68  3598               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5301  002D6A  3599               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5302  002D6C  6E49               	movwf	___fltol@exp1,c
  5303  002D6E  5049               	movf	___fltol@exp1,w,c
  5304  002D70  A4D8               	btfss	status,2,c
  5305  002D72  D009               	goto	l549
  5306                           
  5307                           ; BSR set to: 0
  5308  002D74  0E00               	movlw	0
  5309  002D76  6F96               	movwf	?___fltol& (0+255),b
  5310  002D78  0E00               	movlw	0
  5311  002D7A  6F97               	movwf	(?___fltol+1)& (0+255),b
  5312  002D7C  0E00               	movlw	0
  5313  002D7E  6F98               	movwf	(?___fltol+2)& (0+255),b
  5314  002D80  0E00               	movlw	0
  5315  002D82  6F99               	movwf	(?___fltol+3)& (0+255),b
  5316                           
  5317                           ; BSR set to: 0
  5318  002D84  0012               	return	
  5319  002D86                     l549:
  5320                           
  5321                           ; BSR set to: 0
  5322                           
  5323                           ; BSR set to: 0
  5324  002D86  C096  F09A         	movff	___fltol@f1,??___fltol
  5325  002D8A  C097  F09B         	movff	___fltol@f1+1,??___fltol+1
  5326  002D8E  C098  F09C         	movff	___fltol@f1+2,??___fltol+2
  5327  002D92  C099  F09D         	movff	___fltol@f1+3,??___fltol+3
  5328  002D96  0E20               	movlw	32
  5329  002D98  D005               	goto	u5480
  5330  002D9A                     u5485:
  5331  002D9A  90D8               	bcf	status,0,c
  5332  002D9C  339D               	rrcf	(??___fltol+3)& (0+255),f,b
  5333  002D9E  339C               	rrcf	(??___fltol+2)& (0+255),f,b
  5334  002DA0  339B               	rrcf	(??___fltol+1)& (0+255),f,b
  5335  002DA2  339A               	rrcf	??___fltol& (0+255),f,b
  5336  002DA4                     u5480:
  5337  002DA4  2EE8               	decfsz	wreg,f,c
  5338  002DA6  D7F9               	goto	u5485
  5339  002DA8  519A               	movf	??___fltol& (0+255),w,b
  5340  002DAA  6E48               	movwf	___fltol@sign1,c
  5341                           
  5342                           ; BSR set to: 0
  5343  002DAC  8F98               	bsf	(___fltol@f1+2)& (0+255),7,b
  5344                           
  5345                           ; BSR set to: 0
  5346  002DAE  0EFF               	movlw	255
  5347  002DB0  1796               	andwf	___fltol@f1& (0+255),f,b
  5348  002DB2  0EFF               	movlw	255
  5349  002DB4  1797               	andwf	(___fltol@f1+1)& (0+255),f,b
  5350  002DB6  0EFF               	movlw	255
  5351  002DB8  1798               	andwf	(___fltol@f1+2)& (0+255),f,b
  5352  002DBA  0E00               	movlw	0
  5353  002DBC  1799               	andwf	(___fltol@f1+3)& (0+255),f,b
  5354                           
  5355                           ; BSR set to: 0
  5356  002DBE  0E96               	movlw	150
  5357  002DC0  5E49               	subwf	___fltol@exp1,f,c
  5358                           
  5359                           ; BSR set to: 0
  5360  002DC2  AE49               	btfss	___fltol@exp1,7,c
  5361  002DC4  D016               	goto	l551
  5362                           
  5363                           ; BSR set to: 0
  5364  002DC6  5049               	movf	___fltol@exp1,w,c
  5365  002DC8  0A80               	xorlw	128
  5366  002DCA  0F97               	addlw	151
  5367  002DCC  B0D8               	btfsc	status,0,c
  5368  002DCE  D009               	goto	l552
  5369                           
  5370                           ; BSR set to: 0
  5371  002DD0  0E00               	movlw	0
  5372  002DD2  6F96               	movwf	?___fltol& (0+255),b
  5373  002DD4  0E00               	movlw	0
  5374  002DD6  6F97               	movwf	(?___fltol+1)& (0+255),b
  5375  002DD8  0E00               	movlw	0
  5376  002DDA  6F98               	movwf	(?___fltol+2)& (0+255),b
  5377  002DDC  0E00               	movlw	0
  5378  002DDE  6F99               	movwf	(?___fltol+3)& (0+255),b
  5379                           
  5380                           ; BSR set to: 0
  5381  002DE0  0012               	return	
  5382  002DE2                     l552:
  5383                           
  5384                           ; BSR set to: 0
  5385                           
  5386                           ; BSR set to: 0
  5387                           
  5388                           ; BSR set to: 0
  5389  002DE2  90D8               	bcf	status,0,c
  5390  002DE4  3399               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5391  002DE6  3398               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5392  002DE8  3397               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5393  002DEA  3396               	rrcf	___fltol@f1& (0+255),f,b
  5394                           
  5395                           ; BSR set to: 0
  5396  002DEC  3E49               	incfsz	___fltol@exp1,f,c
  5397  002DEE  D7F9               	goto	l552
  5398                           
  5399                           ; BSR set to: 0
  5400  002DF0  D015               	goto	u5520
  5401  002DF2                     l551:
  5402                           
  5403                           ; BSR set to: 0
  5404                           
  5405                           ; BSR set to: 0
  5406  002DF2  0E1F               	movlw	31
  5407  002DF4  6449               	cpfsgt	___fltol@exp1,c
  5408  002DF6  D00F               	goto	l557
  5409                           
  5410                           ; BSR set to: 0
  5411  002DF8  0E00               	movlw	0
  5412  002DFA  6F96               	movwf	?___fltol& (0+255),b
  5413  002DFC  0E00               	movlw	0
  5414  002DFE  6F97               	movwf	(?___fltol+1)& (0+255),b
  5415  002E00  0E00               	movlw	0
  5416  002E02  6F98               	movwf	(?___fltol+2)& (0+255),b
  5417  002E04  0E00               	movlw	0
  5418  002E06  6F99               	movwf	(?___fltol+3)& (0+255),b
  5419                           
  5420                           ; BSR set to: 0
  5421  002E08  0012               	return	
  5422  002E0A                     
  5423                           ; BSR set to: 0
  5424                           
  5425                           ; BSR set to: 0
  5426  002E0A  90D8               	bcf	status,0,c
  5427  002E0C  3796               	rlcf	___fltol@f1& (0+255),f,b
  5428  002E0E  3797               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5429  002E10  3798               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5430  002E12  3799               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5431  002E14  0649               	decf	___fltol@exp1,f,c
  5432  002E16                     l557:
  5433                           
  5434                           ; BSR set to: 0
  5435                           
  5436                           ; BSR set to: 0
  5437  002E16  5049               	movf	___fltol@exp1,w,c
  5438  002E18  A4D8               	btfss	status,2,c
  5439  002E1A  D7F7               	goto	l558
  5440  002E1C                     u5520:
  5441                           
  5442                           ; BSR set to: 0
  5443                           
  5444                           ; BSR set to: 0
  5445                           
  5446                           ; BSR set to: 0
  5447  002E1C  5048               	movf	___fltol@sign1,w,c
  5448  002E1E  B4D8               	btfsc	status,2,c
  5449  002E20  D008               	goto	l560
  5450                           
  5451                           ; BSR set to: 0
  5452  002E22  1F99               	comf	(___fltol@f1+3)& (0+255),f,b
  5453  002E24  1F98               	comf	(___fltol@f1+2)& (0+255),f,b
  5454  002E26  1F97               	comf	(___fltol@f1+1)& (0+255),f,b
  5455  002E28  6D96               	negf	___fltol@f1& (0+255),b
  5456  002E2A  0E00               	movlw	0
  5457  002E2C  2397               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5458  002E2E  2398               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5459  002E30  2399               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5460  002E32                     l560:
  5461                           
  5462                           ; BSR set to: 0
  5463                           
  5464                           ; BSR set to: 0
  5465  002E32  C096  F096         	movff	___fltol@f1,?___fltol
  5466  002E36  C097  F097         	movff	___fltol@f1+1,?___fltol+1
  5467  002E3A  C098  F098         	movff	___fltol@f1+2,?___fltol+2
  5468  002E3E  C099  F099         	movff	___fltol@f1+3,?___fltol+3
  5469  002E42  0012               	return	
  5470  002E44                     __end_of___fltol:
  5471                           	opt stack 0
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function ___flsub *****************
  5488 ;; Defined at:
  5489 ;;		line 245 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  b               4   78[BANK0 ] long 
  5492 ;;  a               4   82[BANK0 ] long 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  4   78[BANK0 ] long 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5504 ;;      Params:         0       8       0       0       0       0       0
  5505 ;;      Locals:         0       0       0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0
  5507 ;;      Totals:         0       8       0       0       0       0       0
  5508 ;;Total ram usage:        8 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    3
  5511 ;; This function calls:
  5512 ;;		___fladd
  5513 ;; This function is called by:
  5514 ;;		_sprintf
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text13
  5519  003244                     __ptext13:
  5520                           	opt stack 0
  5521  003244                     ___flsub:
  5522                           	opt stack 26
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;incstack = 0
  5526  003244  0E00               	movlw	0
  5527  003246  0100               	movlb	0	; () banked
  5528  003248  1BD2               	xorwf	___flsub@a& (0+255),f,b
  5529  00324A  0E00               	movlw	0
  5530  00324C  1BD3               	xorwf	(___flsub@a+1)& (0+255),f,b
  5531  00324E  0E00               	movlw	0
  5532  003250  1BD4               	xorwf	(___flsub@a+2)& (0+255),f,b
  5533  003252  0E80               	movlw	128
  5534  003254  1BD5               	xorwf	(___flsub@a+3)& (0+255),f,b
  5535                           
  5536                           ; BSR set to: 0
  5537  003256  C0CE  F0BA         	movff	___flsub@b,___fladd@b
  5538  00325A  C0CF  F0BB         	movff	___flsub@b+1,___fladd@b+1
  5539  00325E  C0D0  F0BC         	movff	___flsub@b+2,___fladd@b+2
  5540  003262  C0D1  F0BD         	movff	___flsub@b+3,___fladd@b+3
  5541  003266  C0D2  F0BE         	movff	___flsub@a,___fladd@a
  5542  00326A  C0D3  F0BF         	movff	___flsub@a+1,___fladd@a+1
  5543  00326E  C0D4  F0C0         	movff	___flsub@a+2,___fladd@a+2
  5544  003272  C0D5  F0C1         	movff	___flsub@a+3,___fladd@a+3
  5545  003276  ECEB  F00E         	call	___fladd	;wreg free
  5546  00327A  C0BA  F0CE         	movff	?___fladd,?___flsub
  5547  00327E  C0BB  F0CF         	movff	?___fladd+1,?___flsub+1
  5548  003282  C0BC  F0D0         	movff	?___fladd+2,?___flsub+2
  5549  003286  C0BD  F0D1         	movff	?___fladd+3,?___flsub+3
  5550  00328A  0012               	return	
  5551  00328C                     __end_of___flsub:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           intcon	equ	0xFF2
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           fsr2h	equ	0xFDA
  5565                           fsr2l	equ	0xFD9
  5566                           status	equ	0xFD8
  5567                           
  5568 ;; *************** function ___flge *****************
  5569 ;; Defined at:
  5570 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/flge.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  ff1             4   45[COMRAM] long 
  5573 ;;  ff2             4   49[COMRAM] long 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;		None               void
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5585 ;;      Params:         8       0       0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0
  5587 ;;      Temps:          4       0       0       0       0       0       0
  5588 ;;      Totals:        12       0       0       0       0       0       0
  5589 ;;Total ram usage:       12 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    2
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_sprintf
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text14
  5600  002B2C                     __ptext14:
  5601                           	opt stack 0
  5602  002B2C                     ___flge:
  5603                           	opt stack 27
  5604                           
  5605                           ;incstack = 0
  5606  002B2C  0E00               	movlw	0
  5607  002B2E  142E               	andwf	___flge@ff1,w,c
  5608  002B30  6E36               	movwf	??___flge& (0+255),c
  5609  002B32  0E00               	movlw	0
  5610  002B34  142F               	andwf	___flge@ff1+1,w,c
  5611  002B36  6E37               	movwf	(??___flge+1)& (0+255),c
  5612  002B38  0E80               	movlw	128
  5613  002B3A  1430               	andwf	___flge@ff1+2,w,c
  5614  002B3C  6E38               	movwf	(??___flge+2)& (0+255),c
  5615  002B3E  0E7F               	movlw	127
  5616  002B40  1431               	andwf	___flge@ff1+3,w,c
  5617  002B42  6E39               	movwf	(??___flge+3)& (0+255),c
  5618  002B44  5036               	movf	??___flge,w,c
  5619  002B46  1037               	iorwf	??___flge+1,w,c
  5620  002B48  1038               	iorwf	??___flge+2,w,c
  5621  002B4A  1039               	iorwf	??___flge+3,w,c
  5622  002B4C  A4D8               	btfss	status,2,c
  5623  002B4E  D008               	goto	l519
  5624  002B50  0E00               	movlw	0
  5625  002B52  6E2E               	movwf	___flge@ff1,c
  5626  002B54  0E00               	movlw	0
  5627  002B56  6E2F               	movwf	___flge@ff1+1,c
  5628  002B58  0E00               	movlw	0
  5629  002B5A  6E30               	movwf	___flge@ff1+2,c
  5630  002B5C  0E00               	movlw	0
  5631  002B5E  6E31               	movwf	___flge@ff1+3,c
  5632  002B60                     l519:
  5633  002B60  0E00               	movlw	0
  5634  002B62  1432               	andwf	___flge@ff2,w,c
  5635  002B64  6E36               	movwf	??___flge& (0+255),c
  5636  002B66  0E00               	movlw	0
  5637  002B68  1433               	andwf	___flge@ff2+1,w,c
  5638  002B6A  6E37               	movwf	(??___flge+1)& (0+255),c
  5639  002B6C  0E80               	movlw	128
  5640  002B6E  1434               	andwf	___flge@ff2+2,w,c
  5641  002B70  6E38               	movwf	(??___flge+2)& (0+255),c
  5642  002B72  0E7F               	movlw	127
  5643  002B74  1435               	andwf	___flge@ff2+3,w,c
  5644  002B76  6E39               	movwf	(??___flge+3)& (0+255),c
  5645  002B78  5036               	movf	??___flge,w,c
  5646  002B7A  1037               	iorwf	??___flge+1,w,c
  5647  002B7C  1038               	iorwf	??___flge+2,w,c
  5648  002B7E  1039               	iorwf	??___flge+3,w,c
  5649  002B80  A4D8               	btfss	status,2,c
  5650  002B82  D008               	goto	l520
  5651  002B84  0E00               	movlw	0
  5652  002B86  6E32               	movwf	___flge@ff2,c
  5653  002B88  0E00               	movlw	0
  5654  002B8A  6E33               	movwf	___flge@ff2+1,c
  5655  002B8C  0E00               	movlw	0
  5656  002B8E  6E34               	movwf	___flge@ff2+2,c
  5657  002B90  0E00               	movlw	0
  5658  002B92  6E35               	movwf	___flge@ff2+3,c
  5659  002B94                     l520:
  5660  002B94  AE31               	btfss	___flge@ff1+3,7,c
  5661  002B96  D01D               	goto	l521
  5662  002B98  C02E  F036         	movff	___flge@ff1,??___flge
  5663  002B9C  C02F  F037         	movff	___flge@ff1+1,??___flge+1
  5664  002BA0  C030  F038         	movff	___flge@ff1+2,??___flge+2
  5665  002BA4  C031  F039         	movff	___flge@ff1+3,??___flge+3
  5666  002BA8  1E36               	comf	??___flge,f,c
  5667  002BAA  1E37               	comf	??___flge+1,f,c
  5668  002BAC  1E38               	comf	??___flge+2,f,c
  5669  002BAE  1E39               	comf	??___flge+3,f,c
  5670  002BB0  2A36               	incf	??___flge,f,c
  5671  002BB2  0E00               	movlw	0
  5672  002BB4  2237               	addwfc	??___flge+1,f,c
  5673  002BB6  2238               	addwfc	??___flge+2,f,c
  5674  002BB8  2239               	addwfc	??___flge+3,f,c
  5675  002BBA  0E00               	movlw	0
  5676  002BBC  2436               	addwf	??___flge,w,c
  5677  002BBE  6E2E               	movwf	___flge@ff1,c
  5678  002BC0  0E00               	movlw	0
  5679  002BC2  2037               	addwfc	??___flge+1,w,c
  5680  002BC4  6E2F               	movwf	___flge@ff1+1,c
  5681  002BC6  0E00               	movlw	0
  5682  002BC8  2038               	addwfc	??___flge+2,w,c
  5683  002BCA  6E30               	movwf	___flge@ff1+2,c
  5684  002BCC  0E80               	movlw	128
  5685  002BCE  2039               	addwfc	??___flge+3,w,c
  5686  002BD0  6E31               	movwf	___flge@ff1+3,c
  5687  002BD2                     l521:
  5688  002BD2  AE35               	btfss	___flge@ff2+3,7,c
  5689  002BD4  D01D               	goto	l522
  5690  002BD6  C032  F036         	movff	___flge@ff2,??___flge
  5691  002BDA  C033  F037         	movff	___flge@ff2+1,??___flge+1
  5692  002BDE  C034  F038         	movff	___flge@ff2+2,??___flge+2
  5693  002BE2  C035  F039         	movff	___flge@ff2+3,??___flge+3
  5694  002BE6  1E36               	comf	??___flge,f,c
  5695  002BE8  1E37               	comf	??___flge+1,f,c
  5696  002BEA  1E38               	comf	??___flge+2,f,c
  5697  002BEC  1E39               	comf	??___flge+3,f,c
  5698  002BEE  2A36               	incf	??___flge,f,c
  5699  002BF0  0E00               	movlw	0
  5700  002BF2  2237               	addwfc	??___flge+1,f,c
  5701  002BF4  2238               	addwfc	??___flge+2,f,c
  5702  002BF6  2239               	addwfc	??___flge+3,f,c
  5703  002BF8  0E00               	movlw	0
  5704  002BFA  2436               	addwf	??___flge,w,c
  5705  002BFC  6E32               	movwf	___flge@ff2,c
  5706  002BFE  0E00               	movlw	0
  5707  002C00  2037               	addwfc	??___flge+1,w,c
  5708  002C02  6E33               	movwf	___flge@ff2+1,c
  5709  002C04  0E00               	movlw	0
  5710  002C06  2038               	addwfc	??___flge+2,w,c
  5711  002C08  6E34               	movwf	___flge@ff2+2,c
  5712  002C0A  0E80               	movlw	128
  5713  002C0C  2039               	addwfc	??___flge+3,w,c
  5714  002C0E  6E35               	movwf	___flge@ff2+3,c
  5715  002C10                     l522:
  5716  002C10  0E00               	movlw	0
  5717  002C12  1A2E               	xorwf	___flge@ff1,f,c
  5718  002C14  0E00               	movlw	0
  5719  002C16  1A2F               	xorwf	___flge@ff1+1,f,c
  5720  002C18  0E00               	movlw	0
  5721  002C1A  1A30               	xorwf	___flge@ff1+2,f,c
  5722  002C1C  0E80               	movlw	128
  5723  002C1E  1A31               	xorwf	___flge@ff1+3,f,c
  5724  002C20  0E00               	movlw	0
  5725  002C22  1A32               	xorwf	___flge@ff2,f,c
  5726  002C24  0E00               	movlw	0
  5727  002C26  1A33               	xorwf	___flge@ff2+1,f,c
  5728  002C28  0E00               	movlw	0
  5729  002C2A  1A34               	xorwf	___flge@ff2+2,f,c
  5730  002C2C  0E80               	movlw	128
  5731  002C2E  1A35               	xorwf	___flge@ff2+3,f,c
  5732  002C30  5032               	movf	___flge@ff2,w,c
  5733  002C32  5C2E               	subwf	___flge@ff1,w,c
  5734  002C34  5033               	movf	___flge@ff2+1,w,c
  5735  002C36  582F               	subwfb	___flge@ff1+1,w,c
  5736  002C38  5034               	movf	___flge@ff2+2,w,c
  5737  002C3A  5830               	subwfb	___flge@ff1+2,w,c
  5738  002C3C  5035               	movf	___flge@ff2+3,w,c
  5739  002C3E  5831               	subwfb	___flge@ff1+3,w,c
  5740  002C40  B0D8               	btfsc	status,0,c
  5741  002C42  D002               	goto	l4175
  5742  002C44  90D8               	bcf	status,0,c
  5743  002C46  0012               	return	
  5744  002C48                     l4175:
  5745  002C48  80D8               	bsf	status,0,c
  5746  002C4A  0012               	return	
  5747  002C4C                     __end_of___flge:
  5748                           	opt stack 0
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           intcon	equ	0xFF2
  5756                           postinc0	equ	0xFEE
  5757                           wreg	equ	0xFE8
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           fsr2h	equ	0xFDA
  5761                           fsr2l	equ	0xFD9
  5762                           status	equ	0xFD8
  5763                           
  5764 ;; *************** function _seleccionarEscala *****************
  5765 ;; Defined at:
  5766 ;;		line 342 in file "color_3.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;  a               1    wreg     enum E3216
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;  a               1   45[COMRAM] enum E3216
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  1    wreg      void 
  5773 ;; Registers used:
  5774 ;;		wreg, status,2, status,0
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5780 ;;      Params:         0       0       0       0       0       0       0
  5781 ;;      Locals:         1       0       0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0
  5783 ;;      Totals:         1       0       0       0       0       0       0
  5784 ;;Total ram usage:        1 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    2
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_main
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text15
  5795  00334A                     __ptext15:
  5796                           	opt stack 0
  5797  00334A                     _seleccionarEscala:
  5798                           	opt stack 28
  5799                           
  5800                           ;incstack = 0
  5801                           ;seleccionarEscala@a stored from wreg
  5802  00334A  6E2E               	movwf	seleccionarEscala@a,c
  5803                           
  5804                           ;color_3.c: 344: switch(a)
  5805  00334C  D00C               	goto	l173
  5806  00334E                     
  5807                           ;color_3.c: 347: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5808  00334E  908C               	bcf	3980,0,c	;volatile
  5809                           
  5810                           ;color_3.c: 348: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5811  003350  928C               	bcf	3980,1,c	;volatile
  5812                           
  5813                           ;color_3.c: 349: break;
  5814  003352  0012               	return	
  5815  003354                     
  5816                           ;color_3.c: 351: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5817  003354  908C               	bcf	3980,0,c	;volatile
  5818                           
  5819                           ;color_3.c: 352: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5820  003356  828C               	bsf	3980,1,c	;volatile
  5821                           
  5822                           ;color_3.c: 353: break;
  5823  003358  0012               	return	
  5824  00335A                     
  5825                           ;color_3.c: 355: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5826  00335A  808C               	bsf	3980,0,c	;volatile
  5827                           
  5828                           ;color_3.c: 356: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5829  00335C  928C               	bcf	3980,1,c	;volatile
  5830                           
  5831                           ;color_3.c: 357: break;
  5832  00335E  0012               	return	
  5833  003360                     
  5834                           ;color_3.c: 359: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5835  003360  808C               	bsf	3980,0,c	;volatile
  5836                           
  5837                           ;color_3.c: 360: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5838  003362  828C               	bsf	3980,1,c	;volatile
  5839                           
  5840                           ;color_3.c: 362: }
  5841                           
  5842                           ;color_3.c: 361: break;
  5843  003364  0012               	return	
  5844  003366                     l173:
  5845  003366  502E               	movf	seleccionarEscala@a,w,c
  5846                           
  5847                           ; Switch size 1, requested type "space"
  5848                           ; Number of cases is 4, Range of values is 0 to 3
  5849                           ; switch strategies available:
  5850                           ; Name         Instructions Cycles
  5851                           ; simple_byte           13     7 (average)
  5852                           ;	Chosen strategy is simple_byte
  5853  003368  0A00               	xorlw	0	; case 0
  5854  00336A  B4D8               	btfsc	status,2,c
  5855  00336C  D7F9               	goto	l178
  5856  00336E  0A01               	xorlw	1	; case 1
  5857  003370  B4D8               	btfsc	status,2,c
  5858  003372  D7F3               	goto	l177
  5859  003374  0A03               	xorlw	3	; case 2
  5860  003376  B4D8               	btfsc	status,2,c
  5861  003378  D7ED               	goto	l176
  5862  00337A  0A01               	xorlw	1	; case 3
  5863  00337C  A4D8               	btfss	status,2,c
  5864  00337E  0012               	return	
  5865  003380  D7E6               	goto	l174
  5866  003382                     __end_of_seleccionarEscala:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _seleccionarColor *****************
  5884 ;; Defined at:
  5885 ;;		line 377 in file "color_3.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  col             1    wreg     enum E3210
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  col             1   45[COMRAM] enum E3210
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         0       0       0       0       0       0       0
  5900 ;;      Locals:         1       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         1       0       0       0       0       0       0
  5903 ;;Total ram usage:        1 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    2
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_main
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text16
  5914  0032D2                     __ptext16:
  5915                           	opt stack 0
  5916  0032D2                     _seleccionarColor:
  5917                           	opt stack 28
  5918                           
  5919                           ;incstack = 0
  5920                           ;seleccionarColor@col stored from wreg
  5921  0032D2  6E2E               	movwf	seleccionarColor@col,c
  5922                           
  5923                           ;color_3.c: 379: switch(col)
  5924  0032D4  D00F               	goto	l182
  5925  0032D6                     
  5926                           ;color_3.c: 382: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5927  0032D6  948C               	bcf	3980,2,c	;volatile
  5928                           
  5929                           ;color_3.c: 383: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5930  0032D8  968C               	bcf	3980,3,c	;volatile
  5931                           
  5932                           ;color_3.c: 384: break;
  5933  0032DA  0012               	return	
  5934  0032DC                     
  5935                           ;color_3.c: 386: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5936  0032DC  948C               	bcf	3980,2,c	;volatile
  5937                           
  5938                           ;color_3.c: 387: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5939  0032DE  868C               	bsf	3980,3,c	;volatile
  5940                           
  5941                           ;color_3.c: 388: break;
  5942  0032E0  0012               	return	
  5943  0032E2                     
  5944                           ;color_3.c: 390: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5945  0032E2  848C               	bsf	3980,2,c	;volatile
  5946                           
  5947                           ;color_3.c: 391: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5948  0032E4  968C               	bcf	3980,3,c	;volatile
  5949                           
  5950                           ;color_3.c: 392: break;
  5951  0032E6  0012               	return	
  5952  0032E8                     
  5953                           ;color_3.c: 394: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5954  0032E8  848C               	bsf	3980,2,c	;volatile
  5955                           
  5956                           ;color_3.c: 395: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5957  0032EA  868C               	bsf	3980,3,c	;volatile
  5958                           
  5959                           ;color_3.c: 396: break;
  5960  0032EC  0012               	return	
  5961  0032EE                     
  5962                           ;color_3.c: 398: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5963  0032EE  848C               	bsf	3980,2,c	;volatile
  5964                           
  5965                           ;color_3.c: 399: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5966  0032F0  968C               	bcf	3980,3,c	;volatile
  5967                           
  5968                           ;color_3.c: 400: }
  5969  0032F2  0012               	return	
  5970  0032F4                     l182:
  5971  0032F4  502E               	movf	seleccionarColor@col,w,c
  5972                           
  5973                           ; Switch size 1, requested type "space"
  5974                           ; Number of cases is 4, Range of values is 0 to 3
  5975                           ; switch strategies available:
  5976                           ; Name         Instructions Cycles
  5977                           ; simple_byte           13     7 (average)
  5978                           ;	Chosen strategy is simple_byte
  5979  0032F6  0A00               	xorlw	0	; case 0
  5980  0032F8  B4D8               	btfsc	status,2,c
  5981  0032FA  D7ED               	goto	l183
  5982  0032FC  0A01               	xorlw	1	; case 1
  5983  0032FE  B4D8               	btfsc	status,2,c
  5984  003300  D7ED               	goto	l185
  5985  003302  0A03               	xorlw	3	; case 2
  5986  003304  B4D8               	btfsc	status,2,c
  5987  003306  D7ED               	goto	l186
  5988  003308  0A01               	xorlw	1	; case 3
  5989  00330A  B4D8               	btfsc	status,2,c
  5990  00330C  D7ED               	goto	l187
  5991  00330E  D7EF               	goto	l188
  5992  003310                     __end_of_seleccionarColor:
  5993                           	opt stack 0
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           intcon	equ	0xFF2
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _lcd_msg *****************
  6010 ;; Defined at:
  6011 ;;		line 101 in file "../MyLibs/lcd4a.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  c               2   49[COMRAM] PTR unsigned char 
  6014 ;;		 -> STR_9(4), STR_7(4), STR_5(4), STR_3(4), 
  6015 ;;		 -> value(8), STR_1(18), 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         2       0       0       0       0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0
  6030 ;;      Totals:         2       0       0       0       0       0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    5
  6034 ;; This function calls:
  6035 ;;		_lcd_putc
  6036 ;; This function is called by:
  6037 ;;		_main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text17
  6042  0031A8                     __ptext17:
  6043                           	opt stack 0
  6044  0031A8                     _lcd_msg:
  6045                           	opt stack 25
  6046                           
  6047                           ;lcd4a.c: 103: while(*c != 0)
  6048                           
  6049                           ;incstack = 0
  6050  0031A8  D014               	goto	l36
  6051  0031AA                     
  6052                           ;lcd4a.c: 104: {
  6053                           ;lcd4a.c: 105: lcd_putc(*c++);
  6054  0031AA  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6055  0031AE  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6056  0031B2  6AF8               	clrf	tblptru,c
  6057  0031B4  0E05               	movlw	(high __ramtop+-1)
  6058  0031B6  64F7               	cpfsgt	tblptrh,c
  6059  0031B8  D003               	bra	u3647
  6060  0031BA  0008               	tblrd		*
  6061  0031BC  50F5               	movf	tablat,w,c
  6062  0031BE  D005               	bra	u3640
  6063  0031C0                     u3647:
  6064  0031C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  6065  0031C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  6066  0031C8  50EF               	movf	indf0,w,c
  6067  0031CA                     u3640:
  6068  0031CA  EC88  F019         	call	_lcd_putc
  6069  0031CE  4A32               	infsnz	lcd_msg@c,f,c
  6070  0031D0  2A33               	incf	lcd_msg@c+1,f,c
  6071  0031D2                     l36:
  6072  0031D2  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6073  0031D6  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6074  0031DA  6AF8               	clrf	tblptru,c
  6075  0031DC  0E05               	movlw	(high __ramtop+-1)
  6076  0031DE  64F7               	cpfsgt	tblptrh,c
  6077  0031E0  D003               	bra	u3657
  6078  0031E2  0008               	tblrd		*
  6079  0031E4  50F5               	movf	tablat,w,c
  6080  0031E6  D005               	bra	u3650
  6081  0031E8                     u3657:
  6082  0031E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6083  0031EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6084  0031F0  50EF               	movf	indf0,w,c
  6085  0031F2                     u3650:
  6086  0031F2  0900               	iorlw	0
  6087  0031F4  B4D8               	btfsc	status,2,c
  6088  0031F6  0012               	return	
  6089  0031F8  D7D8               	goto	l37
  6090  0031FA                     __end_of_lcd_msg:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           intcon	equ	0xFF2
  6099                           indf0	equ	0xFEF
  6100                           postinc0	equ	0xFEE
  6101                           fsr0h	equ	0xFEA
  6102                           fsr0l	equ	0xFE9
  6103                           wreg	equ	0xFE8
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _lcd_putc *****************
  6111 ;; Defined at:
  6112 ;;		line 66 in file "../MyLibs/lcd4a.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  c               1    wreg     unsigned char 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  c               1   48[COMRAM] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6126 ;;      Params:         0       0       0       0       0       0       0
  6127 ;;      Locals:         1       0       0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0
  6129 ;;      Totals:         1       0       0       0       0       0       0
  6130 ;;Total ram usage:        1 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    4
  6133 ;; This function calls:
  6134 ;;		_lcd_cmd
  6135 ;;		_lcd_dwr
  6136 ;; This function is called by:
  6137 ;;		_lcd_msg
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text18
  6142  003310                     __ptext18:
  6143                           	opt stack 0
  6144  003310                     _lcd_putc:
  6145                           	opt stack 25
  6146                           
  6147                           ;incstack = 0
  6148                           ;lcd_putc@c stored from wreg
  6149  003310  6E31               	movwf	lcd_putc@c,c
  6150                           
  6151                           ;lcd4a.c: 68: switch(c)
  6152  003312  D010               	goto	l24
  6153  003314                     
  6154                           ;lcd4a.c: 71: lcd_cmd(0x01);
  6155  003314  0E01               	movlw	1
  6156  003316  ECFD  F018         	call	_lcd_cmd
  6157                           
  6158                           ;lcd4a.c: 72: break;
  6159  00331A  0012               	return	
  6160  00331C                     
  6161                           ;lcd4a.c: 74: lcd_cmd(3);
  6162  00331C  0E03               	movlw	3
  6163  00331E  ECFD  F018         	call	_lcd_cmd
  6164                           
  6165                           ;lcd4a.c: 75: break;
  6166  003322  0012               	return	
  6167  003324                     
  6168                           ;lcd4a.c: 77: lcd_cmd(0x10);
  6169  003324  0E10               	movlw	16
  6170  003326  ECFD  F018         	call	_lcd_cmd
  6171                           
  6172                           ;lcd4a.c: 78: break;
  6173  00332A  0012               	return	
  6174  00332C                     
  6175                           ;lcd4a.c: 80: lcd_dwr(c);
  6176  00332C  5031               	movf	lcd_putc@c,w,c
  6177  00332E  EC46  F019         	call	_lcd_dwr
  6178                           
  6179                           ;lcd4a.c: 82: }
  6180                           
  6181                           ;lcd4a.c: 81: break;
  6182  003332  0012               	return	
  6183  003334                     l24:
  6184  003334  5031               	movf	lcd_putc@c,w,c
  6185                           
  6186                           ; Switch size 1, requested type "space"
  6187                           ; Number of cases is 3, Range of values is 8 to 12
  6188                           ; switch strategies available:
  6189                           ; Name         Instructions Cycles
  6190                           ; simple_byte           10     6 (average)
  6191                           ;	Chosen strategy is simple_byte
  6192  003336  0A08               	xorlw	8	; case 8
  6193  003338  B4D8               	btfsc	status,2,c
  6194  00333A  D7F4               	goto	l28
  6195  00333C  0A02               	xorlw	2	; case 10
  6196  00333E  B4D8               	btfsc	status,2,c
  6197  003340  D7ED               	goto	l27
  6198  003342  0A06               	xorlw	6	; case 12
  6199  003344  B4D8               	btfsc	status,2,c
  6200  003346  D7E6               	goto	l25
  6201  003348  D7F1               	goto	l29
  6202  00334A                     __end_of_lcd_putc:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           prodh	equ	0xFF4
  6209                           prodl	equ	0xFF3
  6210                           intcon	equ	0xFF2
  6211                           indf0	equ	0xFEF
  6212                           postinc0	equ	0xFEE
  6213                           fsr0h	equ	0xFEA
  6214                           fsr0l	equ	0xFE9
  6215                           wreg	equ	0xFE8
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _lcd_dwr *****************
  6223 ;; Defined at:
  6224 ;;		line 86 in file "../MyLibs/lcd4a.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  x               1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  x               1   47[COMRAM] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2, status,0, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6238 ;;      Params:         0       0       0       0       0       0       0
  6239 ;;      Locals:         1       0       0       0       0       0       0
  6240 ;;      Temps:          1       0       0       0       0       0       0
  6241 ;;      Totals:         2       0       0       0       0       0       0
  6242 ;;Total ram usage:        2 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    3
  6245 ;; This function calls:
  6246 ;;		_lcd_lat
  6247 ;;		_manda
  6248 ;; This function is called by:
  6249 ;;		_lcd_putc
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text19
  6254  00328C                     __ptext19:
  6255                           	opt stack 0
  6256  00328C                     _lcd_dwr:
  6257                           	opt stack 25
  6258                           
  6259                           ;incstack = 0
  6260                           ;lcd_dwr@x stored from wreg
  6261  00328C  6E30               	movwf	lcd_dwr@x,c
  6262                           
  6263                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6264  00328E  8A8C               	bsf	3980,5,c	;volatile
  6265                           
  6266                           ;lcd4a.c: 89: lcd &= 0x0F;
  6267  003290  0E0F               	movlw	15
  6268  003292  1650               	andwf	_lcd,f,c
  6269                           
  6270                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  6271  003294  5030               	movf	lcd_dwr@x,w,c
  6272  003296  0BF0               	andlw	240
  6273  003298  1250               	iorwf	_lcd,f,c
  6274                           
  6275                           ;lcd4a.c: 91: manda(lcd);
  6276  00329A  5050               	movf	_lcd,w,c
  6277  00329C  EC0B  F01A         	call	_manda
  6278                           
  6279                           ;lcd4a.c: 92: lcd_lat();
  6280  0032A0  EC50  F01A         	call	_lcd_lat	;wreg free
  6281                           
  6282                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(16000000/4000.0)));
  6283  0032A4  0E15               	movlw	21
  6284  0032A6  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6285  0032A8  0EC6               	movlw	198
  6286  0032AA                     u6317:
  6287  0032AA  2EE8               	decfsz	wreg,f,c
  6288  0032AC  D7FE               	bra	u6317
  6289  0032AE  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6290  0032B0  D7FC               	bra	u6317
  6291  0032B2  D000               	nop2	
  6292                           
  6293                           ;lcd4a.c: 95: lcd &= 0x0F;
  6294  0032B4  0E0F               	movlw	15
  6295  0032B6  1650               	andwf	_lcd,f,c
  6296                           
  6297                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  6298  0032B8  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6299  0032BC  0E0F               	movlw	15
  6300  0032BE  162F               	andwf	??_lcd_dwr,f,c
  6301  0032C0  382F               	swapf	??_lcd_dwr,w,c
  6302  0032C2  0BF0               	andlw	240
  6303  0032C4  1250               	iorwf	_lcd,f,c
  6304                           
  6305                           ;lcd4a.c: 97: manda(lcd);
  6306  0032C6  5050               	movf	_lcd,w,c
  6307  0032C8  EC0B  F01A         	call	_manda
  6308                           
  6309                           ;lcd4a.c: 98: lcd_lat();
  6310  0032CC  EC50  F01A         	call	_lcd_lat	;wreg free
  6311  0032D0  0012               	return		;funcret
  6312  0032D2                     __end_of_lcd_dwr:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           indf0	equ	0xFEF
  6322                           postinc0	equ	0xFEE
  6323                           fsr0h	equ	0xFEA
  6324                           fsr0l	equ	0xFE9
  6325                           wreg	equ	0xFE8
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _lcd_init *****************
  6333 ;; Defined at:
  6334 ;;		line 135 in file "../MyLibs/lcd4a.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6348 ;;      Params:         0       0       0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0
  6350 ;;      Temps:          1       0       0       0       0       0       0
  6351 ;;      Totals:         1       0       0       0       0       0       0
  6352 ;;Total ram usage:        1 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    4
  6355 ;; This function calls:
  6356 ;;		_lcd_cmd
  6357 ;;		_lcd_cmd_hf
  6358 ;; This function is called by:
  6359 ;;		_main
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text20
  6364  002F0E                     __ptext20:
  6365                           	opt stack 0
  6366  002F0E                     _lcd_init:
  6367                           	opt stack 26
  6368                           
  6369                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  6370                           
  6371                           ;incstack = 0
  6372  002F0E  9E93               	bcf	3987,7,c	;volatile
  6373                           
  6374                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  6375  002F10  9C93               	bcf	3987,6,c	;volatile
  6376                           
  6377                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  6378  002F12  9A93               	bcf	3987,5,c	;volatile
  6379                           
  6380                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  6381  002F14  9893               	bcf	3987,4,c	;volatile
  6382                           
  6383                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  6384  002F16  9A95               	bcf	3989,5,c	;volatile
  6385                           
  6386                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  6387  002F18  9C95               	bcf	3989,6,c	;volatile
  6388                           
  6389                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  6390  002F1A  9E95               	bcf	3989,7,c	;volatile
  6391                           
  6392                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  6393  002F1C  9C8C               	bcf	3980,6,c	;volatile
  6394                           
  6395                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
  6396  002F1E  0E30               	movlw	48
  6397  002F20  EC43  F01A         	call	_lcd_cmd_hf
  6398                           
  6399                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(16000000/4000.0)));
  6400  002F24  0E4E               	movlw	78
  6401  002F26  6E31               	movwf	??_lcd_init& (0+255),c
  6402  002F28  0EEB               	movlw	235
  6403  002F2A                     u6327:
  6404  002F2A  2EE8               	decfsz	wreg,f,c
  6405  002F2C  D7FE               	bra	u6327
  6406  002F2E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6407  002F30  D7FC               	bra	u6327
  6408  002F32  F000               	nop	
  6409                           
  6410                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
  6411  002F34  0E30               	movlw	48
  6412  002F36  EC43  F01A         	call	_lcd_cmd_hf
  6413                           
  6414                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(16000000/4000.0)));
  6415  002F3A  0E10               	movlw	16
  6416  002F3C  6E31               	movwf	??_lcd_init& (0+255),c
  6417  002F3E  0E94               	movlw	148
  6418  002F40                     u6337:
  6419  002F40  2EE8               	decfsz	wreg,f,c
  6420  002F42  D7FE               	bra	u6337
  6421  002F44  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6422  002F46  D7FC               	bra	u6337
  6423  002F48  D000               	nop2	
  6424                           
  6425                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
  6426  002F4A  0E30               	movlw	48
  6427  002F4C  EC43  F01A         	call	_lcd_cmd_hf
  6428                           
  6429                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(16000000/4000.0)));
  6430  002F50  0E4E               	movlw	78
  6431  002F52  6E31               	movwf	??_lcd_init& (0+255),c
  6432  002F54  0EEB               	movlw	235
  6433  002F56                     u6347:
  6434  002F56  2EE8               	decfsz	wreg,f,c
  6435  002F58  D7FE               	bra	u6347
  6436  002F5A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6437  002F5C  D7FC               	bra	u6347
  6438  002F5E  F000               	nop	
  6439                           
  6440                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
  6441  002F60  0E20               	movlw	32
  6442  002F62  EC43  F01A         	call	_lcd_cmd_hf
  6443                           
  6444                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(16000000/4000.0)));
  6445  002F66  0E20               	movlw	32
  6446  002F68  6E31               	movwf	??_lcd_init& (0+255),c
  6447  002F6A  0E2A               	movlw	42
  6448  002F6C                     u6357:
  6449  002F6C  2EE8               	decfsz	wreg,f,c
  6450  002F6E  D7FE               	bra	u6357
  6451  002F70  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6452  002F72  D7FC               	bra	u6357
  6453                           
  6454                           ;lcd4a.c: 166: lcd_cmd(0x28);
  6455  002F74  0E28               	movlw	40
  6456  002F76  ECFD  F018         	call	_lcd_cmd
  6457                           
  6458                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(16000000/4000.0)));
  6459  002F7A  0E20               	movlw	32
  6460  002F7C  6E31               	movwf	??_lcd_init& (0+255),c
  6461  002F7E  0E2A               	movlw	42
  6462  002F80                     u6367:
  6463  002F80  2EE8               	decfsz	wreg,f,c
  6464  002F82  D7FE               	bra	u6367
  6465  002F84  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6466  002F86  D7FC               	bra	u6367
  6467                           
  6468                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  6469  002F88  0E0E               	movlw	14
  6470  002F8A  ECFD  F018         	call	_lcd_cmd
  6471                           
  6472                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(16000000/4000.0)));
  6473  002F8E  0E20               	movlw	32
  6474  002F90  6E31               	movwf	??_lcd_init& (0+255),c
  6475  002F92  0E2A               	movlw	42
  6476  002F94                     u6377:
  6477  002F94  2EE8               	decfsz	wreg,f,c
  6478  002F96  D7FE               	bra	u6377
  6479  002F98  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6480  002F9A  D7FC               	bra	u6377
  6481                           
  6482                           ;lcd4a.c: 170: lcd_cmd(0x01);
  6483  002F9C  0E01               	movlw	1
  6484  002F9E  ECFD  F018         	call	_lcd_cmd
  6485                           
  6486                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(16000000/4000.0)));
  6487  002FA2  0E20               	movlw	32
  6488  002FA4  6E31               	movwf	??_lcd_init& (0+255),c
  6489  002FA6  0E2A               	movlw	42
  6490  002FA8                     u6387:
  6491  002FA8  2EE8               	decfsz	wreg,f,c
  6492  002FAA  D7FE               	bra	u6387
  6493  002FAC  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6494  002FAE  D7FC               	bra	u6387
  6495                           
  6496                           ;lcd4a.c: 172: lcd_cmd(0x06);
  6497  002FB0  0E06               	movlw	6
  6498  002FB2  ECFD  F018         	call	_lcd_cmd
  6499                           
  6500                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(16000000/4000.0)));
  6501  002FB6  0E20               	movlw	32
  6502  002FB8  6E31               	movwf	??_lcd_init& (0+255),c
  6503  002FBA  0E2A               	movlw	42
  6504  002FBC                     u6397:
  6505  002FBC  2EE8               	decfsz	wreg,f,c
  6506  002FBE  D7FE               	bra	u6397
  6507  002FC0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6508  002FC2  D7FC               	bra	u6397
  6509                           
  6510                           ;lcd4a.c: 174: lcd_cmd(0x80);
  6511  002FC4  0E80               	movlw	128
  6512  002FC6  ECFD  F018         	call	_lcd_cmd
  6513  002FCA  0012               	return		;funcret
  6514  002FCC                     __end_of_lcd_init:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           indf0	equ	0xFEF
  6524                           postinc0	equ	0xFEE
  6525                           fsr0h	equ	0xFEA
  6526                           fsr0l	equ	0xFE9
  6527                           wreg	equ	0xFE8
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _lcd_cmd_hf *****************
  6535 ;; Defined at:
  6536 ;;		line 56 in file "../MyLibs/lcd4a.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  x               1    wreg     unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  x               1   46[COMRAM] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       0       0       0       0       0       0
  6551 ;;      Locals:         1       0       0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0
  6553 ;;      Totals:         1       0       0       0       0       0       0
  6554 ;;Total ram usage:        1 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    3
  6557 ;; This function calls:
  6558 ;;		_lcd_lat
  6559 ;;		_manda
  6560 ;; This function is called by:
  6561 ;;		_lcd_init
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text21
  6566  003486                     __ptext21:
  6567                           	opt stack 0
  6568  003486                     _lcd_cmd_hf:
  6569                           	opt stack 26
  6570                           
  6571                           ;incstack = 0
  6572                           ;lcd_cmd_hf@x stored from wreg
  6573  003486  6E2F               	movwf	lcd_cmd_hf@x,c
  6574                           
  6575                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6576  003488  9A8C               	bcf	3980,5,c	;volatile
  6577                           
  6578                           ;lcd4a.c: 59: lcd &= 0x0F;
  6579  00348A  0E0F               	movlw	15
  6580  00348C  1650               	andwf	_lcd,f,c
  6581                           
  6582                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  6583  00348E  502F               	movf	lcd_cmd_hf@x,w,c
  6584  003490  0BF0               	andlw	240
  6585  003492  1250               	iorwf	_lcd,f,c
  6586                           
  6587                           ;lcd4a.c: 61: manda(lcd);
  6588  003494  5050               	movf	_lcd,w,c
  6589  003496  EC0B  F01A         	call	_manda
  6590                           
  6591                           ;lcd4a.c: 62: lcd_lat();
  6592  00349A  EC50  F01A         	call	_lcd_lat	;wreg free
  6593  00349E  0012               	return		;funcret
  6594  0034A0                     __end_of_lcd_cmd_hf:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           indf0	equ	0xFEF
  6604                           postinc0	equ	0xFEE
  6605                           fsr0h	equ	0xFEA
  6606                           fsr0l	equ	0xFE9
  6607                           wreg	equ	0xFE8
  6608                           indf2	equ	0xFDF
  6609                           postinc2	equ	0xFDE
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _lcd_gotoxy *****************
  6615 ;; Defined at:
  6616 ;;		line 114 in file "../MyLibs/lcd4a.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  x               1    wreg     unsigned char 
  6619 ;;  y               1   48[COMRAM] unsigned char 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  x               1   50[COMRAM] unsigned char 
  6622 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6632 ;;      Params:         1       0       0       0       0       0       0
  6633 ;;      Locals:         2       0       0       0       0       0       0
  6634 ;;      Temps:          1       0       0       0       0       0       0
  6635 ;;      Totals:         4       0       0       0       0       0       0
  6636 ;;Total ram usage:        4 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    4
  6639 ;; This function calls:
  6640 ;;		_lcd_cmd
  6641 ;; This function is called by:
  6642 ;;		_main
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text22
  6647  003382                     __ptext22:
  6648                           	opt stack 0
  6649  003382                     _lcd_gotoxy:
  6650                           	opt stack 26
  6651                           
  6652                           ;incstack = 0
  6653                           ;lcd_gotoxy@x stored from wreg
  6654  003382  6E33               	movwf	lcd_gotoxy@x,c
  6655                           
  6656                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  6657  003384  0E00               	movlw	0
  6658  003386  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6659                           
  6660                           ;lcd4a.c: 118: switch(y)
  6661  003388  D005               	goto	l42
  6662  00338A                     
  6663                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  6664  00338A  0EC0               	movlw	192
  6665  00338C  D001               	goto	L4
  6666  00338E                     
  6667                           ;lcd4a.c: 127: ADDRESS = 0x80;
  6668  00338E  0E80               	movlw	128
  6669  003390                     L4:
  6670  003390  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6671                           
  6672                           ;lcd4a.c: 130: }
  6673                           
  6674                           ;lcd4a.c: 128: break;
  6675  003392  D008               	goto	l44
  6676  003394                     l42:
  6677  003394  5031               	movf	lcd_gotoxy@y,w,c
  6678                           
  6679                           ; Switch size 1, requested type "space"
  6680                           ; Number of cases is 2, Range of values is 1 to 2
  6681                           ; switch strategies available:
  6682                           ; Name         Instructions Cycles
  6683                           ; simple_byte            7     4 (average)
  6684                           ;	Chosen strategy is simple_byte
  6685  003396  0A01               	xorlw	1	; case 1
  6686  003398  B4D8               	btfsc	status,2,c
  6687  00339A  D7F9               	goto	l46
  6688  00339C  0A03               	xorlw	3	; case 2
  6689  00339E  B4D8               	btfsc	status,2,c
  6690  0033A0  D7F4               	goto	l45
  6691  0033A2  D7F5               	goto	l46
  6692  0033A4                     l44:
  6693                           
  6694                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6695  0033A4  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6696  0033A6  2433               	addwf	lcd_gotoxy@x,w,c
  6697  0033A8  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6698  0033AA  0432               	decf	??_lcd_gotoxy,w,c
  6699  0033AC  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6700                           
  6701                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  6702  0033AE  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6703  0033B0  ECFD  F018         	call	_lcd_cmd
  6704  0033B4  0012               	return		;funcret
  6705  0033B6                     __end_of_lcd_gotoxy:
  6706                           	opt stack 0
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           indf0	equ	0xFEF
  6715                           postinc0	equ	0xFEE
  6716                           fsr0h	equ	0xFEA
  6717                           fsr0l	equ	0xFE9
  6718                           wreg	equ	0xFE8
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _lcd_cmd *****************
  6726 ;; Defined at:
  6727 ;;		line 40 in file "../MyLibs/lcd4a.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  x               1    wreg     unsigned char 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  x               1   47[COMRAM] unsigned char 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6741 ;;      Params:         0       0       0       0       0       0       0
  6742 ;;      Locals:         1       0       0       0       0       0       0
  6743 ;;      Temps:          1       0       0       0       0       0       0
  6744 ;;      Totals:         2       0       0       0       0       0       0
  6745 ;;Total ram usage:        2 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    3
  6748 ;; This function calls:
  6749 ;;		_lcd_lat
  6750 ;;		_manda
  6751 ;; This function is called by:
  6752 ;;		_lcd_putc
  6753 ;;		_lcd_gotoxy
  6754 ;;		_lcd_init
  6755 ;;		_lcd_setcursor_vb
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text23
  6760  0031FA                     __ptext23:
  6761                           	opt stack 0
  6762  0031FA                     _lcd_cmd:
  6763                           	opt stack 25
  6764                           
  6765                           ;incstack = 0
  6766                           ;lcd_cmd@x stored from wreg
  6767  0031FA  6E30               	movwf	lcd_cmd@x,c
  6768                           
  6769                           ;lcd4a.c: 42: lcd = 0;
  6770  0031FC  0E00               	movlw	0
  6771  0031FE  6E50               	movwf	_lcd,c
  6772                           
  6773                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6774  003200  9A8C               	bcf	3980,5,c	;volatile
  6775                           
  6776                           ;lcd4a.c: 44: lcd &= 0x0F;
  6777  003202  0E0F               	movlw	15
  6778  003204  1650               	andwf	_lcd,f,c
  6779                           
  6780                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  6781  003206  5030               	movf	lcd_cmd@x,w,c
  6782  003208  0BF0               	andlw	240
  6783  00320A  1250               	iorwf	_lcd,f,c
  6784                           
  6785                           ;lcd4a.c: 46: manda(lcd);
  6786  00320C  5050               	movf	_lcd,w,c
  6787  00320E  EC0B  F01A         	call	_manda
  6788                           
  6789                           ;lcd4a.c: 47: lcd_lat();
  6790  003212  EC50  F01A         	call	_lcd_lat	;wreg free
  6791                           
  6792                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(16000000/4000.0)));
  6793  003216  0E15               	movlw	21
  6794  003218  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6795  00321A  0EC6               	movlw	198
  6796  00321C                     u6407:
  6797  00321C  2EE8               	decfsz	wreg,f,c
  6798  00321E  D7FE               	bra	u6407
  6799  003220  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6800  003222  D7FC               	bra	u6407
  6801  003224  D000               	nop2	
  6802                           
  6803                           ;lcd4a.c: 50: lcd &= 0x0F;
  6804  003226  0E0F               	movlw	15
  6805  003228  1650               	andwf	_lcd,f,c
  6806                           
  6807                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  6808  00322A  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6809  00322E  0E0F               	movlw	15
  6810  003230  162F               	andwf	??_lcd_cmd,f,c
  6811  003232  382F               	swapf	??_lcd_cmd,w,c
  6812  003234  0BF0               	andlw	240
  6813  003236  1250               	iorwf	_lcd,f,c
  6814                           
  6815                           ;lcd4a.c: 52: manda(lcd);
  6816  003238  5050               	movf	_lcd,w,c
  6817  00323A  EC0B  F01A         	call	_manda
  6818                           
  6819                           ;lcd4a.c: 53: lcd_lat();
  6820  00323E  EC50  F01A         	call	_lcd_lat	;wreg free
  6821  003242  0012               	return		;funcret
  6822  003244                     __end_of_lcd_cmd:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           indf0	equ	0xFEF
  6832                           postinc0	equ	0xFEE
  6833                           fsr0h	equ	0xFEA
  6834                           fsr0l	equ	0xFE9
  6835                           wreg	equ	0xFE8
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           fsr2h	equ	0xFDA
  6839                           fsr2l	equ	0xFD9
  6840                           status	equ	0xFD8
  6841                           
  6842 ;; *************** function _manda *****************
  6843 ;; Defined at:
  6844 ;;		line 178 in file "../MyLibs/lcd4a.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  dato            1    wreg     unsigned char 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  dato            1   45[COMRAM] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6858 ;;      Params:         0       0       0       0       0       0       0
  6859 ;;      Locals:         1       0       0       0       0       0       0
  6860 ;;      Temps:          0       0       0       0       0       0       0
  6861 ;;      Totals:         1       0       0       0       0       0       0
  6862 ;;Total ram usage:        1 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    2
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_lcd_cmd
  6869 ;;		_lcd_cmd_hf
  6870 ;;		_lcd_dwr
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text24
  6875  003416                     __ptext24:
  6876                           	opt stack 0
  6877  003416                     _manda:
  6878                           	opt stack 25
  6879                           
  6880                           ;incstack = 0
  6881                           ;manda@dato stored from wreg
  6882  003416  6E2E               	movwf	manda@dato,c
  6883                           
  6884                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6885  003418  A82E               	btfss	manda@dato,4,c
  6886  00341A  D002               	goto	l53
  6887  00341C  888A               	bsf	3978,4,c	;volatile
  6888  00341E  D001               	goto	l54
  6889  003420                     l53:
  6890                           
  6891                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6892  003420  988A               	bcf	3978,4,c	;volatile
  6893  003422                     l54:
  6894                           
  6895                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6896  003422  AA2E               	btfss	manda@dato,5,c
  6897  003424  D002               	goto	l55
  6898  003426  8A8A               	bsf	3978,5,c	;volatile
  6899  003428  D001               	goto	l56
  6900  00342A                     l55:
  6901                           
  6902                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6903  00342A  9A8A               	bcf	3978,5,c	;volatile
  6904  00342C                     l56:
  6905                           
  6906                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6907  00342C  AC2E               	btfss	manda@dato,6,c
  6908  00342E  D002               	goto	l57
  6909  003430  8C8A               	bsf	3978,6,c	;volatile
  6910  003432  D001               	goto	l58
  6911  003434                     l57:
  6912                           
  6913                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6914  003434  9C8A               	bcf	3978,6,c	;volatile
  6915  003436                     l58:
  6916                           
  6917                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6918  003436  AE2E               	btfss	manda@dato,7,c
  6919  003438  D002               	goto	l59
  6920  00343A  8E8A               	bsf	3978,7,c	;volatile
  6921  00343C  0012               	return	
  6922  00343E                     l59:
  6923                           
  6924                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6925  00343E  9E8A               	bcf	3978,7,c	;volatile
  6926  003440  0012               	return	
  6927  003442                     __end_of_manda:
  6928                           	opt stack 0
  6929                           tblptru	equ	0xFF8
  6930                           tblptrh	equ	0xFF7
  6931                           tblptrl	equ	0xFF6
  6932                           tablat	equ	0xFF5
  6933                           prodh	equ	0xFF4
  6934                           prodl	equ	0xFF3
  6935                           intcon	equ	0xFF2
  6936                           indf0	equ	0xFEF
  6937                           postinc0	equ	0xFEE
  6938                           fsr0h	equ	0xFEA
  6939                           fsr0l	equ	0xFE9
  6940                           wreg	equ	0xFE8
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function _lcd_lat *****************
  6948 ;; Defined at:
  6949 ;;		line 29 in file "../MyLibs/lcd4a.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;		None
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, status,2, status,0
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6963 ;;      Params:         0       0       0       0       0       0       0
  6964 ;;      Locals:         0       0       0       0       0       0       0
  6965 ;;      Temps:          1       0       0       0       0       0       0
  6966 ;;      Totals:         1       0       0       0       0       0       0
  6967 ;;Total ram usage:        1 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    2
  6970 ;; This function calls:
  6971 ;;		Nothing
  6972 ;; This function is called by:
  6973 ;;		_lcd_cmd
  6974 ;;		_lcd_cmd_hf
  6975 ;;		_lcd_dwr
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text25
  6980  0034A0                     __ptext25:
  6981                           	opt stack 0
  6982  0034A0                     _lcd_lat:
  6983                           	opt stack 25
  6984                           
  6985                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  6986                           
  6987                           ;incstack = 0
  6988  0034A0  8E8C               	bsf	3980,7,c	;volatile
  6989                           
  6990                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(16000000/4000.0)));
  6991  0034A2  0E10               	movlw	16
  6992  0034A4  6E2E               	movwf	??_lcd_lat& (0+255),c
  6993  0034A6  0E94               	movlw	148
  6994  0034A8                     u6417:
  6995  0034A8  2EE8               	decfsz	wreg,f,c
  6996  0034AA  D7FE               	bra	u6417
  6997  0034AC  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  6998  0034AE  D7FC               	bra	u6417
  6999  0034B0  D000               	nop2	
  7000                           
  7001                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  7002  0034B2  9E8C               	bcf	3980,7,c	;volatile
  7003  0034B4  0012               	return		;funcret
  7004  0034B6                     __end_of_lcd_lat:
  7005                           	opt stack 0
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           intcon	equ	0xFF2
  7013                           indf0	equ	0xFEF
  7014                           postinc0	equ	0xFEE
  7015                           fsr0h	equ	0xFEA
  7016                           fsr0l	equ	0xFE9
  7017                           wreg	equ	0xFE8
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           fsr2h	equ	0xFDA
  7021                           fsr2l	equ	0xFD9
  7022                           status	equ	0xFD8
  7023                           
  7024 ;; *************** function _calibra *****************
  7025 ;; Defined at:
  7026 ;;		line 403 in file "color_3.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  valor           4   78[BANK0 ] float 
  7029 ;;  fd              4   82[BANK0 ] float 
  7030 ;;  fw              4   86[BANK0 ] float 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  4   78[BANK0 ] float 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7042 ;;      Params:         0      12       0       0       0       0       0
  7043 ;;      Locals:         0       0       0       0       0       0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0
  7045 ;;      Totals:         0      12       0       0       0       0       0
  7046 ;;Total ram usage:       12 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    3
  7049 ;; This function calls:
  7050 ;;		___fladd
  7051 ;;		___fldiv
  7052 ;;		___flmul
  7053 ;;		___flneg
  7054 ;; This function is called by:
  7055 ;;		_main
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text26
  7060  002E44                     __ptext26:
  7061                           	opt stack 0
  7062  002E44                     _calibra:
  7063                           	opt stack 27
  7064                           
  7065                           ;color_3.c: 405: return (255*(valor-fd))/(fw-fd);
  7066                           
  7067                           ;incstack = 0
  7068  002E44  0E00               	movlw	0
  7069  002E46  6E40               	movwf	___flmul@a,c
  7070  002E48  0E00               	movlw	0
  7071  002E4A  6E41               	movwf	___flmul@a+1,c
  7072  002E4C  0E7F               	movlw	127
  7073  002E4E  6E42               	movwf	___flmul@a+2,c
  7074  002E50  0E43               	movlw	67
  7075  002E52  6E43               	movwf	___flmul@a+3,c
  7076  002E54  C0CE  F0BE         	movff	calibra@valor,___fladd@a
  7077  002E58  C0CF  F0BF         	movff	calibra@valor+1,___fladd@a+1
  7078  002E5C  C0D0  F0C0         	movff	calibra@valor+2,___fladd@a+2
  7079  002E60  C0D1  F0C1         	movff	calibra@valor+3,___fladd@a+3
  7080  002E64  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  7081  002E68  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  7082  002E6C  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  7083  002E70  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  7084  002E74  ECF4  F019         	call	___flneg	;wreg free
  7085  002E78  C02E  F0BA         	movff	?___flneg,___fladd@b
  7086  002E7C  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  7087  002E80  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  7088  002E84  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  7089  002E88  ECEB  F00E         	call	___fladd	;wreg free
  7090  002E8C  C0BA  F03C         	movff	?___fladd,___flmul@b
  7091  002E90  C0BB  F03D         	movff	?___fladd+1,___flmul@b+1
  7092  002E94  C0BC  F03E         	movff	?___fladd+2,___flmul@b+2
  7093  002E98  C0BD  F03F         	movff	?___fladd+3,___flmul@b+3
  7094  002E9C  EC42  F00D         	call	___flmul	;wreg free
  7095  002EA0  C03C  F08D         	movff	?___flmul,___fldiv@b
  7096  002EA4  C03D  F08E         	movff	?___flmul+1,___fldiv@b+1
  7097  002EA8  C03E  F08F         	movff	?___flmul+2,___fldiv@b+2
  7098  002EAC  C03F  F090         	movff	?___flmul+3,___fldiv@b+3
  7099  002EB0  C0D6  F0BE         	movff	calibra@fw,___fladd@a
  7100  002EB4  C0D7  F0BF         	movff	calibra@fw+1,___fladd@a+1
  7101  002EB8  C0D8  F0C0         	movff	calibra@fw+2,___fladd@a+2
  7102  002EBC  C0D9  F0C1         	movff	calibra@fw+3,___fladd@a+3
  7103  002EC0  C0D2  F02E         	movff	calibra@fd,___flneg@f1
  7104  002EC4  C0D3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  7105  002EC8  C0D4  F030         	movff	calibra@fd+2,___flneg@f1+2
  7106  002ECC  C0D5  F031         	movff	calibra@fd+3,___flneg@f1+3
  7107  002ED0  ECF4  F019         	call	___flneg	;wreg free
  7108  002ED4  C02E  F0BA         	movff	?___flneg,___fladd@b
  7109  002ED8  C02F  F0BB         	movff	?___flneg+1,___fladd@b+1
  7110  002EDC  C030  F0BC         	movff	?___flneg+2,___fladd@b+2
  7111  002EE0  C031  F0BD         	movff	?___flneg+3,___fladd@b+3
  7112  002EE4  ECEB  F00E         	call	___fladd	;wreg free
  7113  002EE8  C0BA  F091         	movff	?___fladd,___fldiv@a
  7114  002EEC  C0BB  F092         	movff	?___fladd+1,___fldiv@a+1
  7115  002EF0  C0BC  F093         	movff	?___fladd+2,___fldiv@a+2
  7116  002EF4  C0BD  F094         	movff	?___fladd+3,___fldiv@a+3
  7117  002EF8  EC8A  F010         	call	___fldiv	;wreg free
  7118  002EFC  C08D  F0CE         	movff	?___fldiv,?_calibra
  7119  002F00  C08E  F0CF         	movff	?___fldiv+1,?_calibra+1
  7120  002F04  C08F  F0D0         	movff	?___fldiv+2,?_calibra+2
  7121  002F08  C090  F0D1         	movff	?___fldiv+3,?_calibra+3
  7122  002F0C  0012               	return	
  7123  002F0E                     __end_of_calibra:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           indf0	equ	0xFEF
  7133                           postinc0	equ	0xFEE
  7134                           fsr0h	equ	0xFEA
  7135                           fsr0l	equ	0xFE9
  7136                           wreg	equ	0xFE8
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function ___flneg *****************
  7144 ;; Defined at:
  7145 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/flneg.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  f1              4   45[COMRAM] float 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  4   45[COMRAM] float 
  7152 ;; Registers used:
  7153 ;;		wreg, status,2, status,0
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7159 ;;      Params:         4       0       0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0
  7162 ;;      Totals:         4       0       0       0       0       0       0
  7163 ;;Total ram usage:        4 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    2
  7166 ;; This function calls:
  7167 ;;		Nothing
  7168 ;; This function is called by:
  7169 ;;		_calibra
  7170 ;;		_sprintf
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           	psect	text27
  7175  0033E8                     __ptext27:
  7176                           	opt stack 0
  7177  0033E8                     ___flneg:
  7178                           	opt stack 27
  7179                           
  7180                           ;incstack = 0
  7181  0033E8  502E               	movf	___flneg@f1,w,c
  7182  0033EA  102F               	iorwf	___flneg@f1+1,w,c
  7183  0033EC  1030               	iorwf	___flneg@f1+2,w,c
  7184  0033EE  1031               	iorwf	___flneg@f1+3,w,c
  7185  0033F0  B4D8               	btfsc	status,2,c
  7186  0033F2  D008               	goto	l526
  7187  0033F4  0E00               	movlw	0
  7188  0033F6  1A2E               	xorwf	___flneg@f1,f,c
  7189  0033F8  0E00               	movlw	0
  7190  0033FA  1A2F               	xorwf	___flneg@f1+1,f,c
  7191  0033FC  0E00               	movlw	0
  7192  0033FE  1A30               	xorwf	___flneg@f1+2,f,c
  7193  003400  0E80               	movlw	128
  7194  003402  1A31               	xorwf	___flneg@f1+3,f,c
  7195  003404                     l526:
  7196  003404  C02E  F02E         	movff	___flneg@f1,?___flneg
  7197  003408  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  7198  00340C  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  7199  003410  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  7200  003414  0012               	return	
  7201  003416                     __end_of___flneg:
  7202                           	opt stack 0
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           indf0	equ	0xFEF
  7211                           postinc0	equ	0xFEE
  7212                           fsr0h	equ	0xFEA
  7213                           fsr0l	equ	0xFE9
  7214                           wreg	equ	0xFE8
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function ___fladd *****************
  7222 ;; Defined at:
  7223 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  b               4   58[BANK0 ] float 
  7226 ;;  a               4   62[BANK0 ] float 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  grs             1   77[BANK0 ] unsigned char 
  7229 ;;  bexp            1   76[BANK0 ] unsigned char 
  7230 ;;  aexp            1   75[BANK0 ] unsigned char 
  7231 ;;  signs           1   74[BANK0 ] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  4   58[BANK0 ] unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2, status,0
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7241 ;;      Params:         0       8       0       0       0       0       0
  7242 ;;      Locals:         0       4       0       0       0       0       0
  7243 ;;      Temps:          0       8       0       0       0       0       0
  7244 ;;      Totals:         0      20       0       0       0       0       0
  7245 ;;Total ram usage:       20 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    2
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_main
  7252 ;;		_calibra
  7253 ;;		_sprintf
  7254 ;;		___flsub
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text28
  7259  001DD6                     __ptext28:
  7260                           	opt stack 0
  7261  001DD6                     ___fladd:
  7262                           	opt stack 26
  7263                           
  7264                           ;incstack = 0
  7265  001DD6  0100               	movlb	0	; () banked
  7266  001DD8  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7267  001DDA  0B80               	andlw	128
  7268  001DDC  6FCA               	movwf	___fladd@signs& (0+255),b
  7269  001DDE  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7270  001DE0  25BD               	addwf	(___fladd@b+3)& (0+255),w,b
  7271  001DE2  6FCC               	movwf	___fladd@bexp& (0+255),b
  7272                           
  7273                           ; BSR set to: 0
  7274  001DE4  BFBC               	btfsc	(___fladd@b+2)& (0+255),7,b
  7275                           
  7276                           ; BSR set to: 0
  7277  001DE6  81CC               	bsf	___fladd@bexp& (0+255),0,b
  7278                           
  7279                           ; BSR set to: 0
  7280                           
  7281                           ; BSR set to: 0
  7282  001DE8  51CC               	movf	___fladd@bexp& (0+255),w,b
  7283  001DEA  B4D8               	btfsc	status,2,c
  7284  001DEC  D00D               	goto	l774
  7285                           
  7286                           ; BSR set to: 0
  7287  001DEE  29CC               	incf	___fladd@bexp& (0+255),w,b
  7288  001DF0  A4D8               	btfss	status,2,c
  7289  001DF2  D008               	goto	l775
  7290                           
  7291                           ; BSR set to: 0
  7292  001DF4  0E00               	movlw	0
  7293  001DF6  6FBA               	movwf	___fladd@b& (0+255),b
  7294  001DF8  0E00               	movlw	0
  7295  001DFA  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7296  001DFC  0E00               	movlw	0
  7297  001DFE  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7298  001E00  0E00               	movlw	0
  7299  001E02  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7300  001E04                     l775:
  7301                           
  7302                           ; BSR set to: 0
  7303                           
  7304                           ; BSR set to: 0
  7305  001E04  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7306  001E06  D006               	goto	L5
  7307  001E08                     l774:
  7308                           
  7309                           ; BSR set to: 0
  7310                           
  7311                           ; BSR set to: 0
  7312  001E08  0E00               	movlw	0
  7313  001E0A  6FBA               	movwf	___fladd@b& (0+255),b
  7314  001E0C  0E00               	movlw	0
  7315  001E0E  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7316  001E10  0E00               	movlw	0
  7317  001E12  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7318  001E14                     L5:
  7319  001E14  0E00               	movlw	0
  7320  001E16  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7321                           
  7322                           ; BSR set to: 0
  7323                           
  7324                           ; BSR set to: 0
  7325  001E18  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7326  001E1A  0B80               	andlw	128
  7327  001E1C  6FCB               	movwf	___fladd@aexp& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330  001E1E  51CA               	movf	___fladd@signs& (0+255),w,b
  7331  001E20  19CB               	xorwf	___fladd@aexp& (0+255),w,b
  7332  001E22  A4D8               	btfss	status,2,c
  7333                           
  7334                           ; BSR set to: 0
  7335  001E24  8DCA               	bsf	___fladd@signs& (0+255),6,b
  7336                           
  7337                           ; BSR set to: 0
  7338                           
  7339                           ; BSR set to: 0
  7340  001E26  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7341  001E28  25C1               	addwf	(___fladd@a+3)& (0+255),w,b
  7342  001E2A  6FCB               	movwf	___fladd@aexp& (0+255),b
  7343                           
  7344                           ; BSR set to: 0
  7345  001E2C  BFC0               	btfsc	(___fladd@a+2)& (0+255),7,b
  7346                           
  7347                           ; BSR set to: 0
  7348  001E2E  81CB               	bsf	___fladd@aexp& (0+255),0,b
  7349                           
  7350                           ; BSR set to: 0
  7351                           
  7352                           ; BSR set to: 0
  7353  001E30  51CB               	movf	___fladd@aexp& (0+255),w,b
  7354  001E32  B4D8               	btfsc	status,2,c
  7355  001E34  D00D               	goto	l779
  7356                           
  7357                           ; BSR set to: 0
  7358  001E36  29CB               	incf	___fladd@aexp& (0+255),w,b
  7359  001E38  A4D8               	btfss	status,2,c
  7360  001E3A  D008               	goto	l780
  7361                           
  7362                           ; BSR set to: 0
  7363  001E3C  0E00               	movlw	0
  7364  001E3E  6FBE               	movwf	___fladd@a& (0+255),b
  7365  001E40  0E00               	movlw	0
  7366  001E42  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7367  001E44  0E00               	movlw	0
  7368  001E46  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7369  001E48  0E00               	movlw	0
  7370  001E4A  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7371  001E4C                     l780:
  7372                           
  7373                           ; BSR set to: 0
  7374                           
  7375                           ; BSR set to: 0
  7376  001E4C  8FC0               	bsf	(___fladd@a+2)& (0+255),7,b
  7377  001E4E  D006               	goto	L6
  7378  001E50                     l779:
  7379                           
  7380                           ; BSR set to: 0
  7381                           
  7382                           ; BSR set to: 0
  7383  001E50  0E00               	movlw	0
  7384  001E52  6FBE               	movwf	___fladd@a& (0+255),b
  7385  001E54  0E00               	movlw	0
  7386  001E56  6FBF               	movwf	(___fladd@a+1)& (0+255),b
  7387  001E58  0E00               	movlw	0
  7388  001E5A  6FC0               	movwf	(___fladd@a+2)& (0+255),b
  7389  001E5C                     L6:
  7390  001E5C  0E00               	movlw	0
  7391  001E5E  6FC1               	movwf	(___fladd@a+3)& (0+255),b
  7392                           
  7393                           ; BSR set to: 0
  7394                           
  7395                           ; BSR set to: 0
  7396  001E60  51CC               	movf	___fladd@bexp& (0+255),w,b
  7397  001E62  5DCB               	subwf	___fladd@aexp& (0+255),w,b
  7398  001E64  B0D8               	btfsc	status,0,c
  7399  001E66  D022               	goto	l782
  7400                           
  7401                           ; BSR set to: 0
  7402  001E68  ADCA               	btfss	___fladd@signs& (0+255),6,b
  7403  001E6A  D002               	goto	l783
  7404                           
  7405                           ; BSR set to: 0
  7406  001E6C  0E80               	movlw	128
  7407  001E6E  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7408  001E70                     l783:
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ; BSR set to: 0
  7413  001E70  C0CC  F0CD         	movff	___fladd@bexp,___fladd@grs
  7414                           
  7415                           ; BSR set to: 0
  7416  001E74  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7417                           
  7418                           ; BSR set to: 0
  7419  001E78  C0CD  F0CB         	movff	___fladd@grs,___fladd@aexp
  7420                           
  7421                           ; BSR set to: 0
  7422  001E7C  C0BA  F0CD         	movff	___fladd@b,___fladd@grs
  7423                           
  7424                           ; BSR set to: 0
  7425  001E80  C0BE  F0BA         	movff	___fladd@a,___fladd@b
  7426                           
  7427                           ; BSR set to: 0
  7428  001E84  C0CD  F0BE         	movff	___fladd@grs,___fladd@a
  7429                           
  7430                           ; BSR set to: 0
  7431  001E88  C0BB  F0CD         	movff	___fladd@b+1,___fladd@grs
  7432                           
  7433                           ; BSR set to: 0
  7434  001E8C  C0BF  F0BB         	movff	___fladd@a+1,___fladd@b+1
  7435                           
  7436                           ; BSR set to: 0
  7437  001E90  C0CD  F0BF         	movff	___fladd@grs,___fladd@a+1
  7438                           
  7439                           ; BSR set to: 0
  7440  001E94  C0BC  F0CD         	movff	___fladd@b+2,___fladd@grs
  7441                           
  7442                           ; BSR set to: 0
  7443  001E98  C0C0  F0BC         	movff	___fladd@a+2,___fladd@b+2
  7444                           
  7445                           ; BSR set to: 0
  7446  001E9C  C0CD  F0C0         	movff	___fladd@grs,___fladd@a+2
  7447                           
  7448                           ; BSR set to: 0
  7449  001EA0  C0BD  F0CD         	movff	___fladd@b+3,___fladd@grs
  7450                           
  7451                           ; BSR set to: 0
  7452  001EA4  C0C1  F0BD         	movff	___fladd@a+3,___fladd@b+3
  7453                           
  7454                           ; BSR set to: 0
  7455  001EA8  C0CD  F0C1         	movff	___fladd@grs,___fladd@a+3
  7456  001EAC                     l782:
  7457                           
  7458                           ; BSR set to: 0
  7459                           
  7460                           ; BSR set to: 0
  7461  001EAC  0E00               	movlw	0
  7462  001EAE  6FCD               	movwf	___fladd@grs& (0+255),b
  7463                           
  7464                           ; BSR set to: 0
  7465  001EB0  51CC               	movf	___fladd@bexp& (0+255),w,b
  7466  001EB2  6FC2               	movwf	??___fladd& (0+255),b
  7467  001EB4  6BC3               	clrf	(??___fladd+1)& (0+255),b
  7468  001EB6  1FC2               	comf	??___fladd& (0+255),f,b
  7469  001EB8  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7470  001EBA  4BC2               	infsnz	??___fladd& (0+255),f,b
  7471  001EBC  2BC3               	incf	(??___fladd+1)& (0+255),f,b
  7472  001EBE  51CB               	movf	___fladd@aexp& (0+255),w,b
  7473  001EC0  6FC4               	movwf	(??___fladd+2)& (0+255),b
  7474  001EC2  6BC5               	clrf	(??___fladd+3)& (0+255),b
  7475  001EC4  51C2               	movf	??___fladd& (0+255),w,b
  7476  001EC6  27C4               	addwf	(??___fladd+2)& (0+255),f,b
  7477  001EC8  51C3               	movf	(??___fladd+1)& (0+255),w,b
  7478  001ECA  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7479  001ECC  BFC5               	btfsc	(??___fladd+3)& (0+255),7,b
  7480  001ECE  D02C               	goto	l786
  7481  001ED0  51C5               	movf	(??___fladd+3)& (0+255),w,b
  7482  001ED2  E104               	bnz	u4320
  7483  001ED4  0E1A               	movlw	26
  7484  001ED6  5DC4               	subwf	(??___fladd+2)& (0+255),w,b
  7485  001ED8  A0D8               	btfss	status,0,c
  7486  001EDA  D026               	goto	l786
  7487  001EDC                     u4320:
  7488                           
  7489                           ; BSR set to: 0
  7490  001EDC  51BA               	movf	___fladd@b& (0+255),w,b
  7491  001EDE  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7492  001EE0  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7493  001EE2  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7494  001EE4  B4D8               	btfsc	status,2,c
  7495  001EE6  D002               	goto	u4330
  7496  001EE8  0E01               	movlw	1
  7497  001EEA  D001               	goto	u4340
  7498  001EEC                     u4330:
  7499  001EEC  0E00               	movlw	0
  7500  001EEE                     u4340:
  7501  001EEE  6FCD               	movwf	___fladd@grs& (0+255),b
  7502                           
  7503                           ; BSR set to: 0
  7504  001EF0  0E00               	movlw	0
  7505  001EF2  6FBA               	movwf	___fladd@b& (0+255),b
  7506  001EF4  0E00               	movlw	0
  7507  001EF6  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7508  001EF8  0E00               	movlw	0
  7509  001EFA  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7510  001EFC  0E00               	movlw	0
  7511  001EFE  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7512                           
  7513                           ; BSR set to: 0
  7514  001F00  C0CB  F0CC         	movff	___fladd@aexp,___fladd@bexp
  7515  001F04  D015               	goto	u4370
  7516  001F06                     l787:
  7517                           
  7518                           ; BSR set to: 0
  7519  001F06  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7520  001F08  D005               	goto	l788
  7521                           
  7522                           ; BSR set to: 0
  7523  001F0A  90D8               	bcf	status,0,c
  7524  001F0C  31CD               	rrcf	___fladd@grs& (0+255),w,b
  7525  001F0E  0901               	iorlw	1
  7526  001F10  6FCD               	movwf	___fladd@grs& (0+255),b
  7527  001F12  D002               	goto	l789
  7528  001F14                     l788:
  7529                           
  7530                           ; BSR set to: 0
  7531                           
  7532                           ; BSR set to: 0
  7533  001F14  90D8               	bcf	status,0,c
  7534  001F16  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7535  001F18                     l789:
  7536                           
  7537                           ; BSR set to: 0
  7538                           
  7539                           ; BSR set to: 0
  7540  001F18  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7541                           
  7542                           ; BSR set to: 0
  7543  001F1A  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7544                           
  7545                           ; BSR set to: 0
  7546                           
  7547                           ; BSR set to: 0
  7548  001F1C  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7549  001F1E  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7550  001F20  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7551  001F22  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7552  001F24  33BA               	rrcf	___fladd@b& (0+255),f,b
  7553                           
  7554                           ; BSR set to: 0
  7555  001F26  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7556  001F28                     l786:
  7557                           
  7558                           ; BSR set to: 0
  7559  001F28  51CB               	movf	___fladd@aexp& (0+255),w,b
  7560  001F2A  5DCC               	subwf	___fladd@bexp& (0+255),w,b
  7561  001F2C  A0D8               	btfss	status,0,c
  7562  001F2E  D7EB               	goto	l787
  7563  001F30                     u4370:
  7564                           
  7565                           ; BSR set to: 0
  7566                           
  7567                           ; BSR set to: 0
  7568  001F30  BDCA               	btfsc	___fladd@signs& (0+255),6,b
  7569  001F32  D029               	goto	l792
  7570                           
  7571                           ; BSR set to: 0
  7572  001F34  51CC               	movf	___fladd@bexp& (0+255),w,b
  7573  001F36  A4D8               	btfss	status,2,c
  7574  001F38  D009               	goto	l793
  7575                           
  7576                           ; BSR set to: 0
  7577  001F3A  0E00               	movlw	0
  7578  001F3C  6FBA               	movwf	?___fladd& (0+255),b
  7579  001F3E  0E00               	movlw	0
  7580  001F40  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7581  001F42  0E00               	movlw	0
  7582  001F44  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7583  001F46  0E00               	movlw	0
  7584  001F48  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7585                           
  7586                           ; BSR set to: 0
  7587  001F4A  0012               	return	
  7588  001F4C                     l793:
  7589                           
  7590                           ; BSR set to: 0
  7591                           
  7592                           ; BSR set to: 0
  7593  001F4C  51BE               	movf	___fladd@a& (0+255),w,b
  7594  001F4E  27BA               	addwf	___fladd@b& (0+255),f,b
  7595  001F50  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7596  001F52  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7597  001F54  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7598  001F56  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7599  001F58  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7600  001F5A  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7601                           
  7602                           ; BSR set to: 0
  7603  001F5C  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7604  001F5E  D083               	goto	u4500
  7605                           
  7606                           ; BSR set to: 0
  7607  001F60  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7608  001F62  D006               	goto	l796
  7609                           
  7610                           ; BSR set to: 0
  7611  001F64  90D8               	bcf	status,0,c
  7612  001F66  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7613  001F68  51CD               	movf	___fladd@grs& (0+255),w,b
  7614  001F6A  0901               	iorlw	1
  7615  001F6C  6FCD               	movwf	___fladd@grs& (0+255),b
  7616  001F6E  D002               	goto	l797
  7617  001F70                     l796:
  7618                           
  7619                           ; BSR set to: 0
  7620                           
  7621                           ; BSR set to: 0
  7622  001F70  90D8               	bcf	status,0,c
  7623  001F72  33CD               	rrcf	___fladd@grs& (0+255),f,b
  7624  001F74                     l797:
  7625                           
  7626                           ; BSR set to: 0
  7627                           
  7628                           ; BSR set to: 0
  7629  001F74  B1BA               	btfsc	___fladd@b& (0+255),0,b
  7630                           
  7631                           ; BSR set to: 0
  7632  001F76  8FCD               	bsf	___fladd@grs& (0+255),7,b
  7633                           
  7634                           ; BSR set to: 0
  7635                           
  7636                           ; BSR set to: 0
  7637  001F78  35BD               	rlcf	(___fladd@b+3)& (0+255),w,b
  7638  001F7A  33BD               	rrcf	(___fladd@b+3)& (0+255),f,b
  7639  001F7C  33BC               	rrcf	(___fladd@b+2)& (0+255),f,b
  7640  001F7E  33BB               	rrcf	(___fladd@b+1)& (0+255),f,b
  7641  001F80  33BA               	rrcf	___fladd@b& (0+255),f,b
  7642                           
  7643                           ; BSR set to: 0
  7644  001F82  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7645                           
  7646                           ; BSR set to: 0
  7647  001F84  D070               	goto	u4500
  7648  001F86                     l792:
  7649                           
  7650                           ; BSR set to: 0
  7651                           
  7652                           ; BSR set to: 0
  7653  001F86  51BE               	movf	___fladd@a& (0+255),w,b
  7654  001F88  5DBA               	subwf	___fladd@b& (0+255),w,b
  7655  001F8A  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7656  001F8C  59BB               	subwfb	(___fladd@b+1)& (0+255),w,b
  7657  001F8E  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7658  001F90  59BC               	subwfb	(___fladd@b+2)& (0+255),w,b
  7659  001F92  51BD               	movf	(___fladd@b+3)& (0+255),w,b
  7660  001F94  0A80               	xorlw	128
  7661  001F96  6FC2               	movwf	??___fladd& (0+255),b
  7662  001F98  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7663  001F9A  0A80               	xorlw	128
  7664  001F9C  59C2               	subwfb	??___fladd& (0+255),w,b
  7665  001F9E  B0D8               	btfsc	status,0,c
  7666  001FA0  D036               	goto	l800
  7667                           
  7668                           ; BSR set to: 0
  7669  001FA2  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7670  001FA6  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7671  001FAA  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7672  001FAE  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7673  001FB2  1FC2               	comf	??___fladd& (0+255),f,b
  7674  001FB4  1FC3               	comf	(??___fladd+1)& (0+255),f,b
  7675  001FB6  1FC4               	comf	(??___fladd+2)& (0+255),f,b
  7676  001FB8  1FC5               	comf	(??___fladd+3)& (0+255),f,b
  7677  001FBA  2BC2               	incf	??___fladd& (0+255),f,b
  7678  001FBC  0E00               	movlw	0
  7679  001FBE  23C3               	addwfc	(??___fladd+1)& (0+255),f,b
  7680  001FC0  23C4               	addwfc	(??___fladd+2)& (0+255),f,b
  7681  001FC2  23C5               	addwfc	(??___fladd+3)& (0+255),f,b
  7682  001FC4  51BE               	movf	___fladd@a& (0+255),w,b
  7683  001FC6  25C2               	addwf	??___fladd& (0+255),w,b
  7684  001FC8  6FC6               	movwf	(??___fladd+4)& (0+255),b
  7685  001FCA  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7686  001FCC  21C3               	addwfc	(??___fladd+1)& (0+255),w,b
  7687  001FCE  6FC7               	movwf	(??___fladd+5)& (0+255),b
  7688  001FD0  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7689  001FD2  21C4               	addwfc	(??___fladd+2)& (0+255),w,b
  7690  001FD4  6FC8               	movwf	(??___fladd+6)& (0+255),b
  7691  001FD6  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7692  001FD8  21C5               	addwfc	(??___fladd+3)& (0+255),w,b
  7693  001FDA  6FC9               	movwf	(??___fladd+7)& (0+255),b
  7694  001FDC  0EFF               	movlw	255
  7695  001FDE  25C6               	addwf	(??___fladd+4)& (0+255),w,b
  7696  001FE0  6FBA               	movwf	___fladd@b& (0+255),b
  7697  001FE2  0EFF               	movlw	255
  7698  001FE4  21C7               	addwfc	(??___fladd+5)& (0+255),w,b
  7699  001FE6  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7700  001FE8  0EFF               	movlw	255
  7701  001FEA  21C8               	addwfc	(??___fladd+6)& (0+255),w,b
  7702  001FEC  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7703  001FEE  0EFF               	movlw	255
  7704  001FF0  21C9               	addwfc	(??___fladd+7)& (0+255),w,b
  7705  001FF2  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7706  001FF4  0E80               	movlw	128
  7707  001FF6  1BCA               	xorwf	___fladd@signs& (0+255),f,b
  7708                           
  7709                           ; BSR set to: 0
  7710  001FF8  6DCD               	negf	___fladd@grs& (0+255),b
  7711                           
  7712                           ; BSR set to: 0
  7713  001FFA  51CD               	movf	___fladd@grs& (0+255),w,b
  7714  001FFC  A4D8               	btfss	status,2,c
  7715  001FFE  D00F               	goto	l802
  7716                           
  7717                           ; BSR set to: 0
  7718  002000  0E01               	movlw	1
  7719  002002  27BA               	addwf	___fladd@b& (0+255),f,b
  7720  002004  0E00               	movlw	0
  7721  002006  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7722  002008  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7723  00200A  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7724                           
  7725                           ; BSR set to: 0
  7726  00200C  D008               	goto	l802
  7727  00200E                     l800:
  7728                           
  7729                           ; BSR set to: 0
  7730                           
  7731                           ; BSR set to: 0
  7732  00200E  51BE               	movf	___fladd@a& (0+255),w,b
  7733  002010  5FBA               	subwf	___fladd@b& (0+255),f,b
  7734  002012  51BF               	movf	(___fladd@a+1)& (0+255),w,b
  7735  002014  5BBB               	subwfb	(___fladd@b+1)& (0+255),f,b
  7736  002016  51C0               	movf	(___fladd@a+2)& (0+255),w,b
  7737  002018  5BBC               	subwfb	(___fladd@b+2)& (0+255),f,b
  7738  00201A  51C1               	movf	(___fladd@a+3)& (0+255),w,b
  7739  00201C  5BBD               	subwfb	(___fladd@b+3)& (0+255),f,b
  7740  00201E                     l802:
  7741                           
  7742                           ; BSR set to: 0
  7743  00201E  51BA               	movf	___fladd@b& (0+255),w,b
  7744  002020  11BB               	iorwf	(___fladd@b+1)& (0+255),w,b
  7745  002022  11BC               	iorwf	(___fladd@b+2)& (0+255),w,b
  7746  002024  11BD               	iorwf	(___fladd@b+3)& (0+255),w,b
  7747  002026  A4D8               	btfss	status,2,c
  7748  002028  D01C               	goto	l809
  7749                           
  7750                           ; BSR set to: 0
  7751  00202A  51CD               	movf	___fladd@grs& (0+255),w,b
  7752  00202C  A4D8               	btfss	status,2,c
  7753  00202E  D019               	goto	l809
  7754                           
  7755                           ; BSR set to: 0
  7756  002030  0E00               	movlw	0
  7757  002032  6FBA               	movwf	?___fladd& (0+255),b
  7758  002034  0E00               	movlw	0
  7759  002036  6FBB               	movwf	(?___fladd+1)& (0+255),b
  7760  002038  0E00               	movlw	0
  7761  00203A  6FBC               	movwf	(?___fladd+2)& (0+255),b
  7762  00203C  0E00               	movlw	0
  7763  00203E  6FBD               	movwf	(?___fladd+3)& (0+255),b
  7764                           
  7765                           ; BSR set to: 0
  7766  002040  0012               	return	
  7767  002042                     
  7768                           ; BSR set to: 0
  7769                           
  7770                           ; BSR set to: 0
  7771  002042  90D8               	bcf	status,0,c
  7772  002044  37BA               	rlcf	___fladd@b& (0+255),f,b
  7773  002046  37BB               	rlcf	(___fladd@b+1)& (0+255),f,b
  7774  002048  37BC               	rlcf	(___fladd@b+2)& (0+255),f,b
  7775  00204A  37BD               	rlcf	(___fladd@b+3)& (0+255),f,b
  7776                           
  7777                           ; BSR set to: 0
  7778  00204C  BFCD               	btfsc	___fladd@grs& (0+255),7,b
  7779                           
  7780                           ; BSR set to: 0
  7781  00204E  81BA               	bsf	___fladd@b& (0+255),0,b
  7782                           
  7783                           ; BSR set to: 0
  7784                           
  7785                           ; BSR set to: 0
  7786  002050  A1CD               	btfss	___fladd@grs& (0+255),0,b
  7787  002052  D002               	goto	l807
  7788                           
  7789                           ; BSR set to: 0
  7790  002054  80D8               	bsf	status,0,c
  7791  002056  D001               	goto	L7
  7792  002058                     l807:
  7793                           
  7794                           ; BSR set to: 0
  7795                           
  7796                           ; BSR set to: 0
  7797  002058  90D8               	bcf	status,0,c
  7798  00205A                     L7:
  7799  00205A  37CD               	rlcf	___fladd@grs& (0+255),f,b
  7800                           
  7801                           ; BSR set to: 0
  7802                           
  7803                           ; BSR set to: 0
  7804  00205C  51CC               	movf	___fladd@bexp& (0+255),w,b
  7805  00205E  A4D8               	btfss	status,2,c
  7806                           
  7807                           ; BSR set to: 0
  7808  002060  07CC               	decf	___fladd@bexp& (0+255),f,b
  7809  002062                     l809:
  7810                           
  7811                           ; BSR set to: 0
  7812                           
  7813                           ; BSR set to: 0
  7814                           
  7815                           ; BSR set to: 0
  7816  002062  AFBC               	btfss	(___fladd@b+2)& (0+255),7,b
  7817  002064  D7EE               	goto	l805
  7818  002066                     u4500:
  7819                           
  7820                           ; BSR set to: 0
  7821                           
  7822                           ; BSR set to: 0
  7823                           
  7824                           ; BSR set to: 0
  7825  002066  0E00               	movlw	0
  7826  002068  6FCB               	movwf	___fladd@aexp& (0+255),b
  7827                           
  7828                           ; BSR set to: 0
  7829  00206A  AFCD               	btfss	___fladd@grs& (0+255),7,b
  7830  00206C  D00A               	goto	l814
  7831                           
  7832                           ; BSR set to: 0
  7833  00206E  C0CD  F0C2         	movff	___fladd@grs,??___fladd
  7834  002072  0E7F               	movlw	127
  7835  002074  17C2               	andwf	??___fladd& (0+255),f,b
  7836  002076  A4D8               	btfss	status,2,c
  7837  002078  D002               	goto	u4530
  7838                           
  7839                           ; BSR set to: 0
  7840                           
  7841                           ; BSR set to: 0
  7842  00207A  A1BA               	btfss	___fladd@b& (0+255),0,b
  7843  00207C  D002               	goto	l814
  7844  00207E                     u4530:
  7845                           
  7846                           ; BSR set to: 0
  7847  00207E  0E01               	movlw	1
  7848  002080  6FCB               	movwf	___fladd@aexp& (0+255),b
  7849  002082                     l814:
  7850                           
  7851                           ; BSR set to: 0
  7852                           
  7853                           ; BSR set to: 0
  7854                           
  7855                           ; BSR set to: 0
  7856  002082  51CB               	movf	___fladd@aexp& (0+255),w,b
  7857  002084  B4D8               	btfsc	status,2,c
  7858  002086  D020               	goto	l817
  7859                           
  7860                           ; BSR set to: 0
  7861  002088  0E01               	movlw	1
  7862  00208A  27BA               	addwf	___fladd@b& (0+255),f,b
  7863  00208C  0E00               	movlw	0
  7864  00208E  23BB               	addwfc	(___fladd@b+1)& (0+255),f,b
  7865  002090  23BC               	addwfc	(___fladd@b+2)& (0+255),f,b
  7866  002092  23BD               	addwfc	(___fladd@b+3)& (0+255),f,b
  7867                           
  7868                           ; BSR set to: 0
  7869  002094  A1BD               	btfss	(___fladd@b+3)& (0+255),0,b
  7870  002096  D018               	goto	l817
  7871                           
  7872                           ; BSR set to: 0
  7873  002098  C0BA  F0C2         	movff	___fladd@b,??___fladd
  7874  00209C  C0BB  F0C3         	movff	___fladd@b+1,??___fladd+1
  7875  0020A0  C0BC  F0C4         	movff	___fladd@b+2,??___fladd+2
  7876  0020A4  C0BD  F0C5         	movff	___fladd@b+3,??___fladd+3
  7877  0020A8  35C5               	rlcf	(??___fladd+3)& (0+255),w,b
  7878  0020AA  33C5               	rrcf	(??___fladd+3)& (0+255),f,b
  7879  0020AC  33C4               	rrcf	(??___fladd+2)& (0+255),f,b
  7880  0020AE  33C3               	rrcf	(??___fladd+1)& (0+255),f,b
  7881  0020B0  33C2               	rrcf	??___fladd& (0+255),f,b
  7882  0020B2  C0C2  F0BA         	movff	??___fladd,___fladd@b
  7883  0020B6  C0C3  F0BB         	movff	??___fladd+1,___fladd@b+1
  7884  0020BA  C0C4  F0BC         	movff	??___fladd+2,___fladd@b+2
  7885  0020BE  C0C5  F0BD         	movff	??___fladd+3,___fladd@b+3
  7886  0020C2  29CC               	incf	___fladd@bexp& (0+255),w,b
  7887  0020C4  A4D8               	btfss	status,2,c
  7888                           
  7889                           ; BSR set to: 0
  7890  0020C6  2BCC               	incf	___fladd@bexp& (0+255),f,b
  7891  0020C8                     l817:
  7892                           
  7893                           ; BSR set to: 0
  7894                           
  7895                           ; BSR set to: 0
  7896                           
  7897                           ; BSR set to: 0
  7898                           
  7899                           ; BSR set to: 0
  7900  0020C8  29CC               	incf	___fladd@bexp& (0+255),w,b
  7901  0020CA  B4D8               	btfsc	status,2,c
  7902  0020CC  D003               	goto	u4580
  7903                           
  7904                           ; BSR set to: 0
  7905  0020CE  51CC               	movf	___fladd@bexp& (0+255),w,b
  7906  0020D0  A4D8               	btfss	status,2,c
  7907  0020D2  D00D               	goto	l821
  7908  0020D4                     u4580:
  7909                           
  7910                           ; BSR set to: 0
  7911                           
  7912                           ; BSR set to: 0
  7913  0020D4  0E00               	movlw	0
  7914  0020D6  6FBA               	movwf	___fladd@b& (0+255),b
  7915  0020D8  0E00               	movlw	0
  7916  0020DA  6FBB               	movwf	(___fladd@b+1)& (0+255),b
  7917  0020DC  0E00               	movlw	0
  7918  0020DE  6FBC               	movwf	(___fladd@b+2)& (0+255),b
  7919  0020E0  0E00               	movlw	0
  7920  0020E2  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7921  0020E4  51CC               	movf	___fladd@bexp& (0+255),w,b
  7922  0020E6  A4D8               	btfss	status,2,c
  7923  0020E8  D002               	goto	l821
  7924                           
  7925                           ; BSR set to: 0
  7926  0020EA  0E00               	movlw	0
  7927  0020EC  6FCA               	movwf	___fladd@signs& (0+255),b
  7928  0020EE                     l821:
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933                           
  7934                           ; BSR set to: 0
  7935  0020EE  A1CC               	btfss	___fladd@bexp& (0+255),0,b
  7936  0020F0  D002               	goto	l822
  7937                           
  7938                           ; BSR set to: 0
  7939  0020F2  8FBC               	bsf	(___fladd@b+2)& (0+255),7,b
  7940  0020F4  D001               	goto	l823
  7941  0020F6                     l822:
  7942                           
  7943                           ; BSR set to: 0
  7944                           
  7945                           ; BSR set to: 0
  7946  0020F6  9FBC               	bcf	(___fladd@b+2)& (0+255),7,b
  7947  0020F8                     l823:
  7948                           
  7949                           ; BSR set to: 0
  7950                           
  7951                           ; BSR set to: 0
  7952  0020F8  90D8               	bcf	status,0,c
  7953  0020FA  31CC               	rrcf	___fladd@bexp& (0+255),w,b
  7954  0020FC  6FBD               	movwf	(___fladd@b+3)& (0+255),b
  7955                           
  7956                           ; BSR set to: 0
  7957  0020FE  BFCA               	btfsc	___fladd@signs& (0+255),7,b
  7958                           
  7959                           ; BSR set to: 0
  7960  002100  8FBD               	bsf	(___fladd@b+3)& (0+255),7,b
  7961                           
  7962                           ; BSR set to: 0
  7963                           
  7964                           ; BSR set to: 0
  7965  002102  C0BA  F0BA         	movff	___fladd@b,?___fladd
  7966  002106  C0BB  F0BB         	movff	___fladd@b+1,?___fladd+1
  7967  00210A  C0BC  F0BC         	movff	___fladd@b+2,?___fladd+2
  7968  00210E  C0BD  F0BD         	movff	___fladd@b+3,?___fladd+3
  7969  002112  0012               	return	
  7970  002114                     __end_of___fladd:
  7971                           	opt stack 0
  7972                           tblptru	equ	0xFF8
  7973                           tblptrh	equ	0xFF7
  7974                           tblptrl	equ	0xFF6
  7975                           tablat	equ	0xFF5
  7976                           prodh	equ	0xFF4
  7977                           prodl	equ	0xFF3
  7978                           intcon	equ	0xFF2
  7979                           indf0	equ	0xFEF
  7980                           postinc0	equ	0xFEE
  7981                           fsr0h	equ	0xFEA
  7982                           fsr0l	equ	0xFE9
  7983                           wreg	equ	0xFE8
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function _calcula *****************
  7991 ;; Defined at:
  7992 ;;		line 297 in file "color_3.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;		None
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  temp            4   54[BANK0 ] float 
  7997 ;;  freq            4   50[BANK0 ] float 
  7998 ;;  elapsedTime     4   46[BANK0 ] unsigned long 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  4   38[BANK0 ] float 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8008 ;;      Params:         0       4       0       0       0       0       0
  8009 ;;      Locals:         0      12       0       0       0       0       0
  8010 ;;      Temps:          0       4       0       0       0       0       0
  8011 ;;      Totals:         0      20       0       0       0       0       0
  8012 ;;Total ram usage:       20 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    3
  8015 ;; This function calls:
  8016 ;;		___fldiv
  8017 ;;		___flmul
  8018 ;;		___xxtofl
  8019 ;;		_prepareForInterrupts
  8020 ;; This function is called by:
  8021 ;;		_main
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text29
  8026  002C4C                     __ptext29:
  8027                           	opt stack 0
  8028  002C4C                     _calcula:
  8029                           	opt stack 27
  8030                           
  8031                           ;color_3.c: 299: float freq = 0.0;
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;incstack = 0
  8035  002C4C  0E00               	movlw	0
  8036  002C4E  0100               	movlb	0	; () banked
  8037  002C50  6FB2               	movwf	calcula@freq& (0+255),b
  8038  002C52  0E00               	movlw	0
  8039  002C54  6FB3               	movwf	(calcula@freq+1)& (0+255),b
  8040  002C56  0E00               	movlw	0
  8041  002C58  6FB4               	movwf	(calcula@freq+2)& (0+255),b
  8042  002C5A  0E00               	movlw	0
  8043  002C5C  6FB5               	movwf	(calcula@freq+3)& (0+255),b
  8044                           
  8045                           ;color_3.c: 300: float temp = 0.0;
  8046  002C5E  0E00               	movlw	0
  8047  002C60  6FB6               	movwf	calcula@temp& (0+255),b
  8048  002C62  0E00               	movlw	0
  8049  002C64  6FB7               	movwf	(calcula@temp+1)& (0+255),b
  8050  002C66  0E00               	movlw	0
  8051  002C68  6FB8               	movwf	(calcula@temp+2)& (0+255),b
  8052  002C6A  0E00               	movlw	0
  8053  002C6C  6FB9               	movwf	(calcula@temp+3)& (0+255),b
  8054                           
  8055                           ;color_3.c: 301: if (!triggered)
  8056  002C6E  504E               	movf	_triggered,w,c	;volatile
  8057  002C70  B4D8               	btfsc	status,2,c
  8058  002C72  0012               	return	
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;color_3.c: 304: }
  8062                           ;color_3.c: 306: unsigned long elapsedTime = finishTime - startTime;
  8063                           
  8064                           ; BSR set to: 0
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;color_3.c: 302: {
  8068                           ;color_3.c: 303: return;
  8069  002C74  C0E8  F0AA         	movff	_startTime,??_calcula	;volatile
  8070  002C78  C0E9  F0AB         	movff	_startTime+1,??_calcula+1	;volatile
  8071  002C7C  C0EA  F0AC         	movff	_startTime+2,??_calcula+2	;volatile
  8072  002C80  C0EB  F0AD         	movff	_startTime+3,??_calcula+3	;volatile
  8073  002C84  1FAA               	comf	??_calcula& (0+255),f,b
  8074  002C86  1FAB               	comf	(??_calcula+1)& (0+255),f,b
  8075  002C88  1FAC               	comf	(??_calcula+2)& (0+255),f,b
  8076  002C8A  1FAD               	comf	(??_calcula+3)& (0+255),f,b
  8077  002C8C  2BAA               	incf	??_calcula& (0+255),f,b
  8078  002C8E  0E00               	movlw	0
  8079  002C90  23AB               	addwfc	(??_calcula+1)& (0+255),f,b
  8080  002C92  23AC               	addwfc	(??_calcula+2)& (0+255),f,b
  8081  002C94  23AD               	addwfc	(??_calcula+3)& (0+255),f,b
  8082  002C96  51E4               	movf	_finishTime& (0+255),w,b	;volatile
  8083  002C98  25AA               	addwf	??_calcula& (0+255),w,b
  8084  002C9A  6FAE               	movwf	calcula@elapsedTime& (0+255),b
  8085  002C9C  51E5               	movf	(_finishTime+1)& (0+255),w,b	;volatile
  8086  002C9E  21AB               	addwfc	(??_calcula+1)& (0+255),w,b
  8087  002CA0  6FAF               	movwf	(calcula@elapsedTime+1)& (0+255),b
  8088  002CA2  51E6               	movf	(_finishTime+2)& (0+255),w,b	;volatile
  8089  002CA4  21AC               	addwfc	(??_calcula+2)& (0+255),w,b
  8090  002CA6  6FB0               	movwf	(calcula@elapsedTime+2)& (0+255),b
  8091  002CA8  51E7               	movf	(_finishTime+3)& (0+255),w,b	;volatile
  8092  002CAA  21AD               	addwfc	(??_calcula+3)& (0+255),w,b
  8093  002CAC  6FB1               	movwf	(calcula@elapsedTime+3)& (0+255),b
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;color_3.c: 308: temp = (float) (elapsedTime);
  8097  002CAE  C0AE  F02E         	movff	calcula@elapsedTime,___xxtofl@val
  8098  002CB2  C0AF  F02F         	movff	calcula@elapsedTime+1,___xxtofl@val+1
  8099  002CB6  C0B0  F030         	movff	calcula@elapsedTime+2,___xxtofl@val+2
  8100  002CBA  C0B1  F031         	movff	calcula@elapsedTime+3,___xxtofl@val+3
  8101  002CBE  0E00               	movlw	0
  8102  002CC0  EC2E  F013         	call	___xxtofl
  8103  002CC4  C02E  F0B6         	movff	?___xxtofl,calcula@temp
  8104  002CC8  C02F  F0B7         	movff	?___xxtofl+1,calcula@temp+1
  8105  002CCC  C030  F0B8         	movff	?___xxtofl+2,calcula@temp+2
  8106  002CD0  C031  F0B9         	movff	?___xxtofl+3,calcula@temp+3
  8107                           
  8108                           ;color_3.c: 309: temp *= 250e-9;
  8109  002CD4  C0B6  F03C         	movff	calcula@temp,___flmul@b
  8110  002CD8  C0B7  F03D         	movff	calcula@temp+1,___flmul@b+1
  8111  002CDC  C0B8  F03E         	movff	calcula@temp+2,___flmul@b+2
  8112  002CE0  C0B9  F03F         	movff	calcula@temp+3,___flmul@b+3
  8113  002CE4  0EBD               	movlw	189
  8114  002CE6  6E40               	movwf	___flmul@a,c
  8115  002CE8  0E37               	movlw	55
  8116  002CEA  6E41               	movwf	___flmul@a+1,c
  8117  002CEC  0E86               	movlw	134
  8118  002CEE  6E42               	movwf	___flmul@a+2,c
  8119  002CF0  0E34               	movlw	52
  8120  002CF2  6E43               	movwf	___flmul@a+3,c
  8121  002CF4  EC42  F00D         	call	___flmul	;wreg free
  8122  002CF8  C03C  F0B6         	movff	?___flmul,calcula@temp
  8123  002CFC  C03D  F0B7         	movff	?___flmul+1,calcula@temp+1
  8124  002D00  C03E  F0B8         	movff	?___flmul+2,calcula@temp+2
  8125  002D04  C03F  F0B9         	movff	?___flmul+3,calcula@temp+3
  8126                           
  8127                           ;color_3.c: 310: freq = 1.0/(temp);
  8128  002D08  0E00               	movlw	0
  8129  002D0A  0100               	movlb	0	; () banked
  8130  002D0C  6F8D               	movwf	___fldiv@b& (0+255),b
  8131  002D0E  0E00               	movlw	0
  8132  002D10  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  8133  002D12  0E80               	movlw	128
  8134  002D14  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  8135  002D16  0E3F               	movlw	63
  8136  002D18  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  8137  002D1A  C0B6  F091         	movff	calcula@temp,___fldiv@a
  8138  002D1E  C0B7  F092         	movff	calcula@temp+1,___fldiv@a+1
  8139  002D22  C0B8  F093         	movff	calcula@temp+2,___fldiv@a+2
  8140  002D26  C0B9  F094         	movff	calcula@temp+3,___fldiv@a+3
  8141  002D2A  EC8A  F010         	call	___fldiv	;wreg free
  8142  002D2E  C08D  F0B2         	movff	?___fldiv,calcula@freq
  8143  002D32  C08E  F0B3         	movff	?___fldiv+1,calcula@freq+1
  8144  002D36  C08F  F0B4         	movff	?___fldiv+2,calcula@freq+2
  8145  002D3A  C090  F0B5         	movff	?___fldiv+3,calcula@freq+3
  8146                           
  8147                           ;color_3.c: 311: prepareForInterrupts ();
  8148  002D3E  EC5B  F01A         	call	_prepareForInterrupts	;wreg free
  8149                           
  8150                           ;color_3.c: 312: _delay((unsigned long)((10)*(16000000/4000.0)));
  8151  002D42  0E34               	movlw	52
  8152  002D44  0100               	movlb	0	; () banked
  8153  002D46  6FAA               	movwf	??_calcula& (0+255),b
  8154  002D48  0EF1               	movlw	241
  8155  002D4A                     u6427:
  8156  002D4A  2EE8               	decfsz	wreg,f,c
  8157  002D4C  D7FE               	bra	u6427
  8158  002D4E  2FAA               	decfsz	??_calcula& (0+255),f,b
  8159  002D50  D7FC               	bra	u6427
  8160  002D52  D000               	nop2	
  8161                           
  8162                           ;color_3.c: 313: return freq;
  8163  002D54  C0B2  F0A6         	movff	calcula@freq,?_calcula
  8164  002D58  C0B3  F0A7         	movff	calcula@freq+1,?_calcula+1
  8165  002D5C  C0B4  F0A8         	movff	calcula@freq+2,?_calcula+2
  8166  002D60  C0B5  F0A9         	movff	calcula@freq+3,?_calcula+3
  8167  002D64  0012               	return	
  8168  002D66                     __end_of_calcula:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           indf0	equ	0xFEF
  8178                           postinc0	equ	0xFEE
  8179                           fsr0h	equ	0xFEA
  8180                           fsr0l	equ	0xFE9
  8181                           wreg	equ	0xFE8
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _prepareForInterrupts *****************
  8189 ;; Defined at:
  8190 ;;		line 316 in file "color_3.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8204 ;;      Params:         0       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    2
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_main
  8215 ;;		_calcula
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text30
  8220  0034B6                     __ptext30:
  8221                           	opt stack 0
  8222  0034B6                     _prepareForInterrupts:
  8223                           	opt stack 28
  8224                           
  8225                           ;color_3.c: 320: first = true;
  8226                           
  8227                           ;color_3.c: 319: INT0IF == 0;
  8228                           
  8229                           ;incstack = 0
  8230  0034B6  0E01               	movlw	1
  8231  0034B8  6E4F               	movwf	_first,c	;volatile
  8232                           
  8233                           ;color_3.c: 321: triggered = false;
  8234  0034BA  0E00               	movlw	0
  8235  0034BC  6E4E               	movwf	_triggered,c	;volatile
  8236                           
  8237                           ;color_3.c: 326: INT0IE = 1;
  8238  0034BE  88F2               	bsf	intcon,4,c	;volatile
  8239                           
  8240                           ;color_3.c: 327: INTEDG0 = 1;
  8241  0034C0  8CF1               	bsf	intcon2,6,c	;volatile
  8242  0034C2  0012               	return		;funcret
  8243  0034C4                     __end_of_prepareForInterrupts:
  8244                           	opt stack 0
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           intcon	equ	0xFF2
  8252                           intcon2	equ	0xFF1
  8253                           indf0	equ	0xFEF
  8254                           postinc0	equ	0xFEE
  8255                           fsr0h	equ	0xFEA
  8256                           fsr0l	equ	0xFE9
  8257                           wreg	equ	0xFE8
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function ___xxtofl *****************
  8265 ;; Defined at:
  8266 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/xxtofl.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  sign            1    wreg     unsigned char 
  8269 ;;  val             4   45[COMRAM] long 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  sign            1   53[COMRAM] unsigned char 
  8272 ;;  arg             4   55[COMRAM] unsigned long 
  8273 ;;  exp             1   54[COMRAM] unsigned char 
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  4   45[COMRAM] unsigned char 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8283 ;;      Params:         4       0       0       0       0       0       0
  8284 ;;      Locals:         6       0       0       0       0       0       0
  8285 ;;      Temps:          4       0       0       0       0       0       0
  8286 ;;      Totals:        14       0       0       0       0       0       0
  8287 ;;Total ram usage:       14 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    2
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_calcula
  8294 ;;		_sprintf
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text31
  8299  00265C                     __ptext31:
  8300                           	opt stack 0
  8301  00265C                     ___xxtofl:
  8302                           	opt stack 27
  8303                           
  8304                           ;incstack = 0
  8305                           ;___xxtofl@sign stored from wreg
  8306  00265C  6E36               	movwf	___xxtofl@sign,c
  8307  00265E  5036               	movf	___xxtofl@sign,w,c
  8308  002660  A4D8               	btfss	status,2,c
  8309  002662  AE31               	btfss	___xxtofl@val+3,7,c
  8310  002664  D01A               	goto	l893
  8311  002666  C02E  F032         	movff	___xxtofl@val,??___xxtofl
  8312  00266A  C02F  F033         	movff	___xxtofl@val+1,??___xxtofl+1
  8313  00266E  C030  F034         	movff	___xxtofl@val+2,??___xxtofl+2
  8314  002672  C031  F035         	movff	___xxtofl@val+3,??___xxtofl+3
  8315  002676  1E32               	comf	??___xxtofl,f,c
  8316  002678  1E33               	comf	??___xxtofl+1,f,c
  8317  00267A  1E34               	comf	??___xxtofl+2,f,c
  8318  00267C  1E35               	comf	??___xxtofl+3,f,c
  8319  00267E  2A32               	incf	??___xxtofl,f,c
  8320  002680  0E00               	movlw	0
  8321  002682  2233               	addwfc	??___xxtofl+1,f,c
  8322  002684  2234               	addwfc	??___xxtofl+2,f,c
  8323  002686  2235               	addwfc	??___xxtofl+3,f,c
  8324  002688  C032  F038         	movff	??___xxtofl,___xxtofl@arg
  8325  00268C  C033  F039         	movff	??___xxtofl+1,___xxtofl@arg+1
  8326  002690  C034  F03A         	movff	??___xxtofl+2,___xxtofl@arg+2
  8327  002694  C035  F03B         	movff	??___xxtofl+3,___xxtofl@arg+3
  8328  002698  D008               	goto	l894
  8329  00269A                     l893:
  8330  00269A  C02E  F038         	movff	___xxtofl@val,___xxtofl@arg
  8331  00269E  C02F  F039         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8332  0026A2  C030  F03A         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8333  0026A6  C031  F03B         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8334  0026AA                     l894:
  8335  0026AA  502E               	movf	___xxtofl@val,w,c
  8336  0026AC  102F               	iorwf	___xxtofl@val+1,w,c
  8337  0026AE  1030               	iorwf	___xxtofl@val+2,w,c
  8338  0026B0  1031               	iorwf	___xxtofl@val+3,w,c
  8339  0026B2  A4D8               	btfss	status,2,c
  8340  0026B4  D009               	goto	l895
  8341  0026B6  0E00               	movlw	0
  8342  0026B8  6E2E               	movwf	?___xxtofl,c
  8343  0026BA  0E00               	movlw	0
  8344  0026BC  6E2F               	movwf	?___xxtofl+1,c
  8345  0026BE  0E00               	movlw	0
  8346  0026C0  6E30               	movwf	?___xxtofl+2,c
  8347  0026C2  0E00               	movlw	0
  8348  0026C4  6E31               	movwf	?___xxtofl+3,c
  8349  0026C6  0012               	return	
  8350  0026C8                     l895:
  8351  0026C8  0E96               	movlw	150
  8352  0026CA  6E37               	movwf	___xxtofl@exp,c
  8353  0026CC  D006               	goto	l897
  8354  0026CE  2A37               	incf	___xxtofl@exp,f,c
  8355  0026D0  90D8               	bcf	status,0,c
  8356  0026D2  323B               	rrcf	___xxtofl@arg+3,f,c
  8357  0026D4  323A               	rrcf	___xxtofl@arg+2,f,c
  8358  0026D6  3239               	rrcf	___xxtofl@arg+1,f,c
  8359  0026D8  3238               	rrcf	___xxtofl@arg,f,c
  8360  0026DA                     l897:
  8361  0026DA  0E00               	movlw	0
  8362  0026DC  1438               	andwf	___xxtofl@arg,w,c
  8363  0026DE  6E32               	movwf	??___xxtofl& (0+255),c
  8364  0026E0  0E00               	movlw	0
  8365  0026E2  1439               	andwf	___xxtofl@arg+1,w,c
  8366  0026E4  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8367  0026E6  0E00               	movlw	0
  8368  0026E8  143A               	andwf	___xxtofl@arg+2,w,c
  8369  0026EA  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8370  0026EC  0EFE               	movlw	254
  8371  0026EE  143B               	andwf	___xxtofl@arg+3,w,c
  8372  0026F0  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8373  0026F2  5032               	movf	??___xxtofl,w,c
  8374  0026F4  1033               	iorwf	??___xxtofl+1,w,c
  8375  0026F6  1034               	iorwf	??___xxtofl+2,w,c
  8376  0026F8  1035               	iorwf	??___xxtofl+3,w,c
  8377  0026FA  B4D8               	btfsc	status,2,c
  8378  0026FC  D00D               	goto	l900
  8379  0026FE  D7E7               	goto	l898
  8380  002700  2A37               	incf	___xxtofl@exp,f,c
  8381  002702  0E01               	movlw	1
  8382  002704  2638               	addwf	___xxtofl@arg,f,c
  8383  002706  0E00               	movlw	0
  8384  002708  2239               	addwfc	___xxtofl@arg+1,f,c
  8385  00270A  223A               	addwfc	___xxtofl@arg+2,f,c
  8386  00270C  223B               	addwfc	___xxtofl@arg+3,f,c
  8387  00270E  90D8               	bcf	status,0,c
  8388  002710  323B               	rrcf	___xxtofl@arg+3,f,c
  8389  002712  323A               	rrcf	___xxtofl@arg+2,f,c
  8390  002714  3239               	rrcf	___xxtofl@arg+1,f,c
  8391  002716  3238               	rrcf	___xxtofl@arg,f,c
  8392  002718                     l900:
  8393  002718  0E00               	movlw	0
  8394  00271A  1438               	andwf	___xxtofl@arg,w,c
  8395  00271C  6E32               	movwf	??___xxtofl& (0+255),c
  8396  00271E  0E00               	movlw	0
  8397  002720  1439               	andwf	___xxtofl@arg+1,w,c
  8398  002722  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  8399  002724  0E00               	movlw	0
  8400  002726  143A               	andwf	___xxtofl@arg+2,w,c
  8401  002728  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  8402  00272A  0EFF               	movlw	255
  8403  00272C  143B               	andwf	___xxtofl@arg+3,w,c
  8404  00272E  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  8405  002730  5032               	movf	??___xxtofl,w,c
  8406  002732  1033               	iorwf	??___xxtofl+1,w,c
  8407  002734  1034               	iorwf	??___xxtofl+2,w,c
  8408  002736  1035               	iorwf	??___xxtofl+3,w,c
  8409  002738  B4D8               	btfsc	status,2,c
  8410  00273A  D007               	goto	l903
  8411  00273C  D7E1               	goto	l901
  8412  00273E  0637               	decf	___xxtofl@exp,f,c
  8413  002740  90D8               	bcf	status,0,c
  8414  002742  3638               	rlcf	___xxtofl@arg,f,c
  8415  002744  3639               	rlcf	___xxtofl@arg+1,f,c
  8416  002746  363A               	rlcf	___xxtofl@arg+2,f,c
  8417  002748  363B               	rlcf	___xxtofl@arg+3,f,c
  8418  00274A                     l903:
  8419  00274A  BE3A               	btfsc	___xxtofl@arg+2,7,c
  8420  00274C  D003               	goto	u5660
  8421  00274E  0E02               	movlw	2
  8422  002750  6037               	cpfslt	___xxtofl@exp,c
  8423  002752  D7F5               	goto	l904
  8424  002754                     u5660:
  8425  002754  B037               	btfsc	___xxtofl@exp,0,c
  8426  002756  D008               	goto	l908
  8427  002758  0EFF               	movlw	255
  8428  00275A  1638               	andwf	___xxtofl@arg,f,c
  8429  00275C  0EFF               	movlw	255
  8430  00275E  1639               	andwf	___xxtofl@arg+1,f,c
  8431  002760  0E7F               	movlw	127
  8432  002762  163A               	andwf	___xxtofl@arg+2,f,c
  8433  002764  0EFF               	movlw	255
  8434  002766  163B               	andwf	___xxtofl@arg+3,f,c
  8435  002768                     l908:
  8436  002768  90D8               	bcf	status,0,c
  8437  00276A  3237               	rrcf	___xxtofl@exp,f,c
  8438  00276C  C037  F032         	movff	___xxtofl@exp,??___xxtofl
  8439  002770  6A33               	clrf	(??___xxtofl+1)& (0+255),c
  8440  002772  6A34               	clrf	(??___xxtofl+2)& (0+255),c
  8441  002774  6A35               	clrf	(??___xxtofl+3)& (0+255),c
  8442  002776  C032  F035         	movff	??___xxtofl,??___xxtofl+3
  8443  00277A  6A34               	clrf	??___xxtofl+2,c
  8444  00277C  6A33               	clrf	??___xxtofl+1,c
  8445  00277E  6A32               	clrf	??___xxtofl,c
  8446  002780  5032               	movf	??___xxtofl,w,c
  8447  002782  1238               	iorwf	___xxtofl@arg,f,c
  8448  002784  5033               	movf	??___xxtofl+1,w,c
  8449  002786  1239               	iorwf	___xxtofl@arg+1,f,c
  8450  002788  5034               	movf	??___xxtofl+2,w,c
  8451  00278A  123A               	iorwf	___xxtofl@arg+2,f,c
  8452  00278C  5035               	movf	??___xxtofl+3,w,c
  8453  00278E  123B               	iorwf	___xxtofl@arg+3,f,c
  8454  002790  5036               	movf	___xxtofl@sign,w,c
  8455  002792  A4D8               	btfss	status,2,c
  8456  002794  AE31               	btfss	___xxtofl@val+3,7,c
  8457  002796  D001               	goto	l909
  8458  002798  8E3B               	bsf	___xxtofl@arg+3,7,c
  8459  00279A                     l909:
  8460  00279A  C038  F02E         	movff	___xxtofl@arg,?___xxtofl
  8461  00279E  C039  F02F         	movff	___xxtofl@arg+1,?___xxtofl+1
  8462  0027A2  C03A  F030         	movff	___xxtofl@arg+2,?___xxtofl+2
  8463  0027A6  C03B  F031         	movff	___xxtofl@arg+3,?___xxtofl+3
  8464  0027AA  0012               	return	
  8465  0027AC                     __end_of___xxtofl:
  8466                           	opt stack 0
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           indf0	equ	0xFEF
  8476                           postinc0	equ	0xFEE
  8477                           fsr0h	equ	0xFEA
  8478                           fsr0l	equ	0xFE9
  8479                           wreg	equ	0xFE8
  8480                           indf2	equ	0xFDF
  8481                           postinc2	equ	0xFDE
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           
  8486 ;; *************** function ___flmul *****************
  8487 ;; Defined at:
  8488 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/sprcmul.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  b               4   59[COMRAM] unsigned char 
  8491 ;;  a               4   63[COMRAM] unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  prod            4    7[BANK0 ] struct .
  8494 ;;  grs             4    2[BANK0 ] unsigned long 
  8495 ;;  temp            2   11[BANK0 ] struct .
  8496 ;;  bexp            1    6[BANK0 ] unsigned char 
  8497 ;;  aexp            1    1[BANK0 ] unsigned char 
  8498 ;;  sign            1    0[BANK0 ] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  4   59[COMRAM] unsigned char 
  8501 ;; Registers used:
  8502 ;;		wreg, status,2, status,0, prodl, prodh
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8508 ;;      Params:         8       0       0       0       0       0       0
  8509 ;;      Locals:         0      13       0       0       0       0       0
  8510 ;;      Temps:          4       0       0       0       0       0       0
  8511 ;;      Totals:        12      13       0       0       0       0       0
  8512 ;;Total ram usage:       25 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    2
  8515 ;; This function calls:
  8516 ;;		Nothing
  8517 ;; This function is called by:
  8518 ;;		_calcula
  8519 ;;		_calibra
  8520 ;;		_fround
  8521 ;;		_scale
  8522 ;;		_sprintf
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text32
  8527  001A84                     __ptext32:
  8528                           	opt stack 0
  8529  001A84                     ___flmul:
  8530                           	opt stack 26
  8531                           
  8532                           ;incstack = 0
  8533  001A84  503F               	movf	___flmul@b+3,w,c
  8534  001A86  0B80               	andlw	128
  8535  001A88  0100               	movlb	0	; () banked
  8536  001A8A  6F80               	movwf	___flmul@sign& (0+255),b
  8537  001A8C  503F               	movf	___flmul@b+3,w,c
  8538  001A8E  243F               	addwf	___flmul@b+3,w,c
  8539  001A90  6F86               	movwf	___flmul@bexp& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542  001A92  BE3E               	btfsc	___flmul@b+2,7,c
  8543                           
  8544                           ; BSR set to: 0
  8545  001A94  8186               	bsf	___flmul@bexp& (0+255),0,b
  8546                           
  8547                           ; BSR set to: 0
  8548                           
  8549                           ; BSR set to: 0
  8550  001A96  5186               	movf	___flmul@bexp& (0+255),w,b
  8551  001A98  B4D8               	btfsc	status,2,c
  8552  001A9A  D00D               	goto	l865
  8553                           
  8554                           ; BSR set to: 0
  8555  001A9C  2986               	incf	___flmul@bexp& (0+255),w,b
  8556  001A9E  A4D8               	btfss	status,2,c
  8557  001AA0  D008               	goto	l866
  8558                           
  8559                           ; BSR set to: 0
  8560  001AA2  0E00               	movlw	0
  8561  001AA4  6E3C               	movwf	___flmul@b,c
  8562  001AA6  0E00               	movlw	0
  8563  001AA8  6E3D               	movwf	___flmul@b+1,c
  8564  001AAA  0E00               	movlw	0
  8565  001AAC  6E3E               	movwf	___flmul@b+2,c
  8566  001AAE  0E00               	movlw	0
  8567  001AB0  6E3F               	movwf	___flmul@b+3,c
  8568  001AB2                     l866:
  8569                           
  8570                           ; BSR set to: 0
  8571                           
  8572                           ; BSR set to: 0
  8573  001AB2  8E3E               	bsf	___flmul@b+2,7,c
  8574  001AB4  D008               	goto	l867
  8575  001AB6                     l865:
  8576                           
  8577                           ; BSR set to: 0
  8578                           
  8579                           ; BSR set to: 0
  8580  001AB6  0E00               	movlw	0
  8581  001AB8  6E3C               	movwf	___flmul@b,c
  8582  001ABA  0E00               	movlw	0
  8583  001ABC  6E3D               	movwf	___flmul@b+1,c
  8584  001ABE  0E00               	movlw	0
  8585  001AC0  6E3E               	movwf	___flmul@b+2,c
  8586  001AC2  0E00               	movlw	0
  8587  001AC4  6E3F               	movwf	___flmul@b+3,c
  8588  001AC6                     l867:
  8589                           
  8590                           ; BSR set to: 0
  8591                           
  8592                           ; BSR set to: 0
  8593  001AC6  5043               	movf	___flmul@a+3,w,c
  8594  001AC8  0B80               	andlw	128
  8595  001ACA  1B80               	xorwf	___flmul@sign& (0+255),f,b
  8596                           
  8597                           ; BSR set to: 0
  8598  001ACC  5043               	movf	___flmul@a+3,w,c
  8599  001ACE  2443               	addwf	___flmul@a+3,w,c
  8600  001AD0  6F81               	movwf	___flmul@aexp& (0+255),b
  8601                           
  8602                           ; BSR set to: 0
  8603  001AD2  BE42               	btfsc	___flmul@a+2,7,c
  8604                           
  8605                           ; BSR set to: 0
  8606  001AD4  8181               	bsf	___flmul@aexp& (0+255),0,b
  8607                           
  8608                           ; BSR set to: 0
  8609                           
  8610                           ; BSR set to: 0
  8611  001AD6  5181               	movf	___flmul@aexp& (0+255),w,b
  8612  001AD8  B4D8               	btfsc	status,2,c
  8613  001ADA  D00D               	goto	l869
  8614                           
  8615                           ; BSR set to: 0
  8616  001ADC  2981               	incf	___flmul@aexp& (0+255),w,b
  8617  001ADE  A4D8               	btfss	status,2,c
  8618  001AE0  D008               	goto	l870
  8619                           
  8620                           ; BSR set to: 0
  8621  001AE2  0E00               	movlw	0
  8622  001AE4  6E40               	movwf	___flmul@a,c
  8623  001AE6  0E00               	movlw	0
  8624  001AE8  6E41               	movwf	___flmul@a+1,c
  8625  001AEA  0E00               	movlw	0
  8626  001AEC  6E42               	movwf	___flmul@a+2,c
  8627  001AEE  0E00               	movlw	0
  8628  001AF0  6E43               	movwf	___flmul@a+3,c
  8629  001AF2                     l870:
  8630                           
  8631                           ; BSR set to: 0
  8632                           
  8633                           ; BSR set to: 0
  8634  001AF2  8E42               	bsf	___flmul@a+2,7,c
  8635  001AF4  D008               	goto	l871
  8636  001AF6                     l869:
  8637                           
  8638                           ; BSR set to: 0
  8639                           
  8640                           ; BSR set to: 0
  8641  001AF6  0E00               	movlw	0
  8642  001AF8  6E40               	movwf	___flmul@a,c
  8643  001AFA  0E00               	movlw	0
  8644  001AFC  6E41               	movwf	___flmul@a+1,c
  8645  001AFE  0E00               	movlw	0
  8646  001B00  6E42               	movwf	___flmul@a+2,c
  8647  001B02  0E00               	movlw	0
  8648  001B04  6E43               	movwf	___flmul@a+3,c
  8649  001B06                     l871:
  8650                           
  8651                           ; BSR set to: 0
  8652  001B06  5181               	movf	___flmul@aexp& (0+255),w,b
  8653  001B08  B4D8               	btfsc	status,2,c
  8654  001B0A  D003               	goto	u4690
  8655                           
  8656                           ; BSR set to: 0
  8657  001B0C  5186               	movf	___flmul@bexp& (0+255),w,b
  8658  001B0E  A4D8               	btfss	status,2,c
  8659  001B10  D009               	goto	l872
  8660  001B12                     u4690:
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  001B12  0E00               	movlw	0
  8666  001B14  6E3C               	movwf	?___flmul,c
  8667  001B16  0E00               	movlw	0
  8668  001B18  6E3D               	movwf	?___flmul+1,c
  8669  001B1A  0E00               	movlw	0
  8670  001B1C  6E3E               	movwf	?___flmul+2,c
  8671  001B1E  0E00               	movlw	0
  8672  001B20  6E3F               	movwf	?___flmul+3,c
  8673                           
  8674                           ; BSR set to: 0
  8675  001B22  0012               	return	
  8676  001B24                     l872:
  8677                           
  8678                           ; BSR set to: 0
  8679                           
  8680                           ; BSR set to: 0
  8681  001B24  5042               	movf	___flmul@a+2,w,c
  8682  001B26  023C               	mulwf	___flmul@b,c
  8683  001B28  CFF3 F08B          	movff	prodl,___flmul@temp
  8684  001B2C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8685                           
  8686                           ; BSR set to: 0
  8687  001B30  518B               	movf	___flmul@temp& (0+255),w,b
  8688  001B32  6F82               	movwf	___flmul@grs& (0+255),b
  8689  001B34  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  8690  001B36  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  8691  001B38  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  8692                           
  8693                           ; BSR set to: 0
  8694  001B3A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8695  001B3C  6F87               	movwf	___flmul@prod& (0+255),b
  8696  001B3E  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  8697  001B40  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  8698  001B42  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  8699  001B44  5041               	movf	___flmul@a+1,w,c
  8700  001B46  023D               	mulwf	___flmul@b+1,c
  8701  001B48  CFF3 F08B          	movff	prodl,___flmul@temp
  8702  001B4C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8703                           
  8704                           ; BSR set to: 0
  8705  001B50  518B               	movf	___flmul@temp& (0+255),w,b
  8706  001B52  2782               	addwf	___flmul@grs& (0+255),f,b
  8707  001B54  0E00               	movlw	0
  8708  001B56  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8709  001B58  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8710  001B5A  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8711                           
  8712                           ; BSR set to: 0
  8713  001B5C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8714  001B5E  2787               	addwf	___flmul@prod& (0+255),f,b
  8715  001B60  0E00               	movlw	0
  8716  001B62  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8717  001B64  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8718  001B66  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8719  001B68  5040               	movf	___flmul@a,w,c
  8720  001B6A  023E               	mulwf	___flmul@b+2,c
  8721  001B6C  CFF3 F08B          	movff	prodl,___flmul@temp
  8722  001B70  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8723                           
  8724                           ; BSR set to: 0
  8725  001B74  518B               	movf	___flmul@temp& (0+255),w,b
  8726  001B76  2782               	addwf	___flmul@grs& (0+255),f,b
  8727  001B78  0E00               	movlw	0
  8728  001B7A  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8729  001B7C  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8730  001B7E  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8731                           
  8732                           ; BSR set to: 0
  8733  001B80  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8734  001B82  2787               	addwf	___flmul@prod& (0+255),f,b
  8735  001B84  0E00               	movlw	0
  8736  001B86  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8737  001B88  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8738  001B8A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 0
  8741  001B8C  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8742  001B90  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8743  001B94  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8744  001B98  6B82               	clrf	___flmul@grs& (0+255),b
  8745                           
  8746                           ; BSR set to: 0
  8747  001B9A  5040               	movf	___flmul@a,w,c
  8748  001B9C  023D               	mulwf	___flmul@b+1,c
  8749  001B9E  CFF3 F08B          	movff	prodl,___flmul@temp
  8750  001BA2  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8751                           
  8752                           ; BSR set to: 0
  8753  001BA6  518B               	movf	___flmul@temp& (0+255),w,b
  8754  001BA8  2782               	addwf	___flmul@grs& (0+255),f,b
  8755  001BAA  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8756  001BAC  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8757  001BAE  0E00               	movlw	0
  8758  001BB0  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8759  001BB2  0E00               	movlw	0
  8760  001BB4  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8761                           
  8762                           ; BSR set to: 0
  8763  001BB6  5041               	movf	___flmul@a+1,w,c
  8764  001BB8  023C               	mulwf	___flmul@b,c
  8765  001BBA  CFF3 F08B          	movff	prodl,___flmul@temp
  8766  001BBE  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8767                           
  8768                           ; BSR set to: 0
  8769  001BC2  518B               	movf	___flmul@temp& (0+255),w,b
  8770  001BC4  2782               	addwf	___flmul@grs& (0+255),f,b
  8771  001BC6  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8772  001BC8  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8773  001BCA  0E00               	movlw	0
  8774  001BCC  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8775  001BCE  0E00               	movlw	0
  8776  001BD0  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8777                           
  8778                           ; BSR set to: 0
  8779  001BD2  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8780  001BD6  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8781  001BDA  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8782  001BDE  6B82               	clrf	___flmul@grs& (0+255),b
  8783  001BE0  5040               	movf	___flmul@a,w,c
  8784  001BE2  023C               	mulwf	___flmul@b,c
  8785  001BE4  CFF3 F08B          	movff	prodl,___flmul@temp
  8786  001BE8  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8787                           
  8788                           ; BSR set to: 0
  8789  001BEC  518B               	movf	___flmul@temp& (0+255),w,b
  8790  001BEE  2782               	addwf	___flmul@grs& (0+255),f,b
  8791  001BF0  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8792  001BF2  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8793  001BF4  0E00               	movlw	0
  8794  001BF6  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8795  001BF8  0E00               	movlw	0
  8796  001BFA  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8797                           
  8798                           ; BSR set to: 0
  8799  001BFC  5042               	movf	___flmul@a+2,w,c
  8800  001BFE  023D               	mulwf	___flmul@b+1,c
  8801  001C00  CFF3 F08B          	movff	prodl,___flmul@temp
  8802  001C04  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8803  001C08  518B               	movf	___flmul@temp& (0+255),w,b
  8804  001C0A  2787               	addwf	___flmul@prod& (0+255),f,b
  8805  001C0C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8806  001C0E  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8807  001C10  0E00               	movlw	0
  8808  001C12  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8809  001C14  0E00               	movlw	0
  8810  001C16  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8811                           
  8812                           ; BSR set to: 0
  8813  001C18  5041               	movf	___flmul@a+1,w,c
  8814  001C1A  023E               	mulwf	___flmul@b+2,c
  8815  001C1C  CFF3 F08B          	movff	prodl,___flmul@temp
  8816  001C20  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8817                           
  8818                           ; BSR set to: 0
  8819  001C24  518B               	movf	___flmul@temp& (0+255),w,b
  8820  001C26  2787               	addwf	___flmul@prod& (0+255),f,b
  8821  001C28  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8822  001C2A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8823  001C2C  0E00               	movlw	0
  8824  001C2E  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8825  001C30  0E00               	movlw	0
  8826  001C32  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8827  001C34  5042               	movf	___flmul@a+2,w,c
  8828  001C36  023E               	mulwf	___flmul@b+2,c
  8829  001C38  CFF3 F08B          	movff	prodl,___flmul@temp
  8830  001C3C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  8831                           
  8832                           ; BSR set to: 0
  8833  001C40  518B               	movf	___flmul@temp& (0+255),w,b
  8834  001C42  6E44               	movwf	??___flmul& (0+255),c
  8835  001C44  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  8836  001C46  6E45               	movwf	(??___flmul+1)& (0+255),c
  8837  001C48  6A46               	clrf	(??___flmul+2)& (0+255),c
  8838  001C4A  6A47               	clrf	(??___flmul+3)& (0+255),c
  8839  001C4C  C046  F047         	movff	??___flmul+2,??___flmul+3
  8840  001C50  C045  F046         	movff	??___flmul+1,??___flmul+2
  8841  001C54  C044  F045         	movff	??___flmul,??___flmul+1
  8842  001C58  6A44               	clrf	??___flmul,c
  8843  001C5A  5044               	movf	??___flmul,w,c
  8844  001C5C  2787               	addwf	___flmul@prod& (0+255),f,b
  8845  001C5E  5045               	movf	??___flmul+1,w,c
  8846  001C60  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8847  001C62  5046               	movf	??___flmul+2,w,c
  8848  001C64  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8849  001C66  5047               	movf	??___flmul+3,w,c
  8850  001C68  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8851                           
  8852                           ; BSR set to: 0
  8853  001C6A  C082  F044         	movff	___flmul@grs,??___flmul
  8854  001C6E  C083  F045         	movff	___flmul@grs+1,??___flmul+1
  8855  001C72  C084  F046         	movff	___flmul@grs+2,??___flmul+2
  8856  001C76  C085  F047         	movff	___flmul@grs+3,??___flmul+3
  8857  001C7A  0E19               	movlw	25
  8858  001C7C  D005               	goto	u4700
  8859  001C7E                     u4705:
  8860  001C7E  90D8               	bcf	status,0,c
  8861  001C80  3247               	rrcf	??___flmul+3,f,c
  8862  001C82  3246               	rrcf	??___flmul+2,f,c
  8863  001C84  3245               	rrcf	??___flmul+1,f,c
  8864  001C86  3244               	rrcf	??___flmul,f,c
  8865  001C88                     u4700:
  8866  001C88  2EE8               	decfsz	wreg,f,c
  8867  001C8A  D7F9               	goto	u4705
  8868  001C8C  5044               	movf	??___flmul,w,c
  8869  001C8E  2787               	addwf	___flmul@prod& (0+255),f,b
  8870  001C90  5045               	movf	??___flmul+1,w,c
  8871  001C92  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8872  001C94  5046               	movf	??___flmul+2,w,c
  8873  001C96  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8874  001C98  5047               	movf	??___flmul+3,w,c
  8875  001C9A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8876                           
  8877                           ; BSR set to: 0
  8878  001C9C  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  8879  001CA0  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  8880  001CA4  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  8881  001CA8  6B82               	clrf	___flmul@grs& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884  001CAA  5181               	movf	___flmul@aexp& (0+255),w,b
  8885  001CAC  C086  F044         	movff	___flmul@bexp,??___flmul
  8886  001CB0  6A45               	clrf	(??___flmul+1)& (0+255),c
  8887  001CB2  2644               	addwf	??___flmul,f,c
  8888  001CB4  0E00               	movlw	0
  8889  001CB6  2245               	addwfc	??___flmul+1,f,c
  8890  001CB8  0E82               	movlw	130
  8891  001CBA  2444               	addwf	??___flmul,w,c
  8892  001CBC  6F8B               	movwf	___flmul@temp& (0+255),b
  8893  001CBE  0EFF               	movlw	255
  8894  001CC0  2045               	addwfc	??___flmul+1,w,c
  8895  001CC2  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  8896  001CC4  D00F               	goto	l876
  8897  001CC6                     
  8898                           ; BSR set to: 0
  8899                           
  8900                           ; BSR set to: 0
  8901  001CC6  90D8               	bcf	status,0,c
  8902  001CC8  3787               	rlcf	___flmul@prod& (0+255),f,b
  8903  001CCA  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  8904  001CCC  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  8905  001CCE  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  8906                           
  8907                           ; BSR set to: 0
  8908  001CD0  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  8909                           
  8910                           ; BSR set to: 0
  8911  001CD2  8187               	bsf	___flmul@prod& (0+255),0,b
  8912                           
  8913                           ; BSR set to: 0
  8914  001CD4  90D8               	bcf	status,0,c
  8915  001CD6  3782               	rlcf	___flmul@grs& (0+255),f,b
  8916  001CD8  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  8917  001CDA  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  8918  001CDC  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  8919  001CDE  078B               	decf	___flmul@temp& (0+255),f,b
  8920  001CE0  A0D8               	btfss	status,0,c
  8921  001CE2  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  8922  001CE4                     l876:
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927  001CE4  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  8928  001CE6  D7EF               	goto	l877
  8929                           
  8930                           ; BSR set to: 0
  8931                           
  8932                           ; BSR set to: 0
  8933  001CE8  0E00               	movlw	0
  8934  001CEA  6F81               	movwf	___flmul@aexp& (0+255),b
  8935                           
  8936                           ; BSR set to: 0
  8937  001CEC  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  8938  001CEE  D016               	goto	l883
  8939                           
  8940                           ; BSR set to: 0
  8941  001CF0  0EFF               	movlw	255
  8942  001CF2  1582               	andwf	___flmul@grs& (0+255),w,b
  8943  001CF4  6E44               	movwf	??___flmul& (0+255),c
  8944  001CF6  0EFF               	movlw	255
  8945  001CF8  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  8946  001CFA  6E45               	movwf	(??___flmul+1)& (0+255),c
  8947  001CFC  0EFF               	movlw	255
  8948  001CFE  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  8949  001D00  6E46               	movwf	(??___flmul+2)& (0+255),c
  8950  001D02  0E7F               	movlw	127
  8951  001D04  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  8952  001D06  6E47               	movwf	(??___flmul+3)& (0+255),c
  8953  001D08  5044               	movf	??___flmul,w,c
  8954  001D0A  1045               	iorwf	??___flmul+1,w,c
  8955  001D0C  1046               	iorwf	??___flmul+2,w,c
  8956  001D0E  1047               	iorwf	??___flmul+3,w,c
  8957  001D10  A4D8               	btfss	status,2,c
  8958  001D12  D002               	goto	u4750
  8959                           
  8960                           ; BSR set to: 0
  8961                           
  8962                           ; BSR set to: 0
  8963  001D14  A187               	btfss	___flmul@prod& (0+255),0,b
  8964  001D16  D002               	goto	l883
  8965  001D18                     u4750:
  8966                           
  8967                           ; BSR set to: 0
  8968  001D18  0E01               	movlw	1
  8969  001D1A  6F81               	movwf	___flmul@aexp& (0+255),b
  8970  001D1C                     l883:
  8971                           
  8972                           ; BSR set to: 0
  8973                           
  8974                           ; BSR set to: 0
  8975                           
  8976                           ; BSR set to: 0
  8977  001D1C  5181               	movf	___flmul@aexp& (0+255),w,b
  8978  001D1E  B4D8               	btfsc	status,2,c
  8979  001D20  D01F               	goto	l885
  8980                           
  8981                           ; BSR set to: 0
  8982  001D22  0E01               	movlw	1
  8983  001D24  2787               	addwf	___flmul@prod& (0+255),f,b
  8984  001D26  0E00               	movlw	0
  8985  001D28  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8986  001D2A  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8987  001D2C  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8988                           
  8989                           ; BSR set to: 0
  8990  001D2E  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  8991  001D30  D017               	goto	l885
  8992                           
  8993                           ; BSR set to: 0
  8994  001D32  C087  F044         	movff	___flmul@prod,??___flmul
  8995  001D36  C088  F045         	movff	___flmul@prod+1,??___flmul+1
  8996  001D3A  C089  F046         	movff	___flmul@prod+2,??___flmul+2
  8997  001D3E  C08A  F047         	movff	___flmul@prod+3,??___flmul+3
  8998  001D42  3447               	rlcf	??___flmul+3,w,c
  8999  001D44  3247               	rrcf	??___flmul+3,f,c
  9000  001D46  3246               	rrcf	??___flmul+2,f,c
  9001  001D48  3245               	rrcf	??___flmul+1,f,c
  9002  001D4A  3244               	rrcf	??___flmul,f,c
  9003  001D4C  C044  F087         	movff	??___flmul,___flmul@prod
  9004  001D50  C045  F088         	movff	??___flmul+1,___flmul@prod+1
  9005  001D54  C046  F089         	movff	??___flmul+2,___flmul@prod+2
  9006  001D58  C047  F08A         	movff	??___flmul+3,___flmul@prod+3
  9007                           
  9008                           ; BSR set to: 0
  9009  001D5C  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  9010  001D5E  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  9011  001D60                     l885:
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016                           
  9017                           ; BSR set to: 0
  9018  001D60  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9019  001D62  D00D               	goto	l886
  9020  001D64  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9021  001D66  E103               	bnz	u4780
  9022  001D68  298B               	incf	___flmul@temp& (0+255),w,b
  9023  001D6A  A0D8               	btfss	status,0,c
  9024  001D6C  D008               	goto	l886
  9025  001D6E                     u4780:
  9026                           
  9027                           ; BSR set to: 0
  9028  001D6E  0E00               	movlw	0
  9029  001D70  6F87               	movwf	___flmul@prod& (0+255),b
  9030  001D72  0E00               	movlw	0
  9031  001D74  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9032  001D76  0E80               	movlw	128
  9033  001D78  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9034  001D7A  0E7F               	movlw	127
  9035  001D7C  D020               	goto	L8
  9036  001D7E                     l886:
  9037                           
  9038                           ; BSR set to: 0
  9039                           
  9040                           ; BSR set to: 0
  9041  001D7E  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9042  001D80  D005               	goto	u4790
  9043  001D82  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  9044  001D84  E10E               	bnz	l888
  9045  001D86  058B               	decf	___flmul@temp& (0+255),w,b
  9046  001D88  B0D8               	btfsc	status,0,c
  9047  001D8A  D00B               	goto	l888
  9048  001D8C                     u4790:
  9049                           
  9050                           ; BSR set to: 0
  9051  001D8C  0E00               	movlw	0
  9052  001D8E  6F87               	movwf	___flmul@prod& (0+255),b
  9053  001D90  0E00               	movlw	0
  9054  001D92  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  9055  001D94  0E00               	movlw	0
  9056  001D96  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  9057  001D98  0E00               	movlw	0
  9058  001D9A  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9059  001D9C  0E00               	movlw	0
  9060  001D9E  6F80               	movwf	___flmul@sign& (0+255),b
  9061  001DA0  D00F               	goto	l889
  9062  001DA2                     l888:
  9063                           
  9064                           ; BSR set to: 0
  9065  001DA2  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  9066                           
  9067                           ; BSR set to: 0
  9068  001DA6  0EFF               	movlw	255
  9069  001DA8  1787               	andwf	___flmul@prod& (0+255),f,b
  9070  001DAA  0EFF               	movlw	255
  9071  001DAC  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  9072  001DAE  0E7F               	movlw	127
  9073  001DB0  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  9074  001DB2  0E00               	movlw	0
  9075  001DB4  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  9076                           
  9077                           ; BSR set to: 0
  9078  001DB6  B186               	btfsc	___flmul@bexp& (0+255),0,b
  9079                           
  9080                           ; BSR set to: 0
  9081  001DB8  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  9082                           
  9083                           ; BSR set to: 0
  9084                           
  9085                           ; BSR set to: 0
  9086  001DBA  90D8               	bcf	status,0,c
  9087  001DBC  3186               	rrcf	___flmul@bexp& (0+255),w,b
  9088  001DBE                     L8:
  9089  001DBE  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  9090  001DC0                     l889:
  9091                           
  9092                           ; BSR set to: 0
  9093                           
  9094                           ; BSR set to: 0
  9095                           
  9096                           ; BSR set to: 0
  9097  001DC0  5180               	movf	___flmul@sign& (0+255),w,b
  9098  001DC2  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  9099                           
  9100                           ; BSR set to: 0
  9101  001DC4  C087  F03C         	movff	___flmul@prod,?___flmul
  9102  001DC8  C088  F03D         	movff	___flmul@prod+1,?___flmul+1
  9103  001DCC  C089  F03E         	movff	___flmul@prod+2,?___flmul+2
  9104  001DD0  C08A  F03F         	movff	___flmul@prod+3,?___flmul+3
  9105  001DD4  0012               	return	
  9106  001DD6                     __end_of___flmul:
  9107                           	opt stack 0
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           indf0	equ	0xFEF
  9117                           postinc0	equ	0xFEE
  9118                           fsr0h	equ	0xFEA
  9119                           fsr0l	equ	0xFE9
  9120                           wreg	equ	0xFE8
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function ___fldiv *****************
  9128 ;; Defined at:
  9129 ;;		line 11 in file "/opt/microchip/xc8/v1.45/sources/common/sprcdiv.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  b               4   13[BANK0 ] unsigned char 
  9132 ;;  a               4   17[BANK0 ] unsigned char 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;  grs             4   32[BANK0 ] unsigned long 
  9135 ;;  rem             4   26[BANK0 ] unsigned long 
  9136 ;;  new_exp         2   30[BANK0 ] int 
  9137 ;;  aexp            1   37[BANK0 ] unsigned char 
  9138 ;;  bexp            1   36[BANK0 ] unsigned char 
  9139 ;;  sign            1   25[BANK0 ] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  4   13[BANK0 ] unsigned char 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9149 ;;      Params:         0       8       0       0       0       0       0
  9150 ;;      Locals:         0      13       0       0       0       0       0
  9151 ;;      Temps:          0       4       0       0       0       0       0
  9152 ;;      Totals:         0      25       0       0       0       0       0
  9153 ;;Total ram usage:       25 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    2
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_main
  9160 ;;		_calcula
  9161 ;;		_calibra
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text33
  9166  002114                     __ptext33:
  9167                           	opt stack 0
  9168  002114                     ___fldiv:
  9169                           	opt stack 27
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;incstack = 0
  9173  002114  0100               	movlb	0	; () banked
  9174  002116  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9175  002118  0B80               	andlw	128
  9176  00211A  6F99               	movwf	___fldiv@sign& (0+255),b
  9177  00211C  5190               	movf	(___fldiv@b+3)& (0+255),w,b
  9178  00211E  2590               	addwf	(___fldiv@b+3)& (0+255),w,b
  9179  002120  6FA4               	movwf	___fldiv@bexp& (0+255),b
  9180                           
  9181                           ; BSR set to: 0
  9182  002122  BF8F               	btfsc	(___fldiv@b+2)& (0+255),7,b
  9183                           
  9184                           ; BSR set to: 0
  9185  002124  81A4               	bsf	___fldiv@bexp& (0+255),0,b
  9186                           
  9187                           ; BSR set to: 0
  9188                           
  9189                           ; BSR set to: 0
  9190  002126  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9191  002128  B4D8               	btfsc	status,2,c
  9192  00212A  D00D               	goto	l831
  9193                           
  9194                           ; BSR set to: 0
  9195  00212C  29A4               	incf	___fldiv@bexp& (0+255),w,b
  9196  00212E  A4D8               	btfss	status,2,c
  9197  002130  D008               	goto	l832
  9198                           
  9199                           ; BSR set to: 0
  9200  002132  0E00               	movlw	0
  9201  002134  6F8D               	movwf	___fldiv@b& (0+255),b
  9202  002136  0E00               	movlw	0
  9203  002138  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9204  00213A  0E00               	movlw	0
  9205  00213C  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9206  00213E  0E00               	movlw	0
  9207  002140  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9208  002142                     l832:
  9209                           
  9210                           ; BSR set to: 0
  9211                           
  9212                           ; BSR set to: 0
  9213  002142  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9214  002144  D006               	goto	L9
  9215  002146                     l831:
  9216                           
  9217                           ; BSR set to: 0
  9218                           
  9219                           ; BSR set to: 0
  9220  002146  0E00               	movlw	0
  9221  002148  6F8D               	movwf	___fldiv@b& (0+255),b
  9222  00214A  0E00               	movlw	0
  9223  00214C  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9224  00214E  0E00               	movlw	0
  9225  002150  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9226  002152                     L9:
  9227  002152  0E00               	movlw	0
  9228  002154  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9229                           
  9230                           ; BSR set to: 0
  9231                           
  9232                           ; BSR set to: 0
  9233  002156  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9234  002158  0B80               	andlw	128
  9235  00215A  1B99               	xorwf	___fldiv@sign& (0+255),f,b
  9236                           
  9237                           ; BSR set to: 0
  9238  00215C  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9239  00215E  2594               	addwf	(___fldiv@a+3)& (0+255),w,b
  9240  002160  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9241                           
  9242                           ; BSR set to: 0
  9243  002162  BF93               	btfsc	(___fldiv@a+2)& (0+255),7,b
  9244                           
  9245                           ; BSR set to: 0
  9246  002164  81A5               	bsf	___fldiv@aexp& (0+255),0,b
  9247                           
  9248                           ; BSR set to: 0
  9249                           
  9250                           ; BSR set to: 0
  9251  002166  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9252  002168  B4D8               	btfsc	status,2,c
  9253  00216A  D00D               	goto	l835
  9254                           
  9255                           ; BSR set to: 0
  9256  00216C  29A5               	incf	___fldiv@aexp& (0+255),w,b
  9257  00216E  A4D8               	btfss	status,2,c
  9258  002170  D008               	goto	l836
  9259                           
  9260                           ; BSR set to: 0
  9261  002172  0E00               	movlw	0
  9262  002174  6F91               	movwf	___fldiv@a& (0+255),b
  9263  002176  0E00               	movlw	0
  9264  002178  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9265  00217A  0E00               	movlw	0
  9266  00217C  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9267  00217E  0E00               	movlw	0
  9268  002180  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9269  002182                     l836:
  9270                           
  9271                           ; BSR set to: 0
  9272                           
  9273                           ; BSR set to: 0
  9274  002182  8F93               	bsf	(___fldiv@a+2)& (0+255),7,b
  9275  002184  D006               	goto	L10
  9276  002186                     l835:
  9277                           
  9278                           ; BSR set to: 0
  9279                           
  9280                           ; BSR set to: 0
  9281  002186  0E00               	movlw	0
  9282  002188  6F91               	movwf	___fldiv@a& (0+255),b
  9283  00218A  0E00               	movlw	0
  9284  00218C  6F92               	movwf	(___fldiv@a+1)& (0+255),b
  9285  00218E  0E00               	movlw	0
  9286  002190  6F93               	movwf	(___fldiv@a+2)& (0+255),b
  9287  002192                     L10:
  9288  002192  0E00               	movlw	0
  9289  002194  6F94               	movwf	(___fldiv@a+3)& (0+255),b
  9290                           
  9291                           ; BSR set to: 0
  9292                           
  9293                           ; BSR set to: 0
  9294  002196  5191               	movf	___fldiv@a& (0+255),w,b
  9295  002198  1192               	iorwf	(___fldiv@a+1)& (0+255),w,b
  9296  00219A  1193               	iorwf	(___fldiv@a+2)& (0+255),w,b
  9297  00219C  1194               	iorwf	(___fldiv@a+3)& (0+255),w,b
  9298  00219E  A4D8               	btfss	status,2,c
  9299  0021A0  D015               	goto	l838
  9300                           
  9301                           ; BSR set to: 0
  9302  0021A2  0E00               	movlw	0
  9303  0021A4  6F8D               	movwf	___fldiv@b& (0+255),b
  9304  0021A6  0E00               	movlw	0
  9305  0021A8  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9306  0021AA  0E00               	movlw	0
  9307  0021AC  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9308  0021AE  0E00               	movlw	0
  9309  0021B0  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9310                           
  9311                           ; BSR set to: 0
  9312  0021B2  0E80               	movlw	128
  9313  0021B4  138F               	iorwf	(___fldiv@b+2)& (0+255),f,b
  9314  0021B6  0E7F               	movlw	127
  9315  0021B8  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9316                           
  9317                           ; BSR set to: 0
  9318  0021BA  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9319  0021BE  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9320  0021C2  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9321  0021C6  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9322                           
  9323                           ; BSR set to: 0
  9324  0021CA  0012               	return	
  9325  0021CC                     l838:
  9326                           
  9327                           ; BSR set to: 0
  9328                           
  9329                           ; BSR set to: 0
  9330  0021CC  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9331  0021CE  A4D8               	btfss	status,2,c
  9332  0021D0  D011               	goto	l840
  9333                           
  9334                           ; BSR set to: 0
  9335  0021D2  0E00               	movlw	0
  9336  0021D4  6F8D               	movwf	___fldiv@b& (0+255),b
  9337  0021D6  0E00               	movlw	0
  9338  0021D8  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9339  0021DA  0E00               	movlw	0
  9340  0021DC  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9341  0021DE  0E00               	movlw	0
  9342  0021E0  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9343                           
  9344                           ; BSR set to: 0
  9345  0021E2  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9346  0021E6  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9347  0021EA  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9348  0021EE  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9349                           
  9350                           ; BSR set to: 0
  9351  0021F2  0012               	return	
  9352  0021F4                     l840:
  9353                           
  9354                           ; BSR set to: 0
  9355                           
  9356                           ; BSR set to: 0
  9357  0021F4  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9358  0021F6  6F95               	movwf	??___fldiv& (0+255),b
  9359  0021F8  6B96               	clrf	(??___fldiv+1)& (0+255),b
  9360  0021FA  1F95               	comf	??___fldiv& (0+255),f,b
  9361  0021FC  1F96               	comf	(??___fldiv+1)& (0+255),f,b
  9362  0021FE  4B95               	infsnz	??___fldiv& (0+255),f,b
  9363  002200  2B96               	incf	(??___fldiv+1)& (0+255),f,b
  9364  002202  51A4               	movf	___fldiv@bexp& (0+255),w,b
  9365  002204  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9366  002206  6B98               	clrf	(??___fldiv+3)& (0+255),b
  9367  002208  5195               	movf	??___fldiv& (0+255),w,b
  9368  00220A  2797               	addwf	(??___fldiv+2)& (0+255),f,b
  9369  00220C  5196               	movf	(??___fldiv+1)& (0+255),w,b
  9370  00220E  2398               	addwfc	(??___fldiv+3)& (0+255),f,b
  9371  002210  0E7F               	movlw	127
  9372  002212  2597               	addwf	(??___fldiv+2)& (0+255),w,b
  9373  002214  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9374  002216  0E00               	movlw	0
  9375  002218  2198               	addwfc	(??___fldiv+3)& (0+255),w,b
  9376  00221A  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9377                           
  9378                           ; BSR set to: 0
  9379  00221C  C08D  F09A         	movff	___fldiv@b,___fldiv@rem
  9380  002220  C08E  F09B         	movff	___fldiv@b+1,___fldiv@rem+1
  9381  002224  C08F  F09C         	movff	___fldiv@b+2,___fldiv@rem+2
  9382  002228  C090  F09D         	movff	___fldiv@b+3,___fldiv@rem+3
  9383                           
  9384                           ; BSR set to: 0
  9385  00222C  0E00               	movlw	0
  9386  00222E  6F8D               	movwf	___fldiv@b& (0+255),b
  9387  002230  0E00               	movlw	0
  9388  002232  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9389  002234  0E00               	movlw	0
  9390  002236  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9391  002238  0E00               	movlw	0
  9392  00223A  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9393                           
  9394                           ; BSR set to: 0
  9395  00223C  0E00               	movlw	0
  9396  00223E  6FA0               	movwf	___fldiv@grs& (0+255),b
  9397  002240  0E00               	movlw	0
  9398  002242  6FA1               	movwf	(___fldiv@grs+1)& (0+255),b
  9399  002244  0E00               	movlw	0
  9400  002246  6FA2               	movwf	(___fldiv@grs+2)& (0+255),b
  9401  002248  0E00               	movlw	0
  9402  00224A  6FA3               	movwf	(___fldiv@grs+3)& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405  00224C  0E00               	movlw	0
  9406  00224E  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9407  002250  D028               	goto	l841
  9408  002252                     
  9409                           ; BSR set to: 0
  9410                           
  9411                           ; BSR set to: 0
  9412  002252  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9413  002254  B4D8               	btfsc	status,2,c
  9414  002256  D011               	goto	l843
  9415                           
  9416                           ; BSR set to: 0
  9417  002258  90D8               	bcf	status,0,c
  9418  00225A  379A               	rlcf	___fldiv@rem& (0+255),f,b
  9419  00225C  379B               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  9420  00225E  379C               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  9421  002260  379D               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  9422  002262  90D8               	bcf	status,0,c
  9423  002264  378D               	rlcf	___fldiv@b& (0+255),f,b
  9424  002266  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9425  002268  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9426  00226A  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9427                           
  9428                           ; BSR set to: 0
  9429  00226C  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9430                           
  9431                           ; BSR set to: 0
  9432  00226E  818D               	bsf	___fldiv@b& (0+255),0,b
  9433                           
  9434                           ; BSR set to: 0
  9435  002270  90D8               	bcf	status,0,c
  9436  002272  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9437  002274  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9438  002276  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9439  002278  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9440  00227A                     l843:
  9441                           
  9442                           ; BSR set to: 0
  9443                           
  9444                           ; BSR set to: 0
  9445  00227A  5191               	movf	___fldiv@a& (0+255),w,b
  9446  00227C  5D9A               	subwf	___fldiv@rem& (0+255),w,b
  9447  00227E  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9448  002280  599B               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  9449  002282  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9450  002284  599C               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  9451  002286  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9452  002288  599D               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  9453  00228A  A0D8               	btfss	status,0,c
  9454  00228C  D009               	goto	l845
  9455                           
  9456                           ; BSR set to: 0
  9457  00228E  8DA3               	bsf	(___fldiv@grs+3)& (0+255),6,b
  9458                           
  9459                           ; BSR set to: 0
  9460  002290  5191               	movf	___fldiv@a& (0+255),w,b
  9461  002292  5F9A               	subwf	___fldiv@rem& (0+255),f,b
  9462  002294  5192               	movf	(___fldiv@a+1)& (0+255),w,b
  9463  002296  5B9B               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  9464  002298  5193               	movf	(___fldiv@a+2)& (0+255),w,b
  9465  00229A  5B9C               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  9466  00229C  5194               	movf	(___fldiv@a+3)& (0+255),w,b
  9467  00229E  5B9D               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  9468  0022A0                     l845:
  9469                           
  9470                           ; BSR set to: 0
  9471                           
  9472                           ; BSR set to: 0
  9473  0022A0  2BA5               	incf	___fldiv@aexp& (0+255),f,b
  9474  0022A2                     l841:
  9475                           
  9476                           ; BSR set to: 0
  9477  0022A2  0E19               	movlw	25
  9478  0022A4  65A5               	cpfsgt	___fldiv@aexp& (0+255),b
  9479  0022A6  D7D5               	goto	l842
  9480                           
  9481                           ; BSR set to: 0
  9482                           
  9483                           ; BSR set to: 0
  9484  0022A8  519A               	movf	___fldiv@rem& (0+255),w,b
  9485  0022AA  119B               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  9486  0022AC  119C               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  9487  0022AE  119D               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  9488  0022B0  B4D8               	btfsc	status,2,c
  9489  0022B2  D011               	goto	l848
  9490                           
  9491                           ; BSR set to: 0
  9492  0022B4  81A0               	bsf	___fldiv@grs& (0+255),0,b
  9493                           
  9494                           ; BSR set to: 0
  9495  0022B6  D00F               	goto	l848
  9496  0022B8                     
  9497                           ; BSR set to: 0
  9498                           
  9499                           ; BSR set to: 0
  9500  0022B8  90D8               	bcf	status,0,c
  9501  0022BA  378D               	rlcf	___fldiv@b& (0+255),f,b
  9502  0022BC  378E               	rlcf	(___fldiv@b+1)& (0+255),f,b
  9503  0022BE  378F               	rlcf	(___fldiv@b+2)& (0+255),f,b
  9504  0022C0  3790               	rlcf	(___fldiv@b+3)& (0+255),f,b
  9505                           
  9506                           ; BSR set to: 0
  9507  0022C2  BFA3               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9508                           
  9509                           ; BSR set to: 0
  9510  0022C4  818D               	bsf	___fldiv@b& (0+255),0,b
  9511                           
  9512                           ; BSR set to: 0
  9513  0022C6  90D8               	bcf	status,0,c
  9514  0022C8  37A0               	rlcf	___fldiv@grs& (0+255),f,b
  9515  0022CA  37A1               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9516  0022CC  37A2               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9517  0022CE  37A3               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9518  0022D0  079E               	decf	___fldiv@new_exp& (0+255),f,b
  9519  0022D2  A0D8               	btfss	status,0,c
  9520  0022D4  079F               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  9521  0022D6                     l848:
  9522                           
  9523                           ; BSR set to: 0
  9524                           
  9525                           ; BSR set to: 0
  9526  0022D6  AF8F               	btfss	(___fldiv@b+2)& (0+255),7,b
  9527  0022D8  D7EF               	goto	l849
  9528                           
  9529                           ; BSR set to: 0
  9530                           
  9531                           ; BSR set to: 0
  9532  0022DA  0E00               	movlw	0
  9533  0022DC  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9534                           
  9535                           ; BSR set to: 0
  9536  0022DE  AFA3               	btfss	(___fldiv@grs+3)& (0+255),7,b
  9537  0022E0  D016               	goto	l855
  9538                           
  9539                           ; BSR set to: 0
  9540  0022E2  0EFF               	movlw	255
  9541  0022E4  15A0               	andwf	___fldiv@grs& (0+255),w,b
  9542  0022E6  6F95               	movwf	??___fldiv& (0+255),b
  9543  0022E8  0EFF               	movlw	255
  9544  0022EA  15A1               	andwf	(___fldiv@grs+1)& (0+255),w,b
  9545  0022EC  6F96               	movwf	(??___fldiv+1)& (0+255),b
  9546  0022EE  0EFF               	movlw	255
  9547  0022F0  15A2               	andwf	(___fldiv@grs+2)& (0+255),w,b
  9548  0022F2  6F97               	movwf	(??___fldiv+2)& (0+255),b
  9549  0022F4  0E7F               	movlw	127
  9550  0022F6  15A3               	andwf	(___fldiv@grs+3)& (0+255),w,b
  9551  0022F8  6F98               	movwf	(??___fldiv+3)& (0+255),b
  9552  0022FA  5195               	movf	??___fldiv& (0+255),w,b
  9553  0022FC  1196               	iorwf	(??___fldiv+1)& (0+255),w,b
  9554  0022FE  1197               	iorwf	(??___fldiv+2)& (0+255),w,b
  9555  002300  1198               	iorwf	(??___fldiv+3)& (0+255),w,b
  9556  002302  A4D8               	btfss	status,2,c
  9557  002304  D002               	goto	u5350
  9558                           
  9559                           ; BSR set to: 0
  9560                           
  9561                           ; BSR set to: 0
  9562  002306  A18D               	btfss	___fldiv@b& (0+255),0,b
  9563  002308  D002               	goto	l855
  9564  00230A                     u5350:
  9565                           
  9566                           ; BSR set to: 0
  9567  00230A  0E01               	movlw	1
  9568  00230C  6FA5               	movwf	___fldiv@aexp& (0+255),b
  9569  00230E                     l855:
  9570                           
  9571                           ; BSR set to: 0
  9572                           
  9573                           ; BSR set to: 0
  9574                           
  9575                           ; BSR set to: 0
  9576  00230E  51A5               	movf	___fldiv@aexp& (0+255),w,b
  9577  002310  B4D8               	btfsc	status,2,c
  9578  002312  D01F               	goto	l857
  9579                           
  9580                           ; BSR set to: 0
  9581  002314  0E01               	movlw	1
  9582  002316  278D               	addwf	___fldiv@b& (0+255),f,b
  9583  002318  0E00               	movlw	0
  9584  00231A  238E               	addwfc	(___fldiv@b+1)& (0+255),f,b
  9585  00231C  238F               	addwfc	(___fldiv@b+2)& (0+255),f,b
  9586  00231E  2390               	addwfc	(___fldiv@b+3)& (0+255),f,b
  9587                           
  9588                           ; BSR set to: 0
  9589  002320  A190               	btfss	(___fldiv@b+3)& (0+255),0,b
  9590  002322  D017               	goto	l857
  9591                           
  9592                           ; BSR set to: 0
  9593  002324  C08D  F095         	movff	___fldiv@b,??___fldiv
  9594  002328  C08E  F096         	movff	___fldiv@b+1,??___fldiv+1
  9595  00232C  C08F  F097         	movff	___fldiv@b+2,??___fldiv+2
  9596  002330  C090  F098         	movff	___fldiv@b+3,??___fldiv+3
  9597  002334  3598               	rlcf	(??___fldiv+3)& (0+255),w,b
  9598  002336  3398               	rrcf	(??___fldiv+3)& (0+255),f,b
  9599  002338  3397               	rrcf	(??___fldiv+2)& (0+255),f,b
  9600  00233A  3396               	rrcf	(??___fldiv+1)& (0+255),f,b
  9601  00233C  3395               	rrcf	??___fldiv& (0+255),f,b
  9602  00233E  C095  F08D         	movff	??___fldiv,___fldiv@b
  9603  002342  C096  F08E         	movff	??___fldiv+1,___fldiv@b+1
  9604  002346  C097  F08F         	movff	??___fldiv+2,___fldiv@b+2
  9605  00234A  C098  F090         	movff	??___fldiv+3,___fldiv@b+3
  9606                           
  9607                           ; BSR set to: 0
  9608  00234E  4B9E               	infsnz	___fldiv@new_exp& (0+255),f,b
  9609  002350  2B9F               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  9610  002352                     l857:
  9611                           
  9612                           ; BSR set to: 0
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617  002352  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9618  002354  D010               	goto	l858
  9619  002356  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9620  002358  E103               	bnz	u5380
  9621  00235A  299E               	incf	___fldiv@new_exp& (0+255),w,b
  9622  00235C  A0D8               	btfss	status,0,c
  9623  00235E  D00B               	goto	l858
  9624  002360                     u5380:
  9625                           
  9626                           ; BSR set to: 0
  9627  002360  0E00               	movlw	0
  9628  002362  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9629  002364  699E               	setf	___fldiv@new_exp& (0+255),b
  9630  002366  0E00               	movlw	0
  9631  002368  6F8D               	movwf	___fldiv@b& (0+255),b
  9632  00236A  0E00               	movlw	0
  9633  00236C  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9634  00236E  0E00               	movlw	0
  9635  002370  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9636  002372  0E00               	movlw	0
  9637  002374  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9638  002376                     l858:
  9639                           
  9640                           ; BSR set to: 0
  9641                           
  9642                           ; BSR set to: 0
  9643  002376  BF9F               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9644  002378  D005               	goto	u5390
  9645  00237A  519F               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9646  00237C  E111               	bnz	l4905
  9647  00237E  059E               	decf	___fldiv@new_exp& (0+255),w,b
  9648  002380  B0D8               	btfsc	status,0,c
  9649  002382  D00E               	goto	l859
  9650  002384                     u5390:
  9651                           
  9652                           ; BSR set to: 0
  9653  002384  0E00               	movlw	0
  9654  002386  6F9F               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9655  002388  0E00               	movlw	0
  9656  00238A  6F9E               	movwf	___fldiv@new_exp& (0+255),b
  9657  00238C  0E00               	movlw	0
  9658  00238E  6F8D               	movwf	___fldiv@b& (0+255),b
  9659  002390  0E00               	movlw	0
  9660  002392  6F8E               	movwf	(___fldiv@b+1)& (0+255),b
  9661  002394  0E00               	movlw	0
  9662  002396  6F8F               	movwf	(___fldiv@b+2)& (0+255),b
  9663  002398  0E00               	movlw	0
  9664  00239A  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9665  00239C  0E00               	movlw	0
  9666  00239E  6F99               	movwf	___fldiv@sign& (0+255),b
  9667  0023A0                     l859:
  9668  0023A0                     l4905:
  9669                           
  9670                           ; BSR set to: 0
  9671  0023A0  C09E  F0A4         	movff	___fldiv@new_exp,___fldiv@bexp
  9672                           
  9673                           ; BSR set to: 0
  9674  0023A4  A1A4               	btfss	___fldiv@bexp& (0+255),0,b
  9675  0023A6  D002               	goto	l860
  9676                           
  9677                           ; BSR set to: 0
  9678  0023A8  8F8F               	bsf	(___fldiv@b+2)& (0+255),7,b
  9679  0023AA  D001               	goto	l861
  9680  0023AC                     l860:
  9681                           
  9682                           ; BSR set to: 0
  9683                           
  9684                           ; BSR set to: 0
  9685  0023AC  9F8F               	bcf	(___fldiv@b+2)& (0+255),7,b
  9686  0023AE                     l861:
  9687                           
  9688                           ; BSR set to: 0
  9689                           
  9690                           ; BSR set to: 0
  9691  0023AE  90D8               	bcf	status,0,c
  9692  0023B0  31A4               	rrcf	___fldiv@bexp& (0+255),w,b
  9693  0023B2  6F90               	movwf	(___fldiv@b+3)& (0+255),b
  9694                           
  9695                           ; BSR set to: 0
  9696  0023B4  5199               	movf	___fldiv@sign& (0+255),w,b
  9697  0023B6  1390               	iorwf	(___fldiv@b+3)& (0+255),f,b
  9698                           
  9699                           ; BSR set to: 0
  9700  0023B8  C08D  F08D         	movff	___fldiv@b,?___fldiv
  9701  0023BC  C08E  F08E         	movff	___fldiv@b+1,?___fldiv+1
  9702  0023C0  C08F  F08F         	movff	___fldiv@b+2,?___fldiv+2
  9703  0023C4  C090  F090         	movff	___fldiv@b+3,?___fldiv+3
  9704  0023C8  0012               	return	
  9705  0023CA                     __end_of___fldiv:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           indf0	equ	0xFEF
  9716                           postinc0	equ	0xFEE
  9717                           fsr0h	equ	0xFEA
  9718                           fsr0l	equ	0xFE9
  9719                           wreg	equ	0xFE8
  9720                           indf2	equ	0xFDF
  9721                           postinc2	equ	0xFDE
  9722                           fsr2h	equ	0xFDA
  9723                           fsr2l	equ	0xFD9
  9724                           status	equ	0xFD8
  9725                           
  9726 ;; *************** function _low_isr *****************
  9727 ;; Defined at:
  9728 ;;		line 112 in file "color_3.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;		None
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  1    wreg      void 
  9735 ;; Registers used:
  9736 ;;		wreg, status,2, status,0
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9742 ;;      Params:         0       0       0       0       0       0       0
  9743 ;;      Locals:         0       0       0       0       0       0       0
  9744 ;;      Temps:         21       0       0       0       0       0       0
  9745 ;;      Totals:        21       0       0       0       0       0       0
  9746 ;;Total ram usage:       21 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    1
  9749 ;; This function calls:
  9750 ;;		Nothing
  9751 ;; This function is called by:
  9752 ;;		Interrupt level 1
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	intcodelo
  9757  000018                     __pintcodelo:
  9758                           	opt stack 0
  9759  000018                     _low_isr:
  9760                           	opt stack 25
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;incstack = 0
  9764  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9765  00001A  CFD8 F019          	movff	status,??_low_isr
  9766  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  9767  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  9768  000026  CFFA F01C          	movff	pclath,??_low_isr+3
  9769  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
  9770  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
  9771  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
  9772  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
  9773  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
  9774  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
  9775  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
  9776  000046  CFF3 F024          	movff	prodl,??_low_isr+11
  9777  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
  9778  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
  9779  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
  9780  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
  9781  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
  9782  00005E  C051  F02A         	movff	btemp,??_low_isr+17
  9783  000062  C052  F02B         	movff	btemp+1,??_low_isr+18
  9784  000066  C053  F02C         	movff	btemp+2,??_low_isr+19
  9785  00006A  C054  F02D         	movff	btemp+3,??_low_isr+20
  9786                           
  9787                           ;color_3.c: 114: if(TMR1IF == 1)
  9788  00006E  A09E               	btfss	3998,0,c	;volatile
  9789  000070  D007               	goto	i1l2371
  9790                           
  9791                           ;color_3.c: 115: {
  9792                           ;color_3.c: 116: overflowCount++;
  9793  000072  0E01               	movlw	1
  9794  000074  264A               	addwf	_overflowCount,f,c	;volatile
  9795  000076  0E00               	movlw	0
  9796  000078  224B               	addwfc	_overflowCount+1,f,c	;volatile
  9797  00007A  224C               	addwfc	_overflowCount+2,f,c	;volatile
  9798  00007C  224D               	addwfc	_overflowCount+3,f,c	;volatile
  9799                           
  9800                           ;color_3.c: 117: TMR1IF =0;
  9801  00007E  909E               	bcf	3998,0,c	;volatile
  9802  000080                     i1l2371:
  9803                           
  9804                           ;color_3.c: 118: return;
  9805  000080  C02D  F054         	movff	??_low_isr+20,btemp+3
  9806  000084  C02C  F053         	movff	??_low_isr+19,btemp+2
  9807  000088  C02B  F052         	movff	??_low_isr+18,btemp+1
  9808  00008C  C02A  F051         	movff	??_low_isr+17,btemp
  9809  000090  C029  FFF5         	movff	??_low_isr+16,tablat
  9810  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
  9811  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
  9812  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
  9813  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
  9814  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
  9815  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
  9816  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
  9817  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
  9818  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
  9819  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
  9820  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
  9821  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
  9822  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
  9823  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
  9824  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
  9825  0000D0  C019  FFD8         	movff	??_low_isr,status
  9826  0000D4  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9827  0000D6  0010               	retfie	
  9828  0000D8                     __end_of_low_isr:
  9829                           	opt stack 0
  9830                           pclatu	equ	0xFFB
  9831                           pclath	equ	0xFFA
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon2	equ	0xFF1
  9840                           indf0	equ	0xFEF
  9841                           postinc0	equ	0xFEE
  9842                           fsr0h	equ	0xFEA
  9843                           fsr0l	equ	0xFE9
  9844                           wreg	equ	0xFE8
  9845                           fsr1h	equ	0xFE2
  9846                           fsr1l	equ	0xFE1
  9847                           bsr	equ	0xFE0
  9848                           indf2	equ	0xFDF
  9849                           postinc2	equ	0xFDE
  9850                           fsr2h	equ	0xFDA
  9851                           fsr2l	equ	0xFD9
  9852                           status	equ	0xFD8
  9853                           
  9854 ;; *************** function _high_isr *****************
  9855 ;; Defined at:
  9856 ;;		line 122 in file "color_3.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;		None
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  counter         2   22[COMRAM] unsigned int 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      void 
  9863 ;; Registers used:
  9864 ;;		wreg, status,2, status,0
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9870 ;;      Params:         0       0       0       0       0       0       0
  9871 ;;      Locals:         2       0       0       0       0       0       0
  9872 ;;      Temps:         22       0       0       0       0       0       0
  9873 ;;      Totals:        24       0       0       0       0       0       0
  9874 ;;Total ram usage:       24 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; This function calls:
  9877 ;;		Nothing
  9878 ;; This function is called by:
  9879 ;;		Interrupt level 2
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           	psect	intcode
  9884  000008                     __pintcode:
  9885                           	opt stack 0
  9886  000008                     _high_isr:
  9887                           	opt stack 25
  9888                           
  9889                           ;incstack = 0
  9890  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9891  00000A  ED03  F015         	call	int_func,f	;refresh shadow registers
  9892                           pclatu	equ	0xFFB
  9893                           pclath	equ	0xFFA
  9894                           tblptru	equ	0xFF8
  9895                           tblptrh	equ	0xFF7
  9896                           tblptrl	equ	0xFF6
  9897                           tablat	equ	0xFF5
  9898                           prodh	equ	0xFF4
  9899                           prodl	equ	0xFF3
  9900                           intcon	equ	0xFF2
  9901                           intcon2	equ	0xFF1
  9902                           indf0	equ	0xFEF
  9903                           postinc0	equ	0xFEE
  9904                           fsr0h	equ	0xFEA
  9905                           fsr0l	equ	0xFE9
  9906                           wreg	equ	0xFE8
  9907                           fsr1h	equ	0xFE2
  9908                           fsr1l	equ	0xFE1
  9909                           bsr	equ	0xFE0
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           fsr2h	equ	0xFDA
  9913                           fsr2l	equ	0xFD9
  9914                           status	equ	0xFD8
  9915                           
  9916                           	psect	intcode_body
  9917  002A06                     __pintcode_body:
  9918                           	opt stack 25
  9919  002A06                     int_func:
  9920                           	opt stack 25
  9921  002A06  0006               	pop		; remove dummy address from shadow register refresh
  9922  002A08  CFFA F005          	movff	pclath,??_high_isr+4
  9923  002A0C  CFFB F006          	movff	pclatu,??_high_isr+5
  9924  002A10  CFE9 F007          	movff	fsr0l,??_high_isr+6
  9925  002A14  CFEA F008          	movff	fsr0h,??_high_isr+7
  9926  002A18  CFE1 F009          	movff	fsr1l,??_high_isr+8
  9927  002A1C  CFE2 F00A          	movff	fsr1h,??_high_isr+9
  9928  002A20  CFD9 F00B          	movff	fsr2l,??_high_isr+10
  9929  002A24  CFDA F00C          	movff	fsr2h,??_high_isr+11
  9930  002A28  CFF3 F00D          	movff	prodl,??_high_isr+12
  9931  002A2C  CFF4 F00E          	movff	prodh,??_high_isr+13
  9932  002A30  CFF6 F00F          	movff	tblptrl,??_high_isr+14
  9933  002A34  CFF7 F010          	movff	tblptrh,??_high_isr+15
  9934  002A38  CFF8 F011          	movff	tblptru,??_high_isr+16
  9935  002A3C  CFF5 F012          	movff	tablat,??_high_isr+17
  9936  002A40  C051  F013         	movff	btemp,??_high_isr+18
  9937  002A44  C052  F014         	movff	btemp+1,??_high_isr+19
  9938  002A48  C053  F015         	movff	btemp+2,??_high_isr+20
  9939  002A4C  C054  F016         	movff	btemp+3,??_high_isr+21
  9940                           
  9941                           ;color_3.c: 125: if(INT0IF == 1)
  9942  002A50  A2F2               	btfss	intcon,1,c	;volatile
  9943  002A52  D046               	goto	i2l3989
  9944                           
  9945                           ;color_3.c: 126: {
  9946                           ;color_3.c: 127: unsigned int counter = TMR1;
  9947  002A54  CFCE F017          	movff	4046,high_isr@counter	;volatile
  9948  002A58  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
  9949                           
  9950                           ;color_3.c: 130: if (triggered)
  9951  002A5C  504E               	movf	_triggered,w,c	;volatile
  9952  002A5E  A4D8               	btfss	status,2,c
  9953  002A60  D03E               	goto	i2l3987
  9954                           
  9955                           ;color_3.c: 134: }
  9956                           ;color_3.c: 136: if (first)
  9957                           
  9958                           ;color_3.c: 133: return;
  9959                           
  9960                           ;color_3.c: 131: {
  9961                           ;color_3.c: 132: INT0IF = 0;
  9962  002A62  504F               	movf	_first,w,c	;volatile
  9963  002A64  B4D8               	btfsc	status,2,c
  9964  002A66  D01E               	goto	i2l147
  9965                           
  9966                           ;color_3.c: 137: {
  9967                           ;color_3.c: 138: startTime = (overflowCount << 16) + counter;
  9968  002A68  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
  9969  002A6C  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
  9970  002A70  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
  9971  002A74  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
  9972  002A78  C002  F004         	movff	??_high_isr+1,??_high_isr+3
  9973  002A7C  C001  F003         	movff	??_high_isr,??_high_isr+2
  9974  002A80  6A02               	clrf	??_high_isr+1,c
  9975  002A82  6A01               	clrf	??_high_isr,c
  9976  002A84  5017               	movf	high_isr@counter,w,c
  9977  002A86  2401               	addwf	??_high_isr,w,c
  9978  002A88  0100               	movlb	0	; () banked
  9979  002A8A  6FE8               	movwf	_startTime& (0+255),b	;volatile
  9980  002A8C  5018               	movf	high_isr@counter+1,w,c
  9981  002A8E  2002               	addwfc	??_high_isr+1,w,c
  9982  002A90  6FE9               	movwf	(_startTime+1)& (0+255),b	;volatile
  9983  002A92  0E00               	movlw	0
  9984  002A94  2003               	addwfc	??_high_isr+2,w,c
  9985  002A96  6FEA               	movwf	(_startTime+2)& (0+255),b	;volatile
  9986  002A98  0E00               	movlw	0
  9987  002A9A  2004               	addwfc	??_high_isr+3,w,c
  9988  002A9C  6FEB               	movwf	(_startTime+3)& (0+255),b	;volatile
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;color_3.c: 139: first = false;
  9992  002A9E  0E00               	movlw	0
  9993  002AA0  6E4F               	movwf	_first,c	;volatile
  9994  002AA2  D01D               	goto	i2l3987
  9995  002AA4                     i2l147:
  9996                           
  9997                           ;color_3.c: 142: }
  9998                           ;color_3.c: 144: finishTime = (overflowCount << 16) + counter;
  9999                           
 10000                           ; BSR set to: 0
 10001  002AA4  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 10002  002AA8  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10003  002AAC  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10004  002AB0  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10005  002AB4  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10006  002AB8  C001  F003         	movff	??_high_isr,??_high_isr+2
 10007  002ABC  6A02               	clrf	??_high_isr+1,c
 10008  002ABE  6A01               	clrf	??_high_isr,c
 10009  002AC0  5017               	movf	high_isr@counter,w,c
 10010  002AC2  2401               	addwf	??_high_isr,w,c
 10011  002AC4  0100               	movlb	0	; () banked
 10012  002AC6  6FE4               	movwf	_finishTime& (0+255),b	;volatile
 10013  002AC8  5018               	movf	high_isr@counter+1,w,c
 10014  002ACA  2002               	addwfc	??_high_isr+1,w,c
 10015  002ACC  6FE5               	movwf	(_finishTime+1)& (0+255),b	;volatile
 10016  002ACE  0E00               	movlw	0
 10017  002AD0  2003               	addwfc	??_high_isr+2,w,c
 10018  002AD2  6FE6               	movwf	(_finishTime+2)& (0+255),b	;volatile
 10019  002AD4  0E00               	movlw	0
 10020  002AD6  2004               	addwfc	??_high_isr+3,w,c
 10021  002AD8  6FE7               	movwf	(_finishTime+3)& (0+255),b	;volatile
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;color_3.c: 145: triggered = true;
 10025  002ADA  0E01               	movlw	1
 10026  002ADC  6E4E               	movwf	_triggered,c	;volatile
 10027  002ADE                     i2l3987:
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;color_3.c: 146: INT0IF = 0;
 10031  002ADE  92F2               	bcf	intcon,1,c	;volatile
 10032  002AE0                     i2l3989:
 10033                           
 10034                           ; BSR set to: 0
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;color_3.c: 147: return;
 10038  002AE0  C016  F054         	movff	??_high_isr+21,btemp+3
 10039  002AE4  C015  F053         	movff	??_high_isr+20,btemp+2
 10040  002AE8  C014  F052         	movff	??_high_isr+19,btemp+1
 10041  002AEC  C013  F051         	movff	??_high_isr+18,btemp
 10042  002AF0  C012  FFF5         	movff	??_high_isr+17,tablat
 10043  002AF4  C011  FFF8         	movff	??_high_isr+16,tblptru
 10044  002AF8  C010  FFF7         	movff	??_high_isr+15,tblptrh
 10045  002AFC  C00F  FFF6         	movff	??_high_isr+14,tblptrl
 10046  002B00  C00E  FFF4         	movff	??_high_isr+13,prodh
 10047  002B04  C00D  FFF3         	movff	??_high_isr+12,prodl
 10048  002B08  C00C  FFDA         	movff	??_high_isr+11,fsr2h
 10049  002B0C  C00B  FFD9         	movff	??_high_isr+10,fsr2l
 10050  002B10  C00A  FFE2         	movff	??_high_isr+9,fsr1h
 10051  002B14  C009  FFE1         	movff	??_high_isr+8,fsr1l
 10052  002B18  C008  FFEA         	movff	??_high_isr+7,fsr0h
 10053  002B1C  C007  FFE9         	movff	??_high_isr+6,fsr0l
 10054  002B20  C006  FFFB         	movff	??_high_isr+5,pclatu
 10055  002B24  C005  FFFA         	movff	??_high_isr+4,pclath
 10056  002B28  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10057  002B2A  0011               	retfie		f
 10058  002B2C                     __end_of_high_isr:
 10059                           	opt stack 0
 10060                           pclatu	equ	0xFFB
 10061                           pclath	equ	0xFFA
 10062                           tblptru	equ	0xFF8
 10063                           tblptrh	equ	0xFF7
 10064                           tblptrl	equ	0xFF6
 10065                           tablat	equ	0xFF5
 10066                           prodh	equ	0xFF4
 10067                           prodl	equ	0xFF3
 10068                           intcon	equ	0xFF2
 10069                           intcon2	equ	0xFF1
 10070                           indf0	equ	0xFEF
 10071                           postinc0	equ	0xFEE
 10072                           fsr0h	equ	0xFEA
 10073                           fsr0l	equ	0xFE9
 10074                           wreg	equ	0xFE8
 10075                           fsr1h	equ	0xFE2
 10076                           fsr1l	equ	0xFE1
 10077                           bsr	equ	0xFE0
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           pclatu	equ	0xFFB
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           indf0	equ	0xFEF
 10094                           postinc0	equ	0xFEE
 10095                           fsr0h	equ	0xFEA
 10096                           fsr0l	equ	0xFE9
 10097                           wreg	equ	0xFE8
 10098                           fsr1h	equ	0xFE2
 10099                           fsr1l	equ	0xFE1
 10100                           bsr	equ	0xFE0
 10101                           indf2	equ	0xFDF
 10102                           postinc2	equ	0xFDE
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107                           	psect	rparam
 10108  0000                     pclatu	equ	0xFFB
 10109                           pclath	equ	0xFFA
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           prodh	equ	0xFF4
 10115                           prodl	equ	0xFF3
 10116                           intcon	equ	0xFF2
 10117                           intcon2	equ	0xFF1
 10118                           indf0	equ	0xFEF
 10119                           postinc0	equ	0xFEE
 10120                           fsr0h	equ	0xFEA
 10121                           fsr0l	equ	0xFE9
 10122                           wreg	equ	0xFE8
 10123                           fsr1h	equ	0xFE2
 10124                           fsr1l	equ	0xFE1
 10125                           bsr	equ	0xFE0
 10126                           indf2	equ	0xFDF
 10127                           postinc2	equ	0xFDE
 10128                           fsr2h	equ	0xFDA
 10129                           fsr2l	equ	0xFD9
 10130                           status	equ	0xFD8
 10131                           
 10132                           	psect	temp
 10133  000051                     btemp:
 10134                           	opt stack 0
 10135  000051                     	ds	1
 10136  0000                     int$flags	set	btemp
 10137  0000                     wtemp6	set	btemp+1
 10138                           pclatu	equ	0xFFB
 10139                           pclath	equ	0xFFA
 10140                           tblptru	equ	0xFF8
 10141                           tblptrh	equ	0xFF7
 10142                           tblptrl	equ	0xFF6
 10143                           tablat	equ	0xFF5
 10144                           prodh	equ	0xFF4
 10145                           prodl	equ	0xFF3
 10146                           intcon	equ	0xFF2
 10147                           intcon2	equ	0xFF1
 10148                           indf0	equ	0xFEF
 10149                           postinc0	equ	0xFEE
 10150                           fsr0h	equ	0xFEA
 10151                           fsr0l	equ	0xFE9
 10152                           wreg	equ	0xFE8
 10153                           fsr1h	equ	0xFE2
 10154                           fsr1l	equ	0xFE1
 10155                           bsr	equ	0xFE0
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     73      80
    BANK0           128    100     108
    BANK1           256     48      56
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[6]), STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK1[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> value(BANK1[8]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___awdiv->___awmod
    ___fltol->___flmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    _calibra->___flmul
    ___fladd->___flmul
    _calcula->___flmul
    ___flmul->___awdiv
    ___fldiv->___flmul

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    _calibra->___fladd
    ___fladd->_calcula
    _calcula->___fldiv
    ___fldiv->___flmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   80163
                                             98 BANK0      2     2      0
                                             27 BANK1     21    21      0
                            ___fladd
                            ___fldiv
                            _calcula
                            _calibra
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
                   _seleccionarColor
                  _seleccionarEscala
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   47044
                                             86 BANK0     12     4      8
                                              0 BANK1     27    27      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   10140
                                             13 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4    9861
                                             13 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             45 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             45 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     607
                                             71 COMRAM     2     2      0
                                             22 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4907
                                             78 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     806
                                             45 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _seleccionarEscala                                    1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _seleccionarColor                                     1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2    1037
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     308
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     242
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     110
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     529
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      88
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibra                                             12     0     12   14109
                                             78 BANK0     12     0     12
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     335
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4522
                                             58 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                            _calcula (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcula                                             20    16      4    8846
                                             38 BANK0     20    16      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     656
                                             45 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5213
                                             59 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2835
                                             13 BANK0     25    17      8
                            ___flmul (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___fladd
     ___fldiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
     _calcula (ARG)
       ___fldiv
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___xxtofl
       _prepareForInterrupts
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
   ___fldiv
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
   _calcula
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___xxtofl
     _prepareForInterrupts
   _calibra
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts
   _seleccionarColor
   _seleccionarEscala
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      38       7       21.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     64      6C       5       84.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     49      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4      15        0.0%
DATA                 0      0      F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun May 13 05:03:32 2018

                 ___fldiv@aexp 00A5                   ___fldiv@bexp 00A4                   ___fldiv@sign 0099  
                  lcd_cmd_hf@x 002F                             l24 3334                             l25 3314  
                           l42 3394                             l27 331C                             l44 33A4  
                           l28 3324                             l36 31D2                             l53 3420  
                           l45 338A                             l29 332C                             l37 31AA  
                           l54 3422                             l46 338E                             l55 342A  
                           l56 342C                             l57 3434                             l58 3436  
                           l59 343E                   ___awdiv@sign 0039                             bsr 000FE0  
          ___wmul@multiplicand 0030                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                            l211 252E                            l300 1014  
                          l221 1836                            l214 260C                            l222 19A0  
                          l231 0712                            l224 1A58                            l152 108A  
                          l217 1862                            l241 07FE                            l233 07F0  
                          l153 10A2                            l218 177E                            l242 082A  
                          l234 07DA                            l251 09A4                            l235 07A0  
                          l155 120A                            l244 0EC4                            l252 09F0  
                          l228 06C8                            l173 3366                            l253 0AD8  
                          l245 083E                            l229 06E2                            l157 1372  
                          l182 32F4                            l174 334E                            l502 28FC  
                          l262 0B50                            l246 088C                            l238 0802  
                          l183 32D6                            l159 14DA                            l176 3354  
                          l520 2B94                            l504 291A                            l280 0D4C  
                          l272 0CDA                            l256 0A70                            l248 08F8  
                          l185 32DC                            l177 335A                            l521 2BD2  
                          l505 295C                            l281 0E94                            l273 0C42  
                          l249 0976                            l186 32E2                            l178 3360  
                          l522 2C10                            l514 29EE                            l506 298C  
                          l610 2866                            l290 0F28                            l282 0DAE  
                          l266 0BD4                            l187 32E8                            l515 29E2  
                          l291 0F54                            l275 0D00                            l188 32EE  
                          l508 29CA                            l612 28A2                            l284 0EBA  
                          l276 0CE6                            l268 0C0A                            l509 29BA  
                          l613 2892                            l293 0F80                            l285 0EA0  
                          l269 0BF0                            l526 3404                            l702 3160  
                          l606 27D8                            l470 2FE0                            l294 0F8A  
                          l278 0D24                            l519 2B60                            l551 2DF2  
                          l703 3154                            l471 2FF0                            l295 0FB6  
                          l287 0EDC                            l279 0D28                            l800 200E  
                          l560 2E32                            l552 2DE2                            l608 2804  
                          l296 0FC0                            l288 0EFE                            l609 283E  
                          l473 300E                            l802 201E                            l706 3188  
                          l618 28C6                            l474 3006                            l490 3120  
                          l707 3196                            l619 28BA                            l491 312A  
                          l483 30E6                            l900 2718                            l492 3138  
                          l484 30F2                            l901 2700                            l821 20EE  
                          l805 2042                            l557 2E16                            l549 2D86  
                          l477 302E                            l822 20F6                            l814 2082  
                          l558 2E0A                            l478 3038                            l486 3108  
                          l831 2146                            l903 274A                            l823 20F8  
                          l807 2058                            l479 3046                            l487 3100  
                          l840 21F4                            l832 2142                            l904 273E  
                          l841 22A2                            l817 20C8                            l809 2062  
                          l842 2252                            l666 347E                            l843 227A  
                          l835 2186                            l860 23AC                            l836 2182  
                          l908 2768                            l780 1E4C                            l692 307E  
                          l861 23AE                            l845 22A0                            l909 279A  
                          l693 3072                            l838 21CC                            l870 1AF2  
                          l782 1EAC                            l774 1E08                            l855 230E  
                          l871 1B06                            l783 1E70                            l775 1E04  
                          l848 22D6                            l872 1B24                            l792 1F86  
                          l696 30B2                            l857 2352                            l849 22B8  
                          l865 1AB6                            l793 1F4C                            l697 30C0  
                          l858 2376                            l866 1AB2                            l786 1F28  
                          l859 23A0                            l883 1D1C                            l867 1AC6  
                          l787 1F06                            l779 1E50                            l876 1CE4  
                          l796 1F70                            l788 1F14                            l885 1D60  
                          l877 1CC6                            l869 1AF6                            l893 269A  
                          l797 1F74                            l789 1F18                            l886 1D7E  
                          l894 26AA                            l895 26C8                            l888 1DA2  
                          l889 1DC0                            l897 26DA                            l898 26CE  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _lcd 0050  
                 ___awmod@sign 0033                            wreg 000FE8                   ___flmul@aexp 0081  
                 ___flmul@bexp 0086                    _sprintf$879 0100                   ___flmul@sign 0080  
                 ___flmul@temp 008B                   ___flmul@prod 0087                    lcd_gotoxy@x 0033  
                  lcd_gotoxy@y 0031                   __CFG_LVP$OFF 000000                   ___fltol@exp1 0049  
                 __CFG_WDT$OFF 000000                           l5205 0A42                           l4175 2C48  
                         l5225 0B54                           l5245 0BF0                           l5413 109A  
                         l5249 0C02                           l5521 14D2                           l5269 0CE6  
                         l5197 09F0                           l5359 1010                           l4905 23A0  
                         l5449 1202                           l5485 136A                           STR_1 0691  
                         STR_2 06A3                           STR_3 06AD                           STR_4 06A3  
                         STR_5 06B1                           STR_6 06A3                           STR_7 06B5  
                         STR_8 06A3                           STR_9 06A9                           _GIEH 007F97  
                         _GIEL 007F96                           u5100 28CC                           u5021 27BC  
                         u4320 1EDC                           _IPEN 007E87                           u5041 27E8  
                         u4330 1EEC                           u4500 2066                           u4340 1EEE  
                         u6110 0FC8                           u3640 31CA                           u6120 0FEA  
                         u6200 13C2                           u4530 207E                           u4370 1F30  
                         u3650 31F2                           u5170 29F4                           u4700 1C88  
                         u6140 1032                           u6220 1518                           u5350 230A  
                         u3647 31C0                           u5520 2E1C                           u6160 10F2  
                         u4705 1C7E                           u3657 31E8                           u6307 1624  
                         u5380 2360                           u4580 20D4                           u4900 310C  
                         u6180 125A                           u6317 32AA                           u6237 10AA  
                         u5390 2384                           u4750 1D18                           u5550 3082  
                         u6407 321C                           u6327 2F2A                           u6247 11E4  
                         u5480 2DA4                           u4840 3012                           u6417 34A8  
                         u6337 2F40                           u6257 1212                           u4690 1B12  
                         u5730 0778                           u6427 2D4A                           u6347 2F56  
                         u6267 134C                           u4780 1D6E                           u5660 2754  
                         u5580 3164                           u6357 2F6C                           u5485 2D9A  
                         u6277 137A                           u4790 1D8C                           u5910 0B8C  
                         u5830 09B6                           u6367 2F80                           u6287 14B4  
                         u5840 0A02                           u6377 2F94                           u6297 160A  
                         u6387 2FA8                           u5940 0C1A                           u6397 2FBC  
                         u5870 0A42                           u5970 0D0E                           u5980 0D1E  
                         _TMR1 000FCE                   __CFG_PWRT$ON 000000            seleccionarColor@col 002E  
                         _main 1040                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0051                           prodh 000FF4                           prodl 000FF3  
                         start 00D8                  __CFG_IESO$OFF 000000                ___fldiv@new_exp 009E  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                  ___fltol@sign1 0048  
              __end_of___fladd 2114                          ?_main 0001                __end_of___fldiv 23CA  
              __end_of___awdiv 3050                __end_of___flneg 3416                __end_of___awmod 3142  
              __end_of___flmul 1DD6                __end_of___flsub 328C                __end_of___fltol 2E44  
              __end_of___lldiv 30D2                ___awdiv@divisor 0036                __end_of___llmod 31A8  
                        i2l147 2AA4                ___awdiv@counter 0038                          _PORTB 000F81  
                        _PORTD 000F83                __end_of_calibra 2F0E                __end_of_calcula 2D66  
     __end_of_seleccionarColor 3310                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 3244                __end_of_lcd_lat 34B6  
              __end_of_lcd_dwr 32D2                __end_of_lcd_msg 31FA                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
              __end_of_dpowers 0691                          _manda 3416                          _first 004F  
                        _scale 1634                __end_of_isdigit 3486                          _value 0130  
                        main@a 0123                          main@i 012B                          main@r 011B  
                        main@v 011F                __end_of_low_isr 00D8                 __CFG_BOREN$OFF 000000  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
                        wtemp6 0052                __end_of_sprintf 1040                __initialization 33B6  
                 __end_of_main 1634                         ??_main 00E2                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0132                         ?_manda 0001               ___llmod@dividend 002E  
                       ?_scale 008D               ___awdiv@dividend 0034                         _INT0IE 007F94  
                       _INT0IF 007F91                         i1l2371 0080                         i2l3987 2ADE  
                       i2l3989 2AE0                         _TMR1IE 007CE8                         _TMR1IF 007CF0  
                       _TMR1CS 007E69                         _TMR1IP 007CF8                         _TMR1ON 007E68  
             __end_of___xxtofl 27AC                 __CFG_XINST$OFF 000000               __end_of__powers_ 0635  
             __end_of_lcd_init 2FCC               __end_of_high_isr 2B2C                         ___flge 2B2C  
             __end_of_lcd_putc 334A                      ??___fladd 00C2                         ___wmul 3442  
                    ??___fldiv 0095                      ??___awdiv 0038                      ??___flneg 0032  
               __CFG_STVREN$ON 000000                      ??___awmod 0032                      ??___flmul 0044  
                    ??___flsub 0048                      ??___fltol 009A                      ??___lldiv 0036  
                    ??___llmod 0036                      ??_calibra 0048                      ??_calcula 00AA  
                       _fround 23CA  __size_of_prepareForInterrupts 000E                         clear_0 33BC  
                       clear_1 33C8                         clear_2 33D4               ___awdiv@quotient 003A  
              ___awmod@divisor 0030                ___awmod@counter 0032                      ??_lcd_cmd 002F  
                    ??_lcd_lat 002E                      ??_lcd_dwr 002F                      ??_lcd_msg 0034  
                    ??_isdigit 002E                   __mediumconst 0000                      ??_low_isr 0019  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
            lcd_gotoxy@ADDRESS 0034                      ??_sprintf 00DE                     ___flge@ff1 002E  
                   ___flge@ff2 0032                   ___xxtofl@arg 0038                   ___xxtofl@exp 0037  
                 ___xxtofl@val 002E                     __accesstop 0080        __end_of__initialization 33DA  
              __CFG_PBADEN$OFF 000000                     ___flneg@f1 002E                  ___rparam_used 000001  
                   ___fltol@f1 0096                 __pcstackCOMRAM 0001                  __end_of_manda 3442  
                __end_of_scale 1A84                     __div_to_l_ 28DE                        ??_manda 002E  
              __div_to_l_@exp1 003B                __div_to_l_@cntr 003A                        ??_scale 0048  
              __div_to_l_@quot 0036                   sprintf@width 010C                     __pbssBANK0 00E4  
                   __pbssBANK1 0130                  __div_to_l_@f1 002E                  __div_to_l_@f2 0032  
           __CFG_CCP2MX$PORTBE 000000                        ?___flge 002E                        ?___wmul 002E  
                      ?_fround 008D                        _T1CKPS0 007E6C                        _T1CKPS1 007E6D  
                      _INTEDG0 007F8E                     _lcd_cmd_hf 3486                      ?___xxtofl 002E  
           calcula@elapsedTime 00AE              ?_seleccionarColor 0001                     _lcd_gotoxy 3382  
           ??_seleccionarColor 002E                     _finishTime 00E4                      ?_lcd_init 0001  
                    ?_high_isr 0001                      ?_lcd_putc 0001              __end_of__npowers_ 0669  
                      __Hparam 0000                        __Lparam 0000                __size_of___flge 0120  
                      ___fladd 1DD6                        ___fldiv 2114                        ___awdiv 2FCC  
                      ___flneg 33E8                        ___awmod 30D2                        ___flmul 1A84  
                      ___flsub 3244                        ___fltol 2D66                        ___lldiv 3050  
              __size_of___wmul 0026                        ___llmod 3142                     _fround$876 0095  
                   _fround$877 0091                   __psmallconst 0600                        _calibra 2E44  
                      _calcula 2C4C                        __pcinit 33B6                __size_of_fround 0292  
                      __ramtop 0600                        __ptext0 1040                        __ptext1 06BA  
                      __ptext2 1634                        __ptext3 3468                        __ptext4 23CA  
                      __ptext5 30D2                        __ptext6 2FCC                        __ptext7 27AC  
                      __ptext8 28DE                        __ptext9 3442                        _lcd_cmd 31FA  
                      _lcd_lat 34A0                        _lcd_dwr 328C                        _lcd_msg 31A8  
                    _T1CONbits 000FCD                    ?__div_to_l_ 002E                        _dpowers 0669  
                      _isdigit 3468                     ??___xxtofl 0032               ___awmod@dividend 002E  
                      _low_isr 0018                        _sprintf 06BA                     ??_lcd_init 0031  
                   ??_high_isr 0001                 __pintcode_body 2A06                     ??_lcd_putc 0031  
         end_of_initialization 33DA                  __Lmediumconst 0000                        int_func 2A06  
              ___lldiv@divisor 0032                ___lldiv@counter 003A                        postinc0 000FEE  
                      postinc2 000FDE                 __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0032  
                ??__tdiv_to_l_ 0036                    ___fladd@grs 00CD                    ?_lcd_cmd_hf 0001  
                ___xxtofl@sign 0036                    ?_lcd_gotoxy 0031                    ___fldiv@grs 00A0  
                  ___fldiv@rem 009A   __end_of_prepareForInterrupts 34C4                    ___flmul@grs 0082  
                   main@brillo 0127             seleccionarEscala@a 002E            __size_of__div_to_l_ 0128  
               __end_of___flge 2C4C                 __end_of___wmul 3468                 __end_of_fround 265C  
                 calibra@valor 00CE            start_initialization 33B6            __end_of__tdiv_to_l_ 28DE  
              high_isr@counter 0017                ___llmod@divisor 0032                ___llmod@counter 0036  
          __size_of_lcd_cmd_hf 001A                       ??___flge 0036            __size_of_lcd_gotoxy 0034  
                     ??___wmul 0032               __CFG_LPT1OSC$OFF 000000                       ??_fround 0048  
                sprintf@tmpval 010E                      ___fladd@a 00BE                      ___fladd@b 00BA  
                   fround@prec 0099                      ___fldiv@a 0091                      ___fldiv@b 008D  
                    ___flmul@a 0040                      ___flmul@b 003C                    __pbssCOMRAM 004A  
                    ___flsub@a 00D2                      ___flsub@b 00CE                  __pcstackBANK0 0080  
                __pcstackBANK1 0100              __size_of___xxtofl 0150              __size_of_lcd_init 00BE  
            __size_of_high_isr 2B24                    sprintf@flag 010A              __size_of_lcd_putc 003A  
                  sprintf@fval 0114                    sprintf@prec 0118      __size_of_seleccionarColor 003E  
                    __pintcode 0008                       ?___fladd 00BA                       ?___fldiv 008D  
                     ?___awdiv 0034                       ?___flneg 002E                       ?___awmod 002E  
                     ?___flmul 003C                       ?___flsub 00CE                       ?___fltol 0096  
                     ?___lldiv 002E                       ?___llmod 002E                      __npowers_ 0635  
                     ?_calibra 00CE                       ?_calcula 00A6                    __pintcodelo 0018  
         _prepareForInterrupts 34B6                    __tdiv_to_l_ 27AC                       ?_lcd_cmd 0001  
                     ?_lcd_lat 0001                       ?_lcd_dwr 0001                       ?_lcd_msg 0032  
                 ??__div_to_l_ 0036                    __smallconst 0600                       ?_isdigit 0001  
                    calibra@fd 00D2                      calibra@fw 00D6                       ?_low_isr 0001  
                    _scale$878 0091                 __size_of_manda 002C                       ?_sprintf 00D6  
               __size_of_scale 0450                 ___wmul@product 0032              _seleccionarEscala 334A  
           ?_seleccionarEscala 0001             __end_of__div_to_l_ 2A06               __CFG_WDTPS$32768 000000  
          ??_seleccionarEscala 002E          ?_prepareForInterrupts 0001              ___wmul@multiplier 002E  
                    _startTime 00E8                      _triggered 004E                   ??_lcd_cmd_hf 002F  
                    lcd_putc@c 0031                   ??_lcd_gotoxy 0032                      manda@dato 002E  
    __end_of_seleccionarEscala 3382                    calcula@freq 00B2                    calcula@temp 00B6  
                     __Hrparam 0000                       __Lrparam 0000             __end_of_lcd_cmd_hf 34A0  
           __end_of_lcd_gotoxy 33B6               __size_of___fladd 033E               __size_of___fldiv 02B6  
             __size_of___awdiv 0084               __size_of___flneg 002E               __size_of___awmod 0070  
             __size_of___flmul 0352               __size_of___flsub 0048               __size_of___fltol 00DE  
             __size_of___lldiv 0082               __size_of___llmod 0066               __size_of_calibra 00CA  
             __size_of_calcula 011A                    _isdigit$523 002F               __size_of_lcd_cmd 004A  
             __size_of_lcd_lat 0016               __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052  
                   sprintf@exp 0112                     sprintf@val 0106                       ___xxtofl 265C  
             __size_of_isdigit 001E               __size_of_low_isr 00C0                       __ptext10 3142  
                     __ptext11 3050                       __ptext20 2F0E                       __ptext12 2D66  
                     __ptext21 3486                       __ptext13 3244                       __ptext30 34B6  
                     __ptext22 3382                       __ptext14 2B2C                       __ptext31 265C  
                     __ptext23 31FA                       __ptext15 334A                       __ptext32 1A84  
                     __ptext24 3416                       __ptext16 32D2                       __ptext33 2114  
                     __ptext25 34A0                       __ptext17 31A8                       __ptext26 2E44  
                     __ptext18 3310                       __ptext27 33E8                       __ptext19 328C  
                     __ptext28 1DD6                       __ptext29 2C4C                       __powers_ 0601  
                     _lcd_init 2F0E                       _high_isr 0008                       _lcd_putc 3310  
             __size_of_sprintf 0986                  __size_of_main 05F4               _seleccionarColor 32D2  
       ??_prepareForInterrupts 002E                       int$flags 0051                       lcd_cmd@x 0030  
                     lcd_dwr@x 0030                       lcd_msg@c 0032                       main@freq 012C  
                     isdigit@c 0030                       scale@scl 0095                       intlevel1 0000  
                     intlevel2 0000     __size_of_seleccionarEscala 0038                      sprintf@ap 0104  
             __tdiv_to_l_@exp1 003E               __tdiv_to_l_@cntr 003D                      sprintf@sp 00D6  
             __tdiv_to_l_@quot 0039               ___lldiv@dividend 002E                  _overflowCount 004A  
                 ?__tdiv_to_l_ 002E                       sprintf@c 011A                       sprintf@f 00D8  
             ___lldiv@quotient 0036                  ___fladd@signs 00CA                   ___fladd@aexp 00CB  
                 ___fladd@bexp 00CC  
