

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 18:01:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.45
    56                           ; Generated 16/11/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4520 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	smallconst
    91  000600                     __psmallconst:
    92                           	opt stack 0
    93  000600  00                 	db	0
    94  000601                     __powers_:
    95                           	opt stack 0
    96  000601  0000               	dw	0
    97  000603  3F80               	dw	16256
    98  000605  0000               	dw	0
    99  000607  4120               	dw	16672
   100  000609  0000               	dw	0
   101  00060B  42C8               	dw	17096
   102  00060D  0000               	dw	0
   103  00060F  447A               	dw	17530
   104  000611  4000               	dw	16384
   105  000613  461C               	dw	17948
   106  000615  5000               	dw	20480
   107  000617  47C3               	dw	18371
   108  000619  2400               	dw	9216
   109  00061B  4974               	dw	18804
   110  00061D  9680               	dw	38528
   111  00061F  4B18               	dw	19224
   112  000621  BC20               	dw	48160
   113  000623  4CBE               	dw	19646
   114  000625  6B28               	dw	27432
   115  000627  4E6E               	dw	20078
   116  000629  02F9               	dw	761
   117  00062B  5015               	dw	20501
   118  00062D  78EC               	dw	30956
   119  00062F  60AD               	dw	24749
   120  000631  F2CA               	dw	62154
   121  000633  7149               	dw	29001
   122  000635                     __end_of__powers_:
   123                           	opt stack 0
   124  000635                     __npowers_:
   125                           	opt stack 0
   126  000635  0000               	dw	0
   127  000637  3F80               	dw	16256
   128  000639  CCCD               	dw	52429
   129  00063B  3DCC               	dw	15820
   130  00063D  D70A               	dw	55050
   131  00063F  3C23               	dw	15395
   132  000641  126F               	dw	4719
   133  000643  3A83               	dw	14979
   134  000645  B717               	dw	46871
   135  000647  38D1               	dw	14545
   136  000649  C5AC               	dw	50604
   137  00064B  3727               	dw	14119
   138  00064D  37BD               	dw	14269
   139  00064F  3586               	dw	13702
   140  000651  BF95               	dw	49045
   141  000653  33D6               	dw	13270
   142  000655  CC77               	dw	52343
   143  000657  322B               	dw	12843
   144  000659  705F               	dw	28767
   145  00065B  3089               	dw	12425
   146  00065D  E6FF               	dw	59135
   147  00065F  2EDB               	dw	11995
   148  000661  E508               	dw	58632
   149  000663  1E3C               	dw	7740
   150  000665  4260               	dw	16992
   151  000667  0DA2               	dw	3490
   152  000669                     __end_of__npowers_:
   153                           	opt stack 0
   154  000669                     _dpowers:
   155                           	opt stack 0
   156  000669  0001               	dw	1
   157  00066B  0000               	dw	0
   158  00066D  000A               	dw	10
   159  00066F  0000               	dw	0
   160  000671  0064               	dw	100
   161  000673  0000               	dw	0
   162  000675  03E8               	dw	1000
   163  000677  0000               	dw	0
   164  000679  2710               	dw	10000
   165  00067B  0000               	dw	0
   166  00067D  86A0               	dw	34464
   167  00067F  0001               	dw	1
   168  000681  4240               	dw	16960
   169  000683  000F               	dw	15
   170  000685  9680               	dw	38528
   171  000687  0098               	dw	152
   172  000689  E100               	dw	57600
   173  00068B  05F5               	dw	1525
   174  00068D  CA00               	dw	51712
   175  00068F  3B9A               	dw	15258
   176  000691                     __end_of_dpowers:
   177                           	opt stack 0
   178  0000                     _TMR1	set	4046
   179  0000                     _T1CONbits	set	4045
   180  0000                     _PORTB	set	3969
   181  0000                     _PORTD	set	3971
   182  0000                     _INTEDG0	set	32654
   183  0000                     _INT0IE	set	32660
   184  0000                     _GIEL	set	32662
   185  0000                     _GIEH	set	32663
   186  0000                     _IPEN	set	32391
   187  0000                     _TMR1IE	set	31976
   188  0000                     _TMR1IP	set	31992
   189  0000                     _TMR1ON	set	32360
   190  0000                     _TMR1CS	set	32361
   191  0000                     _T1CKPS0	set	32364
   192  0000                     _T1CKPS1	set	32365
   193  0000                     _INT0IF	set	32657
   194  0000                     _TMR1IF	set	31984
   195  000691                     STR_1:
   196  000691  44                 	db	68	;'D'
   197  000692  65                 	db	101	;'e'
   198  000693  74                 	db	116	;'t'
   199  000694  65                 	db	101	;'e'
   200  000695  63                 	db	99	;'c'
   201  000696  74                 	db	116	;'t'
   202  000697  6F                 	db	111	;'o'
   203  000698  72                 	db	114	;'r'
   204  000699  20                 	db	32
   205  00069A  64                 	db	100	;'d'
   206  00069B  65                 	db	101	;'e'
   207  00069C  20                 	db	32
   208  00069D  63                 	db	99	;'c'
   209  00069E  6F                 	db	111	;'o'
   210  00069F  6C                 	db	108	;'l'
   211  0006A0  6F                 	db	111	;'o'
   212  0006A1  72                 	db	114	;'r'
   213  0006A2  00                 	db	0
   214  0006A3                     STR_11:
   215  0006A3  47                 	db	71	;'G'
   216  0006A4  72                 	db	114	;'r'
   217  0006A5  61                 	db	97	;'a'
   218  0006A6  64                 	db	100	;'d'
   219  0006A7  6F                 	db	111	;'o'
   220  0006A8  73                 	db	115	;'s'
   221  0006A9  3D                 	db	61	;'='
   222  0006AA  20                 	db	32
   223  0006AB  00                 	db	0
   224  0006AC                     STR_2:
   225  0006AC  25                 	db	37
   226  0006AD  35                 	db	53	;'5'
   227  0006AE  2E                 	db	46
   228  0006AF  33                 	db	51	;'3'
   229  0006B0  66                 	db	102	;'f'
   230  0006B1  00                 	db	0
   231  0006B2                     STR_9:
   232  0006B2  41                 	db	65	;'A'
   233  0006B3  3D                 	db	61	;'='
   234  0006B4  20                 	db	32
   235  0006B5  00                 	db	0
   236  0006B6                     STR_3:
   237  0006B6  42                 	db	66	;'B'
   238  0006B7  3D                 	db	61	;'='
   239  0006B8  20                 	db	32
   240  0006B9  00                 	db	0
   241  0006BA                     STR_5:
   242  0006BA  52                 	db	82	;'R'
   243  0006BB  3D                 	db	61	;'='
   244  0006BC  20                 	db	32
   245  0006BD  00                 	db	0
   246  0006BE                     STR_7:
   247  0006BE  56                 	db	86	;'V'
   248  0006BF  3D                 	db	61	;'='
   249  0006C0  20                 	db	32
   250  0006C1  00                 	db	0
   251  0000                     
   252                           ; #config settings
   253  0006C2  00                 	db	0	; dummy byte at the end
   254  0000                     
   255                           	psect	cinit
   256  004126                     __pcinit:
   257                           	opt stack 0
   258  004126                     start_initialization:
   259                           	opt stack 0
   260  004126                     __initialization:
   261                           	opt stack 0
   262                           
   263                           ; Clear objects allocated to BANK1 (8 bytes)
   264  004126  EE01  F075         	lfsr	0,__pbssBANK1
   265  00412A  0E08               	movlw	8
   266  00412C                     clear_0:
   267  00412C  6AEE               	clrf	postinc0,c
   268  00412E  06E8               	decf	wreg,f,c
   269  004130  E1FD               	bnz	clear_0
   270                           
   271                           ; Clear objects allocated to BANK0 (4 bytes)
   272  004132  0100               	movlb	0
   273  004134  6BF3               	clrf	(__pbssBANK0+3)& (0+255),b
   274  004136  6BF2               	clrf	(__pbssBANK0+2)& (0+255),b
   275  004138  6BF1               	clrf	(__pbssBANK0+1)& (0+255),b
   276  00413A  6BF0               	clrf	__pbssBANK0& (0+255),b
   277                           
   278                           ; Clear objects allocated to COMRAM (11 bytes)
   279  00413C  EE00  F046         	lfsr	0,__pbssCOMRAM
   280  004140  0E0B               	movlw	11
   281  004142                     clear_1:
   282  004142  6AEE               	clrf	postinc0,c
   283  004144  06E8               	decf	wreg,f,c
   284  004146  E1FD               	bnz	clear_1
   285  004148                     end_of_initialization:
   286                           	opt stack 0
   287  004148                     __end_of__initialization:
   288                           	opt stack 0
   289  004148  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   290  00414A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   291  00414C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   292  00414E  6EF8               	movwf	tblptru,c
   293  004150  0100               	movlb	0
   294  004152  EF40  F00E         	goto	_main	;jump to C main() function
   295                           tblptru	equ	0xFF8
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssCOMRAM
   300  000046                     __pbssCOMRAM:
   301                           	opt stack 0
   302  000046                     _finishTime:
   303                           	opt stack 0
   304  000046                     	ds	4
   305  00004A                     _overflowCount:
   306                           	opt stack 0
   307  00004A                     	ds	4
   308  00004E                     _triggered:
   309                           	opt stack 0
   310  00004E                     	ds	1
   311  00004F                     _first:
   312                           	opt stack 0
   313  00004F                     	ds	1
   314  000050                     _lcd:
   315                           	opt stack 0
   316  000050                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK0
   322  0000F0                     __pbssBANK0:
   323                           	opt stack 0
   324  0000F0                     _startTime:
   325                           	opt stack 0
   326  0000F0                     	ds	4
   327                           tblptru	equ	0xFF8
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	bssBANK1
   332  000175                     __pbssBANK1:
   333                           	opt stack 0
   334  000175                     _value:
   335                           	opt stack 0
   336  000175                     	ds	8
   337                           tblptru	equ	0xFF8
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           
   341                           	psect	cstackBANK1
   342  000100                     __pcstackBANK1:
   343                           	opt stack 0
   344  000100                     _identificarColor$267:
   345                           	opt stack 0
   346  000100                     _sprintf$919:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0x0
   350  000100                     	ds	4
   351  000104                     sprintf@ap:
   352                           	opt stack 0
   353  000104                     _identificarColor$268:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0x4
   357  000104                     	ds	2
   358  000106                     sprintf@val:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0x6
   362  000106                     	ds	2
   363  000108                     _identificarColor$269:
   364                           	opt stack 0
   365                           
   366                           ; 4 bytes @ 0x8
   367  000108                     	ds	2
   368  00010A                     sprintf@flag:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00010A                     	ds	2
   373  00010C                     sprintf@width:
   374                           	opt stack 0
   375  00010C                     _identificarColor$271:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0xC
   379  00010C                     	ds	2
   380  00010E                     sprintf@tmpval:
   381                           	opt stack 0
   382                           
   383                           ; 4 bytes @ 0xE
   384  00010E                     	ds	2
   385  000110                     _identificarColor$272:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x10
   389  000110                     	ds	2
   390  000112                     sprintf@exp:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x12
   394  000112                     	ds	2
   395  000114                     _identificarColor$274:
   396                           	opt stack 0
   397  000114                     sprintf@fval:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0x14
   401  000114                     	ds	4
   402  000118                     sprintf@prec:
   403                           	opt stack 0
   404  000118                     _identificarColor$275:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x18
   408  000118                     	ds	2
   409  00011A                     sprintf@c:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x1A
   413  00011A                     	ds	2
   414  00011C                     identificarColor@s:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x1C
   418  00011C                     	ds	4
   419  000120                     identificarColor@somme:
   420                           	opt stack 0
   421                           
   422                           ; 4 bytes @ 0x20
   423  000120                     	ds	4
   424  000124                     identificarColor@del_R:
   425                           	opt stack 0
   426                           
   427                           ; 4 bytes @ 0x24
   428  000124                     	ds	4
   429  000128                     identificarColor@del_V:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0x28
   433  000128                     	ds	4
   434  00012C                     identificarColor@del_A:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x2C
   438  00012C                     	ds	4
   439  000130                     identificarColor@l:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x30
   443  000130                     	ds	4
   444  000134                     identificarColor@minRVB:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x34
   448  000134                     	ds	4
   449  000138                     _identificarColor$915:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x38
   453  000138                     	ds	4
   454  00013C                     identificarColor@a:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x3C
   458  00013C                     	ds	4
   459  000140                     identificarColor@offset:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x40
   463  000140                     	ds	4
   464  000144                     _identificarColor$914:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x44
   468  000144                     	ds	4
   469  000148                     identificarColor@t:
   470                           	opt stack 0
   471                           
   472                           ; 4 bytes @ 0x48
   473  000148                     	ds	4
   474  00014C                     identificarColor@maxRVB:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x4C
   478  00014C                     	ds	4
   479  000150                     identificarColor@r:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x50
   483  000150                     	ds	4
   484  000154                     identificarColor@v:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x54
   488  000154                     	ds	4
   489  000158                     identificarColor@delta:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x58
   493  000158                     	ds	4
   494  00015C                     main@grados:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x5C
   498  00015C                     	ds	4
   499  000160                     main@r:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x60
   503  000160                     	ds	4
   504  000164                     main@v:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x64
   508  000164                     	ds	4
   509  000168                     main@a:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x68
   513  000168                     	ds	4
   514  00016C                     main@brillo:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0x6C
   518  00016C                     	ds	4
   519  000170                     main@i:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x70
   523  000170                     	ds	1
   524  000171                     main@freq:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x71
   528  000171                     	ds	4
   529                           tblptru	equ	0xFF8
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           
   533                           	psect	cstackBANK0
   534  000080                     __pcstackBANK0:
   535                           	opt stack 0
   536  000080                     ??___flmul:
   537                           
   538                           ; 1 bytes @ 0x0
   539  000080                     	ds	4
   540  000084                     ___flmul@sign:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x4
   544  000084                     	ds	1
   545  000085                     ___flmul@aexp:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x5
   549  000085                     	ds	1
   550  000086                     ___flmul@grs:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x6
   554  000086                     	ds	4
   555  00008A                     ___flmul@bexp:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0xA
   559  00008A                     	ds	1
   560  00008B                     ___flmul@prod:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0xB
   564  00008B                     	ds	4
   565  00008F                     ___flmul@temp:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0xF
   569  00008F                     	ds	2
   570  000091                     ?___fldiv:
   571                           	opt stack 0
   572  000091                     ?_fround:
   573                           	opt stack 0
   574  000091                     ?_scale:
   575                           	opt stack 0
   576  000091                     ___fldiv@b:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x11
   580  000091                     	ds	4
   581  000095                     ___fldiv@a:
   582                           	opt stack 0
   583  000095                     _fround$917:
   584                           	opt stack 0
   585  000095                     _scale$918:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x15
   589  000095                     	ds	4
   590  000099                     ??___fldiv:
   591  000099                     scale@scl:
   592                           	opt stack 0
   593  000099                     _fround$916:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x19
   597  000099                     	ds	1
   598  00009A                     ?___fltol:
   599                           	opt stack 0
   600  00009A                     ___fltol@f1:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x1A
   604  00009A                     	ds	3
   605  00009D                     fround@prec:
   606                           	opt stack 0
   607  00009D                     ___fldiv@sign:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1D
   611  00009D                     	ds	1
   612  00009E                     ??___fltol:
   613  00009E                     ___fldiv@rem:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x1E
   617  00009E                     	ds	4
   618  0000A2                     ___fldiv@new_exp:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x22
   622  0000A2                     	ds	2
   623  0000A4                     ___fldiv@grs:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x24
   627  0000A4                     	ds	4
   628  0000A8                     ___fldiv@bexp:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x28
   632  0000A8                     	ds	1
   633  0000A9                     ___fldiv@aexp:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x29
   637  0000A9                     	ds	1
   638  0000AA                     ?_calcula:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x2A
   642  0000AA                     	ds	4
   643  0000AE                     ??_calcula:
   644                           
   645                           ; 1 bytes @ 0x2E
   646  0000AE                     	ds	4
   647  0000B2                     calcula@elapsedTime:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x32
   651  0000B2                     	ds	4
   652  0000B6                     calcula@freq:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x36
   656  0000B6                     	ds	4
   657  0000BA                     calcula@temp:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x3A
   661  0000BA                     	ds	4
   662  0000BE                     ?___fladd:
   663                           	opt stack 0
   664  0000BE                     ___fladd@b:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x3E
   668  0000BE                     	ds	4
   669  0000C2                     ___fladd@a:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x42
   673  0000C2                     	ds	4
   674  0000C6                     ??___fladd:
   675                           
   676                           ; 1 bytes @ 0x46
   677  0000C6                     	ds	8
   678  0000CE                     ___fladd@signs:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x4E
   682  0000CE                     	ds	1
   683  0000CF                     ___fladd@aexp:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x4F
   687  0000CF                     	ds	1
   688  0000D0                     ___fladd@bexp:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x50
   692  0000D0                     	ds	1
   693  0000D1                     ___fladd@grs:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x51
   697  0000D1                     	ds	1
   698  0000D2                     ?___flsub:
   699                           	opt stack 0
   700  0000D2                     ___flge@ff1:
   701                           	opt stack 0
   702  0000D2                     ___flsub@b:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x52
   706  0000D2                     	ds	4
   707  0000D6                     ___flge@ff2:
   708                           	opt stack 0
   709  0000D6                     ___flsub@a:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x56
   713  0000D6                     	ds	4
   714  0000DA                     ??___flge:
   715                           
   716                           ; 1 bytes @ 0x5A
   717  0000DA                     	ds	4
   718  0000DE                     ?_sprintf:
   719                           	opt stack 0
   720  0000DE                     ?_calibra:
   721                           	opt stack 0
   722  0000DE                     ?_identificarColor:
   723                           	opt stack 0
   724  0000DE                     sprintf@sp:
   725                           	opt stack 0
   726  0000DE                     calibra@valor:
   727                           	opt stack 0
   728  0000DE                     identificarColor@colB:
   729                           	opt stack 0
   730                           
   731                           ; 4 bytes @ 0x5E
   732  0000DE                     	ds	2
   733  0000E0                     sprintf@f:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x60
   737  0000E0                     	ds	2
   738  0000E2                     calibra@fd:
   739                           	opt stack 0
   740  0000E2                     identificarColor@colR:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x62
   744  0000E2                     	ds	4
   745  0000E6                     ??_sprintf:
   746  0000E6                     calibra@fw:
   747                           	opt stack 0
   748  0000E6                     identificarColor@colV:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x66
   752  0000E6                     	ds	4
   753  0000EA                     calibra@temp:
   754                           	opt stack 0
   755  0000EA                     identificarColor@colA:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x6A
   759  0000EA                     	ds	4
   760  0000EE                     ??_main:
   761                           
   762                           ; 1 bytes @ 0x6E
   763  0000EE                     	ds	2
   764                           tblptru	equ	0xFF8
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           
   768                           	psect	cstackCOMRAM
   769  000001                     __pcstackCOMRAM:
   770                           	opt stack 0
   771  000001                     ??_high_isr:
   772  000001                     
   773                           ; 1 bytes @ 0x0
   774  000001                     	ds	22
   775  000017                     high_isr@counter:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x16
   779  000017                     	ds	2
   780  000019                     ??_low_isr:
   781                           
   782                           ; 1 bytes @ 0x18
   783  000019                     	ds	21
   784  00002E                     ??_isdigit:
   785  00002E                     ??_lcd_lat:
   786  00002E                     ?___wmul:
   787                           	opt stack 0
   788  00002E                     ?___awmod:
   789                           	opt stack 0
   790  00002E                     ?__tdiv_to_l_:
   791                           	opt stack 0
   792  00002E                     ?__div_to_l_:
   793                           	opt stack 0
   794  00002E                     ?___flneg:
   795                           	opt stack 0
   796  00002E                     ?___lldiv:
   797                           	opt stack 0
   798  00002E                     ?___llmod:
   799                           	opt stack 0
   800  00002E                     ?___xxtofl:
   801                           	opt stack 0
   802  00002E                     manda@dato:
   803                           	opt stack 0
   804  00002E                     seleccionarEscala@a:
   805                           	opt stack 0
   806  00002E                     seleccionarColor@col:
   807                           	opt stack 0
   808  00002E                     ___wmul@multiplier:
   809                           	opt stack 0
   810  00002E                     ___awmod@dividend:
   811                           	opt stack 0
   812  00002E                     __div_to_l_@f1:
   813                           	opt stack 0
   814  00002E                     ___flneg@f1:
   815                           	opt stack 0
   816  00002E                     __tdiv_to_l_@f1:
   817                           	opt stack 0
   818  00002E                     ___lldiv@dividend:
   819                           	opt stack 0
   820  00002E                     ___llmod@dividend:
   821                           	opt stack 0
   822  00002E                     ___xxtofl@val:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x2D
   826  00002E                     	ds	1
   827  00002F                     ??_lcd_dwr:
   828  00002F                     ??_lcd_cmd:
   829  00002F                     lcd_cmd_hf@x:
   830                           	opt stack 0
   831  00002F                     _isdigit$561:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x2E
   835  00002F                     	ds	1
   836  000030                     lcd_cmd@x:
   837                           	opt stack 0
   838  000030                     lcd_dwr@x:
   839                           	opt stack 0
   840  000030                     isdigit@c:
   841                           	opt stack 0
   842  000030                     ___wmul@multiplicand:
   843                           	opt stack 0
   844  000030                     ___awmod@divisor:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x2F
   848  000030                     	ds	1
   849  000031                     ??_lcd_init:
   850  000031                     lcd_putc@c:
   851                           	opt stack 0
   852  000031                     lcd_gotoxy@y:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x30
   856  000031                     	ds	1
   857  000032                     ??_lcd_gotoxy:
   858  000032                     ??___xxtofl:
   859  000032                     ___awmod@counter:
   860                           	opt stack 0
   861  000032                     lcd_msg@c:
   862                           	opt stack 0
   863  000032                     ___wmul@product:
   864                           	opt stack 0
   865  000032                     __div_to_l_@f2:
   866                           	opt stack 0
   867  000032                     __tdiv_to_l_@f2:
   868                           	opt stack 0
   869  000032                     ___lldiv@divisor:
   870                           	opt stack 0
   871  000032                     ___llmod@divisor:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x31
   875  000032                     	ds	1
   876  000033                     lcd_gotoxy@x:
   877                           	opt stack 0
   878  000033                     ___awmod@sign:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x32
   882  000033                     	ds	1
   883  000034                     ?___awdiv:
   884                           	opt stack 0
   885  000034                     lcd_gotoxy@ADDRESS:
   886                           	opt stack 0
   887  000034                     ___awdiv@dividend:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x33
   891  000034                     	ds	2
   892  000036                     ??__tdiv_to_l_:
   893  000036                     ___llmod@counter:
   894                           	opt stack 0
   895  000036                     ___xxtofl@sign:
   896                           	opt stack 0
   897  000036                     ___awdiv@divisor:
   898                           	opt stack 0
   899  000036                     __div_to_l_@quot:
   900                           	opt stack 0
   901  000036                     ___lldiv@quotient:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0x35
   905  000036                     	ds	1
   906  000037                     ___xxtofl@exp:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x36
   910  000037                     	ds	1
   911  000038                     ___awdiv@counter:
   912                           	opt stack 0
   913  000038                     ___xxtofl@arg:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x37
   917  000038                     	ds	1
   918  000039                     ___awdiv@sign:
   919                           	opt stack 0
   920  000039                     __tdiv_to_l_@quot:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x38
   924  000039                     	ds	1
   925  00003A                     __div_to_l_@cntr:
   926                           	opt stack 0
   927  00003A                     ___lldiv@counter:
   928                           	opt stack 0
   929  00003A                     ___awdiv@quotient:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x39
   933  00003A                     	ds	1
   934  00003B                     __div_to_l_@exp1:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x3A
   938  00003B                     	ds	1
   939  00003C                     ?___flmul:
   940                           	opt stack 0
   941  00003C                     ___flmul@b:
   942                           	opt stack 0
   943                           
   944                           ; 4 bytes @ 0x3B
   945  00003C                     	ds	1
   946  00003D                     __tdiv_to_l_@cntr:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x3C
   950  00003D                     	ds	1
   951  00003E                     __tdiv_to_l_@exp1:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x3D
   955  00003E                     	ds	2
   956  000040                     ___flmul@a:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x3F
   960  000040                     	ds	4
   961  000044                     ___fltol@sign1:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x43
   965  000044                     	ds	1
   966  000045                     ___fltol@exp1:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x44
   970  000045                     	ds	1
   971                           tblptru	equ	0xFF8
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           
   975 ;;
   976 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   977 ;;
   978 ;; *************** function _main *****************
   979 ;; Defined at:
   980 ;;		line 170 in file "color_3.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  grados          4   92[BANK1 ] float 
   985 ;;  freq            4  113[BANK1 ] float 
   986 ;;  brillo          4  108[BANK1 ] float 
   987 ;;  a               4  104[BANK1 ] float 
   988 ;;  v               4  100[BANK1 ] float 
   989 ;;  r               4   96[BANK1 ] float 
   990 ;;  i               1  112[BANK1 ] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1000 ;;      Params:         0       0       0       0       0       0       0
  1001 ;;      Locals:         0       0      25       0       0       0       0
  1002 ;;      Temps:          0       2       0       0       0       0       0
  1003 ;;      Totals:         0       2      25       0       0       0       0
  1004 ;;Total ram usage:       27 bytes
  1005 ;; Hardware stack levels required when called:    6
  1006 ;; This function calls:
  1007 ;;		___fladd
  1008 ;;		___fldiv
  1009 ;;		_calcula
  1010 ;;		_calibra
  1011 ;;		_identificarColor
  1012 ;;		_lcd_gotoxy
  1013 ;;		_lcd_init
  1014 ;;		_lcd_msg
  1015 ;;		_prepareForInterrupts
  1016 ;;		_seleccionarColor
  1017 ;;		_seleccionarEscala
  1018 ;;		_sprintf
  1019 ;; This function is called by:
  1020 ;;		Startup code after reset
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text0
  1025  001C80                     __ptext0:
  1026                           	opt stack 0
  1027  001C80                     _main:
  1028                           	opt stack 25
  1029                           
  1030                           ;color_3.c: 172: char i;
  1031                           ;color_3.c: 173: float freq=0.0;
  1032                           
  1033                           ;incstack = 0
  1034  001C80  0E00               	movlw	0
  1035  001C82  0101               	movlb	1	; () banked
  1036  001C84  6F71               	movwf	main@freq& (0+255),b
  1037  001C86  0E00               	movlw	0
  1038  001C88  6F72               	movwf	(main@freq+1)& (0+255),b
  1039  001C8A  0E00               	movlw	0
  1040  001C8C  6F73               	movwf	(main@freq+2)& (0+255),b
  1041  001C8E  0E00               	movlw	0
  1042  001C90  6F74               	movwf	(main@freq+3)& (0+255),b
  1043                           
  1044                           ; BSR set to: 1
  1045                           ;color_3.c: 174: float r,v,a,brillo;
  1046                           ;color_3.c: 176: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
  1047  001C92  9695               	bcf	3989,3,c	;volatile
  1048                           
  1049                           ; BSR set to: 1
  1050                           ;color_3.c: 177: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
  1051  001C94  9495               	bcf	3989,2,c	;volatile
  1052                           
  1053                           ; BSR set to: 1
  1054                           ;color_3.c: 178: (*(&(*(&PORTD + 0x12))) &=~ (1<<(1)));
  1055  001C96  9295               	bcf	3989,1,c	;volatile
  1056                           
  1057                           ; BSR set to: 1
  1058                           ;color_3.c: 179: (*(&(*(&PORTD + 0x12))) &=~ (1<<(0)));
  1059  001C98  9095               	bcf	3989,0,c	;volatile
  1060                           
  1061                           ; BSR set to: 1
  1062                           ;color_3.c: 180: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
  1063  001C9A  9895               	bcf	3989,4,c	;volatile
  1064                           
  1065                           ; BSR set to: 1
  1066                           ;color_3.c: 182: lcd_init();
  1067  001C9C  EC3F  F01E         	call	_lcd_init	;wreg free
  1068                           
  1069                           ;color_3.c: 183: lcd_msg("Detector de color");
  1070  001CA0  0E91               	movlw	low STR_1
  1071  001CA2  6E32               	movwf	lcd_msg@c,c
  1072  001CA4  0E06               	movlw	high STR_1
  1073  001CA6  6E33               	movwf	lcd_msg@c+1,c
  1074  001CA8  EC8C  F01F         	call	_lcd_msg	;wreg free
  1075                           
  1076                           ;color_3.c: 190: T1CONbits.RD16 = 1;
  1077  001CAC  8ECD               	bsf	4045,7,c	;volatile
  1078                           
  1079                           ;color_3.c: 191: T1CKPS1 = 0;
  1080  001CAE  9ACD               	bcf	4045,5,c	;volatile
  1081                           
  1082                           ;color_3.c: 192: T1CKPS0 = 0;
  1083  001CB0  98CD               	bcf	4045,4,c	;volatile
  1084                           
  1085                           ;color_3.c: 193: TMR1CS = 0;
  1086  001CB2  92CD               	bcf	4045,1,c	;volatile
  1087                           
  1088                           ;color_3.c: 194: TMR1ON = 1;
  1089  001CB4  80CD               	bsf	4045,0,c	;volatile
  1090                           
  1091                           ;color_3.c: 195: TMR1IP = 0;
  1092  001CB6  909F               	bcf	3999,0,c	;volatile
  1093                           
  1094                           ;color_3.c: 196: TMR1IE = 1;
  1095  001CB8  809D               	bsf	3997,0,c	;volatile
  1096                           
  1097                           ;color_3.c: 198: prepareForInterrupts ();
  1098  001CBA  EC12  F021         	call	_prepareForInterrupts	;wreg free
  1099                           
  1100                           ;color_3.c: 202: IPEN = 1;
  1101  001CBE  8ED0               	bsf	4048,7,c	;volatile
  1102                           
  1103                           ;color_3.c: 203: GIEH = 1;
  1104  001CC0  8EF2               	bsf	intcon,7,c	;volatile
  1105                           
  1106                           ;color_3.c: 204: GIEL = 1;
  1107  001CC2  8CF2               	bsf	intcon,6,c	;volatile
  1108                           
  1109                           ;color_3.c: 212: seleccionarEscala(baja);
  1110  001CC4  0E02               	movlw	2
  1111  001CC6  EC5D  F020         	call	_seleccionarEscala
  1112  001CCA                     
  1113                           ;color_3.c: 217: {
  1114                           ;color_3.c: 219: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1115  001CCA  0E10               	movlw	16
  1116  001CCC  1A8C               	xorwf	3980,f,c	;volatile
  1117                           
  1118                           ;color_3.c: 220: seleccionarColor(sf);
  1119  001CCE  0E02               	movlw	2
  1120  001CD0  EC21  F020         	call	_seleccionarColor
  1121                           
  1122                           ;color_3.c: 221: for (i = 0 ;i < 30; i++)
  1123  001CD4  0E00               	movlw	0
  1124  001CD6  0101               	movlb	1	; () banked
  1125  001CD8  6F70               	movwf	main@i& (0+255),b
  1126  001CDA                     l5781:
  1127                           
  1128                           ; BSR set to: 1
  1129  001CDA  0E1D               	movlw	29
  1130  001CDC  6570               	cpfsgt	main@i& (0+255),b
  1131  001CDE  D001               	goto	l155
  1132  001CE0  D028               	goto	u6670
  1133  001CE2                     l155:
  1134                           
  1135                           ; BSR set to: 1
  1136                           ;color_3.c: 222: {
  1137                           ;color_3.c: 223: _delay((unsigned long)((10)*(16000000/4000.0)));
  1138                           
  1139                           ; BSR set to: 1
  1140  001CE2  0E34               	movlw	52
  1141  001CE4  0100               	movlb	0	; () banked
  1142  001CE6  6FEE               	movwf	??_main& (0+255),b
  1143  001CE8  0EF1               	movlw	241
  1144  001CEA                     u6747:
  1145  001CEA  2EE8               	decfsz	wreg,f,c
  1146  001CEC  D7FE               	bra	u6747
  1147  001CEE  2FEE               	decfsz	??_main& (0+255),f,b
  1148  001CF0  D7FC               	bra	u6747
  1149  001CF2  D000               	nop2	
  1150                           
  1151                           ;color_3.c: 224: freq+= calcula();
  1152  001CF4  C171  F0BE         	movff	main@freq,___fladd@b
  1153  001CF8  C172  F0BF         	movff	main@freq+1,___fladd@b+1
  1154  001CFC  C173  F0C0         	movff	main@freq+2,___fladd@b+2
  1155  001D00  C174  F0C1         	movff	main@freq+3,___fladd@b+3
  1156  001D04  ECB7  F01C         	call	_calcula	;wreg free
  1157  001D08  C0AA  F0C2         	movff	?_calcula,___fladd@a
  1158  001D0C  C0AB  F0C3         	movff	?_calcula+1,___fladd@a+1
  1159  001D10  C0AC  F0C4         	movff	?_calcula+2,___fladd@a+2
  1160  001D14  C0AD  F0C5         	movff	?_calcula+3,___fladd@a+3
  1161  001D18  EC7C  F015         	call	___fladd	;wreg free
  1162  001D1C  C0BE  F171         	movff	?___fladd,main@freq
  1163  001D20  C0BF  F172         	movff	?___fladd+1,main@freq+1
  1164  001D24  C0C0  F173         	movff	?___fladd+2,main@freq+2
  1165  001D28  C0C1  F174         	movff	?___fladd+3,main@freq+3
  1166  001D2C  0101               	movlb	1	; () banked
  1167  001D2E  2B70               	incf	main@i& (0+255),f,b
  1168  001D30  D7D4               	goto	l5781
  1169  001D32                     u6670:
  1170                           
  1171                           ; BSR set to: 1
  1172                           ;color_3.c: 225: }
  1173                           ;color_3.c: 226: freq/=30;
  1174                           
  1175                           ; BSR set to: 1
  1176  001D32  C171  F091         	movff	main@freq,___fldiv@b
  1177  001D36  C172  F092         	movff	main@freq+1,___fldiv@b+1
  1178  001D3A  C173  F093         	movff	main@freq+2,___fldiv@b+2
  1179  001D3E  C174  F094         	movff	main@freq+3,___fldiv@b+3
  1180  001D42  0E00               	movlw	0
  1181  001D44  0100               	movlb	0	; () banked
  1182  001D46  6F95               	movwf	___fldiv@a& (0+255),b
  1183  001D48  0E00               	movlw	0
  1184  001D4A  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  1185  001D4C  0EF0               	movlw	240
  1186  001D4E  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  1187  001D50  0E41               	movlw	65
  1188  001D52  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  1189  001D54  EC1B  F017         	call	___fldiv	;wreg free
  1190  001D58  C091  F171         	movff	?___fldiv,main@freq
  1191  001D5C  C092  F172         	movff	?___fldiv+1,main@freq+1
  1192  001D60  C093  F173         	movff	?___fldiv+2,main@freq+2
  1193  001D64  C094  F174         	movff	?___fldiv+3,main@freq+3
  1194                           
  1195                           ;color_3.c: 227: brillo = freq;
  1196  001D68  C171  F16C         	movff	main@freq,main@brillo
  1197  001D6C  C172  F16D         	movff	main@freq+1,main@brillo+1
  1198  001D70  C173  F16E         	movff	main@freq+2,main@brillo+2
  1199  001D74  C174  F16F         	movff	main@freq+3,main@brillo+3
  1200                           
  1201                           ;color_3.c: 228: freq = calibra(brillo,1883,8205);
  1202  001D78  C16C  F0DE         	movff	main@brillo,calibra@valor
  1203  001D7C  C16D  F0DF         	movff	main@brillo+1,calibra@valor+1
  1204  001D80  C16E  F0E0         	movff	main@brillo+2,calibra@valor+2
  1205  001D84  C16F  F0E1         	movff	main@brillo+3,calibra@valor+3
  1206  001D88  0E00               	movlw	0
  1207  001D8A  0100               	movlb	0	; () banked
  1208  001D8C  6FE2               	movwf	calibra@fd& (0+255),b
  1209  001D8E  0E60               	movlw	96
  1210  001D90  6FE3               	movwf	(calibra@fd+1)& (0+255),b
  1211  001D92  0EEB               	movlw	235
  1212  001D94  6FE4               	movwf	(calibra@fd+2)& (0+255),b
  1213  001D96  0E44               	movlw	68
  1214  001D98  6FE5               	movwf	(calibra@fd+3)& (0+255),b
  1215  001D9A  0E00               	movlw	0
  1216  001D9C  6FE6               	movwf	calibra@fw& (0+255),b
  1217  001D9E  0E34               	movlw	52
  1218  001DA0  6FE7               	movwf	(calibra@fw+1)& (0+255),b
  1219  001DA2  0E00               	movlw	0
  1220  001DA4  6FE8               	movwf	(calibra@fw+2)& (0+255),b
  1221  001DA6  0E46               	movlw	70
  1222  001DA8  6FE9               	movwf	(calibra@fw+3)& (0+255),b
  1223  001DAA  EC44  F01D         	call	_calibra	;wreg free
  1224  001DAE  C0DE  F171         	movff	?_calibra,main@freq
  1225  001DB2  C0DF  F172         	movff	?_calibra+1,main@freq+1
  1226  001DB6  C0E0  F173         	movff	?_calibra+2,main@freq+2
  1227  001DBA  C0E1  F174         	movff	?_calibra+3,main@freq+3
  1228                           
  1229                           ;color_3.c: 229: sprintf(value,"%5.3f",freq);
  1230  001DBE  0E75               	movlw	low _value
  1231  001DC0  0100               	movlb	0	; () banked
  1232  001DC2  6FDE               	movwf	sprintf@sp& (0+255),b
  1233  001DC4  0E01               	movlw	high _value
  1234  001DC6  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1235  001DC8  0EAC               	movlw	low STR_2
  1236  001DCA  6FE0               	movwf	sprintf@f& (0+255),b
  1237  001DCC  0E06               	movlw	high STR_2
  1238  001DCE  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1239  001DD0  C171  F0E2         	movff	main@freq,?_sprintf+4
  1240  001DD4  C172  F0E3         	movff	main@freq+1,?_sprintf+5
  1241  001DD8  C173  F0E4         	movff	main@freq+2,?_sprintf+6
  1242  001DDC  C174  F0E5         	movff	main@freq+3,?_sprintf+7
  1243  001DE0  EC77  F009         	call	_sprintf	;wreg free
  1244                           
  1245                           ;color_3.c: 230: lcd_gotoxy(1,2);
  1246  001DE4  0E02               	movlw	2
  1247  001DE6  6E31               	movwf	lcd_gotoxy@y,c
  1248  001DE8  0E01               	movlw	1
  1249  001DEA  EC79  F020         	call	_lcd_gotoxy
  1250                           
  1251                           ;color_3.c: 231: lcd_msg("B= ");
  1252  001DEE  0EB6               	movlw	low STR_3
  1253  001DF0  6E32               	movwf	lcd_msg@c,c
  1254  001DF2  0E06               	movlw	high STR_3
  1255  001DF4  6E33               	movwf	lcd_msg@c+1,c
  1256  001DF6  EC8C  F01F         	call	_lcd_msg	;wreg free
  1257                           
  1258                           ;color_3.c: 232: lcd_msg(value);
  1259  001DFA  0E75               	movlw	low _value
  1260  001DFC  6E32               	movwf	lcd_msg@c,c
  1261  001DFE  0E01               	movlw	high _value
  1262  001E00  6E33               	movwf	lcd_msg@c+1,c
  1263  001E02  EC8C  F01F         	call	_lcd_msg	;wreg free
  1264                           
  1265                           ;color_3.c: 233: freq=0.0;
  1266  001E06  0E00               	movlw	0
  1267  001E08  0101               	movlb	1	; () banked
  1268  001E0A  6F71               	movwf	main@freq& (0+255),b
  1269  001E0C  0E00               	movlw	0
  1270  001E0E  6F72               	movwf	(main@freq+1)& (0+255),b
  1271  001E10  0E00               	movlw	0
  1272  001E12  6F73               	movwf	(main@freq+2)& (0+255),b
  1273  001E14  0E00               	movlw	0
  1274  001E16  6F74               	movwf	(main@freq+3)& (0+255),b
  1275                           
  1276                           ; BSR set to: 1
  1277                           ;color_3.c: 234: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1278  001E18  0E1F               	movlw	31
  1279  001E1A  0100               	movlb	0	; () banked
  1280  001E1C  6FEF               	movwf	(??_main+1)& (0+255),b
  1281  001E1E  0E71               	movlw	113
  1282  001E20  6FEE               	movwf	??_main& (0+255),b
  1283  001E22  0E1E               	movlw	30
  1284  001E24                     u6757:
  1285  001E24  2EE8               	decfsz	wreg,f,c
  1286  001E26  D7FE               	bra	u6757
  1287  001E28  2FEE               	decfsz	??_main& (0+255),f,b
  1288  001E2A  D7FC               	bra	u6757
  1289  001E2C  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1290  001E2E  D7FA               	bra	u6757
  1291  001E30  F000               	nop	
  1292                           
  1293                           ;color_3.c: 238: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1294  001E32  0E10               	movlw	16
  1295  001E34  1A8C               	xorwf	3980,f,c	;volatile
  1296                           
  1297                           ;color_3.c: 239: seleccionarColor(rojo);
  1298  001E36  0E00               	movlw	0
  1299  001E38  EC21  F020         	call	_seleccionarColor
  1300                           
  1301                           ;color_3.c: 240: for (i = 0 ;i < 30; i++)
  1302  001E3C  0E00               	movlw	0
  1303  001E3E  0101               	movlb	1	; () banked
  1304  001E40  6F70               	movwf	main@i& (0+255),b
  1305  001E42                     l5817:
  1306                           
  1307                           ; BSR set to: 1
  1308  001E42  0E1D               	movlw	29
  1309  001E44  6570               	cpfsgt	main@i& (0+255),b
  1310  001E46  D001               	goto	l157
  1311  001E48  D028               	goto	u6690
  1312  001E4A                     l157:
  1313                           
  1314                           ; BSR set to: 1
  1315                           ;color_3.c: 241: {
  1316                           ;color_3.c: 242: _delay((unsigned long)((10)*(16000000/4000.0)));
  1317                           
  1318                           ; BSR set to: 1
  1319  001E4A  0E34               	movlw	52
  1320  001E4C  0100               	movlb	0	; () banked
  1321  001E4E  6FEE               	movwf	??_main& (0+255),b
  1322  001E50  0EF1               	movlw	241
  1323  001E52                     u6767:
  1324  001E52  2EE8               	decfsz	wreg,f,c
  1325  001E54  D7FE               	bra	u6767
  1326  001E56  2FEE               	decfsz	??_main& (0+255),f,b
  1327  001E58  D7FC               	bra	u6767
  1328  001E5A  D000               	nop2	
  1329                           
  1330                           ;color_3.c: 243: freq+= calcula();
  1331  001E5C  C171  F0BE         	movff	main@freq,___fladd@b
  1332  001E60  C172  F0BF         	movff	main@freq+1,___fladd@b+1
  1333  001E64  C173  F0C0         	movff	main@freq+2,___fladd@b+2
  1334  001E68  C174  F0C1         	movff	main@freq+3,___fladd@b+3
  1335  001E6C  ECB7  F01C         	call	_calcula	;wreg free
  1336  001E70  C0AA  F0C2         	movff	?_calcula,___fladd@a
  1337  001E74  C0AB  F0C3         	movff	?_calcula+1,___fladd@a+1
  1338  001E78  C0AC  F0C4         	movff	?_calcula+2,___fladd@a+2
  1339  001E7C  C0AD  F0C5         	movff	?_calcula+3,___fladd@a+3
  1340  001E80  EC7C  F015         	call	___fladd	;wreg free
  1341  001E84  C0BE  F171         	movff	?___fladd,main@freq
  1342  001E88  C0BF  F172         	movff	?___fladd+1,main@freq+1
  1343  001E8C  C0C0  F173         	movff	?___fladd+2,main@freq+2
  1344  001E90  C0C1  F174         	movff	?___fladd+3,main@freq+3
  1345  001E94  0101               	movlb	1	; () banked
  1346  001E96  2B70               	incf	main@i& (0+255),f,b
  1347  001E98  D7D4               	goto	l5817
  1348  001E9A                     u6690:
  1349                           
  1350                           ; BSR set to: 1
  1351                           ;color_3.c: 244: }
  1352                           ;color_3.c: 245: freq/=30;
  1353                           
  1354                           ; BSR set to: 1
  1355  001E9A  C171  F091         	movff	main@freq,___fldiv@b
  1356  001E9E  C172  F092         	movff	main@freq+1,___fldiv@b+1
  1357  001EA2  C173  F093         	movff	main@freq+2,___fldiv@b+2
  1358  001EA6  C174  F094         	movff	main@freq+3,___fldiv@b+3
  1359  001EAA  0E00               	movlw	0
  1360  001EAC  0100               	movlb	0	; () banked
  1361  001EAE  6F95               	movwf	___fldiv@a& (0+255),b
  1362  001EB0  0E00               	movlw	0
  1363  001EB2  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  1364  001EB4  0EF0               	movlw	240
  1365  001EB6  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  1366  001EB8  0E41               	movlw	65
  1367  001EBA  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  1368  001EBC  EC1B  F017         	call	___fldiv	;wreg free
  1369  001EC0  C091  F171         	movff	?___fldiv,main@freq
  1370  001EC4  C092  F172         	movff	?___fldiv+1,main@freq+1
  1371  001EC8  C093  F173         	movff	?___fldiv+2,main@freq+2
  1372  001ECC  C094  F174         	movff	?___fldiv+3,main@freq+3
  1373                           
  1374                           ;color_3.c: 246: r=freq;
  1375  001ED0  C171  F160         	movff	main@freq,main@r
  1376  001ED4  C172  F161         	movff	main@freq+1,main@r+1
  1377  001ED8  C173  F162         	movff	main@freq+2,main@r+2
  1378  001EDC  C174  F163         	movff	main@freq+3,main@r+3
  1379                           
  1380                           ;color_3.c: 247: freq = calibra(r,743.4,2951.7);
  1381  001EE0  C160  F0DE         	movff	main@r,calibra@valor
  1382  001EE4  C161  F0DF         	movff	main@r+1,calibra@valor+1
  1383  001EE8  C162  F0E0         	movff	main@r+2,calibra@valor+2
  1384  001EEC  C163  F0E1         	movff	main@r+3,calibra@valor+3
  1385  001EF0  0E9A               	movlw	154
  1386  001EF2  0100               	movlb	0	; () banked
  1387  001EF4  6FE2               	movwf	calibra@fd& (0+255),b
  1388  001EF6  0ED9               	movlw	217
  1389  001EF8  6FE3               	movwf	(calibra@fd+1)& (0+255),b
  1390  001EFA  0E39               	movlw	57
  1391  001EFC  6FE4               	movwf	(calibra@fd+2)& (0+255),b
  1392  001EFE  0E44               	movlw	68
  1393  001F00  6FE5               	movwf	(calibra@fd+3)& (0+255),b
  1394  001F02  0E33               	movlw	51
  1395  001F04  6FE6               	movwf	calibra@fw& (0+255),b
  1396  001F06  0E7B               	movlw	123
  1397  001F08  6FE7               	movwf	(calibra@fw+1)& (0+255),b
  1398  001F0A  0E38               	movlw	56
  1399  001F0C  6FE8               	movwf	(calibra@fw+2)& (0+255),b
  1400  001F0E  0E45               	movlw	69
  1401  001F10  6FE9               	movwf	(calibra@fw+3)& (0+255),b
  1402  001F12  EC44  F01D         	call	_calibra	;wreg free
  1403  001F16  C0DE  F171         	movff	?_calibra,main@freq
  1404  001F1A  C0DF  F172         	movff	?_calibra+1,main@freq+1
  1405  001F1E  C0E0  F173         	movff	?_calibra+2,main@freq+2
  1406  001F22  C0E1  F174         	movff	?_calibra+3,main@freq+3
  1407                           
  1408                           ;color_3.c: 248: sprintf(value,"%5.3f",freq);
  1409  001F26  0E75               	movlw	low _value
  1410  001F28  0100               	movlb	0	; () banked
  1411  001F2A  6FDE               	movwf	sprintf@sp& (0+255),b
  1412  001F2C  0E01               	movlw	high _value
  1413  001F2E  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1414  001F30  0EAC               	movlw	low STR_2
  1415  001F32  6FE0               	movwf	sprintf@f& (0+255),b
  1416  001F34  0E06               	movlw	high STR_2
  1417  001F36  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1418  001F38  C171  F0E2         	movff	main@freq,?_sprintf+4
  1419  001F3C  C172  F0E3         	movff	main@freq+1,?_sprintf+5
  1420  001F40  C173  F0E4         	movff	main@freq+2,?_sprintf+6
  1421  001F44  C174  F0E5         	movff	main@freq+3,?_sprintf+7
  1422  001F48  EC77  F009         	call	_sprintf	;wreg free
  1423                           
  1424                           ;color_3.c: 249: lcd_gotoxy(1,2);
  1425  001F4C  0E02               	movlw	2
  1426  001F4E  6E31               	movwf	lcd_gotoxy@y,c
  1427  001F50  0E01               	movlw	1
  1428  001F52  EC79  F020         	call	_lcd_gotoxy
  1429                           
  1430                           ;color_3.c: 250: lcd_msg("R= ");
  1431  001F56  0EBA               	movlw	low STR_5
  1432  001F58  6E32               	movwf	lcd_msg@c,c
  1433  001F5A  0E06               	movlw	high STR_5
  1434  001F5C  6E33               	movwf	lcd_msg@c+1,c
  1435  001F5E  EC8C  F01F         	call	_lcd_msg	;wreg free
  1436                           
  1437                           ;color_3.c: 251: lcd_msg(value);
  1438  001F62  0E75               	movlw	low _value
  1439  001F64  6E32               	movwf	lcd_msg@c,c
  1440  001F66  0E01               	movlw	high _value
  1441  001F68  6E33               	movwf	lcd_msg@c+1,c
  1442  001F6A  EC8C  F01F         	call	_lcd_msg	;wreg free
  1443                           
  1444                           ;color_3.c: 253: freq=0.0;
  1445  001F6E  0E00               	movlw	0
  1446  001F70  0101               	movlb	1	; () banked
  1447  001F72  6F71               	movwf	main@freq& (0+255),b
  1448  001F74  0E00               	movlw	0
  1449  001F76  6F72               	movwf	(main@freq+1)& (0+255),b
  1450  001F78  0E00               	movlw	0
  1451  001F7A  6F73               	movwf	(main@freq+2)& (0+255),b
  1452  001F7C  0E00               	movlw	0
  1453  001F7E  6F74               	movwf	(main@freq+3)& (0+255),b
  1454                           
  1455                           ; BSR set to: 1
  1456                           ;color_3.c: 254: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1457  001F80  0E1F               	movlw	31
  1458  001F82  0100               	movlb	0	; () banked
  1459  001F84  6FEF               	movwf	(??_main+1)& (0+255),b
  1460  001F86  0E71               	movlw	113
  1461  001F88  6FEE               	movwf	??_main& (0+255),b
  1462  001F8A  0E1E               	movlw	30
  1463  001F8C                     u6777:
  1464  001F8C  2EE8               	decfsz	wreg,f,c
  1465  001F8E  D7FE               	bra	u6777
  1466  001F90  2FEE               	decfsz	??_main& (0+255),f,b
  1467  001F92  D7FC               	bra	u6777
  1468  001F94  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1469  001F96  D7FA               	bra	u6777
  1470  001F98  F000               	nop	
  1471                           
  1472                           ;color_3.c: 257: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1473  001F9A  0E10               	movlw	16
  1474  001F9C  1A8C               	xorwf	3980,f,c	;volatile
  1475                           
  1476                           ;color_3.c: 258: seleccionarColor(verde);
  1477  001F9E  0E03               	movlw	3
  1478  001FA0  EC21  F020         	call	_seleccionarColor
  1479                           
  1480                           ;color_3.c: 259: for (i = 0 ;i < 30; i++)
  1481  001FA4  0E00               	movlw	0
  1482  001FA6  0101               	movlb	1	; () banked
  1483  001FA8  6F70               	movwf	main@i& (0+255),b
  1484  001FAA                     l5853:
  1485                           
  1486                           ; BSR set to: 1
  1487  001FAA  0E1D               	movlw	29
  1488  001FAC  6570               	cpfsgt	main@i& (0+255),b
  1489  001FAE  D001               	goto	l159
  1490  001FB0  D028               	goto	u6710
  1491  001FB2                     l159:
  1492                           
  1493                           ; BSR set to: 1
  1494                           ;color_3.c: 260: {
  1495                           ;color_3.c: 261: _delay((unsigned long)((10)*(16000000/4000.0)));
  1496                           
  1497                           ; BSR set to: 1
  1498  001FB2  0E34               	movlw	52
  1499  001FB4  0100               	movlb	0	; () banked
  1500  001FB6  6FEE               	movwf	??_main& (0+255),b
  1501  001FB8  0EF1               	movlw	241
  1502  001FBA                     u6787:
  1503  001FBA  2EE8               	decfsz	wreg,f,c
  1504  001FBC  D7FE               	bra	u6787
  1505  001FBE  2FEE               	decfsz	??_main& (0+255),f,b
  1506  001FC0  D7FC               	bra	u6787
  1507  001FC2  D000               	nop2	
  1508                           
  1509                           ;color_3.c: 262: freq+= calcula();
  1510  001FC4  C171  F0BE         	movff	main@freq,___fladd@b
  1511  001FC8  C172  F0BF         	movff	main@freq+1,___fladd@b+1
  1512  001FCC  C173  F0C0         	movff	main@freq+2,___fladd@b+2
  1513  001FD0  C174  F0C1         	movff	main@freq+3,___fladd@b+3
  1514  001FD4  ECB7  F01C         	call	_calcula	;wreg free
  1515  001FD8  C0AA  F0C2         	movff	?_calcula,___fladd@a
  1516  001FDC  C0AB  F0C3         	movff	?_calcula+1,___fladd@a+1
  1517  001FE0  C0AC  F0C4         	movff	?_calcula+2,___fladd@a+2
  1518  001FE4  C0AD  F0C5         	movff	?_calcula+3,___fladd@a+3
  1519  001FE8  EC7C  F015         	call	___fladd	;wreg free
  1520  001FEC  C0BE  F171         	movff	?___fladd,main@freq
  1521  001FF0  C0BF  F172         	movff	?___fladd+1,main@freq+1
  1522  001FF4  C0C0  F173         	movff	?___fladd+2,main@freq+2
  1523  001FF8  C0C1  F174         	movff	?___fladd+3,main@freq+3
  1524  001FFC  0101               	movlb	1	; () banked
  1525  001FFE  2B70               	incf	main@i& (0+255),f,b
  1526  002000  D7D4               	goto	l5853
  1527  002002                     u6710:
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;color_3.c: 263: }
  1531                           ;color_3.c: 264: freq/=30;
  1532                           
  1533                           ; BSR set to: 1
  1534  002002  C171  F091         	movff	main@freq,___fldiv@b
  1535  002006  C172  F092         	movff	main@freq+1,___fldiv@b+1
  1536  00200A  C173  F093         	movff	main@freq+2,___fldiv@b+2
  1537  00200E  C174  F094         	movff	main@freq+3,___fldiv@b+3
  1538  002012  0E00               	movlw	0
  1539  002014  0100               	movlb	0	; () banked
  1540  002016  6F95               	movwf	___fldiv@a& (0+255),b
  1541  002018  0E00               	movlw	0
  1542  00201A  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  1543  00201C  0EF0               	movlw	240
  1544  00201E  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  1545  002020  0E41               	movlw	65
  1546  002022  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  1547  002024  EC1B  F017         	call	___fldiv	;wreg free
  1548  002028  C091  F171         	movff	?___fldiv,main@freq
  1549  00202C  C092  F172         	movff	?___fldiv+1,main@freq+1
  1550  002030  C093  F173         	movff	?___fldiv+2,main@freq+2
  1551  002034  C094  F174         	movff	?___fldiv+3,main@freq+3
  1552                           
  1553                           ;color_3.c: 265: v=freq;
  1554  002038  C171  F164         	movff	main@freq,main@v
  1555  00203C  C172  F165         	movff	main@freq+1,main@v+1
  1556  002040  C173  F166         	movff	main@freq+2,main@v+2
  1557  002044  C174  F167         	movff	main@freq+3,main@v+3
  1558                           
  1559                           ;color_3.c: 266: freq = calibra(v,505.7,2442);
  1560  002048  C164  F0DE         	movff	main@v,calibra@valor
  1561  00204C  C165  F0DF         	movff	main@v+1,calibra@valor+1
  1562  002050  C166  F0E0         	movff	main@v+2,calibra@valor+2
  1563  002054  C167  F0E1         	movff	main@v+3,calibra@valor+3
  1564  002058  0E9A               	movlw	154
  1565  00205A  0100               	movlb	0	; () banked
  1566  00205C  6FE2               	movwf	calibra@fd& (0+255),b
  1567  00205E  0ED9               	movlw	217
  1568  002060  6FE3               	movwf	(calibra@fd+1)& (0+255),b
  1569  002062  0EFC               	movlw	252
  1570  002064  6FE4               	movwf	(calibra@fd+2)& (0+255),b
  1571  002066  0E43               	movlw	67
  1572  002068  6FE5               	movwf	(calibra@fd+3)& (0+255),b
  1573  00206A  0E00               	movlw	0
  1574  00206C  6FE6               	movwf	calibra@fw& (0+255),b
  1575  00206E  0EA0               	movlw	160
  1576  002070  6FE7               	movwf	(calibra@fw+1)& (0+255),b
  1577  002072  0E18               	movlw	24
  1578  002074  6FE8               	movwf	(calibra@fw+2)& (0+255),b
  1579  002076  0E45               	movlw	69
  1580  002078  6FE9               	movwf	(calibra@fw+3)& (0+255),b
  1581  00207A  EC44  F01D         	call	_calibra	;wreg free
  1582  00207E  C0DE  F171         	movff	?_calibra,main@freq
  1583  002082  C0DF  F172         	movff	?_calibra+1,main@freq+1
  1584  002086  C0E0  F173         	movff	?_calibra+2,main@freq+2
  1585  00208A  C0E1  F174         	movff	?_calibra+3,main@freq+3
  1586                           
  1587                           ;color_3.c: 267: sprintf(value,"%5.3f",freq);
  1588  00208E  0E75               	movlw	low _value
  1589  002090  0100               	movlb	0	; () banked
  1590  002092  6FDE               	movwf	sprintf@sp& (0+255),b
  1591  002094  0E01               	movlw	high _value
  1592  002096  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1593  002098  0EAC               	movlw	low STR_2
  1594  00209A  6FE0               	movwf	sprintf@f& (0+255),b
  1595  00209C  0E06               	movlw	high STR_2
  1596  00209E  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1597  0020A0  C171  F0E2         	movff	main@freq,?_sprintf+4
  1598  0020A4  C172  F0E3         	movff	main@freq+1,?_sprintf+5
  1599  0020A8  C173  F0E4         	movff	main@freq+2,?_sprintf+6
  1600  0020AC  C174  F0E5         	movff	main@freq+3,?_sprintf+7
  1601  0020B0  EC77  F009         	call	_sprintf	;wreg free
  1602                           
  1603                           ;color_3.c: 268: lcd_gotoxy(1,2);
  1604  0020B4  0E02               	movlw	2
  1605  0020B6  6E31               	movwf	lcd_gotoxy@y,c
  1606  0020B8  0E01               	movlw	1
  1607  0020BA  EC79  F020         	call	_lcd_gotoxy
  1608                           
  1609                           ;color_3.c: 269: lcd_msg("V= ");
  1610  0020BE  0EBE               	movlw	low STR_7
  1611  0020C0  6E32               	movwf	lcd_msg@c,c
  1612  0020C2  0E06               	movlw	high STR_7
  1613  0020C4  6E33               	movwf	lcd_msg@c+1,c
  1614  0020C6  EC8C  F01F         	call	_lcd_msg	;wreg free
  1615                           
  1616                           ;color_3.c: 270: lcd_msg(value);
  1617  0020CA  0E75               	movlw	low _value
  1618  0020CC  6E32               	movwf	lcd_msg@c,c
  1619  0020CE  0E01               	movlw	high _value
  1620  0020D0  6E33               	movwf	lcd_msg@c+1,c
  1621  0020D2  EC8C  F01F         	call	_lcd_msg	;wreg free
  1622                           
  1623                           ;color_3.c: 271: freq=0.0;
  1624  0020D6  0E00               	movlw	0
  1625  0020D8  0101               	movlb	1	; () banked
  1626  0020DA  6F71               	movwf	main@freq& (0+255),b
  1627  0020DC  0E00               	movlw	0
  1628  0020DE  6F72               	movwf	(main@freq+1)& (0+255),b
  1629  0020E0  0E00               	movlw	0
  1630  0020E2  6F73               	movwf	(main@freq+2)& (0+255),b
  1631  0020E4  0E00               	movlw	0
  1632  0020E6  6F74               	movwf	(main@freq+3)& (0+255),b
  1633                           
  1634                           ; BSR set to: 1
  1635                           ;color_3.c: 272: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1636  0020E8  0E1F               	movlw	31
  1637  0020EA  0100               	movlb	0	; () banked
  1638  0020EC  6FEF               	movwf	(??_main+1)& (0+255),b
  1639  0020EE  0E71               	movlw	113
  1640  0020F0  6FEE               	movwf	??_main& (0+255),b
  1641  0020F2  0E1E               	movlw	30
  1642  0020F4                     u6797:
  1643  0020F4  2EE8               	decfsz	wreg,f,c
  1644  0020F6  D7FE               	bra	u6797
  1645  0020F8  2FEE               	decfsz	??_main& (0+255),f,b
  1646  0020FA  D7FC               	bra	u6797
  1647  0020FC  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1648  0020FE  D7FA               	bra	u6797
  1649  002100  F000               	nop	
  1650                           
  1651                           ;color_3.c: 275: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1652  002102  0E10               	movlw	16
  1653  002104  1A8C               	xorwf	3980,f,c	;volatile
  1654                           
  1655                           ;color_3.c: 276: seleccionarColor(azul);
  1656  002106  0E01               	movlw	1
  1657  002108  EC21  F020         	call	_seleccionarColor
  1658                           
  1659                           ;color_3.c: 277: for (i = 0 ;i < 30; i++)
  1660  00210C  0E00               	movlw	0
  1661  00210E  0101               	movlb	1	; () banked
  1662  002110  6F70               	movwf	main@i& (0+255),b
  1663  002112                     l5889:
  1664                           
  1665                           ; BSR set to: 1
  1666  002112  0E1D               	movlw	29
  1667  002114  6570               	cpfsgt	main@i& (0+255),b
  1668  002116  D001               	goto	l161
  1669  002118  D01F               	goto	u6730
  1670  00211A                     l161:
  1671                           
  1672                           ; BSR set to: 1
  1673                           ;color_3.c: 278: {
  1674                           ;color_3.c: 279: freq+= calcula();
  1675                           
  1676                           ; BSR set to: 1
  1677  00211A  C171  F0BE         	movff	main@freq,___fladd@b
  1678  00211E  C172  F0BF         	movff	main@freq+1,___fladd@b+1
  1679  002122  C173  F0C0         	movff	main@freq+2,___fladd@b+2
  1680  002126  C174  F0C1         	movff	main@freq+3,___fladd@b+3
  1681  00212A  ECB7  F01C         	call	_calcula	;wreg free
  1682  00212E  C0AA  F0C2         	movff	?_calcula,___fladd@a
  1683  002132  C0AB  F0C3         	movff	?_calcula+1,___fladd@a+1
  1684  002136  C0AC  F0C4         	movff	?_calcula+2,___fladd@a+2
  1685  00213A  C0AD  F0C5         	movff	?_calcula+3,___fladd@a+3
  1686  00213E  EC7C  F015         	call	___fladd	;wreg free
  1687  002142  C0BE  F171         	movff	?___fladd,main@freq
  1688  002146  C0BF  F172         	movff	?___fladd+1,main@freq+1
  1689  00214A  C0C0  F173         	movff	?___fladd+2,main@freq+2
  1690  00214E  C0C1  F174         	movff	?___fladd+3,main@freq+3
  1691  002152  0101               	movlb	1	; () banked
  1692  002154  2B70               	incf	main@i& (0+255),f,b
  1693  002156  D7DD               	goto	l5889
  1694  002158                     u6730:
  1695                           
  1696                           ; BSR set to: 1
  1697                           ;color_3.c: 280: }
  1698                           ;color_3.c: 281: freq/=30;
  1699                           
  1700                           ; BSR set to: 1
  1701  002158  C171  F091         	movff	main@freq,___fldiv@b
  1702  00215C  C172  F092         	movff	main@freq+1,___fldiv@b+1
  1703  002160  C173  F093         	movff	main@freq+2,___fldiv@b+2
  1704  002164  C174  F094         	movff	main@freq+3,___fldiv@b+3
  1705  002168  0E00               	movlw	0
  1706  00216A  0100               	movlb	0	; () banked
  1707  00216C  6F95               	movwf	___fldiv@a& (0+255),b
  1708  00216E  0E00               	movlw	0
  1709  002170  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  1710  002172  0EF0               	movlw	240
  1711  002174  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  1712  002176  0E41               	movlw	65
  1713  002178  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  1714  00217A  EC1B  F017         	call	___fldiv	;wreg free
  1715  00217E  C091  F171         	movff	?___fldiv,main@freq
  1716  002182  C092  F172         	movff	?___fldiv+1,main@freq+1
  1717  002186  C093  F173         	movff	?___fldiv+2,main@freq+2
  1718  00218A  C094  F174         	movff	?___fldiv+3,main@freq+3
  1719                           
  1720                           ;color_3.c: 282: a=freq;
  1721  00218E  C171  F168         	movff	main@freq,main@a
  1722  002192  C172  F169         	movff	main@freq+1,main@a+1
  1723  002196  C173  F16A         	movff	main@freq+2,main@a+2
  1724  00219A  C174  F16B         	movff	main@freq+3,main@a+3
  1725                           
  1726                           ;color_3.c: 283: freq = calibra(a,588.5,3186);
  1727  00219E  C168  F0DE         	movff	main@a,calibra@valor
  1728  0021A2  C169  F0DF         	movff	main@a+1,calibra@valor+1
  1729  0021A6  C16A  F0E0         	movff	main@a+2,calibra@valor+2
  1730  0021AA  C16B  F0E1         	movff	main@a+3,calibra@valor+3
  1731  0021AE  0E00               	movlw	0
  1732  0021B0  0100               	movlb	0	; () banked
  1733  0021B2  6FE2               	movwf	calibra@fd& (0+255),b
  1734  0021B4  0E20               	movlw	32
  1735  0021B6  6FE3               	movwf	(calibra@fd+1)& (0+255),b
  1736  0021B8  0E13               	movlw	19
  1737  0021BA  6FE4               	movwf	(calibra@fd+2)& (0+255),b
  1738  0021BC  0E44               	movlw	68
  1739  0021BE  6FE5               	movwf	(calibra@fd+3)& (0+255),b
  1740  0021C0  0E00               	movlw	0
  1741  0021C2  6FE6               	movwf	calibra@fw& (0+255),b
  1742  0021C4  0E20               	movlw	32
  1743  0021C6  6FE7               	movwf	(calibra@fw+1)& (0+255),b
  1744  0021C8  0E47               	movlw	71
  1745  0021CA  6FE8               	movwf	(calibra@fw+2)& (0+255),b
  1746  0021CC  0E45               	movlw	69
  1747  0021CE  6FE9               	movwf	(calibra@fw+3)& (0+255),b
  1748  0021D0  EC44  F01D         	call	_calibra	;wreg free
  1749  0021D4  C0DE  F171         	movff	?_calibra,main@freq
  1750  0021D8  C0DF  F172         	movff	?_calibra+1,main@freq+1
  1751  0021DC  C0E0  F173         	movff	?_calibra+2,main@freq+2
  1752  0021E0  C0E1  F174         	movff	?_calibra+3,main@freq+3
  1753                           
  1754                           ;color_3.c: 284: sprintf(value,"%5.3f",freq);
  1755  0021E4  0E75               	movlw	low _value
  1756  0021E6  0100               	movlb	0	; () banked
  1757  0021E8  6FDE               	movwf	sprintf@sp& (0+255),b
  1758  0021EA  0E01               	movlw	high _value
  1759  0021EC  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1760  0021EE  0EAC               	movlw	low STR_2
  1761  0021F0  6FE0               	movwf	sprintf@f& (0+255),b
  1762  0021F2  0E06               	movlw	high STR_2
  1763  0021F4  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1764  0021F6  C171  F0E2         	movff	main@freq,?_sprintf+4
  1765  0021FA  C172  F0E3         	movff	main@freq+1,?_sprintf+5
  1766  0021FE  C173  F0E4         	movff	main@freq+2,?_sprintf+6
  1767  002202  C174  F0E5         	movff	main@freq+3,?_sprintf+7
  1768  002206  EC77  F009         	call	_sprintf	;wreg free
  1769                           
  1770                           ;color_3.c: 285: lcd_gotoxy(1,2);
  1771  00220A  0E02               	movlw	2
  1772  00220C  6E31               	movwf	lcd_gotoxy@y,c
  1773  00220E  0E01               	movlw	1
  1774  002210  EC79  F020         	call	_lcd_gotoxy
  1775                           
  1776                           ;color_3.c: 286: lcd_msg("A= ");
  1777  002214  0EB2               	movlw	low STR_9
  1778  002216  6E32               	movwf	lcd_msg@c,c
  1779  002218  0E06               	movlw	high STR_9
  1780  00221A  6E33               	movwf	lcd_msg@c+1,c
  1781  00221C  EC8C  F01F         	call	_lcd_msg	;wreg free
  1782                           
  1783                           ;color_3.c: 287: lcd_msg(value);
  1784  002220  0E75               	movlw	low _value
  1785  002222  6E32               	movwf	lcd_msg@c,c
  1786  002224  0E01               	movlw	high _value
  1787  002226  6E33               	movwf	lcd_msg@c+1,c
  1788  002228  EC8C  F01F         	call	_lcd_msg	;wreg free
  1789                           
  1790                           ;color_3.c: 288: freq=0.0;
  1791  00222C  0E00               	movlw	0
  1792  00222E  0101               	movlb	1	; () banked
  1793  002230  6F71               	movwf	main@freq& (0+255),b
  1794  002232  0E00               	movlw	0
  1795  002234  6F72               	movwf	(main@freq+1)& (0+255),b
  1796  002236  0E00               	movlw	0
  1797  002238  6F73               	movwf	(main@freq+2)& (0+255),b
  1798  00223A  0E00               	movlw	0
  1799  00223C  6F74               	movwf	(main@freq+3)& (0+255),b
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;color_3.c: 289: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1803  00223E  0E1F               	movlw	31
  1804  002240  0100               	movlb	0	; () banked
  1805  002242  6FEF               	movwf	(??_main+1)& (0+255),b
  1806  002244  0E71               	movlw	113
  1807  002246  6FEE               	movwf	??_main& (0+255),b
  1808  002248  0E1E               	movlw	30
  1809  00224A                     u6807:
  1810  00224A  2EE8               	decfsz	wreg,f,c
  1811  00224C  D7FE               	bra	u6807
  1812  00224E  2FEE               	decfsz	??_main& (0+255),f,b
  1813  002250  D7FC               	bra	u6807
  1814  002252  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1815  002254  D7FA               	bra	u6807
  1816  002256  F000               	nop	
  1817                           
  1818                           ;color_3.c: 291: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1819  002258  0E1F               	movlw	31
  1820  00225A  0100               	movlb	0	; () banked
  1821  00225C  6FEF               	movwf	(??_main+1)& (0+255),b
  1822  00225E  0E71               	movlw	113
  1823  002260  6FEE               	movwf	??_main& (0+255),b
  1824  002262  0E1E               	movlw	30
  1825  002264                     u6817:
  1826  002264  2EE8               	decfsz	wreg,f,c
  1827  002266  D7FE               	bra	u6817
  1828  002268  2FEE               	decfsz	??_main& (0+255),f,b
  1829  00226A  D7FC               	bra	u6817
  1830  00226C  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1831  00226E  D7FA               	bra	u6817
  1832  002270  F000               	nop	
  1833                           
  1834                           ;color_3.c: 292: float grados = identificarColor(brillo, r, v, a);
  1835  002272  C16C  F0DE         	movff	main@brillo,identificarColor@colB
  1836  002276  C16D  F0DF         	movff	main@brillo+1,identificarColor@colB+1
  1837  00227A  C16E  F0E0         	movff	main@brillo+2,identificarColor@colB+2
  1838  00227E  C16F  F0E1         	movff	main@brillo+3,identificarColor@colB+3
  1839  002282  C160  F0E2         	movff	main@r,identificarColor@colR
  1840  002286  C161  F0E3         	movff	main@r+1,identificarColor@colR+1
  1841  00228A  C162  F0E4         	movff	main@r+2,identificarColor@colR+2
  1842  00228E  C163  F0E5         	movff	main@r+3,identificarColor@colR+3
  1843  002292  C164  F0E6         	movff	main@v,identificarColor@colV
  1844  002296  C165  F0E7         	movff	main@v+1,identificarColor@colV+1
  1845  00229A  C166  F0E8         	movff	main@v+2,identificarColor@colV+2
  1846  00229E  C167  F0E9         	movff	main@v+3,identificarColor@colV+3
  1847  0022A2  C168  F0EA         	movff	main@a,identificarColor@colA
  1848  0022A6  C169  F0EB         	movff	main@a+1,identificarColor@colA+1
  1849  0022AA  C16A  F0EC         	movff	main@a+2,identificarColor@colA+2
  1850  0022AE  C16B  F0ED         	movff	main@a+3,identificarColor@colA+3
  1851  0022B2  EC62  F003         	call	_identificarColor	;wreg free
  1852  0022B6  C0DE  F15C         	movff	?_identificarColor,main@grados
  1853  0022BA  C0DF  F15D         	movff	?_identificarColor+1,main@grados+1
  1854  0022BE  C0E0  F15E         	movff	?_identificarColor+2,main@grados+2
  1855  0022C2  C0E1  F15F         	movff	?_identificarColor+3,main@grados+3
  1856                           
  1857                           ;color_3.c: 293: sprintf(value,"%5.3f",grados);
  1858  0022C6  0E75               	movlw	low _value
  1859  0022C8  0100               	movlb	0	; () banked
  1860  0022CA  6FDE               	movwf	sprintf@sp& (0+255),b
  1861  0022CC  0E01               	movlw	high _value
  1862  0022CE  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1863  0022D0  0EAC               	movlw	low STR_2
  1864  0022D2  6FE0               	movwf	sprintf@f& (0+255),b
  1865  0022D4  0E06               	movlw	high STR_2
  1866  0022D6  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1867  0022D8  C15C  F0E2         	movff	main@grados,?_sprintf+4
  1868  0022DC  C15D  F0E3         	movff	main@grados+1,?_sprintf+5
  1869  0022E0  C15E  F0E4         	movff	main@grados+2,?_sprintf+6
  1870  0022E4  C15F  F0E5         	movff	main@grados+3,?_sprintf+7
  1871  0022E8  EC77  F009         	call	_sprintf	;wreg free
  1872                           
  1873                           ;color_3.c: 294: lcd_gotoxy(1,2);
  1874  0022EC  0E02               	movlw	2
  1875  0022EE  6E31               	movwf	lcd_gotoxy@y,c
  1876  0022F0  0E01               	movlw	1
  1877  0022F2  EC79  F020         	call	_lcd_gotoxy
  1878                           
  1879                           ;color_3.c: 295: lcd_msg("Grados= ");
  1880  0022F6  0EA3               	movlw	low STR_11
  1881  0022F8  6E32               	movwf	lcd_msg@c,c
  1882  0022FA  0E06               	movlw	high STR_11
  1883  0022FC  6E33               	movwf	lcd_msg@c+1,c
  1884  0022FE  EC8C  F01F         	call	_lcd_msg	;wreg free
  1885                           
  1886                           ;color_3.c: 296: lcd_msg(value);
  1887  002302  0E75               	movlw	low _value
  1888  002304  6E32               	movwf	lcd_msg@c,c
  1889  002306  0E01               	movlw	high _value
  1890  002308  6E33               	movwf	lcd_msg@c+1,c
  1891  00230A  EC8C  F01F         	call	_lcd_msg	;wreg free
  1892                           
  1893                           ;color_3.c: 297: freq=0.0;
  1894  00230E  0E00               	movlw	0
  1895  002310  0101               	movlb	1	; () banked
  1896  002312  6F71               	movwf	main@freq& (0+255),b
  1897  002314  0E00               	movlw	0
  1898  002316  6F72               	movwf	(main@freq+1)& (0+255),b
  1899  002318  0E00               	movlw	0
  1900  00231A  6F73               	movwf	(main@freq+2)& (0+255),b
  1901  00231C  0E00               	movlw	0
  1902  00231E  6F74               	movwf	(main@freq+3)& (0+255),b
  1903                           
  1904                           ; BSR set to: 1
  1905                           ;color_3.c: 298: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1906  002320  0E1F               	movlw	31
  1907  002322  0100               	movlb	0	; () banked
  1908  002324  6FEF               	movwf	(??_main+1)& (0+255),b
  1909  002326  0E71               	movlw	113
  1910  002328  6FEE               	movwf	??_main& (0+255),b
  1911  00232A  0E1E               	movlw	30
  1912  00232C                     u6827:
  1913  00232C  2EE8               	decfsz	wreg,f,c
  1914  00232E  D7FE               	bra	u6827
  1915  002330  2FEE               	decfsz	??_main& (0+255),f,b
  1916  002332  D7FC               	bra	u6827
  1917  002334  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1918  002336  D7FA               	bra	u6827
  1919  002338  F000               	nop	
  1920                           
  1921                           ;color_3.c: 300: _delay((unsigned long)((1500)*(16000000/4000.0)));
  1922  00233A  0E1F               	movlw	31
  1923  00233C  0100               	movlb	0	; () banked
  1924  00233E  6FEF               	movwf	(??_main+1)& (0+255),b
  1925  002340  0E71               	movlw	113
  1926  002342  6FEE               	movwf	??_main& (0+255),b
  1927  002344  0E1E               	movlw	30
  1928  002346                     u6837:
  1929  002346  2EE8               	decfsz	wreg,f,c
  1930  002348  D7FE               	bra	u6837
  1931  00234A  2FEE               	decfsz	??_main& (0+255),f,b
  1932  00234C  D7FC               	bra	u6837
  1933  00234E  2FEF               	decfsz	(??_main+1)& (0+255),f,b
  1934  002350  D7FA               	bra	u6837
  1935  002352  F000               	nop	
  1936  002354  D4BA               	goto	l154
  1937  002356                     __end_of_main:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           
  1944 ;; *************** function _sprintf *****************
  1945 ;; Defined at:
  1946 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  sp              2   94[BANK0 ] PTR unsigned char 
  1949 ;;		 -> value(8), 
  1950 ;;  f               2   96[BANK0 ] PTR const unsigned char 
  1951 ;;		 -> STR_10(6), STR_8(6), STR_6(6), STR_4(6), 
  1952 ;;		 -> STR_2(6), 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  fval            4   20[BANK1 ] PTR const unsigned char 
  1955 ;;  tmpval          4   14[BANK1 ] struct .
  1956 ;;  val             4    6[BANK1 ] unsigned long 
  1957 ;;  cp              3    0        PTR const unsigned char 
  1958 ;;  prec            2   24[BANK1 ] int 
  1959 ;;  exp             2   18[BANK1 ] int 
  1960 ;;  width           2   12[BANK1 ] int 
  1961 ;;  flag            2   10[BANK1 ] unsigned short 
  1962 ;;  ap              2    4[BANK1 ] PTR void [1]
  1963 ;;		 -> ?_sprintf(2), 
  1964 ;;  len             2    0        unsigned int 
  1965 ;;  c               1   26[BANK1 ] char 
  1966 ;;  d               1    0        unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2   94[BANK0 ] int 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1976 ;;      Params:         0       8       0       0       0       0       0
  1977 ;;      Locals:         0       0      27       0       0       0       0
  1978 ;;      Temps:          0       4       0       0       0       0       0
  1979 ;;      Totals:         0      12      27       0       0       0       0
  1980 ;;Total ram usage:       39 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    4
  1983 ;; This function calls:
  1984 ;;		___awdiv
  1985 ;;		___fladd
  1986 ;;		___flge
  1987 ;;		___flmul
  1988 ;;		___flneg
  1989 ;;		___flsub
  1990 ;;		___fltol
  1991 ;;		___lldiv
  1992 ;;		___llmod
  1993 ;;		___wmul
  1994 ;;		___xxtofl
  1995 ;;		__div_to_l_
  1996 ;;		__tdiv_to_l_
  1997 ;;		_fround
  1998 ;;		_isdigit
  1999 ;;		_scale
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text1
  2006  0012EE                     __ptext1:
  2007                           	opt stack 0
  2008  0012EE                     _sprintf:
  2009                           	opt stack 26
  2010                           
  2011                           ;doprnt.c: 494: va_list ap;
  2012                           ;doprnt.c: 499: signed char c;
  2013                           ;doprnt.c: 501: int width;
  2014                           ;doprnt.c: 504: int prec;
  2015                           ;doprnt.c: 508: unsigned short flag;
  2016                           ;doprnt.c: 515: char d;
  2017                           ;doprnt.c: 516: double fval;
  2018                           ;doprnt.c: 517: int exp;
  2019                           ;doprnt.c: 523: union {
  2020                           ;doprnt.c: 524: unsigned long vd;
  2021                           ;doprnt.c: 525: double integ;
  2022                           ;doprnt.c: 526: } tmpval;
  2023                           ;doprnt.c: 528: unsigned long val;
  2024                           ;doprnt.c: 529: unsigned len;
  2025                           ;doprnt.c: 530: const char * cp;
  2026                           ;doprnt.c: 533: *ap = __va_start();
  2027                           
  2028                           ;incstack = 0
  2029  0012EE  0EE2               	movlw	low (?_sprintf+4)
  2030  0012F0  0101               	movlb	1	; () banked
  2031  0012F2  6F04               	movwf	sprintf@ap& (0+255),b
  2032  0012F4  0E00               	movlw	high (?_sprintf+4)
  2033  0012F6  6F05               	movwf	(sprintf@ap+1)& (0+255),b
  2034                           
  2035                           ;doprnt.c: 536: while(c = *f++) {
  2036  0012F8  EF2A  F00E         	goto	l354
  2037  0012FC                     
  2038                           ; BSR set to: 1
  2039                           ;doprnt.c: 538: if(c != '%')
  2040                           
  2041                           ; BSR set to: 1
  2042  0012FC  0E25               	movlw	37
  2043  0012FE  191A               	xorwf	sprintf@c& (0+255),w,b
  2044  001300  B4D8               	btfsc	status,2,c
  2045  001302  D009               	goto	l283
  2046                           
  2047                           ; BSR set to: 1
  2048                           ;doprnt.c: 540: {
  2049                           ;doprnt.c: 541: ((*sp++ = (c)));
  2050  001304  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2051  001308  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2052  00130C  C11A  FFDF         	movff	sprintf@c,indf2
  2053                           
  2054                           ; BSR set to: 1
  2055  001310  0100               	movlb	0	; () banked
  2056  001312  EF28  F00E         	goto	l5639
  2057  001316                     l283:
  2058                           
  2059                           ;doprnt.c: 543: }
  2060                           ;doprnt.c: 546: width = 0;
  2061                           
  2062                           ; BSR set to: 0
  2063  001316  0E00               	movlw	0
  2064  001318  0101               	movlb	1	; () banked
  2065  00131A  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  2066  00131C  0E00               	movlw	0
  2067  00131E  6F0C               	movwf	sprintf@width& (0+255),b
  2068                           
  2069                           ;doprnt.c: 548: flag = 0;
  2070  001320  0E00               	movlw	0
  2071  001322  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  2072  001324  0E00               	movlw	0
  2073  001326  6F0A               	movwf	sprintf@flag& (0+255),b
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2077  001328  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2078  00132C  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2079  001330                     	if	0	;tblptru may be non-zero
  2080  001330                     	endif
  2081  001330                     	if	0	;tblptru may be non-zero
  2082  001330                     	endif
  2083  001330  0008               	tblrd		*
  2084  001332  50F5               	movf	tablat,w,c
  2085  001334  ECEB  F020         	call	_isdigit
  2086  001338  A0D8               	btfss	status,0,c
  2087  00133A  D038               	goto	u6080
  2088                           
  2089                           ;doprnt.c: 598: width = 0;
  2090  00133C  0E00               	movlw	0
  2091  00133E  0101               	movlb	1	; () banked
  2092  001340  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  2093  001342  0E00               	movlw	0
  2094  001344  6F0C               	movwf	sprintf@width& (0+255),b
  2095  001346                     
  2096                           ;doprnt.c: 600: width *= 10;
  2097                           
  2098                           ; BSR set to: 1
  2099  001346  C10C  F02E         	movff	sprintf@width,___wmul@multiplier
  2100  00134A  C10D  F02F         	movff	sprintf@width+1,___wmul@multiplier+1
  2101  00134E  0E00               	movlw	0
  2102  001350  6E31               	movwf	___wmul@multiplicand+1,c
  2103  001352  0E0A               	movlw	10
  2104  001354  6E30               	movwf	___wmul@multiplicand,c
  2105  001356  ECD8  F020         	call	___wmul	;wreg free
  2106  00135A  C02E  F10C         	movff	?___wmul,sprintf@width
  2107  00135E  C02F  F10D         	movff	?___wmul+1,sprintf@width+1
  2108                           
  2109                           ;doprnt.c: 601: width += *f++ - '0';
  2110  001362  0ED0               	movlw	208
  2111  001364  0100               	movlb	0	; () banked
  2112  001366  6FE6               	movwf	??_sprintf& (0+255),b
  2113  001368  0EFF               	movlw	255
  2114  00136A  6FE7               	movwf	(??_sprintf+1)& (0+255),b
  2115  00136C  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2116  001370  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2117  001374                     	if	0	;tblptru may be non-zero
  2118  001374                     	endif
  2119  001374                     	if	0	;tblptru may be non-zero
  2120  001374                     	endif
  2121  001374  0008               	tblrd		*
  2122  001376  50F5               	movf	tablat,w,c
  2123  001378  6FE8               	movwf	(??_sprintf+2)& (0+255),b
  2124  00137A  6BE9               	clrf	(??_sprintf+3)& (0+255),b
  2125  00137C  51E6               	movf	??_sprintf& (0+255),w,b
  2126  00137E  27E8               	addwf	(??_sprintf+2)& (0+255),f,b
  2127  001380  51E7               	movf	(??_sprintf+1)& (0+255),w,b
  2128  001382  23E9               	addwfc	(??_sprintf+3)& (0+255),f,b
  2129  001384  51E8               	movf	(??_sprintf+2)& (0+255),w,b
  2130  001386  0101               	movlb	1	; () banked
  2131  001388  270C               	addwf	sprintf@width& (0+255),f,b
  2132  00138A  0100               	movlb	0	; () banked
  2133  00138C  51E9               	movf	(??_sprintf+3)& (0+255),w,b
  2134  00138E  0101               	movlb	1	; () banked
  2135  001390  230D               	addwfc	(sprintf@width+1)& (0+255),f,b
  2136                           
  2137                           ; BSR set to: 1
  2138  001392  0100               	movlb	0	; () banked
  2139  001394  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2140  001396  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2144  001398  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2145  00139C  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2146  0013A0                     	if	0	;tblptru may be non-zero
  2147  0013A0                     	endif
  2148  0013A0                     	if	0	;tblptru may be non-zero
  2149  0013A0                     	endif
  2150  0013A0  0008               	tblrd		*
  2151  0013A2  50F5               	movf	tablat,w,c
  2152  0013A4  ECEB  F020         	call	_isdigit
  2153  0013A8  B0D8               	btfsc	status,0,c
  2154  0013AA  D7CD               	goto	l285
  2155  0013AC                     u6080:
  2156                           
  2157                           ;doprnt.c: 608: }
  2158                           ;doprnt.c: 611: if(*f == '.') {
  2159  0013AC  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2160  0013B0  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2161  0013B4                     	if	0	;tblptru may be non-zero
  2162  0013B4                     	endif
  2163  0013B4                     	if	0	;tblptru may be non-zero
  2164  0013B4                     	endif
  2165  0013B4  0008               	tblrd		*
  2166  0013B6  50F5               	movf	tablat,w,c
  2167  0013B8  0A2E               	xorlw	46
  2168  0013BA  A4D8               	btfss	status,2,c
  2169  0013BC  D033               	goto	l287
  2170                           
  2171                           ;doprnt.c: 612: flag |= 0x4000;
  2172  0013BE  0101               	movlb	1	; () banked
  2173  0013C0  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  2174                           
  2175                           ;doprnt.c: 613: f++;
  2176  0013C2  0100               	movlb	0	; () banked
  2177  0013C4  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2178  0013C6  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;doprnt.c: 620: {
  2182                           ;doprnt.c: 621: prec = 0;
  2183  0013C8  0E00               	movlw	0
  2184  0013CA  0101               	movlb	1	; () banked
  2185  0013CC  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2186  0013CE  0E00               	movlw	0
  2187  0013D0  6F18               	movwf	sprintf@prec& (0+255),b
  2188                           
  2189                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2190  0013D2  D01D               	goto	l288
  2191  0013D4                     
  2192                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2193                           
  2194                           ; BSR set to: 1
  2195  0013D4  C118  F02E         	movff	sprintf@prec,___wmul@multiplier
  2196  0013D8  C119  F02F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2197  0013DC  0E00               	movlw	0
  2198  0013DE  6E31               	movwf	___wmul@multiplicand+1,c
  2199  0013E0  0E0A               	movlw	10
  2200  0013E2  6E30               	movwf	___wmul@multiplicand,c
  2201  0013E4  ECD8  F020         	call	___wmul	;wreg free
  2202  0013E8  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2203  0013EC  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2204  0013F0                     	if	0	;tblptru may be non-zero
  2205  0013F0                     	endif
  2206  0013F0                     	if	0	;tblptru may be non-zero
  2207  0013F0                     	endif
  2208  0013F0  0008               	tblrd		*
  2209  0013F2  50F5               	movf	tablat,w,c
  2210  0013F4  262E               	addwf	?___wmul,f,c
  2211  0013F6  0E00               	movlw	0
  2212  0013F8  222F               	addwfc	?___wmul+1,f,c
  2213  0013FA  0ED0               	movlw	208
  2214  0013FC  242E               	addwf	?___wmul,w,c
  2215  0013FE  0101               	movlb	1	; () banked
  2216  001400  6F18               	movwf	sprintf@prec& (0+255),b
  2217  001402  0EFF               	movlw	255
  2218  001404  202F               	addwfc	?___wmul+1,w,c
  2219  001406  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2220                           
  2221                           ; BSR set to: 1
  2222  001408  0100               	movlb	0	; () banked
  2223  00140A  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2224  00140C  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2225  00140E                     l288:
  2226                           
  2227                           ; BSR set to: 0
  2228  00140E  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2229  001412  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2230  001416                     	if	0	;tblptru may be non-zero
  2231  001416                     	endif
  2232  001416                     	if	0	;tblptru may be non-zero
  2233  001416                     	endif
  2234  001416  0008               	tblrd		*
  2235  001418  50F5               	movf	tablat,w,c
  2236  00141A  ECEB  F020         	call	_isdigit
  2237  00141E  A0D8               	btfss	status,0,c
  2238  001420  D00A               	goto	l292
  2239  001422  D7D8               	goto	l289
  2240  001424                     l287:
  2241                           
  2242                           ;doprnt.c: 626: prec = 0;
  2243  001424  0E00               	movlw	0
  2244  001426  0101               	movlb	1	; () banked
  2245  001428  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2246  00142A  0E00               	movlw	0
  2247  00142C  6F18               	movwf	sprintf@prec& (0+255),b
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;doprnt.c: 628: flag |= 0x1000;
  2251  00142E  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  2252                           
  2253                           ; BSR set to: 1
  2254                           ;doprnt.c: 630: }
  2255                           ;doprnt.c: 635: switch(c = *f++) {
  2256  001430  D002               	goto	l292
  2257  001432                     
  2258                           ; BSR set to: 1
  2259                           ;doprnt.c: 663: flag |= 0x400;
  2260                           
  2261                           ; BSR set to: 1
  2262  001432  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  2263                           
  2264                           ;doprnt.c: 664: break;
  2265  001434  D014               	goto	l296
  2266  001436                     l292:
  2267                           
  2268                           ; BSR set to: 1
  2269  001436  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2270  00143A  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2271  00143E  0100               	movlb	0	; () banked
  2272  001440  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2273  001442  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2274  001444                     	if	0	;tblptru may be non-zero
  2275  001444                     	endif
  2276  001444                     	if	0	;tblptru may be non-zero
  2277  001444                     	endif
  2278  001444  0008               	tblrd		*
  2279  001446  CFF5 F11A          	movff	tablat,sprintf@c
  2280  00144A  0101               	movlb	1	; () banked
  2281  00144C  511A               	movf	sprintf@c& (0+255),w,b
  2282                           
  2283                           ; Switch size 1, requested type "space"
  2284                           ; Number of cases is 2, Range of values is 0 to 102
  2285                           ; switch strategies available:
  2286                           ; Name         Instructions Cycles
  2287                           ; simple_byte            7     4 (average)
  2288                           ;	Chosen strategy is simple_byte
  2289  00144E  0A00               	xorlw	0	; case 0
  2290  001450  B4D8               	btfsc	status,2,c
  2291  001452  EF39  F00E         	goto	u6490
  2292  001456  0A66               	xorlw	102	; case 102
  2293  001458  B4D8               	btfsc	status,2,c
  2294  00145A  D7EB               	goto	l295
  2295  00145C  D3FB               	goto	l354
  2296  00145E                     l296:
  2297                           
  2298                           ; BSR set to: 1
  2299                           ;doprnt.c: 825: if(flag & (0x700)) {
  2300                           
  2301                           ; BSR set to: 1
  2302  00145E  0E07               	movlw	7
  2303  001460  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2304  001462  B4D8               	btfsc	status,2,c
  2305  001464  D34F               	goto	l298
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;doprnt.c: 827: if(flag & 0x1000)
  2309  001466  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  2310  001468  D004               	goto	l299
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;doprnt.c: 829: prec = 6;
  2314  00146A  0E00               	movlw	0
  2315  00146C  6F19               	movwf	(sprintf@prec+1)& (0+255),b
  2316  00146E  0E06               	movlw	6
  2317  001470  6F18               	movwf	sprintf@prec& (0+255),b
  2318  001472                     l299:
  2319                           
  2320                           ; BSR set to: 1
  2321                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2322                           
  2323                           ; BSR set to: 1
  2324  001472  C104  FFD9         	movff	sprintf@ap,fsr2l
  2325  001476  C105  FFDA         	movff	sprintf@ap+1,fsr2h
  2326  00147A  CFDE F114          	movff	postinc2,sprintf@fval
  2327  00147E  CFDE F115          	movff	postinc2,sprintf@fval+1
  2328  001482  CFDE F116          	movff	postinc2,sprintf@fval+2
  2329  001486  CFDE F117          	movff	postinc2,sprintf@fval+3
  2330                           
  2331                           ; BSR set to: 1
  2332  00148A  0E04               	movlw	4
  2333  00148C  2704               	addwf	sprintf@ap& (0+255),f,b
  2334  00148E  0E00               	movlw	0
  2335  001490  2305               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2336                           
  2337                           ; BSR set to: 1
  2338                           ;doprnt.c: 831: if(fval < 0.0) {
  2339  001492  AF17               	btfss	(sprintf@fval+3)& (0+255),7,b
  2340  001494  D015               	goto	l300
  2341                           
  2342                           ; BSR set to: 1
  2343                           ;doprnt.c: 832: fval = -fval;
  2344  001496  C114  F02E         	movff	sprintf@fval,___flneg@f1
  2345  00149A  C115  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  2346  00149E  C116  F030         	movff	sprintf@fval+2,___flneg@f1+2
  2347  0014A2  C117  F031         	movff	sprintf@fval+3,___flneg@f1+3
  2348  0014A6  ECAB  F020         	call	___flneg	;wreg free
  2349  0014AA  C02E  F114         	movff	?___flneg,sprintf@fval
  2350  0014AE  C02F  F115         	movff	?___flneg+1,sprintf@fval+1
  2351  0014B2  C030  F116         	movff	?___flneg+2,sprintf@fval+2
  2352  0014B6  C031  F117         	movff	?___flneg+3,sprintf@fval+3
  2353                           
  2354                           ;doprnt.c: 833: flag |= 0x03;
  2355  0014BA  0E03               	movlw	3
  2356  0014BC  0101               	movlb	1	; () banked
  2357  0014BE  130A               	iorwf	sprintf@flag& (0+255),f,b
  2358  0014C0                     l300:
  2359                           
  2360                           ; BSR set to: 1
  2361                           ;doprnt.c: 834: }
  2362                           ;doprnt.c: 835: exp = 0;
  2363                           
  2364                           ; BSR set to: 1
  2365  0014C0  0E00               	movlw	0
  2366  0014C2  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2367  0014C4  0E00               	movlw	0
  2368  0014C6  6F12               	movwf	sprintf@exp& (0+255),b
  2369                           
  2370                           ; BSR set to: 1
  2371                           ;doprnt.c: 836: if( fval!=0) {
  2372  0014C8  5114               	movf	sprintf@fval& (0+255),w,b
  2373  0014CA  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2374  0014CC  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2375  0014CE  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2376  0014D0  B4D8               	btfsc	status,2,c
  2377  0014D2  D086               	goto	l305
  2378                           
  2379                           ; BSR set to: 1
  2380                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2381  0014D4  3516               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2382  0014D6  3517               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2383  0014D8  0F82               	addlw	130
  2384  0014DA  6F12               	movwf	sprintf@exp& (0+255),b
  2385  0014DC  6B13               	clrf	(sprintf@exp+1)& (0+255),b
  2386  0014DE  0EFF               	movlw	255
  2387  0014E0  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2388                           
  2389                           ; BSR set to: 1
  2390                           ;doprnt.c: 838: exp--;
  2391  0014E2  0712               	decf	sprintf@exp& (0+255),f,b
  2392  0014E4  A0D8               	btfss	status,0,c
  2393  0014E6  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2394                           
  2395                           ; BSR set to: 1
  2396                           ;doprnt.c: 839: exp *= 3;
  2397  0014E8  C112  F02E         	movff	sprintf@exp,___wmul@multiplier
  2398  0014EC  C113  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2399  0014F0  0E00               	movlw	0
  2400  0014F2  6E31               	movwf	___wmul@multiplicand+1,c
  2401  0014F4  0E03               	movlw	3
  2402  0014F6  6E30               	movwf	___wmul@multiplicand,c
  2403  0014F8  ECD8  F020         	call	___wmul	;wreg free
  2404  0014FC  C02E  F112         	movff	?___wmul,sprintf@exp
  2405  001500  C02F  F113         	movff	?___wmul+1,sprintf@exp+1
  2406                           
  2407                           ;doprnt.c: 840: exp /= 10;
  2408  001504  C112  F034         	movff	sprintf@exp,___awdiv@dividend
  2409  001508  C113  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  2410  00150C  0E00               	movlw	0
  2411  00150E  6E37               	movwf	___awdiv@divisor+1,c
  2412  001510  0E0A               	movlw	10
  2413  001512  6E36               	movwf	___awdiv@divisor,c
  2414  001514  EC9E  F01E         	call	___awdiv	;wreg free
  2415  001518  C034  F112         	movff	?___awdiv,sprintf@exp
  2416  00151C  C035  F113         	movff	?___awdiv+1,sprintf@exp+1
  2417                           
  2418                           ;doprnt.c: 841: if(exp < 0)
  2419  001520  0101               	movlb	1	; () banked
  2420  001522  AF13               	btfss	(sprintf@exp+1)& (0+255),7,b
  2421  001524  D003               	goto	l302
  2422                           
  2423                           ; BSR set to: 1
  2424                           ;doprnt.c: 842: exp--;
  2425  001526  0712               	decf	sprintf@exp& (0+255),f,b
  2426  001528  A0D8               	btfss	status,0,c
  2427  00152A  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2428  00152C                     l302:
  2429                           
  2430                           ; BSR set to: 1
  2431                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2432                           
  2433                           ; BSR set to: 1
  2434  00152C  5112               	movf	sprintf@exp& (0+255),w,b
  2435  00152E  0800               	sublw	0
  2436  001530  ECAB  F011         	call	_scale
  2437  001534  C091  F10E         	movff	?_scale,sprintf@tmpval
  2438  001538  C092  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2439  00153C  C093  F110         	movff	?_scale+2,sprintf@tmpval+2
  2440  001540  C094  F111         	movff	?_scale+3,sprintf@tmpval+3
  2441                           
  2442                           ;doprnt.c: 847: tmpval.integ *= fval;
  2443  001544  C10E  F03C         	movff	sprintf@tmpval,___flmul@b
  2444  001548  C10F  F03D         	movff	sprintf@tmpval+1,___flmul@b+1
  2445  00154C  C110  F03E         	movff	sprintf@tmpval+2,___flmul@b+2
  2446  001550  C111  F03F         	movff	sprintf@tmpval+3,___flmul@b+3
  2447  001554  C114  F040         	movff	sprintf@fval,___flmul@a
  2448  001558  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  2449  00155C  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  2450  001560  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  2451  001564  ECD3  F013         	call	___flmul	;wreg free
  2452  001568  C03C  F10E         	movff	?___flmul,sprintf@tmpval
  2453  00156C  C03D  F10F         	movff	?___flmul+1,sprintf@tmpval+1
  2454  001570  C03E  F110         	movff	?___flmul+2,sprintf@tmpval+2
  2455  001574  C03F  F111         	movff	?___flmul+3,sprintf@tmpval+3
  2456                           
  2457                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2458  001578  C10E  F0D2         	movff	sprintf@tmpval,___flge@ff1
  2459  00157C  C10F  F0D3         	movff	sprintf@tmpval+1,___flge@ff1+1
  2460  001580  C110  F0D4         	movff	sprintf@tmpval+2,___flge@ff1+2
  2461  001584  C111  F0D5         	movff	sprintf@tmpval+3,___flge@ff1+3
  2462  001588  0E00               	movlw	0
  2463  00158A  0100               	movlb	0	; () banked
  2464  00158C  6FD6               	movwf	___flge@ff2& (0+255),b
  2465  00158E  0E00               	movlw	0
  2466  001590  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  2467  001592  0E80               	movlw	128
  2468  001594  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  2469  001596  0E3F               	movlw	63
  2470  001598  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  2471  00159A  EC26  F01C         	call	___flge	;wreg free
  2472  00159E  0100               	movlb	0	; () banked
  2473  0015A0  B0D8               	btfsc	status,0,c
  2474  0015A2  D005               	goto	l303
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;doprnt.c: 849: exp--;
  2478  0015A4  0101               	movlb	1	; () banked
  2479  0015A6  0712               	decf	sprintf@exp& (0+255),f,b
  2480  0015A8  A0D8               	btfss	status,0,c
  2481  0015AA  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2482  0015AC  D019               	goto	l305
  2483  0015AE                     l303:
  2484                           
  2485                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2486                           
  2487                           ; BSR set to: 1
  2488  0015AE  C10E  F0D2         	movff	sprintf@tmpval,___flge@ff1
  2489  0015B2  C10F  F0D3         	movff	sprintf@tmpval+1,___flge@ff1+1
  2490  0015B6  C110  F0D4         	movff	sprintf@tmpval+2,___flge@ff1+2
  2491  0015BA  C111  F0D5         	movff	sprintf@tmpval+3,___flge@ff1+3
  2492  0015BE  0E00               	movlw	0
  2493  0015C0  0100               	movlb	0	; () banked
  2494  0015C2  6FD6               	movwf	___flge@ff2& (0+255),b
  2495  0015C4  0E00               	movlw	0
  2496  0015C6  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  2497  0015C8  0E20               	movlw	32
  2498  0015CA  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  2499  0015CC  0E41               	movlw	65
  2500  0015CE  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  2501  0015D0  EC26  F01C         	call	___flge	;wreg free
  2502  0015D4  0100               	movlb	0	; () banked
  2503  0015D6  A0D8               	btfss	status,0,c
  2504  0015D8  D003               	goto	l305
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 851: exp++;
  2508  0015DA  0101               	movlb	1	; () banked
  2509  0015DC  4B12               	infsnz	sprintf@exp& (0+255),f,b
  2510  0015DE  2B13               	incf	(sprintf@exp+1)& (0+255),f,b
  2511  0015E0                     l305:
  2512                           
  2513                           ;doprnt.c: 852: }
  2514                           ;doprnt.c: 1112: if(prec <= 12)
  2515                           
  2516                           ; BSR set to: 1
  2517                           
  2518                           ; BSR set to: 1
  2519                           
  2520                           ; BSR set to: 1
  2521  0015E0  0101               	movlb	1	; () banked
  2522  0015E2  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2523  0015E4  D006               	goto	u6180
  2524  0015E6  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2525  0015E8  E121               	bnz	l5477
  2526  0015EA  0E0D               	movlw	13
  2527  0015EC  5D18               	subwf	sprintf@prec& (0+255),w,b
  2528  0015EE  B0D8               	btfsc	status,0,c
  2529  0015F0  D01D               	goto	l306
  2530  0015F2                     u6180:
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;doprnt.c: 1113: fval += fround(prec);
  2534  0015F2  C114  F0BE         	movff	sprintf@fval,___fladd@b
  2535  0015F6  C115  F0BF         	movff	sprintf@fval+1,___fladd@b+1
  2536  0015FA  C116  F0C0         	movff	sprintf@fval+2,___fladd@b+2
  2537  0015FE  C117  F0C1         	movff	sprintf@fval+3,___fladd@b+3
  2538  001602  5118               	movf	sprintf@prec& (0+255),w,b
  2539  001604  EC76  F018         	call	_fround
  2540  001608  C091  F0C2         	movff	?_fround,___fladd@a
  2541  00160C  C092  F0C3         	movff	?_fround+1,___fladd@a+1
  2542  001610  C093  F0C4         	movff	?_fround+2,___fladd@a+2
  2543  001614  C094  F0C5         	movff	?_fround+3,___fladd@a+3
  2544  001618  EC7C  F015         	call	___fladd	;wreg free
  2545  00161C  C0BE  F114         	movff	?___fladd,sprintf@fval
  2546  001620  C0BF  F115         	movff	?___fladd+1,sprintf@fval+1
  2547  001624  C0C0  F116         	movff	?___fladd+2,sprintf@fval+2
  2548  001628  C0C1  F117         	movff	?___fladd+3,sprintf@fval+3
  2549  00162C                     l306:
  2550  00162C                     l5477:
  2551                           
  2552                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2553  00162C  0101               	movlb	1	; () banked
  2554  00162E  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2555  001630  D006               	goto	u6190
  2556  001632  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2557  001634  E124               	bnz	l5485
  2558  001636  0E0A               	movlw	10
  2559  001638  5D12               	subwf	sprintf@exp& (0+255),w,b
  2560  00163A  B0D8               	btfsc	status,0,c
  2561  00163C  D020               	goto	u6220
  2562  00163E                     u6190:
  2563                           
  2564                           ; BSR set to: 1
  2565  00163E  5114               	movf	sprintf@fval& (0+255),w,b
  2566  001640  1115               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2567  001642  1116               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2568  001644  1117               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2569  001646  B4D8               	btfsc	status,2,c
  2570  001648  D067               	goto	l307
  2571                           
  2572                           ; BSR set to: 1
  2573  00164A  C114  F09A         	movff	sprintf@fval,___fltol@f1
  2574  00164E  C115  F09B         	movff	sprintf@fval+1,___fltol@f1+1
  2575  001652  C116  F09C         	movff	sprintf@fval+2,___fltol@f1+2
  2576  001656  C117  F09D         	movff	sprintf@fval+3,___fltol@f1+3
  2577  00165A  ECD0  F01D         	call	___fltol	;wreg free
  2578  00165E  0100               	movlb	0	; () banked
  2579  001660  519A               	movf	?___fltol& (0+255),w,b
  2580  001662  119B               	iorwf	(?___fltol+1)& (0+255),w,b
  2581  001664  119C               	iorwf	(?___fltol+2)& (0+255),w,b
  2582  001666  119D               	iorwf	(?___fltol+3)& (0+255),w,b
  2583  001668  A4D8               	btfss	status,2,c
  2584  00166A  D056               	goto	l307
  2585                           
  2586                           ; BSR set to: 0
  2587  00166C  0101               	movlb	1	; () banked
  2588  00166E  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2589  001670  D053               	goto	l307
  2590  001672  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2591  001674  E104               	bnz	l5485
  2592  001676  0E02               	movlw	2
  2593  001678  5D12               	subwf	sprintf@exp& (0+255),w,b
  2594  00167A  A0D8               	btfss	status,0,c
  2595  00167C  D04D               	goto	l307
  2596  00167E                     u6220:
  2597  00167E                     l5485:
  2598                           
  2599                           ; BSR set to: 1
  2600                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2601  00167E  C10E  F0D2         	movff	sprintf@tmpval,___flge@ff1
  2602  001682  C10F  F0D3         	movff	sprintf@tmpval+1,___flge@ff1+1
  2603  001686  C110  F0D4         	movff	sprintf@tmpval+2,___flge@ff1+2
  2604  00168A  C111  F0D5         	movff	sprintf@tmpval+3,___flge@ff1+3
  2605  00168E  0E5F               	movlw	95
  2606  001690  0100               	movlb	0	; () banked
  2607  001692  6FD6               	movwf	___flge@ff2& (0+255),b
  2608  001694  0E70               	movlw	112
  2609  001696  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  2610  001698  0E89               	movlw	137
  2611  00169A  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  2612  00169C  0E40               	movlw	64
  2613  00169E  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  2614  0016A0  EC26  F01C         	call	___flge	;wreg free
  2615  0016A4  0100               	movlb	0	; () banked
  2616  0016A6  B0D8               	btfsc	status,0,c
  2617  0016A8  D003               	goto	l310
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2621  0016AA  0101               	movlb	1	; () banked
  2622  0016AC  0EF7               	movlw	247
  2623  0016AE  D002               	goto	L1
  2624  0016B0                     l310:
  2625                           
  2626                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2627                           
  2628                           ; BSR set to: 1
  2629  0016B0  0101               	movlb	1	; () banked
  2630  0016B2  0EF8               	movlw	248
  2631  0016B4                     L1:
  2632  0016B4  2712               	addwf	sprintf@exp& (0+255),f,b
  2633  0016B6  0EFF               	movlw	255
  2634  0016B8  2313               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2635                           
  2636                           ; BSR set to: 1
  2637                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2638                           
  2639                           ; BSR set to: 1
  2640  0016BA  5112               	movf	sprintf@exp& (0+255),w,b
  2641  0016BC  ECAB  F011         	call	_scale
  2642  0016C0  C091  F10E         	movff	?_scale,sprintf@tmpval
  2643  0016C4  C092  F10F         	movff	?_scale+1,sprintf@tmpval+1
  2644  0016C8  C093  F110         	movff	?_scale+2,sprintf@tmpval+2
  2645  0016CC  C094  F111         	movff	?_scale+3,sprintf@tmpval+3
  2646  0016D0  C114  F02E         	movff	sprintf@fval,__div_to_l_@f1
  2647  0016D4  C115  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2648  0016D8  C116  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2649  0016DC  C117  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2650  0016E0  C10E  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  2651  0016E4  C10F  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2652  0016E8  C110  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2653  0016EC  C111  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2654  0016F0  EC00  F01B         	call	__div_to_l_	;wreg free
  2655  0016F4  C02E  F106         	movff	?__div_to_l_,sprintf@val
  2656  0016F8  C02F  F107         	movff	?__div_to_l_+1,sprintf@val+1
  2657  0016FC  C030  F108         	movff	?__div_to_l_+2,sprintf@val+2
  2658  001700  C031  F109         	movff	?__div_to_l_+3,sprintf@val+3
  2659                           
  2660                           ;doprnt.c: 1129: fval = 0.0;
  2661  001704  0E00               	movlw	0
  2662  001706  0101               	movlb	1	; () banked
  2663  001708  6F14               	movwf	sprintf@fval& (0+255),b
  2664  00170A  0E00               	movlw	0
  2665  00170C  6F15               	movwf	(sprintf@fval+1)& (0+255),b
  2666  00170E  0E00               	movlw	0
  2667  001710  6F16               	movwf	(sprintf@fval+2)& (0+255),b
  2668  001712  0E00               	movlw	0
  2669  001714  6F17               	movwf	(sprintf@fval+3)& (0+255),b
  2670                           
  2671                           ;doprnt.c: 1130: } else {
  2672  001716  D03C               	goto	l316
  2673  001718                     l307:
  2674                           
  2675                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2676                           
  2677                           ; BSR set to: 1
  2678  001718  C114  F09A         	movff	sprintf@fval,___fltol@f1
  2679  00171C  C115  F09B         	movff	sprintf@fval+1,___fltol@f1+1
  2680  001720  C116  F09C         	movff	sprintf@fval+2,___fltol@f1+2
  2681  001724  C117  F09D         	movff	sprintf@fval+3,___fltol@f1+3
  2682  001728  ECD0  F01D         	call	___fltol	;wreg free
  2683  00172C  C09A  F106         	movff	?___fltol,sprintf@val
  2684  001730  C09B  F107         	movff	?___fltol+1,sprintf@val+1
  2685  001734  C09C  F108         	movff	?___fltol+2,sprintf@val+2
  2686  001738  C09D  F109         	movff	?___fltol+3,sprintf@val+3
  2687                           
  2688                           ;doprnt.c: 1132: fval -= (double)val;
  2689  00173C  C114  F0D2         	movff	sprintf@fval,___flsub@b
  2690  001740  C115  F0D3         	movff	sprintf@fval+1,___flsub@b+1
  2691  001744  C116  F0D4         	movff	sprintf@fval+2,___flsub@b+2
  2692  001748  C117  F0D5         	movff	sprintf@fval+3,___flsub@b+3
  2693  00174C  C106  F02E         	movff	sprintf@val,___xxtofl@val
  2694  001750  C107  F02F         	movff	sprintf@val+1,___xxtofl@val+1
  2695  001754  C108  F030         	movff	sprintf@val+2,___xxtofl@val+2
  2696  001758  C109  F031         	movff	sprintf@val+3,___xxtofl@val+3
  2697  00175C  0E00               	movlw	0
  2698  00175E  ECBF  F019         	call	___xxtofl
  2699  001762  C02E  F0D6         	movff	?___xxtofl,___flsub@a
  2700  001766  C02F  F0D7         	movff	?___xxtofl+1,___flsub@a+1
  2701  00176A  C030  F0D8         	movff	?___xxtofl+2,___flsub@a+2
  2702  00176E  C031  F0D9         	movff	?___xxtofl+3,___flsub@a+3
  2703  001772  ECDA  F01F         	call	___flsub	;wreg free
  2704  001776  C0D2  F114         	movff	?___flsub,sprintf@fval
  2705  00177A  C0D3  F115         	movff	?___flsub+1,sprintf@fval+1
  2706  00177E  C0D4  F116         	movff	?___flsub+2,sprintf@fval+2
  2707  001782  C0D5  F117         	movff	?___flsub+3,sprintf@fval+3
  2708                           
  2709                           ;doprnt.c: 1133: exp = 0;
  2710  001786  0E00               	movlw	0
  2711  001788  0101               	movlb	1	; () banked
  2712  00178A  6F13               	movwf	(sprintf@exp+1)& (0+255),b
  2713  00178C  0E00               	movlw	0
  2714  00178E  6F12               	movwf	sprintf@exp& (0+255),b
  2715  001790                     l316:
  2716                           
  2717                           ; BSR set to: 1
  2718                           ;doprnt.c: 1134: }
  2719                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2720                           
  2721                           ; BSR set to: 1
  2722  001790  0E01               	movlw	1
  2723  001792  6F1A               	movwf	sprintf@c& (0+255),b
  2724  001794                     l5505:
  2725                           
  2726                           ; BSR set to: 1
  2727  001794  0E0A               	movlw	10
  2728  001796  191A               	xorwf	sprintf@c& (0+255),w,b
  2729  001798  B4D8               	btfsc	status,2,c
  2730  00179A  D018               	goto	u6260
  2731                           
  2732                           ; BSR set to: 1
  2733                           ;doprnt.c: 1137: if(val < dpowers[c])
  2734                           
  2735                           ; BSR set to: 1
  2736                           
  2737                           ; BSR set to: 1
  2738  00179C  511A               	movf	sprintf@c& (0+255),w,b
  2739  00179E  0D04               	mullw	4
  2740  0017A0  0E69               	movlw	low _dpowers
  2741  0017A2  24F3               	addwf	prodl,w,c
  2742  0017A4  6EF6               	movwf	tblptrl,c
  2743  0017A6  0E06               	movlw	high _dpowers
  2744  0017A8  20F4               	addwfc	prodh,w,c
  2745  0017AA  6EF7               	movwf	tblptrh,c
  2746  0017AC                     	if	0	;There are less than 3 active tblptr bytes
  2747  0017AC                     	endif
  2748  0017AC  0009               	tblrd		*+
  2749  0017AE  50F5               	movf	tablat,w,c
  2750  0017B0  5D06               	subwf	sprintf@val& (0+255),w,b
  2751  0017B2  0009               	tblrd		*+
  2752  0017B4  50F5               	movf	tablat,w,c
  2753  0017B6  5907               	subwfb	(sprintf@val+1)& (0+255),w,b
  2754  0017B8  0009               	tblrd		*+
  2755  0017BA  50F5               	movf	tablat,w,c
  2756  0017BC  5908               	subwfb	(sprintf@val+2)& (0+255),w,b
  2757  0017BE  0009               	tblrd		*+
  2758  0017C0  50F5               	movf	tablat,w,c
  2759  0017C2  5909               	subwfb	(sprintf@val+3)& (0+255),w,b
  2760  0017C4  A0D8               	btfss	status,0,c
  2761  0017C6  D002               	goto	u6260
  2762                           
  2763                           ; BSR set to: 1
  2764                           
  2765                           ; BSR set to: 1
  2766                           
  2767                           ; BSR set to: 1
  2768                           ;doprnt.c: 1138: break;
  2769  0017C8  2B1A               	incf	sprintf@c& (0+255),f,b
  2770  0017CA  D7E4               	goto	l5505
  2771  0017CC                     u6260:
  2772                           
  2773                           ; BSR set to: 1
  2774                           ;doprnt.c: 1142: width -= prec + c + exp;
  2775                           
  2776                           ; BSR set to: 1
  2777  0017CC  C11A  F0E6         	movff	sprintf@c,??_sprintf
  2778  0017D0  0100               	movlb	0	; () banked
  2779  0017D2  6BE7               	clrf	(??_sprintf+1)& (0+255),b
  2780  0017D4  BFE6               	btfsc	??_sprintf& (0+255),7,b
  2781  0017D6  07E7               	decf	(??_sprintf+1)& (0+255),f,b
  2782  0017D8  0101               	movlb	1	; () banked
  2783  0017DA  5118               	movf	sprintf@prec& (0+255),w,b
  2784  0017DC  0100               	movlb	0	; () banked
  2785  0017DE  27E6               	addwf	??_sprintf& (0+255),f,b
  2786  0017E0  0101               	movlb	1	; () banked
  2787  0017E2  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  2788  0017E4  0100               	movlb	0	; () banked
  2789  0017E6  23E7               	addwfc	(??_sprintf+1)& (0+255),f,b
  2790  0017E8  0101               	movlb	1	; () banked
  2791  0017EA  5112               	movf	sprintf@exp& (0+255),w,b
  2792  0017EC  0100               	movlb	0	; () banked
  2793  0017EE  27E6               	addwf	??_sprintf& (0+255),f,b
  2794  0017F0  0101               	movlb	1	; () banked
  2795  0017F2  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  2796  0017F4  0100               	movlb	0	; () banked
  2797  0017F6  23E7               	addwfc	(??_sprintf+1)& (0+255),f,b
  2798  0017F8  51E6               	movf	??_sprintf& (0+255),w,b
  2799  0017FA  0101               	movlb	1	; () banked
  2800  0017FC  5F0C               	subwf	sprintf@width& (0+255),f,b
  2801  0017FE  0100               	movlb	0	; () banked
  2802  001800  51E7               	movf	(??_sprintf+1)& (0+255),w,b
  2803  001802  0101               	movlb	1	; () banked
  2804  001804  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  2805                           
  2806                           ;doprnt.c: 1143: if(
  2807                           ;doprnt.c: 1147: prec)
  2808  001806  5118               	movf	sprintf@prec& (0+255),w,b
  2809  001808  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2810  00180A  B4D8               	btfsc	status,2,c
  2811  00180C  D003               	goto	l320
  2812                           
  2813                           ; BSR set to: 1
  2814                           ;doprnt.c: 1148: width--;
  2815  00180E  070C               	decf	sprintf@width& (0+255),f,b
  2816  001810  A0D8               	btfss	status,0,c
  2817  001812  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2818  001814                     l320:
  2819                           
  2820                           ; BSR set to: 1
  2821                           ;doprnt.c: 1149: if(flag & 0x03)
  2822                           
  2823                           ; BSR set to: 1
  2824  001814  0E03               	movlw	3
  2825  001816  150A               	andwf	sprintf@flag& (0+255),w,b
  2826  001818  0100               	movlb	0	; () banked
  2827  00181A  6FE6               	movwf	??_sprintf& (0+255),b
  2828  00181C  0E00               	movlw	0
  2829  00181E  0101               	movlb	1	; () banked
  2830  001820  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2831  001822  0100               	movlb	0	; () banked
  2832  001824  6FE7               	movwf	(??_sprintf+1)& (0+255),b
  2833  001826  51E6               	movf	??_sprintf& (0+255),w,b
  2834  001828  11E7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2835  00182A  B4D8               	btfsc	status,2,c
  2836  00182C  D00E               	goto	l322
  2837  00182E  D009               	goto	l5529
  2838  001830                     l5525:
  2839                           
  2840                           ; BSR set to: 1
  2841                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2842  001830  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2843  001834  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2844  001838  0E20               	movlw	32
  2845  00183A  6EDF               	movwf	indf2,c
  2846                           
  2847                           ; BSR set to: 1
  2848  00183C  0100               	movlb	0	; () banked
  2849  00183E  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2850  001840  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2851  001842                     l5529:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1182: width--;
  2855  001842  0101               	movlb	1	; () banked
  2856  001844  070C               	decf	sprintf@width& (0+255),f,b
  2857  001846  A0D8               	btfss	status,0,c
  2858  001848  070D               	decf	(sprintf@width+1)& (0+255),f,b
  2859  00184A                     l322:
  2860                           
  2861                           ; BSR set to: 1
  2862  00184A  0101               	movlb	1	; () banked
  2863  00184C  BF0D               	btfsc	(sprintf@width+1)& (0+255),7,b
  2864  00184E  D005               	goto	u6290
  2865  001850  510D               	movf	(sprintf@width+1)& (0+255),w,b
  2866  001852  E1EE               	bnz	l5525
  2867  001854  050C               	decf	sprintf@width& (0+255),w,b
  2868  001856  B0D8               	btfsc	status,0,c
  2869  001858  D7EB               	goto	l323
  2870  00185A                     u6290:
  2871                           
  2872                           ; BSR set to: 1
  2873                           ;doprnt.c: 1183: }
  2874                           ;doprnt.c: 1188: if(flag & 0x03)
  2875                           
  2876                           ; BSR set to: 1
  2877  00185A  0E03               	movlw	3
  2878  00185C  150A               	andwf	sprintf@flag& (0+255),w,b
  2879  00185E  0100               	movlb	0	; () banked
  2880  001860  6FE6               	movwf	??_sprintf& (0+255),b
  2881  001862  0E00               	movlw	0
  2882  001864  0101               	movlb	1	; () banked
  2883  001866  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2884  001868  0100               	movlb	0	; () banked
  2885  00186A  6FE7               	movwf	(??_sprintf+1)& (0+255),b
  2886  00186C  51E6               	movf	??_sprintf& (0+255),w,b
  2887  00186E  11E7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2888  001870  B4D8               	btfsc	status,2,c
  2889  001872  D053               	goto	l326
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2893  001874  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2894  001878  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2895  00187C  0E2D               	movlw	45
  2896  00187E  6EDF               	movwf	indf2,c
  2897  001880  D04A               	goto	L2
  2898  001882                     
  2899                           ;doprnt.c: 1200: {
  2900                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2901                           
  2902                           ; BSR set to: 0
  2903  001882  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  2904  001886  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2905  00188A  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2906  00188E  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2907  001892  0101               	movlb	1	; () banked
  2908  001894  511A               	movf	sprintf@c& (0+255),w,b
  2909  001896  0D04               	mullw	4
  2910  001898  0E69               	movlw	low _dpowers
  2911  00189A  24F3               	addwf	prodl,w,c
  2912  00189C  6EF6               	movwf	tblptrl,c
  2913  00189E  0E06               	movlw	high _dpowers
  2914  0018A0  20F4               	addwfc	prodh,w,c
  2915  0018A2  6EF7               	movwf	tblptrh,c
  2916  0018A4                     	if	0	;There are less than 3 active tblptr bytes
  2917  0018A4                     	endif
  2918  0018A4  0009               	tblrd		*+
  2919  0018A6  CFF5 F032          	movff	tablat,___lldiv@divisor
  2920  0018AA  0009               	tblrd		*+
  2921  0018AC  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2922  0018B0  0009               	tblrd		*+
  2923  0018B2  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2924  0018B6  000A               	tblrd		*-
  2925  0018B8  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2926  0018BC  ECE0  F01E         	call	___lldiv	;wreg free
  2927  0018C0  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  2928  0018C4  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  2929  0018C8  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  2930  0018CC  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  2931                           
  2932                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2933  0018D0  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2934  0018D4  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2935  0018D8  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2936  0018DC  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2937  0018E0  0E0A               	movlw	10
  2938  0018E2  6E32               	movwf	___llmod@divisor,c
  2939  0018E4  0E00               	movlw	0
  2940  0018E6  6E33               	movwf	___llmod@divisor+1,c
  2941  0018E8  0E00               	movlw	0
  2942  0018EA  6E34               	movwf	___llmod@divisor+2,c
  2943  0018EC  0E00               	movlw	0
  2944  0018EE  6E35               	movwf	___llmod@divisor+3,c
  2945  0018F0  EC59  F01F         	call	___llmod	;wreg free
  2946  0018F4  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  2947  0018F8  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  2948  0018FC  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  2949  001900  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  2950                           
  2951                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2952  001904  0101               	movlb	1	; () banked
  2953  001906  510E               	movf	sprintf@tmpval& (0+255),w,b
  2954  001908  0F30               	addlw	48
  2955  00190A  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2956  00190E  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2957  001912  6EDF               	movwf	indf2,c
  2958                           
  2959                           ; BSR set to: 1
  2960  001914  0100               	movlb	0	; () banked
  2961  001916                     L2:
  2962  001916  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2963  001918  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2964  00191A                     l326:
  2965                           
  2966                           ; BSR set to: 0
  2967                           
  2968                           ; BSR set to: 0
  2969  00191A  0101               	movlb	1	; () banked
  2970  00191C  071A               	decf	sprintf@c& (0+255),f,b
  2971  00191E  291A               	incf	sprintf@c& (0+255),w,b
  2972  001920  B4D8               	btfsc	status,2,c
  2973  001922  D00E               	goto	l329
  2974  001924  D7AE               	goto	l327
  2975  001926                     l5549:
  2976                           
  2977                           ; BSR set to: 1
  2978                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2979  001926  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2980  00192A  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2981  00192E  0E30               	movlw	48
  2982  001930  6EDF               	movwf	indf2,c
  2983                           
  2984                           ; BSR set to: 1
  2985  001932  0100               	movlb	0	; () banked
  2986  001934  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2987  001936  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;doprnt.c: 1209: exp--;
  2991  001938  0101               	movlb	1	; () banked
  2992  00193A  0712               	decf	sprintf@exp& (0+255),f,b
  2993  00193C  A0D8               	btfss	status,0,c
  2994  00193E  0713               	decf	(sprintf@exp+1)& (0+255),f,b
  2995  001940                     l329:
  2996                           
  2997                           ; BSR set to: 1
  2998                           
  2999                           ; BSR set to: 1
  3000  001940  BF13               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3001  001942  D005               	goto	u6320
  3002  001944  5113               	movf	(sprintf@exp+1)& (0+255),w,b
  3003  001946  E1EF               	bnz	l5549
  3004  001948  0512               	decf	sprintf@exp& (0+255),w,b
  3005  00194A  B0D8               	btfsc	status,0,c
  3006  00194C  D7EC               	goto	l330
  3007  00194E                     u6320:
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;doprnt.c: 1210: }
  3011                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3012                           
  3013                           ; BSR set to: 1
  3014  00194E  BF19               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3015  001950  D009               	goto	l332
  3016  001952  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3017  001954  E104               	bnz	u6330
  3018  001956  0E09               	movlw	9
  3019  001958  5D18               	subwf	sprintf@prec& (0+255),w,b
  3020  00195A  A0D8               	btfss	status,0,c
  3021  00195C  D003               	goto	l332
  3022  00195E                     u6330:
  3023                           
  3024                           ; BSR set to: 1
  3025                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3026  00195E  0E08               	movlw	8
  3027  001960  6F1A               	movwf	sprintf@c& (0+255),b
  3028  001962  D002               	goto	l333
  3029  001964                     l332:
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;doprnt.c: 1213: else
  3033                           ;doprnt.c: 1214: c = prec;
  3034  001964  C118  F11A         	movff	sprintf@prec,sprintf@c
  3035  001968                     l333:
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;doprnt.c: 1215: prec -= c;
  3039                           
  3040                           ; BSR set to: 1
  3041  001968  511A               	movf	sprintf@c& (0+255),w,b
  3042  00196A  5F18               	subwf	sprintf@prec& (0+255),f,b
  3043  00196C  0E00               	movlw	0
  3044  00196E  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3045  001970  0EFF               	movlw	255
  3046  001972  5B19               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3047                           
  3048                           ; BSR set to: 1
  3049                           ;doprnt.c: 1219: if(c)
  3050  001974  511A               	movf	sprintf@c& (0+255),w,b
  3051  001976  B4D8               	btfsc	status,2,c
  3052  001978  D009               	goto	l334
  3053                           
  3054                           ; BSR set to: 1
  3055                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3056  00197A  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3057  00197E  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3058  001982  0E2E               	movlw	46
  3059  001984  6EDF               	movwf	indf2,c
  3060                           
  3061                           ; BSR set to: 1
  3062  001986  0100               	movlb	0	; () banked
  3063  001988  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  3064  00198A  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  3065  00198C                     l334:
  3066                           
  3067                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3068                           
  3069                           ; BSR set to: 0
  3070  00198C  0101               	movlb	1	; () banked
  3071  00198E  511A               	movf	sprintf@c& (0+255),w,b
  3072  001990  ECAB  F011         	call	_scale
  3073  001994  C091  F100         	movff	?_scale,_sprintf$919
  3074  001998  C092  F101         	movff	?_scale+1,_sprintf$919+1
  3075  00199C  C093  F102         	movff	?_scale+2,_sprintf$919+2
  3076  0019A0  C094  F103         	movff	?_scale+3,_sprintf$919+3
  3077                           
  3078                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3079  0019A4  C114  F040         	movff	sprintf@fval,___flmul@a
  3080  0019A8  C115  F041         	movff	sprintf@fval+1,___flmul@a+1
  3081  0019AC  C116  F042         	movff	sprintf@fval+2,___flmul@a+2
  3082  0019B0  C117  F043         	movff	sprintf@fval+3,___flmul@a+3
  3083  0019B4  C100  F03C         	movff	_sprintf$919,___flmul@b
  3084  0019B8  C101  F03D         	movff	_sprintf$919+1,___flmul@b+1
  3085  0019BC  C102  F03E         	movff	_sprintf$919+2,___flmul@b+2
  3086  0019C0  C103  F03F         	movff	_sprintf$919+3,___flmul@b+3
  3087  0019C4  ECD3  F013         	call	___flmul	;wreg free
  3088  0019C8  C03C  F09A         	movff	?___flmul,___fltol@f1
  3089  0019CC  C03D  F09B         	movff	?___flmul+1,___fltol@f1+1
  3090  0019D0  C03E  F09C         	movff	?___flmul+2,___fltol@f1+2
  3091  0019D4  C03F  F09D         	movff	?___flmul+3,___fltol@f1+3
  3092  0019D8  ECD0  F01D         	call	___fltol	;wreg free
  3093  0019DC  C09A  F106         	movff	?___fltol,sprintf@val
  3094  0019E0  C09B  F107         	movff	?___fltol+1,sprintf@val+1
  3095  0019E4  C09C  F108         	movff	?___fltol+2,sprintf@val+2
  3096  0019E8  C09D  F109         	movff	?___fltol+3,sprintf@val+3
  3097                           
  3098                           ;doprnt.c: 1228: while(c--) {
  3099  0019EC  D073               	goto	l335
  3100  0019EE                     
  3101                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3102  0019EE  C106  F02E         	movff	sprintf@val,___lldiv@dividend
  3103  0019F2  C107  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  3104  0019F6  C108  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  3105  0019FA  C109  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  3106  0019FE  0101               	movlb	1	; () banked
  3107  001A00  511A               	movf	sprintf@c& (0+255),w,b
  3108  001A02  0D04               	mullw	4
  3109  001A04  0E69               	movlw	low _dpowers
  3110  001A06  24F3               	addwf	prodl,w,c
  3111  001A08  6EF6               	movwf	tblptrl,c
  3112  001A0A  0E06               	movlw	high _dpowers
  3113  001A0C  20F4               	addwfc	prodh,w,c
  3114  001A0E  6EF7               	movwf	tblptrh,c
  3115  001A10                     	if	0	;There are less than 3 active tblptr bytes
  3116  001A10                     	endif
  3117  001A10  0009               	tblrd		*+
  3118  001A12  CFF5 F032          	movff	tablat,___lldiv@divisor
  3119  001A16  0009               	tblrd		*+
  3120  001A18  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  3121  001A1C  0009               	tblrd		*+
  3122  001A1E  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  3123  001A22  000A               	tblrd		*-
  3124  001A24  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  3125  001A28  ECE0  F01E         	call	___lldiv	;wreg free
  3126  001A2C  C02E  F10E         	movff	?___lldiv,sprintf@tmpval
  3127  001A30  C02F  F10F         	movff	?___lldiv+1,sprintf@tmpval+1
  3128  001A34  C030  F110         	movff	?___lldiv+2,sprintf@tmpval+2
  3129  001A38  C031  F111         	movff	?___lldiv+3,sprintf@tmpval+3
  3130                           
  3131                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3132  001A3C  C10E  F02E         	movff	sprintf@tmpval,___llmod@dividend
  3133  001A40  C10F  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3134  001A44  C110  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3135  001A48  C111  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3136  001A4C  0E0A               	movlw	10
  3137  001A4E  6E32               	movwf	___llmod@divisor,c
  3138  001A50  0E00               	movlw	0
  3139  001A52  6E33               	movwf	___llmod@divisor+1,c
  3140  001A54  0E00               	movlw	0
  3141  001A56  6E34               	movwf	___llmod@divisor+2,c
  3142  001A58  0E00               	movlw	0
  3143  001A5A  6E35               	movwf	___llmod@divisor+3,c
  3144  001A5C  EC59  F01F         	call	___llmod	;wreg free
  3145  001A60  C02E  F10E         	movff	?___llmod,sprintf@tmpval
  3146  001A64  C02F  F10F         	movff	?___llmod+1,sprintf@tmpval+1
  3147  001A68  C030  F110         	movff	?___llmod+2,sprintf@tmpval+2
  3148  001A6C  C031  F111         	movff	?___llmod+3,sprintf@tmpval+3
  3149                           
  3150                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3151  001A70  0101               	movlb	1	; () banked
  3152  001A72  510E               	movf	sprintf@tmpval& (0+255),w,b
  3153  001A74  0F30               	addlw	48
  3154  001A76  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3155  001A7A  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3156  001A7E  6EDF               	movwf	indf2,c
  3157                           
  3158                           ; BSR set to: 1
  3159  001A80  0100               	movlb	0	; () banked
  3160  001A82  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  3161  001A84  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1232: val %= dpowers[c];
  3165  001A86  C106  F02E         	movff	sprintf@val,___llmod@dividend
  3166  001A8A  C107  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  3167  001A8E  C108  F030         	movff	sprintf@val+2,___llmod@dividend+2
  3168  001A92  C109  F031         	movff	sprintf@val+3,___llmod@dividend+3
  3169  001A96  0101               	movlb	1	; () banked
  3170  001A98  511A               	movf	sprintf@c& (0+255),w,b
  3171  001A9A  0D04               	mullw	4
  3172  001A9C  0E69               	movlw	low _dpowers
  3173  001A9E  24F3               	addwf	prodl,w,c
  3174  001AA0  6EF6               	movwf	tblptrl,c
  3175  001AA2  0E06               	movlw	high _dpowers
  3176  001AA4  20F4               	addwfc	prodh,w,c
  3177  001AA6  6EF7               	movwf	tblptrh,c
  3178  001AA8                     	if	0	;There are less than 3 active tblptr bytes
  3179  001AA8                     	endif
  3180  001AA8  0009               	tblrd		*+
  3181  001AAA  CFF5 F032          	movff	tablat,___llmod@divisor
  3182  001AAE  0009               	tblrd		*+
  3183  001AB0  CFF5 F033          	movff	tablat,___llmod@divisor+1
  3184  001AB4  0009               	tblrd		*+
  3185  001AB6  CFF5 F034          	movff	tablat,___llmod@divisor+2
  3186  001ABA  000A               	tblrd		*-
  3187  001ABC  CFF5 F035          	movff	tablat,___llmod@divisor+3
  3188  001AC0  EC59  F01F         	call	___llmod	;wreg free
  3189  001AC4  C02E  F106         	movff	?___llmod,sprintf@val
  3190  001AC8  C02F  F107         	movff	?___llmod+1,sprintf@val+1
  3191  001ACC  C030  F108         	movff	?___llmod+2,sprintf@val+2
  3192  001AD0  C031  F109         	movff	?___llmod+3,sprintf@val+3
  3193  001AD4                     l335:
  3194  001AD4  0101               	movlb	1	; () banked
  3195  001AD6  071A               	decf	sprintf@c& (0+255),f,b
  3196  001AD8  291A               	incf	sprintf@c& (0+255),w,b
  3197  001ADA  B4D8               	btfsc	status,2,c
  3198  001ADC  D00E               	goto	l338
  3199  001ADE  D787               	goto	l336
  3200  001AE0                     
  3201                           ; BSR set to: 1
  3202                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3203                           
  3204                           ; BSR set to: 1
  3205  001AE0  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3206  001AE4  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3207  001AE8  0E30               	movlw	48
  3208  001AEA  6EDF               	movwf	indf2,c
  3209                           
  3210                           ; BSR set to: 1
  3211  001AEC  0100               	movlb	0	; () banked
  3212  001AEE  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  3213  001AF0  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;doprnt.c: 1237: prec--;
  3217  001AF2  0101               	movlb	1	; () banked
  3218  001AF4  0718               	decf	sprintf@prec& (0+255),f,b
  3219  001AF6  A0D8               	btfss	status,0,c
  3220  001AF8  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  3221  001AFA                     l338:
  3222                           
  3223                           ; BSR set to: 1
  3224                           
  3225                           ; BSR set to: 1
  3226  001AFA  5118               	movf	sprintf@prec& (0+255),w,b
  3227  001AFC  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3228  001AFE  B4D8               	btfsc	status,2,c
  3229  001B00  D0A9               	goto	l354
  3230  001B02  D7EE               	goto	l339
  3231  001B04                     l298:
  3232                           
  3233                           ; BSR set to: 1
  3234                           ;doprnt.c: 1246: }
  3235                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3236                           
  3237                           ; BSR set to: 1
  3238  001B04  5118               	movf	sprintf@prec& (0+255),w,b
  3239  001B06  1119               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3240  001B08  A4D8               	btfss	status,2,c
  3241  001B0A  D008               	goto	l341
  3242                           
  3243                           ; BSR set to: 1
  3244  001B0C  5106               	movf	sprintf@val& (0+255),w,b
  3245  001B0E  1107               	iorwf	(sprintf@val+1)& (0+255),w,b
  3246  001B10  1108               	iorwf	(sprintf@val+2)& (0+255),w,b
  3247  001B12  1109               	iorwf	(sprintf@val+3)& (0+255),w,b
  3248  001B14  A4D8               	btfss	status,2,c
  3249  001B16  D002               	goto	l341
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;doprnt.c: 1291: prec++;
  3253  001B18  4B18               	infsnz	sprintf@prec& (0+255),f,b
  3254  001B1A  2B19               	incf	(sprintf@prec+1)& (0+255),f,b
  3255  001B1C                     l341:
  3256                           
  3257                           ; BSR set to: 1
  3258                           ;doprnt.c: 1339: if(c < prec)
  3259                           
  3260                           ; BSR set to: 1
  3261  001B1C  0E80               	movlw	128
  3262  001B1E  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3263  001B20  0E7F               	movlw	127
  3264  001B22  0100               	movlb	0	; () banked
  3265  001B24  6FE6               	movwf	??_sprintf& (0+255),b
  3266  001B26  0101               	movlb	1	; () banked
  3267  001B28  5118               	movf	sprintf@prec& (0+255),w,b
  3268  001B2A  5D1A               	subwf	sprintf@c& (0+255),w,b
  3269  001B2C  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3270  001B2E  0A80               	xorlw	128
  3271  001B30  0100               	movlb	0	; () banked
  3272  001B32  59E6               	subwfb	??_sprintf& (0+255),w,b
  3273  001B34  B0D8               	btfsc	status,0,c
  3274  001B36  D003               	goto	l342
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1340: c = prec;
  3278  001B38  C118  F11A         	movff	sprintf@prec,sprintf@c
  3279  001B3C  D015               	goto	l344
  3280  001B3E                     l342:
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;doprnt.c: 1341: else if(prec < c)
  3284                           
  3285                           ; BSR set to: 0
  3286  001B3E  0101               	movlb	1	; () banked
  3287  001B40  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3288  001B42  0A80               	xorlw	128
  3289  001B44  0100               	movlb	0	; () banked
  3290  001B46  6FE6               	movwf	??_sprintf& (0+255),b
  3291  001B48  0101               	movlb	1	; () banked
  3292  001B4A  511A               	movf	sprintf@c& (0+255),w,b
  3293  001B4C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3294  001B4E  0E80               	movlw	128
  3295  001B50  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3296  001B52  0E7F               	movlw	127
  3297  001B54  0100               	movlb	0	; () banked
  3298  001B56  59E6               	subwfb	??_sprintf& (0+255),w,b
  3299  001B58  B0D8               	btfsc	status,0,c
  3300  001B5A  D006               	goto	l344
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1342: prec = c;
  3304  001B5C  0101               	movlb	1	; () banked
  3305  001B5E  511A               	movf	sprintf@c& (0+255),w,b
  3306  001B60  6F18               	movwf	sprintf@prec& (0+255),b
  3307  001B62  6B19               	clrf	(sprintf@prec+1)& (0+255),b
  3308  001B64  BF18               	btfsc	sprintf@prec& (0+255),7,b
  3309  001B66  0719               	decf	(sprintf@prec+1)& (0+255),f,b
  3310  001B68                     l344:
  3311                           
  3312                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3313                           
  3314                           ; BSR set to: 1
  3315                           
  3316                           ; BSR set to: 1
  3317  001B68  0101               	movlb	1	; () banked
  3318  001B6A  510C               	movf	sprintf@width& (0+255),w,b
  3319  001B6C  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3320  001B6E  B4D8               	btfsc	status,2,c
  3321  001B70  D011               	goto	l345
  3322                           
  3323                           ; BSR set to: 1
  3324  001B72  0E03               	movlw	3
  3325  001B74  150A               	andwf	sprintf@flag& (0+255),w,b
  3326  001B76  0100               	movlb	0	; () banked
  3327  001B78  6FE6               	movwf	??_sprintf& (0+255),b
  3328  001B7A  0E00               	movlw	0
  3329  001B7C  0101               	movlb	1	; () banked
  3330  001B7E  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3331  001B80  0100               	movlb	0	; () banked
  3332  001B82  6FE7               	movwf	(??_sprintf+1)& (0+255),b
  3333  001B84  51E6               	movf	??_sprintf& (0+255),w,b
  3334  001B86  11E7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3335  001B88  B4D8               	btfsc	status,2,c
  3336  001B8A  D004               	goto	l345
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;doprnt.c: 1346: width--;
  3340  001B8C  0101               	movlb	1	; () banked
  3341  001B8E  070C               	decf	sprintf@width& (0+255),f,b
  3342  001B90  A0D8               	btfss	status,0,c
  3343  001B92  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3344  001B94                     l345:
  3345                           
  3346                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3347                           
  3348                           ; BSR set to: 1
  3349  001B94  0101               	movlb	1	; () banked
  3350  001B96  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  3351  001B98  D018               	goto	l348
  3352                           
  3353                           ; BSR set to: 1
  3354                           ;doprnt.c: 1349: if(width > prec)
  3355  001B9A  510C               	movf	sprintf@width& (0+255),w,b
  3356  001B9C  5D18               	subwf	sprintf@prec& (0+255),w,b
  3357  001B9E  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3358  001BA0  0A80               	xorlw	128
  3359  001BA2  0100               	movlb	0	; () banked
  3360  001BA4  6FE6               	movwf	??_sprintf& (0+255),b
  3361  001BA6  0101               	movlb	1	; () banked
  3362  001BA8  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3363  001BAA  0A80               	xorlw	128
  3364  001BAC  0100               	movlb	0	; () banked
  3365  001BAE  59E6               	subwfb	??_sprintf& (0+255),w,b
  3366  001BB0  B0D8               	btfsc	status,0,c
  3367  001BB2  D006               	goto	l347
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;doprnt.c: 1350: width -= prec;
  3371  001BB4  0101               	movlb	1	; () banked
  3372  001BB6  5118               	movf	sprintf@prec& (0+255),w,b
  3373  001BB8  5F0C               	subwf	sprintf@width& (0+255),f,b
  3374  001BBA  5119               	movf	(sprintf@prec+1)& (0+255),w,b
  3375  001BBC  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3376  001BBE  D005               	goto	l348
  3377  001BC0                     l347:
  3378                           
  3379                           ;doprnt.c: 1351: else
  3380                           ;doprnt.c: 1352: width = 0;
  3381                           
  3382                           ; BSR set to: 1
  3383  001BC0  0E00               	movlw	0
  3384  001BC2  0101               	movlb	1	; () banked
  3385  001BC4  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3386  001BC6  0E00               	movlw	0
  3387  001BC8  6F0C               	movwf	sprintf@width& (0+255),b
  3388  001BCA                     l348:
  3389                           
  3390                           ; BSR set to: 1
  3391                           ;doprnt.c: 1353: }
  3392                           ;doprnt.c: 1381: if(width > c)
  3393                           
  3394                           ; BSR set to: 1
  3395                           
  3396                           ; BSR set to: 1
  3397  001BCA  0E80               	movlw	128
  3398  001BCC  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3399  001BCE  0E7F               	movlw	127
  3400  001BD0  0100               	movlb	0	; () banked
  3401  001BD2  6FE6               	movwf	??_sprintf& (0+255),b
  3402  001BD4  0101               	movlb	1	; () banked
  3403  001BD6  510C               	movf	sprintf@width& (0+255),w,b
  3404  001BD8  5D1A               	subwf	sprintf@c& (0+255),w,b
  3405  001BDA  510D               	movf	(sprintf@width+1)& (0+255),w,b
  3406  001BDC  0A80               	xorlw	128
  3407  001BDE  0100               	movlb	0	; () banked
  3408  001BE0  59E6               	subwfb	??_sprintf& (0+255),w,b
  3409  001BE2  B0D8               	btfsc	status,0,c
  3410  001BE4  D008               	goto	l349
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;doprnt.c: 1382: width -= c;
  3414  001BE6  0101               	movlb	1	; () banked
  3415  001BE8  511A               	movf	sprintf@c& (0+255),w,b
  3416  001BEA  5F0C               	subwf	sprintf@width& (0+255),f,b
  3417  001BEC  0E00               	movlw	0
  3418  001BEE  BF1A               	btfsc	sprintf@c& (0+255),7,b
  3419  001BF0  0EFF               	movlw	255
  3420  001BF2  5B0D               	subwfb	(sprintf@width+1)& (0+255),f,b
  3421  001BF4  D005               	goto	l350
  3422  001BF6                     l349:
  3423                           
  3424                           ;doprnt.c: 1383: else
  3425                           ;doprnt.c: 1384: width = 0;
  3426                           
  3427                           ; BSR set to: 1
  3428  001BF6  0E00               	movlw	0
  3429  001BF8  0101               	movlb	1	; () banked
  3430  001BFA  6F0D               	movwf	(sprintf@width+1)& (0+255),b
  3431  001BFC  0E00               	movlw	0
  3432  001BFE  6F0C               	movwf	sprintf@width& (0+255),b
  3433  001C00                     l350:
  3434                           
  3435                           ; BSR set to: 1
  3436                           ;doprnt.c: 1422: {
  3437                           ;doprnt.c: 1424: if(width
  3438                           ;doprnt.c: 1428: )
  3439                           
  3440                           ; BSR set to: 1
  3441  001C00  510C               	movf	sprintf@width& (0+255),w,b
  3442  001C02  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3443  001C04  B4D8               	btfsc	status,2,c
  3444  001C06  D011               	goto	u6470
  3445  001C08                     u6460:
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3449                           
  3450                           ; BSR set to: 1
  3451                           
  3452                           ;doprnt.c: 1429: do
  3453  001C08  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3454  001C0C  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3455  001C10  0E20               	movlw	32
  3456  001C12  6EDF               	movwf	indf2,c
  3457                           
  3458                           ; BSR set to: 1
  3459  001C14  0100               	movlb	0	; () banked
  3460  001C16  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  3461  001C18  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;doprnt.c: 1431: while(--width);
  3465  001C1A  0101               	movlb	1	; () banked
  3466  001C1C  070C               	decf	sprintf@width& (0+255),f,b
  3467  001C1E  A0D8               	btfss	status,0,c
  3468  001C20  070D               	decf	(sprintf@width+1)& (0+255),f,b
  3469  001C22  510C               	movf	sprintf@width& (0+255),w,b
  3470  001C24  110D               	iorwf	(sprintf@width+1)& (0+255),w,b
  3471  001C26  A4D8               	btfss	status,2,c
  3472  001C28  D7EF               	goto	u6460
  3473  001C2A                     u6470:
  3474                           
  3475                           ; BSR set to: 1
  3476                           ;doprnt.c: 1438: if(flag & 0x03)
  3477                           
  3478                           ; BSR set to: 1
  3479                           
  3480                           ; BSR set to: 1
  3481  001C2A  0E03               	movlw	3
  3482  001C2C  150A               	andwf	sprintf@flag& (0+255),w,b
  3483  001C2E  0100               	movlb	0	; () banked
  3484  001C30  6FE6               	movwf	??_sprintf& (0+255),b
  3485  001C32  0E00               	movlw	0
  3486  001C34  0101               	movlb	1	; () banked
  3487  001C36  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3488  001C38  0100               	movlb	0	; () banked
  3489  001C3A  6FE7               	movwf	(??_sprintf+1)& (0+255),b
  3490  001C3C  51E6               	movf	??_sprintf& (0+255),w,b
  3491  001C3E  11E7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3492  001C40  B4D8               	btfsc	status,2,c
  3493  001C42  D008               	goto	l354
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3497  001C44  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3498  001C48  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3499  001C4C  0E2D               	movlw	45
  3500  001C4E  6EDF               	movwf	indf2,c
  3501  001C50                     l5639:
  3502                           
  3503                           ; BSR set to: 0
  3504  001C50  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  3505  001C52  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  3506  001C54                     l354:
  3507                           
  3508                           ; BSR set to: 0
  3509                           
  3510                           ; BSR set to: 0
  3511  001C54  C0E0  FFF6         	movff	sprintf@f,tblptrl
  3512  001C58  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  3513  001C5C  0100               	movlb	0	; () banked
  3514  001C5E  4BE0               	infsnz	sprintf@f& (0+255),f,b
  3515  001C60  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  3516  001C62                     	if	0	;tblptru may be non-zero
  3517  001C62                     	endif
  3518  001C62                     	if	0	;tblptru may be non-zero
  3519  001C62                     	endif
  3520  001C62  0008               	tblrd		*
  3521  001C64  CFF5 F11A          	movff	tablat,sprintf@c
  3522  001C68  0101               	movlb	1	; () banked
  3523  001C6A  511A               	movf	sprintf@c& (0+255),w,b
  3524  001C6C  A4D8               	btfss	status,2,c
  3525  001C6E  EF7E  F009         	goto	l282
  3526  001C72                     u6490:
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;doprnt.c: 1538: *sp = 0;
  3530                           
  3531                           ; BSR set to: 1
  3532                           
  3533                           ;doprnt.c: 1469: }
  3534                           ;doprnt.c: 1533: }
  3535                           ;doprnt.c: 1535: alldone:
  3536                           
  3537                           ; BSR set to: 1
  3538  001C72  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  3539  001C76  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  3540  001C7A  0E00               	movlw	0
  3541  001C7C  6EDF               	movwf	indf2,c
  3542  001C7E  0012               	return	
  3543  001C80                     __end_of_sprintf:
  3544                           	opt stack 0
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _scale *****************
  3561 ;; Defined at:
  3562 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  scl             1    wreg     char 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  scl             1   25[BANK0 ] char 
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  4   17[BANK0 ] char 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3576 ;;      Params:         0       4       0       0       0       0       0
  3577 ;;      Locals:         0       5       0       0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0
  3579 ;;      Totals:         0       9       0       0       0       0       0
  3580 ;;Total ram usage:        9 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    3
  3583 ;; This function calls:
  3584 ;;		___awdiv
  3585 ;;		___awmod
  3586 ;;		___flmul
  3587 ;; This function is called by:
  3588 ;;		_sprintf
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           	psect	text2
  3593  002356                     __ptext2:
  3594                           	opt stack 0
  3595  002356                     _scale:
  3596                           	opt stack 26
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;incstack = 0
  3600                           ;scale@scl stored from wreg
  3601  002356  0100               	movlb	0	; () banked
  3602  002358  6F99               	movwf	scale@scl& (0+255),b
  3603                           
  3604                           ;doprnt.c: 428: if(scl < 0) {
  3605  00235A  0100               	movlb	0	; () banked
  3606  00235C  AF99               	btfss	scale@scl& (0+255),7,b
  3607  00235E  D112               	goto	l271
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;doprnt.c: 429: scl = -scl;
  3611  002360  6D99               	negf	scale@scl& (0+255),b
  3612                           
  3613                           ;doprnt.c: 430: if(scl>=110)
  3614  002362  5199               	movf	scale@scl& (0+255),w,b
  3615  002364  0A80               	xorlw	128
  3616  002366  0F12               	addlw	-238
  3617  002368  A0D8               	btfss	status,0,c
  3618  00236A  D09A               	goto	l272
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3622  00236C  0E00               	movlw	0
  3623  00236E  6E37               	movwf	___awdiv@divisor+1,c
  3624  002370  0E0A               	movlw	10
  3625  002372  6E36               	movwf	___awdiv@divisor,c
  3626  002374  0E00               	movlw	0
  3627  002376  6E31               	movwf	___awmod@divisor+1,c
  3628  002378  0E64               	movlw	100
  3629  00237A  6E30               	movwf	___awmod@divisor,c
  3630  00237C  5199               	movf	scale@scl& (0+255),w,b
  3631  00237E  6E2E               	movwf	___awmod@dividend,c
  3632  002380  6A2F               	clrf	___awmod@dividend+1,c
  3633  002382  BE2E               	btfsc	___awmod@dividend,7,c
  3634  002384  062F               	decf	___awmod@dividend+1,f,c
  3635  002386  EC21  F01F         	call	___awmod	;wreg free
  3636  00238A  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3637  00238E  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3638  002392  EC9E  F01E         	call	___awdiv	;wreg free
  3639  002396  90D8               	bcf	status,0,c
  3640  002398  3634               	rlcf	?___awdiv,f,c
  3641  00239A  3635               	rlcf	?___awdiv+1,f,c
  3642  00239C  90D8               	bcf	status,0,c
  3643  00239E  3634               	rlcf	?___awdiv,f,c
  3644  0023A0  3635               	rlcf	?___awdiv+1,f,c
  3645  0023A2  0E24               	movlw	36
  3646  0023A4  2634               	addwf	?___awdiv,f,c
  3647  0023A6  0E00               	movlw	0
  3648  0023A8  2235               	addwfc	?___awdiv+1,f,c
  3649  0023AA  0E35               	movlw	low __npowers_
  3650  0023AC  2434               	addwf	?___awdiv,w,c
  3651  0023AE  6EF6               	movwf	tblptrl,c
  3652  0023B0  0E06               	movlw	high __npowers_
  3653  0023B2  2035               	addwfc	?___awdiv+1,w,c
  3654  0023B4  6EF7               	movwf	tblptrh,c
  3655  0023B6                     	if	0	;There are less than 3 active tblptr bytes
  3656  0023B6                     	endif
  3657  0023B6  0009               	tblrd		*+
  3658  0023B8  CFF5 F040          	movff	tablat,___flmul@a
  3659  0023BC  0009               	tblrd		*+
  3660  0023BE  CFF5 F041          	movff	tablat,___flmul@a+1
  3661  0023C2  0009               	tblrd		*+
  3662  0023C4  CFF5 F042          	movff	tablat,___flmul@a+2
  3663  0023C8  000A               	tblrd		*-
  3664  0023CA  CFF5 F043          	movff	tablat,___flmul@a+3
  3665  0023CE  0E00               	movlw	0
  3666  0023D0  6E37               	movwf	___awdiv@divisor+1,c
  3667  0023D2  0E64               	movlw	100
  3668  0023D4  6E36               	movwf	___awdiv@divisor,c
  3669  0023D6  0100               	movlb	0	; () banked
  3670  0023D8  5199               	movf	scale@scl& (0+255),w,b
  3671  0023DA  6E34               	movwf	___awdiv@dividend,c
  3672  0023DC  6A35               	clrf	___awdiv@dividend+1,c
  3673  0023DE  BE34               	btfsc	___awdiv@dividend,7,c
  3674  0023E0  0635               	decf	___awdiv@dividend+1,f,c
  3675  0023E2  EC9E  F01E         	call	___awdiv	;wreg free
  3676  0023E6  90D8               	bcf	status,0,c
  3677  0023E8  3634               	rlcf	?___awdiv,f,c
  3678  0023EA  3635               	rlcf	?___awdiv+1,f,c
  3679  0023EC  90D8               	bcf	status,0,c
  3680  0023EE  3634               	rlcf	?___awdiv,f,c
  3681  0023F0  3635               	rlcf	?___awdiv+1,f,c
  3682  0023F2  0E48               	movlw	72
  3683  0023F4  2634               	addwf	?___awdiv,f,c
  3684  0023F6  0E00               	movlw	0
  3685  0023F8  2235               	addwfc	?___awdiv+1,f,c
  3686  0023FA  0E35               	movlw	low __npowers_
  3687  0023FC  2434               	addwf	?___awdiv,w,c
  3688  0023FE  6EF6               	movwf	tblptrl,c
  3689  002400  0E06               	movlw	high __npowers_
  3690  002402  2035               	addwfc	?___awdiv+1,w,c
  3691  002404  6EF7               	movwf	tblptrh,c
  3692  002406                     	if	0	;There are less than 3 active tblptr bytes
  3693  002406                     	endif
  3694  002406  0009               	tblrd		*+
  3695  002408  CFF5 F03C          	movff	tablat,___flmul@b
  3696  00240C  0009               	tblrd		*+
  3697  00240E  CFF5 F03D          	movff	tablat,___flmul@b+1
  3698  002412  0009               	tblrd		*+
  3699  002414  CFF5 F03E          	movff	tablat,___flmul@b+2
  3700  002418  000A               	tblrd		*-
  3701  00241A  CFF5 F03F          	movff	tablat,___flmul@b+3
  3702  00241E  ECD3  F013         	call	___flmul	;wreg free
  3703  002422  C03C  F095         	movff	?___flmul,_scale$918
  3704  002426  C03D  F096         	movff	?___flmul+1,_scale$918+1
  3705  00242A  C03E  F097         	movff	?___flmul+2,_scale$918+2
  3706  00242E  C03F  F098         	movff	?___flmul+3,_scale$918+3
  3707                           
  3708                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3709  002432  C095  F03C         	movff	_scale$918,___flmul@b
  3710  002436  C096  F03D         	movff	_scale$918+1,___flmul@b+1
  3711  00243A  C097  F03E         	movff	_scale$918+2,___flmul@b+2
  3712  00243E  C098  F03F         	movff	_scale$918+3,___flmul@b+3
  3713  002442  0E00               	movlw	0
  3714  002444  6E31               	movwf	___awmod@divisor+1,c
  3715  002446  0E0A               	movlw	10
  3716  002448  6E30               	movwf	___awmod@divisor,c
  3717  00244A  0100               	movlb	0	; () banked
  3718  00244C  5199               	movf	scale@scl& (0+255),w,b
  3719  00244E  6E2E               	movwf	___awmod@dividend,c
  3720  002450  6A2F               	clrf	___awmod@dividend+1,c
  3721  002452  BE2E               	btfsc	___awmod@dividend,7,c
  3722  002454  062F               	decf	___awmod@dividend+1,f,c
  3723  002456  EC21  F01F         	call	___awmod	;wreg free
  3724  00245A  90D8               	bcf	status,0,c
  3725  00245C  362E               	rlcf	?___awmod,f,c
  3726  00245E  362F               	rlcf	?___awmod+1,f,c
  3727  002460  90D8               	bcf	status,0,c
  3728  002462  362E               	rlcf	?___awmod,f,c
  3729  002464  362F               	rlcf	?___awmod+1,f,c
  3730  002466  0E35               	movlw	low __npowers_
  3731  002468  242E               	addwf	?___awmod,w,c
  3732  00246A  6EF6               	movwf	tblptrl,c
  3733  00246C  0E06               	movlw	high __npowers_
  3734  00246E  202F               	addwfc	?___awmod+1,w,c
  3735  002470  6EF7               	movwf	tblptrh,c
  3736  002472                     	if	0	;There are less than 3 active tblptr bytes
  3737  002472                     	endif
  3738  002472  0009               	tblrd		*+
  3739  002474  CFF5 F040          	movff	tablat,___flmul@a
  3740  002478  0009               	tblrd		*+
  3741  00247A  CFF5 F041          	movff	tablat,___flmul@a+1
  3742  00247E  0009               	tblrd		*+
  3743  002480  CFF5 F042          	movff	tablat,___flmul@a+2
  3744  002484  000A               	tblrd		*-
  3745  002486  CFF5 F043          	movff	tablat,___flmul@a+3
  3746  00248A  ECD3  F013         	call	___flmul	;wreg free
  3747  00248E  C03C  F091         	movff	?___flmul,?_scale
  3748  002492  C03D  F092         	movff	?___flmul+1,?_scale+1
  3749  002496  C03E  F093         	movff	?___flmul+2,?_scale+2
  3750  00249A  C03F  F094         	movff	?___flmul+3,?_scale+3
  3751  00249E  0012               	return	
  3752  0024A0                     l272:
  3753                           
  3754                           ;doprnt.c: 432: else if(scl > 10)
  3755  0024A0  0100               	movlb	0	; () banked
  3756  0024A2  5199               	movf	scale@scl& (0+255),w,b
  3757  0024A4  0A80               	xorlw	128
  3758  0024A6  0F75               	addlw	-139
  3759  0024A8  A0D8               	btfss	status,0,c
  3760  0024AA  D056               	goto	l275
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3764  0024AC  0E00               	movlw	0
  3765  0024AE  6E37               	movwf	___awdiv@divisor+1,c
  3766  0024B0  0E0A               	movlw	10
  3767  0024B2  6E36               	movwf	___awdiv@divisor,c
  3768  0024B4  5199               	movf	scale@scl& (0+255),w,b
  3769  0024B6  6E34               	movwf	___awdiv@dividend,c
  3770  0024B8  6A35               	clrf	___awdiv@dividend+1,c
  3771  0024BA  BE34               	btfsc	___awdiv@dividend,7,c
  3772  0024BC  0635               	decf	___awdiv@dividend+1,f,c
  3773  0024BE  EC9E  F01E         	call	___awdiv	;wreg free
  3774  0024C2  90D8               	bcf	status,0,c
  3775  0024C4  3634               	rlcf	?___awdiv,f,c
  3776  0024C6  3635               	rlcf	?___awdiv+1,f,c
  3777  0024C8  90D8               	bcf	status,0,c
  3778  0024CA  3634               	rlcf	?___awdiv,f,c
  3779  0024CC  3635               	rlcf	?___awdiv+1,f,c
  3780  0024CE  0E24               	movlw	36
  3781  0024D0  2634               	addwf	?___awdiv,f,c
  3782  0024D2  0E00               	movlw	0
  3783  0024D4  2235               	addwfc	?___awdiv+1,f,c
  3784  0024D6  0E35               	movlw	low __npowers_
  3785  0024D8  2434               	addwf	?___awdiv,w,c
  3786  0024DA  6EF6               	movwf	tblptrl,c
  3787  0024DC  0E06               	movlw	high __npowers_
  3788  0024DE  2035               	addwfc	?___awdiv+1,w,c
  3789  0024E0  6EF7               	movwf	tblptrh,c
  3790  0024E2                     	if	0	;There are less than 3 active tblptr bytes
  3791  0024E2                     	endif
  3792  0024E2  0009               	tblrd		*+
  3793  0024E4  CFF5 F03C          	movff	tablat,___flmul@b
  3794  0024E8  0009               	tblrd		*+
  3795  0024EA  CFF5 F03D          	movff	tablat,___flmul@b+1
  3796  0024EE  0009               	tblrd		*+
  3797  0024F0  CFF5 F03E          	movff	tablat,___flmul@b+2
  3798  0024F4  000A               	tblrd		*-
  3799  0024F6  CFF5 F03F          	movff	tablat,___flmul@b+3
  3800  0024FA  0E00               	movlw	0
  3801  0024FC  6E31               	movwf	___awmod@divisor+1,c
  3802  0024FE  0E0A               	movlw	10
  3803  002500  6E30               	movwf	___awmod@divisor,c
  3804  002502  0100               	movlb	0	; () banked
  3805  002504  5199               	movf	scale@scl& (0+255),w,b
  3806  002506  6E2E               	movwf	___awmod@dividend,c
  3807  002508  6A2F               	clrf	___awmod@dividend+1,c
  3808  00250A  BE2E               	btfsc	___awmod@dividend,7,c
  3809  00250C  062F               	decf	___awmod@dividend+1,f,c
  3810  00250E  EC21  F01F         	call	___awmod	;wreg free
  3811  002512  90D8               	bcf	status,0,c
  3812  002514  362E               	rlcf	?___awmod,f,c
  3813  002516  362F               	rlcf	?___awmod+1,f,c
  3814  002518  90D8               	bcf	status,0,c
  3815  00251A  362E               	rlcf	?___awmod,f,c
  3816  00251C  362F               	rlcf	?___awmod+1,f,c
  3817  00251E  0E35               	movlw	low __npowers_
  3818  002520  242E               	addwf	?___awmod,w,c
  3819  002522  6EF6               	movwf	tblptrl,c
  3820  002524  0E06               	movlw	high __npowers_
  3821  002526  202F               	addwfc	?___awmod+1,w,c
  3822  002528  6EF7               	movwf	tblptrh,c
  3823  00252A                     	if	0	;There are less than 3 active tblptr bytes
  3824  00252A                     	endif
  3825  00252A  0009               	tblrd		*+
  3826  00252C  CFF5 F040          	movff	tablat,___flmul@a
  3827  002530  0009               	tblrd		*+
  3828  002532  CFF5 F041          	movff	tablat,___flmul@a+1
  3829  002536  0009               	tblrd		*+
  3830  002538  CFF5 F042          	movff	tablat,___flmul@a+2
  3831  00253C  000A               	tblrd		*-
  3832  00253E  CFF5 F043          	movff	tablat,___flmul@a+3
  3833  002542  ECD3  F013         	call	___flmul	;wreg free
  3834  002546  C03C  F091         	movff	?___flmul,?_scale
  3835  00254A  C03D  F092         	movff	?___flmul+1,?_scale+1
  3836  00254E  C03E  F093         	movff	?___flmul+2,?_scale+2
  3837  002552  C03F  F094         	movff	?___flmul+3,?_scale+3
  3838  002556  0012               	return	
  3839  002558                     l275:
  3840                           
  3841                           ;doprnt.c: 434: return _npowers_[scl];
  3842  002558  0100               	movlb	0	; () banked
  3843  00255A  5199               	movf	scale@scl& (0+255),w,b
  3844  00255C  0D04               	mullw	4
  3845  00255E  0E35               	movlw	low __npowers_
  3846  002560  24F3               	addwf	prodl,w,c
  3847  002562  6EF6               	movwf	tblptrl,c
  3848  002564  0E06               	movlw	high __npowers_
  3849  002566  20F4               	addwfc	prodh,w,c
  3850  002568  6EF7               	movwf	tblptrh,c
  3851  00256A                     	if	0	;There are less than 3 active tblptr bytes
  3852  00256A                     	endif
  3853  00256A  0009               	tblrd		*+
  3854  00256C  CFF5 F091          	movff	tablat,?_scale
  3855  002570  0009               	tblrd		*+
  3856  002572  CFF5 F092          	movff	tablat,?_scale+1
  3857  002576  0009               	tblrd		*+
  3858  002578  CFF5 F093          	movff	tablat,?_scale+2
  3859  00257C  000A               	tblrd		*-
  3860  00257E  CFF5 F094          	movff	tablat,?_scale+3
  3861                           
  3862                           ; BSR set to: 0
  3863  002582  0012               	return	
  3864  002584                     l271:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 435: }
  3868                           ;doprnt.c: 436: if(scl>=110)
  3869                           
  3870                           ; BSR set to: 0
  3871  002584  5199               	movf	scale@scl& (0+255),w,b
  3872  002586  0A80               	xorlw	128
  3873  002588  0F12               	addlw	-238
  3874  00258A  A0D8               	btfss	status,0,c
  3875  00258C  D09A               	goto	l276
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3879  00258E  0E00               	movlw	0
  3880  002590  6E37               	movwf	___awdiv@divisor+1,c
  3881  002592  0E0A               	movlw	10
  3882  002594  6E36               	movwf	___awdiv@divisor,c
  3883  002596  0E00               	movlw	0
  3884  002598  6E31               	movwf	___awmod@divisor+1,c
  3885  00259A  0E64               	movlw	100
  3886  00259C  6E30               	movwf	___awmod@divisor,c
  3887  00259E  5199               	movf	scale@scl& (0+255),w,b
  3888  0025A0  6E2E               	movwf	___awmod@dividend,c
  3889  0025A2  6A2F               	clrf	___awmod@dividend+1,c
  3890  0025A4  BE2E               	btfsc	___awmod@dividend,7,c
  3891  0025A6  062F               	decf	___awmod@dividend+1,f,c
  3892  0025A8  EC21  F01F         	call	___awmod	;wreg free
  3893  0025AC  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3894  0025B0  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3895  0025B4  EC9E  F01E         	call	___awdiv	;wreg free
  3896  0025B8  90D8               	bcf	status,0,c
  3897  0025BA  3634               	rlcf	?___awdiv,f,c
  3898  0025BC  3635               	rlcf	?___awdiv+1,f,c
  3899  0025BE  90D8               	bcf	status,0,c
  3900  0025C0  3634               	rlcf	?___awdiv,f,c
  3901  0025C2  3635               	rlcf	?___awdiv+1,f,c
  3902  0025C4  0E24               	movlw	36
  3903  0025C6  2634               	addwf	?___awdiv,f,c
  3904  0025C8  0E00               	movlw	0
  3905  0025CA  2235               	addwfc	?___awdiv+1,f,c
  3906  0025CC  0E01               	movlw	low __powers_
  3907  0025CE  2434               	addwf	?___awdiv,w,c
  3908  0025D0  6EF6               	movwf	tblptrl,c
  3909  0025D2  0E06               	movlw	high __powers_
  3910  0025D4  2035               	addwfc	?___awdiv+1,w,c
  3911  0025D6  6EF7               	movwf	tblptrh,c
  3912  0025D8                     	if	0	;There are less than 3 active tblptr bytes
  3913  0025D8                     	endif
  3914  0025D8  0009               	tblrd		*+
  3915  0025DA  CFF5 F040          	movff	tablat,___flmul@a
  3916  0025DE  0009               	tblrd		*+
  3917  0025E0  CFF5 F041          	movff	tablat,___flmul@a+1
  3918  0025E4  0009               	tblrd		*+
  3919  0025E6  CFF5 F042          	movff	tablat,___flmul@a+2
  3920  0025EA  000A               	tblrd		*-
  3921  0025EC  CFF5 F043          	movff	tablat,___flmul@a+3
  3922  0025F0  0E00               	movlw	0
  3923  0025F2  6E37               	movwf	___awdiv@divisor+1,c
  3924  0025F4  0E64               	movlw	100
  3925  0025F6  6E36               	movwf	___awdiv@divisor,c
  3926  0025F8  0100               	movlb	0	; () banked
  3927  0025FA  5199               	movf	scale@scl& (0+255),w,b
  3928  0025FC  6E34               	movwf	___awdiv@dividend,c
  3929  0025FE  6A35               	clrf	___awdiv@dividend+1,c
  3930  002600  BE34               	btfsc	___awdiv@dividend,7,c
  3931  002602  0635               	decf	___awdiv@dividend+1,f,c
  3932  002604  EC9E  F01E         	call	___awdiv	;wreg free
  3933  002608  90D8               	bcf	status,0,c
  3934  00260A  3634               	rlcf	?___awdiv,f,c
  3935  00260C  3635               	rlcf	?___awdiv+1,f,c
  3936  00260E  90D8               	bcf	status,0,c
  3937  002610  3634               	rlcf	?___awdiv,f,c
  3938  002612  3635               	rlcf	?___awdiv+1,f,c
  3939  002614  0E48               	movlw	72
  3940  002616  2634               	addwf	?___awdiv,f,c
  3941  002618  0E00               	movlw	0
  3942  00261A  2235               	addwfc	?___awdiv+1,f,c
  3943  00261C  0E01               	movlw	low __powers_
  3944  00261E  2434               	addwf	?___awdiv,w,c
  3945  002620  6EF6               	movwf	tblptrl,c
  3946  002622  0E06               	movlw	high __powers_
  3947  002624  2035               	addwfc	?___awdiv+1,w,c
  3948  002626  6EF7               	movwf	tblptrh,c
  3949  002628                     	if	0	;There are less than 3 active tblptr bytes
  3950  002628                     	endif
  3951  002628  0009               	tblrd		*+
  3952  00262A  CFF5 F03C          	movff	tablat,___flmul@b
  3953  00262E  0009               	tblrd		*+
  3954  002630  CFF5 F03D          	movff	tablat,___flmul@b+1
  3955  002634  0009               	tblrd		*+
  3956  002636  CFF5 F03E          	movff	tablat,___flmul@b+2
  3957  00263A  000A               	tblrd		*-
  3958  00263C  CFF5 F03F          	movff	tablat,___flmul@b+3
  3959  002640  ECD3  F013         	call	___flmul	;wreg free
  3960  002644  C03C  F095         	movff	?___flmul,_scale$918
  3961  002648  C03D  F096         	movff	?___flmul+1,_scale$918+1
  3962  00264C  C03E  F097         	movff	?___flmul+2,_scale$918+2
  3963  002650  C03F  F098         	movff	?___flmul+3,_scale$918+3
  3964                           
  3965                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3966  002654  C095  F03C         	movff	_scale$918,___flmul@b
  3967  002658  C096  F03D         	movff	_scale$918+1,___flmul@b+1
  3968  00265C  C097  F03E         	movff	_scale$918+2,___flmul@b+2
  3969  002660  C098  F03F         	movff	_scale$918+3,___flmul@b+3
  3970  002664  0E00               	movlw	0
  3971  002666  6E31               	movwf	___awmod@divisor+1,c
  3972  002668  0E0A               	movlw	10
  3973  00266A  6E30               	movwf	___awmod@divisor,c
  3974  00266C  0100               	movlb	0	; () banked
  3975  00266E  5199               	movf	scale@scl& (0+255),w,b
  3976  002670  6E2E               	movwf	___awmod@dividend,c
  3977  002672  6A2F               	clrf	___awmod@dividend+1,c
  3978  002674  BE2E               	btfsc	___awmod@dividend,7,c
  3979  002676  062F               	decf	___awmod@dividend+1,f,c
  3980  002678  EC21  F01F         	call	___awmod	;wreg free
  3981  00267C  90D8               	bcf	status,0,c
  3982  00267E  362E               	rlcf	?___awmod,f,c
  3983  002680  362F               	rlcf	?___awmod+1,f,c
  3984  002682  90D8               	bcf	status,0,c
  3985  002684  362E               	rlcf	?___awmod,f,c
  3986  002686  362F               	rlcf	?___awmod+1,f,c
  3987  002688  0E01               	movlw	low __powers_
  3988  00268A  242E               	addwf	?___awmod,w,c
  3989  00268C  6EF6               	movwf	tblptrl,c
  3990  00268E  0E06               	movlw	high __powers_
  3991  002690  202F               	addwfc	?___awmod+1,w,c
  3992  002692  6EF7               	movwf	tblptrh,c
  3993  002694                     	if	0	;There are less than 3 active tblptr bytes
  3994  002694                     	endif
  3995  002694  0009               	tblrd		*+
  3996  002696  CFF5 F040          	movff	tablat,___flmul@a
  3997  00269A  0009               	tblrd		*+
  3998  00269C  CFF5 F041          	movff	tablat,___flmul@a+1
  3999  0026A0  0009               	tblrd		*+
  4000  0026A2  CFF5 F042          	movff	tablat,___flmul@a+2
  4001  0026A6  000A               	tblrd		*-
  4002  0026A8  CFF5 F043          	movff	tablat,___flmul@a+3
  4003  0026AC  ECD3  F013         	call	___flmul	;wreg free
  4004  0026B0  C03C  F091         	movff	?___flmul,?_scale
  4005  0026B4  C03D  F092         	movff	?___flmul+1,?_scale+1
  4006  0026B8  C03E  F093         	movff	?___flmul+2,?_scale+2
  4007  0026BC  C03F  F094         	movff	?___flmul+3,?_scale+3
  4008  0026C0  0012               	return	
  4009  0026C2                     l276:
  4010                           
  4011                           ;doprnt.c: 438: else if(scl > 10)
  4012  0026C2  0100               	movlb	0	; () banked
  4013  0026C4  5199               	movf	scale@scl& (0+255),w,b
  4014  0026C6  0A80               	xorlw	128
  4015  0026C8  0F75               	addlw	-139
  4016  0026CA  A0D8               	btfss	status,0,c
  4017  0026CC  D056               	goto	l278
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4021  0026CE  0E00               	movlw	0
  4022  0026D0  6E37               	movwf	___awdiv@divisor+1,c
  4023  0026D2  0E0A               	movlw	10
  4024  0026D4  6E36               	movwf	___awdiv@divisor,c
  4025  0026D6  5199               	movf	scale@scl& (0+255),w,b
  4026  0026D8  6E34               	movwf	___awdiv@dividend,c
  4027  0026DA  6A35               	clrf	___awdiv@dividend+1,c
  4028  0026DC  BE34               	btfsc	___awdiv@dividend,7,c
  4029  0026DE  0635               	decf	___awdiv@dividend+1,f,c
  4030  0026E0  EC9E  F01E         	call	___awdiv	;wreg free
  4031  0026E4  90D8               	bcf	status,0,c
  4032  0026E6  3634               	rlcf	?___awdiv,f,c
  4033  0026E8  3635               	rlcf	?___awdiv+1,f,c
  4034  0026EA  90D8               	bcf	status,0,c
  4035  0026EC  3634               	rlcf	?___awdiv,f,c
  4036  0026EE  3635               	rlcf	?___awdiv+1,f,c
  4037  0026F0  0E24               	movlw	36
  4038  0026F2  2634               	addwf	?___awdiv,f,c
  4039  0026F4  0E00               	movlw	0
  4040  0026F6  2235               	addwfc	?___awdiv+1,f,c
  4041  0026F8  0E01               	movlw	low __powers_
  4042  0026FA  2434               	addwf	?___awdiv,w,c
  4043  0026FC  6EF6               	movwf	tblptrl,c
  4044  0026FE  0E06               	movlw	high __powers_
  4045  002700  2035               	addwfc	?___awdiv+1,w,c
  4046  002702  6EF7               	movwf	tblptrh,c
  4047  002704                     	if	0	;There are less than 3 active tblptr bytes
  4048  002704                     	endif
  4049  002704  0009               	tblrd		*+
  4050  002706  CFF5 F03C          	movff	tablat,___flmul@b
  4051  00270A  0009               	tblrd		*+
  4052  00270C  CFF5 F03D          	movff	tablat,___flmul@b+1
  4053  002710  0009               	tblrd		*+
  4054  002712  CFF5 F03E          	movff	tablat,___flmul@b+2
  4055  002716  000A               	tblrd		*-
  4056  002718  CFF5 F03F          	movff	tablat,___flmul@b+3
  4057  00271C  0E00               	movlw	0
  4058  00271E  6E31               	movwf	___awmod@divisor+1,c
  4059  002720  0E0A               	movlw	10
  4060  002722  6E30               	movwf	___awmod@divisor,c
  4061  002724  0100               	movlb	0	; () banked
  4062  002726  5199               	movf	scale@scl& (0+255),w,b
  4063  002728  6E2E               	movwf	___awmod@dividend,c
  4064  00272A  6A2F               	clrf	___awmod@dividend+1,c
  4065  00272C  BE2E               	btfsc	___awmod@dividend,7,c
  4066  00272E  062F               	decf	___awmod@dividend+1,f,c
  4067  002730  EC21  F01F         	call	___awmod	;wreg free
  4068  002734  90D8               	bcf	status,0,c
  4069  002736  362E               	rlcf	?___awmod,f,c
  4070  002738  362F               	rlcf	?___awmod+1,f,c
  4071  00273A  90D8               	bcf	status,0,c
  4072  00273C  362E               	rlcf	?___awmod,f,c
  4073  00273E  362F               	rlcf	?___awmod+1,f,c
  4074  002740  0E01               	movlw	low __powers_
  4075  002742  242E               	addwf	?___awmod,w,c
  4076  002744  6EF6               	movwf	tblptrl,c
  4077  002746  0E06               	movlw	high __powers_
  4078  002748  202F               	addwfc	?___awmod+1,w,c
  4079  00274A  6EF7               	movwf	tblptrh,c
  4080  00274C                     	if	0	;There are less than 3 active tblptr bytes
  4081  00274C                     	endif
  4082  00274C  0009               	tblrd		*+
  4083  00274E  CFF5 F040          	movff	tablat,___flmul@a
  4084  002752  0009               	tblrd		*+
  4085  002754  CFF5 F041          	movff	tablat,___flmul@a+1
  4086  002758  0009               	tblrd		*+
  4087  00275A  CFF5 F042          	movff	tablat,___flmul@a+2
  4088  00275E  000A               	tblrd		*-
  4089  002760  CFF5 F043          	movff	tablat,___flmul@a+3
  4090  002764  ECD3  F013         	call	___flmul	;wreg free
  4091  002768  C03C  F091         	movff	?___flmul,?_scale
  4092  00276C  C03D  F092         	movff	?___flmul+1,?_scale+1
  4093  002770  C03E  F093         	movff	?___flmul+2,?_scale+2
  4094  002774  C03F  F094         	movff	?___flmul+3,?_scale+3
  4095  002778  0012               	return	
  4096  00277A                     l278:
  4097                           
  4098                           ;doprnt.c: 440: return _powers_[scl];
  4099  00277A  0100               	movlb	0	; () banked
  4100  00277C  5199               	movf	scale@scl& (0+255),w,b
  4101  00277E  0D04               	mullw	4
  4102  002780  0E01               	movlw	low __powers_
  4103  002782  24F3               	addwf	prodl,w,c
  4104  002784  6EF6               	movwf	tblptrl,c
  4105  002786  0E06               	movlw	high __powers_
  4106  002788  20F4               	addwfc	prodh,w,c
  4107  00278A  6EF7               	movwf	tblptrh,c
  4108  00278C                     	if	0	;There are less than 3 active tblptr bytes
  4109  00278C                     	endif
  4110  00278C  0009               	tblrd		*+
  4111  00278E  CFF5 F091          	movff	tablat,?_scale
  4112  002792  0009               	tblrd		*+
  4113  002794  CFF5 F092          	movff	tablat,?_scale+1
  4114  002798  0009               	tblrd		*+
  4115  00279A  CFF5 F093          	movff	tablat,?_scale+2
  4116  00279E  000A               	tblrd		*-
  4117  0027A0  CFF5 F094          	movff	tablat,?_scale+3
  4118  0027A4  0012               	return	
  4119  0027A6                     __end_of_scale:
  4120                           	opt stack 0
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           intcon	equ	0xFF2
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _isdigit *****************
  4137 ;; Defined at:
  4138 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  c               1    wreg     unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  c               1   47[COMRAM] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;		None               void
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4152 ;;      Params:         0       0       0       0       0       0       0
  4153 ;;      Locals:         2       0       0       0       0       0       0
  4154 ;;      Temps:          1       0       0       0       0       0       0
  4155 ;;      Totals:         3       0       0       0       0       0       0
  4156 ;;Total ram usage:        3 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    2
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_sprintf
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text3
  4167  0041D6                     __ptext3:
  4168                           	opt stack 0
  4169  0041D6                     _isdigit:
  4170                           	opt stack 27
  4171                           
  4172                           ;incstack = 0
  4173                           ;isdigit@c stored from wreg
  4174  0041D6  6E30               	movwf	isdigit@c,c
  4175  0041D8  0E00               	movlw	0
  4176  0041DA  6E2F               	movwf	_isdigit$561,c
  4177  0041DC  0E3A               	movlw	58
  4178  0041DE  6030               	cpfslt	isdigit@c,c
  4179  0041E0  D005               	goto	l720
  4180  0041E2  0E2F               	movlw	47
  4181  0041E4  6430               	cpfsgt	isdigit@c,c
  4182  0041E6  D002               	goto	l720
  4183  0041E8  0E01               	movlw	1
  4184  0041EA  6E2F               	movwf	_isdigit$561,c
  4185  0041EC                     l720:
  4186  0041EC  C02F  F02E         	movff	_isdigit$561,??_isdigit
  4187  0041F0  302E               	rrcf	??_isdigit,w,c
  4188  0041F2  0012               	return	
  4189  0041F4                     __end_of_isdigit:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _fround *****************
  4207 ;; Defined at:
  4208 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  prec            1    wreg     unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  prec            1   29[BANK0 ] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  4   17[BANK0 ] unsigned char 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4222 ;;      Params:         0       4       0       0       0       0       0
  4223 ;;      Locals:         0       9       0       0       0       0       0
  4224 ;;      Temps:          0       0       0       0       0       0       0
  4225 ;;      Totals:         0      13       0       0       0       0       0
  4226 ;;Total ram usage:       13 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    3
  4229 ;; This function calls:
  4230 ;;		___awdiv
  4231 ;;		___awmod
  4232 ;;		___flmul
  4233 ;; This function is called by:
  4234 ;;		_sprintf
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text4
  4239  0030EC                     __ptext4:
  4240                           	opt stack 0
  4241  0030EC                     _fround:
  4242                           	opt stack 26
  4243                           
  4244                           ;incstack = 0
  4245                           ;fround@prec stored from wreg
  4246  0030EC  0100               	movlb	0	; () banked
  4247  0030EE  6F9D               	movwf	fround@prec& (0+255),b
  4248                           
  4249                           ;doprnt.c: 413: if(prec>=110)
  4250  0030F0  0E6D               	movlw	109
  4251  0030F2  0100               	movlb	0	; () banked
  4252  0030F4  659D               	cpfsgt	fround@prec& (0+255),b
  4253  0030F6  D0AC               	goto	l265
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4257  0030F8  0E00               	movlw	0
  4258  0030FA  6E37               	movwf	___awdiv@divisor+1,c
  4259  0030FC  0E0A               	movlw	10
  4260  0030FE  6E36               	movwf	___awdiv@divisor,c
  4261  003100  0E00               	movlw	0
  4262  003102  6E31               	movwf	___awmod@divisor+1,c
  4263  003104  0E64               	movlw	100
  4264  003106  6E30               	movwf	___awmod@divisor,c
  4265  003108  C09D  F02E         	movff	fround@prec,___awmod@dividend
  4266  00310C  6A2F               	clrf	___awmod@dividend+1,c
  4267  00310E  EC21  F01F         	call	___awmod	;wreg free
  4268  003112  C02E  F034         	movff	?___awmod,___awdiv@dividend
  4269  003116  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  4270  00311A  EC9E  F01E         	call	___awdiv	;wreg free
  4271  00311E  90D8               	bcf	status,0,c
  4272  003120  3634               	rlcf	?___awdiv,f,c
  4273  003122  3635               	rlcf	?___awdiv+1,f,c
  4274  003124  90D8               	bcf	status,0,c
  4275  003126  3634               	rlcf	?___awdiv,f,c
  4276  003128  3635               	rlcf	?___awdiv+1,f,c
  4277  00312A  0E24               	movlw	36
  4278  00312C  2634               	addwf	?___awdiv,f,c
  4279  00312E  0E00               	movlw	0
  4280  003130  2235               	addwfc	?___awdiv+1,f,c
  4281  003132  0E35               	movlw	low __npowers_
  4282  003134  2434               	addwf	?___awdiv,w,c
  4283  003136  6EF6               	movwf	tblptrl,c
  4284  003138  0E06               	movlw	high __npowers_
  4285  00313A  2035               	addwfc	?___awdiv+1,w,c
  4286  00313C  6EF7               	movwf	tblptrh,c
  4287  00313E                     	if	0	;There are less than 3 active tblptr bytes
  4288  00313E                     	endif
  4289  00313E  0009               	tblrd		*+
  4290  003140  CFF5 F040          	movff	tablat,___flmul@a
  4291  003144  0009               	tblrd		*+
  4292  003146  CFF5 F041          	movff	tablat,___flmul@a+1
  4293  00314A  0009               	tblrd		*+
  4294  00314C  CFF5 F042          	movff	tablat,___flmul@a+2
  4295  003150  000A               	tblrd		*-
  4296  003152  CFF5 F043          	movff	tablat,___flmul@a+3
  4297  003156  0E00               	movlw	0
  4298  003158  6E37               	movwf	___awdiv@divisor+1,c
  4299  00315A  0E64               	movlw	100
  4300  00315C  6E36               	movwf	___awdiv@divisor,c
  4301  00315E  C09D  F034         	movff	fround@prec,___awdiv@dividend
  4302  003162  6A35               	clrf	___awdiv@dividend+1,c
  4303  003164  EC9E  F01E         	call	___awdiv	;wreg free
  4304  003168  90D8               	bcf	status,0,c
  4305  00316A  3634               	rlcf	?___awdiv,f,c
  4306  00316C  3635               	rlcf	?___awdiv+1,f,c
  4307  00316E  90D8               	bcf	status,0,c
  4308  003170  3634               	rlcf	?___awdiv,f,c
  4309  003172  3635               	rlcf	?___awdiv+1,f,c
  4310  003174  0E48               	movlw	72
  4311  003176  2634               	addwf	?___awdiv,f,c
  4312  003178  0E00               	movlw	0
  4313  00317A  2235               	addwfc	?___awdiv+1,f,c
  4314  00317C  0E35               	movlw	low __npowers_
  4315  00317E  2434               	addwf	?___awdiv,w,c
  4316  003180  6EF6               	movwf	tblptrl,c
  4317  003182  0E06               	movlw	high __npowers_
  4318  003184  2035               	addwfc	?___awdiv+1,w,c
  4319  003186  6EF7               	movwf	tblptrh,c
  4320  003188                     	if	0	;There are less than 3 active tblptr bytes
  4321  003188                     	endif
  4322  003188  0009               	tblrd		*+
  4323  00318A  CFF5 F03C          	movff	tablat,___flmul@b
  4324  00318E  0009               	tblrd		*+
  4325  003190  CFF5 F03D          	movff	tablat,___flmul@b+1
  4326  003194  0009               	tblrd		*+
  4327  003196  CFF5 F03E          	movff	tablat,___flmul@b+2
  4328  00319A  000A               	tblrd		*-
  4329  00319C  CFF5 F03F          	movff	tablat,___flmul@b+3
  4330  0031A0  ECD3  F013         	call	___flmul	;wreg free
  4331  0031A4  C03C  F099         	movff	?___flmul,_fround$916
  4332  0031A8  C03D  F09A         	movff	?___flmul+1,_fround$916+1
  4333  0031AC  C03E  F09B         	movff	?___flmul+2,_fround$916+2
  4334  0031B0  C03F  F09C         	movff	?___flmul+3,_fround$916+3
  4335                           
  4336                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4337  0031B4  0E00               	movlw	0
  4338  0031B6  6E31               	movwf	___awmod@divisor+1,c
  4339  0031B8  0E0A               	movlw	10
  4340  0031BA  6E30               	movwf	___awmod@divisor,c
  4341  0031BC  C09D  F02E         	movff	fround@prec,___awmod@dividend
  4342  0031C0  6A2F               	clrf	___awmod@dividend+1,c
  4343  0031C2  EC21  F01F         	call	___awmod	;wreg free
  4344  0031C6  90D8               	bcf	status,0,c
  4345  0031C8  362E               	rlcf	?___awmod,f,c
  4346  0031CA  362F               	rlcf	?___awmod+1,f,c
  4347  0031CC  90D8               	bcf	status,0,c
  4348  0031CE  362E               	rlcf	?___awmod,f,c
  4349  0031D0  362F               	rlcf	?___awmod+1,f,c
  4350  0031D2  0E35               	movlw	low __npowers_
  4351  0031D4  242E               	addwf	?___awmod,w,c
  4352  0031D6  6EF6               	movwf	tblptrl,c
  4353  0031D8  0E06               	movlw	high __npowers_
  4354  0031DA  202F               	addwfc	?___awmod+1,w,c
  4355  0031DC  6EF7               	movwf	tblptrh,c
  4356  0031DE                     	if	0	;There are less than 3 active tblptr bytes
  4357  0031DE                     	endif
  4358  0031DE  0009               	tblrd		*+
  4359  0031E0  CFF5 F040          	movff	tablat,___flmul@a
  4360  0031E4  0009               	tblrd		*+
  4361  0031E6  CFF5 F041          	movff	tablat,___flmul@a+1
  4362  0031EA  0009               	tblrd		*+
  4363  0031EC  CFF5 F042          	movff	tablat,___flmul@a+2
  4364  0031F0  000A               	tblrd		*-
  4365  0031F2  CFF5 F043          	movff	tablat,___flmul@a+3
  4366  0031F6  C099  F03C         	movff	_fround$916,___flmul@b
  4367  0031FA  C09A  F03D         	movff	_fround$916+1,___flmul@b+1
  4368  0031FE  C09B  F03E         	movff	_fround$916+2,___flmul@b+2
  4369  003202  C09C  F03F         	movff	_fround$916+3,___flmul@b+3
  4370  003206  ECD3  F013         	call	___flmul	;wreg free
  4371  00320A  C03C  F095         	movff	?___flmul,_fround$917
  4372  00320E  C03D  F096         	movff	?___flmul+1,_fround$917+1
  4373  003212  C03E  F097         	movff	?___flmul+2,_fround$917+2
  4374  003216  C03F  F098         	movff	?___flmul+3,_fround$917+3
  4375                           
  4376                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4377  00321A  C095  F03C         	movff	_fround$917,___flmul@b
  4378  00321E  C096  F03D         	movff	_fround$917+1,___flmul@b+1
  4379  003222  C097  F03E         	movff	_fround$917+2,___flmul@b+2
  4380  003226  C098  F03F         	movff	_fround$917+3,___flmul@b+3
  4381  00322A  0E00               	movlw	0
  4382  00322C  6E40               	movwf	___flmul@a,c
  4383  00322E  0E00               	movlw	0
  4384  003230  6E41               	movwf	___flmul@a+1,c
  4385  003232  0E00               	movlw	0
  4386  003234  6E42               	movwf	___flmul@a+2,c
  4387  003236  0E3F               	movlw	63
  4388  003238  6E43               	movwf	___flmul@a+3,c
  4389  00323A  ECD3  F013         	call	___flmul	;wreg free
  4390  00323E  C03C  F091         	movff	?___flmul,?_fround
  4391  003242  C03D  F092         	movff	?___flmul+1,?_fround+1
  4392  003246  C03E  F093         	movff	?___flmul+2,?_fround+2
  4393  00324A  C03F  F094         	movff	?___flmul+3,?_fround+3
  4394  00324E  0012               	return	
  4395  003250                     l265:
  4396                           
  4397                           ;doprnt.c: 415: else if(prec > 10)
  4398  003250  0E0A               	movlw	10
  4399  003252  0100               	movlb	0	; () banked
  4400  003254  659D               	cpfsgt	fround@prec& (0+255),b
  4401  003256  D06B               	goto	l268
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4405  003258  0E00               	movlw	0
  4406  00325A  6E31               	movwf	___awmod@divisor+1,c
  4407  00325C  0E0A               	movlw	10
  4408  00325E  6E30               	movwf	___awmod@divisor,c
  4409  003260  C09D  F02E         	movff	fround@prec,___awmod@dividend
  4410  003264  6A2F               	clrf	___awmod@dividend+1,c
  4411  003266  EC21  F01F         	call	___awmod	;wreg free
  4412  00326A  90D8               	bcf	status,0,c
  4413  00326C  362E               	rlcf	?___awmod,f,c
  4414  00326E  362F               	rlcf	?___awmod+1,f,c
  4415  003270  90D8               	bcf	status,0,c
  4416  003272  362E               	rlcf	?___awmod,f,c
  4417  003274  362F               	rlcf	?___awmod+1,f,c
  4418  003276  0E35               	movlw	low __npowers_
  4419  003278  242E               	addwf	?___awmod,w,c
  4420  00327A  6EF6               	movwf	tblptrl,c
  4421  00327C  0E06               	movlw	high __npowers_
  4422  00327E  202F               	addwfc	?___awmod+1,w,c
  4423  003280  6EF7               	movwf	tblptrh,c
  4424  003282                     	if	0	;There are less than 3 active tblptr bytes
  4425  003282                     	endif
  4426  003282  0009               	tblrd		*+
  4427  003284  CFF5 F040          	movff	tablat,___flmul@a
  4428  003288  0009               	tblrd		*+
  4429  00328A  CFF5 F041          	movff	tablat,___flmul@a+1
  4430  00328E  0009               	tblrd		*+
  4431  003290  CFF5 F042          	movff	tablat,___flmul@a+2
  4432  003294  000A               	tblrd		*-
  4433  003296  CFF5 F043          	movff	tablat,___flmul@a+3
  4434  00329A  0E00               	movlw	0
  4435  00329C  6E37               	movwf	___awdiv@divisor+1,c
  4436  00329E  0E0A               	movlw	10
  4437  0032A0  6E36               	movwf	___awdiv@divisor,c
  4438  0032A2  C09D  F034         	movff	fround@prec,___awdiv@dividend
  4439  0032A6  6A35               	clrf	___awdiv@dividend+1,c
  4440  0032A8  EC9E  F01E         	call	___awdiv	;wreg free
  4441  0032AC  90D8               	bcf	status,0,c
  4442  0032AE  3634               	rlcf	?___awdiv,f,c
  4443  0032B0  3635               	rlcf	?___awdiv+1,f,c
  4444  0032B2  90D8               	bcf	status,0,c
  4445  0032B4  3634               	rlcf	?___awdiv,f,c
  4446  0032B6  3635               	rlcf	?___awdiv+1,f,c
  4447  0032B8  0E24               	movlw	36
  4448  0032BA  2634               	addwf	?___awdiv,f,c
  4449  0032BC  0E00               	movlw	0
  4450  0032BE  2235               	addwfc	?___awdiv+1,f,c
  4451  0032C0  0E35               	movlw	low __npowers_
  4452  0032C2  2434               	addwf	?___awdiv,w,c
  4453  0032C4  6EF6               	movwf	tblptrl,c
  4454  0032C6  0E06               	movlw	high __npowers_
  4455  0032C8  2035               	addwfc	?___awdiv+1,w,c
  4456  0032CA  6EF7               	movwf	tblptrh,c
  4457  0032CC                     	if	0	;There are less than 3 active tblptr bytes
  4458  0032CC                     	endif
  4459  0032CC  0009               	tblrd		*+
  4460  0032CE  CFF5 F03C          	movff	tablat,___flmul@b
  4461  0032D2  0009               	tblrd		*+
  4462  0032D4  CFF5 F03D          	movff	tablat,___flmul@b+1
  4463  0032D8  0009               	tblrd		*+
  4464  0032DA  CFF5 F03E          	movff	tablat,___flmul@b+2
  4465  0032DE  000A               	tblrd		*-
  4466  0032E0  CFF5 F03F          	movff	tablat,___flmul@b+3
  4467  0032E4  ECD3  F013         	call	___flmul	;wreg free
  4468  0032E8  C03C  F099         	movff	?___flmul,_fround$916
  4469  0032EC  C03D  F09A         	movff	?___flmul+1,_fround$916+1
  4470  0032F0  C03E  F09B         	movff	?___flmul+2,_fround$916+2
  4471  0032F4  C03F  F09C         	movff	?___flmul+3,_fround$916+3
  4472                           
  4473                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4474  0032F8  C099  F03C         	movff	_fround$916,___flmul@b
  4475  0032FC  C09A  F03D         	movff	_fround$916+1,___flmul@b+1
  4476  003300  C09B  F03E         	movff	_fround$916+2,___flmul@b+2
  4477  003304  C09C  F03F         	movff	_fround$916+3,___flmul@b+3
  4478  003308  0E00               	movlw	0
  4479  00330A  6E40               	movwf	___flmul@a,c
  4480  00330C  0E00               	movlw	0
  4481  00330E  6E41               	movwf	___flmul@a+1,c
  4482  003310  0E00               	movlw	0
  4483  003312  6E42               	movwf	___flmul@a+2,c
  4484  003314  0E3F               	movlw	63
  4485  003316  6E43               	movwf	___flmul@a+3,c
  4486  003318  ECD3  F013         	call	___flmul	;wreg free
  4487  00331C  C03C  F091         	movff	?___flmul,?_fround
  4488  003320  C03D  F092         	movff	?___flmul+1,?_fround+1
  4489  003324  C03E  F093         	movff	?___flmul+2,?_fround+2
  4490  003328  C03F  F094         	movff	?___flmul+3,?_fround+3
  4491  00332C  0012               	return	
  4492  00332E                     l268:
  4493                           
  4494                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4495  00332E  0100               	movlb	0	; () banked
  4496  003330  519D               	movf	fround@prec& (0+255),w,b
  4497  003332  0D04               	mullw	4
  4498  003334  0E35               	movlw	low __npowers_
  4499  003336  24F3               	addwf	prodl,w,c
  4500  003338  6EF6               	movwf	tblptrl,c
  4501  00333A  0E06               	movlw	high __npowers_
  4502  00333C  20F4               	addwfc	prodh,w,c
  4503  00333E  6EF7               	movwf	tblptrh,c
  4504  003340                     	if	0	;There are less than 3 active tblptr bytes
  4505  003340                     	endif
  4506  003340  0009               	tblrd		*+
  4507  003342  CFF5 F03C          	movff	tablat,___flmul@b
  4508  003346  0009               	tblrd		*+
  4509  003348  CFF5 F03D          	movff	tablat,___flmul@b+1
  4510  00334C  0009               	tblrd		*+
  4511  00334E  CFF5 F03E          	movff	tablat,___flmul@b+2
  4512  003352  000A               	tblrd		*-
  4513  003354  CFF5 F03F          	movff	tablat,___flmul@b+3
  4514  003358  0E00               	movlw	0
  4515  00335A  6E40               	movwf	___flmul@a,c
  4516  00335C  0E00               	movlw	0
  4517  00335E  6E41               	movwf	___flmul@a+1,c
  4518  003360  0E00               	movlw	0
  4519  003362  6E42               	movwf	___flmul@a+2,c
  4520  003364  0E3F               	movlw	63
  4521  003366  6E43               	movwf	___flmul@a+3,c
  4522  003368  ECD3  F013         	call	___flmul	;wreg free
  4523  00336C  C03C  F091         	movff	?___flmul,?_fround
  4524  003370  C03D  F092         	movff	?___flmul+1,?_fround+1
  4525  003374  C03E  F093         	movff	?___flmul+2,?_fround+2
  4526  003378  C03F  F094         	movff	?___flmul+3,?_fround+3
  4527  00337C  0012               	return	
  4528  00337E                     __end_of_fround:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function ___awmod *****************
  4546 ;; Defined at:
  4547 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  dividend        2   45[COMRAM] int 
  4550 ;;  divisor         2   47[COMRAM] int 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  sign            1   50[COMRAM] unsigned char 
  4553 ;;  counter         1   49[COMRAM] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  2   45[COMRAM] int 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4563 ;;      Params:         4       0       0       0       0       0       0
  4564 ;;      Locals:         2       0       0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0
  4566 ;;      Totals:         6       0       0       0       0       0       0
  4567 ;;Total ram usage:        6 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    2
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_fround
  4574 ;;		_scale
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text5
  4579  003E42                     __ptext5:
  4580                           	opt stack 0
  4581  003E42                     ___awmod:
  4582                           	opt stack 26
  4583                           
  4584                           ;incstack = 0
  4585  003E42  0E00               	movlw	0
  4586  003E44  6E33               	movwf	___awmod@sign,c
  4587  003E46  AE2F               	btfss	___awmod@dividend+1,7,c
  4588  003E48  D006               	goto	l537
  4589  003E4A  6C2E               	negf	___awmod@dividend,c
  4590  003E4C  1E2F               	comf	___awmod@dividend+1,f,c
  4591  003E4E  B0D8               	btfsc	status,0,c
  4592  003E50  2A2F               	incf	___awmod@dividend+1,f,c
  4593  003E52  0E01               	movlw	1
  4594  003E54  6E33               	movwf	___awmod@sign,c
  4595  003E56                     l537:
  4596  003E56  AE31               	btfss	___awmod@divisor+1,7,c
  4597  003E58  D004               	goto	l538
  4598  003E5A  6C30               	negf	___awmod@divisor,c
  4599  003E5C  1E31               	comf	___awmod@divisor+1,f,c
  4600  003E5E  B0D8               	btfsc	status,0,c
  4601  003E60  2A31               	incf	___awmod@divisor+1,f,c
  4602  003E62                     l538:
  4603  003E62  5030               	movf	___awmod@divisor,w,c
  4604  003E64  1031               	iorwf	___awmod@divisor+1,w,c
  4605  003E66  B4D8               	btfsc	status,2,c
  4606  003E68  D018               	goto	l545
  4607  003E6A  0E01               	movlw	1
  4608  003E6C  6E32               	movwf	___awmod@counter,c
  4609  003E6E  D004               	goto	l540
  4610  003E70  90D8               	bcf	status,0,c
  4611  003E72  3630               	rlcf	___awmod@divisor,f,c
  4612  003E74  3631               	rlcf	___awmod@divisor+1,f,c
  4613  003E76  2A32               	incf	___awmod@counter,f,c
  4614  003E78                     l540:
  4615  003E78  AE31               	btfss	___awmod@divisor+1,7,c
  4616  003E7A  D7FA               	goto	l541
  4617  003E7C                     u5240:
  4618  003E7C  5030               	movf	___awmod@divisor,w,c
  4619  003E7E  5C2E               	subwf	___awmod@dividend,w,c
  4620  003E80  5031               	movf	___awmod@divisor+1,w,c
  4621  003E82  582F               	subwfb	___awmod@dividend+1,w,c
  4622  003E84  A0D8               	btfss	status,0,c
  4623  003E86  D004               	goto	l544
  4624  003E88  5030               	movf	___awmod@divisor,w,c
  4625  003E8A  5E2E               	subwf	___awmod@dividend,f,c
  4626  003E8C  5031               	movf	___awmod@divisor+1,w,c
  4627  003E8E  5A2F               	subwfb	___awmod@dividend+1,f,c
  4628  003E90                     l544:
  4629  003E90  90D8               	bcf	status,0,c
  4630  003E92  3231               	rrcf	___awmod@divisor+1,f,c
  4631  003E94  3230               	rrcf	___awmod@divisor,f,c
  4632  003E96  2E32               	decfsz	___awmod@counter,f,c
  4633  003E98  D7F1               	goto	u5240
  4634  003E9A                     l545:
  4635  003E9A  5033               	movf	___awmod@sign,w,c
  4636  003E9C  B4D8               	btfsc	status,2,c
  4637  003E9E  D004               	goto	l546
  4638  003EA0  6C2E               	negf	___awmod@dividend,c
  4639  003EA2  1E2F               	comf	___awmod@dividend+1,f,c
  4640  003EA4  B0D8               	btfsc	status,0,c
  4641  003EA6  2A2F               	incf	___awmod@dividend+1,f,c
  4642  003EA8                     l546:
  4643  003EA8  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4644  003EAC  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4645  003EB0  0012               	return	
  4646  003EB2                     __end_of___awmod:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           indf2	equ	0xFDF
  4658                           postinc2	equ	0xFDE
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function ___awdiv *****************
  4664 ;; Defined at:
  4665 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  dividend        2   51[COMRAM] int 
  4668 ;;  divisor         2   53[COMRAM] int 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  quotient        2   57[COMRAM] int 
  4671 ;;  sign            1   56[COMRAM] unsigned char 
  4672 ;;  counter         1   55[COMRAM] unsigned char 
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  2   51[COMRAM] int 
  4675 ;; Registers used:
  4676 ;;		wreg, status,2, status,0
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4682 ;;      Params:         4       0       0       0       0       0       0
  4683 ;;      Locals:         4       0       0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0
  4685 ;;      Totals:         8       0       0       0       0       0       0
  4686 ;;Total ram usage:        8 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    2
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_fround
  4693 ;;		_scale
  4694 ;;		_sprintf
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text6
  4699  003D3C                     __ptext6:
  4700                           	opt stack 0
  4701  003D3C                     ___awdiv:
  4702                           	opt stack 26
  4703                           
  4704                           ;incstack = 0
  4705  003D3C  0E00               	movlw	0
  4706  003D3E  6E39               	movwf	___awdiv@sign,c
  4707  003D40  AE37               	btfss	___awdiv@divisor+1,7,c
  4708  003D42  D006               	goto	l524
  4709  003D44  6C36               	negf	___awdiv@divisor,c
  4710  003D46  1E37               	comf	___awdiv@divisor+1,f,c
  4711  003D48  B0D8               	btfsc	status,0,c
  4712  003D4A  2A37               	incf	___awdiv@divisor+1,f,c
  4713  003D4C  0E01               	movlw	1
  4714  003D4E  6E39               	movwf	___awdiv@sign,c
  4715  003D50                     l524:
  4716  003D50  AE35               	btfss	___awdiv@dividend+1,7,c
  4717  003D52  D006               	goto	l525
  4718  003D54  6C34               	negf	___awdiv@dividend,c
  4719  003D56  1E35               	comf	___awdiv@dividend+1,f,c
  4720  003D58  B0D8               	btfsc	status,0,c
  4721  003D5A  2A35               	incf	___awdiv@dividend+1,f,c
  4722  003D5C  0E01               	movlw	1
  4723  003D5E  1A39               	xorwf	___awdiv@sign,f,c
  4724  003D60                     l525:
  4725  003D60  0E00               	movlw	0
  4726  003D62  6E3B               	movwf	___awdiv@quotient+1,c
  4727  003D64  0E00               	movlw	0
  4728  003D66  6E3A               	movwf	___awdiv@quotient,c
  4729  003D68  5036               	movf	___awdiv@divisor,w,c
  4730  003D6A  1037               	iorwf	___awdiv@divisor+1,w,c
  4731  003D6C  B4D8               	btfsc	status,2,c
  4732  003D6E  D01C               	goto	l532
  4733  003D70  0E01               	movlw	1
  4734  003D72  6E38               	movwf	___awdiv@counter,c
  4735  003D74  D004               	goto	l527
  4736  003D76  90D8               	bcf	status,0,c
  4737  003D78  3636               	rlcf	___awdiv@divisor,f,c
  4738  003D7A  3637               	rlcf	___awdiv@divisor+1,f,c
  4739  003D7C  2A38               	incf	___awdiv@counter,f,c
  4740  003D7E                     l527:
  4741  003D7E  AE37               	btfss	___awdiv@divisor+1,7,c
  4742  003D80  D7FA               	goto	l528
  4743  003D82                     u5180:
  4744  003D82  90D8               	bcf	status,0,c
  4745  003D84  363A               	rlcf	___awdiv@quotient,f,c
  4746  003D86  363B               	rlcf	___awdiv@quotient+1,f,c
  4747  003D88  5036               	movf	___awdiv@divisor,w,c
  4748  003D8A  5C34               	subwf	___awdiv@dividend,w,c
  4749  003D8C  5037               	movf	___awdiv@divisor+1,w,c
  4750  003D8E  5835               	subwfb	___awdiv@dividend+1,w,c
  4751  003D90  A0D8               	btfss	status,0,c
  4752  003D92  D005               	goto	l531
  4753  003D94  5036               	movf	___awdiv@divisor,w,c
  4754  003D96  5E34               	subwf	___awdiv@dividend,f,c
  4755  003D98  5037               	movf	___awdiv@divisor+1,w,c
  4756  003D9A  5A35               	subwfb	___awdiv@dividend+1,f,c
  4757  003D9C  803A               	bsf	___awdiv@quotient,0,c
  4758  003D9E                     l531:
  4759  003D9E  90D8               	bcf	status,0,c
  4760  003DA0  3237               	rrcf	___awdiv@divisor+1,f,c
  4761  003DA2  3236               	rrcf	___awdiv@divisor,f,c
  4762  003DA4  2E38               	decfsz	___awdiv@counter,f,c
  4763  003DA6  D7ED               	goto	u5180
  4764  003DA8                     l532:
  4765  003DA8  5039               	movf	___awdiv@sign,w,c
  4766  003DAA  B4D8               	btfsc	status,2,c
  4767  003DAC  D004               	goto	l533
  4768  003DAE  6C3A               	negf	___awdiv@quotient,c
  4769  003DB0  1E3B               	comf	___awdiv@quotient+1,f,c
  4770  003DB2  B0D8               	btfsc	status,0,c
  4771  003DB4  2A3B               	incf	___awdiv@quotient+1,f,c
  4772  003DB6                     l533:
  4773  003DB6  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4774  003DBA  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4775  003DBE  0012               	return	
  4776  003DC0                     __end_of___awdiv:
  4777                           	opt stack 0
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function __tdiv_to_l_ *****************
  4794 ;; Defined at:
  4795 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  f1              4   45[COMRAM] float 
  4798 ;;  f2              4   49[COMRAM] float 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  quot            4   56[COMRAM] unsigned long 
  4801 ;;  exp1            1   61[COMRAM] unsigned char 
  4802 ;;  cntr            1   60[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  4   45[COMRAM] unsigned long 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4812 ;;      Params:         8       0       0       0       0       0       0
  4813 ;;      Locals:         6       0       0       0       0       0       0
  4814 ;;      Temps:          3       0       0       0       0       0       0
  4815 ;;      Totals:        17       0       0       0       0       0       0
  4816 ;;Total ram usage:       17 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    2
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_sprintf
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text7
  4827  0034CE                     __ptext7:
  4828                           	opt stack 0
  4829  0034CE                     __tdiv_to_l_:
  4830                           	opt stack 27
  4831                           
  4832                           ;incstack = 0
  4833  0034CE  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4834  0034D2  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4835  0034D4  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4836  0034D6  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4837  0034D8  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4838  0034DA  E301               	bnc	u5361
  4839  0034DC  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4840  0034DE                     u5361:
  4841  0034DE  5036               	movf	??__tdiv_to_l_,w,c
  4842  0034E0  6E3E               	movwf	__tdiv_to_l_@exp1,c
  4843  0034E2  503E               	movf	__tdiv_to_l_@exp1,w,c
  4844  0034E4  A4D8               	btfss	status,2,c
  4845  0034E6  D009               	goto	l660
  4846  0034E8  0E00               	movlw	0
  4847  0034EA  6E2E               	movwf	?__tdiv_to_l_,c
  4848  0034EC  0E00               	movlw	0
  4849  0034EE  6E2F               	movwf	?__tdiv_to_l_+1,c
  4850  0034F0  0E00               	movlw	0
  4851  0034F2  6E30               	movwf	?__tdiv_to_l_+2,c
  4852  0034F4  0E00               	movlw	0
  4853  0034F6  6E31               	movwf	?__tdiv_to_l_+3,c
  4854  0034F8  0012               	return	
  4855  0034FA                     l660:
  4856  0034FA  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4857  0034FE  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4858  003500  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4859  003502  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4860  003504  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4861  003506  E301               	bnc	u5381
  4862  003508  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4863  00350A                     u5381:
  4864  00350A  5036               	movf	??__tdiv_to_l_,w,c
  4865  00350C  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4866  00350E  503D               	movf	__tdiv_to_l_@cntr,w,c
  4867  003510  A4D8               	btfss	status,2,c
  4868  003512  D009               	goto	l662
  4869  003514  0E00               	movlw	0
  4870  003516  6E2E               	movwf	?__tdiv_to_l_,c
  4871  003518  0E00               	movlw	0
  4872  00351A  6E2F               	movwf	?__tdiv_to_l_+1,c
  4873  00351C  0E00               	movlw	0
  4874  00351E  6E30               	movwf	?__tdiv_to_l_+2,c
  4875  003520  0E00               	movlw	0
  4876  003522  6E31               	movwf	?__tdiv_to_l_+3,c
  4877  003524  0012               	return	
  4878  003526                     l662:
  4879  003526  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4880  003528  0EFF               	movlw	255
  4881  00352A  162E               	andwf	__tdiv_to_l_@f1,f,c
  4882  00352C  0EFF               	movlw	255
  4883  00352E  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4884  003530  0E00               	movlw	0
  4885  003532  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4886  003534  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4887  003536  0EFF               	movlw	255
  4888  003538  1632               	andwf	__tdiv_to_l_@f2,f,c
  4889  00353A  0EFF               	movlw	255
  4890  00353C  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4891  00353E  0E00               	movlw	0
  4892  003540  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4893  003542  0E00               	movlw	0
  4894  003544  6E39               	movwf	__tdiv_to_l_@quot,c
  4895  003546  0E00               	movlw	0
  4896  003548  6E3A               	movwf	__tdiv_to_l_@quot+1,c
  4897  00354A  0E00               	movlw	0
  4898  00354C  6E3B               	movwf	__tdiv_to_l_@quot+2,c
  4899  00354E  0E00               	movlw	0
  4900  003550  6E3C               	movwf	__tdiv_to_l_@quot+3,c
  4901  003552  0E7F               	movlw	127
  4902  003554  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4903  003556  503D               	movf	__tdiv_to_l_@cntr,w,c
  4904  003558  0F98               	addlw	152
  4905  00355A  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4906  00355C  0E18               	movlw	24
  4907  00355E  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4908  003560                     l663:
  4909  003560  90D8               	bcf	status,0,c
  4910  003562  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4911  003564  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4912  003566  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4913  003568  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4914  00356A  5032               	movf	__tdiv_to_l_@f2,w,c
  4915  00356C  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4916  00356E  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4917  003570  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4918  003572  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4919  003574  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4920  003576  A0D8               	btfss	status,0,c
  4921  003578  D007               	goto	l664
  4922  00357A  5032               	movf	__tdiv_to_l_@f2,w,c
  4923  00357C  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4924  00357E  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4925  003580  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4926  003582  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4927  003584  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4928  003586  8039               	bsf	__tdiv_to_l_@quot,0,c
  4929  003588                     l664:
  4930  003588  90D8               	bcf	status,0,c
  4931  00358A  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4932  00358C  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4933  00358E  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4934  003590  2E3D               	decfsz	__tdiv_to_l_@cntr,f,c
  4935  003592  D7E6               	goto	l663
  4936  003594  AE3E               	btfss	__tdiv_to_l_@exp1,7,c
  4937  003596  D016               	goto	l666
  4938  003598  503E               	movf	__tdiv_to_l_@exp1,w,c
  4939  00359A  0A80               	xorlw	128
  4940  00359C  0F97               	addlw	151
  4941  00359E  B0D8               	btfsc	status,0,c
  4942  0035A0  D009               	goto	l667
  4943  0035A2  0E00               	movlw	0
  4944  0035A4  6E2E               	movwf	?__tdiv_to_l_,c
  4945  0035A6  0E00               	movlw	0
  4946  0035A8  6E2F               	movwf	?__tdiv_to_l_+1,c
  4947  0035AA  0E00               	movlw	0
  4948  0035AC  6E30               	movwf	?__tdiv_to_l_+2,c
  4949  0035AE  0E00               	movlw	0
  4950  0035B0  6E31               	movwf	?__tdiv_to_l_+3,c
  4951  0035B2  0012               	return	
  4952  0035B4                     l667:
  4953  0035B4  90D8               	bcf	status,0,c
  4954  0035B6  323C               	rrcf	__tdiv_to_l_@quot+3,f,c
  4955  0035B8  323B               	rrcf	__tdiv_to_l_@quot+2,f,c
  4956  0035BA  323A               	rrcf	__tdiv_to_l_@quot+1,f,c
  4957  0035BC  3239               	rrcf	__tdiv_to_l_@quot,f,c
  4958  0035BE  3E3E               	incfsz	__tdiv_to_l_@exp1,f,c
  4959  0035C0  D7F9               	goto	l667
  4960  0035C2  D015               	goto	u5440
  4961  0035C4                     l666:
  4962  0035C4  0E17               	movlw	23
  4963  0035C6  643E               	cpfsgt	__tdiv_to_l_@exp1,c
  4964  0035C8  D00F               	goto	l672
  4965  0035CA  0E00               	movlw	0
  4966  0035CC  6E2E               	movwf	?__tdiv_to_l_,c
  4967  0035CE  0E00               	movlw	0
  4968  0035D0  6E2F               	movwf	?__tdiv_to_l_+1,c
  4969  0035D2  0E00               	movlw	0
  4970  0035D4  6E30               	movwf	?__tdiv_to_l_+2,c
  4971  0035D6  0E00               	movlw	0
  4972  0035D8  6E31               	movwf	?__tdiv_to_l_+3,c
  4973  0035DA  0012               	return	
  4974  0035DC  90D8               	bcf	status,0,c
  4975  0035DE  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4976  0035E0  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4977  0035E2  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4978  0035E4  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4979  0035E6  063E               	decf	__tdiv_to_l_@exp1,f,c
  4980  0035E8                     l672:
  4981  0035E8  503E               	movf	__tdiv_to_l_@exp1,w,c
  4982  0035EA  A4D8               	btfss	status,2,c
  4983  0035EC  D7F7               	goto	l673
  4984  0035EE                     u5440:
  4985  0035EE  C039  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4986  0035F2  C03A  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4987  0035F6  C03B  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4988  0035FA  C03C  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4989  0035FE  0012               	return		;funcret
  4990  003600                     __end_of__tdiv_to_l_:
  4991                           	opt stack 0
  4992                           tblptru	equ	0xFF8
  4993                           tblptrh	equ	0xFF7
  4994                           tblptrl	equ	0xFF6
  4995                           tablat	equ	0xFF5
  4996                           prodh	equ	0xFF4
  4997                           prodl	equ	0xFF3
  4998                           intcon	equ	0xFF2
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           indf2	equ	0xFDF
  5002                           postinc2	equ	0xFDE
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function __div_to_l_ *****************
  5008 ;; Defined at:
  5009 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  f1              4   45[COMRAM] unsigned long 
  5012 ;;  f2              4   49[COMRAM] unsigned long 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  quot            4   53[COMRAM] unsigned long 
  5015 ;;  exp1            1   58[COMRAM] unsigned char 
  5016 ;;  cntr            1   57[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4   45[COMRAM] unsigned long 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5026 ;;      Params:         8       0       0       0       0       0       0
  5027 ;;      Locals:         6       0       0       0       0       0       0
  5028 ;;      Temps:          0       0       0       0       0       0       0
  5029 ;;      Totals:        14       0       0       0       0       0       0
  5030 ;;Total ram usage:       14 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    2
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_sprintf
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text8
  5041  003600                     __ptext8:
  5042                           	opt stack 0
  5043  003600                     __div_to_l_:
  5044                           	opt stack 27
  5045                           
  5046                           ;incstack = 0
  5047  003600  3430               	rlcf	__div_to_l_@f1+2,w,c
  5048  003602  3431               	rlcf	__div_to_l_@f1+3,w,c
  5049  003604  6E3B               	movwf	__div_to_l_@exp1,c
  5050  003606  503B               	movf	__div_to_l_@exp1,w,c
  5051  003608  A4D8               	btfss	status,2,c
  5052  00360A  D009               	goto	l556
  5053  00360C  0E00               	movlw	0
  5054  00360E  6E2E               	movwf	?__div_to_l_,c
  5055  003610  0E00               	movlw	0
  5056  003612  6E2F               	movwf	?__div_to_l_+1,c
  5057  003614  0E00               	movlw	0
  5058  003616  6E30               	movwf	?__div_to_l_+2,c
  5059  003618  0E00               	movlw	0
  5060  00361A  6E31               	movwf	?__div_to_l_+3,c
  5061  00361C  0012               	return	
  5062  00361E                     l556:
  5063  00361E  3434               	rlcf	__div_to_l_@f2+2,w,c
  5064  003620  3435               	rlcf	__div_to_l_@f2+3,w,c
  5065  003622  6E3A               	movwf	__div_to_l_@cntr,c
  5066  003624  503A               	movf	__div_to_l_@cntr,w,c
  5067  003626  A4D8               	btfss	status,2,c
  5068  003628  D009               	goto	l558
  5069  00362A  0E00               	movlw	0
  5070  00362C  6E2E               	movwf	?__div_to_l_,c
  5071  00362E  0E00               	movlw	0
  5072  003630  6E2F               	movwf	?__div_to_l_+1,c
  5073  003632  0E00               	movlw	0
  5074  003634  6E30               	movwf	?__div_to_l_+2,c
  5075  003636  0E00               	movlw	0
  5076  003638  6E31               	movwf	?__div_to_l_+3,c
  5077  00363A  0012               	return	
  5078  00363C                     l558:
  5079  00363C  8E30               	bsf	__div_to_l_@f1+2,7,c
  5080  00363E  0EFF               	movlw	255
  5081  003640  162E               	andwf	__div_to_l_@f1,f,c
  5082  003642  0EFF               	movlw	255
  5083  003644  162F               	andwf	__div_to_l_@f1+1,f,c
  5084  003646  0EFF               	movlw	255
  5085  003648  1630               	andwf	__div_to_l_@f1+2,f,c
  5086  00364A  0E00               	movlw	0
  5087  00364C  1631               	andwf	__div_to_l_@f1+3,f,c
  5088  00364E  8E34               	bsf	__div_to_l_@f2+2,7,c
  5089  003650  0EFF               	movlw	255
  5090  003652  1632               	andwf	__div_to_l_@f2,f,c
  5091  003654  0EFF               	movlw	255
  5092  003656  1633               	andwf	__div_to_l_@f2+1,f,c
  5093  003658  0EFF               	movlw	255
  5094  00365A  1634               	andwf	__div_to_l_@f2+2,f,c
  5095  00365C  0E00               	movlw	0
  5096  00365E  1635               	andwf	__div_to_l_@f2+3,f,c
  5097  003660  0E00               	movlw	0
  5098  003662  6E36               	movwf	__div_to_l_@quot,c
  5099  003664  0E00               	movlw	0
  5100  003666  6E37               	movwf	__div_to_l_@quot+1,c
  5101  003668  0E00               	movlw	0
  5102  00366A  6E38               	movwf	__div_to_l_@quot+2,c
  5103  00366C  0E00               	movlw	0
  5104  00366E  6E39               	movwf	__div_to_l_@quot+3,c
  5105  003670  0E7F               	movlw	127
  5106  003672  5E3B               	subwf	__div_to_l_@exp1,f,c
  5107  003674  503A               	movf	__div_to_l_@cntr,w,c
  5108  003676  0FA0               	addlw	160
  5109  003678  5E3B               	subwf	__div_to_l_@exp1,f,c
  5110  00367A  0E20               	movlw	32
  5111  00367C  6E3A               	movwf	__div_to_l_@cntr,c
  5112  00367E  90D8               	bcf	status,0,c
  5113  003680  3636               	rlcf	__div_to_l_@quot,f,c
  5114  003682  3637               	rlcf	__div_to_l_@quot+1,f,c
  5115  003684  3638               	rlcf	__div_to_l_@quot+2,f,c
  5116  003686  3639               	rlcf	__div_to_l_@quot+3,f,c
  5117  003688  5032               	movf	__div_to_l_@f2,w,c
  5118  00368A  5C2E               	subwf	__div_to_l_@f1,w,c
  5119  00368C  5033               	movf	__div_to_l_@f2+1,w,c
  5120  00368E  582F               	subwfb	__div_to_l_@f1+1,w,c
  5121  003690  5034               	movf	__div_to_l_@f2+2,w,c
  5122  003692  5830               	subwfb	__div_to_l_@f1+2,w,c
  5123  003694  5035               	movf	__div_to_l_@f2+3,w,c
  5124  003696  5831               	subwfb	__div_to_l_@f1+3,w,c
  5125  003698  A0D8               	btfss	status,0,c
  5126  00369A  D009               	goto	l560
  5127  00369C  5032               	movf	__div_to_l_@f2,w,c
  5128  00369E  5E2E               	subwf	__div_to_l_@f1,f,c
  5129  0036A0  5033               	movf	__div_to_l_@f2+1,w,c
  5130  0036A2  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  5131  0036A4  5034               	movf	__div_to_l_@f2+2,w,c
  5132  0036A6  5A30               	subwfb	__div_to_l_@f1+2,f,c
  5133  0036A8  5035               	movf	__div_to_l_@f2+3,w,c
  5134  0036AA  5A31               	subwfb	__div_to_l_@f1+3,f,c
  5135  0036AC  8036               	bsf	__div_to_l_@quot,0,c
  5136  0036AE                     l560:
  5137  0036AE  90D8               	bcf	status,0,c
  5138  0036B0  362E               	rlcf	__div_to_l_@f1,f,c
  5139  0036B2  362F               	rlcf	__div_to_l_@f1+1,f,c
  5140  0036B4  3630               	rlcf	__div_to_l_@f1+2,f,c
  5141  0036B6  3631               	rlcf	__div_to_l_@f1+3,f,c
  5142  0036B8  2E3A               	decfsz	__div_to_l_@cntr,f,c
  5143  0036BA  D7E1               	goto	l559
  5144  0036BC  AE3B               	btfss	__div_to_l_@exp1,7,c
  5145  0036BE  D016               	goto	l562
  5146  0036C0  503B               	movf	__div_to_l_@exp1,w,c
  5147  0036C2  0A80               	xorlw	128
  5148  0036C4  0F9F               	addlw	159
  5149  0036C6  B0D8               	btfsc	status,0,c
  5150  0036C8  D009               	goto	l563
  5151  0036CA  0E00               	movlw	0
  5152  0036CC  6E2E               	movwf	?__div_to_l_,c
  5153  0036CE  0E00               	movlw	0
  5154  0036D0  6E2F               	movwf	?__div_to_l_+1,c
  5155  0036D2  0E00               	movlw	0
  5156  0036D4  6E30               	movwf	?__div_to_l_+2,c
  5157  0036D6  0E00               	movlw	0
  5158  0036D8  6E31               	movwf	?__div_to_l_+3,c
  5159  0036DA  0012               	return	
  5160  0036DC                     l563:
  5161  0036DC  90D8               	bcf	status,0,c
  5162  0036DE  3239               	rrcf	__div_to_l_@quot+3,f,c
  5163  0036E0  3238               	rrcf	__div_to_l_@quot+2,f,c
  5164  0036E2  3237               	rrcf	__div_to_l_@quot+1,f,c
  5165  0036E4  3236               	rrcf	__div_to_l_@quot,f,c
  5166  0036E6  3E3B               	incfsz	__div_to_l_@exp1,f,c
  5167  0036E8  D7F9               	goto	l563
  5168  0036EA  D015               	goto	u5510
  5169  0036EC                     l562:
  5170  0036EC  0E1F               	movlw	31
  5171  0036EE  643B               	cpfsgt	__div_to_l_@exp1,c
  5172  0036F0  D00F               	goto	l568
  5173  0036F2  0E00               	movlw	0
  5174  0036F4  6E2E               	movwf	?__div_to_l_,c
  5175  0036F6  0E00               	movlw	0
  5176  0036F8  6E2F               	movwf	?__div_to_l_+1,c
  5177  0036FA  0E00               	movlw	0
  5178  0036FC  6E30               	movwf	?__div_to_l_+2,c
  5179  0036FE  0E00               	movlw	0
  5180  003700  6E31               	movwf	?__div_to_l_+3,c
  5181  003702  0012               	return	
  5182  003704  90D8               	bcf	status,0,c
  5183  003706  3636               	rlcf	__div_to_l_@quot,f,c
  5184  003708  3637               	rlcf	__div_to_l_@quot+1,f,c
  5185  00370A  3638               	rlcf	__div_to_l_@quot+2,f,c
  5186  00370C  3639               	rlcf	__div_to_l_@quot+3,f,c
  5187  00370E  063B               	decf	__div_to_l_@exp1,f,c
  5188  003710                     l568:
  5189  003710  503B               	movf	__div_to_l_@exp1,w,c
  5190  003712  A4D8               	btfss	status,2,c
  5191  003714  D7F7               	goto	l569
  5192  003716                     u5510:
  5193  003716  C036  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  5194  00371A  C037  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5195  00371E  C038  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5196  003722  C039  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5197  003726  0012               	return		;funcret
  5198  003728                     __end_of__div_to_l_:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function ___wmul *****************
  5216 ;; Defined at:
  5217 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  multiplier      2   45[COMRAM] unsigned int 
  5220 ;;  multiplicand    2   47[COMRAM] unsigned int 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  product         2   49[COMRAM] unsigned int 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  2   45[COMRAM] unsigned int 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0, prodl, prodh
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5232 ;;      Params:         4       0       0       0       0       0       0
  5233 ;;      Locals:         2       0       0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0
  5235 ;;      Totals:         6       0       0       0       0       0       0
  5236 ;;Total ram usage:        6 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    2
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_sprintf
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text9
  5247  0041B0                     __ptext9:
  5248                           	opt stack 0
  5249  0041B0                     ___wmul:
  5250                           	opt stack 27
  5251                           
  5252                           ;incstack = 0
  5253  0041B0  502E               	movf	___wmul@multiplier,w,c
  5254  0041B2  0230               	mulwf	___wmul@multiplicand,c
  5255  0041B4  CFF3 F032          	movff	prodl,___wmul@product
  5256  0041B8  CFF4 F033          	movff	prodh,___wmul@product+1
  5257  0041BC  502E               	movf	___wmul@multiplier,w,c
  5258  0041BE  0231               	mulwf	___wmul@multiplicand+1,c
  5259  0041C0  50F3               	movf	prodl,w,c
  5260  0041C2  2633               	addwf	___wmul@product+1,f,c
  5261  0041C4  502F               	movf	___wmul@multiplier+1,w,c
  5262  0041C6  0230               	mulwf	___wmul@multiplicand,c
  5263  0041C8  50F3               	movf	prodl,w,c
  5264  0041CA  2633               	addwf	___wmul@product+1,f,c
  5265  0041CC  C032  F02E         	movff	___wmul@product,?___wmul
  5266  0041D0  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  5267  0041D4  0012               	return	
  5268  0041D6                     __end_of___wmul:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function ___llmod *****************
  5286 ;; Defined at:
  5287 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  dividend        4   45[COMRAM] unsigned long 
  5290 ;;  divisor         4   49[COMRAM] unsigned long 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  counter         1   53[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  4   45[COMRAM] unsigned long 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5302 ;;      Params:         8       0       0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0
  5305 ;;      Totals:         9       0       0       0       0       0       0
  5306 ;;Total ram usage:        9 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    2
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_sprintf
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text10
  5317  003EB2                     __ptext10:
  5318                           	opt stack 0
  5319  003EB2                     ___llmod:
  5320                           	opt stack 27
  5321                           
  5322                           ;incstack = 0
  5323  003EB2  5032               	movf	___llmod@divisor,w,c
  5324  003EB4  1033               	iorwf	___llmod@divisor+1,w,c
  5325  003EB6  1034               	iorwf	___llmod@divisor+2,w,c
  5326  003EB8  1035               	iorwf	___llmod@divisor+3,w,c
  5327  003EBA  B4D8               	btfsc	status,2,c
  5328  003EBC  D024               	goto	l761
  5329  003EBE  0E01               	movlw	1
  5330  003EC0  6E36               	movwf	___llmod@counter,c
  5331  003EC2  D006               	goto	l756
  5332  003EC4  90D8               	bcf	status,0,c
  5333  003EC6  3632               	rlcf	___llmod@divisor,f,c
  5334  003EC8  3633               	rlcf	___llmod@divisor+1,f,c
  5335  003ECA  3634               	rlcf	___llmod@divisor+2,f,c
  5336  003ECC  3635               	rlcf	___llmod@divisor+3,f,c
  5337  003ECE  2A36               	incf	___llmod@counter,f,c
  5338  003ED0                     l756:
  5339  003ED0  AE35               	btfss	___llmod@divisor+3,7,c
  5340  003ED2  D7F8               	goto	l757
  5341  003ED4                     u5920:
  5342  003ED4  5032               	movf	___llmod@divisor,w,c
  5343  003ED6  5C2E               	subwf	___llmod@dividend,w,c
  5344  003ED8  5033               	movf	___llmod@divisor+1,w,c
  5345  003EDA  582F               	subwfb	___llmod@dividend+1,w,c
  5346  003EDC  5034               	movf	___llmod@divisor+2,w,c
  5347  003EDE  5830               	subwfb	___llmod@dividend+2,w,c
  5348  003EE0  5035               	movf	___llmod@divisor+3,w,c
  5349  003EE2  5831               	subwfb	___llmod@dividend+3,w,c
  5350  003EE4  A0D8               	btfss	status,0,c
  5351  003EE6  D008               	goto	l760
  5352  003EE8  5032               	movf	___llmod@divisor,w,c
  5353  003EEA  5E2E               	subwf	___llmod@dividend,f,c
  5354  003EEC  5033               	movf	___llmod@divisor+1,w,c
  5355  003EEE  5A2F               	subwfb	___llmod@dividend+1,f,c
  5356  003EF0  5034               	movf	___llmod@divisor+2,w,c
  5357  003EF2  5A30               	subwfb	___llmod@dividend+2,f,c
  5358  003EF4  5035               	movf	___llmod@divisor+3,w,c
  5359  003EF6  5A31               	subwfb	___llmod@dividend+3,f,c
  5360  003EF8                     l760:
  5361  003EF8  90D8               	bcf	status,0,c
  5362  003EFA  3235               	rrcf	___llmod@divisor+3,f,c
  5363  003EFC  3234               	rrcf	___llmod@divisor+2,f,c
  5364  003EFE  3233               	rrcf	___llmod@divisor+1,f,c
  5365  003F00  3232               	rrcf	___llmod@divisor,f,c
  5366  003F02  2E36               	decfsz	___llmod@counter,f,c
  5367  003F04  D7E7               	goto	u5920
  5368  003F06                     l761:
  5369  003F06  C02E  F02E         	movff	___llmod@dividend,?___llmod
  5370  003F0A  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  5371  003F0E  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  5372  003F12  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  5373  003F16  0012               	return		;funcret
  5374  003F18                     __end_of___llmod:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           postinc0	equ	0xFEE
  5384                           wreg	equ	0xFE8
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function ___lldiv *****************
  5392 ;; Defined at:
  5393 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  dividend        4   45[COMRAM] unsigned long 
  5396 ;;  divisor         4   49[COMRAM] unsigned long 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  quotient        4   53[COMRAM] unsigned long 
  5399 ;;  counter         1   57[COMRAM] unsigned char 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  4   45[COMRAM] unsigned long 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5409 ;;      Params:         8       0       0       0       0       0       0
  5410 ;;      Locals:         5       0       0       0       0       0       0
  5411 ;;      Temps:          0       0       0       0       0       0       0
  5412 ;;      Totals:        13       0       0       0       0       0       0
  5413 ;;Total ram usage:       13 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    2
  5416 ;; This function calls:
  5417 ;;		Nothing
  5418 ;; This function is called by:
  5419 ;;		_sprintf
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text11
  5424  003DC0                     __ptext11:
  5425                           	opt stack 0
  5426  003DC0                     ___lldiv:
  5427                           	opt stack 27
  5428                           
  5429                           ;incstack = 0
  5430  003DC0  0E00               	movlw	0
  5431  003DC2  6E36               	movwf	___lldiv@quotient,c
  5432  003DC4  0E00               	movlw	0
  5433  003DC6  6E37               	movwf	___lldiv@quotient+1,c
  5434  003DC8  0E00               	movlw	0
  5435  003DCA  6E38               	movwf	___lldiv@quotient+2,c
  5436  003DCC  0E00               	movlw	0
  5437  003DCE  6E39               	movwf	___lldiv@quotient+3,c
  5438  003DD0  5032               	movf	___lldiv@divisor,w,c
  5439  003DD2  1033               	iorwf	___lldiv@divisor+1,w,c
  5440  003DD4  1034               	iorwf	___lldiv@divisor+2,w,c
  5441  003DD6  1035               	iorwf	___lldiv@divisor+3,w,c
  5442  003DD8  B4D8               	btfsc	status,2,c
  5443  003DDA  D02A               	goto	l751
  5444  003DDC  0E01               	movlw	1
  5445  003DDE  6E3A               	movwf	___lldiv@counter,c
  5446  003DE0  D006               	goto	l746
  5447  003DE2  90D8               	bcf	status,0,c
  5448  003DE4  3632               	rlcf	___lldiv@divisor,f,c
  5449  003DE6  3633               	rlcf	___lldiv@divisor+1,f,c
  5450  003DE8  3634               	rlcf	___lldiv@divisor+2,f,c
  5451  003DEA  3635               	rlcf	___lldiv@divisor+3,f,c
  5452  003DEC  2A3A               	incf	___lldiv@counter,f,c
  5453  003DEE                     l746:
  5454  003DEE  AE35               	btfss	___lldiv@divisor+3,7,c
  5455  003DF0  D7F8               	goto	l747
  5456  003DF2                     u5890:
  5457  003DF2  90D8               	bcf	status,0,c
  5458  003DF4  3636               	rlcf	___lldiv@quotient,f,c
  5459  003DF6  3637               	rlcf	___lldiv@quotient+1,f,c
  5460  003DF8  3638               	rlcf	___lldiv@quotient+2,f,c
  5461  003DFA  3639               	rlcf	___lldiv@quotient+3,f,c
  5462  003DFC  5032               	movf	___lldiv@divisor,w,c
  5463  003DFE  5C2E               	subwf	___lldiv@dividend,w,c
  5464  003E00  5033               	movf	___lldiv@divisor+1,w,c
  5465  003E02  582F               	subwfb	___lldiv@dividend+1,w,c
  5466  003E04  5034               	movf	___lldiv@divisor+2,w,c
  5467  003E06  5830               	subwfb	___lldiv@dividend+2,w,c
  5468  003E08  5035               	movf	___lldiv@divisor+3,w,c
  5469  003E0A  5831               	subwfb	___lldiv@dividend+3,w,c
  5470  003E0C  A0D8               	btfss	status,0,c
  5471  003E0E  D009               	goto	l750
  5472  003E10  5032               	movf	___lldiv@divisor,w,c
  5473  003E12  5E2E               	subwf	___lldiv@dividend,f,c
  5474  003E14  5033               	movf	___lldiv@divisor+1,w,c
  5475  003E16  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5476  003E18  5034               	movf	___lldiv@divisor+2,w,c
  5477  003E1A  5A30               	subwfb	___lldiv@dividend+2,f,c
  5478  003E1C  5035               	movf	___lldiv@divisor+3,w,c
  5479  003E1E  5A31               	subwfb	___lldiv@dividend+3,f,c
  5480  003E20  8036               	bsf	___lldiv@quotient,0,c
  5481  003E22                     l750:
  5482  003E22  90D8               	bcf	status,0,c
  5483  003E24  3235               	rrcf	___lldiv@divisor+3,f,c
  5484  003E26  3234               	rrcf	___lldiv@divisor+2,f,c
  5485  003E28  3233               	rrcf	___lldiv@divisor+1,f,c
  5486  003E2A  3232               	rrcf	___lldiv@divisor,f,c
  5487  003E2C  2E3A               	decfsz	___lldiv@counter,f,c
  5488  003E2E  D7E1               	goto	u5890
  5489  003E30                     l751:
  5490  003E30  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5491  003E34  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5492  003E38  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5493  003E3C  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5494  003E40  0012               	return		;funcret
  5495  003E42                     __end_of___lldiv:
  5496                           	opt stack 0
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           intcon	equ	0xFF2
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           indf2	equ	0xFDF
  5507                           postinc2	equ	0xFDE
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function ___fltol *****************
  5513 ;; Defined at:
  5514 ;;		line 43 in file "/opt/microchip/xc8/v1.45/sources/common/fltol.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  f1              4   26[BANK0 ] unsigned long 
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  exp1            1   68[COMRAM] unsigned char 
  5519 ;;  sign1           1   67[COMRAM] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  4   26[BANK0 ] long 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5529 ;;      Params:         0       4       0       0       0       0       0
  5530 ;;      Locals:         2       0       0       0       0       0       0
  5531 ;;      Temps:          0       4       0       0       0       0       0
  5532 ;;      Totals:         2       8       0       0       0       0       0
  5533 ;;Total ram usage:       10 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    2
  5536 ;; This function calls:
  5537 ;;		Nothing
  5538 ;; This function is called by:
  5539 ;;		_sprintf
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           	psect	text12
  5544  003BA0                     __ptext12:
  5545                           	opt stack 0
  5546  003BA0                     ___fltol:
  5547                           	opt stack 27
  5548                           
  5549                           ;incstack = 0
  5550  003BA0  0100               	movlb	0	; () banked
  5551  003BA2  359C               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5552  003BA4  359D               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5553  003BA6  6E45               	movwf	___fltol@exp1,c
  5554  003BA8  5045               	movf	___fltol@exp1,w,c
  5555  003BAA  A4D8               	btfss	status,2,c
  5556  003BAC  D009               	goto	l603
  5557                           
  5558                           ; BSR set to: 0
  5559  003BAE  0E00               	movlw	0
  5560  003BB0  6F9A               	movwf	?___fltol& (0+255),b
  5561  003BB2  0E00               	movlw	0
  5562  003BB4  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5563  003BB6  0E00               	movlw	0
  5564  003BB8  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5565  003BBA  0E00               	movlw	0
  5566  003BBC  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5567                           
  5568                           ; BSR set to: 0
  5569  003BBE  0012               	return	
  5570  003BC0                     l603:
  5571                           
  5572                           ; BSR set to: 0
  5573                           
  5574                           ; BSR set to: 0
  5575  003BC0  C09A  F09E         	movff	___fltol@f1,??___fltol
  5576  003BC4  C09B  F09F         	movff	___fltol@f1+1,??___fltol+1
  5577  003BC8  C09C  F0A0         	movff	___fltol@f1+2,??___fltol+2
  5578  003BCC  C09D  F0A1         	movff	___fltol@f1+3,??___fltol+3
  5579  003BD0  0E20               	movlw	32
  5580  003BD2  D005               	goto	u5820
  5581  003BD4                     u5825:
  5582  003BD4  90D8               	bcf	status,0,c
  5583  003BD6  33A1               	rrcf	(??___fltol+3)& (0+255),f,b
  5584  003BD8  33A0               	rrcf	(??___fltol+2)& (0+255),f,b
  5585  003BDA  339F               	rrcf	(??___fltol+1)& (0+255),f,b
  5586  003BDC  339E               	rrcf	??___fltol& (0+255),f,b
  5587  003BDE                     u5820:
  5588  003BDE  2EE8               	decfsz	wreg,f,c
  5589  003BE0  D7F9               	goto	u5825
  5590  003BE2  519E               	movf	??___fltol& (0+255),w,b
  5591  003BE4  6E44               	movwf	___fltol@sign1,c
  5592                           
  5593                           ; BSR set to: 0
  5594  003BE6  8F9C               	bsf	(___fltol@f1+2)& (0+255),7,b
  5595                           
  5596                           ; BSR set to: 0
  5597  003BE8  0EFF               	movlw	255
  5598  003BEA  179A               	andwf	___fltol@f1& (0+255),f,b
  5599  003BEC  0EFF               	movlw	255
  5600  003BEE  179B               	andwf	(___fltol@f1+1)& (0+255),f,b
  5601  003BF0  0EFF               	movlw	255
  5602  003BF2  179C               	andwf	(___fltol@f1+2)& (0+255),f,b
  5603  003BF4  0E00               	movlw	0
  5604  003BF6  179D               	andwf	(___fltol@f1+3)& (0+255),f,b
  5605                           
  5606                           ; BSR set to: 0
  5607  003BF8  0E96               	movlw	150
  5608  003BFA  5E45               	subwf	___fltol@exp1,f,c
  5609                           
  5610                           ; BSR set to: 0
  5611  003BFC  AE45               	btfss	___fltol@exp1,7,c
  5612  003BFE  D016               	goto	l605
  5613                           
  5614                           ; BSR set to: 0
  5615  003C00  5045               	movf	___fltol@exp1,w,c
  5616  003C02  0A80               	xorlw	128
  5617  003C04  0F97               	addlw	151
  5618  003C06  B0D8               	btfsc	status,0,c
  5619  003C08  D009               	goto	l606
  5620                           
  5621                           ; BSR set to: 0
  5622  003C0A  0E00               	movlw	0
  5623  003C0C  6F9A               	movwf	?___fltol& (0+255),b
  5624  003C0E  0E00               	movlw	0
  5625  003C10  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5626  003C12  0E00               	movlw	0
  5627  003C14  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5628  003C16  0E00               	movlw	0
  5629  003C18  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5630                           
  5631                           ; BSR set to: 0
  5632  003C1A  0012               	return	
  5633  003C1C                     l606:
  5634                           
  5635                           ; BSR set to: 0
  5636                           
  5637                           ; BSR set to: 0
  5638                           
  5639                           ; BSR set to: 0
  5640  003C1C  90D8               	bcf	status,0,c
  5641  003C1E  339D               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5642  003C20  339C               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5643  003C22  339B               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5644  003C24  339A               	rrcf	___fltol@f1& (0+255),f,b
  5645                           
  5646                           ; BSR set to: 0
  5647  003C26  3E45               	incfsz	___fltol@exp1,f,c
  5648  003C28  D7F9               	goto	l606
  5649                           
  5650                           ; BSR set to: 0
  5651  003C2A  D015               	goto	u5860
  5652  003C2C                     l605:
  5653                           
  5654                           ; BSR set to: 0
  5655                           
  5656                           ; BSR set to: 0
  5657  003C2C  0E1F               	movlw	31
  5658  003C2E  6445               	cpfsgt	___fltol@exp1,c
  5659  003C30  D00F               	goto	l611
  5660                           
  5661                           ; BSR set to: 0
  5662  003C32  0E00               	movlw	0
  5663  003C34  6F9A               	movwf	?___fltol& (0+255),b
  5664  003C36  0E00               	movlw	0
  5665  003C38  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5666  003C3A  0E00               	movlw	0
  5667  003C3C  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5668  003C3E  0E00               	movlw	0
  5669  003C40  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672  003C42  0012               	return	
  5673  003C44                     
  5674                           ; BSR set to: 0
  5675                           
  5676                           ; BSR set to: 0
  5677  003C44  90D8               	bcf	status,0,c
  5678  003C46  379A               	rlcf	___fltol@f1& (0+255),f,b
  5679  003C48  379B               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5680  003C4A  379C               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5681  003C4C  379D               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5682  003C4E  0645               	decf	___fltol@exp1,f,c
  5683  003C50                     l611:
  5684                           
  5685                           ; BSR set to: 0
  5686                           
  5687                           ; BSR set to: 0
  5688  003C50  5045               	movf	___fltol@exp1,w,c
  5689  003C52  A4D8               	btfss	status,2,c
  5690  003C54  D7F7               	goto	l612
  5691  003C56                     u5860:
  5692                           
  5693                           ; BSR set to: 0
  5694                           
  5695                           ; BSR set to: 0
  5696                           
  5697                           ; BSR set to: 0
  5698  003C56  5044               	movf	___fltol@sign1,w,c
  5699  003C58  B4D8               	btfsc	status,2,c
  5700  003C5A  D008               	goto	l614
  5701                           
  5702                           ; BSR set to: 0
  5703  003C5C  1F9D               	comf	(___fltol@f1+3)& (0+255),f,b
  5704  003C5E  1F9C               	comf	(___fltol@f1+2)& (0+255),f,b
  5705  003C60  1F9B               	comf	(___fltol@f1+1)& (0+255),f,b
  5706  003C62  6D9A               	negf	___fltol@f1& (0+255),b
  5707  003C64  0E00               	movlw	0
  5708  003C66  239B               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5709  003C68  239C               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5710  003C6A  239D               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5711  003C6C                     l614:
  5712                           
  5713                           ; BSR set to: 0
  5714                           
  5715                           ; BSR set to: 0
  5716  003C6C  C09A  F09A         	movff	___fltol@f1,?___fltol
  5717  003C70  C09B  F09B         	movff	___fltol@f1+1,?___fltol+1
  5718  003C74  C09C  F09C         	movff	___fltol@f1+2,?___fltol+2
  5719  003C78  C09D  F09D         	movff	___fltol@f1+3,?___fltol+3
  5720  003C7C  0012               	return	
  5721  003C7E                     __end_of___fltol:
  5722                           	opt stack 0
  5723                           tblptru	equ	0xFF8
  5724                           tblptrh	equ	0xFF7
  5725                           tblptrl	equ	0xFF6
  5726                           tablat	equ	0xFF5
  5727                           prodh	equ	0xFF4
  5728                           prodl	equ	0xFF3
  5729                           intcon	equ	0xFF2
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           indf2	equ	0xFDF
  5733                           postinc2	equ	0xFDE
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _seleccionarEscala *****************
  5739 ;; Defined at:
  5740 ;;		line 352 in file "color_3.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  a               1    wreg     enum E3216
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  a               1   45[COMRAM] enum E3216
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5754 ;;      Params:         0       0       0       0       0       0       0
  5755 ;;      Locals:         1       0       0       0       0       0       0
  5756 ;;      Temps:          0       0       0       0       0       0       0
  5757 ;;      Totals:         1       0       0       0       0       0       0
  5758 ;;Total ram usage:        1 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    2
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_main
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text13
  5769  0040BA                     __ptext13:
  5770                           	opt stack 0
  5771  0040BA                     _seleccionarEscala:
  5772                           	opt stack 28
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;incstack = 0
  5776                           ;seleccionarEscala@a stored from wreg
  5777  0040BA  6E2E               	movwf	seleccionarEscala@a,c
  5778                           
  5779                           ;color_3.c: 354: switch(a)
  5780  0040BC  D00C               	goto	l175
  5781  0040BE                     
  5782                           ;color_3.c: 357: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5783  0040BE  908C               	bcf	3980,0,c	;volatile
  5784                           
  5785                           ;color_3.c: 358: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5786  0040C0  928C               	bcf	3980,1,c	;volatile
  5787                           
  5788                           ;color_3.c: 359: break;
  5789  0040C2  0012               	return	
  5790  0040C4                     
  5791                           ;color_3.c: 361: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  5792  0040C4  908C               	bcf	3980,0,c	;volatile
  5793                           
  5794                           ;color_3.c: 362: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5795  0040C6  828C               	bsf	3980,1,c	;volatile
  5796                           
  5797                           ;color_3.c: 363: break;
  5798  0040C8  0012               	return	
  5799  0040CA                     
  5800                           ;color_3.c: 365: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5801  0040CA  808C               	bsf	3980,0,c	;volatile
  5802                           
  5803                           ;color_3.c: 366: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  5804  0040CC  928C               	bcf	3980,1,c	;volatile
  5805                           
  5806                           ;color_3.c: 367: break;
  5807  0040CE  0012               	return	
  5808  0040D0                     
  5809                           ;color_3.c: 369: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  5810  0040D0  808C               	bsf	3980,0,c	;volatile
  5811                           
  5812                           ;color_3.c: 370: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  5813  0040D2  828C               	bsf	3980,1,c	;volatile
  5814                           
  5815                           ;color_3.c: 372: }
  5816                           
  5817                           ;color_3.c: 371: break;
  5818  0040D4  0012               	return	
  5819  0040D6                     l175:
  5820  0040D6  502E               	movf	seleccionarEscala@a,w,c
  5821                           
  5822                           ; Switch size 1, requested type "space"
  5823                           ; Number of cases is 4, Range of values is 0 to 3
  5824                           ; switch strategies available:
  5825                           ; Name         Instructions Cycles
  5826                           ; simple_byte           13     7 (average)
  5827                           ;	Chosen strategy is simple_byte
  5828  0040D8  0A00               	xorlw	0	; case 0
  5829  0040DA  B4D8               	btfsc	status,2,c
  5830  0040DC  D7F9               	goto	l180
  5831  0040DE  0A01               	xorlw	1	; case 1
  5832  0040E0  B4D8               	btfsc	status,2,c
  5833  0040E2  D7F3               	goto	l179
  5834  0040E4  0A03               	xorlw	3	; case 2
  5835  0040E6  B4D8               	btfsc	status,2,c
  5836  0040E8  D7ED               	goto	l178
  5837  0040EA  0A01               	xorlw	1	; case 3
  5838  0040EC  A4D8               	btfss	status,2,c
  5839  0040EE  0012               	return	
  5840  0040F0  D7E6               	goto	l176
  5841  0040F2                     __end_of_seleccionarEscala:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function _seleccionarColor *****************
  5859 ;; Defined at:
  5860 ;;		line 387 in file "color_3.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  col             1    wreg     enum E3210
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  col             1   45[COMRAM] enum E3210
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5874 ;;      Params:         0       0       0       0       0       0       0
  5875 ;;      Locals:         1       0       0       0       0       0       0
  5876 ;;      Temps:          0       0       0       0       0       0       0
  5877 ;;      Totals:         1       0       0       0       0       0       0
  5878 ;;Total ram usage:        1 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    2
  5881 ;; This function calls:
  5882 ;;		Nothing
  5883 ;; This function is called by:
  5884 ;;		_main
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	text14
  5889  004042                     __ptext14:
  5890                           	opt stack 0
  5891  004042                     _seleccionarColor:
  5892                           	opt stack 28
  5893                           
  5894                           ;incstack = 0
  5895                           ;seleccionarColor@col stored from wreg
  5896  004042  6E2E               	movwf	seleccionarColor@col,c
  5897                           
  5898                           ;color_3.c: 389: switch(col)
  5899  004044  D00F               	goto	l184
  5900  004046                     
  5901                           ;color_3.c: 392: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5902  004046  948C               	bcf	3980,2,c	;volatile
  5903                           
  5904                           ;color_3.c: 393: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5905  004048  968C               	bcf	3980,3,c	;volatile
  5906                           
  5907                           ;color_3.c: 394: break;
  5908  00404A  0012               	return	
  5909  00404C                     
  5910                           ;color_3.c: 396: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  5911  00404C  948C               	bcf	3980,2,c	;volatile
  5912                           
  5913                           ;color_3.c: 397: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5914  00404E  868C               	bsf	3980,3,c	;volatile
  5915                           
  5916                           ;color_3.c: 398: break;
  5917  004050  0012               	return	
  5918  004052                     
  5919                           ;color_3.c: 400: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5920  004052  848C               	bsf	3980,2,c	;volatile
  5921                           
  5922                           ;color_3.c: 401: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5923  004054  968C               	bcf	3980,3,c	;volatile
  5924                           
  5925                           ;color_3.c: 402: break;
  5926  004056  0012               	return	
  5927  004058                     
  5928                           ;color_3.c: 404: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5929  004058  848C               	bsf	3980,2,c	;volatile
  5930                           
  5931                           ;color_3.c: 405: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  5932  00405A  868C               	bsf	3980,3,c	;volatile
  5933                           
  5934                           ;color_3.c: 406: break;
  5935  00405C  0012               	return	
  5936  00405E                     
  5937                           ;color_3.c: 408: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  5938  00405E  848C               	bsf	3980,2,c	;volatile
  5939                           
  5940                           ;color_3.c: 409: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  5941  004060  968C               	bcf	3980,3,c	;volatile
  5942                           
  5943                           ;color_3.c: 410: }
  5944  004062  0012               	return	
  5945  004064                     l184:
  5946  004064  502E               	movf	seleccionarColor@col,w,c
  5947                           
  5948                           ; Switch size 1, requested type "space"
  5949                           ; Number of cases is 4, Range of values is 0 to 3
  5950                           ; switch strategies available:
  5951                           ; Name         Instructions Cycles
  5952                           ; simple_byte           13     7 (average)
  5953                           ;	Chosen strategy is simple_byte
  5954  004066  0A00               	xorlw	0	; case 0
  5955  004068  B4D8               	btfsc	status,2,c
  5956  00406A  D7ED               	goto	l185
  5957  00406C  0A01               	xorlw	1	; case 1
  5958  00406E  B4D8               	btfsc	status,2,c
  5959  004070  D7ED               	goto	l187
  5960  004072  0A03               	xorlw	3	; case 2
  5961  004074  B4D8               	btfsc	status,2,c
  5962  004076  D7ED               	goto	l188
  5963  004078  0A01               	xorlw	1	; case 3
  5964  00407A  B4D8               	btfsc	status,2,c
  5965  00407C  D7ED               	goto	l189
  5966  00407E  D7EF               	goto	l190
  5967  004080                     __end_of_seleccionarColor:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           intcon	equ	0xFF2
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           indf2	equ	0xFDF
  5979                           postinc2	equ	0xFDE
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _lcd_msg *****************
  5985 ;; Defined at:
  5986 ;;		line 101 in file "../MyLibs/lcd4a.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  c               2   49[COMRAM] PTR unsigned char 
  5989 ;;		 -> STR_11(9), STR_9(4), STR_7(4), STR_5(4), 
  5990 ;;		 -> STR_3(4), value(8), STR_1(18), 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6002 ;;      Params:         2       0       0       0       0       0       0
  6003 ;;      Locals:         0       0       0       0       0       0       0
  6004 ;;      Temps:          0       0       0       0       0       0       0
  6005 ;;      Totals:         2       0       0       0       0       0       0
  6006 ;;Total ram usage:        2 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    5
  6009 ;; This function calls:
  6010 ;;		_lcd_putc
  6011 ;; This function is called by:
  6012 ;;		_main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text15
  6017  003F18                     __ptext15:
  6018                           	opt stack 0
  6019  003F18                     _lcd_msg:
  6020                           	opt stack 25
  6021                           
  6022                           ;lcd4a.c: 103: while(*c != 0)
  6023                           
  6024                           ;incstack = 0
  6025  003F18  D014               	goto	l36
  6026  003F1A                     
  6027                           ;lcd4a.c: 104: {
  6028                           ;lcd4a.c: 105: lcd_putc(*c++);
  6029  003F1A  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6030  003F1E  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6031  003F22  6AF8               	clrf	tblptru,c
  6032  003F24  0E05               	movlw	(high __ramtop+-1)
  6033  003F26  64F7               	cpfsgt	tblptrh,c
  6034  003F28  D003               	bra	u3817
  6035  003F2A  0008               	tblrd		*
  6036  003F2C  50F5               	movf	tablat,w,c
  6037  003F2E  D005               	bra	u3810
  6038  003F30                     u3817:
  6039  003F30  CFF6 FFE9          	movff	tblptrl,fsr0l
  6040  003F34  CFF7 FFEA          	movff	tblptrh,fsr0h
  6041  003F38  50EF               	movf	indf0,w,c
  6042  003F3A                     u3810:
  6043  003F3A  EC40  F020         	call	_lcd_putc
  6044  003F3E  4A32               	infsnz	lcd_msg@c,f,c
  6045  003F40  2A33               	incf	lcd_msg@c+1,f,c
  6046  003F42                     l36:
  6047  003F42  C032  FFF6         	movff	lcd_msg@c,tblptrl
  6048  003F46  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  6049  003F4A  6AF8               	clrf	tblptru,c
  6050  003F4C  0E05               	movlw	(high __ramtop+-1)
  6051  003F4E  64F7               	cpfsgt	tblptrh,c
  6052  003F50  D003               	bra	u3827
  6053  003F52  0008               	tblrd		*
  6054  003F54  50F5               	movf	tablat,w,c
  6055  003F56  D005               	bra	u3820
  6056  003F58                     u3827:
  6057  003F58  CFF6 FFE9          	movff	tblptrl,fsr0l
  6058  003F5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6059  003F60  50EF               	movf	indf0,w,c
  6060  003F62                     u3820:
  6061  003F62  0900               	iorlw	0
  6062  003F64  B4D8               	btfsc	status,2,c
  6063  003F66  0012               	return	
  6064  003F68  D7D8               	goto	l37
  6065  003F6A                     __end_of_lcd_msg:
  6066                           	opt stack 0
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           indf0	equ	0xFEF
  6075                           postinc0	equ	0xFEE
  6076                           fsr0h	equ	0xFEA
  6077                           fsr0l	equ	0xFE9
  6078                           wreg	equ	0xFE8
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _lcd_putc *****************
  6086 ;; Defined at:
  6087 ;;		line 66 in file "../MyLibs/lcd4a.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  c               1    wreg     unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  c               1   48[COMRAM] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6101 ;;      Params:         0       0       0       0       0       0       0
  6102 ;;      Locals:         1       0       0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0
  6104 ;;      Totals:         1       0       0       0       0       0       0
  6105 ;;Total ram usage:        1 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    4
  6108 ;; This function calls:
  6109 ;;		_lcd_cmd
  6110 ;;		_lcd_dwr
  6111 ;; This function is called by:
  6112 ;;		_lcd_msg
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text16
  6117  004080                     __ptext16:
  6118                           	opt stack 0
  6119  004080                     _lcd_putc:
  6120                           	opt stack 25
  6121                           
  6122                           ;incstack = 0
  6123                           ;lcd_putc@c stored from wreg
  6124  004080  6E31               	movwf	lcd_putc@c,c
  6125                           
  6126                           ;lcd4a.c: 68: switch(c)
  6127  004082  D010               	goto	l24
  6128  004084                     
  6129                           ;lcd4a.c: 71: lcd_cmd(0x01);
  6130  004084  0E01               	movlw	1
  6131  004086  ECB5  F01F         	call	_lcd_cmd
  6132                           
  6133                           ;lcd4a.c: 72: break;
  6134  00408A  0012               	return	
  6135  00408C                     
  6136                           ;lcd4a.c: 74: lcd_cmd(3);
  6137  00408C  0E03               	movlw	3
  6138  00408E  ECB5  F01F         	call	_lcd_cmd
  6139                           
  6140                           ;lcd4a.c: 75: break;
  6141  004092  0012               	return	
  6142  004094                     
  6143                           ;lcd4a.c: 77: lcd_cmd(0x10);
  6144  004094  0E10               	movlw	16
  6145  004096  ECB5  F01F         	call	_lcd_cmd
  6146                           
  6147                           ;lcd4a.c: 78: break;
  6148  00409A  0012               	return	
  6149  00409C                     
  6150                           ;lcd4a.c: 80: lcd_dwr(c);
  6151  00409C  5031               	movf	lcd_putc@c,w,c
  6152  00409E  ECFE  F01F         	call	_lcd_dwr
  6153                           
  6154                           ;lcd4a.c: 82: }
  6155                           
  6156                           ;lcd4a.c: 81: break;
  6157  0040A2  0012               	return	
  6158  0040A4                     l24:
  6159  0040A4  5031               	movf	lcd_putc@c,w,c
  6160                           
  6161                           ; Switch size 1, requested type "space"
  6162                           ; Number of cases is 3, Range of values is 8 to 12
  6163                           ; switch strategies available:
  6164                           ; Name         Instructions Cycles
  6165                           ; simple_byte           10     6 (average)
  6166                           ;	Chosen strategy is simple_byte
  6167  0040A6  0A08               	xorlw	8	; case 8
  6168  0040A8  B4D8               	btfsc	status,2,c
  6169  0040AA  D7F4               	goto	l28
  6170  0040AC  0A02               	xorlw	2	; case 10
  6171  0040AE  B4D8               	btfsc	status,2,c
  6172  0040B0  D7ED               	goto	l27
  6173  0040B2  0A06               	xorlw	6	; case 12
  6174  0040B4  B4D8               	btfsc	status,2,c
  6175  0040B6  D7E6               	goto	l25
  6176  0040B8  D7F1               	goto	l29
  6177  0040BA                     __end_of_lcd_putc:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           indf0	equ	0xFEF
  6187                           postinc0	equ	0xFEE
  6188                           fsr0h	equ	0xFEA
  6189                           fsr0l	equ	0xFE9
  6190                           wreg	equ	0xFE8
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function _lcd_dwr *****************
  6198 ;; Defined at:
  6199 ;;		line 86 in file "../MyLibs/lcd4a.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  x               1    wreg     unsigned char 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  x               1   47[COMRAM] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6213 ;;      Params:         0       0       0       0       0       0       0
  6214 ;;      Locals:         1       0       0       0       0       0       0
  6215 ;;      Temps:          1       0       0       0       0       0       0
  6216 ;;      Totals:         2       0       0       0       0       0       0
  6217 ;;Total ram usage:        2 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    3
  6220 ;; This function calls:
  6221 ;;		_lcd_lat
  6222 ;;		_manda
  6223 ;; This function is called by:
  6224 ;;		_lcd_putc
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text17
  6229  003FFC                     __ptext17:
  6230                           	opt stack 0
  6231  003FFC                     _lcd_dwr:
  6232                           	opt stack 25
  6233                           
  6234                           ;incstack = 0
  6235                           ;lcd_dwr@x stored from wreg
  6236  003FFC  6E30               	movwf	lcd_dwr@x,c
  6237                           
  6238                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  6239  003FFE  8A8C               	bsf	3980,5,c	;volatile
  6240                           
  6241                           ;lcd4a.c: 89: lcd &= 0x0F;
  6242  004000  0E0F               	movlw	15
  6243  004002  1650               	andwf	_lcd,f,c
  6244                           
  6245                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  6246  004004  5030               	movf	lcd_dwr@x,w,c
  6247  004006  0BF0               	andlw	240
  6248  004008  1250               	iorwf	_lcd,f,c
  6249                           
  6250                           ;lcd4a.c: 91: manda(lcd);
  6251  00400A  5050               	movf	_lcd,w,c
  6252  00400C  ECC2  F020         	call	_manda
  6253                           
  6254                           ;lcd4a.c: 92: lcd_lat();
  6255  004010  EC07  F021         	call	_lcd_lat	;wreg free
  6256                           
  6257                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(16000000/4000.0)));
  6258  004014  0E15               	movlw	21
  6259  004016  6E2F               	movwf	??_lcd_dwr& (0+255),c
  6260  004018  0EC6               	movlw	198
  6261  00401A                     u6847:
  6262  00401A  2EE8               	decfsz	wreg,f,c
  6263  00401C  D7FE               	bra	u6847
  6264  00401E  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  6265  004020  D7FC               	bra	u6847
  6266  004022  D000               	nop2	
  6267                           
  6268                           ;lcd4a.c: 95: lcd &= 0x0F;
  6269  004024  0E0F               	movlw	15
  6270  004026  1650               	andwf	_lcd,f,c
  6271                           
  6272                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  6273  004028  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  6274  00402C  0E0F               	movlw	15
  6275  00402E  162F               	andwf	??_lcd_dwr,f,c
  6276  004030  382F               	swapf	??_lcd_dwr,w,c
  6277  004032  0BF0               	andlw	240
  6278  004034  1250               	iorwf	_lcd,f,c
  6279                           
  6280                           ;lcd4a.c: 97: manda(lcd);
  6281  004036  5050               	movf	_lcd,w,c
  6282  004038  ECC2  F020         	call	_manda
  6283                           
  6284                           ;lcd4a.c: 98: lcd_lat();
  6285  00403C  EC07  F021         	call	_lcd_lat	;wreg free
  6286  004040  0012               	return		;funcret
  6287  004042                     __end_of_lcd_dwr:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           intcon	equ	0xFF2
  6296                           indf0	equ	0xFEF
  6297                           postinc0	equ	0xFEE
  6298                           fsr0h	equ	0xFEA
  6299                           fsr0l	equ	0xFE9
  6300                           wreg	equ	0xFE8
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _lcd_init *****************
  6308 ;; Defined at:
  6309 ;;		line 135 in file "../MyLibs/lcd4a.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;		None
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;		None
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      void 
  6316 ;; Registers used:
  6317 ;;		wreg, status,2, status,0, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6323 ;;      Params:         0       0       0       0       0       0       0
  6324 ;;      Locals:         0       0       0       0       0       0       0
  6325 ;;      Temps:          1       0       0       0       0       0       0
  6326 ;;      Totals:         1       0       0       0       0       0       0
  6327 ;;Total ram usage:        1 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    4
  6330 ;; This function calls:
  6331 ;;		_lcd_cmd
  6332 ;;		_lcd_cmd_hf
  6333 ;; This function is called by:
  6334 ;;		_main
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text18
  6339  003C7E                     __ptext18:
  6340                           	opt stack 0
  6341  003C7E                     _lcd_init:
  6342                           	opt stack 26
  6343                           
  6344                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  6345                           
  6346                           ;incstack = 0
  6347  003C7E  9E93               	bcf	3987,7,c	;volatile
  6348                           
  6349                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  6350  003C80  9C93               	bcf	3987,6,c	;volatile
  6351                           
  6352                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  6353  003C82  9A93               	bcf	3987,5,c	;volatile
  6354                           
  6355                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  6356  003C84  9893               	bcf	3987,4,c	;volatile
  6357                           
  6358                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  6359  003C86  9A95               	bcf	3989,5,c	;volatile
  6360                           
  6361                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  6362  003C88  9C95               	bcf	3989,6,c	;volatile
  6363                           
  6364                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  6365  003C8A  9E95               	bcf	3989,7,c	;volatile
  6366                           
  6367                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  6368  003C8C  9C8C               	bcf	3980,6,c	;volatile
  6369                           
  6370                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
  6371  003C8E  0E30               	movlw	48
  6372  003C90  ECFA  F020         	call	_lcd_cmd_hf
  6373                           
  6374                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(16000000/4000.0)));
  6375  003C94  0E4E               	movlw	78
  6376  003C96  6E31               	movwf	??_lcd_init& (0+255),c
  6377  003C98  0EEB               	movlw	235
  6378  003C9A                     u6857:
  6379  003C9A  2EE8               	decfsz	wreg,f,c
  6380  003C9C  D7FE               	bra	u6857
  6381  003C9E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6382  003CA0  D7FC               	bra	u6857
  6383  003CA2  F000               	nop	
  6384                           
  6385                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
  6386  003CA4  0E30               	movlw	48
  6387  003CA6  ECFA  F020         	call	_lcd_cmd_hf
  6388                           
  6389                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(16000000/4000.0)));
  6390  003CAA  0E10               	movlw	16
  6391  003CAC  6E31               	movwf	??_lcd_init& (0+255),c
  6392  003CAE  0E94               	movlw	148
  6393  003CB0                     u6867:
  6394  003CB0  2EE8               	decfsz	wreg,f,c
  6395  003CB2  D7FE               	bra	u6867
  6396  003CB4  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6397  003CB6  D7FC               	bra	u6867
  6398  003CB8  D000               	nop2	
  6399                           
  6400                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
  6401  003CBA  0E30               	movlw	48
  6402  003CBC  ECFA  F020         	call	_lcd_cmd_hf
  6403                           
  6404                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(16000000/4000.0)));
  6405  003CC0  0E4E               	movlw	78
  6406  003CC2  6E31               	movwf	??_lcd_init& (0+255),c
  6407  003CC4  0EEB               	movlw	235
  6408  003CC6                     u6877:
  6409  003CC6  2EE8               	decfsz	wreg,f,c
  6410  003CC8  D7FE               	bra	u6877
  6411  003CCA  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6412  003CCC  D7FC               	bra	u6877
  6413  003CCE  F000               	nop	
  6414                           
  6415                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
  6416  003CD0  0E20               	movlw	32
  6417  003CD2  ECFA  F020         	call	_lcd_cmd_hf
  6418                           
  6419                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(16000000/4000.0)));
  6420  003CD6  0E20               	movlw	32
  6421  003CD8  6E31               	movwf	??_lcd_init& (0+255),c
  6422  003CDA  0E2A               	movlw	42
  6423  003CDC                     u6887:
  6424  003CDC  2EE8               	decfsz	wreg,f,c
  6425  003CDE  D7FE               	bra	u6887
  6426  003CE0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6427  003CE2  D7FC               	bra	u6887
  6428                           
  6429                           ;lcd4a.c: 166: lcd_cmd(0x28);
  6430  003CE4  0E28               	movlw	40
  6431  003CE6  ECB5  F01F         	call	_lcd_cmd
  6432                           
  6433                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(16000000/4000.0)));
  6434  003CEA  0E20               	movlw	32
  6435  003CEC  6E31               	movwf	??_lcd_init& (0+255),c
  6436  003CEE  0E2A               	movlw	42
  6437  003CF0                     u6897:
  6438  003CF0  2EE8               	decfsz	wreg,f,c
  6439  003CF2  D7FE               	bra	u6897
  6440  003CF4  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6441  003CF6  D7FC               	bra	u6897
  6442                           
  6443                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  6444  003CF8  0E0E               	movlw	14
  6445  003CFA  ECB5  F01F         	call	_lcd_cmd
  6446                           
  6447                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(16000000/4000.0)));
  6448  003CFE  0E20               	movlw	32
  6449  003D00  6E31               	movwf	??_lcd_init& (0+255),c
  6450  003D02  0E2A               	movlw	42
  6451  003D04                     u6907:
  6452  003D04  2EE8               	decfsz	wreg,f,c
  6453  003D06  D7FE               	bra	u6907
  6454  003D08  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6455  003D0A  D7FC               	bra	u6907
  6456                           
  6457                           ;lcd4a.c: 170: lcd_cmd(0x01);
  6458  003D0C  0E01               	movlw	1
  6459  003D0E  ECB5  F01F         	call	_lcd_cmd
  6460                           
  6461                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(16000000/4000.0)));
  6462  003D12  0E20               	movlw	32
  6463  003D14  6E31               	movwf	??_lcd_init& (0+255),c
  6464  003D16  0E2A               	movlw	42
  6465  003D18                     u6917:
  6466  003D18  2EE8               	decfsz	wreg,f,c
  6467  003D1A  D7FE               	bra	u6917
  6468  003D1C  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6469  003D1E  D7FC               	bra	u6917
  6470                           
  6471                           ;lcd4a.c: 172: lcd_cmd(0x06);
  6472  003D20  0E06               	movlw	6
  6473  003D22  ECB5  F01F         	call	_lcd_cmd
  6474                           
  6475                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(16000000/4000.0)));
  6476  003D26  0E20               	movlw	32
  6477  003D28  6E31               	movwf	??_lcd_init& (0+255),c
  6478  003D2A  0E2A               	movlw	42
  6479  003D2C                     u6927:
  6480  003D2C  2EE8               	decfsz	wreg,f,c
  6481  003D2E  D7FE               	bra	u6927
  6482  003D30  2E31               	decfsz	??_lcd_init& (0+255),f,c
  6483  003D32  D7FC               	bra	u6927
  6484                           
  6485                           ;lcd4a.c: 174: lcd_cmd(0x80);
  6486  003D34  0E80               	movlw	128
  6487  003D36  ECB5  F01F         	call	_lcd_cmd
  6488  003D3A  0012               	return		;funcret
  6489  003D3C                     __end_of_lcd_init:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           indf0	equ	0xFEF
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function _lcd_cmd_hf *****************
  6510 ;; Defined at:
  6511 ;;		line 56 in file "../MyLibs/lcd4a.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  x               1    wreg     unsigned char 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  x               1   46[COMRAM] unsigned char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, status,2, status,0, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6525 ;;      Params:         0       0       0       0       0       0       0
  6526 ;;      Locals:         1       0       0       0       0       0       0
  6527 ;;      Temps:          0       0       0       0       0       0       0
  6528 ;;      Totals:         1       0       0       0       0       0       0
  6529 ;;Total ram usage:        1 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    3
  6532 ;; This function calls:
  6533 ;;		_lcd_lat
  6534 ;;		_manda
  6535 ;; This function is called by:
  6536 ;;		_lcd_init
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text19
  6541  0041F4                     __ptext19:
  6542                           	opt stack 0
  6543  0041F4                     _lcd_cmd_hf:
  6544                           	opt stack 26
  6545                           
  6546                           ;incstack = 0
  6547                           ;lcd_cmd_hf@x stored from wreg
  6548  0041F4  6E2F               	movwf	lcd_cmd_hf@x,c
  6549                           
  6550                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6551  0041F6  9A8C               	bcf	3980,5,c	;volatile
  6552                           
  6553                           ;lcd4a.c: 59: lcd &= 0x0F;
  6554  0041F8  0E0F               	movlw	15
  6555  0041FA  1650               	andwf	_lcd,f,c
  6556                           
  6557                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  6558  0041FC  502F               	movf	lcd_cmd_hf@x,w,c
  6559  0041FE  0BF0               	andlw	240
  6560  004200  1250               	iorwf	_lcd,f,c
  6561                           
  6562                           ;lcd4a.c: 61: manda(lcd);
  6563  004202  5050               	movf	_lcd,w,c
  6564  004204  ECC2  F020         	call	_manda
  6565                           
  6566                           ;lcd4a.c: 62: lcd_lat();
  6567  004208  EC07  F021         	call	_lcd_lat	;wreg free
  6568  00420C  0012               	return		;funcret
  6569  00420E                     __end_of_lcd_cmd_hf:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           indf0	equ	0xFEF
  6579                           postinc0	equ	0xFEE
  6580                           fsr0h	equ	0xFEA
  6581                           fsr0l	equ	0xFE9
  6582                           wreg	equ	0xFE8
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _lcd_gotoxy *****************
  6590 ;; Defined at:
  6591 ;;		line 114 in file "../MyLibs/lcd4a.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  x               1    wreg     unsigned char 
  6594 ;;  y               1   48[COMRAM] unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  x               1   50[COMRAM] unsigned char 
  6597 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         1       0       0       0       0       0       0
  6608 ;;      Locals:         2       0       0       0       0       0       0
  6609 ;;      Temps:          1       0       0       0       0       0       0
  6610 ;;      Totals:         4       0       0       0       0       0       0
  6611 ;;Total ram usage:        4 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		_lcd_cmd
  6616 ;; This function is called by:
  6617 ;;		_main
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text20
  6622  0040F2                     __ptext20:
  6623                           	opt stack 0
  6624  0040F2                     _lcd_gotoxy:
  6625                           	opt stack 26
  6626                           
  6627                           ;incstack = 0
  6628                           ;lcd_gotoxy@x stored from wreg
  6629  0040F2  6E33               	movwf	lcd_gotoxy@x,c
  6630                           
  6631                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  6632  0040F4  0E00               	movlw	0
  6633  0040F6  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6634                           
  6635                           ;lcd4a.c: 118: switch(y)
  6636  0040F8  D005               	goto	l42
  6637  0040FA                     
  6638                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  6639  0040FA  0EC0               	movlw	192
  6640  0040FC  D001               	goto	L4
  6641  0040FE                     
  6642                           ;lcd4a.c: 127: ADDRESS = 0x80;
  6643  0040FE  0E80               	movlw	128
  6644  004100                     L4:
  6645  004100  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6646                           
  6647                           ;lcd4a.c: 130: }
  6648                           
  6649                           ;lcd4a.c: 128: break;
  6650  004102  D008               	goto	l44
  6651  004104                     l42:
  6652  004104  5031               	movf	lcd_gotoxy@y,w,c
  6653                           
  6654                           ; Switch size 1, requested type "space"
  6655                           ; Number of cases is 2, Range of values is 1 to 2
  6656                           ; switch strategies available:
  6657                           ; Name         Instructions Cycles
  6658                           ; simple_byte            7     4 (average)
  6659                           ;	Chosen strategy is simple_byte
  6660  004106  0A01               	xorlw	1	; case 1
  6661  004108  B4D8               	btfsc	status,2,c
  6662  00410A  D7F9               	goto	l46
  6663  00410C  0A03               	xorlw	3	; case 2
  6664  00410E  B4D8               	btfsc	status,2,c
  6665  004110  D7F4               	goto	l45
  6666  004112  D7F5               	goto	l46
  6667  004114                     l44:
  6668                           
  6669                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  6670  004114  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6671  004116  2433               	addwf	lcd_gotoxy@x,w,c
  6672  004118  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  6673  00411A  0432               	decf	??_lcd_gotoxy,w,c
  6674  00411C  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  6675                           
  6676                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  6677  00411E  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  6678  004120  ECB5  F01F         	call	_lcd_cmd
  6679  004124  0012               	return		;funcret
  6680  004126                     __end_of_lcd_gotoxy:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           intcon	equ	0xFF2
  6689                           indf0	equ	0xFEF
  6690                           postinc0	equ	0xFEE
  6691                           fsr0h	equ	0xFEA
  6692                           fsr0l	equ	0xFE9
  6693                           wreg	equ	0xFE8
  6694                           indf2	equ	0xFDF
  6695                           postinc2	equ	0xFDE
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8
  6699                           
  6700 ;; *************** function _lcd_cmd *****************
  6701 ;; Defined at:
  6702 ;;		line 40 in file "../MyLibs/lcd4a.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;  x               1    wreg     unsigned char 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  x               1   47[COMRAM] unsigned char 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  1    wreg      void 
  6709 ;; Registers used:
  6710 ;;		wreg, status,2, status,0, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6716 ;;      Params:         0       0       0       0       0       0       0
  6717 ;;      Locals:         1       0       0       0       0       0       0
  6718 ;;      Temps:          1       0       0       0       0       0       0
  6719 ;;      Totals:         2       0       0       0       0       0       0
  6720 ;;Total ram usage:        2 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    3
  6723 ;; This function calls:
  6724 ;;		_lcd_lat
  6725 ;;		_manda
  6726 ;; This function is called by:
  6727 ;;		_lcd_putc
  6728 ;;		_lcd_gotoxy
  6729 ;;		_lcd_init
  6730 ;;		_lcd_setcursor_vb
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	text21
  6735  003F6A                     __ptext21:
  6736                           	opt stack 0
  6737  003F6A                     _lcd_cmd:
  6738                           	opt stack 25
  6739                           
  6740                           ;incstack = 0
  6741                           ;lcd_cmd@x stored from wreg
  6742  003F6A  6E30               	movwf	lcd_cmd@x,c
  6743                           
  6744                           ;lcd4a.c: 42: lcd = 0;
  6745  003F6C  0E00               	movlw	0
  6746  003F6E  6E50               	movwf	_lcd,c
  6747                           
  6748                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  6749  003F70  9A8C               	bcf	3980,5,c	;volatile
  6750                           
  6751                           ;lcd4a.c: 44: lcd &= 0x0F;
  6752  003F72  0E0F               	movlw	15
  6753  003F74  1650               	andwf	_lcd,f,c
  6754                           
  6755                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  6756  003F76  5030               	movf	lcd_cmd@x,w,c
  6757  003F78  0BF0               	andlw	240
  6758  003F7A  1250               	iorwf	_lcd,f,c
  6759                           
  6760                           ;lcd4a.c: 46: manda(lcd);
  6761  003F7C  5050               	movf	_lcd,w,c
  6762  003F7E  ECC2  F020         	call	_manda
  6763                           
  6764                           ;lcd4a.c: 47: lcd_lat();
  6765  003F82  EC07  F021         	call	_lcd_lat	;wreg free
  6766                           
  6767                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(16000000/4000.0)));
  6768  003F86  0E15               	movlw	21
  6769  003F88  6E2F               	movwf	??_lcd_cmd& (0+255),c
  6770  003F8A  0EC6               	movlw	198
  6771  003F8C                     u6937:
  6772  003F8C  2EE8               	decfsz	wreg,f,c
  6773  003F8E  D7FE               	bra	u6937
  6774  003F90  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  6775  003F92  D7FC               	bra	u6937
  6776  003F94  D000               	nop2	
  6777                           
  6778                           ;lcd4a.c: 50: lcd &= 0x0F;
  6779  003F96  0E0F               	movlw	15
  6780  003F98  1650               	andwf	_lcd,f,c
  6781                           
  6782                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  6783  003F9A  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  6784  003F9E  0E0F               	movlw	15
  6785  003FA0  162F               	andwf	??_lcd_cmd,f,c
  6786  003FA2  382F               	swapf	??_lcd_cmd,w,c
  6787  003FA4  0BF0               	andlw	240
  6788  003FA6  1250               	iorwf	_lcd,f,c
  6789                           
  6790                           ;lcd4a.c: 52: manda(lcd);
  6791  003FA8  5050               	movf	_lcd,w,c
  6792  003FAA  ECC2  F020         	call	_manda
  6793                           
  6794                           ;lcd4a.c: 53: lcd_lat();
  6795  003FAE  EC07  F021         	call	_lcd_lat	;wreg free
  6796  003FB2  0012               	return		;funcret
  6797  003FB4                     __end_of_lcd_cmd:
  6798                           	opt stack 0
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           prodh	equ	0xFF4
  6804                           prodl	equ	0xFF3
  6805                           intcon	equ	0xFF2
  6806                           indf0	equ	0xFEF
  6807                           postinc0	equ	0xFEE
  6808                           fsr0h	equ	0xFEA
  6809                           fsr0l	equ	0xFE9
  6810                           wreg	equ	0xFE8
  6811                           indf2	equ	0xFDF
  6812                           postinc2	equ	0xFDE
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _manda *****************
  6818 ;; Defined at:
  6819 ;;		line 178 in file "../MyLibs/lcd4a.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  dato            1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  dato            1   45[COMRAM] unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2, status,0
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6833 ;;      Params:         0       0       0       0       0       0       0
  6834 ;;      Locals:         1       0       0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0
  6836 ;;      Totals:         1       0       0       0       0       0       0
  6837 ;;Total ram usage:        1 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    2
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_lcd_cmd
  6844 ;;		_lcd_cmd_hf
  6845 ;;		_lcd_dwr
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           	psect	text22
  6850  004184                     __ptext22:
  6851                           	opt stack 0
  6852  004184                     _manda:
  6853                           	opt stack 25
  6854                           
  6855                           ;incstack = 0
  6856                           ;manda@dato stored from wreg
  6857  004184  6E2E               	movwf	manda@dato,c
  6858                           
  6859                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  6860  004186  A82E               	btfss	manda@dato,4,c
  6861  004188  D002               	goto	l53
  6862  00418A  888A               	bsf	3978,4,c	;volatile
  6863  00418C  D001               	goto	l54
  6864  00418E                     l53:
  6865                           
  6866                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  6867  00418E  988A               	bcf	3978,4,c	;volatile
  6868  004190                     l54:
  6869                           
  6870                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  6871  004190  AA2E               	btfss	manda@dato,5,c
  6872  004192  D002               	goto	l55
  6873  004194  8A8A               	bsf	3978,5,c	;volatile
  6874  004196  D001               	goto	l56
  6875  004198                     l55:
  6876                           
  6877                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  6878  004198  9A8A               	bcf	3978,5,c	;volatile
  6879  00419A                     l56:
  6880                           
  6881                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  6882  00419A  AC2E               	btfss	manda@dato,6,c
  6883  00419C  D002               	goto	l57
  6884  00419E  8C8A               	bsf	3978,6,c	;volatile
  6885  0041A0  D001               	goto	l58
  6886  0041A2                     l57:
  6887                           
  6888                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  6889  0041A2  9C8A               	bcf	3978,6,c	;volatile
  6890  0041A4                     l58:
  6891                           
  6892                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  6893  0041A4  AE2E               	btfss	manda@dato,7,c
  6894  0041A6  D002               	goto	l59
  6895  0041A8  8E8A               	bsf	3978,7,c	;volatile
  6896  0041AA  0012               	return	
  6897  0041AC                     l59:
  6898                           
  6899                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  6900  0041AC  9E8A               	bcf	3978,7,c	;volatile
  6901  0041AE  0012               	return	
  6902  0041B0                     __end_of_manda:
  6903                           	opt stack 0
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           intcon	equ	0xFF2
  6911                           indf0	equ	0xFEF
  6912                           postinc0	equ	0xFEE
  6913                           fsr0h	equ	0xFEA
  6914                           fsr0l	equ	0xFE9
  6915                           wreg	equ	0xFE8
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _lcd_lat *****************
  6923 ;; Defined at:
  6924 ;;		line 29 in file "../MyLibs/lcd4a.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, status,2, status,0
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6938 ;;      Params:         0       0       0       0       0       0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0
  6940 ;;      Temps:          1       0       0       0       0       0       0
  6941 ;;      Totals:         1       0       0       0       0       0       0
  6942 ;;Total ram usage:        1 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_lcd_cmd
  6949 ;;		_lcd_cmd_hf
  6950 ;;		_lcd_dwr
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text23
  6955  00420E                     __ptext23:
  6956                           	opt stack 0
  6957  00420E                     _lcd_lat:
  6958                           	opt stack 25
  6959                           
  6960                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  6961                           
  6962                           ;incstack = 0
  6963  00420E  8E8C               	bsf	3980,7,c	;volatile
  6964                           
  6965                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(16000000/4000.0)));
  6966  004210  0E10               	movlw	16
  6967  004212  6E2E               	movwf	??_lcd_lat& (0+255),c
  6968  004214  0E94               	movlw	148
  6969  004216                     u6947:
  6970  004216  2EE8               	decfsz	wreg,f,c
  6971  004218  D7FE               	bra	u6947
  6972  00421A  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  6973  00421C  D7FC               	bra	u6947
  6974  00421E  D000               	nop2	
  6975                           
  6976                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  6977  004220  9E8C               	bcf	3980,7,c	;volatile
  6978  004222  0012               	return		;funcret
  6979  004224                     __end_of_lcd_lat:
  6980                           	opt stack 0
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodh	equ	0xFF4
  6986                           prodl	equ	0xFF3
  6987                           intcon	equ	0xFF2
  6988                           indf0	equ	0xFEF
  6989                           postinc0	equ	0xFEE
  6990                           fsr0h	equ	0xFEA
  6991                           fsr0l	equ	0xFE9
  6992                           wreg	equ	0xFE8
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _identificarColor *****************
  7000 ;; Defined at:
  7001 ;;		line 423 in file "color_3.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  colB            4   94[BANK0 ] float 
  7004 ;;  colR            4   98[BANK0 ] float 
  7005 ;;  colV            4  102[BANK0 ] float 
  7006 ;;  colA            4  106[BANK0 ] float 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  del_A           4   44[BANK1 ] float 
  7009 ;;  del_V           4   40[BANK1 ] float 
  7010 ;;  del_R           4   36[BANK1 ] float 
  7011 ;;  delta           4   88[BANK1 ] float 
  7012 ;;  v               4   84[BANK1 ] float 
  7013 ;;  r               4   80[BANK1 ] float 
  7014 ;;  maxRVB          4   76[BANK1 ] float 
  7015 ;;  t               4   72[BANK1 ] float 
  7016 ;;  offset          4   64[BANK1 ] float 
  7017 ;;  a               4   60[BANK1 ] float 
  7018 ;;  minRVB          4   52[BANK1 ] float 
  7019 ;;  l               4   48[BANK1 ] float 
  7020 ;;  somme           4   32[BANK1 ] float 
  7021 ;;  s               4   28[BANK1 ] float 
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  4   94[BANK0 ] float 
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7031 ;;      Params:         0      16       0       0       0       0       0
  7032 ;;      Locals:         0       0      92       0       0       0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0
  7034 ;;      Totals:         0      16      92       0       0       0       0
  7035 ;;Total ram usage:      108 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    4
  7038 ;; This function calls:
  7039 ;;		___fladd
  7040 ;;		___fldiv
  7041 ;;		___flge
  7042 ;;		___flmul
  7043 ;;		___flneg
  7044 ;;		___flsub
  7045 ;; This function is called by:
  7046 ;;		_main
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text24
  7051  0006C4                     __ptext24:
  7052                           	opt stack 0
  7053  0006C4                     _identificarColor:
  7054                           	opt stack 26
  7055                           
  7056                           ;color_3.c: 425: float r,v,a;
  7057                           ;color_3.c: 426: float offset = 3.0/colB;
  7058                           
  7059                           ;incstack = 0
  7060  0006C4  0E00               	movlw	0
  7061  0006C6  0100               	movlb	0	; () banked
  7062  0006C8  6F91               	movwf	___fldiv@b& (0+255),b
  7063  0006CA  0E00               	movlw	0
  7064  0006CC  6F92               	movwf	(___fldiv@b+1)& (0+255),b
  7065  0006CE  0E40               	movlw	64
  7066  0006D0  6F93               	movwf	(___fldiv@b+2)& (0+255),b
  7067  0006D2  0E40               	movlw	64
  7068  0006D4  6F94               	movwf	(___fldiv@b+3)& (0+255),b
  7069  0006D6  C0DE  F095         	movff	identificarColor@colB,___fldiv@a
  7070  0006DA  C0DF  F096         	movff	identificarColor@colB+1,___fldiv@a+1
  7071  0006DE  C0E0  F097         	movff	identificarColor@colB+2,___fldiv@a+2
  7072  0006E2  C0E1  F098         	movff	identificarColor@colB+3,___fldiv@a+3
  7073  0006E6  EC1B  F017         	call	___fldiv	;wreg free
  7074  0006EA  C091  F140         	movff	?___fldiv,identificarColor@offset
  7075  0006EE  C092  F141         	movff	?___fldiv+1,identificarColor@offset+1
  7076  0006F2  C093  F142         	movff	?___fldiv+2,identificarColor@offset+2
  7077  0006F6  C094  F143         	movff	?___fldiv+3,identificarColor@offset+3
  7078                           
  7079                           ;color_3.c: 427: float t,s,l;
  7080                           ;color_3.c: 429: r = (((1.0) < (offset + (colB/colR))) ? (1.0) : (offset + (colB/colR)))
      +                          ;
  7081  0006FA  0E00               	movlw	0
  7082  0006FC  0100               	movlb	0	; () banked
  7083  0006FE  6FD2               	movwf	___flge@ff1& (0+255),b
  7084  000700  0E00               	movlw	0
  7085  000702  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  7086  000704  0E80               	movlw	128
  7087  000706  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  7088  000708  0E3F               	movlw	63
  7089  00070A  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  7090  00070C  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7091  000710  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7092  000714  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7093  000718  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7094  00071C  C0E2  F095         	movff	identificarColor@colR,___fldiv@a
  7095  000720  C0E3  F096         	movff	identificarColor@colR+1,___fldiv@a+1
  7096  000724  C0E4  F097         	movff	identificarColor@colR+2,___fldiv@a+2
  7097  000728  C0E5  F098         	movff	identificarColor@colR+3,___fldiv@a+3
  7098  00072C  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7099  000730  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7100  000734  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7101  000738  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7102  00073C  EC1B  F017         	call	___fldiv	;wreg free
  7103  000740  C091  F0BE         	movff	?___fldiv,___fladd@b
  7104  000744  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7105  000748  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7106  00074C  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7107  000750  EC7C  F015         	call	___fladd	;wreg free
  7108  000754  C0BE  F0D6         	movff	?___fladd,___flge@ff2
  7109  000758  C0BF  F0D7         	movff	?___fladd+1,___flge@ff2+1
  7110  00075C  C0C0  F0D8         	movff	?___fladd+2,___flge@ff2+2
  7111  000760  C0C1  F0D9         	movff	?___fladd+3,___flge@ff2+3
  7112  000764  EC26  F01C         	call	___flge	;wreg free
  7113  000768  0100               	movlb	0	; () banked
  7114  00076A  A0D8               	btfss	status,0,c
  7115  00076C  D02D               	goto	l200
  7116                           
  7117                           ; BSR set to: 0
  7118  00076E  C0E2  F095         	movff	identificarColor@colR,___fldiv@a
  7119  000772  C0E3  F096         	movff	identificarColor@colR+1,___fldiv@a+1
  7120  000776  C0E4  F097         	movff	identificarColor@colR+2,___fldiv@a+2
  7121  00077A  C0E5  F098         	movff	identificarColor@colR+3,___fldiv@a+3
  7122  00077E  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7123  000782  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7124  000786  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7125  00078A  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7126  00078E  EC1B  F017         	call	___fldiv	;wreg free
  7127  000792  C091  F0BE         	movff	?___fldiv,___fladd@b
  7128  000796  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7129  00079A  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7130  00079E  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7131  0007A2  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7132  0007A6  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7133  0007AA  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7134  0007AE  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7135  0007B2  EC7C  F015         	call	___fladd	;wreg free
  7136  0007B6  C0BE  F100         	movff	?___fladd,_identificarColor$267
  7137  0007BA  C0BF  F101         	movff	?___fladd+1,_identificarColor$267+1
  7138  0007BE  C0C0  F102         	movff	?___fladd+2,_identificarColor$267+2
  7139  0007C2  C0C1  F103         	movff	?___fladd+3,_identificarColor$267+3
  7140  0007C6  D009               	goto	l202
  7141  0007C8                     l200:
  7142  0007C8  0E00               	movlw	0
  7143  0007CA  0101               	movlb	1	; () banked
  7144  0007CC  6F00               	movwf	_identificarColor$267& (0+255),b
  7145  0007CE  0E00               	movlw	0
  7146  0007D0  6F01               	movwf	(_identificarColor$267+1)& (0+255),b
  7147  0007D2  0E80               	movlw	128
  7148  0007D4  6F02               	movwf	(_identificarColor$267+2)& (0+255),b
  7149  0007D6  0E3F               	movlw	63
  7150  0007D8  6F03               	movwf	(_identificarColor$267+3)& (0+255),b
  7151  0007DA                     l202:
  7152                           
  7153                           ; BSR set to: 1
  7154  0007DA  C100  F150         	movff	_identificarColor$267,identificarColor@r
  7155  0007DE  C101  F151         	movff	_identificarColor$267+1,identificarColor@r+1
  7156  0007E2  C102  F152         	movff	_identificarColor$267+2,identificarColor@r+2
  7157  0007E6  C103  F153         	movff	_identificarColor$267+3,identificarColor@r+3
  7158                           
  7159                           ;color_3.c: 430: v = (((1.0) < (offset + (colB/colV))) ? (1.0) : (offset + (colB/colV)))
      +                          ;
  7160  0007EA  0E00               	movlw	0
  7161  0007EC  0100               	movlb	0	; () banked
  7162  0007EE  6FD2               	movwf	___flge@ff1& (0+255),b
  7163  0007F0  0E00               	movlw	0
  7164  0007F2  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  7165  0007F4  0E80               	movlw	128
  7166  0007F6  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  7167  0007F8  0E3F               	movlw	63
  7168  0007FA  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  7169  0007FC  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7170  000800  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7171  000804  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7172  000808  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7173  00080C  C0E6  F095         	movff	identificarColor@colV,___fldiv@a
  7174  000810  C0E7  F096         	movff	identificarColor@colV+1,___fldiv@a+1
  7175  000814  C0E8  F097         	movff	identificarColor@colV+2,___fldiv@a+2
  7176  000818  C0E9  F098         	movff	identificarColor@colV+3,___fldiv@a+3
  7177  00081C  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7178  000820  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7179  000824  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7180  000828  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7181  00082C  EC1B  F017         	call	___fldiv	;wreg free
  7182  000830  C091  F0BE         	movff	?___fldiv,___fladd@b
  7183  000834  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7184  000838  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7185  00083C  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7186  000840  EC7C  F015         	call	___fladd	;wreg free
  7187  000844  C0BE  F0D6         	movff	?___fladd,___flge@ff2
  7188  000848  C0BF  F0D7         	movff	?___fladd+1,___flge@ff2+1
  7189  00084C  C0C0  F0D8         	movff	?___fladd+2,___flge@ff2+2
  7190  000850  C0C1  F0D9         	movff	?___fladd+3,___flge@ff2+3
  7191  000854  EC26  F01C         	call	___flge	;wreg free
  7192  000858  0100               	movlb	0	; () banked
  7193  00085A  A0D8               	btfss	status,0,c
  7194  00085C  D02D               	goto	l204
  7195                           
  7196                           ; BSR set to: 0
  7197  00085E  C0E6  F095         	movff	identificarColor@colV,___fldiv@a
  7198  000862  C0E7  F096         	movff	identificarColor@colV+1,___fldiv@a+1
  7199  000866  C0E8  F097         	movff	identificarColor@colV+2,___fldiv@a+2
  7200  00086A  C0E9  F098         	movff	identificarColor@colV+3,___fldiv@a+3
  7201  00086E  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7202  000872  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7203  000876  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7204  00087A  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7205  00087E  EC1B  F017         	call	___fldiv	;wreg free
  7206  000882  C091  F0BE         	movff	?___fldiv,___fladd@b
  7207  000886  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7208  00088A  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7209  00088E  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7210  000892  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7211  000896  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7212  00089A  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7213  00089E  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7214  0008A2  EC7C  F015         	call	___fladd	;wreg free
  7215  0008A6  C0BE  F104         	movff	?___fladd,_identificarColor$268
  7216  0008AA  C0BF  F105         	movff	?___fladd+1,_identificarColor$268+1
  7217  0008AE  C0C0  F106         	movff	?___fladd+2,_identificarColor$268+2
  7218  0008B2  C0C1  F107         	movff	?___fladd+3,_identificarColor$268+3
  7219  0008B6  D009               	goto	l206
  7220  0008B8                     l204:
  7221  0008B8  0E00               	movlw	0
  7222  0008BA  0101               	movlb	1	; () banked
  7223  0008BC  6F04               	movwf	_identificarColor$268& (0+255),b
  7224  0008BE  0E00               	movlw	0
  7225  0008C0  6F05               	movwf	(_identificarColor$268+1)& (0+255),b
  7226  0008C2  0E80               	movlw	128
  7227  0008C4  6F06               	movwf	(_identificarColor$268+2)& (0+255),b
  7228  0008C6  0E3F               	movlw	63
  7229  0008C8  6F07               	movwf	(_identificarColor$268+3)& (0+255),b
  7230  0008CA                     l206:
  7231                           
  7232                           ; BSR set to: 1
  7233  0008CA  C104  F154         	movff	_identificarColor$268,identificarColor@v
  7234  0008CE  C105  F155         	movff	_identificarColor$268+1,identificarColor@v+1
  7235  0008D2  C106  F156         	movff	_identificarColor$268+2,identificarColor@v+2
  7236  0008D6  C107  F157         	movff	_identificarColor$268+3,identificarColor@v+3
  7237                           
  7238                           ;color_3.c: 431: a = (((1.0) < (offset + (colB/colA))) ? (1.0) : (offset + (colB/colA)))
      +                          ;
  7239  0008DA  0E00               	movlw	0
  7240  0008DC  0100               	movlb	0	; () banked
  7241  0008DE  6FD2               	movwf	___flge@ff1& (0+255),b
  7242  0008E0  0E00               	movlw	0
  7243  0008E2  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  7244  0008E4  0E80               	movlw	128
  7245  0008E6  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  7246  0008E8  0E3F               	movlw	63
  7247  0008EA  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  7248  0008EC  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7249  0008F0  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7250  0008F4  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7251  0008F8  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7252  0008FC  C0EA  F095         	movff	identificarColor@colA,___fldiv@a
  7253  000900  C0EB  F096         	movff	identificarColor@colA+1,___fldiv@a+1
  7254  000904  C0EC  F097         	movff	identificarColor@colA+2,___fldiv@a+2
  7255  000908  C0ED  F098         	movff	identificarColor@colA+3,___fldiv@a+3
  7256  00090C  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7257  000910  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7258  000914  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7259  000918  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7260  00091C  EC1B  F017         	call	___fldiv	;wreg free
  7261  000920  C091  F0BE         	movff	?___fldiv,___fladd@b
  7262  000924  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7263  000928  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7264  00092C  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7265  000930  EC7C  F015         	call	___fladd	;wreg free
  7266  000934  C0BE  F0D6         	movff	?___fladd,___flge@ff2
  7267  000938  C0BF  F0D7         	movff	?___fladd+1,___flge@ff2+1
  7268  00093C  C0C0  F0D8         	movff	?___fladd+2,___flge@ff2+2
  7269  000940  C0C1  F0D9         	movff	?___fladd+3,___flge@ff2+3
  7270  000944  EC26  F01C         	call	___flge	;wreg free
  7271  000948  0100               	movlb	0	; () banked
  7272  00094A  A0D8               	btfss	status,0,c
  7273  00094C  D02D               	goto	l208
  7274                           
  7275                           ; BSR set to: 0
  7276  00094E  C0EA  F095         	movff	identificarColor@colA,___fldiv@a
  7277  000952  C0EB  F096         	movff	identificarColor@colA+1,___fldiv@a+1
  7278  000956  C0EC  F097         	movff	identificarColor@colA+2,___fldiv@a+2
  7279  00095A  C0ED  F098         	movff	identificarColor@colA+3,___fldiv@a+3
  7280  00095E  C0DE  F091         	movff	identificarColor@colB,___fldiv@b
  7281  000962  C0DF  F092         	movff	identificarColor@colB+1,___fldiv@b+1
  7282  000966  C0E0  F093         	movff	identificarColor@colB+2,___fldiv@b+2
  7283  00096A  C0E1  F094         	movff	identificarColor@colB+3,___fldiv@b+3
  7284  00096E  EC1B  F017         	call	___fldiv	;wreg free
  7285  000972  C091  F0BE         	movff	?___fldiv,___fladd@b
  7286  000976  C092  F0BF         	movff	?___fldiv+1,___fladd@b+1
  7287  00097A  C093  F0C0         	movff	?___fldiv+2,___fladd@b+2
  7288  00097E  C094  F0C1         	movff	?___fldiv+3,___fladd@b+3
  7289  000982  C140  F0C2         	movff	identificarColor@offset,___fladd@a
  7290  000986  C141  F0C3         	movff	identificarColor@offset+1,___fladd@a+1
  7291  00098A  C142  F0C4         	movff	identificarColor@offset+2,___fladd@a+2
  7292  00098E  C143  F0C5         	movff	identificarColor@offset+3,___fladd@a+3
  7293  000992  EC7C  F015         	call	___fladd	;wreg free
  7294  000996  C0BE  F108         	movff	?___fladd,_identificarColor$269
  7295  00099A  C0BF  F109         	movff	?___fladd+1,_identificarColor$269+1
  7296  00099E  C0C0  F10A         	movff	?___fladd+2,_identificarColor$269+2
  7297  0009A2  C0C1  F10B         	movff	?___fladd+3,_identificarColor$269+3
  7298  0009A6  D009               	goto	l210
  7299  0009A8                     l208:
  7300  0009A8  0E00               	movlw	0
  7301  0009AA  0101               	movlb	1	; () banked
  7302  0009AC  6F08               	movwf	_identificarColor$269& (0+255),b
  7303  0009AE  0E00               	movlw	0
  7304  0009B0  6F09               	movwf	(_identificarColor$269+1)& (0+255),b
  7305  0009B2  0E80               	movlw	128
  7306  0009B4  6F0A               	movwf	(_identificarColor$269+2)& (0+255),b
  7307  0009B6  0E3F               	movlw	63
  7308  0009B8  6F0B               	movwf	(_identificarColor$269+3)& (0+255),b
  7309  0009BA                     l210:
  7310                           
  7311                           ; BSR set to: 1
  7312  0009BA  C108  F13C         	movff	_identificarColor$269,identificarColor@a
  7313  0009BE  C109  F13D         	movff	_identificarColor$269+1,identificarColor@a+1
  7314  0009C2  C10A  F13E         	movff	_identificarColor$269+2,identificarColor@a+2
  7315  0009C6  C10B  F13F         	movff	_identificarColor$269+3,identificarColor@a+3
  7316                           
  7317                           ;color_3.c: 433: float maxRVB = ((((((r) > (v)) ? (r) : (v))) > (a)) ? ((((r) > (v)) ? (
      +                          r) : (v))) : (a));
  7318  0009CA  C154  F0D2         	movff	identificarColor@v,___flge@ff1
  7319  0009CE  C155  F0D3         	movff	identificarColor@v+1,___flge@ff1+1
  7320  0009D2  C156  F0D4         	movff	identificarColor@v+2,___flge@ff1+2
  7321  0009D6  C157  F0D5         	movff	identificarColor@v+3,___flge@ff1+3
  7322  0009DA  C150  F0D6         	movff	identificarColor@r,___flge@ff2
  7323  0009DE  C151  F0D7         	movff	identificarColor@r+1,___flge@ff2+1
  7324  0009E2  C152  F0D8         	movff	identificarColor@r+2,___flge@ff2+2
  7325  0009E6  C153  F0D9         	movff	identificarColor@r+3,___flge@ff2+3
  7326  0009EA  EC26  F01C         	call	___flge	;wreg free
  7327  0009EE  0100               	movlb	0	; () banked
  7328  0009F0  A0D8               	btfss	status,0,c
  7329  0009F2  D009               	goto	l216
  7330                           
  7331                           ; BSR set to: 0
  7332  0009F4  C154  F10C         	movff	identificarColor@v,_identificarColor$271
  7333  0009F8  C155  F10D         	movff	identificarColor@v+1,_identificarColor$271+1
  7334  0009FC  C156  F10E         	movff	identificarColor@v+2,_identificarColor$271+2
  7335  000A00  C157  F10F         	movff	identificarColor@v+3,_identificarColor$271+3
  7336  000A04  D008               	goto	l218
  7337  000A06                     l216:
  7338                           
  7339                           ; BSR set to: 0
  7340  000A06  C150  F10C         	movff	identificarColor@r,_identificarColor$271
  7341  000A0A  C151  F10D         	movff	identificarColor@r+1,_identificarColor$271+1
  7342  000A0E  C152  F10E         	movff	identificarColor@r+2,_identificarColor$271+2
  7343  000A12  C153  F10F         	movff	identificarColor@r+3,_identificarColor$271+3
  7344  000A16                     l218:
  7345                           
  7346                           ; BSR set to: 0
  7347                           
  7348                           ; BSR set to: 0
  7349  000A16  C13C  F0D2         	movff	identificarColor@a,___flge@ff1
  7350  000A1A  C13D  F0D3         	movff	identificarColor@a+1,___flge@ff1+1
  7351  000A1E  C13E  F0D4         	movff	identificarColor@a+2,___flge@ff1+2
  7352  000A22  C13F  F0D5         	movff	identificarColor@a+3,___flge@ff1+3
  7353  000A26  C10C  F0D6         	movff	_identificarColor$271,___flge@ff2
  7354  000A2A  C10D  F0D7         	movff	_identificarColor$271+1,___flge@ff2+1
  7355  000A2E  C10E  F0D8         	movff	_identificarColor$271+2,___flge@ff2+2
  7356  000A32  C10F  F0D9         	movff	_identificarColor$271+3,___flge@ff2+3
  7357  000A36  EC26  F01C         	call	___flge	;wreg free
  7358  000A3A  0100               	movlb	0	; () banked
  7359  000A3C  A0D8               	btfss	status,0,c
  7360  000A3E  D009               	goto	l212
  7361                           
  7362                           ; BSR set to: 0
  7363  000A40  C13C  F14C         	movff	identificarColor@a,identificarColor@maxRVB
  7364  000A44  C13D  F14D         	movff	identificarColor@a+1,identificarColor@maxRVB+1
  7365  000A48  C13E  F14E         	movff	identificarColor@a+2,identificarColor@maxRVB+2
  7366  000A4C  C13F  F14F         	movff	identificarColor@a+3,identificarColor@maxRVB+3
  7367  000A50  D02E               	goto	l214
  7368  000A52                     l212:
  7369                           
  7370                           ; BSR set to: 0
  7371                           
  7372                           ; BSR set to: 0
  7373  000A52  C154  F0D2         	movff	identificarColor@v,___flge@ff1
  7374  000A56  C155  F0D3         	movff	identificarColor@v+1,___flge@ff1+1
  7375  000A5A  C156  F0D4         	movff	identificarColor@v+2,___flge@ff1+2
  7376  000A5E  C157  F0D5         	movff	identificarColor@v+3,___flge@ff1+3
  7377  000A62  C150  F0D6         	movff	identificarColor@r,___flge@ff2
  7378  000A66  C151  F0D7         	movff	identificarColor@r+1,___flge@ff2+1
  7379  000A6A  C152  F0D8         	movff	identificarColor@r+2,___flge@ff2+2
  7380  000A6E  C153  F0D9         	movff	identificarColor@r+3,___flge@ff2+3
  7381  000A72  EC26  F01C         	call	___flge	;wreg free
  7382  000A76  0100               	movlb	0	; () banked
  7383  000A78  A0D8               	btfss	status,0,c
  7384  000A7A  D009               	goto	l220
  7385                           
  7386                           ; BSR set to: 0
  7387  000A7C  C154  F110         	movff	identificarColor@v,_identificarColor$272
  7388  000A80  C155  F111         	movff	identificarColor@v+1,_identificarColor$272+1
  7389  000A84  C156  F112         	movff	identificarColor@v+2,_identificarColor$272+2
  7390  000A88  C157  F113         	movff	identificarColor@v+3,_identificarColor$272+3
  7391  000A8C  D008               	goto	l222
  7392  000A8E                     l220:
  7393                           
  7394                           ; BSR set to: 0
  7395  000A8E  C150  F110         	movff	identificarColor@r,_identificarColor$272
  7396  000A92  C151  F111         	movff	identificarColor@r+1,_identificarColor$272+1
  7397  000A96  C152  F112         	movff	identificarColor@r+2,_identificarColor$272+2
  7398  000A9A  C153  F113         	movff	identificarColor@r+3,_identificarColor$272+3
  7399  000A9E                     l222:
  7400                           
  7401                           ; BSR set to: 0
  7402  000A9E  C110  F14C         	movff	_identificarColor$272,identificarColor@maxRVB
  7403  000AA2  C111  F14D         	movff	_identificarColor$272+1,identificarColor@maxRVB+1
  7404  000AA6  C112  F14E         	movff	_identificarColor$272+2,identificarColor@maxRVB+2
  7405  000AAA  C113  F14F         	movff	_identificarColor$272+3,identificarColor@maxRVB+3
  7406  000AAE                     l214:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;color_3.c: 434: float minRVB = ((((((r) < (v)) ? (r) : (v))) < (a)) ? ((((r) < (v)) ? (
      +                          r) : (v))) : (a));
  7410                           
  7411                           ; BSR set to: 0
  7412  000AAE  C150  F0D2         	movff	identificarColor@r,___flge@ff1
  7413  000AB2  C151  F0D3         	movff	identificarColor@r+1,___flge@ff1+1
  7414  000AB6  C152  F0D4         	movff	identificarColor@r+2,___flge@ff1+2
  7415  000ABA  C153  F0D5         	movff	identificarColor@r+3,___flge@ff1+3
  7416  000ABE  C154  F0D6         	movff	identificarColor@v,___flge@ff2
  7417  000AC2  C155  F0D7         	movff	identificarColor@v+1,___flge@ff2+1
  7418  000AC6  C156  F0D8         	movff	identificarColor@v+2,___flge@ff2+2
  7419  000ACA  C157  F0D9         	movff	identificarColor@v+3,___flge@ff2+3
  7420  000ACE  EC26  F01C         	call	___flge	;wreg free
  7421  000AD2  0100               	movlb	0	; () banked
  7422  000AD4  A0D8               	btfss	status,0,c
  7423  000AD6  D009               	goto	l228
  7424                           
  7425                           ; BSR set to: 0
  7426  000AD8  C154  F114         	movff	identificarColor@v,_identificarColor$274
  7427  000ADC  C155  F115         	movff	identificarColor@v+1,_identificarColor$274+1
  7428  000AE0  C156  F116         	movff	identificarColor@v+2,_identificarColor$274+2
  7429  000AE4  C157  F117         	movff	identificarColor@v+3,_identificarColor$274+3
  7430  000AE8  D008               	goto	l230
  7431  000AEA                     l228:
  7432                           
  7433                           ; BSR set to: 0
  7434  000AEA  C150  F114         	movff	identificarColor@r,_identificarColor$274
  7435  000AEE  C151  F115         	movff	identificarColor@r+1,_identificarColor$274+1
  7436  000AF2  C152  F116         	movff	identificarColor@r+2,_identificarColor$274+2
  7437  000AF6  C153  F117         	movff	identificarColor@r+3,_identificarColor$274+3
  7438  000AFA                     l230:
  7439                           
  7440                           ; BSR set to: 0
  7441                           
  7442                           ; BSR set to: 0
  7443  000AFA  C114  F0D2         	movff	_identificarColor$274,___flge@ff1
  7444  000AFE  C115  F0D3         	movff	_identificarColor$274+1,___flge@ff1+1
  7445  000B02  C116  F0D4         	movff	_identificarColor$274+2,___flge@ff1+2
  7446  000B06  C117  F0D5         	movff	_identificarColor$274+3,___flge@ff1+3
  7447  000B0A  C13C  F0D6         	movff	identificarColor@a,___flge@ff2
  7448  000B0E  C13D  F0D7         	movff	identificarColor@a+1,___flge@ff2+1
  7449  000B12  C13E  F0D8         	movff	identificarColor@a+2,___flge@ff2+2
  7450  000B16  C13F  F0D9         	movff	identificarColor@a+3,___flge@ff2+3
  7451  000B1A  EC26  F01C         	call	___flge	;wreg free
  7452  000B1E  0100               	movlb	0	; () banked
  7453  000B20  A0D8               	btfss	status,0,c
  7454  000B22  D009               	goto	l224
  7455                           
  7456                           ; BSR set to: 0
  7457  000B24  C13C  F134         	movff	identificarColor@a,identificarColor@minRVB
  7458  000B28  C13D  F135         	movff	identificarColor@a+1,identificarColor@minRVB+1
  7459  000B2C  C13E  F136         	movff	identificarColor@a+2,identificarColor@minRVB+2
  7460  000B30  C13F  F137         	movff	identificarColor@a+3,identificarColor@minRVB+3
  7461  000B34  D02E               	goto	l226
  7462  000B36                     l224:
  7463                           
  7464                           ; BSR set to: 0
  7465                           
  7466                           ; BSR set to: 0
  7467  000B36  C150  F0D2         	movff	identificarColor@r,___flge@ff1
  7468  000B3A  C151  F0D3         	movff	identificarColor@r+1,___flge@ff1+1
  7469  000B3E  C152  F0D4         	movff	identificarColor@r+2,___flge@ff1+2
  7470  000B42  C153  F0D5         	movff	identificarColor@r+3,___flge@ff1+3
  7471  000B46  C154  F0D6         	movff	identificarColor@v,___flge@ff2
  7472  000B4A  C155  F0D7         	movff	identificarColor@v+1,___flge@ff2+1
  7473  000B4E  C156  F0D8         	movff	identificarColor@v+2,___flge@ff2+2
  7474  000B52  C157  F0D9         	movff	identificarColor@v+3,___flge@ff2+3
  7475  000B56  EC26  F01C         	call	___flge	;wreg free
  7476  000B5A  0100               	movlb	0	; () banked
  7477  000B5C  A0D8               	btfss	status,0,c
  7478  000B5E  D009               	goto	l232
  7479                           
  7480                           ; BSR set to: 0
  7481  000B60  C154  F118         	movff	identificarColor@v,_identificarColor$275
  7482  000B64  C155  F119         	movff	identificarColor@v+1,_identificarColor$275+1
  7483  000B68  C156  F11A         	movff	identificarColor@v+2,_identificarColor$275+2
  7484  000B6C  C157  F11B         	movff	identificarColor@v+3,_identificarColor$275+3
  7485  000B70  D008               	goto	l234
  7486  000B72                     l232:
  7487                           
  7488                           ; BSR set to: 0
  7489  000B72  C150  F118         	movff	identificarColor@r,_identificarColor$275
  7490  000B76  C151  F119         	movff	identificarColor@r+1,_identificarColor$275+1
  7491  000B7A  C152  F11A         	movff	identificarColor@r+2,_identificarColor$275+2
  7492  000B7E  C153  F11B         	movff	identificarColor@r+3,_identificarColor$275+3
  7493  000B82                     l234:
  7494                           
  7495                           ; BSR set to: 0
  7496  000B82  C118  F134         	movff	_identificarColor$275,identificarColor@minRVB
  7497  000B86  C119  F135         	movff	_identificarColor$275+1,identificarColor@minRVB+1
  7498  000B8A  C11A  F136         	movff	_identificarColor$275+2,identificarColor@minRVB+2
  7499  000B8E  C11B  F137         	movff	_identificarColor$275+3,identificarColor@minRVB+3
  7500  000B92                     l226:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;color_3.c: 436: float delta = maxRVB - minRVB;
  7504                           
  7505                           ; BSR set to: 0
  7506  000B92  C134  F02E         	movff	identificarColor@minRVB,___flneg@f1
  7507  000B96  C135  F02F         	movff	identificarColor@minRVB+1,___flneg@f1+1
  7508  000B9A  C136  F030         	movff	identificarColor@minRVB+2,___flneg@f1+2
  7509  000B9E  C137  F031         	movff	identificarColor@minRVB+3,___flneg@f1+3
  7510  000BA2  ECAB  F020         	call	___flneg	;wreg free
  7511  000BA6  C02E  F0BE         	movff	?___flneg,___fladd@b
  7512  000BAA  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7513  000BAE  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7514  000BB2  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7515  000BB6  C14C  F0C2         	movff	identificarColor@maxRVB,___fladd@a
  7516  000BBA  C14D  F0C3         	movff	identificarColor@maxRVB+1,___fladd@a+1
  7517  000BBE  C14E  F0C4         	movff	identificarColor@maxRVB+2,___fladd@a+2
  7518  000BC2  C14F  F0C5         	movff	identificarColor@maxRVB+3,___fladd@a+3
  7519  000BC6  EC7C  F015         	call	___fladd	;wreg free
  7520  000BCA  C0BE  F158         	movff	?___fladd,identificarColor@delta
  7521  000BCE  C0BF  F159         	movff	?___fladd+1,identificarColor@delta+1
  7522  000BD2  C0C0  F15A         	movff	?___fladd+2,identificarColor@delta+2
  7523  000BD6  C0C1  F15B         	movff	?___fladd+3,identificarColor@delta+3
  7524                           
  7525                           ;color_3.c: 437: float somme = maxRVB + minRVB;
  7526  000BDA  C14C  F0BE         	movff	identificarColor@maxRVB,___fladd@b
  7527  000BDE  C14D  F0BF         	movff	identificarColor@maxRVB+1,___fladd@b+1
  7528  000BE2  C14E  F0C0         	movff	identificarColor@maxRVB+2,___fladd@b+2
  7529  000BE6  C14F  F0C1         	movff	identificarColor@maxRVB+3,___fladd@b+3
  7530  000BEA  C134  F0C2         	movff	identificarColor@minRVB,___fladd@a
  7531  000BEE  C135  F0C3         	movff	identificarColor@minRVB+1,___fladd@a+1
  7532  000BF2  C136  F0C4         	movff	identificarColor@minRVB+2,___fladd@a+2
  7533  000BF6  C137  F0C5         	movff	identificarColor@minRVB+3,___fladd@a+3
  7534  000BFA  EC7C  F015         	call	___fladd	;wreg free
  7535  000BFE  C0BE  F120         	movff	?___fladd,identificarColor@somme
  7536  000C02  C0BF  F121         	movff	?___fladd+1,identificarColor@somme+1
  7537  000C06  C0C0  F122         	movff	?___fladd+2,identificarColor@somme+2
  7538  000C0A  C0C1  F123         	movff	?___fladd+3,identificarColor@somme+3
  7539                           
  7540                           ;color_3.c: 439: l = (somme/2.0);
  7541  000C0E  C120  F091         	movff	identificarColor@somme,___fldiv@b
  7542  000C12  C121  F092         	movff	identificarColor@somme+1,___fldiv@b+1
  7543  000C16  C122  F093         	movff	identificarColor@somme+2,___fldiv@b+2
  7544  000C1A  C123  F094         	movff	identificarColor@somme+3,___fldiv@b+3
  7545  000C1E  0E00               	movlw	0
  7546  000C20  0100               	movlb	0	; () banked
  7547  000C22  6F95               	movwf	___fldiv@a& (0+255),b
  7548  000C24  0E00               	movlw	0
  7549  000C26  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7550  000C28  0E00               	movlw	0
  7551  000C2A  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7552  000C2C  0E40               	movlw	64
  7553  000C2E  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7554  000C30  EC1B  F017         	call	___fldiv	;wreg free
  7555  000C34  C091  F130         	movff	?___fldiv,identificarColor@l
  7556  000C38  C092  F131         	movff	?___fldiv+1,identificarColor@l+1
  7557  000C3C  C093  F132         	movff	?___fldiv+2,identificarColor@l+2
  7558  000C40  C094  F133         	movff	?___fldiv+3,identificarColor@l+3
  7559                           
  7560                           ;color_3.c: 440: if(delta == 0.0)
  7561  000C44  0101               	movlb	1	; () banked
  7562  000C46  5158               	movf	identificarColor@delta& (0+255),w,b
  7563  000C48  1159               	iorwf	(identificarColor@delta+1)& (0+255),w,b
  7564  000C4A  115A               	iorwf	(identificarColor@delta+2)& (0+255),w,b
  7565  000C4C  115B               	iorwf	(identificarColor@delta+3)& (0+255),w,b
  7566  000C4E  A4D8               	btfss	status,2,c
  7567  000C50  D011               	goto	l235
  7568                           
  7569                           ; BSR set to: 1
  7570                           ;color_3.c: 441: {
  7571                           ;color_3.c: 442: t = s = 0.0;
  7572  000C52  0E00               	movlw	0
  7573  000C54  6F1C               	movwf	identificarColor@s& (0+255),b
  7574  000C56  0E00               	movlw	0
  7575  000C58  6F1D               	movwf	(identificarColor@s+1)& (0+255),b
  7576  000C5A  0E00               	movlw	0
  7577  000C5C  6F1E               	movwf	(identificarColor@s+2)& (0+255),b
  7578  000C5E  0E00               	movlw	0
  7579  000C60  6F1F               	movwf	(identificarColor@s+3)& (0+255),b
  7580  000C62  C11C  F148         	movff	identificarColor@s,identificarColor@t
  7581  000C66  C11D  F149         	movff	identificarColor@s+1,identificarColor@t+1
  7582  000C6A  C11E  F14A         	movff	identificarColor@s+2,identificarColor@t+2
  7583  000C6E  C11F  F14B         	movff	identificarColor@s+3,identificarColor@t+3
  7584                           
  7585                           ;color_3.c: 443: }
  7586  000C72  D2E6               	goto	l245
  7587  000C74                     l235:
  7588                           
  7589                           ; BSR set to: 1
  7590                           ;color_3.c: 444: else
  7591                           ;color_3.c: 445: {
  7592                           ;color_3.c: 446: if(l < 0.5)
  7593                           
  7594                           ; BSR set to: 1
  7595  000C74  C130  F0D2         	movff	identificarColor@l,___flge@ff1
  7596  000C78  C131  F0D3         	movff	identificarColor@l+1,___flge@ff1+1
  7597  000C7C  C132  F0D4         	movff	identificarColor@l+2,___flge@ff1+2
  7598  000C80  C133  F0D5         	movff	identificarColor@l+3,___flge@ff1+3
  7599  000C84  0E00               	movlw	0
  7600  000C86  0100               	movlb	0	; () banked
  7601  000C88  6FD6               	movwf	___flge@ff2& (0+255),b
  7602  000C8A  0E00               	movlw	0
  7603  000C8C  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  7604  000C8E  0E00               	movlw	0
  7605  000C90  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  7606  000C92  0E3F               	movlw	63
  7607  000C94  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  7608  000C96  EC26  F01C         	call	___flge	;wreg free
  7609  000C9A  0100               	movlb	0	; () banked
  7610  000C9C  B0D8               	btfsc	status,0,c
  7611  000C9E  D013               	goto	l237
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;color_3.c: 447: {
  7615                           ;color_3.c: 448: s = delta / somme;
  7616  000CA0  C158  F091         	movff	identificarColor@delta,___fldiv@b
  7617  000CA4  C159  F092         	movff	identificarColor@delta+1,___fldiv@b+1
  7618  000CA8  C15A  F093         	movff	identificarColor@delta+2,___fldiv@b+2
  7619  000CAC  C15B  F094         	movff	identificarColor@delta+3,___fldiv@b+3
  7620  000CB0  C120  F095         	movff	identificarColor@somme,___fldiv@a
  7621  000CB4  C121  F096         	movff	identificarColor@somme+1,___fldiv@a+1
  7622  000CB8  C122  F097         	movff	identificarColor@somme+2,___fldiv@a+2
  7623  000CBC  C123  F098         	movff	identificarColor@somme+3,___fldiv@a+3
  7624  000CC0  EC1B  F017         	call	___fldiv	;wreg free
  7625  000CC4  D02F               	goto	L5
  7626  000CC6                     l237:
  7627                           
  7628                           ;color_3.c: 450: else
  7629                           ;color_3.c: 451: {
  7630                           ;color_3.c: 452: s = delta /(2.0 - delta);
  7631  000CC6  C158  F091         	movff	identificarColor@delta,___fldiv@b
  7632  000CCA  C159  F092         	movff	identificarColor@delta+1,___fldiv@b+1
  7633  000CCE  C15A  F093         	movff	identificarColor@delta+2,___fldiv@b+2
  7634  000CD2  C15B  F094         	movff	identificarColor@delta+3,___fldiv@b+3
  7635  000CD6  0E00               	movlw	0
  7636  000CD8  0100               	movlb	0	; () banked
  7637  000CDA  6FC2               	movwf	___fladd@a& (0+255),b
  7638  000CDC  0E00               	movlw	0
  7639  000CDE  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  7640  000CE0  0E00               	movlw	0
  7641  000CE2  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  7642  000CE4  0E40               	movlw	64
  7643  000CE6  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  7644  000CE8  C158  F02E         	movff	identificarColor@delta,___flneg@f1
  7645  000CEC  C159  F02F         	movff	identificarColor@delta+1,___flneg@f1+1
  7646  000CF0  C15A  F030         	movff	identificarColor@delta+2,___flneg@f1+2
  7647  000CF4  C15B  F031         	movff	identificarColor@delta+3,___flneg@f1+3
  7648  000CF8  ECAB  F020         	call	___flneg	;wreg free
  7649  000CFC  C02E  F0BE         	movff	?___flneg,___fladd@b
  7650  000D00  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7651  000D04  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7652  000D08  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7653  000D0C  EC7C  F015         	call	___fladd	;wreg free
  7654  000D10  C0BE  F095         	movff	?___fladd,___fldiv@a
  7655  000D14  C0BF  F096         	movff	?___fladd+1,___fldiv@a+1
  7656  000D18  C0C0  F097         	movff	?___fladd+2,___fldiv@a+2
  7657  000D1C  C0C1  F098         	movff	?___fladd+3,___fldiv@a+3
  7658  000D20  EC1B  F017         	call	___fldiv	;wreg free
  7659  000D24                     L5:
  7660  000D24  C091  F11C         	movff	?___fldiv,identificarColor@s
  7661  000D28  C092  F11D         	movff	?___fldiv+1,identificarColor@s+1
  7662  000D2C  C093  F11E         	movff	?___fldiv+2,identificarColor@s+2
  7663  000D30  C094  F11F         	movff	?___fldiv+3,identificarColor@s+3
  7664                           
  7665                           ;color_3.c: 453: }
  7666                           ;color_3.c: 454: float del_R = ( ( ( maxRVB - r ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7667  000D34  0E00               	movlw	0
  7668  000D36  0100               	movlb	0	; () banked
  7669  000D38  6F95               	movwf	___fldiv@a& (0+255),b
  7670  000D3A  0E00               	movlw	0
  7671  000D3C  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7672  000D3E  0EC0               	movlw	192
  7673  000D40  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7674  000D42  0E40               	movlw	64
  7675  000D44  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7676  000D46  C14C  F0C2         	movff	identificarColor@maxRVB,___fladd@a
  7677  000D4A  C14D  F0C3         	movff	identificarColor@maxRVB+1,___fladd@a+1
  7678  000D4E  C14E  F0C4         	movff	identificarColor@maxRVB+2,___fladd@a+2
  7679  000D52  C14F  F0C5         	movff	identificarColor@maxRVB+3,___fladd@a+3
  7680  000D56  C150  F02E         	movff	identificarColor@r,___flneg@f1
  7681  000D5A  C151  F02F         	movff	identificarColor@r+1,___flneg@f1+1
  7682  000D5E  C152  F030         	movff	identificarColor@r+2,___flneg@f1+2
  7683  000D62  C153  F031         	movff	identificarColor@r+3,___flneg@f1+3
  7684  000D66  ECAB  F020         	call	___flneg	;wreg free
  7685  000D6A  C02E  F0BE         	movff	?___flneg,___fladd@b
  7686  000D6E  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7687  000D72  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7688  000D76  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7689  000D7A  EC7C  F015         	call	___fladd	;wreg free
  7690  000D7E  C0BE  F091         	movff	?___fladd,___fldiv@b
  7691  000D82  C0BF  F092         	movff	?___fladd+1,___fldiv@b+1
  7692  000D86  C0C0  F093         	movff	?___fladd+2,___fldiv@b+2
  7693  000D8A  C0C1  F094         	movff	?___fladd+3,___fldiv@b+3
  7694  000D8E  EC1B  F017         	call	___fldiv	;wreg free
  7695  000D92  C091  F144         	movff	?___fldiv,_identificarColor$914
  7696  000D96  C092  F145         	movff	?___fldiv+1,_identificarColor$914+1
  7697  000D9A  C093  F146         	movff	?___fldiv+2,_identificarColor$914+2
  7698  000D9E  C094  F147         	movff	?___fldiv+3,_identificarColor$914+3
  7699                           
  7700                           ;color_3.c: 453: }
  7701                           ;color_3.c: 454: float del_R = ( ( ( maxRVB - r ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7702  000DA2  0E00               	movlw	0
  7703  000DA4  0100               	movlb	0	; () banked
  7704  000DA6  6F95               	movwf	___fldiv@a& (0+255),b
  7705  000DA8  0E00               	movlw	0
  7706  000DAA  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7707  000DAC  0E00               	movlw	0
  7708  000DAE  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7709  000DB0  0E40               	movlw	64
  7710  000DB2  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7711  000DB4  C158  F091         	movff	identificarColor@delta,___fldiv@b
  7712  000DB8  C159  F092         	movff	identificarColor@delta+1,___fldiv@b+1
  7713  000DBC  C15A  F093         	movff	identificarColor@delta+2,___fldiv@b+2
  7714  000DC0  C15B  F094         	movff	identificarColor@delta+3,___fldiv@b+3
  7715  000DC4  EC1B  F017         	call	___fldiv	;wreg free
  7716  000DC8  C091  F0C2         	movff	?___fldiv,___fladd@a
  7717  000DCC  C092  F0C3         	movff	?___fldiv+1,___fladd@a+1
  7718  000DD0  C093  F0C4         	movff	?___fldiv+2,___fladd@a+2
  7719  000DD4  C094  F0C5         	movff	?___fldiv+3,___fladd@a+3
  7720  000DD8  C144  F0BE         	movff	_identificarColor$914,___fladd@b
  7721  000DDC  C145  F0BF         	movff	_identificarColor$914+1,___fladd@b+1
  7722  000DE0  C146  F0C0         	movff	_identificarColor$914+2,___fladd@b+2
  7723  000DE4  C147  F0C1         	movff	_identificarColor$914+3,___fladd@b+3
  7724  000DE8  EC7C  F015         	call	___fladd	;wreg free
  7725  000DEC  C0BE  F138         	movff	?___fladd,_identificarColor$915
  7726  000DF0  C0BF  F139         	movff	?___fladd+1,_identificarColor$915+1
  7727  000DF4  C0C0  F13A         	movff	?___fladd+2,_identificarColor$915+2
  7728  000DF8  C0C1  F13B         	movff	?___fladd+3,_identificarColor$915+3
  7729                           
  7730                           ;color_3.c: 453: }
  7731                           ;color_3.c: 454: float del_R = ( ( ( maxRVB - r ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7732  000DFC  C138  F091         	movff	_identificarColor$915,___fldiv@b
  7733  000E00  C139  F092         	movff	_identificarColor$915+1,___fldiv@b+1
  7734  000E04  C13A  F093         	movff	_identificarColor$915+2,___fldiv@b+2
  7735  000E08  C13B  F094         	movff	_identificarColor$915+3,___fldiv@b+3
  7736  000E0C  C158  F095         	movff	identificarColor@delta,___fldiv@a
  7737  000E10  C159  F096         	movff	identificarColor@delta+1,___fldiv@a+1
  7738  000E14  C15A  F097         	movff	identificarColor@delta+2,___fldiv@a+2
  7739  000E18  C15B  F098         	movff	identificarColor@delta+3,___fldiv@a+3
  7740  000E1C  EC1B  F017         	call	___fldiv	;wreg free
  7741  000E20  C091  F124         	movff	?___fldiv,identificarColor@del_R
  7742  000E24  C092  F125         	movff	?___fldiv+1,identificarColor@del_R+1
  7743  000E28  C093  F126         	movff	?___fldiv+2,identificarColor@del_R+2
  7744  000E2C  C094  F127         	movff	?___fldiv+3,identificarColor@del_R+3
  7745                           
  7746                           ;color_3.c: 455: float del_V = ( ( ( maxRVB - v ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7747  000E30  0E00               	movlw	0
  7748  000E32  0100               	movlb	0	; () banked
  7749  000E34  6F95               	movwf	___fldiv@a& (0+255),b
  7750  000E36  0E00               	movlw	0
  7751  000E38  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7752  000E3A  0EC0               	movlw	192
  7753  000E3C  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7754  000E3E  0E40               	movlw	64
  7755  000E40  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7756  000E42  C14C  F0C2         	movff	identificarColor@maxRVB,___fladd@a
  7757  000E46  C14D  F0C3         	movff	identificarColor@maxRVB+1,___fladd@a+1
  7758  000E4A  C14E  F0C4         	movff	identificarColor@maxRVB+2,___fladd@a+2
  7759  000E4E  C14F  F0C5         	movff	identificarColor@maxRVB+3,___fladd@a+3
  7760  000E52  C154  F02E         	movff	identificarColor@v,___flneg@f1
  7761  000E56  C155  F02F         	movff	identificarColor@v+1,___flneg@f1+1
  7762  000E5A  C156  F030         	movff	identificarColor@v+2,___flneg@f1+2
  7763  000E5E  C157  F031         	movff	identificarColor@v+3,___flneg@f1+3
  7764  000E62  ECAB  F020         	call	___flneg	;wreg free
  7765  000E66  C02E  F0BE         	movff	?___flneg,___fladd@b
  7766  000E6A  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7767  000E6E  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7768  000E72  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7769  000E76  EC7C  F015         	call	___fladd	;wreg free
  7770  000E7A  C0BE  F091         	movff	?___fladd,___fldiv@b
  7771  000E7E  C0BF  F092         	movff	?___fladd+1,___fldiv@b+1
  7772  000E82  C0C0  F093         	movff	?___fladd+2,___fldiv@b+2
  7773  000E86  C0C1  F094         	movff	?___fladd+3,___fldiv@b+3
  7774  000E8A  EC1B  F017         	call	___fldiv	;wreg free
  7775  000E8E  C091  F144         	movff	?___fldiv,_identificarColor$914
  7776  000E92  C092  F145         	movff	?___fldiv+1,_identificarColor$914+1
  7777  000E96  C093  F146         	movff	?___fldiv+2,_identificarColor$914+2
  7778  000E9A  C094  F147         	movff	?___fldiv+3,_identificarColor$914+3
  7779                           
  7780                           ;color_3.c: 455: float del_V = ( ( ( maxRVB - v ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7781  000E9E  0E00               	movlw	0
  7782  000EA0  0100               	movlb	0	; () banked
  7783  000EA2  6F95               	movwf	___fldiv@a& (0+255),b
  7784  000EA4  0E00               	movlw	0
  7785  000EA6  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7786  000EA8  0E00               	movlw	0
  7787  000EAA  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7788  000EAC  0E40               	movlw	64
  7789  000EAE  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7790  000EB0  C158  F091         	movff	identificarColor@delta,___fldiv@b
  7791  000EB4  C159  F092         	movff	identificarColor@delta+1,___fldiv@b+1
  7792  000EB8  C15A  F093         	movff	identificarColor@delta+2,___fldiv@b+2
  7793  000EBC  C15B  F094         	movff	identificarColor@delta+3,___fldiv@b+3
  7794  000EC0  EC1B  F017         	call	___fldiv	;wreg free
  7795  000EC4  C091  F0C2         	movff	?___fldiv,___fladd@a
  7796  000EC8  C092  F0C3         	movff	?___fldiv+1,___fladd@a+1
  7797  000ECC  C093  F0C4         	movff	?___fldiv+2,___fladd@a+2
  7798  000ED0  C094  F0C5         	movff	?___fldiv+3,___fladd@a+3
  7799  000ED4  C144  F0BE         	movff	_identificarColor$914,___fladd@b
  7800  000ED8  C145  F0BF         	movff	_identificarColor$914+1,___fladd@b+1
  7801  000EDC  C146  F0C0         	movff	_identificarColor$914+2,___fladd@b+2
  7802  000EE0  C147  F0C1         	movff	_identificarColor$914+3,___fladd@b+3
  7803  000EE4  EC7C  F015         	call	___fladd	;wreg free
  7804  000EE8  C0BE  F138         	movff	?___fladd,_identificarColor$915
  7805  000EEC  C0BF  F139         	movff	?___fladd+1,_identificarColor$915+1
  7806  000EF0  C0C0  F13A         	movff	?___fladd+2,_identificarColor$915+2
  7807  000EF4  C0C1  F13B         	movff	?___fladd+3,_identificarColor$915+3
  7808                           
  7809                           ;color_3.c: 455: float del_V = ( ( ( maxRVB - v ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7810  000EF8  C138  F091         	movff	_identificarColor$915,___fldiv@b
  7811  000EFC  C139  F092         	movff	_identificarColor$915+1,___fldiv@b+1
  7812  000F00  C13A  F093         	movff	_identificarColor$915+2,___fldiv@b+2
  7813  000F04  C13B  F094         	movff	_identificarColor$915+3,___fldiv@b+3
  7814  000F08  C158  F095         	movff	identificarColor@delta,___fldiv@a
  7815  000F0C  C159  F096         	movff	identificarColor@delta+1,___fldiv@a+1
  7816  000F10  C15A  F097         	movff	identificarColor@delta+2,___fldiv@a+2
  7817  000F14  C15B  F098         	movff	identificarColor@delta+3,___fldiv@a+3
  7818  000F18  EC1B  F017         	call	___fldiv	;wreg free
  7819  000F1C  C091  F128         	movff	?___fldiv,identificarColor@del_V
  7820  000F20  C092  F129         	movff	?___fldiv+1,identificarColor@del_V+1
  7821  000F24  C093  F12A         	movff	?___fldiv+2,identificarColor@del_V+2
  7822  000F28  C094  F12B         	movff	?___fldiv+3,identificarColor@del_V+3
  7823                           
  7824                           ;color_3.c: 456: float del_A = ( ( ( maxRVB - a ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7825  000F2C  0E00               	movlw	0
  7826  000F2E  0100               	movlb	0	; () banked
  7827  000F30  6F95               	movwf	___fldiv@a& (0+255),b
  7828  000F32  0E00               	movlw	0
  7829  000F34  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7830  000F36  0EC0               	movlw	192
  7831  000F38  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7832  000F3A  0E40               	movlw	64
  7833  000F3C  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7834  000F3E  C14C  F0C2         	movff	identificarColor@maxRVB,___fladd@a
  7835  000F42  C14D  F0C3         	movff	identificarColor@maxRVB+1,___fladd@a+1
  7836  000F46  C14E  F0C4         	movff	identificarColor@maxRVB+2,___fladd@a+2
  7837  000F4A  C14F  F0C5         	movff	identificarColor@maxRVB+3,___fladd@a+3
  7838  000F4E  C13C  F02E         	movff	identificarColor@a,___flneg@f1
  7839  000F52  C13D  F02F         	movff	identificarColor@a+1,___flneg@f1+1
  7840  000F56  C13E  F030         	movff	identificarColor@a+2,___flneg@f1+2
  7841  000F5A  C13F  F031         	movff	identificarColor@a+3,___flneg@f1+3
  7842  000F5E  ECAB  F020         	call	___flneg	;wreg free
  7843  000F62  C02E  F0BE         	movff	?___flneg,___fladd@b
  7844  000F66  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7845  000F6A  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7846  000F6E  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7847  000F72  EC7C  F015         	call	___fladd	;wreg free
  7848  000F76  C0BE  F091         	movff	?___fladd,___fldiv@b
  7849  000F7A  C0BF  F092         	movff	?___fladd+1,___fldiv@b+1
  7850  000F7E  C0C0  F093         	movff	?___fladd+2,___fldiv@b+2
  7851  000F82  C0C1  F094         	movff	?___fladd+3,___fldiv@b+3
  7852  000F86  EC1B  F017         	call	___fldiv	;wreg free
  7853  000F8A  C091  F144         	movff	?___fldiv,_identificarColor$914
  7854  000F8E  C092  F145         	movff	?___fldiv+1,_identificarColor$914+1
  7855  000F92  C093  F146         	movff	?___fldiv+2,_identificarColor$914+2
  7856  000F96  C094  F147         	movff	?___fldiv+3,_identificarColor$914+3
  7857                           
  7858                           ;color_3.c: 456: float del_A = ( ( ( maxRVB - a ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7859  000F9A  0E00               	movlw	0
  7860  000F9C  0100               	movlb	0	; () banked
  7861  000F9E  6F95               	movwf	___fldiv@a& (0+255),b
  7862  000FA0  0E00               	movlw	0
  7863  000FA2  6F96               	movwf	(___fldiv@a+1)& (0+255),b
  7864  000FA4  0E00               	movlw	0
  7865  000FA6  6F97               	movwf	(___fldiv@a+2)& (0+255),b
  7866  000FA8  0E40               	movlw	64
  7867  000FAA  6F98               	movwf	(___fldiv@a+3)& (0+255),b
  7868  000FAC  C158  F091         	movff	identificarColor@delta,___fldiv@b
  7869  000FB0  C159  F092         	movff	identificarColor@delta+1,___fldiv@b+1
  7870  000FB4  C15A  F093         	movff	identificarColor@delta+2,___fldiv@b+2
  7871  000FB8  C15B  F094         	movff	identificarColor@delta+3,___fldiv@b+3
  7872  000FBC  EC1B  F017         	call	___fldiv	;wreg free
  7873  000FC0  C091  F0C2         	movff	?___fldiv,___fladd@a
  7874  000FC4  C092  F0C3         	movff	?___fldiv+1,___fladd@a+1
  7875  000FC8  C093  F0C4         	movff	?___fldiv+2,___fladd@a+2
  7876  000FCC  C094  F0C5         	movff	?___fldiv+3,___fladd@a+3
  7877  000FD0  C144  F0BE         	movff	_identificarColor$914,___fladd@b
  7878  000FD4  C145  F0BF         	movff	_identificarColor$914+1,___fladd@b+1
  7879  000FD8  C146  F0C0         	movff	_identificarColor$914+2,___fladd@b+2
  7880  000FDC  C147  F0C1         	movff	_identificarColor$914+3,___fladd@b+3
  7881  000FE0  EC7C  F015         	call	___fladd	;wreg free
  7882  000FE4  C0BE  F138         	movff	?___fladd,_identificarColor$915
  7883  000FE8  C0BF  F139         	movff	?___fladd+1,_identificarColor$915+1
  7884  000FEC  C0C0  F13A         	movff	?___fladd+2,_identificarColor$915+2
  7885  000FF0  C0C1  F13B         	movff	?___fladd+3,_identificarColor$915+3
  7886                           
  7887                           ;color_3.c: 456: float del_A = ( ( ( maxRVB - a ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
  7888  000FF4  C138  F091         	movff	_identificarColor$915,___fldiv@b
  7889  000FF8  C139  F092         	movff	_identificarColor$915+1,___fldiv@b+1
  7890  000FFC  C13A  F093         	movff	_identificarColor$915+2,___fldiv@b+2
  7891  001000  C13B  F094         	movff	_identificarColor$915+3,___fldiv@b+3
  7892  001004  C158  F095         	movff	identificarColor@delta,___fldiv@a
  7893  001008  C159  F096         	movff	identificarColor@delta+1,___fldiv@a+1
  7894  00100C  C15A  F097         	movff	identificarColor@delta+2,___fldiv@a+2
  7895  001010  C15B  F098         	movff	identificarColor@delta+3,___fldiv@a+3
  7896  001014  EC1B  F017         	call	___fldiv	;wreg free
  7897  001018  C091  F12C         	movff	?___fldiv,identificarColor@del_A
  7898  00101C  C092  F12D         	movff	?___fldiv+1,identificarColor@del_A+1
  7899  001020  C093  F12E         	movff	?___fldiv+2,identificarColor@del_A+2
  7900  001024  C094  F12F         	movff	?___fldiv+3,identificarColor@del_A+3
  7901                           
  7902                           ;color_3.c: 457: if (r == maxRVB)
  7903  001028  0101               	movlb	1	; () banked
  7904  00102A  514C               	movf	identificarColor@maxRVB& (0+255),w,b
  7905  00102C  1950               	xorwf	identificarColor@r& (0+255),w,b
  7906  00102E  E127               	bnz	l5711
  7907  001030  514D               	movf	(identificarColor@maxRVB+1)& (0+255),w,b
  7908  001032  1951               	xorwf	(identificarColor@r+1)& (0+255),w,b
  7909  001034  E124               	bnz	l5711
  7910  001036  514E               	movf	(identificarColor@maxRVB+2)& (0+255),w,b
  7911  001038  1952               	xorwf	(identificarColor@r+2)& (0+255),w,b
  7912  00103A  E121               	bnz	l5711
  7913  00103C  514F               	movf	(identificarColor@maxRVB+3)& (0+255),w,b
  7914  00103E  1953               	xorwf	(identificarColor@r+3)& (0+255),w,b
  7915  001040  A4D8               	btfss	status,2,c
  7916  001042  D01D               	goto	l239
  7917                           
  7918                           ; BSR set to: 1
  7919                           ;color_3.c: 458: {
  7920                           ;color_3.c: 459: t = del_A - del_V;
  7921  001044  C128  F02E         	movff	identificarColor@del_V,___flneg@f1
  7922  001048  C129  F02F         	movff	identificarColor@del_V+1,___flneg@f1+1
  7923  00104C  C12A  F030         	movff	identificarColor@del_V+2,___flneg@f1+2
  7924  001050  C12B  F031         	movff	identificarColor@del_V+3,___flneg@f1+3
  7925  001054  ECAB  F020         	call	___flneg	;wreg free
  7926  001058  C02E  F0BE         	movff	?___flneg,___fladd@b
  7927  00105C  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7928  001060  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7929  001064  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7930  001068  C12C  F0C2         	movff	identificarColor@del_A,___fladd@a
  7931  00106C  C12D  F0C3         	movff	identificarColor@del_A+1,___fladd@a+1
  7932  001070  C12E  F0C4         	movff	identificarColor@del_A+2,___fladd@a+2
  7933  001074  C12F  F0C5         	movff	identificarColor@del_A+3,___fladd@a+3
  7934  001078  EC7C  F015         	call	___fladd	;wreg free
  7935  00107C  D08B               	goto	L7
  7936  00107E                     l239:
  7937  00107E                     l5711:
  7938                           
  7939                           ;color_3.c: 462: else if( v == maxRVB)
  7940  00107E  0101               	movlb	1	; () banked
  7941  001080  514C               	movf	identificarColor@maxRVB& (0+255),w,b
  7942  001082  1954               	xorwf	identificarColor@v& (0+255),w,b
  7943  001084  E142               	bnz	l5715
  7944  001086  514D               	movf	(identificarColor@maxRVB+1)& (0+255),w,b
  7945  001088  1955               	xorwf	(identificarColor@v+1)& (0+255),w,b
  7946  00108A  E13F               	bnz	l5715
  7947  00108C  514E               	movf	(identificarColor@maxRVB+2)& (0+255),w,b
  7948  00108E  1956               	xorwf	(identificarColor@v+2)& (0+255),w,b
  7949  001090  E13C               	bnz	l5715
  7950  001092  514F               	movf	(identificarColor@maxRVB+3)& (0+255),w,b
  7951  001094  1957               	xorwf	(identificarColor@v+3)& (0+255),w,b
  7952  001096  A4D8               	btfss	status,2,c
  7953  001098  D038               	goto	l241
  7954                           
  7955                           ; BSR set to: 1
  7956                           ;color_3.c: 463: {
  7957                           ;color_3.c: 464: t = ( 1.0 / 3.0 ) + del_R - del_A;
  7958  00109A  C124  F0C2         	movff	identificarColor@del_R,___fladd@a
  7959  00109E  C125  F0C3         	movff	identificarColor@del_R+1,___fladd@a+1
  7960  0010A2  C126  F0C4         	movff	identificarColor@del_R+2,___fladd@a+2
  7961  0010A6  C127  F0C5         	movff	identificarColor@del_R+3,___fladd@a+3
  7962  0010AA  C12C  F02E         	movff	identificarColor@del_A,___flneg@f1
  7963  0010AE  C12D  F02F         	movff	identificarColor@del_A+1,___flneg@f1+1
  7964  0010B2  C12E  F030         	movff	identificarColor@del_A+2,___flneg@f1+2
  7965  0010B6  C12F  F031         	movff	identificarColor@del_A+3,___flneg@f1+3
  7966  0010BA  ECAB  F020         	call	___flneg	;wreg free
  7967  0010BE  C02E  F0BE         	movff	?___flneg,___fladd@b
  7968  0010C2  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  7969  0010C6  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  7970  0010CA  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  7971  0010CE  EC7C  F015         	call	___fladd	;wreg free
  7972  0010D2  C0BE  F144         	movff	?___fladd,_identificarColor$914
  7973  0010D6  C0BF  F145         	movff	?___fladd+1,_identificarColor$914+1
  7974  0010DA  C0C0  F146         	movff	?___fladd+2,_identificarColor$914+2
  7975  0010DE  C0C1  F147         	movff	?___fladd+3,_identificarColor$914+3
  7976                           
  7977                           ;color_3.c: 463: {
  7978                           ;color_3.c: 464: t = ( 1.0 / 3.0 ) + del_R - del_A;
  7979  0010E2  C144  F0BE         	movff	_identificarColor$914,___fladd@b
  7980  0010E6  C145  F0BF         	movff	_identificarColor$914+1,___fladd@b+1
  7981  0010EA  C146  F0C0         	movff	_identificarColor$914+2,___fladd@b+2
  7982  0010EE  C147  F0C1         	movff	_identificarColor$914+3,___fladd@b+3
  7983  0010F2  0EAB               	movlw	171
  7984  0010F4  0100               	movlb	0	; () banked
  7985  0010F6  6FC2               	movwf	___fladd@a& (0+255),b
  7986  0010F8  0EAA               	movlw	170
  7987  0010FA  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  7988  0010FC  0EAA               	movlw	170
  7989  0010FE  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  7990  001100  0E3E               	movlw	62
  7991  001102  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  7992  001104  EC7C  F015         	call	___fladd	;wreg free
  7993  001108  D045               	goto	L7
  7994  00110A                     l241:
  7995  00110A                     l5715:
  7996                           
  7997                           ;color_3.c: 466: else if( a == maxRVB)
  7998  00110A  0101               	movlb	1	; () banked
  7999  00110C  514C               	movf	identificarColor@maxRVB& (0+255),w,b
  8000  00110E  193C               	xorwf	identificarColor@a& (0+255),w,b
  8001  001110  E149               	bnz	l5719
  8002  001112  514D               	movf	(identificarColor@maxRVB+1)& (0+255),w,b
  8003  001114  193D               	xorwf	(identificarColor@a+1)& (0+255),w,b
  8004  001116  E146               	bnz	l5719
  8005  001118  514E               	movf	(identificarColor@maxRVB+2)& (0+255),w,b
  8006  00111A  193E               	xorwf	(identificarColor@a+2)& (0+255),w,b
  8007  00111C  E143               	bnz	l5719
  8008  00111E  514F               	movf	(identificarColor@maxRVB+3)& (0+255),w,b
  8009  001120  193F               	xorwf	(identificarColor@a+3)& (0+255),w,b
  8010  001122  A4D8               	btfss	status,2,c
  8011  001124  D03F               	goto	l243
  8012                           
  8013                           ; BSR set to: 1
  8014                           ;color_3.c: 467: {
  8015                           ;color_3.c: 468: t = ( 2.0 / 3.0 ) + del_V - del_R;
  8016  001126  C128  F0C2         	movff	identificarColor@del_V,___fladd@a
  8017  00112A  C129  F0C3         	movff	identificarColor@del_V+1,___fladd@a+1
  8018  00112E  C12A  F0C4         	movff	identificarColor@del_V+2,___fladd@a+2
  8019  001132  C12B  F0C5         	movff	identificarColor@del_V+3,___fladd@a+3
  8020  001136  C124  F02E         	movff	identificarColor@del_R,___flneg@f1
  8021  00113A  C125  F02F         	movff	identificarColor@del_R+1,___flneg@f1+1
  8022  00113E  C126  F030         	movff	identificarColor@del_R+2,___flneg@f1+2
  8023  001142  C127  F031         	movff	identificarColor@del_R+3,___flneg@f1+3
  8024  001146  ECAB  F020         	call	___flneg	;wreg free
  8025  00114A  C02E  F0BE         	movff	?___flneg,___fladd@b
  8026  00114E  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  8027  001152  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  8028  001156  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  8029  00115A  EC7C  F015         	call	___fladd	;wreg free
  8030  00115E  C0BE  F144         	movff	?___fladd,_identificarColor$914
  8031  001162  C0BF  F145         	movff	?___fladd+1,_identificarColor$914+1
  8032  001166  C0C0  F146         	movff	?___fladd+2,_identificarColor$914+2
  8033  00116A  C0C1  F147         	movff	?___fladd+3,_identificarColor$914+3
  8034                           
  8035                           ;color_3.c: 467: {
  8036                           ;color_3.c: 468: t = ( 2.0 / 3.0 ) + del_V - del_R;
  8037  00116E  C144  F0BE         	movff	_identificarColor$914,___fladd@b
  8038  001172  C145  F0BF         	movff	_identificarColor$914+1,___fladd@b+1
  8039  001176  C146  F0C0         	movff	_identificarColor$914+2,___fladd@b+2
  8040  00117A  C147  F0C1         	movff	_identificarColor$914+3,___fladd@b+3
  8041  00117E  0EAB               	movlw	171
  8042  001180  0100               	movlb	0	; () banked
  8043  001182  6FC2               	movwf	___fladd@a& (0+255),b
  8044  001184  0EAA               	movlw	170
  8045  001186  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  8046  001188  0E2A               	movlw	42
  8047  00118A  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  8048  00118C  0E3F               	movlw	63
  8049  00118E  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  8050  001190  EC7C  F015         	call	___fladd	;wreg free
  8051  001194                     L7:
  8052  001194  C0BE  F148         	movff	?___fladd,identificarColor@t
  8053  001198  C0BF  F149         	movff	?___fladd+1,identificarColor@t+1
  8054  00119C  C0C0  F14A         	movff	?___fladd+2,identificarColor@t+2
  8055  0011A0  C0C1  F14B         	movff	?___fladd+3,identificarColor@t+3
  8056  0011A4                     l243:
  8057  0011A4                     l5719:
  8058                           
  8059                           ;color_3.c: 469: }
  8060                           ;color_3.c: 470: if (t < 0 ) t += 1.0;
  8061  0011A4  0101               	movlb	1	; () banked
  8062  0011A6  AF4B               	btfss	(identificarColor@t+3)& (0+255),7,b
  8063  0011A8  D01B               	goto	l244
  8064                           
  8065                           ; BSR set to: 1
  8066  0011AA  C148  F0BE         	movff	identificarColor@t,___fladd@b
  8067  0011AE  C149  F0BF         	movff	identificarColor@t+1,___fladd@b+1
  8068  0011B2  C14A  F0C0         	movff	identificarColor@t+2,___fladd@b+2
  8069  0011B6  C14B  F0C1         	movff	identificarColor@t+3,___fladd@b+3
  8070  0011BA  0E00               	movlw	0
  8071  0011BC  0100               	movlb	0	; () banked
  8072  0011BE  6FC2               	movwf	___fladd@a& (0+255),b
  8073  0011C0  0E00               	movlw	0
  8074  0011C2  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  8075  0011C4  0E80               	movlw	128
  8076  0011C6  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  8077  0011C8  0E3F               	movlw	63
  8078  0011CA  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  8079  0011CC  EC7C  F015         	call	___fladd	;wreg free
  8080  0011D0  C0BE  F148         	movff	?___fladd,identificarColor@t
  8081  0011D4  C0BF  F149         	movff	?___fladd+1,identificarColor@t+1
  8082  0011D8  C0C0  F14A         	movff	?___fladd+2,identificarColor@t+2
  8083  0011DC  C0C1  F14B         	movff	?___fladd+3,identificarColor@t+3
  8084  0011E0                     l244:
  8085                           
  8086                           ;color_3.c: 471: if (t > 1 ) t -= 1.0;
  8087  0011E0  0E00               	movlw	0
  8088  0011E2  0100               	movlb	0	; () banked
  8089  0011E4  6FD2               	movwf	___flge@ff1& (0+255),b
  8090  0011E6  0E00               	movlw	0
  8091  0011E8  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  8092  0011EA  0E80               	movlw	128
  8093  0011EC  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  8094  0011EE  0E3F               	movlw	63
  8095  0011F0  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  8096  0011F2  C148  F0D6         	movff	identificarColor@t,___flge@ff2
  8097  0011F6  C149  F0D7         	movff	identificarColor@t+1,___flge@ff2+1
  8098  0011FA  C14A  F0D8         	movff	identificarColor@t+2,___flge@ff2+2
  8099  0011FE  C14B  F0D9         	movff	identificarColor@t+3,___flge@ff2+3
  8100  001202  EC26  F01C         	call	___flge	;wreg free
  8101  001206  0100               	movlb	0	; () banked
  8102  001208  B0D8               	btfsc	status,0,c
  8103  00120A  D01A               	goto	l245
  8104                           
  8105                           ; BSR set to: 0
  8106  00120C  C148  F0D2         	movff	identificarColor@t,___flsub@b
  8107  001210  C149  F0D3         	movff	identificarColor@t+1,___flsub@b+1
  8108  001214  C14A  F0D4         	movff	identificarColor@t+2,___flsub@b+2
  8109  001218  C14B  F0D5         	movff	identificarColor@t+3,___flsub@b+3
  8110  00121C  0E00               	movlw	0
  8111  00121E  6FD6               	movwf	___flsub@a& (0+255),b
  8112  001220  0E00               	movlw	0
  8113  001222  6FD7               	movwf	(___flsub@a+1)& (0+255),b
  8114  001224  0E80               	movlw	128
  8115  001226  6FD8               	movwf	(___flsub@a+2)& (0+255),b
  8116  001228  0E3F               	movlw	63
  8117  00122A  6FD9               	movwf	(___flsub@a+3)& (0+255),b
  8118  00122C  ECDA  F01F         	call	___flsub	;wreg free
  8119  001230  C0D2  F148         	movff	?___flsub,identificarColor@t
  8120  001234  C0D3  F149         	movff	?___flsub+1,identificarColor@t+1
  8121  001238  C0D4  F14A         	movff	?___flsub+2,identificarColor@t+2
  8122  00123C  C0D5  F14B         	movff	?___flsub+3,identificarColor@t+3
  8123  001240                     l245:
  8124                           
  8125                           ;color_3.c: 472: }
  8126                           ;color_3.c: 474: t*=360.0;
  8127  001240  C148  F03C         	movff	identificarColor@t,___flmul@b
  8128  001244  C149  F03D         	movff	identificarColor@t+1,___flmul@b+1
  8129  001248  C14A  F03E         	movff	identificarColor@t+2,___flmul@b+2
  8130  00124C  C14B  F03F         	movff	identificarColor@t+3,___flmul@b+3
  8131  001250  0E00               	movlw	0
  8132  001252  6E40               	movwf	___flmul@a,c
  8133  001254  0E00               	movlw	0
  8134  001256  6E41               	movwf	___flmul@a+1,c
  8135  001258  0EB4               	movlw	180
  8136  00125A  6E42               	movwf	___flmul@a+2,c
  8137  00125C  0E43               	movlw	67
  8138  00125E  6E43               	movwf	___flmul@a+3,c
  8139  001260  ECD3  F013         	call	___flmul	;wreg free
  8140  001264  C03C  F148         	movff	?___flmul,identificarColor@t
  8141  001268  C03D  F149         	movff	?___flmul+1,identificarColor@t+1
  8142  00126C  C03E  F14A         	movff	?___flmul+2,identificarColor@t+2
  8143  001270  C03F  F14B         	movff	?___flmul+3,identificarColor@t+3
  8144                           
  8145                           ;color_3.c: 475: s*=100.0;
  8146  001274  C11C  F03C         	movff	identificarColor@s,___flmul@b
  8147  001278  C11D  F03D         	movff	identificarColor@s+1,___flmul@b+1
  8148  00127C  C11E  F03E         	movff	identificarColor@s+2,___flmul@b+2
  8149  001280  C11F  F03F         	movff	identificarColor@s+3,___flmul@b+3
  8150  001284  0E00               	movlw	0
  8151  001286  6E40               	movwf	___flmul@a,c
  8152  001288  0E00               	movlw	0
  8153  00128A  6E41               	movwf	___flmul@a+1,c
  8154  00128C  0EC8               	movlw	200
  8155  00128E  6E42               	movwf	___flmul@a+2,c
  8156  001290  0E42               	movlw	66
  8157  001292  6E43               	movwf	___flmul@a+3,c
  8158  001294  ECD3  F013         	call	___flmul	;wreg free
  8159  001298  C03C  F11C         	movff	?___flmul,identificarColor@s
  8160  00129C  C03D  F11D         	movff	?___flmul+1,identificarColor@s+1
  8161  0012A0  C03E  F11E         	movff	?___flmul+2,identificarColor@s+2
  8162  0012A4  C03F  F11F         	movff	?___flmul+3,identificarColor@s+3
  8163                           
  8164                           ;color_3.c: 476: l*=100.0;
  8165  0012A8  C130  F03C         	movff	identificarColor@l,___flmul@b
  8166  0012AC  C131  F03D         	movff	identificarColor@l+1,___flmul@b+1
  8167  0012B0  C132  F03E         	movff	identificarColor@l+2,___flmul@b+2
  8168  0012B4  C133  F03F         	movff	identificarColor@l+3,___flmul@b+3
  8169  0012B8  0E00               	movlw	0
  8170  0012BA  6E40               	movwf	___flmul@a,c
  8171  0012BC  0E00               	movlw	0
  8172  0012BE  6E41               	movwf	___flmul@a+1,c
  8173  0012C0  0EC8               	movlw	200
  8174  0012C2  6E42               	movwf	___flmul@a+2,c
  8175  0012C4  0E42               	movlw	66
  8176  0012C6  6E43               	movwf	___flmul@a+3,c
  8177  0012C8  ECD3  F013         	call	___flmul	;wreg free
  8178  0012CC  C03C  F130         	movff	?___flmul,identificarColor@l
  8179  0012D0  C03D  F131         	movff	?___flmul+1,identificarColor@l+1
  8180  0012D4  C03E  F132         	movff	?___flmul+2,identificarColor@l+2
  8181  0012D8  C03F  F133         	movff	?___flmul+3,identificarColor@l+3
  8182                           
  8183                           ;color_3.c: 478: return t;
  8184  0012DC  C148  F0DE         	movff	identificarColor@t,?_identificarColor
  8185  0012E0  C149  F0DF         	movff	identificarColor@t+1,?_identificarColor+1
  8186  0012E4  C14A  F0E0         	movff	identificarColor@t+2,?_identificarColor+2
  8187  0012E8  C14B  F0E1         	movff	identificarColor@t+3,?_identificarColor+3
  8188  0012EC  0012               	return	
  8189  0012EE                     __end_of_identificarColor:
  8190                           	opt stack 0
  8191                           tblptru	equ	0xFF8
  8192                           tblptrh	equ	0xFF7
  8193                           tblptrl	equ	0xFF6
  8194                           tablat	equ	0xFF5
  8195                           prodh	equ	0xFF4
  8196                           prodl	equ	0xFF3
  8197                           intcon	equ	0xFF2
  8198                           indf0	equ	0xFEF
  8199                           postinc0	equ	0xFEE
  8200                           fsr0h	equ	0xFEA
  8201                           fsr0l	equ	0xFE9
  8202                           wreg	equ	0xFE8
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function ___flsub *****************
  8210 ;; Defined at:
  8211 ;;		line 245 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  b               4   82[BANK0 ] float 
  8214 ;;  a               4   86[BANK0 ] float 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;		None
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  4   82[BANK0 ] float 
  8219 ;; Registers used:
  8220 ;;		wreg, status,2, status,0, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8226 ;;      Params:         0       8       0       0       0       0       0
  8227 ;;      Locals:         0       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0
  8229 ;;      Totals:         0       8       0       0       0       0       0
  8230 ;;Total ram usage:        8 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    3
  8233 ;; This function calls:
  8234 ;;		___fladd
  8235 ;; This function is called by:
  8236 ;;		_identificarColor
  8237 ;;		_sprintf
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text25
  8242  003FB4                     __ptext25:
  8243                           	opt stack 0
  8244  003FB4                     ___flsub:
  8245                           	opt stack 26
  8246                           
  8247                           ;incstack = 0
  8248  003FB4  0E00               	movlw	0
  8249  003FB6  0100               	movlb	0	; () banked
  8250  003FB8  1BD6               	xorwf	___flsub@a& (0+255),f,b
  8251  003FBA  0E00               	movlw	0
  8252  003FBC  1BD7               	xorwf	(___flsub@a+1)& (0+255),f,b
  8253  003FBE  0E00               	movlw	0
  8254  003FC0  1BD8               	xorwf	(___flsub@a+2)& (0+255),f,b
  8255  003FC2  0E80               	movlw	128
  8256  003FC4  1BD9               	xorwf	(___flsub@a+3)& (0+255),f,b
  8257                           
  8258                           ; BSR set to: 0
  8259  003FC6  C0D2  F0BE         	movff	___flsub@b,___fladd@b
  8260  003FCA  C0D3  F0BF         	movff	___flsub@b+1,___fladd@b+1
  8261  003FCE  C0D4  F0C0         	movff	___flsub@b+2,___fladd@b+2
  8262  003FD2  C0D5  F0C1         	movff	___flsub@b+3,___fladd@b+3
  8263  003FD6  C0D6  F0C2         	movff	___flsub@a,___fladd@a
  8264  003FDA  C0D7  F0C3         	movff	___flsub@a+1,___fladd@a+1
  8265  003FDE  C0D8  F0C4         	movff	___flsub@a+2,___fladd@a+2
  8266  003FE2  C0D9  F0C5         	movff	___flsub@a+3,___fladd@a+3
  8267  003FE6  EC7C  F015         	call	___fladd	;wreg free
  8268  003FEA  C0BE  F0D2         	movff	?___fladd,?___flsub
  8269  003FEE  C0BF  F0D3         	movff	?___fladd+1,?___flsub+1
  8270  003FF2  C0C0  F0D4         	movff	?___fladd+2,?___flsub+2
  8271  003FF6  C0C1  F0D5         	movff	?___fladd+3,?___flsub+3
  8272  003FFA  0012               	return	
  8273  003FFC                     __end_of___flsub:
  8274                           	opt stack 0
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           indf0	equ	0xFEF
  8283                           postinc0	equ	0xFEE
  8284                           fsr0h	equ	0xFEA
  8285                           fsr0l	equ	0xFE9
  8286                           wreg	equ	0xFE8
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           fsr2h	equ	0xFDA
  8290                           fsr2l	equ	0xFD9
  8291                           status	equ	0xFD8
  8292                           
  8293 ;; *************** function _calibra *****************
  8294 ;; Defined at:
  8295 ;;		line 413 in file "color_3.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  valor           4   94[BANK0 ] float 
  8298 ;;  fd              4   98[BANK0 ] float 
  8299 ;;  fw              4  102[BANK0 ] float 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  temp            4  106[BANK0 ] float 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  4   94[BANK0 ] float 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8311 ;;      Params:         0      12       0       0       0       0       0
  8312 ;;      Locals:         0       4       0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0
  8314 ;;      Totals:         0      16       0       0       0       0       0
  8315 ;;Total ram usage:       16 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    3
  8318 ;; This function calls:
  8319 ;;		___fladd
  8320 ;;		___fldiv
  8321 ;;		___flge
  8322 ;;		___flmul
  8323 ;;		___flneg
  8324 ;; This function is called by:
  8325 ;;		_main
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text26
  8330  003A88                     __ptext26:
  8331                           	opt stack 0
  8332  003A88                     _calibra:
  8333                           	opt stack 27
  8334                           
  8335                           ;color_3.c: 415: float temp;
  8336                           ;color_3.c: 416: temp = (255*(valor-fd))/(fw-fd);
  8337                           
  8338                           ;incstack = 0
  8339  003A88  0E00               	movlw	0
  8340  003A8A  6E40               	movwf	___flmul@a,c
  8341  003A8C  0E00               	movlw	0
  8342  003A8E  6E41               	movwf	___flmul@a+1,c
  8343  003A90  0E7F               	movlw	127
  8344  003A92  6E42               	movwf	___flmul@a+2,c
  8345  003A94  0E43               	movlw	67
  8346  003A96  6E43               	movwf	___flmul@a+3,c
  8347  003A98  C0DE  F0C2         	movff	calibra@valor,___fladd@a
  8348  003A9C  C0DF  F0C3         	movff	calibra@valor+1,___fladd@a+1
  8349  003AA0  C0E0  F0C4         	movff	calibra@valor+2,___fladd@a+2
  8350  003AA4  C0E1  F0C5         	movff	calibra@valor+3,___fladd@a+3
  8351  003AA8  C0E2  F02E         	movff	calibra@fd,___flneg@f1
  8352  003AAC  C0E3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  8353  003AB0  C0E4  F030         	movff	calibra@fd+2,___flneg@f1+2
  8354  003AB4  C0E5  F031         	movff	calibra@fd+3,___flneg@f1+3
  8355  003AB8  ECAB  F020         	call	___flneg	;wreg free
  8356  003ABC  C02E  F0BE         	movff	?___flneg,___fladd@b
  8357  003AC0  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  8358  003AC4  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  8359  003AC8  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  8360  003ACC  EC7C  F015         	call	___fladd	;wreg free
  8361  003AD0  C0BE  F03C         	movff	?___fladd,___flmul@b
  8362  003AD4  C0BF  F03D         	movff	?___fladd+1,___flmul@b+1
  8363  003AD8  C0C0  F03E         	movff	?___fladd+2,___flmul@b+2
  8364  003ADC  C0C1  F03F         	movff	?___fladd+3,___flmul@b+3
  8365  003AE0  ECD3  F013         	call	___flmul	;wreg free
  8366  003AE4  C03C  F091         	movff	?___flmul,___fldiv@b
  8367  003AE8  C03D  F092         	movff	?___flmul+1,___fldiv@b+1
  8368  003AEC  C03E  F093         	movff	?___flmul+2,___fldiv@b+2
  8369  003AF0  C03F  F094         	movff	?___flmul+3,___fldiv@b+3
  8370  003AF4  C0E6  F0C2         	movff	calibra@fw,___fladd@a
  8371  003AF8  C0E7  F0C3         	movff	calibra@fw+1,___fladd@a+1
  8372  003AFC  C0E8  F0C4         	movff	calibra@fw+2,___fladd@a+2
  8373  003B00  C0E9  F0C5         	movff	calibra@fw+3,___fladd@a+3
  8374  003B04  C0E2  F02E         	movff	calibra@fd,___flneg@f1
  8375  003B08  C0E3  F02F         	movff	calibra@fd+1,___flneg@f1+1
  8376  003B0C  C0E4  F030         	movff	calibra@fd+2,___flneg@f1+2
  8377  003B10  C0E5  F031         	movff	calibra@fd+3,___flneg@f1+3
  8378  003B14  ECAB  F020         	call	___flneg	;wreg free
  8379  003B18  C02E  F0BE         	movff	?___flneg,___fladd@b
  8380  003B1C  C02F  F0BF         	movff	?___flneg+1,___fladd@b+1
  8381  003B20  C030  F0C0         	movff	?___flneg+2,___fladd@b+2
  8382  003B24  C031  F0C1         	movff	?___flneg+3,___fladd@b+3
  8383  003B28  EC7C  F015         	call	___fladd	;wreg free
  8384  003B2C  C0BE  F095         	movff	?___fladd,___fldiv@a
  8385  003B30  C0BF  F096         	movff	?___fladd+1,___fldiv@a+1
  8386  003B34  C0C0  F097         	movff	?___fladd+2,___fldiv@a+2
  8387  003B38  C0C1  F098         	movff	?___fladd+3,___fldiv@a+3
  8388  003B3C  EC1B  F017         	call	___fldiv	;wreg free
  8389  003B40  C091  F0EA         	movff	?___fldiv,calibra@temp
  8390  003B44  C092  F0EB         	movff	?___fldiv+1,calibra@temp+1
  8391  003B48  C093  F0EC         	movff	?___fldiv+2,calibra@temp+2
  8392  003B4C  C094  F0ED         	movff	?___fldiv+3,calibra@temp+3
  8393                           
  8394                           ;color_3.c: 417: if(temp >255)
  8395  003B50  0E00               	movlw	0
  8396  003B52  0100               	movlb	0	; () banked
  8397  003B54  6FD2               	movwf	___flge@ff1& (0+255),b
  8398  003B56  0E00               	movlw	0
  8399  003B58  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  8400  003B5A  0E7F               	movlw	127
  8401  003B5C  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  8402  003B5E  0E43               	movlw	67
  8403  003B60  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  8404  003B62  C0EA  F0D6         	movff	calibra@temp,___flge@ff2
  8405  003B66  C0EB  F0D7         	movff	calibra@temp+1,___flge@ff2+1
  8406  003B6A  C0EC  F0D8         	movff	calibra@temp+2,___flge@ff2+2
  8407  003B6E  C0ED  F0D9         	movff	calibra@temp+3,___flge@ff2+3
  8408  003B72  EC26  F01C         	call	___flge	;wreg free
  8409  003B76  0100               	movlb	0	; () banked
  8410  003B78  B0D8               	btfsc	status,0,c
  8411  003B7A  D009               	goto	l194
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;color_3.c: 418: return 255;
  8415  003B7C  0E00               	movlw	0
  8416  003B7E  6FDE               	movwf	?_calibra& (0+255),b
  8417  003B80  0E00               	movlw	0
  8418  003B82  6FDF               	movwf	(?_calibra+1)& (0+255),b
  8419  003B84  0E7F               	movlw	127
  8420  003B86  6FE0               	movwf	(?_calibra+2)& (0+255),b
  8421  003B88  0E43               	movlw	67
  8422  003B8A  6FE1               	movwf	(?_calibra+3)& (0+255),b
  8423                           
  8424                           ; BSR set to: 0
  8425                           
  8426                           ; BSR set to: 0
  8427  003B8C  0012               	return	
  8428  003B8E                     l194:
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;color_3.c: 419: else
  8432                           ;color_3.c: 420: return temp;
  8433  003B8E  C0EA  F0DE         	movff	calibra@temp,?_calibra
  8434  003B92  C0EB  F0DF         	movff	calibra@temp+1,?_calibra+1
  8435  003B96  C0EC  F0E0         	movff	calibra@temp+2,?_calibra+2
  8436  003B9A  C0ED  F0E1         	movff	calibra@temp+3,?_calibra+3
  8437  003B9E  0012               	return	
  8438  003BA0                     __end_of_calibra:
  8439                           	opt stack 0
  8440                           tblptru	equ	0xFF8
  8441                           tblptrh	equ	0xFF7
  8442                           tblptrl	equ	0xFF6
  8443                           tablat	equ	0xFF5
  8444                           prodh	equ	0xFF4
  8445                           prodl	equ	0xFF3
  8446                           intcon	equ	0xFF2
  8447                           indf0	equ	0xFEF
  8448                           postinc0	equ	0xFEE
  8449                           fsr0h	equ	0xFEA
  8450                           fsr0l	equ	0xFE9
  8451                           wreg	equ	0xFE8
  8452                           indf2	equ	0xFDF
  8453                           postinc2	equ	0xFDE
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8
  8457                           
  8458 ;; *************** function ___flneg *****************
  8459 ;; Defined at:
  8460 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/flneg.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  f1              4   45[COMRAM] float 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;		None
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  4   45[COMRAM] float 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8474 ;;      Params:         4       0       0       0       0       0       0
  8475 ;;      Locals:         0       0       0       0       0       0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0
  8477 ;;      Totals:         4       0       0       0       0       0       0
  8478 ;;Total ram usage:        4 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    2
  8481 ;; This function calls:
  8482 ;;		Nothing
  8483 ;; This function is called by:
  8484 ;;		_calibra
  8485 ;;		_identificarColor
  8486 ;;		_sprintf
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text27
  8491  004156                     __ptext27:
  8492                           	opt stack 0
  8493  004156                     ___flneg:
  8494                           	opt stack 27
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;incstack = 0
  8498  004156  502E               	movf	___flneg@f1,w,c
  8499  004158  102F               	iorwf	___flneg@f1+1,w,c
  8500  00415A  1030               	iorwf	___flneg@f1+2,w,c
  8501  00415C  1031               	iorwf	___flneg@f1+3,w,c
  8502  00415E  B4D8               	btfsc	status,2,c
  8503  004160  D008               	goto	l580
  8504  004162  0E00               	movlw	0
  8505  004164  1A2E               	xorwf	___flneg@f1,f,c
  8506  004166  0E00               	movlw	0
  8507  004168  1A2F               	xorwf	___flneg@f1+1,f,c
  8508  00416A  0E00               	movlw	0
  8509  00416C  1A30               	xorwf	___flneg@f1+2,f,c
  8510  00416E  0E80               	movlw	128
  8511  004170  1A31               	xorwf	___flneg@f1+3,f,c
  8512  004172                     l580:
  8513  004172  C02E  F02E         	movff	___flneg@f1,?___flneg
  8514  004176  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  8515  00417A  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  8516  00417E  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  8517  004182  0012               	return	
  8518  004184                     __end_of___flneg:
  8519                           	opt stack 0
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           indf0	equ	0xFEF
  8528                           postinc0	equ	0xFEE
  8529                           fsr0h	equ	0xFEA
  8530                           fsr0l	equ	0xFE9
  8531                           wreg	equ	0xFE8
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function ___flge *****************
  8539 ;; Defined at:
  8540 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/flge.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  ff1             4   82[BANK0 ] float 
  8543 ;;  ff2             4   86[BANK0 ] float 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;		None
  8546 ;; Return value:  Size  Location     Type
  8547 ;;		None               void
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8555 ;;      Params:         0       8       0       0       0       0       0
  8556 ;;      Locals:         0       0       0       0       0       0       0
  8557 ;;      Temps:          0       4       0       0       0       0       0
  8558 ;;      Totals:         0      12       0       0       0       0       0
  8559 ;;Total ram usage:       12 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    2
  8562 ;; This function calls:
  8563 ;;		Nothing
  8564 ;; This function is called by:
  8565 ;;		_calibra
  8566 ;;		_identificarColor
  8567 ;;		_sprintf
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text28
  8572  00384C                     __ptext28:
  8573                           	opt stack 0
  8574  00384C                     ___flge:
  8575                           	opt stack 27
  8576                           
  8577                           ;incstack = 0
  8578  00384C  0E00               	movlw	0
  8579  00384E  0100               	movlb	0	; () banked
  8580  003850  15D2               	andwf	___flge@ff1& (0+255),w,b
  8581  003852  6FDA               	movwf	??___flge& (0+255),b
  8582  003854  0E00               	movlw	0
  8583  003856  15D3               	andwf	(___flge@ff1+1)& (0+255),w,b
  8584  003858  6FDB               	movwf	(??___flge+1)& (0+255),b
  8585  00385A  0E80               	movlw	128
  8586  00385C  15D4               	andwf	(___flge@ff1+2)& (0+255),w,b
  8587  00385E  6FDC               	movwf	(??___flge+2)& (0+255),b
  8588  003860  0E7F               	movlw	127
  8589  003862  15D5               	andwf	(___flge@ff1+3)& (0+255),w,b
  8590  003864  6FDD               	movwf	(??___flge+3)& (0+255),b
  8591  003866  51DA               	movf	??___flge& (0+255),w,b
  8592  003868  11DB               	iorwf	(??___flge+1)& (0+255),w,b
  8593  00386A  11DC               	iorwf	(??___flge+2)& (0+255),w,b
  8594  00386C  11DD               	iorwf	(??___flge+3)& (0+255),w,b
  8595  00386E  A4D8               	btfss	status,2,c
  8596  003870  D008               	goto	l573
  8597                           
  8598                           ; BSR set to: 0
  8599  003872  0E00               	movlw	0
  8600  003874  6FD2               	movwf	___flge@ff1& (0+255),b
  8601  003876  0E00               	movlw	0
  8602  003878  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  8603  00387A  0E00               	movlw	0
  8604  00387C  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  8605  00387E  0E00               	movlw	0
  8606  003880  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  8607  003882                     l573:
  8608                           
  8609                           ; BSR set to: 0
  8610                           
  8611                           ; BSR set to: 0
  8612  003882  0E00               	movlw	0
  8613  003884  15D6               	andwf	___flge@ff2& (0+255),w,b
  8614  003886  6FDA               	movwf	??___flge& (0+255),b
  8615  003888  0E00               	movlw	0
  8616  00388A  15D7               	andwf	(___flge@ff2+1)& (0+255),w,b
  8617  00388C  6FDB               	movwf	(??___flge+1)& (0+255),b
  8618  00388E  0E80               	movlw	128
  8619  003890  15D8               	andwf	(___flge@ff2+2)& (0+255),w,b
  8620  003892  6FDC               	movwf	(??___flge+2)& (0+255),b
  8621  003894  0E7F               	movlw	127
  8622  003896  15D9               	andwf	(___flge@ff2+3)& (0+255),w,b
  8623  003898  6FDD               	movwf	(??___flge+3)& (0+255),b
  8624  00389A  51DA               	movf	??___flge& (0+255),w,b
  8625  00389C  11DB               	iorwf	(??___flge+1)& (0+255),w,b
  8626  00389E  11DC               	iorwf	(??___flge+2)& (0+255),w,b
  8627  0038A0  11DD               	iorwf	(??___flge+3)& (0+255),w,b
  8628  0038A2  A4D8               	btfss	status,2,c
  8629  0038A4  D008               	goto	l574
  8630                           
  8631                           ; BSR set to: 0
  8632  0038A6  0E00               	movlw	0
  8633  0038A8  6FD6               	movwf	___flge@ff2& (0+255),b
  8634  0038AA  0E00               	movlw	0
  8635  0038AC  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  8636  0038AE  0E00               	movlw	0
  8637  0038B0  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  8638  0038B2  0E00               	movlw	0
  8639  0038B4  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  8640  0038B6                     l574:
  8641                           
  8642                           ; BSR set to: 0
  8643                           
  8644                           ; BSR set to: 0
  8645  0038B6  AFD5               	btfss	(___flge@ff1+3)& (0+255),7,b
  8646  0038B8  D01D               	goto	l575
  8647                           
  8648                           ; BSR set to: 0
  8649  0038BA  C0D2  F0DA         	movff	___flge@ff1,??___flge
  8650  0038BE  C0D3  F0DB         	movff	___flge@ff1+1,??___flge+1
  8651  0038C2  C0D4  F0DC         	movff	___flge@ff1+2,??___flge+2
  8652  0038C6  C0D5  F0DD         	movff	___flge@ff1+3,??___flge+3
  8653  0038CA  1FDA               	comf	??___flge& (0+255),f,b
  8654  0038CC  1FDB               	comf	(??___flge+1)& (0+255),f,b
  8655  0038CE  1FDC               	comf	(??___flge+2)& (0+255),f,b
  8656  0038D0  1FDD               	comf	(??___flge+3)& (0+255),f,b
  8657  0038D2  2BDA               	incf	??___flge& (0+255),f,b
  8658  0038D4  0E00               	movlw	0
  8659  0038D6  23DB               	addwfc	(??___flge+1)& (0+255),f,b
  8660  0038D8  23DC               	addwfc	(??___flge+2)& (0+255),f,b
  8661  0038DA  23DD               	addwfc	(??___flge+3)& (0+255),f,b
  8662  0038DC  0E00               	movlw	0
  8663  0038DE  25DA               	addwf	??___flge& (0+255),w,b
  8664  0038E0  6FD2               	movwf	___flge@ff1& (0+255),b
  8665  0038E2  0E00               	movlw	0
  8666  0038E4  21DB               	addwfc	(??___flge+1)& (0+255),w,b
  8667  0038E6  6FD3               	movwf	(___flge@ff1+1)& (0+255),b
  8668  0038E8  0E00               	movlw	0
  8669  0038EA  21DC               	addwfc	(??___flge+2)& (0+255),w,b
  8670  0038EC  6FD4               	movwf	(___flge@ff1+2)& (0+255),b
  8671  0038EE  0E80               	movlw	128
  8672  0038F0  21DD               	addwfc	(??___flge+3)& (0+255),w,b
  8673  0038F2  6FD5               	movwf	(___flge@ff1+3)& (0+255),b
  8674  0038F4                     l575:
  8675                           
  8676                           ; BSR set to: 0
  8677                           
  8678                           ; BSR set to: 0
  8679  0038F4  AFD9               	btfss	(___flge@ff2+3)& (0+255),7,b
  8680  0038F6  D01D               	goto	l576
  8681                           
  8682                           ; BSR set to: 0
  8683  0038F8  C0D6  F0DA         	movff	___flge@ff2,??___flge
  8684  0038FC  C0D7  F0DB         	movff	___flge@ff2+1,??___flge+1
  8685  003900  C0D8  F0DC         	movff	___flge@ff2+2,??___flge+2
  8686  003904  C0D9  F0DD         	movff	___flge@ff2+3,??___flge+3
  8687  003908  1FDA               	comf	??___flge& (0+255),f,b
  8688  00390A  1FDB               	comf	(??___flge+1)& (0+255),f,b
  8689  00390C  1FDC               	comf	(??___flge+2)& (0+255),f,b
  8690  00390E  1FDD               	comf	(??___flge+3)& (0+255),f,b
  8691  003910  2BDA               	incf	??___flge& (0+255),f,b
  8692  003912  0E00               	movlw	0
  8693  003914  23DB               	addwfc	(??___flge+1)& (0+255),f,b
  8694  003916  23DC               	addwfc	(??___flge+2)& (0+255),f,b
  8695  003918  23DD               	addwfc	(??___flge+3)& (0+255),f,b
  8696  00391A  0E00               	movlw	0
  8697  00391C  25DA               	addwf	??___flge& (0+255),w,b
  8698  00391E  6FD6               	movwf	___flge@ff2& (0+255),b
  8699  003920  0E00               	movlw	0
  8700  003922  21DB               	addwfc	(??___flge+1)& (0+255),w,b
  8701  003924  6FD7               	movwf	(___flge@ff2+1)& (0+255),b
  8702  003926  0E00               	movlw	0
  8703  003928  21DC               	addwfc	(??___flge+2)& (0+255),w,b
  8704  00392A  6FD8               	movwf	(___flge@ff2+2)& (0+255),b
  8705  00392C  0E80               	movlw	128
  8706  00392E  21DD               	addwfc	(??___flge+3)& (0+255),w,b
  8707  003930  6FD9               	movwf	(___flge@ff2+3)& (0+255),b
  8708  003932                     l576:
  8709                           
  8710                           ; BSR set to: 0
  8711  003932  0E00               	movlw	0
  8712  003934  1BD2               	xorwf	___flge@ff1& (0+255),f,b
  8713  003936  0E00               	movlw	0
  8714  003938  1BD3               	xorwf	(___flge@ff1+1)& (0+255),f,b
  8715  00393A  0E00               	movlw	0
  8716  00393C  1BD4               	xorwf	(___flge@ff1+2)& (0+255),f,b
  8717  00393E  0E80               	movlw	128
  8718  003940  1BD5               	xorwf	(___flge@ff1+3)& (0+255),f,b
  8719  003942  0E00               	movlw	0
  8720  003944  1BD6               	xorwf	___flge@ff2& (0+255),f,b
  8721  003946  0E00               	movlw	0
  8722  003948  1BD7               	xorwf	(___flge@ff2+1)& (0+255),f,b
  8723  00394A  0E00               	movlw	0
  8724  00394C  1BD8               	xorwf	(___flge@ff2+2)& (0+255),f,b
  8725  00394E  0E80               	movlw	128
  8726  003950  1BD9               	xorwf	(___flge@ff2+3)& (0+255),f,b
  8727  003952  51D6               	movf	___flge@ff2& (0+255),w,b
  8728  003954  5DD2               	subwf	___flge@ff1& (0+255),w,b
  8729  003956  51D7               	movf	(___flge@ff2+1)& (0+255),w,b
  8730  003958  59D3               	subwfb	(___flge@ff1+1)& (0+255),w,b
  8731  00395A  51D8               	movf	(___flge@ff2+2)& (0+255),w,b
  8732  00395C  59D4               	subwfb	(___flge@ff1+2)& (0+255),w,b
  8733  00395E  51D9               	movf	(___flge@ff2+3)& (0+255),w,b
  8734  003960  59D5               	subwfb	(___flge@ff1+3)& (0+255),w,b
  8735  003962  B0D8               	btfsc	status,0,c
  8736  003964  D002               	goto	l4449
  8737                           
  8738                           ; BSR set to: 0
  8739  003966  90D8               	bcf	status,0,c
  8740  003968  0012               	return	
  8741  00396A                     l4449:
  8742                           
  8743                           ; BSR set to: 0
  8744                           
  8745                           ; BSR set to: 0
  8746  00396A  80D8               	bsf	status,0,c
  8747                           
  8748                           ; BSR set to: 0
  8749  00396C  0012               	return	
  8750  00396E                     __end_of___flge:
  8751                           	opt stack 0
  8752                           tblptru	equ	0xFF8
  8753                           tblptrh	equ	0xFF7
  8754                           tblptrl	equ	0xFF6
  8755                           tablat	equ	0xFF5
  8756                           prodh	equ	0xFF4
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           indf0	equ	0xFEF
  8760                           postinc0	equ	0xFEE
  8761                           fsr0h	equ	0xFEA
  8762                           fsr0l	equ	0xFE9
  8763                           wreg	equ	0xFE8
  8764                           indf2	equ	0xFDF
  8765                           postinc2	equ	0xFDE
  8766                           fsr2h	equ	0xFDA
  8767                           fsr2l	equ	0xFD9
  8768                           status	equ	0xFD8
  8769                           
  8770 ;; *************** function ___fladd *****************
  8771 ;; Defined at:
  8772 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;  b               4   62[BANK0 ] float 
  8775 ;;  a               4   66[BANK0 ] float 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  grs             1   81[BANK0 ] unsigned char 
  8778 ;;  bexp            1   80[BANK0 ] unsigned char 
  8779 ;;  aexp            1   79[BANK0 ] unsigned char 
  8780 ;;  signs           1   78[BANK0 ] unsigned char 
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  4   62[BANK0 ] unsigned char 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8790 ;;      Params:         0       8       0       0       0       0       0
  8791 ;;      Locals:         0       4       0       0       0       0       0
  8792 ;;      Temps:          0       8       0       0       0       0       0
  8793 ;;      Totals:         0      20       0       0       0       0       0
  8794 ;;Total ram usage:       20 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    2
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_main
  8801 ;;		_calibra
  8802 ;;		_identificarColor
  8803 ;;		_sprintf
  8804 ;;		___flsub
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text29
  8809  002AF8                     __ptext29:
  8810                           	opt stack 0
  8811  002AF8                     ___fladd:
  8812                           	opt stack 26
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;incstack = 0
  8816  002AF8  0100               	movlb	0	; () banked
  8817  002AFA  51C1               	movf	(___fladd@b+3)& (0+255),w,b
  8818  002AFC  0B80               	andlw	128
  8819  002AFE  6FCE               	movwf	___fladd@signs& (0+255),b
  8820  002B00  51C1               	movf	(___fladd@b+3)& (0+255),w,b
  8821  002B02  25C1               	addwf	(___fladd@b+3)& (0+255),w,b
  8822  002B04  6FD0               	movwf	___fladd@bexp& (0+255),b
  8823                           
  8824                           ; BSR set to: 0
  8825  002B06  BFC0               	btfsc	(___fladd@b+2)& (0+255),7,b
  8826                           
  8827                           ; BSR set to: 0
  8828  002B08  81D0               	bsf	___fladd@bexp& (0+255),0,b
  8829                           
  8830                           ; BSR set to: 0
  8831                           
  8832                           ; BSR set to: 0
  8833  002B0A  51D0               	movf	___fladd@bexp& (0+255),w,b
  8834  002B0C  B4D8               	btfsc	status,2,c
  8835  002B0E  D00D               	goto	l828
  8836                           
  8837                           ; BSR set to: 0
  8838  002B10  29D0               	incf	___fladd@bexp& (0+255),w,b
  8839  002B12  A4D8               	btfss	status,2,c
  8840  002B14  D008               	goto	l829
  8841                           
  8842                           ; BSR set to: 0
  8843  002B16  0E00               	movlw	0
  8844  002B18  6FBE               	movwf	___fladd@b& (0+255),b
  8845  002B1A  0E00               	movlw	0
  8846  002B1C  6FBF               	movwf	(___fladd@b+1)& (0+255),b
  8847  002B1E  0E00               	movlw	0
  8848  002B20  6FC0               	movwf	(___fladd@b+2)& (0+255),b
  8849  002B22  0E00               	movlw	0
  8850  002B24  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  8851  002B26                     l829:
  8852                           
  8853                           ; BSR set to: 0
  8854                           
  8855                           ; BSR set to: 0
  8856  002B26  8FC0               	bsf	(___fladd@b+2)& (0+255),7,b
  8857  002B28  D006               	goto	L8
  8858  002B2A                     l828:
  8859                           
  8860                           ; BSR set to: 0
  8861                           
  8862                           ; BSR set to: 0
  8863  002B2A  0E00               	movlw	0
  8864  002B2C  6FBE               	movwf	___fladd@b& (0+255),b
  8865  002B2E  0E00               	movlw	0
  8866  002B30  6FBF               	movwf	(___fladd@b+1)& (0+255),b
  8867  002B32  0E00               	movlw	0
  8868  002B34  6FC0               	movwf	(___fladd@b+2)& (0+255),b
  8869  002B36                     L8:
  8870  002B36  0E00               	movlw	0
  8871  002B38  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874                           
  8875                           ; BSR set to: 0
  8876  002B3A  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  8877  002B3C  0B80               	andlw	128
  8878  002B3E  6FCF               	movwf	___fladd@aexp& (0+255),b
  8879                           
  8880                           ; BSR set to: 0
  8881  002B40  51CE               	movf	___fladd@signs& (0+255),w,b
  8882  002B42  19CF               	xorwf	___fladd@aexp& (0+255),w,b
  8883  002B44  A4D8               	btfss	status,2,c
  8884                           
  8885                           ; BSR set to: 0
  8886  002B46  8DCE               	bsf	___fladd@signs& (0+255),6,b
  8887                           
  8888                           ; BSR set to: 0
  8889                           
  8890                           ; BSR set to: 0
  8891  002B48  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  8892  002B4A  25C5               	addwf	(___fladd@a+3)& (0+255),w,b
  8893  002B4C  6FCF               	movwf	___fladd@aexp& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896  002B4E  BFC4               	btfsc	(___fladd@a+2)& (0+255),7,b
  8897                           
  8898                           ; BSR set to: 0
  8899  002B50  81CF               	bsf	___fladd@aexp& (0+255),0,b
  8900                           
  8901                           ; BSR set to: 0
  8902                           
  8903                           ; BSR set to: 0
  8904  002B52  51CF               	movf	___fladd@aexp& (0+255),w,b
  8905  002B54  B4D8               	btfsc	status,2,c
  8906  002B56  D00D               	goto	l833
  8907                           
  8908                           ; BSR set to: 0
  8909  002B58  29CF               	incf	___fladd@aexp& (0+255),w,b
  8910  002B5A  A4D8               	btfss	status,2,c
  8911  002B5C  D008               	goto	l834
  8912                           
  8913                           ; BSR set to: 0
  8914  002B5E  0E00               	movlw	0
  8915  002B60  6FC2               	movwf	___fladd@a& (0+255),b
  8916  002B62  0E00               	movlw	0
  8917  002B64  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  8918  002B66  0E00               	movlw	0
  8919  002B68  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  8920  002B6A  0E00               	movlw	0
  8921  002B6C  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  8922  002B6E                     l834:
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927  002B6E  8FC4               	bsf	(___fladd@a+2)& (0+255),7,b
  8928  002B70  D006               	goto	L9
  8929  002B72                     l833:
  8930                           
  8931                           ; BSR set to: 0
  8932                           
  8933                           ; BSR set to: 0
  8934  002B72  0E00               	movlw	0
  8935  002B74  6FC2               	movwf	___fladd@a& (0+255),b
  8936  002B76  0E00               	movlw	0
  8937  002B78  6FC3               	movwf	(___fladd@a+1)& (0+255),b
  8938  002B7A  0E00               	movlw	0
  8939  002B7C  6FC4               	movwf	(___fladd@a+2)& (0+255),b
  8940  002B7E                     L9:
  8941  002B7E  0E00               	movlw	0
  8942  002B80  6FC5               	movwf	(___fladd@a+3)& (0+255),b
  8943                           
  8944                           ; BSR set to: 0
  8945                           
  8946                           ; BSR set to: 0
  8947  002B82  51D0               	movf	___fladd@bexp& (0+255),w,b
  8948  002B84  5DCF               	subwf	___fladd@aexp& (0+255),w,b
  8949  002B86  B0D8               	btfsc	status,0,c
  8950  002B88  D022               	goto	l836
  8951                           
  8952                           ; BSR set to: 0
  8953  002B8A  ADCE               	btfss	___fladd@signs& (0+255),6,b
  8954  002B8C  D002               	goto	l837
  8955                           
  8956                           ; BSR set to: 0
  8957  002B8E  0E80               	movlw	128
  8958  002B90  1BCE               	xorwf	___fladd@signs& (0+255),f,b
  8959  002B92                     l837:
  8960                           
  8961                           ; BSR set to: 0
  8962                           
  8963                           ; BSR set to: 0
  8964  002B92  C0D0  F0D1         	movff	___fladd@bexp,___fladd@grs
  8965                           
  8966                           ; BSR set to: 0
  8967  002B96  C0CF  F0D0         	movff	___fladd@aexp,___fladd@bexp
  8968                           
  8969                           ; BSR set to: 0
  8970  002B9A  C0D1  F0CF         	movff	___fladd@grs,___fladd@aexp
  8971                           
  8972                           ; BSR set to: 0
  8973  002B9E  C0BE  F0D1         	movff	___fladd@b,___fladd@grs
  8974                           
  8975                           ; BSR set to: 0
  8976  002BA2  C0C2  F0BE         	movff	___fladd@a,___fladd@b
  8977                           
  8978                           ; BSR set to: 0
  8979  002BA6  C0D1  F0C2         	movff	___fladd@grs,___fladd@a
  8980                           
  8981                           ; BSR set to: 0
  8982  002BAA  C0BF  F0D1         	movff	___fladd@b+1,___fladd@grs
  8983                           
  8984                           ; BSR set to: 0
  8985  002BAE  C0C3  F0BF         	movff	___fladd@a+1,___fladd@b+1
  8986                           
  8987                           ; BSR set to: 0
  8988  002BB2  C0D1  F0C3         	movff	___fladd@grs,___fladd@a+1
  8989                           
  8990                           ; BSR set to: 0
  8991  002BB6  C0C0  F0D1         	movff	___fladd@b+2,___fladd@grs
  8992                           
  8993                           ; BSR set to: 0
  8994  002BBA  C0C4  F0C0         	movff	___fladd@a+2,___fladd@b+2
  8995                           
  8996                           ; BSR set to: 0
  8997  002BBE  C0D1  F0C4         	movff	___fladd@grs,___fladd@a+2
  8998                           
  8999                           ; BSR set to: 0
  9000  002BC2  C0C1  F0D1         	movff	___fladd@b+3,___fladd@grs
  9001                           
  9002                           ; BSR set to: 0
  9003  002BC6  C0C5  F0C1         	movff	___fladd@a+3,___fladd@b+3
  9004                           
  9005                           ; BSR set to: 0
  9006  002BCA  C0D1  F0C5         	movff	___fladd@grs,___fladd@a+3
  9007  002BCE                     l836:
  9008                           
  9009                           ; BSR set to: 0
  9010                           
  9011                           ; BSR set to: 0
  9012  002BCE  0E00               	movlw	0
  9013  002BD0  6FD1               	movwf	___fladd@grs& (0+255),b
  9014                           
  9015                           ; BSR set to: 0
  9016  002BD2  51D0               	movf	___fladd@bexp& (0+255),w,b
  9017  002BD4  6FC6               	movwf	??___fladd& (0+255),b
  9018  002BD6  6BC7               	clrf	(??___fladd+1)& (0+255),b
  9019  002BD8  1FC6               	comf	??___fladd& (0+255),f,b
  9020  002BDA  1FC7               	comf	(??___fladd+1)& (0+255),f,b
  9021  002BDC  4BC6               	infsnz	??___fladd& (0+255),f,b
  9022  002BDE  2BC7               	incf	(??___fladd+1)& (0+255),f,b
  9023  002BE0  51CF               	movf	___fladd@aexp& (0+255),w,b
  9024  002BE2  6FC8               	movwf	(??___fladd+2)& (0+255),b
  9025  002BE4  6BC9               	clrf	(??___fladd+3)& (0+255),b
  9026  002BE6  51C6               	movf	??___fladd& (0+255),w,b
  9027  002BE8  27C8               	addwf	(??___fladd+2)& (0+255),f,b
  9028  002BEA  51C7               	movf	(??___fladd+1)& (0+255),w,b
  9029  002BEC  23C9               	addwfc	(??___fladd+3)& (0+255),f,b
  9030  002BEE  BFC9               	btfsc	(??___fladd+3)& (0+255),7,b
  9031  002BF0  D02C               	goto	l840
  9032  002BF2  51C9               	movf	(??___fladd+3)& (0+255),w,b
  9033  002BF4  E104               	bnz	u4660
  9034  002BF6  0E1A               	movlw	26
  9035  002BF8  5DC8               	subwf	(??___fladd+2)& (0+255),w,b
  9036  002BFA  A0D8               	btfss	status,0,c
  9037  002BFC  D026               	goto	l840
  9038  002BFE                     u4660:
  9039                           
  9040                           ; BSR set to: 0
  9041  002BFE  51BE               	movf	___fladd@b& (0+255),w,b
  9042  002C00  11BF               	iorwf	(___fladd@b+1)& (0+255),w,b
  9043  002C02  11C0               	iorwf	(___fladd@b+2)& (0+255),w,b
  9044  002C04  11C1               	iorwf	(___fladd@b+3)& (0+255),w,b
  9045  002C06  B4D8               	btfsc	status,2,c
  9046  002C08  D002               	goto	u4670
  9047  002C0A  0E01               	movlw	1
  9048  002C0C  D001               	goto	u4680
  9049  002C0E                     u4670:
  9050  002C0E  0E00               	movlw	0
  9051  002C10                     u4680:
  9052  002C10  6FD1               	movwf	___fladd@grs& (0+255),b
  9053                           
  9054                           ; BSR set to: 0
  9055  002C12  0E00               	movlw	0
  9056  002C14  6FBE               	movwf	___fladd@b& (0+255),b
  9057  002C16  0E00               	movlw	0
  9058  002C18  6FBF               	movwf	(___fladd@b+1)& (0+255),b
  9059  002C1A  0E00               	movlw	0
  9060  002C1C  6FC0               	movwf	(___fladd@b+2)& (0+255),b
  9061  002C1E  0E00               	movlw	0
  9062  002C20  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  9063                           
  9064                           ; BSR set to: 0
  9065  002C22  C0CF  F0D0         	movff	___fladd@aexp,___fladd@bexp
  9066  002C26  D015               	goto	u4710
  9067  002C28                     l841:
  9068                           
  9069                           ; BSR set to: 0
  9070  002C28  A1D1               	btfss	___fladd@grs& (0+255),0,b
  9071  002C2A  D005               	goto	l842
  9072                           
  9073                           ; BSR set to: 0
  9074  002C2C  90D8               	bcf	status,0,c
  9075  002C2E  31D1               	rrcf	___fladd@grs& (0+255),w,b
  9076  002C30  0901               	iorlw	1
  9077  002C32  6FD1               	movwf	___fladd@grs& (0+255),b
  9078  002C34  D002               	goto	l843
  9079  002C36                     l842:
  9080                           
  9081                           ; BSR set to: 0
  9082                           
  9083                           ; BSR set to: 0
  9084  002C36  90D8               	bcf	status,0,c
  9085  002C38  33D1               	rrcf	___fladd@grs& (0+255),f,b
  9086  002C3A                     l843:
  9087                           
  9088                           ; BSR set to: 0
  9089                           
  9090                           ; BSR set to: 0
  9091  002C3A  B1BE               	btfsc	___fladd@b& (0+255),0,b
  9092                           
  9093                           ; BSR set to: 0
  9094  002C3C  8FD1               	bsf	___fladd@grs& (0+255),7,b
  9095                           
  9096                           ; BSR set to: 0
  9097                           
  9098                           ; BSR set to: 0
  9099  002C3E  35C1               	rlcf	(___fladd@b+3)& (0+255),w,b
  9100  002C40  33C1               	rrcf	(___fladd@b+3)& (0+255),f,b
  9101  002C42  33C0               	rrcf	(___fladd@b+2)& (0+255),f,b
  9102  002C44  33BF               	rrcf	(___fladd@b+1)& (0+255),f,b
  9103  002C46  33BE               	rrcf	___fladd@b& (0+255),f,b
  9104                           
  9105                           ; BSR set to: 0
  9106  002C48  2BD0               	incf	___fladd@bexp& (0+255),f,b
  9107  002C4A                     l840:
  9108                           
  9109                           ; BSR set to: 0
  9110  002C4A  51CF               	movf	___fladd@aexp& (0+255),w,b
  9111  002C4C  5DD0               	subwf	___fladd@bexp& (0+255),w,b
  9112  002C4E  A0D8               	btfss	status,0,c
  9113  002C50  D7EB               	goto	l841
  9114  002C52                     u4710:
  9115                           
  9116                           ; BSR set to: 0
  9117                           
  9118                           ; BSR set to: 0
  9119  002C52  BDCE               	btfsc	___fladd@signs& (0+255),6,b
  9120  002C54  D029               	goto	l846
  9121                           
  9122                           ; BSR set to: 0
  9123  002C56  51D0               	movf	___fladd@bexp& (0+255),w,b
  9124  002C58  A4D8               	btfss	status,2,c
  9125  002C5A  D009               	goto	l847
  9126                           
  9127                           ; BSR set to: 0
  9128  002C5C  0E00               	movlw	0
  9129  002C5E  6FBE               	movwf	?___fladd& (0+255),b
  9130  002C60  0E00               	movlw	0
  9131  002C62  6FBF               	movwf	(?___fladd+1)& (0+255),b
  9132  002C64  0E00               	movlw	0
  9133  002C66  6FC0               	movwf	(?___fladd+2)& (0+255),b
  9134  002C68  0E00               	movlw	0
  9135  002C6A  6FC1               	movwf	(?___fladd+3)& (0+255),b
  9136                           
  9137                           ; BSR set to: 0
  9138  002C6C  0012               	return	
  9139  002C6E                     l847:
  9140                           
  9141                           ; BSR set to: 0
  9142                           
  9143                           ; BSR set to: 0
  9144  002C6E  51C2               	movf	___fladd@a& (0+255),w,b
  9145  002C70  27BE               	addwf	___fladd@b& (0+255),f,b
  9146  002C72  51C3               	movf	(___fladd@a+1)& (0+255),w,b
  9147  002C74  23BF               	addwfc	(___fladd@b+1)& (0+255),f,b
  9148  002C76  51C4               	movf	(___fladd@a+2)& (0+255),w,b
  9149  002C78  23C0               	addwfc	(___fladd@b+2)& (0+255),f,b
  9150  002C7A  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  9151  002C7C  23C1               	addwfc	(___fladd@b+3)& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154  002C7E  A1C1               	btfss	(___fladd@b+3)& (0+255),0,b
  9155  002C80  D083               	goto	u4840
  9156                           
  9157                           ; BSR set to: 0
  9158  002C82  A1D1               	btfss	___fladd@grs& (0+255),0,b
  9159  002C84  D006               	goto	l850
  9160                           
  9161                           ; BSR set to: 0
  9162  002C86  90D8               	bcf	status,0,c
  9163  002C88  33D1               	rrcf	___fladd@grs& (0+255),f,b
  9164  002C8A  51D1               	movf	___fladd@grs& (0+255),w,b
  9165  002C8C  0901               	iorlw	1
  9166  002C8E  6FD1               	movwf	___fladd@grs& (0+255),b
  9167  002C90  D002               	goto	l851
  9168  002C92                     l850:
  9169                           
  9170                           ; BSR set to: 0
  9171                           
  9172                           ; BSR set to: 0
  9173  002C92  90D8               	bcf	status,0,c
  9174  002C94  33D1               	rrcf	___fladd@grs& (0+255),f,b
  9175  002C96                     l851:
  9176                           
  9177                           ; BSR set to: 0
  9178                           
  9179                           ; BSR set to: 0
  9180  002C96  B1BE               	btfsc	___fladd@b& (0+255),0,b
  9181                           
  9182                           ; BSR set to: 0
  9183  002C98  8FD1               	bsf	___fladd@grs& (0+255),7,b
  9184                           
  9185                           ; BSR set to: 0
  9186                           
  9187                           ; BSR set to: 0
  9188  002C9A  35C1               	rlcf	(___fladd@b+3)& (0+255),w,b
  9189  002C9C  33C1               	rrcf	(___fladd@b+3)& (0+255),f,b
  9190  002C9E  33C0               	rrcf	(___fladd@b+2)& (0+255),f,b
  9191  002CA0  33BF               	rrcf	(___fladd@b+1)& (0+255),f,b
  9192  002CA2  33BE               	rrcf	___fladd@b& (0+255),f,b
  9193                           
  9194                           ; BSR set to: 0
  9195  002CA4  2BD0               	incf	___fladd@bexp& (0+255),f,b
  9196                           
  9197                           ; BSR set to: 0
  9198  002CA6  D070               	goto	u4840
  9199  002CA8                     l846:
  9200                           
  9201                           ; BSR set to: 0
  9202                           
  9203                           ; BSR set to: 0
  9204  002CA8  51C2               	movf	___fladd@a& (0+255),w,b
  9205  002CAA  5DBE               	subwf	___fladd@b& (0+255),w,b
  9206  002CAC  51C3               	movf	(___fladd@a+1)& (0+255),w,b
  9207  002CAE  59BF               	subwfb	(___fladd@b+1)& (0+255),w,b
  9208  002CB0  51C4               	movf	(___fladd@a+2)& (0+255),w,b
  9209  002CB2  59C0               	subwfb	(___fladd@b+2)& (0+255),w,b
  9210  002CB4  51C1               	movf	(___fladd@b+3)& (0+255),w,b
  9211  002CB6  0A80               	xorlw	128
  9212  002CB8  6FC6               	movwf	??___fladd& (0+255),b
  9213  002CBA  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  9214  002CBC  0A80               	xorlw	128
  9215  002CBE  59C6               	subwfb	??___fladd& (0+255),w,b
  9216  002CC0  B0D8               	btfsc	status,0,c
  9217  002CC2  D036               	goto	l854
  9218                           
  9219                           ; BSR set to: 0
  9220  002CC4  C0BE  F0C6         	movff	___fladd@b,??___fladd
  9221  002CC8  C0BF  F0C7         	movff	___fladd@b+1,??___fladd+1
  9222  002CCC  C0C0  F0C8         	movff	___fladd@b+2,??___fladd+2
  9223  002CD0  C0C1  F0C9         	movff	___fladd@b+3,??___fladd+3
  9224  002CD4  1FC6               	comf	??___fladd& (0+255),f,b
  9225  002CD6  1FC7               	comf	(??___fladd+1)& (0+255),f,b
  9226  002CD8  1FC8               	comf	(??___fladd+2)& (0+255),f,b
  9227  002CDA  1FC9               	comf	(??___fladd+3)& (0+255),f,b
  9228  002CDC  2BC6               	incf	??___fladd& (0+255),f,b
  9229  002CDE  0E00               	movlw	0
  9230  002CE0  23C7               	addwfc	(??___fladd+1)& (0+255),f,b
  9231  002CE2  23C8               	addwfc	(??___fladd+2)& (0+255),f,b
  9232  002CE4  23C9               	addwfc	(??___fladd+3)& (0+255),f,b
  9233  002CE6  51C2               	movf	___fladd@a& (0+255),w,b
  9234  002CE8  25C6               	addwf	??___fladd& (0+255),w,b
  9235  002CEA  6FCA               	movwf	(??___fladd+4)& (0+255),b
  9236  002CEC  51C3               	movf	(___fladd@a+1)& (0+255),w,b
  9237  002CEE  21C7               	addwfc	(??___fladd+1)& (0+255),w,b
  9238  002CF0  6FCB               	movwf	(??___fladd+5)& (0+255),b
  9239  002CF2  51C4               	movf	(___fladd@a+2)& (0+255),w,b
  9240  002CF4  21C8               	addwfc	(??___fladd+2)& (0+255),w,b
  9241  002CF6  6FCC               	movwf	(??___fladd+6)& (0+255),b
  9242  002CF8  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  9243  002CFA  21C9               	addwfc	(??___fladd+3)& (0+255),w,b
  9244  002CFC  6FCD               	movwf	(??___fladd+7)& (0+255),b
  9245  002CFE  0EFF               	movlw	255
  9246  002D00  25CA               	addwf	(??___fladd+4)& (0+255),w,b
  9247  002D02  6FBE               	movwf	___fladd@b& (0+255),b
  9248  002D04  0EFF               	movlw	255
  9249  002D06  21CB               	addwfc	(??___fladd+5)& (0+255),w,b
  9250  002D08  6FBF               	movwf	(___fladd@b+1)& (0+255),b
  9251  002D0A  0EFF               	movlw	255
  9252  002D0C  21CC               	addwfc	(??___fladd+6)& (0+255),w,b
  9253  002D0E  6FC0               	movwf	(___fladd@b+2)& (0+255),b
  9254  002D10  0EFF               	movlw	255
  9255  002D12  21CD               	addwfc	(??___fladd+7)& (0+255),w,b
  9256  002D14  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  9257  002D16  0E80               	movlw	128
  9258  002D18  1BCE               	xorwf	___fladd@signs& (0+255),f,b
  9259                           
  9260                           ; BSR set to: 0
  9261  002D1A  6DD1               	negf	___fladd@grs& (0+255),b
  9262                           
  9263                           ; BSR set to: 0
  9264  002D1C  51D1               	movf	___fladd@grs& (0+255),w,b
  9265  002D1E  A4D8               	btfss	status,2,c
  9266  002D20  D00F               	goto	l856
  9267                           
  9268                           ; BSR set to: 0
  9269  002D22  0E01               	movlw	1
  9270  002D24  27BE               	addwf	___fladd@b& (0+255),f,b
  9271  002D26  0E00               	movlw	0
  9272  002D28  23BF               	addwfc	(___fladd@b+1)& (0+255),f,b
  9273  002D2A  23C0               	addwfc	(___fladd@b+2)& (0+255),f,b
  9274  002D2C  23C1               	addwfc	(___fladd@b+3)& (0+255),f,b
  9275                           
  9276                           ; BSR set to: 0
  9277  002D2E  D008               	goto	l856
  9278  002D30                     l854:
  9279                           
  9280                           ; BSR set to: 0
  9281                           
  9282                           ; BSR set to: 0
  9283  002D30  51C2               	movf	___fladd@a& (0+255),w,b
  9284  002D32  5FBE               	subwf	___fladd@b& (0+255),f,b
  9285  002D34  51C3               	movf	(___fladd@a+1)& (0+255),w,b
  9286  002D36  5BBF               	subwfb	(___fladd@b+1)& (0+255),f,b
  9287  002D38  51C4               	movf	(___fladd@a+2)& (0+255),w,b
  9288  002D3A  5BC0               	subwfb	(___fladd@b+2)& (0+255),f,b
  9289  002D3C  51C5               	movf	(___fladd@a+3)& (0+255),w,b
  9290  002D3E  5BC1               	subwfb	(___fladd@b+3)& (0+255),f,b
  9291  002D40                     l856:
  9292                           
  9293                           ; BSR set to: 0
  9294  002D40  51BE               	movf	___fladd@b& (0+255),w,b
  9295  002D42  11BF               	iorwf	(___fladd@b+1)& (0+255),w,b
  9296  002D44  11C0               	iorwf	(___fladd@b+2)& (0+255),w,b
  9297  002D46  11C1               	iorwf	(___fladd@b+3)& (0+255),w,b
  9298  002D48  A4D8               	btfss	status,2,c
  9299  002D4A  D01C               	goto	l863
  9300                           
  9301                           ; BSR set to: 0
  9302  002D4C  51D1               	movf	___fladd@grs& (0+255),w,b
  9303  002D4E  A4D8               	btfss	status,2,c
  9304  002D50  D019               	goto	l863
  9305                           
  9306                           ; BSR set to: 0
  9307  002D52  0E00               	movlw	0
  9308  002D54  6FBE               	movwf	?___fladd& (0+255),b
  9309  002D56  0E00               	movlw	0
  9310  002D58  6FBF               	movwf	(?___fladd+1)& (0+255),b
  9311  002D5A  0E00               	movlw	0
  9312  002D5C  6FC0               	movwf	(?___fladd+2)& (0+255),b
  9313  002D5E  0E00               	movlw	0
  9314  002D60  6FC1               	movwf	(?___fladd+3)& (0+255),b
  9315                           
  9316                           ; BSR set to: 0
  9317  002D62  0012               	return	
  9318  002D64                     
  9319                           ; BSR set to: 0
  9320                           
  9321                           ; BSR set to: 0
  9322  002D64  90D8               	bcf	status,0,c
  9323  002D66  37BE               	rlcf	___fladd@b& (0+255),f,b
  9324  002D68  37BF               	rlcf	(___fladd@b+1)& (0+255),f,b
  9325  002D6A  37C0               	rlcf	(___fladd@b+2)& (0+255),f,b
  9326  002D6C  37C1               	rlcf	(___fladd@b+3)& (0+255),f,b
  9327                           
  9328                           ; BSR set to: 0
  9329  002D6E  BFD1               	btfsc	___fladd@grs& (0+255),7,b
  9330                           
  9331                           ; BSR set to: 0
  9332  002D70  81BE               	bsf	___fladd@b& (0+255),0,b
  9333                           
  9334                           ; BSR set to: 0
  9335                           
  9336                           ; BSR set to: 0
  9337  002D72  A1D1               	btfss	___fladd@grs& (0+255),0,b
  9338  002D74  D002               	goto	l861
  9339                           
  9340                           ; BSR set to: 0
  9341  002D76  80D8               	bsf	status,0,c
  9342  002D78  D001               	goto	L10
  9343  002D7A                     l861:
  9344                           
  9345                           ; BSR set to: 0
  9346                           
  9347                           ; BSR set to: 0
  9348  002D7A  90D8               	bcf	status,0,c
  9349  002D7C                     L10:
  9350  002D7C  37D1               	rlcf	___fladd@grs& (0+255),f,b
  9351                           
  9352                           ; BSR set to: 0
  9353                           
  9354                           ; BSR set to: 0
  9355  002D7E  51D0               	movf	___fladd@bexp& (0+255),w,b
  9356  002D80  A4D8               	btfss	status,2,c
  9357                           
  9358                           ; BSR set to: 0
  9359  002D82  07D0               	decf	___fladd@bexp& (0+255),f,b
  9360  002D84                     l863:
  9361                           
  9362                           ; BSR set to: 0
  9363                           
  9364                           ; BSR set to: 0
  9365                           
  9366                           ; BSR set to: 0
  9367  002D84  AFC0               	btfss	(___fladd@b+2)& (0+255),7,b
  9368  002D86  D7EE               	goto	l859
  9369  002D88                     u4840:
  9370                           
  9371                           ; BSR set to: 0
  9372                           
  9373                           ; BSR set to: 0
  9374                           
  9375                           ; BSR set to: 0
  9376  002D88  0E00               	movlw	0
  9377  002D8A  6FCF               	movwf	___fladd@aexp& (0+255),b
  9378                           
  9379                           ; BSR set to: 0
  9380  002D8C  AFD1               	btfss	___fladd@grs& (0+255),7,b
  9381  002D8E  D00A               	goto	l868
  9382                           
  9383                           ; BSR set to: 0
  9384  002D90  C0D1  F0C6         	movff	___fladd@grs,??___fladd
  9385  002D94  0E7F               	movlw	127
  9386  002D96  17C6               	andwf	??___fladd& (0+255),f,b
  9387  002D98  A4D8               	btfss	status,2,c
  9388  002D9A  D002               	goto	u4870
  9389                           
  9390                           ; BSR set to: 0
  9391                           
  9392                           ; BSR set to: 0
  9393  002D9C  A1BE               	btfss	___fladd@b& (0+255),0,b
  9394  002D9E  D002               	goto	l868
  9395  002DA0                     u4870:
  9396                           
  9397                           ; BSR set to: 0
  9398  002DA0  0E01               	movlw	1
  9399  002DA2  6FCF               	movwf	___fladd@aexp& (0+255),b
  9400  002DA4                     l868:
  9401                           
  9402                           ; BSR set to: 0
  9403                           
  9404                           ; BSR set to: 0
  9405                           
  9406                           ; BSR set to: 0
  9407  002DA4  51CF               	movf	___fladd@aexp& (0+255),w,b
  9408  002DA6  B4D8               	btfsc	status,2,c
  9409  002DA8  D020               	goto	l871
  9410                           
  9411                           ; BSR set to: 0
  9412  002DAA  0E01               	movlw	1
  9413  002DAC  27BE               	addwf	___fladd@b& (0+255),f,b
  9414  002DAE  0E00               	movlw	0
  9415  002DB0  23BF               	addwfc	(___fladd@b+1)& (0+255),f,b
  9416  002DB2  23C0               	addwfc	(___fladd@b+2)& (0+255),f,b
  9417  002DB4  23C1               	addwfc	(___fladd@b+3)& (0+255),f,b
  9418                           
  9419                           ; BSR set to: 0
  9420  002DB6  A1C1               	btfss	(___fladd@b+3)& (0+255),0,b
  9421  002DB8  D018               	goto	l871
  9422                           
  9423                           ; BSR set to: 0
  9424  002DBA  C0BE  F0C6         	movff	___fladd@b,??___fladd
  9425  002DBE  C0BF  F0C7         	movff	___fladd@b+1,??___fladd+1
  9426  002DC2  C0C0  F0C8         	movff	___fladd@b+2,??___fladd+2
  9427  002DC6  C0C1  F0C9         	movff	___fladd@b+3,??___fladd+3
  9428  002DCA  35C9               	rlcf	(??___fladd+3)& (0+255),w,b
  9429  002DCC  33C9               	rrcf	(??___fladd+3)& (0+255),f,b
  9430  002DCE  33C8               	rrcf	(??___fladd+2)& (0+255),f,b
  9431  002DD0  33C7               	rrcf	(??___fladd+1)& (0+255),f,b
  9432  002DD2  33C6               	rrcf	??___fladd& (0+255),f,b
  9433  002DD4  C0C6  F0BE         	movff	??___fladd,___fladd@b
  9434  002DD8  C0C7  F0BF         	movff	??___fladd+1,___fladd@b+1
  9435  002DDC  C0C8  F0C0         	movff	??___fladd+2,___fladd@b+2
  9436  002DE0  C0C9  F0C1         	movff	??___fladd+3,___fladd@b+3
  9437  002DE4  29D0               	incf	___fladd@bexp& (0+255),w,b
  9438  002DE6  A4D8               	btfss	status,2,c
  9439                           
  9440                           ; BSR set to: 0
  9441  002DE8  2BD0               	incf	___fladd@bexp& (0+255),f,b
  9442  002DEA                     l871:
  9443                           
  9444                           ; BSR set to: 0
  9445                           
  9446                           ; BSR set to: 0
  9447                           
  9448                           ; BSR set to: 0
  9449                           
  9450                           ; BSR set to: 0
  9451  002DEA  29D0               	incf	___fladd@bexp& (0+255),w,b
  9452  002DEC  B4D8               	btfsc	status,2,c
  9453  002DEE  D003               	goto	u4920
  9454                           
  9455                           ; BSR set to: 0
  9456  002DF0  51D0               	movf	___fladd@bexp& (0+255),w,b
  9457  002DF2  A4D8               	btfss	status,2,c
  9458  002DF4  D00D               	goto	l875
  9459  002DF6                     u4920:
  9460                           
  9461                           ; BSR set to: 0
  9462                           
  9463                           ; BSR set to: 0
  9464  002DF6  0E00               	movlw	0
  9465  002DF8  6FBE               	movwf	___fladd@b& (0+255),b
  9466  002DFA  0E00               	movlw	0
  9467  002DFC  6FBF               	movwf	(___fladd@b+1)& (0+255),b
  9468  002DFE  0E00               	movlw	0
  9469  002E00  6FC0               	movwf	(___fladd@b+2)& (0+255),b
  9470  002E02  0E00               	movlw	0
  9471  002E04  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  9472  002E06  51D0               	movf	___fladd@bexp& (0+255),w,b
  9473  002E08  A4D8               	btfss	status,2,c
  9474  002E0A  D002               	goto	l875
  9475                           
  9476                           ; BSR set to: 0
  9477  002E0C  0E00               	movlw	0
  9478  002E0E  6FCE               	movwf	___fladd@signs& (0+255),b
  9479  002E10                     l875:
  9480                           
  9481                           ; BSR set to: 0
  9482                           
  9483                           ; BSR set to: 0
  9484                           
  9485                           ; BSR set to: 0
  9486  002E10  A1D0               	btfss	___fladd@bexp& (0+255),0,b
  9487  002E12  D002               	goto	l876
  9488                           
  9489                           ; BSR set to: 0
  9490  002E14  8FC0               	bsf	(___fladd@b+2)& (0+255),7,b
  9491  002E16  D001               	goto	l877
  9492  002E18                     l876:
  9493                           
  9494                           ; BSR set to: 0
  9495                           
  9496                           ; BSR set to: 0
  9497  002E18  9FC0               	bcf	(___fladd@b+2)& (0+255),7,b
  9498  002E1A                     l877:
  9499                           
  9500                           ; BSR set to: 0
  9501                           
  9502                           ; BSR set to: 0
  9503  002E1A  90D8               	bcf	status,0,c
  9504  002E1C  31D0               	rrcf	___fladd@bexp& (0+255),w,b
  9505  002E1E  6FC1               	movwf	(___fladd@b+3)& (0+255),b
  9506                           
  9507                           ; BSR set to: 0
  9508  002E20  BFCE               	btfsc	___fladd@signs& (0+255),7,b
  9509                           
  9510                           ; BSR set to: 0
  9511  002E22  8FC1               	bsf	(___fladd@b+3)& (0+255),7,b
  9512                           
  9513                           ; BSR set to: 0
  9514                           
  9515                           ; BSR set to: 0
  9516  002E24  C0BE  F0BE         	movff	___fladd@b,?___fladd
  9517  002E28  C0BF  F0BF         	movff	___fladd@b+1,?___fladd+1
  9518  002E2C  C0C0  F0C0         	movff	___fladd@b+2,?___fladd+2
  9519  002E30  C0C1  F0C1         	movff	___fladd@b+3,?___fladd+3
  9520  002E34  0012               	return	
  9521  002E36                     __end_of___fladd:
  9522                           	opt stack 0
  9523                           tblptru	equ	0xFF8
  9524                           tblptrh	equ	0xFF7
  9525                           tblptrl	equ	0xFF6
  9526                           tablat	equ	0xFF5
  9527                           prodh	equ	0xFF4
  9528                           prodl	equ	0xFF3
  9529                           intcon	equ	0xFF2
  9530                           indf0	equ	0xFEF
  9531                           postinc0	equ	0xFEE
  9532                           fsr0h	equ	0xFEA
  9533                           fsr0l	equ	0xFE9
  9534                           wreg	equ	0xFE8
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _calcula *****************
  9542 ;; Defined at:
  9543 ;;		line 307 in file "color_3.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;		None
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  temp            4   58[BANK0 ] float 
  9548 ;;  freq            4   54[BANK0 ] float 
  9549 ;;  elapsedTime     4   50[BANK0 ] unsigned long 
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  4   42[BANK0 ] float 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9559 ;;      Params:         0       4       0       0       0       0       0
  9560 ;;      Locals:         0      12       0       0       0       0       0
  9561 ;;      Temps:          0       4       0       0       0       0       0
  9562 ;;      Totals:         0      20       0       0       0       0       0
  9563 ;;Total ram usage:       20 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    3
  9566 ;; This function calls:
  9567 ;;		___fldiv
  9568 ;;		___flmul
  9569 ;;		___xxtofl
  9570 ;;		_prepareForInterrupts
  9571 ;; This function is called by:
  9572 ;;		_main
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text30
  9577  00396E                     __ptext30:
  9578                           	opt stack 0
  9579  00396E                     _calcula:
  9580                           	opt stack 27
  9581                           
  9582                           ;color_3.c: 309: float freq = 0.0;
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;incstack = 0
  9586  00396E  0E00               	movlw	0
  9587  003970  0100               	movlb	0	; () banked
  9588  003972  6FB6               	movwf	calcula@freq& (0+255),b
  9589  003974  0E00               	movlw	0
  9590  003976  6FB7               	movwf	(calcula@freq+1)& (0+255),b
  9591  003978  0E00               	movlw	0
  9592  00397A  6FB8               	movwf	(calcula@freq+2)& (0+255),b
  9593  00397C  0E00               	movlw	0
  9594  00397E  6FB9               	movwf	(calcula@freq+3)& (0+255),b
  9595                           
  9596                           ;color_3.c: 310: float temp = 0.0;
  9597  003980  0E00               	movlw	0
  9598  003982  6FBA               	movwf	calcula@temp& (0+255),b
  9599  003984  0E00               	movlw	0
  9600  003986  6FBB               	movwf	(calcula@temp+1)& (0+255),b
  9601  003988  0E00               	movlw	0
  9602  00398A  6FBC               	movwf	(calcula@temp+2)& (0+255),b
  9603  00398C  0E00               	movlw	0
  9604  00398E  6FBD               	movwf	(calcula@temp+3)& (0+255),b
  9605                           
  9606                           ;color_3.c: 311: if (!triggered)
  9607  003990  504E               	movf	_triggered,w,c	;volatile
  9608  003992  B4D8               	btfsc	status,2,c
  9609  003994  0012               	return	
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;color_3.c: 314: }
  9613                           ;color_3.c: 316: unsigned long elapsedTime = finishTime - startTime;
  9614                           
  9615                           ; BSR set to: 0
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;color_3.c: 312: {
  9619                           ;color_3.c: 313: return;
  9620  003996  C0F0  F0AE         	movff	_startTime,??_calcula	;volatile
  9621  00399A  C0F1  F0AF         	movff	_startTime+1,??_calcula+1	;volatile
  9622  00399E  C0F2  F0B0         	movff	_startTime+2,??_calcula+2	;volatile
  9623  0039A2  C0F3  F0B1         	movff	_startTime+3,??_calcula+3	;volatile
  9624  0039A6  1FAE               	comf	??_calcula& (0+255),f,b
  9625  0039A8  1FAF               	comf	(??_calcula+1)& (0+255),f,b
  9626  0039AA  1FB0               	comf	(??_calcula+2)& (0+255),f,b
  9627  0039AC  1FB1               	comf	(??_calcula+3)& (0+255),f,b
  9628  0039AE  2BAE               	incf	??_calcula& (0+255),f,b
  9629  0039B0  0E00               	movlw	0
  9630  0039B2  23AF               	addwfc	(??_calcula+1)& (0+255),f,b
  9631  0039B4  23B0               	addwfc	(??_calcula+2)& (0+255),f,b
  9632  0039B6  23B1               	addwfc	(??_calcula+3)& (0+255),f,b
  9633  0039B8  5046               	movf	_finishTime,w,c	;volatile
  9634  0039BA  25AE               	addwf	??_calcula& (0+255),w,b
  9635  0039BC  6FB2               	movwf	calcula@elapsedTime& (0+255),b
  9636  0039BE  5047               	movf	_finishTime+1,w,c	;volatile
  9637  0039C0  21AF               	addwfc	(??_calcula+1)& (0+255),w,b
  9638  0039C2  6FB3               	movwf	(calcula@elapsedTime+1)& (0+255),b
  9639  0039C4  5048               	movf	_finishTime+2,w,c	;volatile
  9640  0039C6  21B0               	addwfc	(??_calcula+2)& (0+255),w,b
  9641  0039C8  6FB4               	movwf	(calcula@elapsedTime+2)& (0+255),b
  9642  0039CA  5049               	movf	_finishTime+3,w,c	;volatile
  9643  0039CC  21B1               	addwfc	(??_calcula+3)& (0+255),w,b
  9644  0039CE  6FB5               	movwf	(calcula@elapsedTime+3)& (0+255),b
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;color_3.c: 318: temp = (float) (elapsedTime);
  9648  0039D0  C0B2  F02E         	movff	calcula@elapsedTime,___xxtofl@val
  9649  0039D4  C0B3  F02F         	movff	calcula@elapsedTime+1,___xxtofl@val+1
  9650  0039D8  C0B4  F030         	movff	calcula@elapsedTime+2,___xxtofl@val+2
  9651  0039DC  C0B5  F031         	movff	calcula@elapsedTime+3,___xxtofl@val+3
  9652  0039E0  0E00               	movlw	0
  9653  0039E2  ECBF  F019         	call	___xxtofl
  9654  0039E6  C02E  F0BA         	movff	?___xxtofl,calcula@temp
  9655  0039EA  C02F  F0BB         	movff	?___xxtofl+1,calcula@temp+1
  9656  0039EE  C030  F0BC         	movff	?___xxtofl+2,calcula@temp+2
  9657  0039F2  C031  F0BD         	movff	?___xxtofl+3,calcula@temp+3
  9658                           
  9659                           ;color_3.c: 319: temp *= 250e-9;
  9660  0039F6  C0BA  F03C         	movff	calcula@temp,___flmul@b
  9661  0039FA  C0BB  F03D         	movff	calcula@temp+1,___flmul@b+1
  9662  0039FE  C0BC  F03E         	movff	calcula@temp+2,___flmul@b+2
  9663  003A02  C0BD  F03F         	movff	calcula@temp+3,___flmul@b+3
  9664  003A06  0EBD               	movlw	189
  9665  003A08  6E40               	movwf	___flmul@a,c
  9666  003A0A  0E37               	movlw	55
  9667  003A0C  6E41               	movwf	___flmul@a+1,c
  9668  003A0E  0E86               	movlw	134
  9669  003A10  6E42               	movwf	___flmul@a+2,c
  9670  003A12  0E34               	movlw	52
  9671  003A14  6E43               	movwf	___flmul@a+3,c
  9672  003A16  ECD3  F013         	call	___flmul	;wreg free
  9673  003A1A  C03C  F0BA         	movff	?___flmul,calcula@temp
  9674  003A1E  C03D  F0BB         	movff	?___flmul+1,calcula@temp+1
  9675  003A22  C03E  F0BC         	movff	?___flmul+2,calcula@temp+2
  9676  003A26  C03F  F0BD         	movff	?___flmul+3,calcula@temp+3
  9677                           
  9678                           ;color_3.c: 320: freq = 1.0/(temp);
  9679  003A2A  0E00               	movlw	0
  9680  003A2C  0100               	movlb	0	; () banked
  9681  003A2E  6F91               	movwf	___fldiv@b& (0+255),b
  9682  003A30  0E00               	movlw	0
  9683  003A32  6F92               	movwf	(___fldiv@b+1)& (0+255),b
  9684  003A34  0E80               	movlw	128
  9685  003A36  6F93               	movwf	(___fldiv@b+2)& (0+255),b
  9686  003A38  0E3F               	movlw	63
  9687  003A3A  6F94               	movwf	(___fldiv@b+3)& (0+255),b
  9688  003A3C  C0BA  F095         	movff	calcula@temp,___fldiv@a
  9689  003A40  C0BB  F096         	movff	calcula@temp+1,___fldiv@a+1
  9690  003A44  C0BC  F097         	movff	calcula@temp+2,___fldiv@a+2
  9691  003A48  C0BD  F098         	movff	calcula@temp+3,___fldiv@a+3
  9692  003A4C  EC1B  F017         	call	___fldiv	;wreg free
  9693  003A50  C091  F0B6         	movff	?___fldiv,calcula@freq
  9694  003A54  C092  F0B7         	movff	?___fldiv+1,calcula@freq+1
  9695  003A58  C093  F0B8         	movff	?___fldiv+2,calcula@freq+2
  9696  003A5C  C094  F0B9         	movff	?___fldiv+3,calcula@freq+3
  9697                           
  9698                           ;color_3.c: 321: prepareForInterrupts ();
  9699  003A60  EC12  F021         	call	_prepareForInterrupts	;wreg free
  9700                           
  9701                           ;color_3.c: 322: _delay((unsigned long)((10)*(16000000/4000.0)));
  9702  003A64  0E34               	movlw	52
  9703  003A66  0100               	movlb	0	; () banked
  9704  003A68  6FAE               	movwf	??_calcula& (0+255),b
  9705  003A6A  0EF1               	movlw	241
  9706  003A6C                     u6957:
  9707  003A6C  2EE8               	decfsz	wreg,f,c
  9708  003A6E  D7FE               	bra	u6957
  9709  003A70  2FAE               	decfsz	??_calcula& (0+255),f,b
  9710  003A72  D7FC               	bra	u6957
  9711  003A74  D000               	nop2	
  9712                           
  9713                           ;color_3.c: 323: return freq;
  9714  003A76  C0B6  F0AA         	movff	calcula@freq,?_calcula
  9715  003A7A  C0B7  F0AB         	movff	calcula@freq+1,?_calcula+1
  9716  003A7E  C0B8  F0AC         	movff	calcula@freq+2,?_calcula+2
  9717  003A82  C0B9  F0AD         	movff	calcula@freq+3,?_calcula+3
  9718  003A86  0012               	return	
  9719  003A88                     __end_of_calcula:
  9720                           	opt stack 0
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           intcon	equ	0xFF2
  9728                           indf0	equ	0xFEF
  9729                           postinc0	equ	0xFEE
  9730                           fsr0h	equ	0xFEA
  9731                           fsr0l	equ	0xFE9
  9732                           wreg	equ	0xFE8
  9733                           indf2	equ	0xFDF
  9734                           postinc2	equ	0xFDE
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function _prepareForInterrupts *****************
  9740 ;; Defined at:
  9741 ;;		line 326 in file "color_3.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;		None
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;		None
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  1    wreg      void 
  9748 ;; Registers used:
  9749 ;;		wreg, status,2
  9750 ;; Tracked objects:
  9751 ;;		On entry : 0/0
  9752 ;;		On exit  : 0/0
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9755 ;;      Params:         0       0       0       0       0       0       0
  9756 ;;      Locals:         0       0       0       0       0       0       0
  9757 ;;      Temps:          0       0       0       0       0       0       0
  9758 ;;      Totals:         0       0       0       0       0       0       0
  9759 ;;Total ram usage:        0 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; Hardware stack levels required when called:    2
  9762 ;; This function calls:
  9763 ;;		Nothing
  9764 ;; This function is called by:
  9765 ;;		_main
  9766 ;;		_calcula
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           	psect	text31
  9771  004224                     __ptext31:
  9772                           	opt stack 0
  9773  004224                     _prepareForInterrupts:
  9774                           	opt stack 28
  9775                           
  9776                           ;color_3.c: 330: first = true;
  9777                           
  9778                           ;color_3.c: 329: INT0IF == 0;
  9779                           
  9780                           ;incstack = 0
  9781  004224  0E01               	movlw	1
  9782  004226  6E4F               	movwf	_first,c	;volatile
  9783                           
  9784                           ;color_3.c: 331: triggered = false;
  9785  004228  0E00               	movlw	0
  9786  00422A  6E4E               	movwf	_triggered,c	;volatile
  9787                           
  9788                           ;color_3.c: 336: INT0IE = 1;
  9789  00422C  88F2               	bsf	intcon,4,c	;volatile
  9790                           
  9791                           ;color_3.c: 337: INTEDG0 = 1;
  9792  00422E  8CF1               	bsf	intcon2,6,c	;volatile
  9793  004230  0012               	return		;funcret
  9794  004232                     __end_of_prepareForInterrupts:
  9795                           	opt stack 0
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           intcon2	equ	0xFF1
  9804                           indf0	equ	0xFEF
  9805                           postinc0	equ	0xFEE
  9806                           fsr0h	equ	0xFEA
  9807                           fsr0l	equ	0xFE9
  9808                           wreg	equ	0xFE8
  9809                           indf2	equ	0xFDF
  9810                           postinc2	equ	0xFDE
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function ___xxtofl *****************
  9816 ;; Defined at:
  9817 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/xxtofl.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;  sign            1    wreg     unsigned char 
  9820 ;;  val             4   45[COMRAM] long 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  sign            1   53[COMRAM] unsigned char 
  9823 ;;  arg             4   55[COMRAM] unsigned long 
  9824 ;;  exp             1   54[COMRAM] unsigned char 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  4   45[COMRAM] unsigned char 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, status,0
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9834 ;;      Params:         4       0       0       0       0       0       0
  9835 ;;      Locals:         6       0       0       0       0       0       0
  9836 ;;      Temps:          4       0       0       0       0       0       0
  9837 ;;      Totals:        14       0       0       0       0       0       0
  9838 ;;Total ram usage:       14 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    2
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_calcula
  9845 ;;		_sprintf
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           	psect	text32
  9850  00337E                     __ptext32:
  9851                           	opt stack 0
  9852  00337E                     ___xxtofl:
  9853                           	opt stack 27
  9854                           
  9855                           ;incstack = 0
  9856                           ;___xxtofl@sign stored from wreg
  9857  00337E  6E36               	movwf	___xxtofl@sign,c
  9858  003380  5036               	movf	___xxtofl@sign,w,c
  9859  003382  A4D8               	btfss	status,2,c
  9860  003384  AE31               	btfss	___xxtofl@val+3,7,c
  9861  003386  D01A               	goto	l947
  9862  003388  C02E  F032         	movff	___xxtofl@val,??___xxtofl
  9863  00338C  C02F  F033         	movff	___xxtofl@val+1,??___xxtofl+1
  9864  003390  C030  F034         	movff	___xxtofl@val+2,??___xxtofl+2
  9865  003394  C031  F035         	movff	___xxtofl@val+3,??___xxtofl+3
  9866  003398  1E32               	comf	??___xxtofl,f,c
  9867  00339A  1E33               	comf	??___xxtofl+1,f,c
  9868  00339C  1E34               	comf	??___xxtofl+2,f,c
  9869  00339E  1E35               	comf	??___xxtofl+3,f,c
  9870  0033A0  2A32               	incf	??___xxtofl,f,c
  9871  0033A2  0E00               	movlw	0
  9872  0033A4  2233               	addwfc	??___xxtofl+1,f,c
  9873  0033A6  2234               	addwfc	??___xxtofl+2,f,c
  9874  0033A8  2235               	addwfc	??___xxtofl+3,f,c
  9875  0033AA  C032  F038         	movff	??___xxtofl,___xxtofl@arg
  9876  0033AE  C033  F039         	movff	??___xxtofl+1,___xxtofl@arg+1
  9877  0033B2  C034  F03A         	movff	??___xxtofl+2,___xxtofl@arg+2
  9878  0033B6  C035  F03B         	movff	??___xxtofl+3,___xxtofl@arg+3
  9879  0033BA  D008               	goto	l948
  9880  0033BC                     l947:
  9881  0033BC  C02E  F038         	movff	___xxtofl@val,___xxtofl@arg
  9882  0033C0  C02F  F039         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9883  0033C4  C030  F03A         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9884  0033C8  C031  F03B         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9885  0033CC                     l948:
  9886  0033CC  502E               	movf	___xxtofl@val,w,c
  9887  0033CE  102F               	iorwf	___xxtofl@val+1,w,c
  9888  0033D0  1030               	iorwf	___xxtofl@val+2,w,c
  9889  0033D2  1031               	iorwf	___xxtofl@val+3,w,c
  9890  0033D4  A4D8               	btfss	status,2,c
  9891  0033D6  D009               	goto	l949
  9892  0033D8  0E00               	movlw	0
  9893  0033DA  6E2E               	movwf	?___xxtofl,c
  9894  0033DC  0E00               	movlw	0
  9895  0033DE  6E2F               	movwf	?___xxtofl+1,c
  9896  0033E0  0E00               	movlw	0
  9897  0033E2  6E30               	movwf	?___xxtofl+2,c
  9898  0033E4  0E00               	movlw	0
  9899  0033E6  6E31               	movwf	?___xxtofl+3,c
  9900  0033E8  0012               	return	
  9901  0033EA                     l949:
  9902  0033EA  0E96               	movlw	150
  9903  0033EC  6E37               	movwf	___xxtofl@exp,c
  9904  0033EE  D006               	goto	l951
  9905  0033F0  2A37               	incf	___xxtofl@exp,f,c
  9906  0033F2  90D8               	bcf	status,0,c
  9907  0033F4  323B               	rrcf	___xxtofl@arg+3,f,c
  9908  0033F6  323A               	rrcf	___xxtofl@arg+2,f,c
  9909  0033F8  3239               	rrcf	___xxtofl@arg+1,f,c
  9910  0033FA  3238               	rrcf	___xxtofl@arg,f,c
  9911  0033FC                     l951:
  9912  0033FC  0E00               	movlw	0
  9913  0033FE  1438               	andwf	___xxtofl@arg,w,c
  9914  003400  6E32               	movwf	??___xxtofl& (0+255),c
  9915  003402  0E00               	movlw	0
  9916  003404  1439               	andwf	___xxtofl@arg+1,w,c
  9917  003406  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  9918  003408  0E00               	movlw	0
  9919  00340A  143A               	andwf	___xxtofl@arg+2,w,c
  9920  00340C  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  9921  00340E  0EFE               	movlw	254
  9922  003410  143B               	andwf	___xxtofl@arg+3,w,c
  9923  003412  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  9924  003414  5032               	movf	??___xxtofl,w,c
  9925  003416  1033               	iorwf	??___xxtofl+1,w,c
  9926  003418  1034               	iorwf	??___xxtofl+2,w,c
  9927  00341A  1035               	iorwf	??___xxtofl+3,w,c
  9928  00341C  B4D8               	btfsc	status,2,c
  9929  00341E  D00D               	goto	l954
  9930  003420  D7E7               	goto	l952
  9931  003422  2A37               	incf	___xxtofl@exp,f,c
  9932  003424  0E01               	movlw	1
  9933  003426  2638               	addwf	___xxtofl@arg,f,c
  9934  003428  0E00               	movlw	0
  9935  00342A  2239               	addwfc	___xxtofl@arg+1,f,c
  9936  00342C  223A               	addwfc	___xxtofl@arg+2,f,c
  9937  00342E  223B               	addwfc	___xxtofl@arg+3,f,c
  9938  003430  90D8               	bcf	status,0,c
  9939  003432  323B               	rrcf	___xxtofl@arg+3,f,c
  9940  003434  323A               	rrcf	___xxtofl@arg+2,f,c
  9941  003436  3239               	rrcf	___xxtofl@arg+1,f,c
  9942  003438  3238               	rrcf	___xxtofl@arg,f,c
  9943  00343A                     l954:
  9944  00343A  0E00               	movlw	0
  9945  00343C  1438               	andwf	___xxtofl@arg,w,c
  9946  00343E  6E32               	movwf	??___xxtofl& (0+255),c
  9947  003440  0E00               	movlw	0
  9948  003442  1439               	andwf	___xxtofl@arg+1,w,c
  9949  003444  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  9950  003446  0E00               	movlw	0
  9951  003448  143A               	andwf	___xxtofl@arg+2,w,c
  9952  00344A  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  9953  00344C  0EFF               	movlw	255
  9954  00344E  143B               	andwf	___xxtofl@arg+3,w,c
  9955  003450  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  9956  003452  5032               	movf	??___xxtofl,w,c
  9957  003454  1033               	iorwf	??___xxtofl+1,w,c
  9958  003456  1034               	iorwf	??___xxtofl+2,w,c
  9959  003458  1035               	iorwf	??___xxtofl+3,w,c
  9960  00345A  B4D8               	btfsc	status,2,c
  9961  00345C  D007               	goto	l957
  9962  00345E  D7E1               	goto	l955
  9963  003460  0637               	decf	___xxtofl@exp,f,c
  9964  003462  90D8               	bcf	status,0,c
  9965  003464  3638               	rlcf	___xxtofl@arg,f,c
  9966  003466  3639               	rlcf	___xxtofl@arg+1,f,c
  9967  003468  363A               	rlcf	___xxtofl@arg+2,f,c
  9968  00346A  363B               	rlcf	___xxtofl@arg+3,f,c
  9969  00346C                     l957:
  9970  00346C  BE3A               	btfsc	___xxtofl@arg+2,7,c
  9971  00346E  D003               	goto	u6000
  9972  003470  0E02               	movlw	2
  9973  003472  6037               	cpfslt	___xxtofl@exp,c
  9974  003474  D7F5               	goto	l958
  9975  003476                     u6000:
  9976  003476  B037               	btfsc	___xxtofl@exp,0,c
  9977  003478  D008               	goto	l962
  9978  00347A  0EFF               	movlw	255
  9979  00347C  1638               	andwf	___xxtofl@arg,f,c
  9980  00347E  0EFF               	movlw	255
  9981  003480  1639               	andwf	___xxtofl@arg+1,f,c
  9982  003482  0E7F               	movlw	127
  9983  003484  163A               	andwf	___xxtofl@arg+2,f,c
  9984  003486  0EFF               	movlw	255
  9985  003488  163B               	andwf	___xxtofl@arg+3,f,c
  9986  00348A                     l962:
  9987  00348A  90D8               	bcf	status,0,c
  9988  00348C  3237               	rrcf	___xxtofl@exp,f,c
  9989  00348E  C037  F032         	movff	___xxtofl@exp,??___xxtofl
  9990  003492  6A33               	clrf	(??___xxtofl+1)& (0+255),c
  9991  003494  6A34               	clrf	(??___xxtofl+2)& (0+255),c
  9992  003496  6A35               	clrf	(??___xxtofl+3)& (0+255),c
  9993  003498  C032  F035         	movff	??___xxtofl,??___xxtofl+3
  9994  00349C  6A34               	clrf	??___xxtofl+2,c
  9995  00349E  6A33               	clrf	??___xxtofl+1,c
  9996  0034A0  6A32               	clrf	??___xxtofl,c
  9997  0034A2  5032               	movf	??___xxtofl,w,c
  9998  0034A4  1238               	iorwf	___xxtofl@arg,f,c
  9999  0034A6  5033               	movf	??___xxtofl+1,w,c
 10000  0034A8  1239               	iorwf	___xxtofl@arg+1,f,c
 10001  0034AA  5034               	movf	??___xxtofl+2,w,c
 10002  0034AC  123A               	iorwf	___xxtofl@arg+2,f,c
 10003  0034AE  5035               	movf	??___xxtofl+3,w,c
 10004  0034B0  123B               	iorwf	___xxtofl@arg+3,f,c
 10005  0034B2  5036               	movf	___xxtofl@sign,w,c
 10006  0034B4  A4D8               	btfss	status,2,c
 10007  0034B6  AE31               	btfss	___xxtofl@val+3,7,c
 10008  0034B8  D001               	goto	l963
 10009  0034BA  8E3B               	bsf	___xxtofl@arg+3,7,c
 10010  0034BC                     l963:
 10011  0034BC  C038  F02E         	movff	___xxtofl@arg,?___xxtofl
 10012  0034C0  C039  F02F         	movff	___xxtofl@arg+1,?___xxtofl+1
 10013  0034C4  C03A  F030         	movff	___xxtofl@arg+2,?___xxtofl+2
 10014  0034C8  C03B  F031         	movff	___xxtofl@arg+3,?___xxtofl+3
 10015  0034CC  0012               	return	
 10016  0034CE                     __end_of___xxtofl:
 10017                           	opt stack 0
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           intcon2	equ	0xFF1
 10026                           indf0	equ	0xFEF
 10027                           postinc0	equ	0xFEE
 10028                           fsr0h	equ	0xFEA
 10029                           fsr0l	equ	0xFE9
 10030                           wreg	equ	0xFE8
 10031                           indf2	equ	0xFDF
 10032                           postinc2	equ	0xFDE
 10033                           fsr2h	equ	0xFDA
 10034                           fsr2l	equ	0xFD9
 10035                           status	equ	0xFD8
 10036                           
 10037 ;; *************** function ___flmul *****************
 10038 ;; Defined at:
 10039 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/sprcmul.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;  b               4   59[COMRAM] unsigned char 
 10042 ;;  a               4   63[COMRAM] unsigned char 
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;  prod            4   11[BANK0 ] struct .
 10045 ;;  grs             4    6[BANK0 ] unsigned long 
 10046 ;;  temp            2   15[BANK0 ] struct .
 10047 ;;  bexp            1   10[BANK0 ] unsigned char 
 10048 ;;  aexp            1    5[BANK0 ] unsigned char 
 10049 ;;  sign            1    4[BANK0 ] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  4   59[COMRAM] unsigned char 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0, prodl, prodh
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10059 ;;      Params:         8       0       0       0       0       0       0
 10060 ;;      Locals:         0      13       0       0       0       0       0
 10061 ;;      Temps:          0       4       0       0       0       0       0
 10062 ;;      Totals:         8      17       0       0       0       0       0
 10063 ;;Total ram usage:       25 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    2
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_calcula
 10070 ;;		_calibra
 10071 ;;		_identificarColor
 10072 ;;		_fround
 10073 ;;		_scale
 10074 ;;		_sprintf
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           	psect	text33
 10079  0027A6                     __ptext33:
 10080                           	opt stack 0
 10081  0027A6                     ___flmul:
 10082                           	opt stack 26
 10083                           
 10084                           ;incstack = 0
 10085  0027A6  503F               	movf	___flmul@b+3,w,c
 10086  0027A8  0B80               	andlw	128
 10087  0027AA  0100               	movlb	0	; () banked
 10088  0027AC  6F84               	movwf	___flmul@sign& (0+255),b
 10089  0027AE  503F               	movf	___flmul@b+3,w,c
 10090  0027B0  243F               	addwf	___flmul@b+3,w,c
 10091  0027B2  6F8A               	movwf	___flmul@bexp& (0+255),b
 10092                           
 10093                           ; BSR set to: 0
 10094  0027B4  BE3E               	btfsc	___flmul@b+2,7,c
 10095                           
 10096                           ; BSR set to: 0
 10097  0027B6  818A               	bsf	___flmul@bexp& (0+255),0,b
 10098                           
 10099                           ; BSR set to: 0
 10100                           
 10101                           ; BSR set to: 0
 10102  0027B8  518A               	movf	___flmul@bexp& (0+255),w,b
 10103  0027BA  B4D8               	btfsc	status,2,c
 10104  0027BC  D00D               	goto	l919
 10105                           
 10106                           ; BSR set to: 0
 10107  0027BE  298A               	incf	___flmul@bexp& (0+255),w,b
 10108  0027C0  A4D8               	btfss	status,2,c
 10109  0027C2  D008               	goto	l920
 10110                           
 10111                           ; BSR set to: 0
 10112  0027C4  0E00               	movlw	0
 10113  0027C6  6E3C               	movwf	___flmul@b,c
 10114  0027C8  0E00               	movlw	0
 10115  0027CA  6E3D               	movwf	___flmul@b+1,c
 10116  0027CC  0E00               	movlw	0
 10117  0027CE  6E3E               	movwf	___flmul@b+2,c
 10118  0027D0  0E00               	movlw	0
 10119  0027D2  6E3F               	movwf	___flmul@b+3,c
 10120  0027D4                     l920:
 10121                           
 10122                           ; BSR set to: 0
 10123                           
 10124                           ; BSR set to: 0
 10125  0027D4  8E3E               	bsf	___flmul@b+2,7,c
 10126  0027D6  D008               	goto	l921
 10127  0027D8                     l919:
 10128                           
 10129                           ; BSR set to: 0
 10130                           
 10131                           ; BSR set to: 0
 10132  0027D8  0E00               	movlw	0
 10133  0027DA  6E3C               	movwf	___flmul@b,c
 10134  0027DC  0E00               	movlw	0
 10135  0027DE  6E3D               	movwf	___flmul@b+1,c
 10136  0027E0  0E00               	movlw	0
 10137  0027E2  6E3E               	movwf	___flmul@b+2,c
 10138  0027E4  0E00               	movlw	0
 10139  0027E6  6E3F               	movwf	___flmul@b+3,c
 10140  0027E8                     l921:
 10141                           
 10142                           ; BSR set to: 0
 10143                           
 10144                           ; BSR set to: 0
 10145  0027E8  5043               	movf	___flmul@a+3,w,c
 10146  0027EA  0B80               	andlw	128
 10147  0027EC  1B84               	xorwf	___flmul@sign& (0+255),f,b
 10148                           
 10149                           ; BSR set to: 0
 10150  0027EE  5043               	movf	___flmul@a+3,w,c
 10151  0027F0  2443               	addwf	___flmul@a+3,w,c
 10152  0027F2  6F85               	movwf	___flmul@aexp& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155  0027F4  BE42               	btfsc	___flmul@a+2,7,c
 10156                           
 10157                           ; BSR set to: 0
 10158  0027F6  8185               	bsf	___flmul@aexp& (0+255),0,b
 10159                           
 10160                           ; BSR set to: 0
 10161                           
 10162                           ; BSR set to: 0
 10163  0027F8  5185               	movf	___flmul@aexp& (0+255),w,b
 10164  0027FA  B4D8               	btfsc	status,2,c
 10165  0027FC  D00D               	goto	l923
 10166                           
 10167                           ; BSR set to: 0
 10168  0027FE  2985               	incf	___flmul@aexp& (0+255),w,b
 10169  002800  A4D8               	btfss	status,2,c
 10170  002802  D008               	goto	l924
 10171                           
 10172                           ; BSR set to: 0
 10173  002804  0E00               	movlw	0
 10174  002806  6E40               	movwf	___flmul@a,c
 10175  002808  0E00               	movlw	0
 10176  00280A  6E41               	movwf	___flmul@a+1,c
 10177  00280C  0E00               	movlw	0
 10178  00280E  6E42               	movwf	___flmul@a+2,c
 10179  002810  0E00               	movlw	0
 10180  002812  6E43               	movwf	___flmul@a+3,c
 10181  002814                     l924:
 10182                           
 10183                           ; BSR set to: 0
 10184                           
 10185                           ; BSR set to: 0
 10186  002814  8E42               	bsf	___flmul@a+2,7,c
 10187  002816  D008               	goto	l925
 10188  002818                     l923:
 10189                           
 10190                           ; BSR set to: 0
 10191                           
 10192                           ; BSR set to: 0
 10193  002818  0E00               	movlw	0
 10194  00281A  6E40               	movwf	___flmul@a,c
 10195  00281C  0E00               	movlw	0
 10196  00281E  6E41               	movwf	___flmul@a+1,c
 10197  002820  0E00               	movlw	0
 10198  002822  6E42               	movwf	___flmul@a+2,c
 10199  002824  0E00               	movlw	0
 10200  002826  6E43               	movwf	___flmul@a+3,c
 10201  002828                     l925:
 10202                           
 10203                           ; BSR set to: 0
 10204  002828  5185               	movf	___flmul@aexp& (0+255),w,b
 10205  00282A  B4D8               	btfsc	status,2,c
 10206  00282C  D003               	goto	u5030
 10207                           
 10208                           ; BSR set to: 0
 10209  00282E  518A               	movf	___flmul@bexp& (0+255),w,b
 10210  002830  A4D8               	btfss	status,2,c
 10211  002832  D009               	goto	l926
 10212  002834                     u5030:
 10213                           
 10214                           ; BSR set to: 0
 10215                           
 10216                           ; BSR set to: 0
 10217  002834  0E00               	movlw	0
 10218  002836  6E3C               	movwf	?___flmul,c
 10219  002838  0E00               	movlw	0
 10220  00283A  6E3D               	movwf	?___flmul+1,c
 10221  00283C  0E00               	movlw	0
 10222  00283E  6E3E               	movwf	?___flmul+2,c
 10223  002840  0E00               	movlw	0
 10224  002842  6E3F               	movwf	?___flmul+3,c
 10225                           
 10226                           ; BSR set to: 0
 10227  002844  0012               	return	
 10228  002846                     l926:
 10229                           
 10230                           ; BSR set to: 0
 10231                           
 10232                           ; BSR set to: 0
 10233  002846  5042               	movf	___flmul@a+2,w,c
 10234  002848  023C               	mulwf	___flmul@b,c
 10235  00284A  CFF3 F08F          	movff	prodl,___flmul@temp
 10236  00284E  CFF4 F090          	movff	prodh,___flmul@temp+1
 10237                           
 10238                           ; BSR set to: 0
 10239  002852  518F               	movf	___flmul@temp& (0+255),w,b
 10240  002854  6F86               	movwf	___flmul@grs& (0+255),b
 10241  002856  6B87               	clrf	(___flmul@grs+1)& (0+255),b
 10242  002858  6B88               	clrf	(___flmul@grs+2)& (0+255),b
 10243  00285A  6B89               	clrf	(___flmul@grs+3)& (0+255),b
 10244                           
 10245                           ; BSR set to: 0
 10246  00285C  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10247  00285E  6F8B               	movwf	___flmul@prod& (0+255),b
 10248  002860  6B8C               	clrf	(___flmul@prod+1)& (0+255),b
 10249  002862  6B8D               	clrf	(___flmul@prod+2)& (0+255),b
 10250  002864  6B8E               	clrf	(___flmul@prod+3)& (0+255),b
 10251  002866  5041               	movf	___flmul@a+1,w,c
 10252  002868  023D               	mulwf	___flmul@b+1,c
 10253  00286A  CFF3 F08F          	movff	prodl,___flmul@temp
 10254  00286E  CFF4 F090          	movff	prodh,___flmul@temp+1
 10255                           
 10256                           ; BSR set to: 0
 10257  002872  518F               	movf	___flmul@temp& (0+255),w,b
 10258  002874  2786               	addwf	___flmul@grs& (0+255),f,b
 10259  002876  0E00               	movlw	0
 10260  002878  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10261  00287A  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10262  00287C  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10263                           
 10264                           ; BSR set to: 0
 10265  00287E  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10266  002880  278B               	addwf	___flmul@prod& (0+255),f,b
 10267  002882  0E00               	movlw	0
 10268  002884  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10269  002886  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10270  002888  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10271  00288A  5040               	movf	___flmul@a,w,c
 10272  00288C  023E               	mulwf	___flmul@b+2,c
 10273  00288E  CFF3 F08F          	movff	prodl,___flmul@temp
 10274  002892  CFF4 F090          	movff	prodh,___flmul@temp+1
 10275                           
 10276                           ; BSR set to: 0
 10277  002896  518F               	movf	___flmul@temp& (0+255),w,b
 10278  002898  2786               	addwf	___flmul@grs& (0+255),f,b
 10279  00289A  0E00               	movlw	0
 10280  00289C  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10281  00289E  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10282  0028A0  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10283                           
 10284                           ; BSR set to: 0
 10285  0028A2  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10286  0028A4  278B               	addwf	___flmul@prod& (0+255),f,b
 10287  0028A6  0E00               	movlw	0
 10288  0028A8  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10289  0028AA  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10290  0028AC  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10291                           
 10292                           ; BSR set to: 0
 10293  0028AE  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
 10294  0028B2  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
 10295  0028B6  C086  F087         	movff	___flmul@grs,___flmul@grs+1
 10296  0028BA  6B86               	clrf	___flmul@grs& (0+255),b
 10297                           
 10298                           ; BSR set to: 0
 10299  0028BC  5040               	movf	___flmul@a,w,c
 10300  0028BE  023D               	mulwf	___flmul@b+1,c
 10301  0028C0  CFF3 F08F          	movff	prodl,___flmul@temp
 10302  0028C4  CFF4 F090          	movff	prodh,___flmul@temp+1
 10303                           
 10304                           ; BSR set to: 0
 10305  0028C8  518F               	movf	___flmul@temp& (0+255),w,b
 10306  0028CA  2786               	addwf	___flmul@grs& (0+255),f,b
 10307  0028CC  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10308  0028CE  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10309  0028D0  0E00               	movlw	0
 10310  0028D2  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10311  0028D4  0E00               	movlw	0
 10312  0028D6  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10313                           
 10314                           ; BSR set to: 0
 10315  0028D8  5041               	movf	___flmul@a+1,w,c
 10316  0028DA  023C               	mulwf	___flmul@b,c
 10317  0028DC  CFF3 F08F          	movff	prodl,___flmul@temp
 10318  0028E0  CFF4 F090          	movff	prodh,___flmul@temp+1
 10319                           
 10320                           ; BSR set to: 0
 10321  0028E4  518F               	movf	___flmul@temp& (0+255),w,b
 10322  0028E6  2786               	addwf	___flmul@grs& (0+255),f,b
 10323  0028E8  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10324  0028EA  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10325  0028EC  0E00               	movlw	0
 10326  0028EE  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10327  0028F0  0E00               	movlw	0
 10328  0028F2  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10329                           
 10330                           ; BSR set to: 0
 10331  0028F4  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
 10332  0028F8  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
 10333  0028FC  C086  F087         	movff	___flmul@grs,___flmul@grs+1
 10334  002900  6B86               	clrf	___flmul@grs& (0+255),b
 10335  002902  5040               	movf	___flmul@a,w,c
 10336  002904  023C               	mulwf	___flmul@b,c
 10337  002906  CFF3 F08F          	movff	prodl,___flmul@temp
 10338  00290A  CFF4 F090          	movff	prodh,___flmul@temp+1
 10339                           
 10340                           ; BSR set to: 0
 10341  00290E  518F               	movf	___flmul@temp& (0+255),w,b
 10342  002910  2786               	addwf	___flmul@grs& (0+255),f,b
 10343  002912  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10344  002914  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10345  002916  0E00               	movlw	0
 10346  002918  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10347  00291A  0E00               	movlw	0
 10348  00291C  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10349                           
 10350                           ; BSR set to: 0
 10351  00291E  5042               	movf	___flmul@a+2,w,c
 10352  002920  023D               	mulwf	___flmul@b+1,c
 10353  002922  CFF3 F08F          	movff	prodl,___flmul@temp
 10354  002926  CFF4 F090          	movff	prodh,___flmul@temp+1
 10355  00292A  518F               	movf	___flmul@temp& (0+255),w,b
 10356  00292C  278B               	addwf	___flmul@prod& (0+255),f,b
 10357  00292E  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10358  002930  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10359  002932  0E00               	movlw	0
 10360  002934  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10361  002936  0E00               	movlw	0
 10362  002938  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10363                           
 10364                           ; BSR set to: 0
 10365  00293A  5041               	movf	___flmul@a+1,w,c
 10366  00293C  023E               	mulwf	___flmul@b+2,c
 10367  00293E  CFF3 F08F          	movff	prodl,___flmul@temp
 10368  002942  CFF4 F090          	movff	prodh,___flmul@temp+1
 10369                           
 10370                           ; BSR set to: 0
 10371  002946  518F               	movf	___flmul@temp& (0+255),w,b
 10372  002948  278B               	addwf	___flmul@prod& (0+255),f,b
 10373  00294A  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10374  00294C  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10375  00294E  0E00               	movlw	0
 10376  002950  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10377  002952  0E00               	movlw	0
 10378  002954  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10379  002956  5042               	movf	___flmul@a+2,w,c
 10380  002958  023E               	mulwf	___flmul@b+2,c
 10381  00295A  CFF3 F08F          	movff	prodl,___flmul@temp
 10382  00295E  CFF4 F090          	movff	prodh,___flmul@temp+1
 10383                           
 10384                           ; BSR set to: 0
 10385  002962  518F               	movf	___flmul@temp& (0+255),w,b
 10386  002964  6F80               	movwf	??___flmul& (0+255),b
 10387  002966  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10388  002968  6F81               	movwf	(??___flmul+1)& (0+255),b
 10389  00296A  6B82               	clrf	(??___flmul+2)& (0+255),b
 10390  00296C  6B83               	clrf	(??___flmul+3)& (0+255),b
 10391  00296E  C082  F083         	movff	??___flmul+2,??___flmul+3
 10392  002972  C081  F082         	movff	??___flmul+1,??___flmul+2
 10393  002976  C080  F081         	movff	??___flmul,??___flmul+1
 10394  00297A  6B80               	clrf	??___flmul& (0+255),b
 10395  00297C  5180               	movf	??___flmul& (0+255),w,b
 10396  00297E  278B               	addwf	___flmul@prod& (0+255),f,b
 10397  002980  5181               	movf	(??___flmul+1)& (0+255),w,b
 10398  002982  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10399  002984  5182               	movf	(??___flmul+2)& (0+255),w,b
 10400  002986  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10401  002988  5183               	movf	(??___flmul+3)& (0+255),w,b
 10402  00298A  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10403                           
 10404                           ; BSR set to: 0
 10405  00298C  C086  F080         	movff	___flmul@grs,??___flmul
 10406  002990  C087  F081         	movff	___flmul@grs+1,??___flmul+1
 10407  002994  C088  F082         	movff	___flmul@grs+2,??___flmul+2
 10408  002998  C089  F083         	movff	___flmul@grs+3,??___flmul+3
 10409  00299C  0E19               	movlw	25
 10410  00299E  D005               	goto	u5040
 10411  0029A0                     u5045:
 10412  0029A0  90D8               	bcf	status,0,c
 10413  0029A2  3383               	rrcf	(??___flmul+3)& (0+255),f,b
 10414  0029A4  3382               	rrcf	(??___flmul+2)& (0+255),f,b
 10415  0029A6  3381               	rrcf	(??___flmul+1)& (0+255),f,b
 10416  0029A8  3380               	rrcf	??___flmul& (0+255),f,b
 10417  0029AA                     u5040:
 10418  0029AA  2EE8               	decfsz	wreg,f,c
 10419  0029AC  D7F9               	goto	u5045
 10420  0029AE  5180               	movf	??___flmul& (0+255),w,b
 10421  0029B0  278B               	addwf	___flmul@prod& (0+255),f,b
 10422  0029B2  5181               	movf	(??___flmul+1)& (0+255),w,b
 10423  0029B4  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10424  0029B6  5182               	movf	(??___flmul+2)& (0+255),w,b
 10425  0029B8  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10426  0029BA  5183               	movf	(??___flmul+3)& (0+255),w,b
 10427  0029BC  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10428                           
 10429                           ; BSR set to: 0
 10430  0029BE  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
 10431  0029C2  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
 10432  0029C6  C086  F087         	movff	___flmul@grs,___flmul@grs+1
 10433  0029CA  6B86               	clrf	___flmul@grs& (0+255),b
 10434                           
 10435                           ; BSR set to: 0
 10436  0029CC  5185               	movf	___flmul@aexp& (0+255),w,b
 10437  0029CE  C08A  F080         	movff	___flmul@bexp,??___flmul
 10438  0029D2  6B81               	clrf	(??___flmul+1)& (0+255),b
 10439  0029D4  2780               	addwf	??___flmul& (0+255),f,b
 10440  0029D6  0E00               	movlw	0
 10441  0029D8  2381               	addwfc	(??___flmul+1)& (0+255),f,b
 10442  0029DA  0E82               	movlw	130
 10443  0029DC  2580               	addwf	??___flmul& (0+255),w,b
 10444  0029DE  6F8F               	movwf	___flmul@temp& (0+255),b
 10445  0029E0  0EFF               	movlw	255
 10446  0029E2  2181               	addwfc	(??___flmul+1)& (0+255),w,b
 10447  0029E4  6F90               	movwf	(___flmul@temp+1)& (0+255),b
 10448  0029E6  D00F               	goto	l930
 10449  0029E8                     
 10450                           ; BSR set to: 0
 10451                           
 10452                           ; BSR set to: 0
 10453  0029E8  90D8               	bcf	status,0,c
 10454  0029EA  378B               	rlcf	___flmul@prod& (0+255),f,b
 10455  0029EC  378C               	rlcf	(___flmul@prod+1)& (0+255),f,b
 10456  0029EE  378D               	rlcf	(___flmul@prod+2)& (0+255),f,b
 10457  0029F0  378E               	rlcf	(___flmul@prod+3)& (0+255),f,b
 10458                           
 10459                           ; BSR set to: 0
 10460  0029F2  BF89               	btfsc	(___flmul@grs+3)& (0+255),7,b
 10461                           
 10462                           ; BSR set to: 0
 10463  0029F4  818B               	bsf	___flmul@prod& (0+255),0,b
 10464                           
 10465                           ; BSR set to: 0
 10466  0029F6  90D8               	bcf	status,0,c
 10467  0029F8  3786               	rlcf	___flmul@grs& (0+255),f,b
 10468  0029FA  3787               	rlcf	(___flmul@grs+1)& (0+255),f,b
 10469  0029FC  3788               	rlcf	(___flmul@grs+2)& (0+255),f,b
 10470  0029FE  3789               	rlcf	(___flmul@grs+3)& (0+255),f,b
 10471  002A00  078F               	decf	___flmul@temp& (0+255),f,b
 10472  002A02  A0D8               	btfss	status,0,c
 10473  002A04  0790               	decf	(___flmul@temp+1)& (0+255),f,b
 10474  002A06                     l930:
 10475                           
 10476                           ; BSR set to: 0
 10477                           
 10478                           ; BSR set to: 0
 10479  002A06  AF8D               	btfss	(___flmul@prod+2)& (0+255),7,b
 10480  002A08  D7EF               	goto	l931
 10481                           
 10482                           ; BSR set to: 0
 10483                           
 10484                           ; BSR set to: 0
 10485  002A0A  0E00               	movlw	0
 10486  002A0C  6F85               	movwf	___flmul@aexp& (0+255),b
 10487                           
 10488                           ; BSR set to: 0
 10489  002A0E  AF89               	btfss	(___flmul@grs+3)& (0+255),7,b
 10490  002A10  D016               	goto	l937
 10491                           
 10492                           ; BSR set to: 0
 10493  002A12  0EFF               	movlw	255
 10494  002A14  1586               	andwf	___flmul@grs& (0+255),w,b
 10495  002A16  6F80               	movwf	??___flmul& (0+255),b
 10496  002A18  0EFF               	movlw	255
 10497  002A1A  1587               	andwf	(___flmul@grs+1)& (0+255),w,b
 10498  002A1C  6F81               	movwf	(??___flmul+1)& (0+255),b
 10499  002A1E  0EFF               	movlw	255
 10500  002A20  1588               	andwf	(___flmul@grs+2)& (0+255),w,b
 10501  002A22  6F82               	movwf	(??___flmul+2)& (0+255),b
 10502  002A24  0E7F               	movlw	127
 10503  002A26  1589               	andwf	(___flmul@grs+3)& (0+255),w,b
 10504  002A28  6F83               	movwf	(??___flmul+3)& (0+255),b
 10505  002A2A  5180               	movf	??___flmul& (0+255),w,b
 10506  002A2C  1181               	iorwf	(??___flmul+1)& (0+255),w,b
 10507  002A2E  1182               	iorwf	(??___flmul+2)& (0+255),w,b
 10508  002A30  1183               	iorwf	(??___flmul+3)& (0+255),w,b
 10509  002A32  A4D8               	btfss	status,2,c
 10510  002A34  D002               	goto	u5090
 10511                           
 10512                           ; BSR set to: 0
 10513                           
 10514                           ; BSR set to: 0
 10515  002A36  A18B               	btfss	___flmul@prod& (0+255),0,b
 10516  002A38  D002               	goto	l937
 10517  002A3A                     u5090:
 10518                           
 10519                           ; BSR set to: 0
 10520  002A3A  0E01               	movlw	1
 10521  002A3C  6F85               	movwf	___flmul@aexp& (0+255),b
 10522  002A3E                     l937:
 10523                           
 10524                           ; BSR set to: 0
 10525                           
 10526                           ; BSR set to: 0
 10527                           
 10528                           ; BSR set to: 0
 10529  002A3E  5185               	movf	___flmul@aexp& (0+255),w,b
 10530  002A40  B4D8               	btfsc	status,2,c
 10531  002A42  D01F               	goto	l939
 10532                           
 10533                           ; BSR set to: 0
 10534  002A44  0E01               	movlw	1
 10535  002A46  278B               	addwf	___flmul@prod& (0+255),f,b
 10536  002A48  0E00               	movlw	0
 10537  002A4A  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10538  002A4C  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10539  002A4E  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10540                           
 10541                           ; BSR set to: 0
 10542  002A50  A18E               	btfss	(___flmul@prod+3)& (0+255),0,b
 10543  002A52  D017               	goto	l939
 10544                           
 10545                           ; BSR set to: 0
 10546  002A54  C08B  F080         	movff	___flmul@prod,??___flmul
 10547  002A58  C08C  F081         	movff	___flmul@prod+1,??___flmul+1
 10548  002A5C  C08D  F082         	movff	___flmul@prod+2,??___flmul+2
 10549  002A60  C08E  F083         	movff	___flmul@prod+3,??___flmul+3
 10550  002A64  3583               	rlcf	(??___flmul+3)& (0+255),w,b
 10551  002A66  3383               	rrcf	(??___flmul+3)& (0+255),f,b
 10552  002A68  3382               	rrcf	(??___flmul+2)& (0+255),f,b
 10553  002A6A  3381               	rrcf	(??___flmul+1)& (0+255),f,b
 10554  002A6C  3380               	rrcf	??___flmul& (0+255),f,b
 10555  002A6E  C080  F08B         	movff	??___flmul,___flmul@prod
 10556  002A72  C081  F08C         	movff	??___flmul+1,___flmul@prod+1
 10557  002A76  C082  F08D         	movff	??___flmul+2,___flmul@prod+2
 10558  002A7A  C083  F08E         	movff	??___flmul+3,___flmul@prod+3
 10559                           
 10560                           ; BSR set to: 0
 10561  002A7E  4B8F               	infsnz	___flmul@temp& (0+255),f,b
 10562  002A80  2B90               	incf	(___flmul@temp+1)& (0+255),f,b
 10563  002A82                     l939:
 10564                           
 10565                           ; BSR set to: 0
 10566                           
 10567                           ; BSR set to: 0
 10568                           
 10569                           ; BSR set to: 0
 10570  002A82  BF90               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10571  002A84  D00D               	goto	l940
 10572  002A86  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10573  002A88  E103               	bnz	u5120
 10574  002A8A  298F               	incf	___flmul@temp& (0+255),w,b
 10575  002A8C  A0D8               	btfss	status,0,c
 10576  002A8E  D008               	goto	l940
 10577  002A90                     u5120:
 10578                           
 10579                           ; BSR set to: 0
 10580  002A90  0E00               	movlw	0
 10581  002A92  6F8B               	movwf	___flmul@prod& (0+255),b
 10582  002A94  0E00               	movlw	0
 10583  002A96  6F8C               	movwf	(___flmul@prod+1)& (0+255),b
 10584  002A98  0E80               	movlw	128
 10585  002A9A  6F8D               	movwf	(___flmul@prod+2)& (0+255),b
 10586  002A9C  0E7F               	movlw	127
 10587  002A9E  D020               	goto	L11
 10588  002AA0                     l940:
 10589                           
 10590                           ; BSR set to: 0
 10591                           
 10592                           ; BSR set to: 0
 10593  002AA0  BF90               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10594  002AA2  D005               	goto	u5130
 10595  002AA4  5190               	movf	(___flmul@temp+1)& (0+255),w,b
 10596  002AA6  E10E               	bnz	l942
 10597  002AA8  058F               	decf	___flmul@temp& (0+255),w,b
 10598  002AAA  B0D8               	btfsc	status,0,c
 10599  002AAC  D00B               	goto	l942
 10600  002AAE                     u5130:
 10601                           
 10602                           ; BSR set to: 0
 10603  002AAE  0E00               	movlw	0
 10604  002AB0  6F8B               	movwf	___flmul@prod& (0+255),b
 10605  002AB2  0E00               	movlw	0
 10606  002AB4  6F8C               	movwf	(___flmul@prod+1)& (0+255),b
 10607  002AB6  0E00               	movlw	0
 10608  002AB8  6F8D               	movwf	(___flmul@prod+2)& (0+255),b
 10609  002ABA  0E00               	movlw	0
 10610  002ABC  6F8E               	movwf	(___flmul@prod+3)& (0+255),b
 10611  002ABE  0E00               	movlw	0
 10612  002AC0  6F84               	movwf	___flmul@sign& (0+255),b
 10613  002AC2  D00F               	goto	l943
 10614  002AC4                     l942:
 10615                           
 10616                           ; BSR set to: 0
 10617  002AC4  C08F  F08A         	movff	___flmul@temp,___flmul@bexp
 10618                           
 10619                           ; BSR set to: 0
 10620  002AC8  0EFF               	movlw	255
 10621  002ACA  178B               	andwf	___flmul@prod& (0+255),f,b
 10622  002ACC  0EFF               	movlw	255
 10623  002ACE  178C               	andwf	(___flmul@prod+1)& (0+255),f,b
 10624  002AD0  0E7F               	movlw	127
 10625  002AD2  178D               	andwf	(___flmul@prod+2)& (0+255),f,b
 10626  002AD4  0E00               	movlw	0
 10627  002AD6  178E               	andwf	(___flmul@prod+3)& (0+255),f,b
 10628                           
 10629                           ; BSR set to: 0
 10630  002AD8  B18A               	btfsc	___flmul@bexp& (0+255),0,b
 10631                           
 10632                           ; BSR set to: 0
 10633  002ADA  8F8D               	bsf	(___flmul@prod+2)& (0+255),7,b
 10634                           
 10635                           ; BSR set to: 0
 10636                           
 10637                           ; BSR set to: 0
 10638  002ADC  90D8               	bcf	status,0,c
 10639  002ADE  318A               	rrcf	___flmul@bexp& (0+255),w,b
 10640  002AE0                     L11:
 10641  002AE0  6F8E               	movwf	(___flmul@prod+3)& (0+255),b
 10642  002AE2                     l943:
 10643                           
 10644                           ; BSR set to: 0
 10645                           
 10646                           ; BSR set to: 0
 10647                           
 10648                           ; BSR set to: 0
 10649  002AE2  5184               	movf	___flmul@sign& (0+255),w,b
 10650  002AE4  138E               	iorwf	(___flmul@prod+3)& (0+255),f,b
 10651                           
 10652                           ; BSR set to: 0
 10653  002AE6  C08B  F03C         	movff	___flmul@prod,?___flmul
 10654  002AEA  C08C  F03D         	movff	___flmul@prod+1,?___flmul+1
 10655  002AEE  C08D  F03E         	movff	___flmul@prod+2,?___flmul+2
 10656  002AF2  C08E  F03F         	movff	___flmul@prod+3,?___flmul+3
 10657  002AF6  0012               	return	
 10658  002AF8                     __end_of___flmul:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           intcon2	equ	0xFF1
 10668                           indf0	equ	0xFEF
 10669                           postinc0	equ	0xFEE
 10670                           fsr0h	equ	0xFEA
 10671                           fsr0l	equ	0xFE9
 10672                           wreg	equ	0xFE8
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function ___fldiv *****************
 10680 ;; Defined at:
 10681 ;;		line 11 in file "/opt/microchip/xc8/v1.45/sources/common/sprcdiv.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  b               4   17[BANK0 ] unsigned char 
 10684 ;;  a               4   21[BANK0 ] unsigned char 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  grs             4   36[BANK0 ] unsigned long 
 10687 ;;  rem             4   30[BANK0 ] unsigned long 
 10688 ;;  new_exp         2   34[BANK0 ] int 
 10689 ;;  aexp            1   41[BANK0 ] unsigned char 
 10690 ;;  bexp            1   40[BANK0 ] unsigned char 
 10691 ;;  sign            1   29[BANK0 ] unsigned char 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  4   17[BANK0 ] unsigned char 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10701 ;;      Params:         0       8       0       0       0       0       0
 10702 ;;      Locals:         0      13       0       0       0       0       0
 10703 ;;      Temps:          0       4       0       0       0       0       0
 10704 ;;      Totals:         0      25       0       0       0       0       0
 10705 ;;Total ram usage:       25 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    2
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_main
 10712 ;;		_calcula
 10713 ;;		_calibra
 10714 ;;		_identificarColor
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text34
 10719  002E36                     __ptext34:
 10720                           	opt stack 0
 10721  002E36                     ___fldiv:
 10722                           	opt stack 27
 10723                           
 10724                           ; BSR set to: 0
 10725                           ;incstack = 0
 10726  002E36  0100               	movlb	0	; () banked
 10727  002E38  5194               	movf	(___fldiv@b+3)& (0+255),w,b
 10728  002E3A  0B80               	andlw	128
 10729  002E3C  6F9D               	movwf	___fldiv@sign& (0+255),b
 10730  002E3E  5194               	movf	(___fldiv@b+3)& (0+255),w,b
 10731  002E40  2594               	addwf	(___fldiv@b+3)& (0+255),w,b
 10732  002E42  6FA8               	movwf	___fldiv@bexp& (0+255),b
 10733                           
 10734                           ; BSR set to: 0
 10735  002E44  BF93               	btfsc	(___fldiv@b+2)& (0+255),7,b
 10736                           
 10737                           ; BSR set to: 0
 10738  002E46  81A8               	bsf	___fldiv@bexp& (0+255),0,b
 10739                           
 10740                           ; BSR set to: 0
 10741                           
 10742                           ; BSR set to: 0
 10743  002E48  51A8               	movf	___fldiv@bexp& (0+255),w,b
 10744  002E4A  B4D8               	btfsc	status,2,c
 10745  002E4C  D00D               	goto	l885
 10746                           
 10747                           ; BSR set to: 0
 10748  002E4E  29A8               	incf	___fldiv@bexp& (0+255),w,b
 10749  002E50  A4D8               	btfss	status,2,c
 10750  002E52  D008               	goto	l886
 10751                           
 10752                           ; BSR set to: 0
 10753  002E54  0E00               	movlw	0
 10754  002E56  6F91               	movwf	___fldiv@b& (0+255),b
 10755  002E58  0E00               	movlw	0
 10756  002E5A  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 10757  002E5C  0E00               	movlw	0
 10758  002E5E  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 10759  002E60  0E00               	movlw	0
 10760  002E62  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 10761  002E64                     l886:
 10762                           
 10763                           ; BSR set to: 0
 10764                           
 10765                           ; BSR set to: 0
 10766  002E64  8F93               	bsf	(___fldiv@b+2)& (0+255),7,b
 10767  002E66  D006               	goto	L12
 10768  002E68                     l885:
 10769                           
 10770                           ; BSR set to: 0
 10771                           
 10772                           ; BSR set to: 0
 10773  002E68  0E00               	movlw	0
 10774  002E6A  6F91               	movwf	___fldiv@b& (0+255),b
 10775  002E6C  0E00               	movlw	0
 10776  002E6E  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 10777  002E70  0E00               	movlw	0
 10778  002E72  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 10779  002E74                     L12:
 10780  002E74  0E00               	movlw	0
 10781  002E76  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 10782                           
 10783                           ; BSR set to: 0
 10784                           
 10785                           ; BSR set to: 0
 10786  002E78  5198               	movf	(___fldiv@a+3)& (0+255),w,b
 10787  002E7A  0B80               	andlw	128
 10788  002E7C  1B9D               	xorwf	___fldiv@sign& (0+255),f,b
 10789                           
 10790                           ; BSR set to: 0
 10791  002E7E  5198               	movf	(___fldiv@a+3)& (0+255),w,b
 10792  002E80  2598               	addwf	(___fldiv@a+3)& (0+255),w,b
 10793  002E82  6FA9               	movwf	___fldiv@aexp& (0+255),b
 10794                           
 10795                           ; BSR set to: 0
 10796  002E84  BF97               	btfsc	(___fldiv@a+2)& (0+255),7,b
 10797                           
 10798                           ; BSR set to: 0
 10799  002E86  81A9               	bsf	___fldiv@aexp& (0+255),0,b
 10800                           
 10801                           ; BSR set to: 0
 10802                           
 10803                           ; BSR set to: 0
 10804  002E88  51A9               	movf	___fldiv@aexp& (0+255),w,b
 10805  002E8A  B4D8               	btfsc	status,2,c
 10806  002E8C  D00D               	goto	l889
 10807                           
 10808                           ; BSR set to: 0
 10809  002E8E  29A9               	incf	___fldiv@aexp& (0+255),w,b
 10810  002E90  A4D8               	btfss	status,2,c
 10811  002E92  D008               	goto	l890
 10812                           
 10813                           ; BSR set to: 0
 10814  002E94  0E00               	movlw	0
 10815  002E96  6F95               	movwf	___fldiv@a& (0+255),b
 10816  002E98  0E00               	movlw	0
 10817  002E9A  6F96               	movwf	(___fldiv@a+1)& (0+255),b
 10818  002E9C  0E00               	movlw	0
 10819  002E9E  6F97               	movwf	(___fldiv@a+2)& (0+255),b
 10820  002EA0  0E00               	movlw	0
 10821  002EA2  6F98               	movwf	(___fldiv@a+3)& (0+255),b
 10822  002EA4                     l890:
 10823                           
 10824                           ; BSR set to: 0
 10825                           
 10826                           ; BSR set to: 0
 10827  002EA4  8F97               	bsf	(___fldiv@a+2)& (0+255),7,b
 10828  002EA6  D006               	goto	L13
 10829  002EA8                     l889:
 10830                           
 10831                           ; BSR set to: 0
 10832                           
 10833                           ; BSR set to: 0
 10834  002EA8  0E00               	movlw	0
 10835  002EAA  6F95               	movwf	___fldiv@a& (0+255),b
 10836  002EAC  0E00               	movlw	0
 10837  002EAE  6F96               	movwf	(___fldiv@a+1)& (0+255),b
 10838  002EB0  0E00               	movlw	0
 10839  002EB2  6F97               	movwf	(___fldiv@a+2)& (0+255),b
 10840  002EB4                     L13:
 10841  002EB4  0E00               	movlw	0
 10842  002EB6  6F98               	movwf	(___fldiv@a+3)& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           
 10846                           ; BSR set to: 0
 10847  002EB8  5195               	movf	___fldiv@a& (0+255),w,b
 10848  002EBA  1196               	iorwf	(___fldiv@a+1)& (0+255),w,b
 10849  002EBC  1197               	iorwf	(___fldiv@a+2)& (0+255),w,b
 10850  002EBE  1198               	iorwf	(___fldiv@a+3)& (0+255),w,b
 10851  002EC0  A4D8               	btfss	status,2,c
 10852  002EC2  D015               	goto	l892
 10853                           
 10854                           ; BSR set to: 0
 10855  002EC4  0E00               	movlw	0
 10856  002EC6  6F91               	movwf	___fldiv@b& (0+255),b
 10857  002EC8  0E00               	movlw	0
 10858  002ECA  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 10859  002ECC  0E00               	movlw	0
 10860  002ECE  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 10861  002ED0  0E00               	movlw	0
 10862  002ED2  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 10863                           
 10864                           ; BSR set to: 0
 10865  002ED4  0E80               	movlw	128
 10866  002ED6  1393               	iorwf	(___fldiv@b+2)& (0+255),f,b
 10867  002ED8  0E7F               	movlw	127
 10868  002EDA  1394               	iorwf	(___fldiv@b+3)& (0+255),f,b
 10869                           
 10870                           ; BSR set to: 0
 10871  002EDC  C091  F091         	movff	___fldiv@b,?___fldiv
 10872  002EE0  C092  F092         	movff	___fldiv@b+1,?___fldiv+1
 10873  002EE4  C093  F093         	movff	___fldiv@b+2,?___fldiv+2
 10874  002EE8  C094  F094         	movff	___fldiv@b+3,?___fldiv+3
 10875                           
 10876                           ; BSR set to: 0
 10877  002EEC  0012               	return	
 10878  002EEE                     l892:
 10879                           
 10880                           ; BSR set to: 0
 10881                           
 10882                           ; BSR set to: 0
 10883  002EEE  51A8               	movf	___fldiv@bexp& (0+255),w,b
 10884  002EF0  A4D8               	btfss	status,2,c
 10885  002EF2  D011               	goto	l894
 10886                           
 10887                           ; BSR set to: 0
 10888  002EF4  0E00               	movlw	0
 10889  002EF6  6F91               	movwf	___fldiv@b& (0+255),b
 10890  002EF8  0E00               	movlw	0
 10891  002EFA  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 10892  002EFC  0E00               	movlw	0
 10893  002EFE  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 10894  002F00  0E00               	movlw	0
 10895  002F02  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 10896                           
 10897                           ; BSR set to: 0
 10898  002F04  C091  F091         	movff	___fldiv@b,?___fldiv
 10899  002F08  C092  F092         	movff	___fldiv@b+1,?___fldiv+1
 10900  002F0C  C093  F093         	movff	___fldiv@b+2,?___fldiv+2
 10901  002F10  C094  F094         	movff	___fldiv@b+3,?___fldiv+3
 10902                           
 10903                           ; BSR set to: 0
 10904  002F14  0012               	return	
 10905  002F16                     l894:
 10906                           
 10907                           ; BSR set to: 0
 10908                           
 10909                           ; BSR set to: 0
 10910  002F16  51A9               	movf	___fldiv@aexp& (0+255),w,b
 10911  002F18  6F99               	movwf	??___fldiv& (0+255),b
 10912  002F1A  6B9A               	clrf	(??___fldiv+1)& (0+255),b
 10913  002F1C  1F99               	comf	??___fldiv& (0+255),f,b
 10914  002F1E  1F9A               	comf	(??___fldiv+1)& (0+255),f,b
 10915  002F20  4B99               	infsnz	??___fldiv& (0+255),f,b
 10916  002F22  2B9A               	incf	(??___fldiv+1)& (0+255),f,b
 10917  002F24  51A8               	movf	___fldiv@bexp& (0+255),w,b
 10918  002F26  6F9B               	movwf	(??___fldiv+2)& (0+255),b
 10919  002F28  6B9C               	clrf	(??___fldiv+3)& (0+255),b
 10920  002F2A  5199               	movf	??___fldiv& (0+255),w,b
 10921  002F2C  279B               	addwf	(??___fldiv+2)& (0+255),f,b
 10922  002F2E  519A               	movf	(??___fldiv+1)& (0+255),w,b
 10923  002F30  239C               	addwfc	(??___fldiv+3)& (0+255),f,b
 10924  002F32  0E7F               	movlw	127
 10925  002F34  259B               	addwf	(??___fldiv+2)& (0+255),w,b
 10926  002F36  6FA2               	movwf	___fldiv@new_exp& (0+255),b
 10927  002F38  0E00               	movlw	0
 10928  002F3A  219C               	addwfc	(??___fldiv+3)& (0+255),w,b
 10929  002F3C  6FA3               	movwf	(___fldiv@new_exp+1)& (0+255),b
 10930                           
 10931                           ; BSR set to: 0
 10932  002F3E  C091  F09E         	movff	___fldiv@b,___fldiv@rem
 10933  002F42  C092  F09F         	movff	___fldiv@b+1,___fldiv@rem+1
 10934  002F46  C093  F0A0         	movff	___fldiv@b+2,___fldiv@rem+2
 10935  002F4A  C094  F0A1         	movff	___fldiv@b+3,___fldiv@rem+3
 10936                           
 10937                           ; BSR set to: 0
 10938  002F4E  0E00               	movlw	0
 10939  002F50  6F91               	movwf	___fldiv@b& (0+255),b
 10940  002F52  0E00               	movlw	0
 10941  002F54  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 10942  002F56  0E00               	movlw	0
 10943  002F58  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 10944  002F5A  0E00               	movlw	0
 10945  002F5C  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 10946                           
 10947                           ; BSR set to: 0
 10948  002F5E  0E00               	movlw	0
 10949  002F60  6FA4               	movwf	___fldiv@grs& (0+255),b
 10950  002F62  0E00               	movlw	0
 10951  002F64  6FA5               	movwf	(___fldiv@grs+1)& (0+255),b
 10952  002F66  0E00               	movlw	0
 10953  002F68  6FA6               	movwf	(___fldiv@grs+2)& (0+255),b
 10954  002F6A  0E00               	movlw	0
 10955  002F6C  6FA7               	movwf	(___fldiv@grs+3)& (0+255),b
 10956                           
 10957                           ; BSR set to: 0
 10958  002F6E  0E00               	movlw	0
 10959  002F70  6FA9               	movwf	___fldiv@aexp& (0+255),b
 10960  002F72  D028               	goto	l895
 10961  002F74                     
 10962                           ; BSR set to: 0
 10963                           
 10964                           ; BSR set to: 0
 10965  002F74  51A9               	movf	___fldiv@aexp& (0+255),w,b
 10966  002F76  B4D8               	btfsc	status,2,c
 10967  002F78  D011               	goto	l897
 10968                           
 10969                           ; BSR set to: 0
 10970  002F7A  90D8               	bcf	status,0,c
 10971  002F7C  379E               	rlcf	___fldiv@rem& (0+255),f,b
 10972  002F7E  379F               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 10973  002F80  37A0               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 10974  002F82  37A1               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 10975  002F84  90D8               	bcf	status,0,c
 10976  002F86  3791               	rlcf	___fldiv@b& (0+255),f,b
 10977  002F88  3792               	rlcf	(___fldiv@b+1)& (0+255),f,b
 10978  002F8A  3793               	rlcf	(___fldiv@b+2)& (0+255),f,b
 10979  002F8C  3794               	rlcf	(___fldiv@b+3)& (0+255),f,b
 10980                           
 10981                           ; BSR set to: 0
 10982  002F8E  BFA7               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 10983                           
 10984                           ; BSR set to: 0
 10985  002F90  8191               	bsf	___fldiv@b& (0+255),0,b
 10986                           
 10987                           ; BSR set to: 0
 10988  002F92  90D8               	bcf	status,0,c
 10989  002F94  37A4               	rlcf	___fldiv@grs& (0+255),f,b
 10990  002F96  37A5               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 10991  002F98  37A6               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 10992  002F9A  37A7               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 10993  002F9C                     l897:
 10994                           
 10995                           ; BSR set to: 0
 10996                           
 10997                           ; BSR set to: 0
 10998  002F9C  5195               	movf	___fldiv@a& (0+255),w,b
 10999  002F9E  5D9E               	subwf	___fldiv@rem& (0+255),w,b
 11000  002FA0  5196               	movf	(___fldiv@a+1)& (0+255),w,b
 11001  002FA2  599F               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 11002  002FA4  5197               	movf	(___fldiv@a+2)& (0+255),w,b
 11003  002FA6  59A0               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 11004  002FA8  5198               	movf	(___fldiv@a+3)& (0+255),w,b
 11005  002FAA  59A1               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 11006  002FAC  A0D8               	btfss	status,0,c
 11007  002FAE  D009               	goto	l899
 11008                           
 11009                           ; BSR set to: 0
 11010  002FB0  8DA7               	bsf	(___fldiv@grs+3)& (0+255),6,b
 11011                           
 11012                           ; BSR set to: 0
 11013  002FB2  5195               	movf	___fldiv@a& (0+255),w,b
 11014  002FB4  5F9E               	subwf	___fldiv@rem& (0+255),f,b
 11015  002FB6  5196               	movf	(___fldiv@a+1)& (0+255),w,b
 11016  002FB8  5B9F               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 11017  002FBA  5197               	movf	(___fldiv@a+2)& (0+255),w,b
 11018  002FBC  5BA0               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 11019  002FBE  5198               	movf	(___fldiv@a+3)& (0+255),w,b
 11020  002FC0  5BA1               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 11021  002FC2                     l899:
 11022                           
 11023                           ; BSR set to: 0
 11024                           
 11025                           ; BSR set to: 0
 11026  002FC2  2BA9               	incf	___fldiv@aexp& (0+255),f,b
 11027  002FC4                     l895:
 11028                           
 11029                           ; BSR set to: 0
 11030  002FC4  0E19               	movlw	25
 11031  002FC6  65A9               	cpfsgt	___fldiv@aexp& (0+255),b
 11032  002FC8  D7D5               	goto	l896
 11033                           
 11034                           ; BSR set to: 0
 11035                           
 11036                           ; BSR set to: 0
 11037  002FCA  519E               	movf	___fldiv@rem& (0+255),w,b
 11038  002FCC  119F               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 11039  002FCE  11A0               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 11040  002FD0  11A1               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 11041  002FD2  B4D8               	btfsc	status,2,c
 11042  002FD4  D011               	goto	l902
 11043                           
 11044                           ; BSR set to: 0
 11045  002FD6  81A4               	bsf	___fldiv@grs& (0+255),0,b
 11046                           
 11047                           ; BSR set to: 0
 11048  002FD8  D00F               	goto	l902
 11049  002FDA                     
 11050                           ; BSR set to: 0
 11051                           
 11052                           ; BSR set to: 0
 11053  002FDA  90D8               	bcf	status,0,c
 11054  002FDC  3791               	rlcf	___fldiv@b& (0+255),f,b
 11055  002FDE  3792               	rlcf	(___fldiv@b+1)& (0+255),f,b
 11056  002FE0  3793               	rlcf	(___fldiv@b+2)& (0+255),f,b
 11057  002FE2  3794               	rlcf	(___fldiv@b+3)& (0+255),f,b
 11058                           
 11059                           ; BSR set to: 0
 11060  002FE4  BFA7               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 11061                           
 11062                           ; BSR set to: 0
 11063  002FE6  8191               	bsf	___fldiv@b& (0+255),0,b
 11064                           
 11065                           ; BSR set to: 0
 11066  002FE8  90D8               	bcf	status,0,c
 11067  002FEA  37A4               	rlcf	___fldiv@grs& (0+255),f,b
 11068  002FEC  37A5               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 11069  002FEE  37A6               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 11070  002FF0  37A7               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 11071  002FF2  07A2               	decf	___fldiv@new_exp& (0+255),f,b
 11072  002FF4  A0D8               	btfss	status,0,c
 11073  002FF6  07A3               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 11074  002FF8                     l902:
 11075                           
 11076                           ; BSR set to: 0
 11077                           
 11078                           ; BSR set to: 0
 11079  002FF8  AF93               	btfss	(___fldiv@b+2)& (0+255),7,b
 11080  002FFA  D7EF               	goto	l903
 11081                           
 11082                           ; BSR set to: 0
 11083                           
 11084                           ; BSR set to: 0
 11085  002FFC  0E00               	movlw	0
 11086  002FFE  6FA9               	movwf	___fldiv@aexp& (0+255),b
 11087                           
 11088                           ; BSR set to: 0
 11089  003000  AFA7               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11090  003002  D016               	goto	l909
 11091                           
 11092                           ; BSR set to: 0
 11093  003004  0EFF               	movlw	255
 11094  003006  15A4               	andwf	___fldiv@grs& (0+255),w,b
 11095  003008  6F99               	movwf	??___fldiv& (0+255),b
 11096  00300A  0EFF               	movlw	255
 11097  00300C  15A5               	andwf	(___fldiv@grs+1)& (0+255),w,b
 11098  00300E  6F9A               	movwf	(??___fldiv+1)& (0+255),b
 11099  003010  0EFF               	movlw	255
 11100  003012  15A6               	andwf	(___fldiv@grs+2)& (0+255),w,b
 11101  003014  6F9B               	movwf	(??___fldiv+2)& (0+255),b
 11102  003016  0E7F               	movlw	127
 11103  003018  15A7               	andwf	(___fldiv@grs+3)& (0+255),w,b
 11104  00301A  6F9C               	movwf	(??___fldiv+3)& (0+255),b
 11105  00301C  5199               	movf	??___fldiv& (0+255),w,b
 11106  00301E  119A               	iorwf	(??___fldiv+1)& (0+255),w,b
 11107  003020  119B               	iorwf	(??___fldiv+2)& (0+255),w,b
 11108  003022  119C               	iorwf	(??___fldiv+3)& (0+255),w,b
 11109  003024  A4D8               	btfss	status,2,c
 11110  003026  D002               	goto	u5690
 11111                           
 11112                           ; BSR set to: 0
 11113                           
 11114                           ; BSR set to: 0
 11115  003028  A191               	btfss	___fldiv@b& (0+255),0,b
 11116  00302A  D002               	goto	l909
 11117  00302C                     u5690:
 11118                           
 11119                           ; BSR set to: 0
 11120  00302C  0E01               	movlw	1
 11121  00302E  6FA9               	movwf	___fldiv@aexp& (0+255),b
 11122  003030                     l909:
 11123                           
 11124                           ; BSR set to: 0
 11125                           
 11126                           ; BSR set to: 0
 11127                           
 11128                           ; BSR set to: 0
 11129  003030  51A9               	movf	___fldiv@aexp& (0+255),w,b
 11130  003032  B4D8               	btfsc	status,2,c
 11131  003034  D01F               	goto	l911
 11132                           
 11133                           ; BSR set to: 0
 11134  003036  0E01               	movlw	1
 11135  003038  2791               	addwf	___fldiv@b& (0+255),f,b
 11136  00303A  0E00               	movlw	0
 11137  00303C  2392               	addwfc	(___fldiv@b+1)& (0+255),f,b
 11138  00303E  2393               	addwfc	(___fldiv@b+2)& (0+255),f,b
 11139  003040  2394               	addwfc	(___fldiv@b+3)& (0+255),f,b
 11140                           
 11141                           ; BSR set to: 0
 11142  003042  A194               	btfss	(___fldiv@b+3)& (0+255),0,b
 11143  003044  D017               	goto	l911
 11144                           
 11145                           ; BSR set to: 0
 11146  003046  C091  F099         	movff	___fldiv@b,??___fldiv
 11147  00304A  C092  F09A         	movff	___fldiv@b+1,??___fldiv+1
 11148  00304E  C093  F09B         	movff	___fldiv@b+2,??___fldiv+2
 11149  003052  C094  F09C         	movff	___fldiv@b+3,??___fldiv+3
 11150  003056  359C               	rlcf	(??___fldiv+3)& (0+255),w,b
 11151  003058  339C               	rrcf	(??___fldiv+3)& (0+255),f,b
 11152  00305A  339B               	rrcf	(??___fldiv+2)& (0+255),f,b
 11153  00305C  339A               	rrcf	(??___fldiv+1)& (0+255),f,b
 11154  00305E  3399               	rrcf	??___fldiv& (0+255),f,b
 11155  003060  C099  F091         	movff	??___fldiv,___fldiv@b
 11156  003064  C09A  F092         	movff	??___fldiv+1,___fldiv@b+1
 11157  003068  C09B  F093         	movff	??___fldiv+2,___fldiv@b+2
 11158  00306C  C09C  F094         	movff	??___fldiv+3,___fldiv@b+3
 11159                           
 11160                           ; BSR set to: 0
 11161  003070  4BA2               	infsnz	___fldiv@new_exp& (0+255),f,b
 11162  003072  2BA3               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 11163  003074                     l911:
 11164                           
 11165                           ; BSR set to: 0
 11166                           
 11167                           ; BSR set to: 0
 11168                           
 11169                           ; BSR set to: 0
 11170  003074  BFA3               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11171  003076  D010               	goto	l912
 11172  003078  51A3               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11173  00307A  E103               	bnz	u5720
 11174  00307C  29A2               	incf	___fldiv@new_exp& (0+255),w,b
 11175  00307E  A0D8               	btfss	status,0,c
 11176  003080  D00B               	goto	l912
 11177  003082                     u5720:
 11178                           
 11179                           ; BSR set to: 0
 11180  003082  0E00               	movlw	0
 11181  003084  6FA3               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11182  003086  69A2               	setf	___fldiv@new_exp& (0+255),b
 11183  003088  0E00               	movlw	0
 11184  00308A  6F91               	movwf	___fldiv@b& (0+255),b
 11185  00308C  0E00               	movlw	0
 11186  00308E  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 11187  003090  0E00               	movlw	0
 11188  003092  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 11189  003094  0E00               	movlw	0
 11190  003096  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 11191  003098                     l912:
 11192                           
 11193                           ; BSR set to: 0
 11194                           
 11195                           ; BSR set to: 0
 11196  003098  BFA3               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11197  00309A  D005               	goto	u5730
 11198  00309C  51A3               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11199  00309E  E111               	bnz	l5179
 11200  0030A0  05A2               	decf	___fldiv@new_exp& (0+255),w,b
 11201  0030A2  B0D8               	btfsc	status,0,c
 11202  0030A4  D00E               	goto	l913
 11203  0030A6                     u5730:
 11204                           
 11205                           ; BSR set to: 0
 11206  0030A6  0E00               	movlw	0
 11207  0030A8  6FA3               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11208  0030AA  0E00               	movlw	0
 11209  0030AC  6FA2               	movwf	___fldiv@new_exp& (0+255),b
 11210  0030AE  0E00               	movlw	0
 11211  0030B0  6F91               	movwf	___fldiv@b& (0+255),b
 11212  0030B2  0E00               	movlw	0
 11213  0030B4  6F92               	movwf	(___fldiv@b+1)& (0+255),b
 11214  0030B6  0E00               	movlw	0
 11215  0030B8  6F93               	movwf	(___fldiv@b+2)& (0+255),b
 11216  0030BA  0E00               	movlw	0
 11217  0030BC  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 11218  0030BE  0E00               	movlw	0
 11219  0030C0  6F9D               	movwf	___fldiv@sign& (0+255),b
 11220  0030C2                     l913:
 11221  0030C2                     l5179:
 11222                           
 11223                           ; BSR set to: 0
 11224  0030C2  C0A2  F0A8         	movff	___fldiv@new_exp,___fldiv@bexp
 11225                           
 11226                           ; BSR set to: 0
 11227  0030C6  A1A8               	btfss	___fldiv@bexp& (0+255),0,b
 11228  0030C8  D002               	goto	l914
 11229                           
 11230                           ; BSR set to: 0
 11231  0030CA  8F93               	bsf	(___fldiv@b+2)& (0+255),7,b
 11232  0030CC  D001               	goto	l915
 11233  0030CE                     l914:
 11234                           
 11235                           ; BSR set to: 0
 11236                           
 11237                           ; BSR set to: 0
 11238  0030CE  9F93               	bcf	(___fldiv@b+2)& (0+255),7,b
 11239  0030D0                     l915:
 11240                           
 11241                           ; BSR set to: 0
 11242                           
 11243                           ; BSR set to: 0
 11244  0030D0  90D8               	bcf	status,0,c
 11245  0030D2  31A8               	rrcf	___fldiv@bexp& (0+255),w,b
 11246  0030D4  6F94               	movwf	(___fldiv@b+3)& (0+255),b
 11247                           
 11248                           ; BSR set to: 0
 11249  0030D6  519D               	movf	___fldiv@sign& (0+255),w,b
 11250  0030D8  1394               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11251                           
 11252                           ; BSR set to: 0
 11253  0030DA  C091  F091         	movff	___fldiv@b,?___fldiv
 11254  0030DE  C092  F092         	movff	___fldiv@b+1,?___fldiv+1
 11255  0030E2  C093  F093         	movff	___fldiv@b+2,?___fldiv+2
 11256  0030E6  C094  F094         	movff	___fldiv@b+3,?___fldiv+3
 11257  0030EA  0012               	return	
 11258  0030EC                     __end_of___fldiv:
 11259                           	opt stack 0
 11260                           tblptru	equ	0xFF8
 11261                           tblptrh	equ	0xFF7
 11262                           tblptrl	equ	0xFF6
 11263                           tablat	equ	0xFF5
 11264                           prodh	equ	0xFF4
 11265                           prodl	equ	0xFF3
 11266                           intcon	equ	0xFF2
 11267                           intcon2	equ	0xFF1
 11268                           indf0	equ	0xFEF
 11269                           postinc0	equ	0xFEE
 11270                           fsr0h	equ	0xFEA
 11271                           fsr0l	equ	0xFE9
 11272                           wreg	equ	0xFE8
 11273                           indf2	equ	0xFDF
 11274                           postinc2	equ	0xFDE
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function _low_isr *****************
 11280 ;; Defined at:
 11281 ;;		line 112 in file "color_3.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;		None
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  1    wreg      void 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11295 ;;      Params:         0       0       0       0       0       0       0
 11296 ;;      Locals:         0       0       0       0       0       0       0
 11297 ;;      Temps:         21       0       0       0       0       0       0
 11298 ;;      Totals:        21       0       0       0       0       0       0
 11299 ;;Total ram usage:       21 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    1
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		Interrupt level 1
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	intcodelo
 11310  000018                     __pintcodelo:
 11311                           	opt stack 0
 11312  000018                     _low_isr:
 11313                           	opt stack 25
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;incstack = 0
 11317  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11318  00001A  CFD8 F019          	movff	status,??_low_isr
 11319  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
 11320  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
 11321  000026  CFFA F01C          	movff	pclath,??_low_isr+3
 11322  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
 11323  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
 11324  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
 11325  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
 11326  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
 11327  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
 11328  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
 11329  000046  CFF3 F024          	movff	prodl,??_low_isr+11
 11330  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
 11331  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
 11332  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
 11333  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
 11334  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
 11335  00005E  C051  F02A         	movff	btemp,??_low_isr+17
 11336  000062  C052  F02B         	movff	btemp+1,??_low_isr+18
 11337  000066  C053  F02C         	movff	btemp+2,??_low_isr+19
 11338  00006A  C054  F02D         	movff	btemp+3,??_low_isr+20
 11339                           
 11340                           ;color_3.c: 114: if(TMR1IF == 1)
 11341  00006E  A09E               	btfss	3998,0,c	;volatile
 11342  000070  D007               	goto	i1l2519
 11343                           
 11344                           ;color_3.c: 115: {
 11345                           ;color_3.c: 116: overflowCount++;
 11346  000072  0E01               	movlw	1
 11347  000074  264A               	addwf	_overflowCount,f,c	;volatile
 11348  000076  0E00               	movlw	0
 11349  000078  224B               	addwfc	_overflowCount+1,f,c	;volatile
 11350  00007A  224C               	addwfc	_overflowCount+2,f,c	;volatile
 11351  00007C  224D               	addwfc	_overflowCount+3,f,c	;volatile
 11352                           
 11353                           ;color_3.c: 117: TMR1IF =0;
 11354  00007E  909E               	bcf	3998,0,c	;volatile
 11355  000080                     i1l2519:
 11356                           
 11357                           ;color_3.c: 118: return;
 11358  000080  C02D  F054         	movff	??_low_isr+20,btemp+3
 11359  000084  C02C  F053         	movff	??_low_isr+19,btemp+2
 11360  000088  C02B  F052         	movff	??_low_isr+18,btemp+1
 11361  00008C  C02A  F051         	movff	??_low_isr+17,btemp
 11362  000090  C029  FFF5         	movff	??_low_isr+16,tablat
 11363  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
 11364  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
 11365  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
 11366  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
 11367  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
 11368  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
 11369  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
 11370  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
 11371  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
 11372  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
 11373  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
 11374  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
 11375  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
 11376  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
 11377  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
 11378  0000D0  C019  FFD8         	movff	??_low_isr,status
 11379  0000D4  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11380  0000D6  0010               	retfie	
 11381  0000D8                     __end_of_low_isr:
 11382                           	opt stack 0
 11383                           pclatu	equ	0xFFB
 11384                           pclath	equ	0xFFA
 11385                           tblptru	equ	0xFF8
 11386                           tblptrh	equ	0xFF7
 11387                           tblptrl	equ	0xFF6
 11388                           tablat	equ	0xFF5
 11389                           prodh	equ	0xFF4
 11390                           prodl	equ	0xFF3
 11391                           intcon	equ	0xFF2
 11392                           intcon2	equ	0xFF1
 11393                           indf0	equ	0xFEF
 11394                           postinc0	equ	0xFEE
 11395                           fsr0h	equ	0xFEA
 11396                           fsr0l	equ	0xFE9
 11397                           wreg	equ	0xFE8
 11398                           fsr1h	equ	0xFE2
 11399                           fsr1l	equ	0xFE1
 11400                           bsr	equ	0xFE0
 11401                           indf2	equ	0xFDF
 11402                           postinc2	equ	0xFDE
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function _high_isr *****************
 11408 ;; Defined at:
 11409 ;;		line 122 in file "color_3.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  counter         2   22[COMRAM] unsigned int 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      void 
 11416 ;; Registers used:
 11417 ;;		wreg, status,2, status,0
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11423 ;;      Params:         0       0       0       0       0       0       0
 11424 ;;      Locals:         2       0       0       0       0       0       0
 11425 ;;      Temps:         22       0       0       0       0       0       0
 11426 ;;      Totals:        24       0       0       0       0       0       0
 11427 ;;Total ram usage:       24 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; This function calls:
 11430 ;;		Nothing
 11431 ;; This function is called by:
 11432 ;;		Interrupt level 2
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	intcode
 11437  000008                     __pintcode:
 11438                           	opt stack 0
 11439  000008                     _high_isr:
 11440                           	opt stack 25
 11441                           
 11442                           ;incstack = 0
 11443  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11444  00000A  ED94  F01B         	call	int_func,f	;refresh shadow registers
 11445                           pclatu	equ	0xFFB
 11446                           pclath	equ	0xFFA
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           indf0	equ	0xFEF
 11456                           postinc0	equ	0xFEE
 11457                           fsr0h	equ	0xFEA
 11458                           fsr0l	equ	0xFE9
 11459                           wreg	equ	0xFE8
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           bsr	equ	0xFE0
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469                           	psect	intcode_body
 11470  003728                     __pintcode_body:
 11471                           	opt stack 25
 11472  003728                     int_func:
 11473                           	opt stack 25
 11474  003728  0006               	pop		; remove dummy address from shadow register refresh
 11475  00372A  CFFA F005          	movff	pclath,??_high_isr+4
 11476  00372E  CFFB F006          	movff	pclatu,??_high_isr+5
 11477  003732  CFE9 F007          	movff	fsr0l,??_high_isr+6
 11478  003736  CFEA F008          	movff	fsr0h,??_high_isr+7
 11479  00373A  CFE1 F009          	movff	fsr1l,??_high_isr+8
 11480  00373E  CFE2 F00A          	movff	fsr1h,??_high_isr+9
 11481  003742  CFD9 F00B          	movff	fsr2l,??_high_isr+10
 11482  003746  CFDA F00C          	movff	fsr2h,??_high_isr+11
 11483  00374A  CFF3 F00D          	movff	prodl,??_high_isr+12
 11484  00374E  CFF4 F00E          	movff	prodh,??_high_isr+13
 11485  003752  CFF6 F00F          	movff	tblptrl,??_high_isr+14
 11486  003756  CFF7 F010          	movff	tblptrh,??_high_isr+15
 11487  00375A  CFF8 F011          	movff	tblptru,??_high_isr+16
 11488  00375E  CFF5 F012          	movff	tablat,??_high_isr+17
 11489  003762  C051  F013         	movff	btemp,??_high_isr+18
 11490  003766  C052  F014         	movff	btemp+1,??_high_isr+19
 11491  00376A  C053  F015         	movff	btemp+2,??_high_isr+20
 11492  00376E  C054  F016         	movff	btemp+3,??_high_isr+21
 11493                           
 11494                           ;color_3.c: 125: if(INT0IF == 1)
 11495  003772  A2F2               	btfss	intcon,1,c	;volatile
 11496  003774  D045               	goto	i2l4247
 11497                           
 11498                           ;color_3.c: 126: {
 11499                           ;color_3.c: 127: unsigned int counter = TMR1;
 11500  003776  CFCE F017          	movff	4046,high_isr@counter	;volatile
 11501  00377A  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
 11502                           
 11503                           ;color_3.c: 130: if (triggered)
 11504  00377E  504E               	movf	_triggered,w,c	;volatile
 11505  003780  A4D8               	btfss	status,2,c
 11506  003782  D03D               	goto	i2l4245
 11507                           
 11508                           ;color_3.c: 134: }
 11509                           ;color_3.c: 136: if (first)
 11510                           
 11511                           ;color_3.c: 133: return;
 11512                           
 11513                           ;color_3.c: 131: {
 11514                           ;color_3.c: 132: INT0IF = 0;
 11515  003784  504F               	movf	_first,w,c	;volatile
 11516  003786  B4D8               	btfsc	status,2,c
 11517  003788  D01E               	goto	i2l149
 11518                           
 11519                           ;color_3.c: 137: {
 11520                           ;color_3.c: 138: startTime = (overflowCount << 16) + counter;
 11521  00378A  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 11522  00378E  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 11523  003792  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 11524  003796  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 11525  00379A  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 11526  00379E  C001  F003         	movff	??_high_isr,??_high_isr+2
 11527  0037A2  6A02               	clrf	??_high_isr+1,c
 11528  0037A4  6A01               	clrf	??_high_isr,c
 11529  0037A6  5017               	movf	high_isr@counter,w,c
 11530  0037A8  2401               	addwf	??_high_isr,w,c
 11531  0037AA  0100               	movlb	0	; () banked
 11532  0037AC  6FF0               	movwf	_startTime& (0+255),b	;volatile
 11533  0037AE  5018               	movf	high_isr@counter+1,w,c
 11534  0037B0  2002               	addwfc	??_high_isr+1,w,c
 11535  0037B2  6FF1               	movwf	(_startTime+1)& (0+255),b	;volatile
 11536  0037B4  0E00               	movlw	0
 11537  0037B6  2003               	addwfc	??_high_isr+2,w,c
 11538  0037B8  6FF2               	movwf	(_startTime+2)& (0+255),b	;volatile
 11539  0037BA  0E00               	movlw	0
 11540  0037BC  2004               	addwfc	??_high_isr+3,w,c
 11541  0037BE  6FF3               	movwf	(_startTime+3)& (0+255),b	;volatile
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;color_3.c: 139: first = false;
 11545  0037C0  0E00               	movlw	0
 11546  0037C2  6E4F               	movwf	_first,c	;volatile
 11547  0037C4  D01C               	goto	i2l4245
 11548  0037C6                     i2l149:
 11549                           
 11550                           ;color_3.c: 142: }
 11551                           ;color_3.c: 144: finishTime = (overflowCount << 16) + counter;
 11552                           
 11553                           ; BSR set to: 0
 11554  0037C6  C04A  F001         	movff	_overflowCount,??_high_isr	;volatile
 11555  0037CA  C04B  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 11556  0037CE  C04C  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 11557  0037D2  C04D  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 11558  0037D6  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 11559  0037DA  C001  F003         	movff	??_high_isr,??_high_isr+2
 11560  0037DE  6A02               	clrf	??_high_isr+1,c
 11561  0037E0  6A01               	clrf	??_high_isr,c
 11562  0037E2  5017               	movf	high_isr@counter,w,c
 11563  0037E4  2401               	addwf	??_high_isr,w,c
 11564  0037E6  6E46               	movwf	_finishTime,c	;volatile
 11565  0037E8  5018               	movf	high_isr@counter+1,w,c
 11566  0037EA  2002               	addwfc	??_high_isr+1,w,c
 11567  0037EC  6E47               	movwf	_finishTime+1,c	;volatile
 11568  0037EE  0E00               	movlw	0
 11569  0037F0  2003               	addwfc	??_high_isr+2,w,c
 11570  0037F2  6E48               	movwf	_finishTime+2,c	;volatile
 11571  0037F4  0E00               	movlw	0
 11572  0037F6  2004               	addwfc	??_high_isr+3,w,c
 11573  0037F8  6E49               	movwf	_finishTime+3,c	;volatile
 11574                           
 11575                           ;color_3.c: 145: triggered = true;
 11576  0037FA  0E01               	movlw	1
 11577  0037FC  6E4E               	movwf	_triggered,c	;volatile
 11578  0037FE                     i2l4245:
 11579                           
 11580                           ;color_3.c: 146: INT0IF = 0;
 11581  0037FE  92F2               	bcf	intcon,1,c	;volatile
 11582  003800                     i2l4247:
 11583                           
 11584                           ;color_3.c: 147: return;
 11585  003800  C016  F054         	movff	??_high_isr+21,btemp+3
 11586  003804  C015  F053         	movff	??_high_isr+20,btemp+2
 11587  003808  C014  F052         	movff	??_high_isr+19,btemp+1
 11588  00380C  C013  F051         	movff	??_high_isr+18,btemp
 11589  003810  C012  FFF5         	movff	??_high_isr+17,tablat
 11590  003814  C011  FFF8         	movff	??_high_isr+16,tblptru
 11591  003818  C010  FFF7         	movff	??_high_isr+15,tblptrh
 11592  00381C  C00F  FFF6         	movff	??_high_isr+14,tblptrl
 11593  003820  C00E  FFF4         	movff	??_high_isr+13,prodh
 11594  003824  C00D  FFF3         	movff	??_high_isr+12,prodl
 11595  003828  C00C  FFDA         	movff	??_high_isr+11,fsr2h
 11596  00382C  C00B  FFD9         	movff	??_high_isr+10,fsr2l
 11597  003830  C00A  FFE2         	movff	??_high_isr+9,fsr1h
 11598  003834  C009  FFE1         	movff	??_high_isr+8,fsr1l
 11599  003838  C008  FFEA         	movff	??_high_isr+7,fsr0h
 11600  00383C  C007  FFE9         	movff	??_high_isr+6,fsr0l
 11601  003840  C006  FFFB         	movff	??_high_isr+5,pclatu
 11602  003844  C005  FFFA         	movff	??_high_isr+4,pclath
 11603  003848  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11604  00384A  0011               	retfie		f
 11605  00384C                     __end_of_high_isr:
 11606                           	opt stack 0
 11607                           pclatu	equ	0xFFB
 11608                           pclath	equ	0xFFA
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           intcon2	equ	0xFF1
 11617                           indf0	equ	0xFEF
 11618                           postinc0	equ	0xFEE
 11619                           fsr0h	equ	0xFEA
 11620                           fsr0l	equ	0xFE9
 11621                           wreg	equ	0xFE8
 11622                           fsr1h	equ	0xFE2
 11623                           fsr1l	equ	0xFE1
 11624                           bsr	equ	0xFE0
 11625                           indf2	equ	0xFDF
 11626                           postinc2	equ	0xFDE
 11627                           fsr2h	equ	0xFDA
 11628                           fsr2l	equ	0xFD9
 11629                           status	equ	0xFD8
 11630                           pclatu	equ	0xFFB
 11631                           pclath	equ	0xFFA
 11632                           tblptru	equ	0xFF8
 11633                           tblptrh	equ	0xFF7
 11634                           tblptrl	equ	0xFF6
 11635                           tablat	equ	0xFF5
 11636                           prodh	equ	0xFF4
 11637                           prodl	equ	0xFF3
 11638                           intcon	equ	0xFF2
 11639                           intcon2	equ	0xFF1
 11640                           indf0	equ	0xFEF
 11641                           postinc0	equ	0xFEE
 11642                           fsr0h	equ	0xFEA
 11643                           fsr0l	equ	0xFE9
 11644                           wreg	equ	0xFE8
 11645                           fsr1h	equ	0xFE2
 11646                           fsr1l	equ	0xFE1
 11647                           bsr	equ	0xFE0
 11648                           indf2	equ	0xFDF
 11649                           postinc2	equ	0xFDE
 11650                           fsr2h	equ	0xFDA
 11651                           fsr2l	equ	0xFD9
 11652                           status	equ	0xFD8
 11653                           
 11654                           	psect	rparam
 11655  0000                     pclatu	equ	0xFFB
 11656                           pclath	equ	0xFFA
 11657                           tblptru	equ	0xFF8
 11658                           tblptrh	equ	0xFF7
 11659                           tblptrl	equ	0xFF6
 11660                           tablat	equ	0xFF5
 11661                           prodh	equ	0xFF4
 11662                           prodl	equ	0xFF3
 11663                           intcon	equ	0xFF2
 11664                           intcon2	equ	0xFF1
 11665                           indf0	equ	0xFEF
 11666                           postinc0	equ	0xFEE
 11667                           fsr0h	equ	0xFEA
 11668                           fsr0l	equ	0xFE9
 11669                           wreg	equ	0xFE8
 11670                           fsr1h	equ	0xFE2
 11671                           fsr1l	equ	0xFE1
 11672                           bsr	equ	0xFE0
 11673                           indf2	equ	0xFDF
 11674                           postinc2	equ	0xFDE
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679                           	psect	temp
 11680  000051                     btemp:
 11681                           	opt stack 0
 11682  000051                     	ds	1
 11683  0000                     int$flags	set	btemp
 11684  0000                     wtemp6	set	btemp+1
 11685                           pclatu	equ	0xFFB
 11686                           pclath	equ	0xFFA
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodh	equ	0xFF4
 11692                           prodl	equ	0xFF3
 11693                           intcon	equ	0xFF2
 11694                           intcon2	equ	0xFF1
 11695                           indf0	equ	0xFEF
 11696                           postinc0	equ	0xFEE
 11697                           fsr0h	equ	0xFEA
 11698                           fsr0l	equ	0xFE9
 11699                           wreg	equ	0xFE8
 11700                           fsr1h	equ	0xFE2
 11701                           fsr1l	equ	0xFE1
 11702                           bsr	equ	0xFE0
 11703                           indf2	equ	0xFDF
 11704                           postinc2	equ	0xFDE
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      80
    BANK0           128    112     116
    BANK1           256    117     125
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[6]), STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[6]), 
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(BANK1[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 18
		 -> STR_11(CODE[9]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), value(BANK1[8]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___awdiv->___awmod
    ___fltol->___flmul
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    _identificarColor->___flmul
    _calibra->___flmul
    ___fladd->___flmul
    _calcula->___flmul
    ___flmul->___awdiv
    ___fldiv->___flmul

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calibra
    _main->_identificarColor
    _sprintf->___flge
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    _identificarColor->___flge
    ___flsub->___fladd
    _calibra->___flge
    ___flge->___fladd
    ___fladd->_calcula
    _calcula->___fldiv
    ___fldiv->___flmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_identificarColor

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  152332
                                            110 BANK0      2     2      0
                                             92 BANK1     25    25      0
                            ___fladd
                            ___fldiv
                            _calcula
                            _calibra
                   _identificarColor
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
                   _seleccionarColor
                  _seleccionarEscala
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   59464
                                             94 BANK0     12     4      8
                                              0 BANK1     27    27      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   10680
                                             17 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4   10401
                                             17 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             45 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             45 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     607
                                             67 COMRAM     2     2      0
                                             26 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _seleccionarEscala                                    1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _seleccionarColor                                     1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2    1189
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     308
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     242
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     110
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     605
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     132
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0      88
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _identificarColor                                   108    92     16   36709
                                             94 BANK0     16     0     16
                                              0 BANK1     92    92      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    8867
                                             82 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _calibra                                             16     4     12   25600
                                             94 BANK0     16     4     12
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4    1055
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2966
                                             82 BANK0     12     4      8
                            ___fladd (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    8302
                                             62 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                            _calcula (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcula                                             20    16      4   12806
                                             42 BANK0     20    16      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     656
                                             45 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5753
                                             59 COMRAM     8     0      8
                                              0 BANK0     17    17      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    6255
                                             17 BANK0     25    17      8
                            ___flmul (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            24    24      0      45
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___fladd
     ___fldiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
     _calcula (ARG)
       ___fldiv
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___xxtofl
       _prepareForInterrupts
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
   ___fldiv
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg (ARG)
   _calcula
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___xxtofl
     _prepareForInterrupts
   _calibra
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flge
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
   _identificarColor
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
     ___flge
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___xxtofl (ARG)
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts
   _seleccionarColor
   _seleccionarEscala
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       ___flneg (ARG)
       _calcula (ARG)
         ___fldiv
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___xxtofl
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___flge
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flneg (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___flneg (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
         ___flneg (ARG)
         _calcula (ARG)
           ___fldiv
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___flneg (ARG)
             ___flneg (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
           ___xxtofl
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flneg (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flneg (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flneg (ARG)

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     75      7D       7       48.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80     70      74       5       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     141      15        0.0%
DATA                 0      0     141       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 18:01:18 2018

                 ___fldiv@aexp 00A9                   ___fldiv@bexp 00A8                   ___fldiv@sign 009D  
                  lcd_cmd_hf@x 002F                             l24 40A4                             l25 4084  
                           l42 4104                             l27 408C                             l44 4114  
                           l28 4094                             l36 3F42                             l53 418E  
                           l45 40FA                             l29 409C                             l37 3F1A  
                           l54 4190                             l46 40FE                             l55 4198  
                           l56 419A                             l57 41A2                             l58 41A4  
                           l59 41AC                   ___awdiv@sign 0039                             bsr 000FE0  
          ___wmul@multiplicand 0030                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                            l200 07C8                            l210 09BA  
                          l202 07DA                            l220 0A8E                            l212 0A52  
                          l204 08B8                            l300 14C0                            l230 0AFA  
                          l214 0AAE                            l222 0A9E                            l206 08CA  
                          l310 16B0                            l302 152C                            l303 15AE  
                          l232 0B72                            l224 0B36                            l216 0A06  
                          l208 09A8                            l320 1814                            l241 110A  
                          l305 15E0                            l161 211A                            l226 0B92  
                          l234 0B82                            l218 0A16                            l330 1926  
                          l322 184A                            l306 162C                            l154 1CCA  
                          l243 11A4                            l235 0C74                            l323 1830  
                          l307 1718                            l155 1CE2                            l244 11E0  
                          l228 0AEA                            l180 40D0                            l332 1964  
                          l316 1790                            l245 1240                            l237 0CC6  
                          l341 1B1C                            l333 1968                            l157 1E4A  
                          l190 405E                            l350 1C00                            l342 1B3E  
                          l334 198C                            l326 191A                            l239 107E  
                          l175 40D6                            l271 2584                            l335 1AD4  
                          l327 1882                            l159 1FB2                            l184 4064  
                          l176 40BE                            l272 24A0                            l344 1B68  
                          l336 19EE                            l185 4046                            l265 3250  
                          l345 1B94                            l329 1940                            l194 3B8E  
                          l178 40C4                            l354 1C54                            l338 1AFA  
                          l282 12FC                            l187 404C                            l179 40CA  
                          l611 3C50                            l603 3BC0                            l531 3D9E  
                          l275 2558                            l347 1BC0                            l339 1AE0  
                          l283 1316                            l188 4052                            l612 3C44  
                          l532 3DA8                            l524 3D50                            l540 3E78  
                          l268 332E                            l276 26C2                            l348 1BCA  
                          l292 1436                            l189 4058                            l605 3C2C  
                          l533 3DB6                            l525 3D60                            l541 3E70  
                          l349 1BF6                            l285 1346                            l614 3C6C  
                          l606 3C1C                            l278 277A                            l527 3D7E  
                          l295 1432                            l287 1424                            l560 36AE  
                          l528 3D76                            l544 3E90                            l720 41EC  
                          l296 145E                            l288 140E                            l545 3E9A  
                          l537 3E56                            l289 13D4                            l562 36EC  
                          l546 3EA8                            l538 3E62                            l298 1B04  
                          l563 36DC                            l299 1472                            l580 4172  
                          l556 361E                            l660 34FA                            l573 3882  
                          l902 2FF8                            l574 38B6                            l750 3E22  
                          l558 363C                            l662 3526                            l911 3074  
                          l903 2FDA                            l575 38F4                            l751 3E30  
                          l559 367E                            l663 3560                            l912 3098  
                          l920 27D4                            l840 2C4A                            l576 3932  
                          l760 3EF8                            l568 3710                            l672 35E8  
                          l664 3588                            l913 30C2                            l921 27E8  
                          l841 2C28                            l833 2B72                            l761 3F06  
                          l569 3704                            l673 35DC                            l914 30CE  
                          l930 2A06                            l850 2C92                            l842 2C36  
                          l834 2B6E                            l746 3DEE                            l666 35C4  
                          l915 30D0                            l931 29E8                            l923 2818  
                          l851 2C96                            l843 2C3A                            l747 3DE2  
                          l667 35B4                            l940 2AA0                            l924 2814  
                          l836 2BCE                            l828 2B2A                            l756 3ED0  
                          l909 3030                            l925 2828                            l861 2D7A  
                          l837 2B92                            l829 2B26                            l757 3EC4  
                          l942 2AC4                            l926 2846                            l854 2D30  
                          l846 2CA8                            l943 2AE2                            l919 27D8  
                          l951 33FC                            l871 2DEA                            l863 2D84  
                          l847 2C6E                            l952 33F0                            l856 2D40  
                          l937 2A3E                            l890 2EA4                            l962 348A  
                          l954 343A                            l939 2A82                            l963 34BC  
                          l955 3422                            l947 33BC                            l875 2E10  
                          l859 2D64                            l892 2EEE                            l948 33CC  
                          l876 2E18                            l868 2DA4                            l885 2E68  
                          l957 346C                            l949 33EA                            l877 2E1A  
                          l894 2F16                            l886 2E64                            l958 3460  
                          l895 2FC4                            l896 2F74                            l897 2F9C  
                          l889 2EA8                            l899 2FC2                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                            _lcd 0050                   ___awmod@sign 0033  
                          wreg 000FE8                   ___flmul@aexp 0085                   ___flmul@bexp 008A  
                  _sprintf$919 0100                   ___flmul@sign 0084                   ___flmul@temp 008F  
                 ___flmul@prod 008B                    lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031  
                 __CFG_LVP$OFF 000000                   ___fltol@exp1 0045                   __CFG_WDT$OFF 000000  
                         l4449 396A                           l5505 1794                           l5179 30C2  
                         l5525 1830                           l5711 107E                           l5529 1842  
                         l5715 110A                           l5549 1926                           l5485 167E  
                         l5477 162C                           l5719 11A4                           l5639 1C50  
                         l5817 1E42                           l5853 1FAA                           l5781 1CDA  
                         l5889 2112                           STR_1 0691                           STR_2 06AC  
                         STR_3 06B6                           STR_4 06AC                           STR_5 06BA  
                         STR_6 06AC                           STR_7 06BE                           STR_8 06AC  
                         STR_9 06B2                           _GIEH 007F97                           _GIEL 007F96  
                         u5030 2834                           u5120 2A90                           u5040 29AA  
                         u6000 3476                           _IPEN 007E87                           u5130 2AAE  
                         u5045 29A0                           u5240 3E7C                           u5090 2A3A  
                         u3810 3F3A                           u3820 3F62                           u5180 3D82  
                         u6220 167E                           u4710 2C52                           u5510 3716  
                         u5440 35EE                           u6320 194E                           u6080 13AC  
                         u3817 3F30                           u5361 34DE                           u6330 195E  
                         u3827 3F58                           u4660 2BFE                           u6260 17CC  
                         u6180 15F2                           u5381 350A                           u4670 2C0E  
                         u6190 163E                           u5720 3082                           u4920 2DF6  
                         u4840 2D88                           u4680 2C10                           u5730 30A6  
                         u6290 185A                           u5820 3BDE                           u6460 1C08  
                         u4870 2DA0                           u6470 1C2A                           u6710 2002  
                         u5920 3ED4                           u5825 3BD4                           u5690 302C  
                         u6490 1C72                           u6730 2158                           u5860 3C56  
                         u6670 1D32                           u6807 224A                           u6817 2264  
                         u5890 3DF2                           u6690 1E9A                           u6907 3D04  
                         u6827 232C                           u6747 1CEA                           u6917 3D18  
                         u6837 2346                           u6757 1E24                           u6927 3D2C  
                         u6847 401A                           u6767 1E52                           u6937 3F8C  
                         u6857 3C9A                           u6777 1F8C                           u6947 4216  
                         u6867 3CB0                           u6787 1FBA                           u6957 3A6C  
                         u6877 3CC6                           u6797 20F4                           u6887 3CDC  
                         u6897 3CF0                           _TMR1 000FCE                   __CFG_PWRT$ON 000000  
          seleccionarColor@col 002E                           _main 1C80                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0051                           prodh 000FF4  
                         prodl 000FF3                           start 00D8                  __CFG_IESO$OFF 000000  
              ___fldiv@new_exp 00A2                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
            identificarColor@a 013C              identificarColor@l 0130              identificarColor@r 0150  
            identificarColor@s 011C              identificarColor@t 0148              identificarColor@v 0154  
                ___fltol@sign1 0044                __end_of___fladd 2E36                          ?_main 0001  
              __end_of___fldiv 30EC                __end_of___awdiv 3DC0                __end_of___flneg 4184  
                        STR_10 06AC                          STR_11 06A3                __end_of___awmod 3EB2  
              __end_of___flmul 2AF8                __end_of___flsub 3FFC                __end_of___fltol 3C7E  
              __end_of___lldiv 3E42                ___awdiv@divisor 0036                __end_of___llmod 3F18  
                        i2l149 37C6                ___awdiv@counter 0038                          _PORTB 000F81  
                        _PORTD 000F83                __end_of_calibra 3BA0                __end_of_calcula 3A88  
     __end_of_seleccionarColor 4080                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 3FB4                __end_of_lcd_lat 4224  
              __end_of_lcd_dwr 4042                __end_of_lcd_msg 3F6A                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
              __end_of_dpowers 0691                          _manda 4184                          _first 004F  
                        _scale 2356                __end_of_isdigit 41F4                          _value 0175  
                        main@a 0168                          main@i 0170                          main@r 0160  
                        main@v 0164                __end_of_low_isr 00D8                 __CFG_BOREN$OFF 000000  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
                        wtemp6 0052                __end_of_sprintf 1C80          identificarColor@del_A 012C  
        identificarColor@del_R 0124          identificarColor@del_V 0128          identificarColor@delta 0158  
        identificarColor@somme 0120                __initialization 4126                   __end_of_main 2356  
                       ??_main 00EE                  __activetblptr 000002           __size_of__tdiv_to_l_ 0132  
                       ?_manda 0001               ___llmod@dividend 002E                         ?_scale 0091  
             ___awdiv@dividend 0034                         _INT0IE 007F94                         _INT0IF 007F91  
                       i1l2519 0080                         i2l4245 37FE                         i2l4247 3800  
                       _TMR1IE 007CE8                         _TMR1IF 007CF0                         _TMR1CS 007E69  
                       _TMR1IP 007CF8                         _TMR1ON 007E68               __end_of___xxtofl 34CE  
               __CFG_XINST$OFF 000000               __end_of__powers_ 0635               __end_of_lcd_init 3D3C  
             __end_of_high_isr 384C                         ___flge 384C               __end_of_lcd_putc 40BA  
                    ??___fladd 00C6                         ___wmul 41B0                      ??___fldiv 0099  
                    ??___awdiv 0038                      ??___flneg 0032                 __CFG_STVREN$ON 000000  
                    ??___awmod 0032                      ??___flmul 0080                      ??___flsub 0044  
                    ??___fltol 009E                      ??___lldiv 0036                      ??___llmod 0036  
                    ??_calibra 0044                      ??_calcula 00AE                         _fround 30EC  
__size_of_prepareForInterrupts 000E                         clear_0 412C                         clear_1 4142  
             ___awdiv@quotient 003A                ___awmod@divisor 0030                ___awmod@counter 0032  
                    ??_lcd_cmd 002F                      ??_lcd_lat 002E                      ??_lcd_dwr 002F  
                    ??_lcd_msg 0034                      ??_isdigit 002E                   __mediumconst 0000  
                    ??_low_isr 0019                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8              lcd_gotoxy@ADDRESS 0034      __size_of_identificarColor 0C2A  
                    ??_sprintf 00E6         identificarColor@maxRVB 014C                     ___flge@ff1 00D2  
                   ___flge@ff2 00D6         identificarColor@minRVB 0134                   ___xxtofl@arg 0038  
                 ___xxtofl@exp 0037                   ___xxtofl@val 002E         identificarColor@offset 0140  
                   __accesstop 0080        __end_of__initialization 4148                __CFG_PBADEN$OFF 000000  
                   ___flneg@f1 002E                  ___rparam_used 000001                     ___fltol@f1 009A  
               __pcstackCOMRAM 0001                  __end_of_manda 41B0                  __end_of_scale 27A6  
                   __div_to_l_ 3600                        ??_manda 002E                __div_to_l_@exp1 003B  
              __div_to_l_@cntr 003A                        ??_scale 0044                __div_to_l_@quot 0036  
                 sprintf@width 010C                     __pbssBANK0 00F0                     __pbssBANK1 0175  
                __div_to_l_@f1 002E                  __div_to_l_@f2 0032             __CFG_CCP2MX$PORTBE 000000  
                      ?___flge 00D2                        ?___wmul 002E                        ?_fround 0091  
                      _T1CKPS0 007E6C                        _T1CKPS1 007E6D                        _INTEDG0 007F8E  
                   _lcd_cmd_hf 41F4                      ?___xxtofl 002E             calcula@elapsedTime 00B2  
            ?_seleccionarColor 0001                     _lcd_gotoxy 40F2             ??_seleccionarColor 002E  
                   _finishTime 0046                      ?_lcd_init 0001                      ?_high_isr 0001  
                    ?_lcd_putc 0001              __end_of__npowers_ 0669                        __Hparam 0000  
                      __Lparam 0000                __size_of___flge 0122                        ___fladd 2AF8  
                      ___fldiv 2E36                        ___awdiv 3D3C                        ___flneg 4156  
                      ___awmod 3E42                        ___flmul 27A6                        ___flsub 3FB4  
                      ___fltol 3BA0                        ___lldiv 3DC0                __size_of___wmul 0026  
                      ___llmod 3EB2                     _fround$916 0099                     _fround$917 0095  
                 __psmallconst 0600                        _calibra 3A88                        _calcula 396E  
                      __pcinit 4126                __size_of_fround 0292                        __ramtop 0600  
                      __ptext0 1C80                        __ptext1 12EE                        __ptext2 2356  
                      __ptext3 41D6                        __ptext4 30EC                        __ptext5 3E42  
                      __ptext6 3D3C                        __ptext7 34CE                        __ptext8 3600  
                      __ptext9 41B0                        _lcd_cmd 3F6A                        _lcd_lat 420E  
                      _lcd_dwr 3FFC                        _lcd_msg 3F18                      _T1CONbits 000FCD  
                  ?__div_to_l_ 002E                        _dpowers 0669                        _isdigit 41D6  
                   ??___xxtofl 0032               ___awmod@dividend 002E                        _low_isr 0018  
             _identificarColor 06C4                        _sprintf 12EE                     ??_lcd_init 0031  
                   ??_high_isr 0001                 __pintcode_body 3728                     ??_lcd_putc 0031  
         end_of_initialization 4148                  __Lmediumconst 0000                        int_func 3728  
              ___lldiv@divisor 0032                ___lldiv@counter 003A                        postinc0 000FEE  
                      postinc2 000FDE                 __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0032  
                ??__tdiv_to_l_ 0036                    ___fladd@grs 00D1                    ?_lcd_cmd_hf 0001  
                ___xxtofl@sign 0036                    ?_lcd_gotoxy 0031                    ___fldiv@grs 00A4  
                  ___fldiv@rem 009E   __end_of_prepareForInterrupts 4232                    ___flmul@grs 0086  
                   main@brillo 016C                     main@grados 015C             seleccionarEscala@a 002E  
          __size_of__div_to_l_ 0128                 __end_of___flge 396E                 __end_of___wmul 41D6  
               __end_of_fround 337E                   calibra@valor 00DE           identificarColor@colA 00EA  
         identificarColor@colB 00DE           identificarColor@colR 00E2           identificarColor@colV 00E6  
          start_initialization 4126            __end_of__tdiv_to_l_ 3600                high_isr@counter 0017  
              ___llmod@divisor 0032                ___llmod@counter 0036            __size_of_lcd_cmd_hf 001A  
                     ??___flge 00DA            __size_of_lcd_gotoxy 0034                       ??___wmul 0032  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 0044                  sprintf@tmpval 010E  
                    ___fladd@a 00C2                      ___fladd@b 00BE                     fround@prec 009D  
                    ___fldiv@a 0095                      ___fldiv@b 0091                      ___flmul@a 0040  
                    ___flmul@b 003C                    __pbssCOMRAM 0046                      ___flsub@a 00D6  
                    ___flsub@b 00D2                  __pcstackBANK0 0080                  __pcstackBANK1 0100  
            __size_of___xxtofl 0150              __size_of_lcd_init 00BE              __size_of_high_isr 3844  
                  sprintf@flag 010A              __size_of_lcd_putc 003A                    sprintf@fval 0114  
                  sprintf@prec 0118      __size_of_seleccionarColor 003E                      __pintcode 0008  
     __end_of_identificarColor 12EE                       ?___fladd 00BE                       ?___fldiv 0091  
                     ?___awdiv 0034                       ?___flneg 002E                       ?___awmod 002E  
                     ?___flmul 003C                       ?___flsub 00D2                       ?___fltol 009A  
                     ?___lldiv 002E                       ?___llmod 002E                      __npowers_ 0635  
                     ?_calibra 00DE                       ?_calcula 00AA                    __pintcodelo 0018  
         _prepareForInterrupts 4224                    __tdiv_to_l_ 34CE                       ?_lcd_cmd 0001  
                     ?_lcd_lat 0001                       ?_lcd_dwr 0001                       ?_lcd_msg 0032  
                 ??__div_to_l_ 0036                    __smallconst 0600                       ?_isdigit 0001  
                    calibra@fd 00E2                      calibra@fw 00E6                       ?_low_isr 0001  
                    _scale$918 0095                 __size_of_manda 002C                       ?_sprintf 00DE  
               __size_of_scale 0450                 ___wmul@product 0032              _seleccionarEscala 40BA  
           ?_seleccionarEscala 0001             __end_of__div_to_l_ 3728               __CFG_WDTPS$32768 000000  
          ??_seleccionarEscala 002E          ?_prepareForInterrupts 0001              ___wmul@multiplier 002E  
                    _startTime 00F0                      _triggered 004E                   ??_lcd_cmd_hf 002F  
                    lcd_putc@c 0031                   ??_lcd_gotoxy 0032                      manda@dato 002E  
                  calibra@temp 00EA      __end_of_seleccionarEscala 40F2                    calcula@freq 00B6  
                  calcula@temp 00BA                       __Hrparam 0000                       __Lrparam 0000  
           __end_of_lcd_cmd_hf 420E             __end_of_lcd_gotoxy 4126               __size_of___fladd 033E  
             __size_of___fldiv 02B6               __size_of___awdiv 0084               __size_of___flneg 002E  
             __size_of___awmod 0070               __size_of___flmul 0352               __size_of___flsub 0048  
             __size_of___fltol 00DE               __size_of___lldiv 0082               __size_of___llmod 0066  
             __size_of_calibra 0118               __size_of_calcula 011A                    _isdigit$561 002F  
             __size_of_lcd_cmd 004A               __size_of_lcd_lat 0016               __size_of_lcd_dwr 0046  
             __size_of_lcd_msg 0052                     sprintf@exp 0112                     sprintf@val 0106  
                     ___xxtofl 337E               __size_of_isdigit 001E               __size_of_low_isr 00C0  
                     __ptext10 3EB2                       __ptext11 3DC0                       __ptext20 40F2  
                     __ptext12 3BA0                       __ptext21 3F6A                       __ptext13 40BA  
                     __ptext30 396E                       __ptext22 4184                       __ptext14 4042  
                     __ptext31 4224                       __ptext23 420E                       __ptext15 3F18  
                     __ptext32 337E                       __ptext24 06C4                       __ptext16 4080  
                     __ptext33 27A6                       __ptext25 3FB4                       __ptext17 3FFC  
                     __ptext34 2E36                       __ptext26 3A88                       __ptext18 3C7E  
                     __ptext27 4156                       __ptext19 41F4                       __ptext28 384C  
                     __ptext29 2AF8                       __powers_ 0601                       _lcd_init 3C7E  
                     _high_isr 0008                       _lcd_putc 4080               __size_of_sprintf 0992  
                __size_of_main 06D6               _seleccionarColor 4042         ??_prepareForInterrupts 002E  
                     int$flags 0051                       lcd_cmd@x 0030                       lcd_dwr@x 0030  
                     lcd_msg@c 0032                       main@freq 0171                       isdigit@c 0030  
                     scale@scl 0099                       intlevel1 0000                       intlevel2 0000  
   __size_of_seleccionarEscala 0038                      sprintf@ap 0104               __tdiv_to_l_@exp1 003E  
             __tdiv_to_l_@cntr 003D                      sprintf@sp 00DE               __tdiv_to_l_@quot 0039  
             ___lldiv@dividend 002E                  _overflowCount 004A              ?_identificarColor 00DE  
           ??_identificarColor 0044                   ?__tdiv_to_l_ 002E                       sprintf@c 011A  
                     sprintf@f 00E0               ___lldiv@quotient 0036                  ___fladd@signs 00CE  
                 ___fladd@aexp 00CF                   ___fladd@bexp 00D0           _identificarColor$271 010C  
         _identificarColor$272 0110           _identificarColor$274 0114           _identificarColor$275 0118  
         _identificarColor$267 0100           _identificarColor$268 0104           _identificarColor$269 0108  
         _identificarColor$914 0144           _identificarColor$915 0138  
