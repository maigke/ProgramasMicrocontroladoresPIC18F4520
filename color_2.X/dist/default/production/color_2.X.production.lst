

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 12 20:00:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4520 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt stack 0
    89  000600  00                 	db	0
    90  000601                     __powers_:
    91                           	opt stack 0
    92  000601  0000               	dw	0
    93  000603  3F80               	dw	16256
    94  000605  0000               	dw	0
    95  000607  4120               	dw	16672
    96  000609  0000               	dw	0
    97  00060B  42C8               	dw	17096
    98  00060D  0000               	dw	0
    99  00060F  447A               	dw	17530
   100  000611  4000               	dw	16384
   101  000613  461C               	dw	17948
   102  000615  5000               	dw	20480
   103  000617  47C3               	dw	18371
   104  000619  2400               	dw	9216
   105  00061B  4974               	dw	18804
   106  00061D  9680               	dw	38528
   107  00061F  4B18               	dw	19224
   108  000621  BC20               	dw	48160
   109  000623  4CBE               	dw	19646
   110  000625  6B28               	dw	27432
   111  000627  4E6E               	dw	20078
   112  000629  02F9               	dw	761
   113  00062B  5015               	dw	20501
   114  00062D  78EC               	dw	30956
   115  00062F  60AD               	dw	24749
   116  000631  F2CA               	dw	62154
   117  000633  7149               	dw	29001
   118  000635                     __end_of__powers_:
   119                           	opt stack 0
   120  000635                     __npowers_:
   121                           	opt stack 0
   122  000635  0000               	dw	0
   123  000637  3F80               	dw	16256
   124  000639  CCCD               	dw	52429
   125  00063B  3DCC               	dw	15820
   126  00063D  D70A               	dw	55050
   127  00063F  3C23               	dw	15395
   128  000641  126F               	dw	4719
   129  000643  3A83               	dw	14979
   130  000645  B717               	dw	46871
   131  000647  38D1               	dw	14545
   132  000649  C5AC               	dw	50604
   133  00064B  3727               	dw	14119
   134  00064D  37BD               	dw	14269
   135  00064F  3586               	dw	13702
   136  000651  BF95               	dw	49045
   137  000653  33D6               	dw	13270
   138  000655  CC77               	dw	52343
   139  000657  322B               	dw	12843
   140  000659  705F               	dw	28767
   141  00065B  3089               	dw	12425
   142  00065D  E6FF               	dw	59135
   143  00065F  2EDB               	dw	11995
   144  000661  E508               	dw	58632
   145  000663  1E3C               	dw	7740
   146  000665  4260               	dw	16992
   147  000667  0DA2               	dw	3490
   148  000669                     __end_of__npowers_:
   149                           	opt stack 0
   150  000669                     _dpowers:
   151                           	opt stack 0
   152  000669  0001               	dw	1
   153  00066B  0000               	dw	0
   154  00066D  000A               	dw	10
   155  00066F  0000               	dw	0
   156  000671  0064               	dw	100
   157  000673  0000               	dw	0
   158  000675  03E8               	dw	1000
   159  000677  0000               	dw	0
   160  000679  2710               	dw	10000
   161  00067B  0000               	dw	0
   162  00067D  86A0               	dw	34464
   163  00067F  0001               	dw	1
   164  000681  4240               	dw	16960
   165  000683  000F               	dw	15
   166  000685  9680               	dw	38528
   167  000687  0098               	dw	152
   168  000689  E100               	dw	57600
   169  00068B  05F5               	dw	1525
   170  00068D  CA00               	dw	51712
   171  00068F  3B9A               	dw	15258
   172  000691                     __end_of_dpowers:
   173                           	opt stack 0
   174  0000                     _TMR1	set	4046
   175  0000                     _T1CONbits	set	4045
   176  0000                     _PORTB	set	3969
   177  0000                     _PORTD	set	3971
   178  0000                     _INTEDG0	set	32654
   179  0000                     _INT0IE	set	32660
   180  0000                     _GIEL	set	32662
   181  0000                     _GIEH	set	32663
   182  0000                     _IPEN	set	32391
   183  0000                     _TMR1IE	set	31976
   184  0000                     _TMR1IP	set	31992
   185  0000                     _TMR1ON	set	32360
   186  0000                     _TMR1CS	set	32361
   187  0000                     _T1CKPS0	set	32364
   188  0000                     _T1CKPS1	set	32365
   189  0000                     _INT0IF	set	32657
   190  0000                     _TMR1IF	set	31984
   191  000691                     STR_1:
   192  000691  44                 	db	68	;'D'
   193  000692  65                 	db	101	;'e'
   194  000693  74                 	db	116	;'t'
   195  000694  65                 	db	101	;'e'
   196  000695  63                 	db	99	;'c'
   197  000696  74                 	db	116	;'t'
   198  000697  6F                 	db	111	;'o'
   199  000698  72                 	db	114	;'r'
   200  000699  20                 	db	32
   201  00069A  64                 	db	100	;'d'
   202  00069B  65                 	db	101	;'e'
   203  00069C  20                 	db	32
   204  00069D  63                 	db	99	;'c'
   205  00069E  6F                 	db	111	;'o'
   206  00069F  6C                 	db	108	;'l'
   207  0006A0  6F                 	db	111	;'o'
   208  0006A1  72                 	db	114	;'r'
   209  0006A2  00                 	db	0
   210  0006A3                     STR_14:
   211  0006A3  6E                 	db	110	;'n'
   212  0006A4  6F                 	db	111	;'o'
   213  0006A5  20                 	db	32
   214  0006A6  64                 	db	100	;'d'
   215  0006A7  65                 	db	101	;'e'
   216  0006A8  66                 	db	102	;'f'
   217  0006A9  20                 	db	32
   218  0006AA  20                 	db	32
   219  0006AB  20                 	db	32
   220  0006AC  20                 	db	32
   221  0006AD  20                 	db	32
   222  0006AE  20                 	db	32
   223  0006AF  20                 	db	32
   224  0006B0  20                 	db	32
   225  0006B1  20                 	db	32
   226  0006B2  20                 	db	32
   227  0006B3  00                 	db	0
   228  0006B4                     STR_10:
   229  0006B4  6D                 	db	109	;'m'
   230  0006B5  75                 	db	117	;'u'
   231  0006B6  63                 	db	99	;'c'
   232  0006B7  68                 	db	104	;'h'
   233  0006B8  6F                 	db	111	;'o'
   234  0006B9  20                 	db	32
   235  0006BA  62                 	db	98	;'b'
   236  0006BB  72                 	db	114	;'r'
   237  0006BC  69                 	db	105	;'i'
   238  0006BD  6C                 	db	108	;'l'
   239  0006BE  6C                 	db	108	;'l'
   240  0006BF  6F                 	db	111	;'o'
   241  0006C0  00                 	db	0
   242  0006C1                     STR_12:
   243  0006C1  76                 	db	118	;'v'
   244  0006C2  65                 	db	101	;'e'
   245  0006C3  72                 	db	114	;'r'
   246  0006C4  64                 	db	100	;'d'
   247  0006C5  65                 	db	101	;'e'
   248  0006C6  00                 	db	0
   249  0006C7                     STR_2:
   250  0006C7  25                 	db	37
   251  0006C8  35                 	db	53	;'5'
   252  0006C9  2E                 	db	46
   253  0006CA  33                 	db	51	;'3'
   254  0006CB  66                 	db	102	;'f'
   255  0006CC  00                 	db	0
   256  0006CD                     STR_13:
   257  0006CD  61                 	db	97	;'a'
   258  0006CE  7A                 	db	122	;'z'
   259  0006CF  75                 	db	117	;'u'
   260  0006D0  6C                 	db	108	;'l'
   261  0006D1  00                 	db	0
   262  0006D2                     STR_11:
   263  0006D2  52                 	db	82	;'R'
   264  0006D3  6F                 	db	111	;'o'
   265  0006D4  6A                 	db	106	;'j'
   266  0006D5  6F                 	db	111	;'o'
   267  0006D6  00                 	db	0
   268  0006D7                     STR_9:
   269  0006D7  41                 	db	65	;'A'
   270  0006D8  3D                 	db	61	;'='
   271  0006D9  20                 	db	32
   272  0006DA  00                 	db	0
   273  0006DB                     STR_3:
   274  0006DB  42                 	db	66	;'B'
   275  0006DC  3D                 	db	61	;'='
   276  0006DD  20                 	db	32
   277  0006DE  00                 	db	0
   278  0006DF                     STR_5:
   279  0006DF  52                 	db	82	;'R'
   280  0006E0  3D                 	db	61	;'='
   281  0006E1  20                 	db	32
   282  0006E2  00                 	db	0
   283  0006E3                     STR_7:
   284  0006E3  56                 	db	86	;'V'
   285  0006E4  3D                 	db	61	;'='
   286  0006E5  20                 	db	32
   287  0006E6  00                 	db	0
   288  0000                     
   289                           ; #config settings
   290  0006E7  00                 	db	0	; dummy byte at the end
   291  0000                     
   292                           	psect	cinit
   293  003476                     __pcinit:
   294                           	opt stack 0
   295  003476                     start_initialization:
   296                           	opt stack 0
   297  003476                     __initialization:
   298                           	opt stack 0
   299                           
   300                           ; Clear objects allocated to COMRAM (23 bytes)
   301  003476  EE00  F03B         	lfsr	0,__pbssCOMRAM
   302  00347A  0E17               	movlw	23
   303  00347C                     clear_0:
   304  00347C  6AEE               	clrf	postinc0,c
   305  00347E  06E8               	decf	wreg,f,c
   306  003480  E1FD               	bnz	clear_0
   307  003482                     end_of_initialization:
   308                           	opt stack 0
   309  003482                     __end_of__initialization:
   310                           	opt stack 0
   311  003482  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   312  003484  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   313  003486  0E00               	movlw	low (__Lmediumconst shr (0+16))
   314  003488  6EF8               	movwf	tblptru,c
   315  00348A  0100               	movlb	0
   316  00348C  EFEA  F007         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssCOMRAM
   322  00003B                     __pbssCOMRAM:
   323                           	opt stack 0
   324  00003B                     _finishTime:
   325                           	opt stack 0
   326  00003B                     	ds	4
   327  00003F                     _startTime:
   328                           	opt stack 0
   329  00003F                     	ds	4
   330  000043                     _overflowCount:
   331                           	opt stack 0
   332  000043                     	ds	4
   333  000047                     _triggered:
   334                           	opt stack 0
   335  000047                     	ds	1
   336  000048                     _first:
   337                           	opt stack 0
   338  000048                     	ds	1
   339  000049                     _lcd:
   340                           	opt stack 0
   341  000049                     	ds	1
   342  00004A                     _value:
   343                           	opt stack 0
   344  00004A                     	ds	8
   345                           tblptru	equ	0xFF8
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	cstackBANK1
   350  000100                     __pcstackBANK1:
   351                           	opt stack 0
   352  000100                     main@brillo:
   353                           	opt stack 0
   354                           
   355                           ; 4 bytes @ 0x0
   356  000100                     	ds	4
   357  000104                     _main$871:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x4
   361  000104                     	ds	4
   362  000108                     main@r:
   363                           	opt stack 0
   364                           
   365                           ; 4 bytes @ 0x8
   366  000108                     	ds	4
   367  00010C                     main@v:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0xC
   371  00010C                     	ds	4
   372  000110                     main@a:
   373                           	opt stack 0
   374                           
   375                           ; 4 bytes @ 0x10
   376  000110                     	ds	4
   377  000114                     _main$870:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0x14
   381  000114                     	ds	4
   382  000118                     main@i:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x18
   386  000118                     	ds	1
   387  000119                     main@freq:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x19
   391  000119                     	ds	4
   392                           tblptru	equ	0xFF8
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           
   396                           	psect	cstackBANK0
   397  000080                     __pcstackBANK0:
   398                           	opt stack 0
   399  000080                     ?___xxtofl:
   400                           	opt stack 0
   401  000080                     ___awdiv@counter:
   402                           	opt stack 0
   403  000080                     ___fldiv@sign:
   404                           	opt stack 0
   405  000080                     __div_to_l_@quot:
   406                           	opt stack 0
   407  000080                     __tdiv_to_l_@quot:
   408                           	opt stack 0
   409  000080                     ___xxtofl@val:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x0
   413  000080                     	ds	1
   414  000081                     ___awdiv@sign:
   415                           	opt stack 0
   416  000081                     ___fldiv@rem:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x1
   420  000081                     	ds	1
   421  000082                     ___awdiv@quotient:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x2
   425  000082                     	ds	2
   426  000084                     ??___xxtofl:
   427  000084                     ?___flmul:
   428                           	opt stack 0
   429  000084                     __div_to_l_@cntr:
   430                           	opt stack 0
   431  000084                     __tdiv_to_l_@cntr:
   432                           	opt stack 0
   433  000084                     ___flmul@b:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x4
   437  000084                     	ds	1
   438  000085                     __div_to_l_@exp1:
   439                           	opt stack 0
   440  000085                     __tdiv_to_l_@exp1:
   441                           	opt stack 0
   442  000085                     ___fldiv@new_exp:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x5
   446  000085                     	ds	2
   447  000087                     ___fldiv@grs:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x7
   451  000087                     	ds	1
   452  000088                     ___xxtofl@sign:
   453                           	opt stack 0
   454  000088                     ___flmul@a:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x8
   458  000088                     	ds	1
   459  000089                     ___xxtofl@exp:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x9
   463  000089                     	ds	1
   464  00008A                     ___xxtofl@arg:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0xA
   468  00008A                     	ds	1
   469  00008B                     ___fldiv@bexp:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0xB
   473  00008B                     	ds	1
   474  00008C                     ??___flmul:
   475  00008C                     ___fldiv@aexp:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xC
   479  00008C                     	ds	4
   480  000090                     ___flmul@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x10
   484  000090                     	ds	1
   485  000091                     ___flmul@aexp:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x11
   489  000091                     	ds	1
   490  000092                     ___flmul@grs:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x12
   494  000092                     	ds	4
   495  000096                     ___flmul@bexp:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x16
   499  000096                     	ds	1
   500  000097                     ___flmul@prod:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x17
   504  000097                     	ds	4
   505  00009B                     ___flmul@temp:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x1B
   509  00009B                     	ds	2
   510  00009D                     ?_calcula:
   511                           	opt stack 0
   512  00009D                     ?_fround:
   513                           	opt stack 0
   514  00009D                     ?_scale:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0x1D
   518  00009D                     	ds	4
   519  0000A1                     ??_calcula:
   520  0000A1                     _fround$873:
   521                           	opt stack 0
   522  0000A1                     _scale$874:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x21
   526  0000A1                     	ds	4
   527  0000A5                     scale@scl:
   528                           	opt stack 0
   529  0000A5                     calcula@elapsedTime:
   530                           	opt stack 0
   531  0000A5                     _fround$872:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x25
   535  0000A5                     	ds	1
   536  0000A6                     ?___fltol:
   537                           	opt stack 0
   538  0000A6                     ___fltol@f1:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x26
   542  0000A6                     	ds	3
   543  0000A9                     fround@prec:
   544                           	opt stack 0
   545  0000A9                     calcula@freq:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x29
   549  0000A9                     	ds	1
   550  0000AA                     ??___fltol:
   551                           
   552                           ; 1 bytes @ 0x2A
   553  0000AA                     	ds	3
   554  0000AD                     calcula@temp:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x2D
   558  0000AD                     	ds	4
   559  0000B1                     ?___fladd:
   560                           	opt stack 0
   561  0000B1                     ___fladd@b:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x31
   565  0000B1                     	ds	4
   566  0000B5                     ___fladd@a:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x35
   570  0000B5                     	ds	4
   571  0000B9                     ??___fladd:
   572                           
   573                           ; 1 bytes @ 0x39
   574  0000B9                     	ds	8
   575  0000C1                     ___fladd@signs:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x41
   579  0000C1                     	ds	1
   580  0000C2                     ___fladd@aexp:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x42
   584  0000C2                     	ds	1
   585  0000C3                     ___fladd@bexp:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x43
   589  0000C3                     	ds	1
   590  0000C4                     ___fladd@grs:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x44
   594  0000C4                     	ds	1
   595  0000C5                     ?___flsub:
   596                           	opt stack 0
   597  0000C5                     ___flsub@b:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x45
   601  0000C5                     	ds	4
   602  0000C9                     ___flsub@a:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x49
   606  0000C9                     	ds	4
   607  0000CD                     ?_sprintf:
   608                           	opt stack 0
   609  0000CD                     sprintf@sp:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x4D
   613  0000CD                     	ds	2
   614  0000CF                     sprintf@f:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x4F
   618  0000CF                     	ds	6
   619  0000D5                     ??_sprintf:
   620                           
   621                           ; 1 bytes @ 0x55
   622  0000D5                     	ds	4
   623  0000D9                     _sprintf$875:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x59
   627  0000D9                     	ds	4
   628  0000DD                     sprintf@ap:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x5D
   632  0000DD                     	ds	2
   633  0000DF                     sprintf@val:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x5F
   637  0000DF                     	ds	4
   638  0000E3                     sprintf@flag:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x63
   642  0000E3                     	ds	2
   643  0000E5                     sprintf@width:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x65
   647  0000E5                     	ds	2
   648  0000E7                     sprintf@tmpval:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x67
   652  0000E7                     	ds	4
   653  0000EB                     sprintf@exp:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x6B
   657  0000EB                     	ds	2
   658  0000ED                     sprintf@fval:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x6D
   662  0000ED                     	ds	4
   663  0000F1                     sprintf@prec:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x71
   667  0000F1                     	ds	2
   668  0000F3                     sprintf@c:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x73
   672  0000F3                     	ds	1
   673  0000F4                     ??_main:
   674                           
   675                           ; 1 bytes @ 0x74
   676  0000F4                     	ds	2
   677                           tblptru	equ	0xFF8
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           
   681                           	psect	cstackCOMRAM
   682  000001                     __pcstackCOMRAM:
   683                           	opt stack 0
   684  000001                     ??_high_isr:
   685  000001                     
   686                           ; 1 bytes @ 0x0
   687  000001                     	ds	22
   688  000017                     high_isr@counter:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x16
   692  000017                     	ds	2
   693  000019                     ??_low_isr:
   694                           
   695                           ; 1 bytes @ 0x18
   696  000019                     	ds	21
   697  00002E                     ??_isdigit:
   698  00002E                     ??_lcd_lat:
   699  00002E                     ?___wmul:
   700                           	opt stack 0
   701  00002E                     ?___awmod:
   702                           	opt stack 0
   703  00002E                     ?__tdiv_to_l_:
   704                           	opt stack 0
   705  00002E                     ?__div_to_l_:
   706                           	opt stack 0
   707  00002E                     ?___fldiv:
   708                           	opt stack 0
   709  00002E                     ?___flneg:
   710                           	opt stack 0
   711  00002E                     ?___lldiv:
   712                           	opt stack 0
   713  00002E                     ?___llmod:
   714                           	opt stack 0
   715  00002E                     manda@dato:
   716                           	opt stack 0
   717  00002E                     seleccionarEscala@a:
   718                           	opt stack 0
   719  00002E                     seleccionarColor@col:
   720                           	opt stack 0
   721  00002E                     ___wmul@multiplier:
   722                           	opt stack 0
   723  00002E                     ___awmod@dividend:
   724                           	opt stack 0
   725  00002E                     __div_to_l_@f1:
   726                           	opt stack 0
   727  00002E                     ___flge@ff1:
   728                           	opt stack 0
   729  00002E                     ___flneg@f1:
   730                           	opt stack 0
   731  00002E                     __tdiv_to_l_@f1:
   732                           	opt stack 0
   733  00002E                     ___lldiv@dividend:
   734                           	opt stack 0
   735  00002E                     ___llmod@dividend:
   736                           	opt stack 0
   737  00002E                     ___fldiv@b:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x2D
   741  00002E                     	ds	1
   742  00002F                     ??_lcd_dwr:
   743  00002F                     ??_lcd_cmd:
   744  00002F                     lcd_cmd_hf@x:
   745                           	opt stack 0
   746  00002F                     _isdigit$517:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x2E
   750  00002F                     	ds	1
   751  000030                     lcd_cmd@x:
   752                           	opt stack 0
   753  000030                     lcd_dwr@x:
   754                           	opt stack 0
   755  000030                     isdigit@c:
   756                           	opt stack 0
   757  000030                     ___wmul@multiplicand:
   758                           	opt stack 0
   759  000030                     ___awmod@divisor:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x2F
   763  000030                     	ds	1
   764  000031                     ??_lcd_init:
   765  000031                     lcd_putc@c:
   766                           	opt stack 0
   767  000031                     lcd_gotoxy@y:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x30
   771  000031                     	ds	1
   772  000032                     ??_lcd_gotoxy:
   773  000032                     ___awmod@counter:
   774                           	opt stack 0
   775  000032                     lcd_msg@c:
   776                           	opt stack 0
   777  000032                     ___wmul@product:
   778                           	opt stack 0
   779  000032                     __div_to_l_@f2:
   780                           	opt stack 0
   781  000032                     ___flge@ff2:
   782                           	opt stack 0
   783  000032                     __tdiv_to_l_@f2:
   784                           	opt stack 0
   785  000032                     ___lldiv@divisor:
   786                           	opt stack 0
   787  000032                     ___llmod@divisor:
   788                           	opt stack 0
   789  000032                     ___fldiv@a:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x31
   793  000032                     	ds	1
   794  000033                     lcd_gotoxy@x:
   795                           	opt stack 0
   796  000033                     ___awmod@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x32
   800  000033                     	ds	1
   801  000034                     ?___awdiv:
   802                           	opt stack 0
   803  000034                     lcd_gotoxy@ADDRESS:
   804                           	opt stack 0
   805  000034                     ___awdiv@dividend:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x33
   809  000034                     	ds	2
   810  000036                     ??__tdiv_to_l_:
   811  000036                     ??___fldiv:
   812  000036                     ??___flge:
   813  000036                     ___llmod@counter:
   814                           	opt stack 0
   815  000036                     ___awdiv@divisor:
   816                           	opt stack 0
   817  000036                     ___lldiv@quotient:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x35
   821  000036                     	ds	2
   822  000038                     ___fltol@sign1:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x37
   826  000038                     	ds	1
   827  000039                     ___fltol@exp1:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x38
   831  000039                     	ds	1
   832  00003A                     ___lldiv@counter:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x39
   836  00003A                     	ds	1
   837                           tblptru	equ	0xFF8
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           
   841 ;;
   842 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   843 ;;
   844 ;; *************** function _main *****************
   845 ;; Defined at:
   846 ;;		line 130 in file "color_2.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  freq            4   25[BANK1 ] float 
   851 ;;  a               4   16[BANK1 ] float 
   852 ;;  v               4   12[BANK1 ] float 
   853 ;;  r               4    8[BANK1 ] float 
   854 ;;  brillo          4    0[BANK1 ] float 
   855 ;;  i               1   24[BANK1 ] unsigned char 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   865 ;;      Params:         0       0       0       0       0       0       0
   866 ;;      Locals:         0       0      29       0       0       0       0
   867 ;;      Temps:          0       2       0       0       0       0       0
   868 ;;      Totals:         0       2      29       0       0       0       0
   869 ;;Total ram usage:       31 bytes
   870 ;; Hardware stack levels required when called:    6
   871 ;; This function calls:
   872 ;;		___fladd
   873 ;;		___fldiv
   874 ;;		___flge
   875 ;;		___xxtofl
   876 ;;		_calcula
   877 ;;		_lcd_gotoxy
   878 ;;		_lcd_init
   879 ;;		_lcd_msg
   880 ;;		_prepareForInterrupts
   881 ;;		_seleccionarColor
   882 ;;		_seleccionarEscala
   883 ;;		_sprintf
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890  000FD4                     __ptext0:
   891                           	opt stack 0
   892  000FD4                     _main:
   893                           	opt stack 25
   894                           
   895                           ;color_2.c: 132: char i;
   896                           ;color_2.c: 133: float freq=0.0;
   897                           
   898                           ;incstack = 0
   899  000FD4  0E00               	movlw	0
   900  000FD6  0101               	movlb	1	; () banked
   901  000FD8  6F19               	movwf	main@freq& (0+255),b
   902  000FDA  0E00               	movlw	0
   903  000FDC  6F1A               	movwf	(main@freq+1)& (0+255),b
   904  000FDE  0E00               	movlw	0
   905  000FE0  6F1B               	movwf	(main@freq+2)& (0+255),b
   906  000FE2  0E00               	movlw	0
   907  000FE4  6F1C               	movwf	(main@freq+3)& (0+255),b
   908                           
   909                           ; BSR set to: 1
   910                           ;color_2.c: 134: float r,v,a,brillo;
   911                           ;color_2.c: 136: (*(&(*(&PORTD + 0x12))) &=~ (1<<(3)));
   912  000FE6  9695               	bcf	3989,3,c	;volatile
   913                           
   914                           ; BSR set to: 1
   915                           ;color_2.c: 137: (*(&(*(&PORTD + 0x12))) &=~ (1<<(2)));
   916  000FE8  9495               	bcf	3989,2,c	;volatile
   917                           
   918                           ; BSR set to: 1
   919                           ;color_2.c: 138: (*(&(*(&PORTD + 0x12))) &=~ (1<<(1)));
   920  000FEA  9295               	bcf	3989,1,c	;volatile
   921                           
   922                           ; BSR set to: 1
   923                           ;color_2.c: 139: (*(&(*(&PORTD + 0x12))) &=~ (1<<(0)));
   924  000FEC  9095               	bcf	3989,0,c	;volatile
   925                           
   926                           ; BSR set to: 1
   927                           ;color_2.c: 140: (*(&(*(&PORTD + 0x12))) &=~ (1<<(4)));
   928  000FEE  9895               	bcf	3989,4,c	;volatile
   929                           
   930                           ; BSR set to: 1
   931                           ;color_2.c: 142: lcd_init();
   932  000FF0  EC97  F017         	call	_lcd_init	;wreg free
   933                           
   934                           ;color_2.c: 143: lcd_msg("Detector de color");
   935  000FF4  0E91               	movlw	low STR_1
   936  000FF6  6E32               	movwf	lcd_msg@c,c
   937  000FF8  0E06               	movlw	high STR_1
   938  000FFA  6E33               	movwf	lcd_msg@c+1,c
   939  000FFC  ECE5  F018         	call	_lcd_msg	;wreg free
   940                           
   941                           ;color_2.c: 150: T1CONbits.RD16 = 1;
   942  001000  8ECD               	bsf	4045,7,c	;volatile
   943                           
   944                           ;color_2.c: 151: T1CKPS1 = 0;
   945  001002  9ACD               	bcf	4045,5,c	;volatile
   946                           
   947                           ;color_2.c: 152: T1CKPS0 = 0;
   948  001004  98CD               	bcf	4045,4,c	;volatile
   949                           
   950                           ;color_2.c: 153: TMR1CS = 0;
   951  001006  92CD               	bcf	4045,1,c	;volatile
   952                           
   953                           ;color_2.c: 154: TMR1ON = 1;
   954  001008  80CD               	bsf	4045,0,c	;volatile
   955                           
   956                           ;color_2.c: 155: TMR1IP = 0;
   957  00100A  909F               	bcf	3999,0,c	;volatile
   958                           
   959                           ;color_2.c: 156: TMR1IE = 1;
   960  00100C  809D               	bsf	3997,0,c	;volatile
   961                           
   962                           ;color_2.c: 158: prepareForInterrupts ();
   963  00100E  EC60  F01A         	call	_prepareForInterrupts	;wreg free
   964                           
   965                           ;color_2.c: 162: IPEN = 1;
   966  001012  8ED0               	bsf	4048,7,c	;volatile
   967                           
   968                           ;color_2.c: 163: GIEH = 1;
   969  001014  8EF2               	bsf	intcon,7,c	;volatile
   970                           
   971                           ;color_2.c: 164: GIEL = 1;
   972  001016  8CF2               	bsf	intcon,6,c	;volatile
   973                           
   974                           ;color_2.c: 172: seleccionarEscala(baja);
   975  001018  0E02               	movlw	2
   976  00101A  ECB6  F019         	call	_seleccionarEscala
   977  00101E                     
   978                           ;color_2.c: 177: {
   979                           ;color_2.c: 179: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
   980  00101E  0E10               	movlw	16
   981  001020  1A8C               	xorwf	3980,f,c	;volatile
   982                           
   983                           ;color_2.c: 180: seleccionarColor(sf);
   984  001022  0E02               	movlw	2
   985  001024  EC7A  F019         	call	_seleccionarColor
   986                           
   987                           ;color_2.c: 181: for (i = 0 ;i < 30; i++)
   988  001028  0E00               	movlw	0
   989  00102A  0101               	movlb	1	; () banked
   990  00102C  6F18               	movwf	main@i& (0+255),b
   991  00102E                     l5594:
   992                           
   993                           ; BSR set to: 1
   994  00102E  0E1D               	movlw	29
   995  001030  6518               	cpfsgt	main@i& (0+255),b
   996  001032  D001               	goto	l151
   997  001034  D028               	goto	u6480
   998  001036                     l151:
   999                           
  1000                           ; BSR set to: 1
  1001                           ;color_2.c: 182: {
  1002                           ;color_2.c: 183: _delay((unsigned long)((10)*(16000000/4000.0)));
  1003                           
  1004                           ; BSR set to: 1
  1005  001036  0E34               	movlw	52
  1006  001038  0100               	movlb	0	; () banked
  1007  00103A  6FF4               	movwf	??_main& (0+255),b
  1008  00103C  0EF1               	movlw	241
  1009  00103E                     u6697:
  1010  00103E  2EE8               	decfsz	wreg,f,c
  1011  001040  D7FE               	bra	u6697
  1012  001042  2FF4               	decfsz	??_main& (0+255),f,b
  1013  001044  D7FC               	bra	u6697
  1014  001046  D000               	nop2	
  1015                           
  1016                           ;color_2.c: 184: freq+= calcula();
  1017  001048  C119  F0B1         	movff	main@freq,___fladd@b
  1018  00104C  C11A  F0B2         	movff	main@freq+1,___fladd@b+1
  1019  001050  C11B  F0B3         	movff	main@freq+2,___fladd@b+2
  1020  001054  C11C  F0B4         	movff	main@freq+3,___fladd@b+3
  1021  001058  ECA4  F016         	call	_calcula	;wreg free
  1022  00105C  C09D  F0B5         	movff	?_calcula,___fladd@a
  1023  001060  C09E  F0B6         	movff	?_calcula+1,___fladd@a+1
  1024  001064  C09F  F0B7         	movff	?_calcula+2,___fladd@a+2
  1025  001068  C0A0  F0B8         	movff	?_calcula+3,___fladd@a+3
  1026  00106C  EC65  F00F         	call	___fladd	;wreg free
  1027  001070  C0B1  F119         	movff	?___fladd,main@freq
  1028  001074  C0B2  F11A         	movff	?___fladd+1,main@freq+1
  1029  001078  C0B3  F11B         	movff	?___fladd+2,main@freq+2
  1030  00107C  C0B4  F11C         	movff	?___fladd+3,main@freq+3
  1031  001080  0101               	movlb	1	; () banked
  1032  001082  2B18               	incf	main@i& (0+255),f,b
  1033  001084  D7D4               	goto	l5594
  1034  001086                     u6480:
  1035                           
  1036                           ; BSR set to: 1
  1037                           ;color_2.c: 185: }
  1038                           ;color_2.c: 186: freq/=30;
  1039                           
  1040                           ; BSR set to: 1
  1041  001086  C119  F02E         	movff	main@freq,___fldiv@b
  1042  00108A  C11A  F02F         	movff	main@freq+1,___fldiv@b+1
  1043  00108E  C11B  F030         	movff	main@freq+2,___fldiv@b+2
  1044  001092  C11C  F031         	movff	main@freq+3,___fldiv@b+3
  1045  001096  0E00               	movlw	0
  1046  001098  6E32               	movwf	___fldiv@a,c
  1047  00109A  0E00               	movlw	0
  1048  00109C  6E33               	movwf	___fldiv@a+1,c
  1049  00109E  0EF0               	movlw	240
  1050  0010A0  6E34               	movwf	___fldiv@a+2,c
  1051  0010A2  0E41               	movlw	65
  1052  0010A4  6E35               	movwf	___fldiv@a+3,c
  1053  0010A6  EC04  F011         	call	___fldiv	;wreg free
  1054  0010AA  C02E  F119         	movff	?___fldiv,main@freq
  1055  0010AE  C02F  F11A         	movff	?___fldiv+1,main@freq+1
  1056  0010B2  C030  F11B         	movff	?___fldiv+2,main@freq+2
  1057  0010B6  C031  F11C         	movff	?___fldiv+3,main@freq+3
  1058                           
  1059                           ;color_2.c: 187: brillo = freq;
  1060  0010BA  C119  F100         	movff	main@freq,main@brillo
  1061  0010BE  C11A  F101         	movff	main@freq+1,main@brillo+1
  1062  0010C2  C11B  F102         	movff	main@freq+2,main@brillo+2
  1063  0010C6  C11C  F103         	movff	main@freq+3,main@brillo+3
  1064                           
  1065                           ;color_2.c: 188: sprintf(value,"%5.3f",freq);
  1066  0010CA  0E4A               	movlw	low _value
  1067  0010CC  0100               	movlb	0	; () banked
  1068  0010CE  6FCD               	movwf	sprintf@sp& (0+255),b
  1069  0010D0  0E00               	movlw	high _value
  1070  0010D2  6FCE               	movwf	(sprintf@sp+1)& (0+255),b
  1071  0010D4  0EC7               	movlw	low STR_2
  1072  0010D6  6FCF               	movwf	sprintf@f& (0+255),b
  1073  0010D8  0E06               	movlw	high STR_2
  1074  0010DA  6FD0               	movwf	(sprintf@f+1)& (0+255),b
  1075  0010DC  C119  F0D1         	movff	main@freq,?_sprintf+4
  1076  0010E0  C11A  F0D2         	movff	main@freq+1,?_sprintf+5
  1077  0010E4  C11B  F0D3         	movff	main@freq+2,?_sprintf+6
  1078  0010E8  C11C  F0D4         	movff	main@freq+3,?_sprintf+7
  1079  0010EC  EC74  F003         	call	_sprintf	;wreg free
  1080                           
  1081                           ;color_2.c: 189: lcd_gotoxy(1,2);
  1082  0010F0  0E02               	movlw	2
  1083  0010F2  6E31               	movwf	lcd_gotoxy@y,c
  1084  0010F4  0E01               	movlw	1
  1085  0010F6  ECD2  F019         	call	_lcd_gotoxy
  1086                           
  1087                           ;color_2.c: 190: lcd_msg("B= ");
  1088  0010FA  0EDB               	movlw	low STR_3
  1089  0010FC  6E32               	movwf	lcd_msg@c,c
  1090  0010FE  0E06               	movlw	high STR_3
  1091  001100  6E33               	movwf	lcd_msg@c+1,c
  1092  001102  ECE5  F018         	call	_lcd_msg	;wreg free
  1093                           
  1094                           ;color_2.c: 191: lcd_msg(value);
  1095  001106  0E4A               	movlw	low _value
  1096  001108  6E32               	movwf	lcd_msg@c,c
  1097  00110A  0E00               	movlw	high _value
  1098  00110C  6E33               	movwf	lcd_msg@c+1,c
  1099  00110E  ECE5  F018         	call	_lcd_msg	;wreg free
  1100                           
  1101                           ;color_2.c: 192: freq=0.0;
  1102  001112  0E00               	movlw	0
  1103  001114  0101               	movlb	1	; () banked
  1104  001116  6F19               	movwf	main@freq& (0+255),b
  1105  001118  0E00               	movlw	0
  1106  00111A  6F1A               	movwf	(main@freq+1)& (0+255),b
  1107  00111C  0E00               	movlw	0
  1108  00111E  6F1B               	movwf	(main@freq+2)& (0+255),b
  1109  001120  0E00               	movlw	0
  1110  001122  6F1C               	movwf	(main@freq+3)& (0+255),b
  1111                           
  1112                           ; BSR set to: 1
  1113                           ;color_2.c: 193: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1114  001124  0E15               	movlw	21
  1115  001126  0100               	movlb	0	; () banked
  1116  001128  6FF5               	movwf	(??_main+1)& (0+255),b
  1117  00112A  0E4B               	movlw	75
  1118  00112C  6FF4               	movwf	??_main& (0+255),b
  1119  00112E  0EBE               	movlw	190
  1120  001130                     u6707:
  1121  001130  2EE8               	decfsz	wreg,f,c
  1122  001132  D7FE               	bra	u6707
  1123  001134  2FF4               	decfsz	??_main& (0+255),f,b
  1124  001136  D7FC               	bra	u6707
  1125  001138  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1126  00113A  D7FA               	bra	u6707
  1127  00113C  F000               	nop	
  1128                           
  1129                           ;color_2.c: 197: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1130  00113E  0E10               	movlw	16
  1131  001140  1A8C               	xorwf	3980,f,c	;volatile
  1132                           
  1133                           ;color_2.c: 198: seleccionarColor(rojo);
  1134  001142  0E00               	movlw	0
  1135  001144  EC7A  F019         	call	_seleccionarColor
  1136                           
  1137                           ;color_2.c: 199: for (i = 0 ;i < 30; i++)
  1138  001148  0E00               	movlw	0
  1139  00114A  0101               	movlb	1	; () banked
  1140  00114C  6F18               	movwf	main@i& (0+255),b
  1141  00114E                     l5628:
  1142                           
  1143                           ; BSR set to: 1
  1144  00114E  0E1D               	movlw	29
  1145  001150  6518               	cpfsgt	main@i& (0+255),b
  1146  001152  D001               	goto	l153
  1147  001154  D028               	goto	u6500
  1148  001156                     l153:
  1149                           
  1150                           ; BSR set to: 1
  1151                           ;color_2.c: 200: {
  1152                           ;color_2.c: 201: _delay((unsigned long)((10)*(16000000/4000.0)));
  1153                           
  1154                           ; BSR set to: 1
  1155  001156  0E34               	movlw	52
  1156  001158  0100               	movlb	0	; () banked
  1157  00115A  6FF4               	movwf	??_main& (0+255),b
  1158  00115C  0EF1               	movlw	241
  1159  00115E                     u6717:
  1160  00115E  2EE8               	decfsz	wreg,f,c
  1161  001160  D7FE               	bra	u6717
  1162  001162  2FF4               	decfsz	??_main& (0+255),f,b
  1163  001164  D7FC               	bra	u6717
  1164  001166  D000               	nop2	
  1165                           
  1166                           ;color_2.c: 202: freq+= calcula();
  1167  001168  C119  F0B1         	movff	main@freq,___fladd@b
  1168  00116C  C11A  F0B2         	movff	main@freq+1,___fladd@b+1
  1169  001170  C11B  F0B3         	movff	main@freq+2,___fladd@b+2
  1170  001174  C11C  F0B4         	movff	main@freq+3,___fladd@b+3
  1171  001178  ECA4  F016         	call	_calcula	;wreg free
  1172  00117C  C09D  F0B5         	movff	?_calcula,___fladd@a
  1173  001180  C09E  F0B6         	movff	?_calcula+1,___fladd@a+1
  1174  001184  C09F  F0B7         	movff	?_calcula+2,___fladd@a+2
  1175  001188  C0A0  F0B8         	movff	?_calcula+3,___fladd@a+3
  1176  00118C  EC65  F00F         	call	___fladd	;wreg free
  1177  001190  C0B1  F119         	movff	?___fladd,main@freq
  1178  001194  C0B2  F11A         	movff	?___fladd+1,main@freq+1
  1179  001198  C0B3  F11B         	movff	?___fladd+2,main@freq+2
  1180  00119C  C0B4  F11C         	movff	?___fladd+3,main@freq+3
  1181  0011A0  0101               	movlb	1	; () banked
  1182  0011A2  2B18               	incf	main@i& (0+255),f,b
  1183  0011A4  D7D4               	goto	l5628
  1184  0011A6                     u6500:
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;color_2.c: 203: }
  1188                           ;color_2.c: 204: freq/=30;
  1189                           
  1190                           ; BSR set to: 1
  1191  0011A6  C119  F02E         	movff	main@freq,___fldiv@b
  1192  0011AA  C11A  F02F         	movff	main@freq+1,___fldiv@b+1
  1193  0011AE  C11B  F030         	movff	main@freq+2,___fldiv@b+2
  1194  0011B2  C11C  F031         	movff	main@freq+3,___fldiv@b+3
  1195  0011B6  0E00               	movlw	0
  1196  0011B8  6E32               	movwf	___fldiv@a,c
  1197  0011BA  0E00               	movlw	0
  1198  0011BC  6E33               	movwf	___fldiv@a+1,c
  1199  0011BE  0EF0               	movlw	240
  1200  0011C0  6E34               	movwf	___fldiv@a+2,c
  1201  0011C2  0E41               	movlw	65
  1202  0011C4  6E35               	movwf	___fldiv@a+3,c
  1203  0011C6  EC04  F011         	call	___fldiv	;wreg free
  1204  0011CA  C02E  F119         	movff	?___fldiv,main@freq
  1205  0011CE  C02F  F11A         	movff	?___fldiv+1,main@freq+1
  1206  0011D2  C030  F11B         	movff	?___fldiv+2,main@freq+2
  1207  0011D6  C031  F11C         	movff	?___fldiv+3,main@freq+3
  1208                           
  1209                           ;color_2.c: 205: r=freq;
  1210  0011DA  C119  F108         	movff	main@freq,main@r
  1211  0011DE  C11A  F109         	movff	main@freq+1,main@r+1
  1212  0011E2  C11B  F10A         	movff	main@freq+2,main@r+2
  1213  0011E6  C11C  F10B         	movff	main@freq+3,main@r+3
  1214                           
  1215                           ;color_2.c: 206: sprintf(value,"%5.3f",freq);
  1216  0011EA  0E4A               	movlw	low _value
  1217  0011EC  0100               	movlb	0	; () banked
  1218  0011EE  6FCD               	movwf	sprintf@sp& (0+255),b
  1219  0011F0  0E00               	movlw	high _value
  1220  0011F2  6FCE               	movwf	(sprintf@sp+1)& (0+255),b
  1221  0011F4  0EC7               	movlw	low STR_2
  1222  0011F6  6FCF               	movwf	sprintf@f& (0+255),b
  1223  0011F8  0E06               	movlw	high STR_2
  1224  0011FA  6FD0               	movwf	(sprintf@f+1)& (0+255),b
  1225  0011FC  C119  F0D1         	movff	main@freq,?_sprintf+4
  1226  001200  C11A  F0D2         	movff	main@freq+1,?_sprintf+5
  1227  001204  C11B  F0D3         	movff	main@freq+2,?_sprintf+6
  1228  001208  C11C  F0D4         	movff	main@freq+3,?_sprintf+7
  1229  00120C  EC74  F003         	call	_sprintf	;wreg free
  1230                           
  1231                           ;color_2.c: 207: lcd_gotoxy(1,2);
  1232  001210  0E02               	movlw	2
  1233  001212  6E31               	movwf	lcd_gotoxy@y,c
  1234  001214  0E01               	movlw	1
  1235  001216  ECD2  F019         	call	_lcd_gotoxy
  1236                           
  1237                           ;color_2.c: 208: lcd_msg("R= ");
  1238  00121A  0EDF               	movlw	low STR_5
  1239  00121C  6E32               	movwf	lcd_msg@c,c
  1240  00121E  0E06               	movlw	high STR_5
  1241  001220  6E33               	movwf	lcd_msg@c+1,c
  1242  001222  ECE5  F018         	call	_lcd_msg	;wreg free
  1243                           
  1244                           ;color_2.c: 209: lcd_msg(value);
  1245  001226  0E4A               	movlw	low _value
  1246  001228  6E32               	movwf	lcd_msg@c,c
  1247  00122A  0E00               	movlw	high _value
  1248  00122C  6E33               	movwf	lcd_msg@c+1,c
  1249  00122E  ECE5  F018         	call	_lcd_msg	;wreg free
  1250                           
  1251                           ;color_2.c: 211: freq=0.0;
  1252  001232  0E00               	movlw	0
  1253  001234  0101               	movlb	1	; () banked
  1254  001236  6F19               	movwf	main@freq& (0+255),b
  1255  001238  0E00               	movlw	0
  1256  00123A  6F1A               	movwf	(main@freq+1)& (0+255),b
  1257  00123C  0E00               	movlw	0
  1258  00123E  6F1B               	movwf	(main@freq+2)& (0+255),b
  1259  001240  0E00               	movlw	0
  1260  001242  6F1C               	movwf	(main@freq+3)& (0+255),b
  1261                           
  1262                           ; BSR set to: 1
  1263                           ;color_2.c: 212: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1264  001244  0E15               	movlw	21
  1265  001246  0100               	movlb	0	; () banked
  1266  001248  6FF5               	movwf	(??_main+1)& (0+255),b
  1267  00124A  0E4B               	movlw	75
  1268  00124C  6FF4               	movwf	??_main& (0+255),b
  1269  00124E  0EBE               	movlw	190
  1270  001250                     u6727:
  1271  001250  2EE8               	decfsz	wreg,f,c
  1272  001252  D7FE               	bra	u6727
  1273  001254  2FF4               	decfsz	??_main& (0+255),f,b
  1274  001256  D7FC               	bra	u6727
  1275  001258  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1276  00125A  D7FA               	bra	u6727
  1277  00125C  F000               	nop	
  1278                           
  1279                           ;color_2.c: 215: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1280  00125E  0E10               	movlw	16
  1281  001260  1A8C               	xorwf	3980,f,c	;volatile
  1282                           
  1283                           ;color_2.c: 216: seleccionarColor(verde);
  1284  001262  0E03               	movlw	3
  1285  001264  EC7A  F019         	call	_seleccionarColor
  1286                           
  1287                           ;color_2.c: 217: for (i = 0 ;i < 30; i++)
  1288  001268  0E00               	movlw	0
  1289  00126A  0101               	movlb	1	; () banked
  1290  00126C  6F18               	movwf	main@i& (0+255),b
  1291  00126E                     l5662:
  1292                           
  1293                           ; BSR set to: 1
  1294  00126E  0E1D               	movlw	29
  1295  001270  6518               	cpfsgt	main@i& (0+255),b
  1296  001272  D001               	goto	l155
  1297  001274  D028               	goto	u6520
  1298  001276                     l155:
  1299                           
  1300                           ; BSR set to: 1
  1301                           ;color_2.c: 218: {
  1302                           ;color_2.c: 219: _delay((unsigned long)((10)*(16000000/4000.0)));
  1303                           
  1304                           ; BSR set to: 1
  1305  001276  0E34               	movlw	52
  1306  001278  0100               	movlb	0	; () banked
  1307  00127A  6FF4               	movwf	??_main& (0+255),b
  1308  00127C  0EF1               	movlw	241
  1309  00127E                     u6737:
  1310  00127E  2EE8               	decfsz	wreg,f,c
  1311  001280  D7FE               	bra	u6737
  1312  001282  2FF4               	decfsz	??_main& (0+255),f,b
  1313  001284  D7FC               	bra	u6737
  1314  001286  D000               	nop2	
  1315                           
  1316                           ;color_2.c: 220: freq+= calcula();
  1317  001288  C119  F0B1         	movff	main@freq,___fladd@b
  1318  00128C  C11A  F0B2         	movff	main@freq+1,___fladd@b+1
  1319  001290  C11B  F0B3         	movff	main@freq+2,___fladd@b+2
  1320  001294  C11C  F0B4         	movff	main@freq+3,___fladd@b+3
  1321  001298  ECA4  F016         	call	_calcula	;wreg free
  1322  00129C  C09D  F0B5         	movff	?_calcula,___fladd@a
  1323  0012A0  C09E  F0B6         	movff	?_calcula+1,___fladd@a+1
  1324  0012A4  C09F  F0B7         	movff	?_calcula+2,___fladd@a+2
  1325  0012A8  C0A0  F0B8         	movff	?_calcula+3,___fladd@a+3
  1326  0012AC  EC65  F00F         	call	___fladd	;wreg free
  1327  0012B0  C0B1  F119         	movff	?___fladd,main@freq
  1328  0012B4  C0B2  F11A         	movff	?___fladd+1,main@freq+1
  1329  0012B8  C0B3  F11B         	movff	?___fladd+2,main@freq+2
  1330  0012BC  C0B4  F11C         	movff	?___fladd+3,main@freq+3
  1331  0012C0  0101               	movlb	1	; () banked
  1332  0012C2  2B18               	incf	main@i& (0+255),f,b
  1333  0012C4  D7D4               	goto	l5662
  1334  0012C6                     u6520:
  1335                           
  1336                           ; BSR set to: 1
  1337                           ;color_2.c: 221: }
  1338                           ;color_2.c: 222: freq/=30;
  1339                           
  1340                           ; BSR set to: 1
  1341  0012C6  C119  F02E         	movff	main@freq,___fldiv@b
  1342  0012CA  C11A  F02F         	movff	main@freq+1,___fldiv@b+1
  1343  0012CE  C11B  F030         	movff	main@freq+2,___fldiv@b+2
  1344  0012D2  C11C  F031         	movff	main@freq+3,___fldiv@b+3
  1345  0012D6  0E00               	movlw	0
  1346  0012D8  6E32               	movwf	___fldiv@a,c
  1347  0012DA  0E00               	movlw	0
  1348  0012DC  6E33               	movwf	___fldiv@a+1,c
  1349  0012DE  0EF0               	movlw	240
  1350  0012E0  6E34               	movwf	___fldiv@a+2,c
  1351  0012E2  0E41               	movlw	65
  1352  0012E4  6E35               	movwf	___fldiv@a+3,c
  1353  0012E6  EC04  F011         	call	___fldiv	;wreg free
  1354  0012EA  C02E  F119         	movff	?___fldiv,main@freq
  1355  0012EE  C02F  F11A         	movff	?___fldiv+1,main@freq+1
  1356  0012F2  C030  F11B         	movff	?___fldiv+2,main@freq+2
  1357  0012F6  C031  F11C         	movff	?___fldiv+3,main@freq+3
  1358                           
  1359                           ;color_2.c: 223: v=freq;
  1360  0012FA  C119  F10C         	movff	main@freq,main@v
  1361  0012FE  C11A  F10D         	movff	main@freq+1,main@v+1
  1362  001302  C11B  F10E         	movff	main@freq+2,main@v+2
  1363  001306  C11C  F10F         	movff	main@freq+3,main@v+3
  1364                           
  1365                           ;color_2.c: 224: sprintf(value,"%5.3f",freq);
  1366  00130A  0E4A               	movlw	low _value
  1367  00130C  0100               	movlb	0	; () banked
  1368  00130E  6FCD               	movwf	sprintf@sp& (0+255),b
  1369  001310  0E00               	movlw	high _value
  1370  001312  6FCE               	movwf	(sprintf@sp+1)& (0+255),b
  1371  001314  0EC7               	movlw	low STR_2
  1372  001316  6FCF               	movwf	sprintf@f& (0+255),b
  1373  001318  0E06               	movlw	high STR_2
  1374  00131A  6FD0               	movwf	(sprintf@f+1)& (0+255),b
  1375  00131C  C119  F0D1         	movff	main@freq,?_sprintf+4
  1376  001320  C11A  F0D2         	movff	main@freq+1,?_sprintf+5
  1377  001324  C11B  F0D3         	movff	main@freq+2,?_sprintf+6
  1378  001328  C11C  F0D4         	movff	main@freq+3,?_sprintf+7
  1379  00132C  EC74  F003         	call	_sprintf	;wreg free
  1380                           
  1381                           ;color_2.c: 225: lcd_gotoxy(1,2);
  1382  001330  0E02               	movlw	2
  1383  001332  6E31               	movwf	lcd_gotoxy@y,c
  1384  001334  0E01               	movlw	1
  1385  001336  ECD2  F019         	call	_lcd_gotoxy
  1386                           
  1387                           ;color_2.c: 226: lcd_msg("V= ");
  1388  00133A  0EE3               	movlw	low STR_7
  1389  00133C  6E32               	movwf	lcd_msg@c,c
  1390  00133E  0E06               	movlw	high STR_7
  1391  001340  6E33               	movwf	lcd_msg@c+1,c
  1392  001342  ECE5  F018         	call	_lcd_msg	;wreg free
  1393                           
  1394                           ;color_2.c: 227: lcd_msg(value);
  1395  001346  0E4A               	movlw	low _value
  1396  001348  6E32               	movwf	lcd_msg@c,c
  1397  00134A  0E00               	movlw	high _value
  1398  00134C  6E33               	movwf	lcd_msg@c+1,c
  1399  00134E  ECE5  F018         	call	_lcd_msg	;wreg free
  1400                           
  1401                           ;color_2.c: 228: freq=0.0;
  1402  001352  0E00               	movlw	0
  1403  001354  0101               	movlb	1	; () banked
  1404  001356  6F19               	movwf	main@freq& (0+255),b
  1405  001358  0E00               	movlw	0
  1406  00135A  6F1A               	movwf	(main@freq+1)& (0+255),b
  1407  00135C  0E00               	movlw	0
  1408  00135E  6F1B               	movwf	(main@freq+2)& (0+255),b
  1409  001360  0E00               	movlw	0
  1410  001362  6F1C               	movwf	(main@freq+3)& (0+255),b
  1411                           
  1412                           ; BSR set to: 1
  1413                           ;color_2.c: 229: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1414  001364  0E15               	movlw	21
  1415  001366  0100               	movlb	0	; () banked
  1416  001368  6FF5               	movwf	(??_main+1)& (0+255),b
  1417  00136A  0E4B               	movlw	75
  1418  00136C  6FF4               	movwf	??_main& (0+255),b
  1419  00136E  0EBE               	movlw	190
  1420  001370                     u6747:
  1421  001370  2EE8               	decfsz	wreg,f,c
  1422  001372  D7FE               	bra	u6747
  1423  001374  2FF4               	decfsz	??_main& (0+255),f,b
  1424  001376  D7FC               	bra	u6747
  1425  001378  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1426  00137A  D7FA               	bra	u6747
  1427  00137C  F000               	nop	
  1428                           
  1429                           ;color_2.c: 232: (*(&(*(&PORTD + 0x09))) ^= (1<<(4)));
  1430  00137E  0E10               	movlw	16
  1431  001380  1A8C               	xorwf	3980,f,c	;volatile
  1432                           
  1433                           ;color_2.c: 233: for (i = 0 ;i < 30; i++)
  1434  001382  0E00               	movlw	0
  1435  001384  0101               	movlb	1	; () banked
  1436  001386  6F18               	movwf	main@i& (0+255),b
  1437  001388                     l5694:
  1438                           
  1439                           ; BSR set to: 1
  1440  001388  0E1D               	movlw	29
  1441  00138A  6518               	cpfsgt	main@i& (0+255),b
  1442  00138C  D001               	goto	l157
  1443  00138E  D028               	goto	u6540
  1444  001390                     l157:
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;color_2.c: 234: {
  1448                           ;color_2.c: 235: _delay((unsigned long)((10)*(16000000/4000.0)));
  1449                           
  1450                           ; BSR set to: 1
  1451  001390  0E34               	movlw	52
  1452  001392  0100               	movlb	0	; () banked
  1453  001394  6FF4               	movwf	??_main& (0+255),b
  1454  001396  0EF1               	movlw	241
  1455  001398                     u6757:
  1456  001398  2EE8               	decfsz	wreg,f,c
  1457  00139A  D7FE               	bra	u6757
  1458  00139C  2FF4               	decfsz	??_main& (0+255),f,b
  1459  00139E  D7FC               	bra	u6757
  1460  0013A0  D000               	nop2	
  1461                           
  1462                           ;color_2.c: 236: freq+= calcula();
  1463  0013A2  C119  F0B1         	movff	main@freq,___fladd@b
  1464  0013A6  C11A  F0B2         	movff	main@freq+1,___fladd@b+1
  1465  0013AA  C11B  F0B3         	movff	main@freq+2,___fladd@b+2
  1466  0013AE  C11C  F0B4         	movff	main@freq+3,___fladd@b+3
  1467  0013B2  ECA4  F016         	call	_calcula	;wreg free
  1468  0013B6  C09D  F0B5         	movff	?_calcula,___fladd@a
  1469  0013BA  C09E  F0B6         	movff	?_calcula+1,___fladd@a+1
  1470  0013BE  C09F  F0B7         	movff	?_calcula+2,___fladd@a+2
  1471  0013C2  C0A0  F0B8         	movff	?_calcula+3,___fladd@a+3
  1472  0013C6  EC65  F00F         	call	___fladd	;wreg free
  1473  0013CA  C0B1  F119         	movff	?___fladd,main@freq
  1474  0013CE  C0B2  F11A         	movff	?___fladd+1,main@freq+1
  1475  0013D2  C0B3  F11B         	movff	?___fladd+2,main@freq+2
  1476  0013D6  C0B4  F11C         	movff	?___fladd+3,main@freq+3
  1477  0013DA  0101               	movlb	1	; () banked
  1478  0013DC  2B18               	incf	main@i& (0+255),f,b
  1479  0013DE  D7D4               	goto	l5694
  1480  0013E0                     u6540:
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;color_2.c: 237: }
  1484                           ;color_2.c: 238: freq/=30;
  1485                           
  1486                           ; BSR set to: 1
  1487  0013E0  C119  F02E         	movff	main@freq,___fldiv@b
  1488  0013E4  C11A  F02F         	movff	main@freq+1,___fldiv@b+1
  1489  0013E8  C11B  F030         	movff	main@freq+2,___fldiv@b+2
  1490  0013EC  C11C  F031         	movff	main@freq+3,___fldiv@b+3
  1491  0013F0  0E00               	movlw	0
  1492  0013F2  6E32               	movwf	___fldiv@a,c
  1493  0013F4  0E00               	movlw	0
  1494  0013F6  6E33               	movwf	___fldiv@a+1,c
  1495  0013F8  0EF0               	movlw	240
  1496  0013FA  6E34               	movwf	___fldiv@a+2,c
  1497  0013FC  0E41               	movlw	65
  1498  0013FE  6E35               	movwf	___fldiv@a+3,c
  1499  001400  EC04  F011         	call	___fldiv	;wreg free
  1500  001404  C02E  F119         	movff	?___fldiv,main@freq
  1501  001408  C02F  F11A         	movff	?___fldiv+1,main@freq+1
  1502  00140C  C030  F11B         	movff	?___fldiv+2,main@freq+2
  1503  001410  C031  F11C         	movff	?___fldiv+3,main@freq+3
  1504                           
  1505                           ;color_2.c: 239: a=freq;
  1506  001414  C119  F110         	movff	main@freq,main@a
  1507  001418  C11A  F111         	movff	main@freq+1,main@a+1
  1508  00141C  C11B  F112         	movff	main@freq+2,main@a+2
  1509  001420  C11C  F113         	movff	main@freq+3,main@a+3
  1510                           
  1511                           ;color_2.c: 240: sprintf(value,"%5.3f",freq);
  1512  001424  0E4A               	movlw	low _value
  1513  001426  0100               	movlb	0	; () banked
  1514  001428  6FCD               	movwf	sprintf@sp& (0+255),b
  1515  00142A  0E00               	movlw	high _value
  1516  00142C  6FCE               	movwf	(sprintf@sp+1)& (0+255),b
  1517  00142E  0EC7               	movlw	low STR_2
  1518  001430  6FCF               	movwf	sprintf@f& (0+255),b
  1519  001432  0E06               	movlw	high STR_2
  1520  001434  6FD0               	movwf	(sprintf@f+1)& (0+255),b
  1521  001436  C119  F0D1         	movff	main@freq,?_sprintf+4
  1522  00143A  C11A  F0D2         	movff	main@freq+1,?_sprintf+5
  1523  00143E  C11B  F0D3         	movff	main@freq+2,?_sprintf+6
  1524  001442  C11C  F0D4         	movff	main@freq+3,?_sprintf+7
  1525  001446  EC74  F003         	call	_sprintf	;wreg free
  1526                           
  1527                           ;color_2.c: 241: lcd_gotoxy(1,2);
  1528  00144A  0E02               	movlw	2
  1529  00144C  6E31               	movwf	lcd_gotoxy@y,c
  1530  00144E  0E01               	movlw	1
  1531  001450  ECD2  F019         	call	_lcd_gotoxy
  1532                           
  1533                           ;color_2.c: 242: lcd_msg("A= ");
  1534  001454  0ED7               	movlw	low STR_9
  1535  001456  6E32               	movwf	lcd_msg@c,c
  1536  001458  0E06               	movlw	high STR_9
  1537  00145A  6E33               	movwf	lcd_msg@c+1,c
  1538  00145C  ECE5  F018         	call	_lcd_msg	;wreg free
  1539                           
  1540                           ;color_2.c: 243: lcd_msg(value);
  1541  001460  0E4A               	movlw	low _value
  1542  001462  6E32               	movwf	lcd_msg@c,c
  1543  001464  0E00               	movlw	high _value
  1544  001466  6E33               	movwf	lcd_msg@c+1,c
  1545  001468  ECE5  F018         	call	_lcd_msg	;wreg free
  1546                           
  1547                           ;color_2.c: 244: freq=0.0;
  1548  00146C  0E00               	movlw	0
  1549  00146E  0101               	movlb	1	; () banked
  1550  001470  6F19               	movwf	main@freq& (0+255),b
  1551  001472  0E00               	movlw	0
  1552  001474  6F1A               	movwf	(main@freq+1)& (0+255),b
  1553  001476  0E00               	movlw	0
  1554  001478  6F1B               	movwf	(main@freq+2)& (0+255),b
  1555  00147A  0E00               	movlw	0
  1556  00147C  6F1C               	movwf	(main@freq+3)& (0+255),b
  1557                           
  1558                           ; BSR set to: 1
  1559                           ;color_2.c: 245: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1560  00147E  0E15               	movlw	21
  1561  001480  0100               	movlb	0	; () banked
  1562  001482  6FF5               	movwf	(??_main+1)& (0+255),b
  1563  001484  0E4B               	movlw	75
  1564  001486  6FF4               	movwf	??_main& (0+255),b
  1565  001488  0EBE               	movlw	190
  1566  00148A                     u6767:
  1567  00148A  2EE8               	decfsz	wreg,f,c
  1568  00148C  D7FE               	bra	u6767
  1569  00148E  2FF4               	decfsz	??_main& (0+255),f,b
  1570  001490  D7FC               	bra	u6767
  1571  001492  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1572  001494  D7FA               	bra	u6767
  1573  001496  F000               	nop	
  1574                           
  1575                           ;color_2.c: 247: lcd_gotoxy(1,2);
  1576  001498  0E02               	movlw	2
  1577  00149A  6E31               	movwf	lcd_gotoxy@y,c
  1578  00149C  0E01               	movlw	1
  1579  00149E  ECD2  F019         	call	_lcd_gotoxy
  1580                           
  1581                           ;color_2.c: 248: if(brillo>r>v>a)
  1582  0014A2  C100  F032         	movff	main@brillo,___flge@ff2
  1583  0014A6  C101  F033         	movff	main@brillo+1,___flge@ff2+1
  1584  0014AA  C102  F034         	movff	main@brillo+2,___flge@ff2+2
  1585  0014AE  C103  F035         	movff	main@brillo+3,___flge@ff2+3
  1586  0014B2  C108  F02E         	movff	main@r,___flge@ff1
  1587  0014B6  C109  F02F         	movff	main@r+1,___flge@ff1+1
  1588  0014BA  C10A  F030         	movff	main@r+2,___flge@ff1+2
  1589  0014BE  C10B  F031         	movff	main@r+3,___flge@ff1+3
  1590  0014C2  EC14  F016         	call	___flge	;wreg free
  1591  0014C6  B0D8               	btfsc	status,0,c
  1592  0014C8  D002               	goto	u6550
  1593  0014CA  0E01               	movlw	1
  1594  0014CC  D001               	goto	u6560
  1595  0014CE                     u6550:
  1596  0014CE  0E00               	movlw	0
  1597  0014D0                     u6560:
  1598  0014D0  0100               	movlb	0	; () banked
  1599  0014D2  6F80               	movwf	___xxtofl@val& (0+255),b
  1600  0014D4  6B81               	clrf	(___xxtofl@val+1)& (0+255),b
  1601  0014D6  6B82               	clrf	(___xxtofl@val+2)& (0+255),b
  1602  0014D8  6B83               	clrf	(___xxtofl@val+3)& (0+255),b
  1603  0014DA  0E01               	movlw	1
  1604  0014DC  ECAA  F013         	call	___xxtofl
  1605  0014E0  C080  F114         	movff	?___xxtofl,_main$870
  1606  0014E4  C081  F115         	movff	?___xxtofl+1,_main$870+1
  1607  0014E8  C082  F116         	movff	?___xxtofl+2,_main$870+2
  1608  0014EC  C083  F117         	movff	?___xxtofl+3,_main$870+3
  1609                           
  1610                           ;color_2.c: 248: if(brillo>r>v>a)
  1611  0014F0  C114  F032         	movff	_main$870,___flge@ff2
  1612  0014F4  C115  F033         	movff	_main$870+1,___flge@ff2+1
  1613  0014F8  C116  F034         	movff	_main$870+2,___flge@ff2+2
  1614  0014FC  C117  F035         	movff	_main$870+3,___flge@ff2+3
  1615  001500  C10C  F02E         	movff	main@v,___flge@ff1
  1616  001504  C10D  F02F         	movff	main@v+1,___flge@ff1+1
  1617  001508  C10E  F030         	movff	main@v+2,___flge@ff1+2
  1618  00150C  C10F  F031         	movff	main@v+3,___flge@ff1+3
  1619  001510  EC14  F016         	call	___flge	;wreg free
  1620  001514  B0D8               	btfsc	status,0,c
  1621  001516  D002               	goto	u6570
  1622  001518  0E01               	movlw	1
  1623  00151A  D001               	goto	u6580
  1624  00151C                     u6570:
  1625  00151C  0E00               	movlw	0
  1626  00151E                     u6580:
  1627  00151E  0100               	movlb	0	; () banked
  1628  001520  6F80               	movwf	___xxtofl@val& (0+255),b
  1629  001522  6B81               	clrf	(___xxtofl@val+1)& (0+255),b
  1630  001524  6B82               	clrf	(___xxtofl@val+2)& (0+255),b
  1631  001526  6B83               	clrf	(___xxtofl@val+3)& (0+255),b
  1632  001528  0E01               	movlw	1
  1633  00152A  ECAA  F013         	call	___xxtofl
  1634  00152E  C080  F104         	movff	?___xxtofl,_main$871
  1635  001532  C081  F105         	movff	?___xxtofl+1,_main$871+1
  1636  001536  C082  F106         	movff	?___xxtofl+2,_main$871+2
  1637  00153A  C083  F107         	movff	?___xxtofl+3,_main$871+3
  1638                           
  1639                           ;color_2.c: 248: if(brillo>r>v>a)
  1640  00153E  C110  F02E         	movff	main@a,___flge@ff1
  1641  001542  C111  F02F         	movff	main@a+1,___flge@ff1+1
  1642  001546  C112  F030         	movff	main@a+2,___flge@ff1+2
  1643  00154A  C113  F031         	movff	main@a+3,___flge@ff1+3
  1644  00154E  C104  F032         	movff	_main$871,___flge@ff2
  1645  001552  C105  F033         	movff	_main$871+1,___flge@ff2+1
  1646  001556  C106  F034         	movff	_main$871+2,___flge@ff2+2
  1647  00155A  C107  F035         	movff	_main$871+3,___flge@ff2+3
  1648  00155E  EC14  F016         	call	___flge	;wreg free
  1649  001562  B0D8               	btfsc	status,0,c
  1650  001564  D007               	goto	l159
  1651                           
  1652                           ;color_2.c: 249: lcd_msg("mucho brillo");
  1653  001566  0EB4               	movlw	low STR_10
  1654  001568  6E32               	movwf	lcd_msg@c,c
  1655  00156A  0E06               	movlw	high STR_10
  1656  00156C  6E33               	movwf	lcd_msg@c+1,c
  1657  00156E  ECE5  F018         	call	_lcd_msg	;wreg free
  1658  001572  D0CC               	goto	l166
  1659  001574                     l159:
  1660                           
  1661                           ;color_2.c: 250: else if(r>v>a)
  1662  001574  C108  F032         	movff	main@r,___flge@ff2
  1663  001578  C109  F033         	movff	main@r+1,___flge@ff2+1
  1664  00157C  C10A  F034         	movff	main@r+2,___flge@ff2+2
  1665  001580  C10B  F035         	movff	main@r+3,___flge@ff2+3
  1666  001584  C10C  F02E         	movff	main@v,___flge@ff1
  1667  001588  C10D  F02F         	movff	main@v+1,___flge@ff1+1
  1668  00158C  C10E  F030         	movff	main@v+2,___flge@ff1+2
  1669  001590  C10F  F031         	movff	main@v+3,___flge@ff1+3
  1670  001594  EC14  F016         	call	___flge	;wreg free
  1671  001598  B0D8               	btfsc	status,0,c
  1672  00159A  D002               	goto	u6600
  1673  00159C  0E01               	movlw	1
  1674  00159E  D001               	goto	u6610
  1675  0015A0                     u6600:
  1676  0015A0  0E00               	movlw	0
  1677  0015A2                     u6610:
  1678  0015A2  0100               	movlb	0	; () banked
  1679  0015A4  6F80               	movwf	___xxtofl@val& (0+255),b
  1680  0015A6  6B81               	clrf	(___xxtofl@val+1)& (0+255),b
  1681  0015A8  6B82               	clrf	(___xxtofl@val+2)& (0+255),b
  1682  0015AA  6B83               	clrf	(___xxtofl@val+3)& (0+255),b
  1683  0015AC  0E01               	movlw	1
  1684  0015AE  ECAA  F013         	call	___xxtofl
  1685  0015B2  C080  F114         	movff	?___xxtofl,_main$870
  1686  0015B6  C081  F115         	movff	?___xxtofl+1,_main$870+1
  1687  0015BA  C082  F116         	movff	?___xxtofl+2,_main$870+2
  1688  0015BE  C083  F117         	movff	?___xxtofl+3,_main$870+3
  1689                           
  1690                           ;color_2.c: 250: else if(r>v>a)
  1691  0015C2  C110  F02E         	movff	main@a,___flge@ff1
  1692  0015C6  C111  F02F         	movff	main@a+1,___flge@ff1+1
  1693  0015CA  C112  F030         	movff	main@a+2,___flge@ff1+2
  1694  0015CE  C113  F031         	movff	main@a+3,___flge@ff1+3
  1695  0015D2  C114  F032         	movff	_main$870,___flge@ff2
  1696  0015D6  C115  F033         	movff	_main$870+1,___flge@ff2+1
  1697  0015DA  C116  F034         	movff	_main$870+2,___flge@ff2+2
  1698  0015DE  C117  F035         	movff	_main$870+3,___flge@ff2+3
  1699  0015E2  EC14  F016         	call	___flge	;wreg free
  1700  0015E6  B0D8               	btfsc	status,0,c
  1701  0015E8  D007               	goto	l161
  1702                           
  1703                           ;color_2.c: 251: lcd_msg("Rojo");
  1704  0015EA  0ED2               	movlw	low STR_11
  1705  0015EC  6E32               	movwf	lcd_msg@c,c
  1706  0015EE  0E06               	movlw	high STR_11
  1707  0015F0  6E33               	movwf	lcd_msg@c+1,c
  1708  0015F2  ECE5  F018         	call	_lcd_msg	;wreg free
  1709  0015F6  D08A               	goto	l166
  1710  0015F8                     l161:
  1711                           
  1712                           ;color_2.c: 252: else if(v>r>a)
  1713  0015F8  C10C  F032         	movff	main@v,___flge@ff2
  1714  0015FC  C10D  F033         	movff	main@v+1,___flge@ff2+1
  1715  001600  C10E  F034         	movff	main@v+2,___flge@ff2+2
  1716  001604  C10F  F035         	movff	main@v+3,___flge@ff2+3
  1717  001608  C108  F02E         	movff	main@r,___flge@ff1
  1718  00160C  C109  F02F         	movff	main@r+1,___flge@ff1+1
  1719  001610  C10A  F030         	movff	main@r+2,___flge@ff1+2
  1720  001614  C10B  F031         	movff	main@r+3,___flge@ff1+3
  1721  001618  EC14  F016         	call	___flge	;wreg free
  1722  00161C  B0D8               	btfsc	status,0,c
  1723  00161E  D002               	goto	u6630
  1724  001620  0E01               	movlw	1
  1725  001622  D001               	goto	u6640
  1726  001624                     u6630:
  1727  001624  0E00               	movlw	0
  1728  001626                     u6640:
  1729  001626  0100               	movlb	0	; () banked
  1730  001628  6F80               	movwf	___xxtofl@val& (0+255),b
  1731  00162A  6B81               	clrf	(___xxtofl@val+1)& (0+255),b
  1732  00162C  6B82               	clrf	(___xxtofl@val+2)& (0+255),b
  1733  00162E  6B83               	clrf	(___xxtofl@val+3)& (0+255),b
  1734  001630  0E01               	movlw	1
  1735  001632  ECAA  F013         	call	___xxtofl
  1736  001636  C080  F114         	movff	?___xxtofl,_main$870
  1737  00163A  C081  F115         	movff	?___xxtofl+1,_main$870+1
  1738  00163E  C082  F116         	movff	?___xxtofl+2,_main$870+2
  1739  001642  C083  F117         	movff	?___xxtofl+3,_main$870+3
  1740                           
  1741                           ;color_2.c: 252: else if(v>r>a)
  1742  001646  C110  F02E         	movff	main@a,___flge@ff1
  1743  00164A  C111  F02F         	movff	main@a+1,___flge@ff1+1
  1744  00164E  C112  F030         	movff	main@a+2,___flge@ff1+2
  1745  001652  C113  F031         	movff	main@a+3,___flge@ff1+3
  1746  001656  C114  F032         	movff	_main$870,___flge@ff2
  1747  00165A  C115  F033         	movff	_main$870+1,___flge@ff2+1
  1748  00165E  C116  F034         	movff	_main$870+2,___flge@ff2+2
  1749  001662  C117  F035         	movff	_main$870+3,___flge@ff2+3
  1750  001666  EC14  F016         	call	___flge	;wreg free
  1751  00166A  B0D8               	btfsc	status,0,c
  1752  00166C  D007               	goto	l163
  1753                           
  1754                           ;color_2.c: 253: lcd_msg("verde");
  1755  00166E  0EC1               	movlw	low STR_12
  1756  001670  6E32               	movwf	lcd_msg@c,c
  1757  001672  0E06               	movlw	high STR_12
  1758  001674  6E33               	movwf	lcd_msg@c+1,c
  1759  001676  ECE5  F018         	call	_lcd_msg	;wreg free
  1760  00167A  D048               	goto	l166
  1761  00167C                     l163:
  1762                           
  1763                           ;color_2.c: 254: else if(a>v>r)
  1764  00167C  C110  F032         	movff	main@a,___flge@ff2
  1765  001680  C111  F033         	movff	main@a+1,___flge@ff2+1
  1766  001684  C112  F034         	movff	main@a+2,___flge@ff2+2
  1767  001688  C113  F035         	movff	main@a+3,___flge@ff2+3
  1768  00168C  C10C  F02E         	movff	main@v,___flge@ff1
  1769  001690  C10D  F02F         	movff	main@v+1,___flge@ff1+1
  1770  001694  C10E  F030         	movff	main@v+2,___flge@ff1+2
  1771  001698  C10F  F031         	movff	main@v+3,___flge@ff1+3
  1772  00169C  EC14  F016         	call	___flge	;wreg free
  1773  0016A0  B0D8               	btfsc	status,0,c
  1774  0016A2  D002               	goto	u6660
  1775  0016A4  0E01               	movlw	1
  1776  0016A6  D001               	goto	u6670
  1777  0016A8                     u6660:
  1778  0016A8  0E00               	movlw	0
  1779  0016AA                     u6670:
  1780  0016AA  0100               	movlb	0	; () banked
  1781  0016AC  6F80               	movwf	___xxtofl@val& (0+255),b
  1782  0016AE  6B81               	clrf	(___xxtofl@val+1)& (0+255),b
  1783  0016B0  6B82               	clrf	(___xxtofl@val+2)& (0+255),b
  1784  0016B2  6B83               	clrf	(___xxtofl@val+3)& (0+255),b
  1785  0016B4  0E01               	movlw	1
  1786  0016B6  ECAA  F013         	call	___xxtofl
  1787  0016BA  C080  F114         	movff	?___xxtofl,_main$870
  1788  0016BE  C081  F115         	movff	?___xxtofl+1,_main$870+1
  1789  0016C2  C082  F116         	movff	?___xxtofl+2,_main$870+2
  1790  0016C6  C083  F117         	movff	?___xxtofl+3,_main$870+3
  1791                           
  1792                           ;color_2.c: 254: else if(a>v>r)
  1793  0016CA  C108  F02E         	movff	main@r,___flge@ff1
  1794  0016CE  C109  F02F         	movff	main@r+1,___flge@ff1+1
  1795  0016D2  C10A  F030         	movff	main@r+2,___flge@ff1+2
  1796  0016D6  C10B  F031         	movff	main@r+3,___flge@ff1+3
  1797  0016DA  C114  F032         	movff	_main$870,___flge@ff2
  1798  0016DE  C115  F033         	movff	_main$870+1,___flge@ff2+1
  1799  0016E2  C116  F034         	movff	_main$870+2,___flge@ff2+2
  1800  0016E6  C117  F035         	movff	_main$870+3,___flge@ff2+3
  1801  0016EA  EC14  F016         	call	___flge	;wreg free
  1802  0016EE  B0D8               	btfsc	status,0,c
  1803  0016F0  D007               	goto	l165
  1804                           
  1805                           ;color_2.c: 255: lcd_msg("azul");
  1806  0016F2  0ECD               	movlw	low STR_13
  1807  0016F4  6E32               	movwf	lcd_msg@c,c
  1808  0016F6  0E06               	movlw	high STR_13
  1809  0016F8  6E33               	movwf	lcd_msg@c+1,c
  1810  0016FA  ECE5  F018         	call	_lcd_msg	;wreg free
  1811  0016FE  D006               	goto	l166
  1812  001700                     l165:
  1813                           
  1814                           ;color_2.c: 256: else
  1815                           ;color_2.c: 257: lcd_msg("no def          ");
  1816  001700  0EA3               	movlw	low STR_14
  1817  001702  6E32               	movwf	lcd_msg@c,c
  1818  001704  0E06               	movlw	high STR_14
  1819  001706  6E33               	movwf	lcd_msg@c+1,c
  1820  001708  ECE5  F018         	call	_lcd_msg	;wreg free
  1821  00170C                     l166:
  1822                           
  1823                           ;color_2.c: 258: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1824  00170C  0E3D               	movlw	61
  1825  00170E  0100               	movlb	0	; () banked
  1826  001710  6FF5               	movwf	(??_main+1)& (0+255),b
  1827  001712  0EE1               	movlw	225
  1828  001714  6FF4               	movwf	??_main& (0+255),b
  1829  001716  0E3F               	movlw	63
  1830  001718                     u6777:
  1831  001718  2EE8               	decfsz	wreg,f,c
  1832  00171A  D7FE               	bra	u6777
  1833  00171C  2FF4               	decfsz	??_main& (0+255),f,b
  1834  00171E  D7FC               	bra	u6777
  1835  001720  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1836  001722  D7FA               	bra	u6777
  1837  001724  D000               	nop2	
  1838  001726  D47B               	goto	l150
  1839  001728                     __end_of_main:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           intcon	equ	0xFF2
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _sprintf *****************
  1848 ;; Defined at:
  1849 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  sp              2   77[BANK0 ] PTR unsigned char 
  1852 ;;		 -> value(8), 
  1853 ;;  f               2   79[BANK0 ] PTR const unsigned char 
  1854 ;;		 -> STR_8(6), STR_6(6), STR_4(6), STR_2(6), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  fval            4  109[BANK0 ] PTR const unsigned char 
  1857 ;;  tmpval          4  103[BANK0 ] struct .
  1858 ;;  val             4   95[BANK0 ] unsigned long 
  1859 ;;  cp              3    0        PTR const unsigned char 
  1860 ;;  prec            2  113[BANK0 ] int 
  1861 ;;  exp             2  107[BANK0 ] int 
  1862 ;;  width           2  101[BANK0 ] int 
  1863 ;;  flag            2   99[BANK0 ] unsigned short 
  1864 ;;  ap              2   93[BANK0 ] PTR void [1]
  1865 ;;		 -> ?_sprintf(2), 
  1866 ;;  len             2    0        unsigned int 
  1867 ;;  c               1  115[BANK0 ] char 
  1868 ;;  d               1    0        unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2   77[BANK0 ] int 
  1871 ;; Registers used:
  1872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1878 ;;      Params:         0       8       0       0       0       0       0
  1879 ;;      Locals:         0      27       0       0       0       0       0
  1880 ;;      Temps:          0       4       0       0       0       0       0
  1881 ;;      Totals:         0      39       0       0       0       0       0
  1882 ;;Total ram usage:       39 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    4
  1885 ;; This function calls:
  1886 ;;		___awdiv
  1887 ;;		___fladd
  1888 ;;		___flge
  1889 ;;		___flmul
  1890 ;;		___flneg
  1891 ;;		___flsub
  1892 ;;		___fltol
  1893 ;;		___lldiv
  1894 ;;		___llmod
  1895 ;;		___wmul
  1896 ;;		___xxtofl
  1897 ;;		__div_to_l_
  1898 ;;		__tdiv_to_l_
  1899 ;;		_fround
  1900 ;;		_isdigit
  1901 ;;		_scale
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text1
  1908  0006E8                     __ptext1:
  1909                           	opt stack 0
  1910  0006E8                     _sprintf:
  1911                           	opt stack 26
  1912                           
  1913                           ;doprnt.c: 494: va_list ap;
  1914                           ;doprnt.c: 499: signed char c;
  1915                           ;doprnt.c: 501: int width;
  1916                           ;doprnt.c: 504: int prec;
  1917                           ;doprnt.c: 508: unsigned short flag;
  1918                           ;doprnt.c: 515: char d;
  1919                           ;doprnt.c: 516: double fval;
  1920                           ;doprnt.c: 517: int exp;
  1921                           ;doprnt.c: 523: union {
  1922                           ;doprnt.c: 524: unsigned long vd;
  1923                           ;doprnt.c: 525: double integ;
  1924                           ;doprnt.c: 526: } tmpval;
  1925                           ;doprnt.c: 528: unsigned long val;
  1926                           ;doprnt.c: 529: unsigned len;
  1927                           ;doprnt.c: 530: const char * cp;
  1928                           ;doprnt.c: 533: *ap = __va_start();
  1929                           
  1930                           ;incstack = 0
  1931  0006E8  0ED1               	movlw	low (?_sprintf+4)
  1932  0006EA  0100               	movlb	0	; () banked
  1933  0006EC  6FDD               	movwf	sprintf@ap& (0+255),b
  1934  0006EE  0E00               	movlw	high (?_sprintf+4)
  1935  0006F0  6FDE               	movwf	(sprintf@ap+1)& (0+255),b
  1936                           
  1937                           ;doprnt.c: 536: while(c = *f++) {
  1938  0006F2  EFD6  F007         	goto	l303
  1939  0006F6                     
  1940                           ; BSR set to: 0
  1941                           ;doprnt.c: 538: if(c != '%')
  1942                           
  1943                           ; BSR set to: 0
  1944  0006F6  0E25               	movlw	37
  1945  0006F8  19F3               	xorwf	sprintf@c& (0+255),w,b
  1946  0006FA  B4D8               	btfsc	status,2,c
  1947  0006FC  D008               	goto	l232
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;doprnt.c: 540: {
  1951                           ;doprnt.c: 541: ((*sp++ = (c)));
  1952  0006FE  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  1953  000702  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  1954  000706  C0F3  FFDF         	movff	sprintf@c,indf2
  1955  00070A  EFD4  F007         	goto	l5538
  1956  00070E                     l232:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 543: }
  1960                           ;doprnt.c: 546: width = 0;
  1961                           
  1962                           ; BSR set to: 0
  1963  00070E  0E00               	movlw	0
  1964  000710  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  1965  000712  0E00               	movlw	0
  1966  000714  6FE5               	movwf	sprintf@width& (0+255),b
  1967                           
  1968                           ;doprnt.c: 548: flag = 0;
  1969  000716  0E00               	movlw	0
  1970  000718  6FE4               	movwf	(sprintf@flag+1)& (0+255),b
  1971  00071A  0E00               	movlw	0
  1972  00071C  6FE3               	movwf	sprintf@flag& (0+255),b
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1976  00071E  C0CF  FFF6         	movff	sprintf@f,tblptrl
  1977  000722  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  1978  000726                     	if	0	;tblptru may be non-zero
  1979  000726                     	endif
  1980  000726                     	if	0	;tblptru may be non-zero
  1981  000726                     	endif
  1982  000726  0008               	tblrd		*
  1983  000728  50F5               	movf	tablat,w,c
  1984  00072A  EC2C  F01A         	call	_isdigit
  1985  00072E  A0D8               	btfss	status,0,c
  1986  000730  D034               	goto	u6050
  1987                           
  1988                           ;doprnt.c: 598: width = 0;
  1989  000732  0E00               	movlw	0
  1990  000734  0100               	movlb	0	; () banked
  1991  000736  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  1992  000738  0E00               	movlw	0
  1993  00073A  6FE5               	movwf	sprintf@width& (0+255),b
  1994  00073C                     
  1995                           ;doprnt.c: 600: width *= 10;
  1996                           
  1997                           ; BSR set to: 0
  1998  00073C  C0E5  F02E         	movff	sprintf@width,___wmul@multiplier
  1999  000740  C0E6  F02F         	movff	sprintf@width+1,___wmul@multiplier+1
  2000  000744  0E00               	movlw	0
  2001  000746  6E31               	movwf	___wmul@multiplicand+1,c
  2002  000748  0E0A               	movlw	10
  2003  00074A  6E30               	movwf	___wmul@multiplicand,c
  2004  00074C  EC19  F01A         	call	___wmul	;wreg free
  2005  000750  C02E  F0E5         	movff	?___wmul,sprintf@width
  2006  000754  C02F  F0E6         	movff	?___wmul+1,sprintf@width+1
  2007                           
  2008                           ;doprnt.c: 601: width += *f++ - '0';
  2009  000758  0ED0               	movlw	208
  2010  00075A  0100               	movlb	0	; () banked
  2011  00075C  6FD5               	movwf	??_sprintf& (0+255),b
  2012  00075E  0EFF               	movlw	255
  2013  000760  6FD6               	movwf	(??_sprintf+1)& (0+255),b
  2014  000762  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2015  000766  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2016  00076A                     	if	0	;tblptru may be non-zero
  2017  00076A                     	endif
  2018  00076A                     	if	0	;tblptru may be non-zero
  2019  00076A                     	endif
  2020  00076A  0008               	tblrd		*
  2021  00076C  50F5               	movf	tablat,w,c
  2022  00076E  6FD7               	movwf	(??_sprintf+2)& (0+255),b
  2023  000770  6BD8               	clrf	(??_sprintf+3)& (0+255),b
  2024  000772  51D5               	movf	??_sprintf& (0+255),w,b
  2025  000774  27D7               	addwf	(??_sprintf+2)& (0+255),f,b
  2026  000776  51D6               	movf	(??_sprintf+1)& (0+255),w,b
  2027  000778  23D8               	addwfc	(??_sprintf+3)& (0+255),f,b
  2028  00077A  51D7               	movf	(??_sprintf+2)& (0+255),w,b
  2029  00077C  27E5               	addwf	sprintf@width& (0+255),f,b
  2030  00077E  51D8               	movf	(??_sprintf+3)& (0+255),w,b
  2031  000780  23E6               	addwfc	(sprintf@width+1)& (0+255),f,b
  2032                           
  2033                           ; BSR set to: 0
  2034  000782  4BCF               	infsnz	sprintf@f& (0+255),f,b
  2035  000784  2BD0               	incf	(sprintf@f+1)& (0+255),f,b
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2039  000786  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2040  00078A  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2041  00078E                     	if	0	;tblptru may be non-zero
  2042  00078E                     	endif
  2043  00078E                     	if	0	;tblptru may be non-zero
  2044  00078E                     	endif
  2045  00078E  0008               	tblrd		*
  2046  000790  50F5               	movf	tablat,w,c
  2047  000792  EC2C  F01A         	call	_isdigit
  2048  000796  B0D8               	btfsc	status,0,c
  2049  000798  D7D1               	goto	l234
  2050  00079A                     u6050:
  2051                           
  2052                           ;doprnt.c: 608: }
  2053                           ;doprnt.c: 611: if(*f == '.') {
  2054  00079A  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2055  00079E  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2056  0007A2                     	if	0	;tblptru may be non-zero
  2057  0007A2                     	endif
  2058  0007A2                     	if	0	;tblptru may be non-zero
  2059  0007A2                     	endif
  2060  0007A2  0008               	tblrd		*
  2061  0007A4  50F5               	movf	tablat,w,c
  2062  0007A6  0A2E               	xorlw	46
  2063  0007A8  A4D8               	btfss	status,2,c
  2064  0007AA  D030               	goto	l236
  2065                           
  2066                           ;doprnt.c: 612: flag |= 0x4000;
  2067  0007AC  0100               	movlb	0	; () banked
  2068  0007AE  8DE4               	bsf	(sprintf@flag+1)& (0+255),6,b
  2069                           
  2070                           ;doprnt.c: 613: f++;
  2071  0007B0  4BCF               	infsnz	sprintf@f& (0+255),f,b
  2072  0007B2  2BD0               	incf	(sprintf@f+1)& (0+255),f,b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;doprnt.c: 620: {
  2076                           ;doprnt.c: 621: prec = 0;
  2077  0007B4  0E00               	movlw	0
  2078  0007B6  6FF2               	movwf	(sprintf@prec+1)& (0+255),b
  2079  0007B8  0E00               	movlw	0
  2080  0007BA  6FF1               	movwf	sprintf@prec& (0+255),b
  2081                           
  2082                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2083  0007BC  D01C               	goto	l237
  2084  0007BE                     
  2085                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2086                           
  2087                           ; BSR set to: 0
  2088  0007BE  C0F1  F02E         	movff	sprintf@prec,___wmul@multiplier
  2089  0007C2  C0F2  F02F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2090  0007C6  0E00               	movlw	0
  2091  0007C8  6E31               	movwf	___wmul@multiplicand+1,c
  2092  0007CA  0E0A               	movlw	10
  2093  0007CC  6E30               	movwf	___wmul@multiplicand,c
  2094  0007CE  EC19  F01A         	call	___wmul	;wreg free
  2095  0007D2  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2096  0007D6  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2097  0007DA                     	if	0	;tblptru may be non-zero
  2098  0007DA                     	endif
  2099  0007DA                     	if	0	;tblptru may be non-zero
  2100  0007DA                     	endif
  2101  0007DA  0008               	tblrd		*
  2102  0007DC  50F5               	movf	tablat,w,c
  2103  0007DE  262E               	addwf	?___wmul,f,c
  2104  0007E0  0E00               	movlw	0
  2105  0007E2  222F               	addwfc	?___wmul+1,f,c
  2106  0007E4  0ED0               	movlw	208
  2107  0007E6  242E               	addwf	?___wmul,w,c
  2108  0007E8  0100               	movlb	0	; () banked
  2109  0007EA  6FF1               	movwf	sprintf@prec& (0+255),b
  2110  0007EC  0EFF               	movlw	255
  2111  0007EE  202F               	addwfc	?___wmul+1,w,c
  2112  0007F0  6FF2               	movwf	(sprintf@prec+1)& (0+255),b
  2113                           
  2114                           ; BSR set to: 0
  2115  0007F2  4BCF               	infsnz	sprintf@f& (0+255),f,b
  2116  0007F4  2BD0               	incf	(sprintf@f+1)& (0+255),f,b
  2117  0007F6                     l237:
  2118                           
  2119                           ; BSR set to: 0
  2120                           
  2121                           ; BSR set to: 0
  2122  0007F6  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2123  0007FA  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2124  0007FE                     	if	0	;tblptru may be non-zero
  2125  0007FE                     	endif
  2126  0007FE                     	if	0	;tblptru may be non-zero
  2127  0007FE                     	endif
  2128  0007FE  0008               	tblrd		*
  2129  000800  50F5               	movf	tablat,w,c
  2130  000802  EC2C  F01A         	call	_isdigit
  2131  000806  A0D8               	btfss	status,0,c
  2132  000808  D00A               	goto	l241
  2133  00080A  D7D9               	goto	l238
  2134  00080C                     l236:
  2135                           
  2136                           ;doprnt.c: 626: prec = 0;
  2137  00080C  0E00               	movlw	0
  2138  00080E  0100               	movlb	0	; () banked
  2139  000810  6FF2               	movwf	(sprintf@prec+1)& (0+255),b
  2140  000812  0E00               	movlw	0
  2141  000814  6FF1               	movwf	sprintf@prec& (0+255),b
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;doprnt.c: 628: flag |= 0x1000;
  2145  000816  89E4               	bsf	(sprintf@flag+1)& (0+255),4,b
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 630: }
  2149                           ;doprnt.c: 635: switch(c = *f++) {
  2150  000818  D002               	goto	l241
  2151  00081A                     
  2152                           ; BSR set to: 0
  2153                           ;doprnt.c: 663: flag |= 0x400;
  2154                           
  2155                           ; BSR set to: 0
  2156  00081A  85E4               	bsf	(sprintf@flag+1)& (0+255),2,b
  2157                           
  2158                           ;doprnt.c: 664: break;
  2159  00081C  D012               	goto	l245
  2160  00081E                     l241:
  2161                           
  2162                           ; BSR set to: 0
  2163  00081E  C0CF  FFF6         	movff	sprintf@f,tblptrl
  2164  000822  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  2165  000826  0100               	movlb	0	; () banked
  2166  000828  4BCF               	infsnz	sprintf@f& (0+255),f,b
  2167  00082A  2BD0               	incf	(sprintf@f+1)& (0+255),f,b
  2168  00082C                     	if	0	;tblptru may be non-zero
  2169  00082C                     	endif
  2170  00082C                     	if	0	;tblptru may be non-zero
  2171  00082C                     	endif
  2172  00082C  0008               	tblrd		*
  2173  00082E  CFF5 F0F3          	movff	tablat,sprintf@c
  2174  000832  51F3               	movf	sprintf@c& (0+255),w,b
  2175                           
  2176                           ; Switch size 1, requested type "space"
  2177                           ; Number of cases is 2, Range of values is 0 to 102
  2178                           ; switch strategies available:
  2179                           ; Name         Instructions Cycles
  2180                           ; simple_byte            7     4 (average)
  2181                           ;	Chosen strategy is simple_byte
  2182  000834  0A00               	xorlw	0	; case 0
  2183  000836  B4D8               	btfsc	status,2,c
  2184  000838  D3C6               	goto	u6460
  2185  00083A  0A66               	xorlw	102	; case 102
  2186  00083C  B4D8               	btfsc	status,2,c
  2187  00083E  D7ED               	goto	l244
  2188  000840  D3B5               	goto	l303
  2189  000842                     l245:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 825: if(flag & (0x700)) {
  2193                           
  2194                           ; BSR set to: 0
  2195  000842  0E07               	movlw	7
  2196  000844  15E4               	andwf	(sprintf@flag+1)& (0+255),w,b
  2197  000846  B4D8               	btfsc	status,2,c
  2198  000848  D326               	goto	l247
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;doprnt.c: 827: if(flag & 0x1000)
  2202  00084A  A9E4               	btfss	(sprintf@flag+1)& (0+255),4,b
  2203  00084C  D004               	goto	l248
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;doprnt.c: 829: prec = 6;
  2207  00084E  0E00               	movlw	0
  2208  000850  6FF2               	movwf	(sprintf@prec+1)& (0+255),b
  2209  000852  0E06               	movlw	6
  2210  000854  6FF1               	movwf	sprintf@prec& (0+255),b
  2211  000856                     l248:
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2215                           
  2216                           ; BSR set to: 0
  2217  000856  C0DD  FFD9         	movff	sprintf@ap,fsr2l
  2218  00085A  C0DE  FFDA         	movff	sprintf@ap+1,fsr2h
  2219  00085E  CFDE F0ED          	movff	postinc2,sprintf@fval
  2220  000862  CFDE F0EE          	movff	postinc2,sprintf@fval+1
  2221  000866  CFDE F0EF          	movff	postinc2,sprintf@fval+2
  2222  00086A  CFDE F0F0          	movff	postinc2,sprintf@fval+3
  2223                           
  2224                           ; BSR set to: 0
  2225  00086E  0E04               	movlw	4
  2226  000870  27DD               	addwf	sprintf@ap& (0+255),f,b
  2227  000872  0E00               	movlw	0
  2228  000874  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;doprnt.c: 831: if(fval < 0.0) {
  2232  000876  AFF0               	btfss	(sprintf@fval+3)& (0+255),7,b
  2233  000878  D015               	goto	l249
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 832: fval = -fval;
  2237  00087A  C0ED  F02E         	movff	sprintf@fval,___flneg@f1
  2238  00087E  C0EE  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  2239  000882  C0EF  F030         	movff	sprintf@fval+2,___flneg@f1+2
  2240  000886  C0F0  F031         	movff	sprintf@fval+3,___flneg@f1+3
  2241  00088A  ECEC  F019         	call	___flneg	;wreg free
  2242  00088E  C02E  F0ED         	movff	?___flneg,sprintf@fval
  2243  000892  C02F  F0EE         	movff	?___flneg+1,sprintf@fval+1
  2244  000896  C030  F0EF         	movff	?___flneg+2,sprintf@fval+2
  2245  00089A  C031  F0F0         	movff	?___flneg+3,sprintf@fval+3
  2246                           
  2247                           ;doprnt.c: 833: flag |= 0x03;
  2248  00089E  0E03               	movlw	3
  2249  0008A0  0100               	movlb	0	; () banked
  2250  0008A2  13E3               	iorwf	sprintf@flag& (0+255),f,b
  2251  0008A4                     l249:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;doprnt.c: 834: }
  2255                           ;doprnt.c: 835: exp = 0;
  2256                           
  2257                           ; BSR set to: 0
  2258  0008A4  0E00               	movlw	0
  2259  0008A6  6FEC               	movwf	(sprintf@exp+1)& (0+255),b
  2260  0008A8  0E00               	movlw	0
  2261  0008AA  6FEB               	movwf	sprintf@exp& (0+255),b
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;doprnt.c: 836: if( fval!=0) {
  2265  0008AC  51ED               	movf	sprintf@fval& (0+255),w,b
  2266  0008AE  11EE               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2267  0008B0  11EF               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2268  0008B2  11F0               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2269  0008B4  B4D8               	btfsc	status,2,c
  2270  0008B6  D082               	goto	l254
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2274  0008B8  35EF               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2275  0008BA  35F0               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2276  0008BC  0F82               	addlw	130
  2277  0008BE  6FEB               	movwf	sprintf@exp& (0+255),b
  2278  0008C0  6BEC               	clrf	(sprintf@exp+1)& (0+255),b
  2279  0008C2  0EFF               	movlw	255
  2280  0008C4  23EC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 838: exp--;
  2284  0008C6  07EB               	decf	sprintf@exp& (0+255),f,b
  2285  0008C8  A0D8               	btfss	status,0,c
  2286  0008CA  07EC               	decf	(sprintf@exp+1)& (0+255),f,b
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;doprnt.c: 839: exp *= 3;
  2290  0008CC  C0EB  F02E         	movff	sprintf@exp,___wmul@multiplier
  2291  0008D0  C0EC  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2292  0008D4  0E00               	movlw	0
  2293  0008D6  6E31               	movwf	___wmul@multiplicand+1,c
  2294  0008D8  0E03               	movlw	3
  2295  0008DA  6E30               	movwf	___wmul@multiplicand,c
  2296  0008DC  EC19  F01A         	call	___wmul	;wreg free
  2297  0008E0  C02E  F0EB         	movff	?___wmul,sprintf@exp
  2298  0008E4  C02F  F0EC         	movff	?___wmul+1,sprintf@exp+1
  2299                           
  2300                           ;doprnt.c: 840: exp /= 10;
  2301  0008E8  C0EB  F034         	movff	sprintf@exp,___awdiv@dividend
  2302  0008EC  C0EC  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  2303  0008F0  0E00               	movlw	0
  2304  0008F2  6E37               	movwf	___awdiv@divisor+1,c
  2305  0008F4  0E0A               	movlw	10
  2306  0008F6  6E36               	movwf	___awdiv@divisor,c
  2307  0008F8  ECF6  F017         	call	___awdiv	;wreg free
  2308  0008FC  C034  F0EB         	movff	?___awdiv,sprintf@exp
  2309  000900  C035  F0EC         	movff	?___awdiv+1,sprintf@exp+1
  2310                           
  2311                           ;doprnt.c: 841: if(exp < 0)
  2312  000904  0100               	movlb	0	; () banked
  2313  000906  AFEC               	btfss	(sprintf@exp+1)& (0+255),7,b
  2314  000908  D003               	goto	l251
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 842: exp--;
  2318  00090A  07EB               	decf	sprintf@exp& (0+255),f,b
  2319  00090C  A0D8               	btfss	status,0,c
  2320  00090E  07EC               	decf	(sprintf@exp+1)& (0+255),f,b
  2321  000910                     l251:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2325                           
  2326                           ; BSR set to: 0
  2327  000910  51EB               	movf	sprintf@exp& (0+255),w,b
  2328  000912  0800               	sublw	0
  2329  000914  EC94  F00B         	call	_scale
  2330  000918  C09D  F0E7         	movff	?_scale,sprintf@tmpval
  2331  00091C  C09E  F0E8         	movff	?_scale+1,sprintf@tmpval+1
  2332  000920  C09F  F0E9         	movff	?_scale+2,sprintf@tmpval+2
  2333  000924  C0A0  F0EA         	movff	?_scale+3,sprintf@tmpval+3
  2334                           
  2335                           ;doprnt.c: 847: tmpval.integ *= fval;
  2336  000928  C0E7  F084         	movff	sprintf@tmpval,___flmul@b
  2337  00092C  C0E8  F085         	movff	sprintf@tmpval+1,___flmul@b+1
  2338  000930  C0E9  F086         	movff	sprintf@tmpval+2,___flmul@b+2
  2339  000934  C0EA  F087         	movff	sprintf@tmpval+3,___flmul@b+3
  2340  000938  C0ED  F088         	movff	sprintf@fval,___flmul@a
  2341  00093C  C0EE  F089         	movff	sprintf@fval+1,___flmul@a+1
  2342  000940  C0EF  F08A         	movff	sprintf@fval+2,___flmul@a+2
  2343  000944  C0F0  F08B         	movff	sprintf@fval+3,___flmul@a+3
  2344  000948  ECBC  F00D         	call	___flmul	;wreg free
  2345  00094C  C084  F0E7         	movff	?___flmul,sprintf@tmpval
  2346  000950  C085  F0E8         	movff	?___flmul+1,sprintf@tmpval+1
  2347  000954  C086  F0E9         	movff	?___flmul+2,sprintf@tmpval+2
  2348  000958  C087  F0EA         	movff	?___flmul+3,sprintf@tmpval+3
  2349                           
  2350                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2351  00095C  C0E7  F02E         	movff	sprintf@tmpval,___flge@ff1
  2352  000960  C0E8  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2353  000964  C0E9  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2354  000968  C0EA  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2355  00096C  0E00               	movlw	0
  2356  00096E  6E32               	movwf	___flge@ff2,c
  2357  000970  0E00               	movlw	0
  2358  000972  6E33               	movwf	___flge@ff2+1,c
  2359  000974  0E80               	movlw	128
  2360  000976  6E34               	movwf	___flge@ff2+2,c
  2361  000978  0E3F               	movlw	63
  2362  00097A  6E35               	movwf	___flge@ff2+3,c
  2363  00097C  EC14  F016         	call	___flge	;wreg free
  2364  000980  B0D8               	btfsc	status,0,c
  2365  000982  D005               	goto	l252
  2366                           
  2367                           ;doprnt.c: 849: exp--;
  2368  000984  0100               	movlb	0	; () banked
  2369  000986  07EB               	decf	sprintf@exp& (0+255),f,b
  2370  000988  A0D8               	btfss	status,0,c
  2371  00098A  07EC               	decf	(sprintf@exp+1)& (0+255),f,b
  2372  00098C  D017               	goto	l254
  2373  00098E                     l252:
  2374                           
  2375                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2376                           
  2377                           ; BSR set to: 0
  2378  00098E  C0E7  F02E         	movff	sprintf@tmpval,___flge@ff1
  2379  000992  C0E8  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2380  000996  C0E9  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2381  00099A  C0EA  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2382  00099E  0E00               	movlw	0
  2383  0009A0  6E32               	movwf	___flge@ff2,c
  2384  0009A2  0E00               	movlw	0
  2385  0009A4  6E33               	movwf	___flge@ff2+1,c
  2386  0009A6  0E20               	movlw	32
  2387  0009A8  6E34               	movwf	___flge@ff2+2,c
  2388  0009AA  0E41               	movlw	65
  2389  0009AC  6E35               	movwf	___flge@ff2+3,c
  2390  0009AE  EC14  F016         	call	___flge	;wreg free
  2391  0009B2  A0D8               	btfss	status,0,c
  2392  0009B4  D003               	goto	l254
  2393                           
  2394                           ;doprnt.c: 851: exp++;
  2395  0009B6  0100               	movlb	0	; () banked
  2396  0009B8  4BEB               	infsnz	sprintf@exp& (0+255),f,b
  2397  0009BA  2BEC               	incf	(sprintf@exp+1)& (0+255),f,b
  2398  0009BC                     l254:
  2399                           
  2400                           ;doprnt.c: 852: }
  2401                           ;doprnt.c: 1112: if(prec <= 12)
  2402                           
  2403                           ; BSR set to: 0
  2404                           
  2405                           ; BSR set to: 0
  2406                           
  2407                           ; BSR set to: 0
  2408  0009BC  0100               	movlb	0	; () banked
  2409  0009BE  BFF2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2410  0009C0  D006               	goto	u6150
  2411  0009C2  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  2412  0009C4  E121               	bnz	l5376
  2413  0009C6  0E0D               	movlw	13
  2414  0009C8  5DF1               	subwf	sprintf@prec& (0+255),w,b
  2415  0009CA  B0D8               	btfsc	status,0,c
  2416  0009CC  D01D               	goto	l255
  2417  0009CE                     u6150:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1113: fval += fround(prec);
  2421  0009CE  C0ED  F0B1         	movff	sprintf@fval,___fladd@b
  2422  0009D2  C0EE  F0B2         	movff	sprintf@fval+1,___fladd@b+1
  2423  0009D6  C0EF  F0B3         	movff	sprintf@fval+2,___fladd@b+2
  2424  0009DA  C0F0  F0B4         	movff	sprintf@fval+3,___fladd@b+3
  2425  0009DE  51F1               	movf	sprintf@prec& (0+255),w,b
  2426  0009E0  EC5F  F012         	call	_fround
  2427  0009E4  C09D  F0B5         	movff	?_fround,___fladd@a
  2428  0009E8  C09E  F0B6         	movff	?_fround+1,___fladd@a+1
  2429  0009EC  C09F  F0B7         	movff	?_fround+2,___fladd@a+2
  2430  0009F0  C0A0  F0B8         	movff	?_fround+3,___fladd@a+3
  2431  0009F4  EC65  F00F         	call	___fladd	;wreg free
  2432  0009F8  C0B1  F0ED         	movff	?___fladd,sprintf@fval
  2433  0009FC  C0B2  F0EE         	movff	?___fladd+1,sprintf@fval+1
  2434  000A00  C0B3  F0EF         	movff	?___fladd+2,sprintf@fval+2
  2435  000A04  C0B4  F0F0         	movff	?___fladd+3,sprintf@fval+3
  2436  000A08                     l255:
  2437  000A08                     l5376:
  2438                           
  2439                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2440  000A08  0100               	movlb	0	; () banked
  2441  000A0A  BFEC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2442  000A0C  D006               	goto	u6160
  2443  000A0E  51EC               	movf	(sprintf@exp+1)& (0+255),w,b
  2444  000A10  E122               	bnz	l5384
  2445  000A12  0E0A               	movlw	10
  2446  000A14  5DEB               	subwf	sprintf@exp& (0+255),w,b
  2447  000A16  B0D8               	btfsc	status,0,c
  2448  000A18  D01E               	goto	u6190
  2449  000A1A                     u6160:
  2450                           
  2451                           ; BSR set to: 0
  2452  000A1A  51ED               	movf	sprintf@fval& (0+255),w,b
  2453  000A1C  11EE               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2454  000A1E  11EF               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2455  000A20  11F0               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2456  000A22  B4D8               	btfsc	status,2,c
  2457  000A24  D063               	goto	l256
  2458                           
  2459                           ; BSR set to: 0
  2460  000A26  C0ED  F0A6         	movff	sprintf@fval,___fltol@f1
  2461  000A2A  C0EE  F0A7         	movff	sprintf@fval+1,___fltol@f1+1
  2462  000A2E  C0EF  F0A8         	movff	sprintf@fval+2,___fltol@f1+2
  2463  000A32  C0F0  F0A9         	movff	sprintf@fval+3,___fltol@f1+3
  2464  000A36  EC28  F017         	call	___fltol	;wreg free
  2465  000A3A  0100               	movlb	0	; () banked
  2466  000A3C  51A6               	movf	?___fltol& (0+255),w,b
  2467  000A3E  11A7               	iorwf	(?___fltol+1)& (0+255),w,b
  2468  000A40  11A8               	iorwf	(?___fltol+2)& (0+255),w,b
  2469  000A42  11A9               	iorwf	(?___fltol+3)& (0+255),w,b
  2470  000A44  B4D8               	btfsc	status,2,c
  2471                           
  2472                           ; BSR set to: 0
  2473  000A46  BFEC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2474  000A48  D051               	goto	l256
  2475  000A4A  51EC               	movf	(sprintf@exp+1)& (0+255),w,b
  2476  000A4C  E104               	bnz	l5384
  2477  000A4E  0E02               	movlw	2
  2478  000A50  5DEB               	subwf	sprintf@exp& (0+255),w,b
  2479  000A52  A0D8               	btfss	status,0,c
  2480  000A54  D04B               	goto	l256
  2481  000A56                     u6190:
  2482  000A56                     l5384:
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2486  000A56  C0E7  F02E         	movff	sprintf@tmpval,___flge@ff1
  2487  000A5A  C0E8  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  2488  000A5E  C0E9  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  2489  000A62  C0EA  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  2490  000A66  0E5F               	movlw	95
  2491  000A68  6E32               	movwf	___flge@ff2,c
  2492  000A6A  0E70               	movlw	112
  2493  000A6C  6E33               	movwf	___flge@ff2+1,c
  2494  000A6E  0E89               	movlw	137
  2495  000A70  6E34               	movwf	___flge@ff2+2,c
  2496  000A72  0E40               	movlw	64
  2497  000A74  6E35               	movwf	___flge@ff2+3,c
  2498  000A76  EC14  F016         	call	___flge	;wreg free
  2499  000A7A  B0D8               	btfsc	status,0,c
  2500  000A7C  D003               	goto	l259
  2501                           
  2502                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2503  000A7E  0100               	movlb	0	; () banked
  2504  000A80  0EF7               	movlw	247
  2505  000A82  D002               	goto	L1
  2506  000A84                     l259:
  2507                           
  2508                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2509                           
  2510                           ; BSR set to: 0
  2511  000A84  0100               	movlb	0	; () banked
  2512  000A86  0EF8               	movlw	248
  2513  000A88                     L1:
  2514  000A88  27EB               	addwf	sprintf@exp& (0+255),f,b
  2515  000A8A  0EFF               	movlw	255
  2516  000A8C  23EC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2520                           
  2521                           ; BSR set to: 0
  2522  000A8E  51EB               	movf	sprintf@exp& (0+255),w,b
  2523  000A90  EC94  F00B         	call	_scale
  2524  000A94  C09D  F0E7         	movff	?_scale,sprintf@tmpval
  2525  000A98  C09E  F0E8         	movff	?_scale+1,sprintf@tmpval+1
  2526  000A9C  C09F  F0E9         	movff	?_scale+2,sprintf@tmpval+2
  2527  000AA0  C0A0  F0EA         	movff	?_scale+3,sprintf@tmpval+3
  2528  000AA4  C0ED  F02E         	movff	sprintf@fval,__div_to_l_@f1
  2529  000AA8  C0EE  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2530  000AAC  C0EF  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2531  000AB0  C0F0  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2532  000AB4  C0E7  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  2533  000AB8  C0E8  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2534  000ABC  C0E9  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2535  000AC0  C0EA  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2536  000AC4  ECEE  F014         	call	__div_to_l_	;wreg free
  2537  000AC8  C02E  F0DF         	movff	?__div_to_l_,sprintf@val
  2538  000ACC  C02F  F0E0         	movff	?__div_to_l_+1,sprintf@val+1
  2539  000AD0  C030  F0E1         	movff	?__div_to_l_+2,sprintf@val+2
  2540  000AD4  C031  F0E2         	movff	?__div_to_l_+3,sprintf@val+3
  2541                           
  2542                           ;doprnt.c: 1129: fval = 0.0;
  2543  000AD8  0E00               	movlw	0
  2544  000ADA  0100               	movlb	0	; () banked
  2545  000ADC  6FED               	movwf	sprintf@fval& (0+255),b
  2546  000ADE  0E00               	movlw	0
  2547  000AE0  6FEE               	movwf	(sprintf@fval+1)& (0+255),b
  2548  000AE2  0E00               	movlw	0
  2549  000AE4  6FEF               	movwf	(sprintf@fval+2)& (0+255),b
  2550  000AE6  0E00               	movlw	0
  2551  000AE8  6FF0               	movwf	(sprintf@fval+3)& (0+255),b
  2552                           
  2553                           ;doprnt.c: 1130: } else {
  2554  000AEA  D03C               	goto	l265
  2555  000AEC                     l256:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2559                           
  2560                           ; BSR set to: 0
  2561  000AEC  C0ED  F0A6         	movff	sprintf@fval,___fltol@f1
  2562  000AF0  C0EE  F0A7         	movff	sprintf@fval+1,___fltol@f1+1
  2563  000AF4  C0EF  F0A8         	movff	sprintf@fval+2,___fltol@f1+2
  2564  000AF8  C0F0  F0A9         	movff	sprintf@fval+3,___fltol@f1+3
  2565  000AFC  EC28  F017         	call	___fltol	;wreg free
  2566  000B00  C0A6  F0DF         	movff	?___fltol,sprintf@val
  2567  000B04  C0A7  F0E0         	movff	?___fltol+1,sprintf@val+1
  2568  000B08  C0A8  F0E1         	movff	?___fltol+2,sprintf@val+2
  2569  000B0C  C0A9  F0E2         	movff	?___fltol+3,sprintf@val+3
  2570                           
  2571                           ;doprnt.c: 1132: fval -= (double)val;
  2572  000B10  C0ED  F0C5         	movff	sprintf@fval,___flsub@b
  2573  000B14  C0EE  F0C6         	movff	sprintf@fval+1,___flsub@b+1
  2574  000B18  C0EF  F0C7         	movff	sprintf@fval+2,___flsub@b+2
  2575  000B1C  C0F0  F0C8         	movff	sprintf@fval+3,___flsub@b+3
  2576  000B20  C0DF  F080         	movff	sprintf@val,___xxtofl@val
  2577  000B24  C0E0  F081         	movff	sprintf@val+1,___xxtofl@val+1
  2578  000B28  C0E1  F082         	movff	sprintf@val+2,___xxtofl@val+2
  2579  000B2C  C0E2  F083         	movff	sprintf@val+3,___xxtofl@val+3
  2580  000B30  0E00               	movlw	0
  2581  000B32  ECAA  F013         	call	___xxtofl
  2582  000B36  C080  F0C9         	movff	?___xxtofl,___flsub@a
  2583  000B3A  C081  F0CA         	movff	?___xxtofl+1,___flsub@a+1
  2584  000B3E  C082  F0CB         	movff	?___xxtofl+2,___flsub@a+2
  2585  000B42  C083  F0CC         	movff	?___xxtofl+3,___flsub@a+3
  2586  000B46  EC33  F019         	call	___flsub	;wreg free
  2587  000B4A  C0C5  F0ED         	movff	?___flsub,sprintf@fval
  2588  000B4E  C0C6  F0EE         	movff	?___flsub+1,sprintf@fval+1
  2589  000B52  C0C7  F0EF         	movff	?___flsub+2,sprintf@fval+2
  2590  000B56  C0C8  F0F0         	movff	?___flsub+3,sprintf@fval+3
  2591                           
  2592                           ;doprnt.c: 1133: exp = 0;
  2593  000B5A  0E00               	movlw	0
  2594  000B5C  0100               	movlb	0	; () banked
  2595  000B5E  6FEC               	movwf	(sprintf@exp+1)& (0+255),b
  2596  000B60  0E00               	movlw	0
  2597  000B62  6FEB               	movwf	sprintf@exp& (0+255),b
  2598  000B64                     l265:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1134: }
  2602                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2603                           
  2604                           ; BSR set to: 0
  2605  000B64  0E01               	movlw	1
  2606  000B66  6FF3               	movwf	sprintf@c& (0+255),b
  2607  000B68                     l5404:
  2608                           
  2609                           ; BSR set to: 0
  2610  000B68  0E0A               	movlw	10
  2611  000B6A  19F3               	xorwf	sprintf@c& (0+255),w,b
  2612  000B6C  B4D8               	btfsc	status,2,c
  2613  000B6E  D018               	goto	u6230
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;doprnt.c: 1137: if(val < dpowers[c])
  2617                           
  2618                           ; BSR set to: 0
  2619                           
  2620                           ; BSR set to: 0
  2621  000B70  51F3               	movf	sprintf@c& (0+255),w,b
  2622  000B72  0D04               	mullw	4
  2623  000B74  0E69               	movlw	low _dpowers
  2624  000B76  24F3               	addwf	prodl,w,c
  2625  000B78  6EF6               	movwf	tblptrl,c
  2626  000B7A  0E06               	movlw	high _dpowers
  2627  000B7C  20F4               	addwfc	prodh,w,c
  2628  000B7E  6EF7               	movwf	tblptrh,c
  2629  000B80                     	if	0	;There are less than 3 active tblptr bytes
  2630  000B80                     	endif
  2631  000B80  0009               	tblrd		*+
  2632  000B82  50F5               	movf	tablat,w,c
  2633  000B84  5DDF               	subwf	sprintf@val& (0+255),w,b
  2634  000B86  0009               	tblrd		*+
  2635  000B88  50F5               	movf	tablat,w,c
  2636  000B8A  59E0               	subwfb	(sprintf@val+1)& (0+255),w,b
  2637  000B8C  0009               	tblrd		*+
  2638  000B8E  50F5               	movf	tablat,w,c
  2639  000B90  59E1               	subwfb	(sprintf@val+2)& (0+255),w,b
  2640  000B92  0009               	tblrd		*+
  2641  000B94  50F5               	movf	tablat,w,c
  2642  000B96  59E2               	subwfb	(sprintf@val+3)& (0+255),w,b
  2643  000B98  A0D8               	btfss	status,0,c
  2644  000B9A  D002               	goto	u6230
  2645                           
  2646                           ; BSR set to: 0
  2647                           
  2648                           ; BSR set to: 0
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;doprnt.c: 1138: break;
  2652  000B9C  2BF3               	incf	sprintf@c& (0+255),f,b
  2653  000B9E  D7E4               	goto	l5404
  2654  000BA0                     u6230:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1142: width -= prec + c + exp;
  2658                           
  2659                           ; BSR set to: 0
  2660  000BA0  C0F3  F0D5         	movff	sprintf@c,??_sprintf
  2661  000BA4  6BD6               	clrf	(??_sprintf+1)& (0+255),b
  2662  000BA6  BFD5               	btfsc	??_sprintf& (0+255),7,b
  2663  000BA8  07D6               	decf	(??_sprintf+1)& (0+255),f,b
  2664  000BAA  51F1               	movf	sprintf@prec& (0+255),w,b
  2665  000BAC  27D5               	addwf	??_sprintf& (0+255),f,b
  2666  000BAE  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  2667  000BB0  23D6               	addwfc	(??_sprintf+1)& (0+255),f,b
  2668  000BB2  51EB               	movf	sprintf@exp& (0+255),w,b
  2669  000BB4  27D5               	addwf	??_sprintf& (0+255),f,b
  2670  000BB6  51EC               	movf	(sprintf@exp+1)& (0+255),w,b
  2671  000BB8  23D6               	addwfc	(??_sprintf+1)& (0+255),f,b
  2672  000BBA  51D5               	movf	??_sprintf& (0+255),w,b
  2673  000BBC  5FE5               	subwf	sprintf@width& (0+255),f,b
  2674  000BBE  51D6               	movf	(??_sprintf+1)& (0+255),w,b
  2675  000BC0  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  2676                           
  2677                           ;doprnt.c: 1143: if(
  2678                           ;doprnt.c: 1147: prec)
  2679  000BC2  51F1               	movf	sprintf@prec& (0+255),w,b
  2680  000BC4  11F2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2681  000BC6  B4D8               	btfsc	status,2,c
  2682  000BC8  D003               	goto	l269
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1148: width--;
  2686  000BCA  07E5               	decf	sprintf@width& (0+255),f,b
  2687  000BCC  A0D8               	btfss	status,0,c
  2688  000BCE  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  2689  000BD0                     l269:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;doprnt.c: 1149: if(flag & 0x03)
  2693                           
  2694                           ; BSR set to: 0
  2695  000BD0  0E03               	movlw	3
  2696  000BD2  15E3               	andwf	sprintf@flag& (0+255),w,b
  2697  000BD4  6FD5               	movwf	??_sprintf& (0+255),b
  2698  000BD6  0E00               	movlw	0
  2699  000BD8  15E4               	andwf	(sprintf@flag+1)& (0+255),w,b
  2700  000BDA  6FD6               	movwf	(??_sprintf+1)& (0+255),b
  2701  000BDC  51D5               	movf	??_sprintf& (0+255),w,b
  2702  000BDE  11D6               	iorwf	(??_sprintf+1)& (0+255),w,b
  2703  000BE0  B4D8               	btfsc	status,2,c
  2704  000BE2  D00C               	goto	l271
  2705  000BE4  D008               	goto	l5428
  2706  000BE6                     l5424:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2710  000BE6  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  2711  000BEA  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  2712  000BEE  0E20               	movlw	32
  2713  000BF0  6EDF               	movwf	indf2,c
  2714                           
  2715                           ; BSR set to: 0
  2716  000BF2  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  2717  000BF4  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  2718  000BF6                     l5428:
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;doprnt.c: 1182: width--;
  2722  000BF6  07E5               	decf	sprintf@width& (0+255),f,b
  2723  000BF8  A0D8               	btfss	status,0,c
  2724  000BFA  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  2725  000BFC                     l271:
  2726                           
  2727                           ; BSR set to: 0
  2728                           
  2729                           ; BSR set to: 0
  2730  000BFC  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  2731  000BFE  D005               	goto	u6260
  2732  000C00  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  2733  000C02  E1F1               	bnz	l5424
  2734  000C04  05E5               	decf	sprintf@width& (0+255),w,b
  2735  000C06  B0D8               	btfsc	status,0,c
  2736  000C08  D7EE               	goto	l272
  2737  000C0A                     u6260:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1183: }
  2741                           ;doprnt.c: 1188: if(flag & 0x03)
  2742                           
  2743                           ; BSR set to: 0
  2744  000C0A  0E03               	movlw	3
  2745  000C0C  15E3               	andwf	sprintf@flag& (0+255),w,b
  2746  000C0E  6FD5               	movwf	??_sprintf& (0+255),b
  2747  000C10  0E00               	movlw	0
  2748  000C12  15E4               	andwf	(sprintf@flag+1)& (0+255),w,b
  2749  000C14  6FD6               	movwf	(??_sprintf+1)& (0+255),b
  2750  000C16  51D5               	movf	??_sprintf& (0+255),w,b
  2751  000C18  11D6               	iorwf	(??_sprintf+1)& (0+255),w,b
  2752  000C1A  B4D8               	btfsc	status,2,c
  2753  000C1C  D050               	goto	l275
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2757  000C1E  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  2758  000C22  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  2759  000C26  0E2D               	movlw	45
  2760  000C28  D047               	goto	L2
  2761  000C2A                     
  2762                           ; BSR set to: 0
  2763                           ;doprnt.c: 1200: {
  2764                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2765                           
  2766                           ; BSR set to: 0
  2767  000C2A  C0DF  F02E         	movff	sprintf@val,___lldiv@dividend
  2768  000C2E  C0E0  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2769  000C32  C0E1  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2770  000C36  C0E2  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2771  000C3A  51F3               	movf	sprintf@c& (0+255),w,b
  2772  000C3C  0D04               	mullw	4
  2773  000C3E  0E69               	movlw	low _dpowers
  2774  000C40  24F3               	addwf	prodl,w,c
  2775  000C42  6EF6               	movwf	tblptrl,c
  2776  000C44  0E06               	movlw	high _dpowers
  2777  000C46  20F4               	addwfc	prodh,w,c
  2778  000C48  6EF7               	movwf	tblptrh,c
  2779  000C4A                     	if	0	;There are less than 3 active tblptr bytes
  2780  000C4A                     	endif
  2781  000C4A  0009               	tblrd		*+
  2782  000C4C  CFF5 F032          	movff	tablat,___lldiv@divisor
  2783  000C50  0009               	tblrd		*+
  2784  000C52  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2785  000C56  0009               	tblrd		*+
  2786  000C58  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2787  000C5C  000A               	tblrd		*-
  2788  000C5E  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2789  000C62  EC39  F018         	call	___lldiv	;wreg free
  2790  000C66  C02E  F0E7         	movff	?___lldiv,sprintf@tmpval
  2791  000C6A  C02F  F0E8         	movff	?___lldiv+1,sprintf@tmpval+1
  2792  000C6E  C030  F0E9         	movff	?___lldiv+2,sprintf@tmpval+2
  2793  000C72  C031  F0EA         	movff	?___lldiv+3,sprintf@tmpval+3
  2794                           
  2795                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2796  000C76  C0E7  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2797  000C7A  C0E8  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2798  000C7E  C0E9  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2799  000C82  C0EA  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2800  000C86  0E0A               	movlw	10
  2801  000C88  6E32               	movwf	___llmod@divisor,c
  2802  000C8A  0E00               	movlw	0
  2803  000C8C  6E33               	movwf	___llmod@divisor+1,c
  2804  000C8E  0E00               	movlw	0
  2805  000C90  6E34               	movwf	___llmod@divisor+2,c
  2806  000C92  0E00               	movlw	0
  2807  000C94  6E35               	movwf	___llmod@divisor+3,c
  2808  000C96  ECB2  F018         	call	___llmod	;wreg free
  2809  000C9A  C02E  F0E7         	movff	?___llmod,sprintf@tmpval
  2810  000C9E  C02F  F0E8         	movff	?___llmod+1,sprintf@tmpval+1
  2811  000CA2  C030  F0E9         	movff	?___llmod+2,sprintf@tmpval+2
  2812  000CA6  C031  F0EA         	movff	?___llmod+3,sprintf@tmpval+3
  2813                           
  2814                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2815  000CAA  0100               	movlb	0	; () banked
  2816  000CAC  51E7               	movf	sprintf@tmpval& (0+255),w,b
  2817  000CAE  0F30               	addlw	48
  2818  000CB0  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  2819  000CB4  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  2820  000CB8                     L2:
  2821  000CB8  6EDF               	movwf	indf2,c
  2822                           
  2823                           ; BSR set to: 0
  2824  000CBA  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  2825  000CBC  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  2826  000CBE                     l275:
  2827                           
  2828                           ; BSR set to: 0
  2829                           
  2830                           ; BSR set to: 0
  2831  000CBE  07F3               	decf	sprintf@c& (0+255),f,b
  2832  000CC0  29F3               	incf	sprintf@c& (0+255),w,b
  2833  000CC2  B4D8               	btfsc	status,2,c
  2834  000CC4  D00C               	goto	l278
  2835  000CC6  D7B1               	goto	l276
  2836  000CC8                     l5448:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2840  000CC8  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  2841  000CCC  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  2842  000CD0  0E30               	movlw	48
  2843  000CD2  6EDF               	movwf	indf2,c
  2844                           
  2845                           ; BSR set to: 0
  2846  000CD4  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  2847  000CD6  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;doprnt.c: 1209: exp--;
  2851  000CD8  07EB               	decf	sprintf@exp& (0+255),f,b
  2852  000CDA  A0D8               	btfss	status,0,c
  2853  000CDC  07EC               	decf	(sprintf@exp+1)& (0+255),f,b
  2854  000CDE                     l278:
  2855                           
  2856                           ; BSR set to: 0
  2857                           
  2858                           ; BSR set to: 0
  2859  000CDE  BFEC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2860  000CE0  D005               	goto	u6290
  2861  000CE2  51EC               	movf	(sprintf@exp+1)& (0+255),w,b
  2862  000CE4  E1F1               	bnz	l5448
  2863  000CE6  05EB               	decf	sprintf@exp& (0+255),w,b
  2864  000CE8  B0D8               	btfsc	status,0,c
  2865  000CEA  D7EE               	goto	l279
  2866  000CEC                     u6290:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;doprnt.c: 1210: }
  2870                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2871                           
  2872                           ; BSR set to: 0
  2873  000CEC  BFF2               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2874  000CEE  D009               	goto	l281
  2875  000CF0  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  2876  000CF2  E104               	bnz	u6300
  2877  000CF4  0E09               	movlw	9
  2878  000CF6  5DF1               	subwf	sprintf@prec& (0+255),w,b
  2879  000CF8  A0D8               	btfss	status,0,c
  2880  000CFA  D003               	goto	l281
  2881  000CFC                     u6300:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2885  000CFC  0E08               	movlw	8
  2886  000CFE  6FF3               	movwf	sprintf@c& (0+255),b
  2887  000D00  D002               	goto	l282
  2888  000D02                     l281:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;doprnt.c: 1213: else
  2892                           ;doprnt.c: 1214: c = prec;
  2893  000D02  C0F1  F0F3         	movff	sprintf@prec,sprintf@c
  2894  000D06                     l282:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 1215: prec -= c;
  2898                           
  2899                           ; BSR set to: 0
  2900  000D06  51F3               	movf	sprintf@c& (0+255),w,b
  2901  000D08  5FF1               	subwf	sprintf@prec& (0+255),f,b
  2902  000D0A  0E00               	movlw	0
  2903  000D0C  BFF3               	btfsc	sprintf@c& (0+255),7,b
  2904  000D0E  0EFF               	movlw	255
  2905  000D10  5BF2               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 1219: if(c)
  2909  000D12  51F3               	movf	sprintf@c& (0+255),w,b
  2910  000D14  B4D8               	btfsc	status,2,c
  2911  000D16  D008               	goto	l283
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2915  000D18  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  2916  000D1C  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  2917  000D20  0E2E               	movlw	46
  2918  000D22  6EDF               	movwf	indf2,c
  2919                           
  2920                           ; BSR set to: 0
  2921  000D24  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  2922  000D26  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  2923  000D28                     l283:
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2927                           
  2928                           ; BSR set to: 0
  2929  000D28  51F3               	movf	sprintf@c& (0+255),w,b
  2930  000D2A  EC94  F00B         	call	_scale
  2931  000D2E  C09D  F0D9         	movff	?_scale,_sprintf$875
  2932  000D32  C09E  F0DA         	movff	?_scale+1,_sprintf$875+1
  2933  000D36  C09F  F0DB         	movff	?_scale+2,_sprintf$875+2
  2934  000D3A  C0A0  F0DC         	movff	?_scale+3,_sprintf$875+3
  2935                           
  2936                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2937  000D3E  C0ED  F088         	movff	sprintf@fval,___flmul@a
  2938  000D42  C0EE  F089         	movff	sprintf@fval+1,___flmul@a+1
  2939  000D46  C0EF  F08A         	movff	sprintf@fval+2,___flmul@a+2
  2940  000D4A  C0F0  F08B         	movff	sprintf@fval+3,___flmul@a+3
  2941  000D4E  C0D9  F084         	movff	_sprintf$875,___flmul@b
  2942  000D52  C0DA  F085         	movff	_sprintf$875+1,___flmul@b+1
  2943  000D56  C0DB  F086         	movff	_sprintf$875+2,___flmul@b+2
  2944  000D5A  C0DC  F087         	movff	_sprintf$875+3,___flmul@b+3
  2945  000D5E  ECBC  F00D         	call	___flmul	;wreg free
  2946  000D62  C084  F0A6         	movff	?___flmul,___fltol@f1
  2947  000D66  C085  F0A7         	movff	?___flmul+1,___fltol@f1+1
  2948  000D6A  C086  F0A8         	movff	?___flmul+2,___fltol@f1+2
  2949  000D6E  C087  F0A9         	movff	?___flmul+3,___fltol@f1+3
  2950  000D72  EC28  F017         	call	___fltol	;wreg free
  2951  000D76  C0A6  F0DF         	movff	?___fltol,sprintf@val
  2952  000D7A  C0A7  F0E0         	movff	?___fltol+1,sprintf@val+1
  2953  000D7E  C0A8  F0E1         	movff	?___fltol+2,sprintf@val+2
  2954  000D82  C0A9  F0E2         	movff	?___fltol+3,sprintf@val+3
  2955                           
  2956                           ;doprnt.c: 1228: while(c--) {
  2957  000D86  D071               	goto	l284
  2958  000D88                     
  2959                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2960  000D88  C0DF  F02E         	movff	sprintf@val,___lldiv@dividend
  2961  000D8C  C0E0  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2962  000D90  C0E1  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2963  000D94  C0E2  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2964  000D98  0100               	movlb	0	; () banked
  2965  000D9A  51F3               	movf	sprintf@c& (0+255),w,b
  2966  000D9C  0D04               	mullw	4
  2967  000D9E  0E69               	movlw	low _dpowers
  2968  000DA0  24F3               	addwf	prodl,w,c
  2969  000DA2  6EF6               	movwf	tblptrl,c
  2970  000DA4  0E06               	movlw	high _dpowers
  2971  000DA6  20F4               	addwfc	prodh,w,c
  2972  000DA8  6EF7               	movwf	tblptrh,c
  2973  000DAA                     	if	0	;There are less than 3 active tblptr bytes
  2974  000DAA                     	endif
  2975  000DAA  0009               	tblrd		*+
  2976  000DAC  CFF5 F032          	movff	tablat,___lldiv@divisor
  2977  000DB0  0009               	tblrd		*+
  2978  000DB2  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2979  000DB6  0009               	tblrd		*+
  2980  000DB8  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2981  000DBC  000A               	tblrd		*-
  2982  000DBE  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2983  000DC2  EC39  F018         	call	___lldiv	;wreg free
  2984  000DC6  C02E  F0E7         	movff	?___lldiv,sprintf@tmpval
  2985  000DCA  C02F  F0E8         	movff	?___lldiv+1,sprintf@tmpval+1
  2986  000DCE  C030  F0E9         	movff	?___lldiv+2,sprintf@tmpval+2
  2987  000DD2  C031  F0EA         	movff	?___lldiv+3,sprintf@tmpval+3
  2988                           
  2989                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2990  000DD6  C0E7  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2991  000DDA  C0E8  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2992  000DDE  C0E9  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2993  000DE2  C0EA  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2994  000DE6  0E0A               	movlw	10
  2995  000DE8  6E32               	movwf	___llmod@divisor,c
  2996  000DEA  0E00               	movlw	0
  2997  000DEC  6E33               	movwf	___llmod@divisor+1,c
  2998  000DEE  0E00               	movlw	0
  2999  000DF0  6E34               	movwf	___llmod@divisor+2,c
  3000  000DF2  0E00               	movlw	0
  3001  000DF4  6E35               	movwf	___llmod@divisor+3,c
  3002  000DF6  ECB2  F018         	call	___llmod	;wreg free
  3003  000DFA  C02E  F0E7         	movff	?___llmod,sprintf@tmpval
  3004  000DFE  C02F  F0E8         	movff	?___llmod+1,sprintf@tmpval+1
  3005  000E02  C030  F0E9         	movff	?___llmod+2,sprintf@tmpval+2
  3006  000E06  C031  F0EA         	movff	?___llmod+3,sprintf@tmpval+3
  3007                           
  3008                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3009  000E0A  0100               	movlb	0	; () banked
  3010  000E0C  51E7               	movf	sprintf@tmpval& (0+255),w,b
  3011  000E0E  0F30               	addlw	48
  3012  000E10  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  3013  000E14  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  3014  000E18  6EDF               	movwf	indf2,c
  3015                           
  3016                           ; BSR set to: 0
  3017  000E1A  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  3018  000E1C  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1232: val %= dpowers[c];
  3022  000E1E  C0DF  F02E         	movff	sprintf@val,___llmod@dividend
  3023  000E22  C0E0  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  3024  000E26  C0E1  F030         	movff	sprintf@val+2,___llmod@dividend+2
  3025  000E2A  C0E2  F031         	movff	sprintf@val+3,___llmod@dividend+3
  3026  000E2E  51F3               	movf	sprintf@c& (0+255),w,b
  3027  000E30  0D04               	mullw	4
  3028  000E32  0E69               	movlw	low _dpowers
  3029  000E34  24F3               	addwf	prodl,w,c
  3030  000E36  6EF6               	movwf	tblptrl,c
  3031  000E38  0E06               	movlw	high _dpowers
  3032  000E3A  20F4               	addwfc	prodh,w,c
  3033  000E3C  6EF7               	movwf	tblptrh,c
  3034  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  3035  000E3E                     	endif
  3036  000E3E  0009               	tblrd		*+
  3037  000E40  CFF5 F032          	movff	tablat,___llmod@divisor
  3038  000E44  0009               	tblrd		*+
  3039  000E46  CFF5 F033          	movff	tablat,___llmod@divisor+1
  3040  000E4A  0009               	tblrd		*+
  3041  000E4C  CFF5 F034          	movff	tablat,___llmod@divisor+2
  3042  000E50  000A               	tblrd		*-
  3043  000E52  CFF5 F035          	movff	tablat,___llmod@divisor+3
  3044  000E56  ECB2  F018         	call	___llmod	;wreg free
  3045  000E5A  C02E  F0DF         	movff	?___llmod,sprintf@val
  3046  000E5E  C02F  F0E0         	movff	?___llmod+1,sprintf@val+1
  3047  000E62  C030  F0E1         	movff	?___llmod+2,sprintf@val+2
  3048  000E66  C031  F0E2         	movff	?___llmod+3,sprintf@val+3
  3049  000E6A                     l284:
  3050  000E6A  0100               	movlb	0	; () banked
  3051  000E6C  07F3               	decf	sprintf@c& (0+255),f,b
  3052  000E6E  29F3               	incf	sprintf@c& (0+255),w,b
  3053  000E70  B4D8               	btfsc	status,2,c
  3054  000E72  D00C               	goto	l287
  3055  000E74  D789               	goto	l285
  3056  000E76                     
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3059                           
  3060                           ; BSR set to: 0
  3061  000E76  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  3062  000E7A  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  3063  000E7E  0E30               	movlw	48
  3064  000E80  6EDF               	movwf	indf2,c
  3065                           
  3066                           ; BSR set to: 0
  3067  000E82  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  3068  000E84  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;doprnt.c: 1237: prec--;
  3072  000E86  07F1               	decf	sprintf@prec& (0+255),f,b
  3073  000E88  A0D8               	btfss	status,0,c
  3074  000E8A  07F2               	decf	(sprintf@prec+1)& (0+255),f,b
  3075  000E8C                     l287:
  3076                           
  3077                           ; BSR set to: 0
  3078                           
  3079                           ; BSR set to: 0
  3080  000E8C  51F1               	movf	sprintf@prec& (0+255),w,b
  3081  000E8E  11F2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3082  000E90  B4D8               	btfsc	status,2,c
  3083  000E92  D08C               	goto	l303
  3084  000E94  D7F0               	goto	l288
  3085  000E96                     l247:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 1246: }
  3089                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3090                           
  3091                           ; BSR set to: 0
  3092  000E96  51F1               	movf	sprintf@prec& (0+255),w,b
  3093  000E98  11F2               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3094  000E9A  A4D8               	btfss	status,2,c
  3095  000E9C  D008               	goto	l290
  3096                           
  3097                           ; BSR set to: 0
  3098  000E9E  51DF               	movf	sprintf@val& (0+255),w,b
  3099  000EA0  11E0               	iorwf	(sprintf@val+1)& (0+255),w,b
  3100  000EA2  11E1               	iorwf	(sprintf@val+2)& (0+255),w,b
  3101  000EA4  11E2               	iorwf	(sprintf@val+3)& (0+255),w,b
  3102  000EA6  A4D8               	btfss	status,2,c
  3103  000EA8  D002               	goto	l290
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;doprnt.c: 1291: prec++;
  3107  000EAA  4BF1               	infsnz	sprintf@prec& (0+255),f,b
  3108  000EAC  2BF2               	incf	(sprintf@prec+1)& (0+255),f,b
  3109  000EAE                     l290:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;doprnt.c: 1339: if(c < prec)
  3113                           
  3114                           ; BSR set to: 0
  3115  000EAE  0E80               	movlw	128
  3116  000EB0  BFF3               	btfsc	sprintf@c& (0+255),7,b
  3117  000EB2  0E7F               	movlw	127
  3118  000EB4  6FD5               	movwf	??_sprintf& (0+255),b
  3119  000EB6  51F1               	movf	sprintf@prec& (0+255),w,b
  3120  000EB8  5DF3               	subwf	sprintf@c& (0+255),w,b
  3121  000EBA  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  3122  000EBC  0A80               	xorlw	128
  3123  000EBE  59D5               	subwfb	??_sprintf& (0+255),w,b
  3124  000EC0  B0D8               	btfsc	status,0,c
  3125  000EC2  D003               	goto	l291
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1340: c = prec;
  3129  000EC4  C0F1  F0F3         	movff	sprintf@prec,sprintf@c
  3130  000EC8  D010               	goto	l293
  3131  000ECA                     l291:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;doprnt.c: 1341: else if(prec < c)
  3135                           
  3136                           ; BSR set to: 0
  3137  000ECA  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  3138  000ECC  0A80               	xorlw	128
  3139  000ECE  6FD5               	movwf	??_sprintf& (0+255),b
  3140  000ED0  51F3               	movf	sprintf@c& (0+255),w,b
  3141  000ED2  5DF1               	subwf	sprintf@prec& (0+255),w,b
  3142  000ED4  0E80               	movlw	128
  3143  000ED6  BFF3               	btfsc	sprintf@c& (0+255),7,b
  3144  000ED8  0E7F               	movlw	127
  3145  000EDA  59D5               	subwfb	??_sprintf& (0+255),w,b
  3146  000EDC  B0D8               	btfsc	status,0,c
  3147  000EDE  D005               	goto	l293
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;doprnt.c: 1342: prec = c;
  3151  000EE0  51F3               	movf	sprintf@c& (0+255),w,b
  3152  000EE2  6FF1               	movwf	sprintf@prec& (0+255),b
  3153  000EE4  6BF2               	clrf	(sprintf@prec+1)& (0+255),b
  3154  000EE6  BFF1               	btfsc	sprintf@prec& (0+255),7,b
  3155  000EE8  07F2               	decf	(sprintf@prec+1)& (0+255),f,b
  3156  000EEA                     l293:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3160                           
  3161                           ; BSR set to: 0
  3162                           
  3163                           ; BSR set to: 0
  3164  000EEA  51E5               	movf	sprintf@width& (0+255),w,b
  3165  000EEC  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  3166  000EEE  B4D8               	btfsc	status,2,c
  3167  000EF0  D00D               	goto	l294
  3168                           
  3169                           ; BSR set to: 0
  3170  000EF2  0E03               	movlw	3
  3171  000EF4  15E3               	andwf	sprintf@flag& (0+255),w,b
  3172  000EF6  6FD5               	movwf	??_sprintf& (0+255),b
  3173  000EF8  0E00               	movlw	0
  3174  000EFA  15E4               	andwf	(sprintf@flag+1)& (0+255),w,b
  3175  000EFC  6FD6               	movwf	(??_sprintf+1)& (0+255),b
  3176  000EFE  51D5               	movf	??_sprintf& (0+255),w,b
  3177  000F00  11D6               	iorwf	(??_sprintf+1)& (0+255),w,b
  3178  000F02  B4D8               	btfsc	status,2,c
  3179  000F04  D003               	goto	l294
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;doprnt.c: 1346: width--;
  3183  000F06  07E5               	decf	sprintf@width& (0+255),f,b
  3184  000F08  A0D8               	btfss	status,0,c
  3185  000F0A  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  3186  000F0C                     l294:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3190                           
  3191                           ; BSR set to: 0
  3192  000F0C  ADE4               	btfss	(sprintf@flag+1)& (0+255),6,b
  3193  000F0E  D013               	goto	l297
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;doprnt.c: 1349: if(width > prec)
  3197  000F10  51E5               	movf	sprintf@width& (0+255),w,b
  3198  000F12  5DF1               	subwf	sprintf@prec& (0+255),w,b
  3199  000F14  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  3200  000F16  0A80               	xorlw	128
  3201  000F18  6FD5               	movwf	??_sprintf& (0+255),b
  3202  000F1A  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  3203  000F1C  0A80               	xorlw	128
  3204  000F1E  59D5               	subwfb	??_sprintf& (0+255),w,b
  3205  000F20  B0D8               	btfsc	status,0,c
  3206  000F22  D005               	goto	l296
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;doprnt.c: 1350: width -= prec;
  3210  000F24  51F1               	movf	sprintf@prec& (0+255),w,b
  3211  000F26  5FE5               	subwf	sprintf@width& (0+255),f,b
  3212  000F28  51F2               	movf	(sprintf@prec+1)& (0+255),w,b
  3213  000F2A  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  3214  000F2C  D004               	goto	l297
  3215  000F2E                     l296:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;doprnt.c: 1351: else
  3219                           ;doprnt.c: 1352: width = 0;
  3220                           
  3221                           ; BSR set to: 0
  3222  000F2E  0E00               	movlw	0
  3223  000F30  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  3224  000F32  0E00               	movlw	0
  3225  000F34  6FE5               	movwf	sprintf@width& (0+255),b
  3226  000F36                     l297:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;doprnt.c: 1353: }
  3230                           ;doprnt.c: 1381: if(width > c)
  3231                           
  3232                           ; BSR set to: 0
  3233                           
  3234                           ; BSR set to: 0
  3235  000F36  0E80               	movlw	128
  3236  000F38  BFF3               	btfsc	sprintf@c& (0+255),7,b
  3237  000F3A  0E7F               	movlw	127
  3238  000F3C  6FD5               	movwf	??_sprintf& (0+255),b
  3239  000F3E  51E5               	movf	sprintf@width& (0+255),w,b
  3240  000F40  5DF3               	subwf	sprintf@c& (0+255),w,b
  3241  000F42  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  3242  000F44  0A80               	xorlw	128
  3243  000F46  59D5               	subwfb	??_sprintf& (0+255),w,b
  3244  000F48  B0D8               	btfsc	status,0,c
  3245  000F4A  D007               	goto	l298
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 1382: width -= c;
  3249  000F4C  51F3               	movf	sprintf@c& (0+255),w,b
  3250  000F4E  5FE5               	subwf	sprintf@width& (0+255),f,b
  3251  000F50  0E00               	movlw	0
  3252  000F52  BFF3               	btfsc	sprintf@c& (0+255),7,b
  3253  000F54  0EFF               	movlw	255
  3254  000F56  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  3255  000F58  D004               	goto	l299
  3256  000F5A                     l298:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;doprnt.c: 1383: else
  3260                           ;doprnt.c: 1384: width = 0;
  3261                           
  3262                           ; BSR set to: 0
  3263  000F5A  0E00               	movlw	0
  3264  000F5C  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  3265  000F5E  0E00               	movlw	0
  3266  000F60  6FE5               	movwf	sprintf@width& (0+255),b
  3267  000F62                     l299:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;doprnt.c: 1422: {
  3271                           ;doprnt.c: 1424: if(width
  3272                           ;doprnt.c: 1428: )
  3273                           
  3274                           ; BSR set to: 0
  3275  000F62  51E5               	movf	sprintf@width& (0+255),w,b
  3276  000F64  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  3277  000F66  B4D8               	btfsc	status,2,c
  3278  000F68  D00F               	goto	u6440
  3279  000F6A                     u6430:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3283                           
  3284                           ; BSR set to: 0
  3285                           
  3286                           ;doprnt.c: 1429: do
  3287  000F6A  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  3288  000F6E  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  3289  000F72  0E20               	movlw	32
  3290  000F74  6EDF               	movwf	indf2,c
  3291                           
  3292                           ; BSR set to: 0
  3293  000F76  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  3294  000F78  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;doprnt.c: 1431: while(--width);
  3298  000F7A  07E5               	decf	sprintf@width& (0+255),f,b
  3299  000F7C  A0D8               	btfss	status,0,c
  3300  000F7E  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  3301  000F80  51E5               	movf	sprintf@width& (0+255),w,b
  3302  000F82  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  3303  000F84  A4D8               	btfss	status,2,c
  3304  000F86  D7F1               	goto	u6430
  3305  000F88                     u6440:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;doprnt.c: 1438: if(flag & 0x03)
  3309                           
  3310                           ; BSR set to: 0
  3311                           
  3312                           ; BSR set to: 0
  3313  000F88  0E03               	movlw	3
  3314  000F8A  15E3               	andwf	sprintf@flag& (0+255),w,b
  3315  000F8C  6FD5               	movwf	??_sprintf& (0+255),b
  3316  000F8E  0E00               	movlw	0
  3317  000F90  15E4               	andwf	(sprintf@flag+1)& (0+255),w,b
  3318  000F92  6FD6               	movwf	(??_sprintf+1)& (0+255),b
  3319  000F94  51D5               	movf	??_sprintf& (0+255),w,b
  3320  000F96  11D6               	iorwf	(??_sprintf+1)& (0+255),w,b
  3321  000F98  B4D8               	btfsc	status,2,c
  3322  000F9A  D008               	goto	l303
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3326  000F9C  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  3327  000FA0  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  3328  000FA4  0E2D               	movlw	45
  3329  000FA6  6EDF               	movwf	indf2,c
  3330  000FA8                     l5538:
  3331                           
  3332                           ; BSR set to: 0
  3333  000FA8  4BCD               	infsnz	sprintf@sp& (0+255),f,b
  3334  000FAA  2BCE               	incf	(sprintf@sp+1)& (0+255),f,b
  3335  000FAC                     l303:
  3336                           
  3337                           ; BSR set to: 0
  3338                           
  3339                           ; BSR set to: 0
  3340                           
  3341                           ; BSR set to: 0
  3342  000FAC  C0CF  FFF6         	movff	sprintf@f,tblptrl
  3343  000FB0  C0D0  FFF7         	movff	sprintf@f+1,tblptrh
  3344  000FB4  4BCF               	infsnz	sprintf@f& (0+255),f,b
  3345  000FB6  2BD0               	incf	(sprintf@f+1)& (0+255),f,b
  3346  000FB8                     	if	0	;tblptru may be non-zero
  3347  000FB8                     	endif
  3348  000FB8                     	if	0	;tblptru may be non-zero
  3349  000FB8                     	endif
  3350  000FB8  0008               	tblrd		*
  3351  000FBA  CFF5 F0F3          	movff	tablat,sprintf@c
  3352  000FBE  51F3               	movf	sprintf@c& (0+255),w,b
  3353  000FC0  A4D8               	btfss	status,2,c
  3354  000FC2  EF7B  F003         	goto	l231
  3355  000FC6                     u6460:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;doprnt.c: 1538: *sp = 0;
  3359                           
  3360                           ; BSR set to: 0
  3361                           
  3362                           ;doprnt.c: 1469: }
  3363                           ;doprnt.c: 1533: }
  3364                           ;doprnt.c: 1535: alldone:
  3365                           
  3366                           ; BSR set to: 0
  3367  000FC6  C0CD  FFD9         	movff	sprintf@sp,fsr2l
  3368  000FCA  C0CE  FFDA         	movff	sprintf@sp+1,fsr2h
  3369  000FCE  0E00               	movlw	0
  3370  000FD0  6EDF               	movwf	indf2,c
  3371  000FD2  0012               	return	
  3372  000FD4                     __end_of_sprintf:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           intcon	equ	0xFF2
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _scale *****************
  3390 ;; Defined at:
  3391 ;;		line 425 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  scl             1    wreg     char 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  scl             1   37[BANK0 ] char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  4   29[BANK0 ] char 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3405 ;;      Params:         0       4       0       0       0       0       0
  3406 ;;      Locals:         0       5       0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0
  3408 ;;      Totals:         0       9       0       0       0       0       0
  3409 ;;Total ram usage:        9 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    3
  3412 ;; This function calls:
  3413 ;;		___awdiv
  3414 ;;		___awmod
  3415 ;;		___flmul
  3416 ;; This function is called by:
  3417 ;;		_sprintf
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text2
  3422  001728                     __ptext2:
  3423                           	opt stack 0
  3424  001728                     _scale:
  3425                           	opt stack 26
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;incstack = 0
  3429                           ;scale@scl stored from wreg
  3430  001728  0100               	movlb	0	; () banked
  3431  00172A  6FA5               	movwf	scale@scl& (0+255),b
  3432                           
  3433                           ;doprnt.c: 428: if(scl < 0) {
  3434  00172C  0100               	movlb	0	; () banked
  3435  00172E  AFA5               	btfss	scale@scl& (0+255),7,b
  3436  001730  D112               	goto	l220
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;doprnt.c: 429: scl = -scl;
  3440  001732  6DA5               	negf	scale@scl& (0+255),b
  3441                           
  3442                           ;doprnt.c: 430: if(scl>=110)
  3443  001734  51A5               	movf	scale@scl& (0+255),w,b
  3444  001736  0A80               	xorlw	128
  3445  001738  0F12               	addlw	-238
  3446  00173A  A0D8               	btfss	status,0,c
  3447  00173C  D09A               	goto	l221
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3451  00173E  0E00               	movlw	0
  3452  001740  6E37               	movwf	___awdiv@divisor+1,c
  3453  001742  0E0A               	movlw	10
  3454  001744  6E36               	movwf	___awdiv@divisor,c
  3455  001746  0E00               	movlw	0
  3456  001748  6E31               	movwf	___awmod@divisor+1,c
  3457  00174A  0E64               	movlw	100
  3458  00174C  6E30               	movwf	___awmod@divisor,c
  3459  00174E  51A5               	movf	scale@scl& (0+255),w,b
  3460  001750  6E2E               	movwf	___awmod@dividend,c
  3461  001752  6A2F               	clrf	___awmod@dividend+1,c
  3462  001754  BE2E               	btfsc	___awmod@dividend,7,c
  3463  001756  062F               	decf	___awmod@dividend+1,f,c
  3464  001758  EC7A  F018         	call	___awmod	;wreg free
  3465  00175C  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3466  001760  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3467  001764  ECF6  F017         	call	___awdiv	;wreg free
  3468  001768  90D8               	bcf	status,0,c
  3469  00176A  3634               	rlcf	?___awdiv,f,c
  3470  00176C  3635               	rlcf	?___awdiv+1,f,c
  3471  00176E  90D8               	bcf	status,0,c
  3472  001770  3634               	rlcf	?___awdiv,f,c
  3473  001772  3635               	rlcf	?___awdiv+1,f,c
  3474  001774  0E24               	movlw	36
  3475  001776  2634               	addwf	?___awdiv,f,c
  3476  001778  0E00               	movlw	0
  3477  00177A  2235               	addwfc	?___awdiv+1,f,c
  3478  00177C  0E35               	movlw	low __npowers_
  3479  00177E  2434               	addwf	?___awdiv,w,c
  3480  001780  6EF6               	movwf	tblptrl,c
  3481  001782  0E06               	movlw	high __npowers_
  3482  001784  2035               	addwfc	?___awdiv+1,w,c
  3483  001786  6EF7               	movwf	tblptrh,c
  3484  001788                     	if	0	;There are less than 3 active tblptr bytes
  3485  001788                     	endif
  3486  001788  0009               	tblrd		*+
  3487  00178A  CFF5 F088          	movff	tablat,___flmul@a
  3488  00178E  0009               	tblrd		*+
  3489  001790  CFF5 F089          	movff	tablat,___flmul@a+1
  3490  001794  0009               	tblrd		*+
  3491  001796  CFF5 F08A          	movff	tablat,___flmul@a+2
  3492  00179A  000A               	tblrd		*-
  3493  00179C  CFF5 F08B          	movff	tablat,___flmul@a+3
  3494  0017A0  0E00               	movlw	0
  3495  0017A2  6E37               	movwf	___awdiv@divisor+1,c
  3496  0017A4  0E64               	movlw	100
  3497  0017A6  6E36               	movwf	___awdiv@divisor,c
  3498  0017A8  0100               	movlb	0	; () banked
  3499  0017AA  51A5               	movf	scale@scl& (0+255),w,b
  3500  0017AC  6E34               	movwf	___awdiv@dividend,c
  3501  0017AE  6A35               	clrf	___awdiv@dividend+1,c
  3502  0017B0  BE34               	btfsc	___awdiv@dividend,7,c
  3503  0017B2  0635               	decf	___awdiv@dividend+1,f,c
  3504  0017B4  ECF6  F017         	call	___awdiv	;wreg free
  3505  0017B8  90D8               	bcf	status,0,c
  3506  0017BA  3634               	rlcf	?___awdiv,f,c
  3507  0017BC  3635               	rlcf	?___awdiv+1,f,c
  3508  0017BE  90D8               	bcf	status,0,c
  3509  0017C0  3634               	rlcf	?___awdiv,f,c
  3510  0017C2  3635               	rlcf	?___awdiv+1,f,c
  3511  0017C4  0E48               	movlw	72
  3512  0017C6  2634               	addwf	?___awdiv,f,c
  3513  0017C8  0E00               	movlw	0
  3514  0017CA  2235               	addwfc	?___awdiv+1,f,c
  3515  0017CC  0E35               	movlw	low __npowers_
  3516  0017CE  2434               	addwf	?___awdiv,w,c
  3517  0017D0  6EF6               	movwf	tblptrl,c
  3518  0017D2  0E06               	movlw	high __npowers_
  3519  0017D4  2035               	addwfc	?___awdiv+1,w,c
  3520  0017D6  6EF7               	movwf	tblptrh,c
  3521  0017D8                     	if	0	;There are less than 3 active tblptr bytes
  3522  0017D8                     	endif
  3523  0017D8  0009               	tblrd		*+
  3524  0017DA  CFF5 F084          	movff	tablat,___flmul@b
  3525  0017DE  0009               	tblrd		*+
  3526  0017E0  CFF5 F085          	movff	tablat,___flmul@b+1
  3527  0017E4  0009               	tblrd		*+
  3528  0017E6  CFF5 F086          	movff	tablat,___flmul@b+2
  3529  0017EA  000A               	tblrd		*-
  3530  0017EC  CFF5 F087          	movff	tablat,___flmul@b+3
  3531  0017F0  ECBC  F00D         	call	___flmul	;wreg free
  3532  0017F4  C084  F0A1         	movff	?___flmul,_scale$874
  3533  0017F8  C085  F0A2         	movff	?___flmul+1,_scale$874+1
  3534  0017FC  C086  F0A3         	movff	?___flmul+2,_scale$874+2
  3535  001800  C087  F0A4         	movff	?___flmul+3,_scale$874+3
  3536                           
  3537                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3538  001804  C0A1  F084         	movff	_scale$874,___flmul@b
  3539  001808  C0A2  F085         	movff	_scale$874+1,___flmul@b+1
  3540  00180C  C0A3  F086         	movff	_scale$874+2,___flmul@b+2
  3541  001810  C0A4  F087         	movff	_scale$874+3,___flmul@b+3
  3542  001814  0E00               	movlw	0
  3543  001816  6E31               	movwf	___awmod@divisor+1,c
  3544  001818  0E0A               	movlw	10
  3545  00181A  6E30               	movwf	___awmod@divisor,c
  3546  00181C  0100               	movlb	0	; () banked
  3547  00181E  51A5               	movf	scale@scl& (0+255),w,b
  3548  001820  6E2E               	movwf	___awmod@dividend,c
  3549  001822  6A2F               	clrf	___awmod@dividend+1,c
  3550  001824  BE2E               	btfsc	___awmod@dividend,7,c
  3551  001826  062F               	decf	___awmod@dividend+1,f,c
  3552  001828  EC7A  F018         	call	___awmod	;wreg free
  3553  00182C  90D8               	bcf	status,0,c
  3554  00182E  362E               	rlcf	?___awmod,f,c
  3555  001830  362F               	rlcf	?___awmod+1,f,c
  3556  001832  90D8               	bcf	status,0,c
  3557  001834  362E               	rlcf	?___awmod,f,c
  3558  001836  362F               	rlcf	?___awmod+1,f,c
  3559  001838  0E35               	movlw	low __npowers_
  3560  00183A  242E               	addwf	?___awmod,w,c
  3561  00183C  6EF6               	movwf	tblptrl,c
  3562  00183E  0E06               	movlw	high __npowers_
  3563  001840  202F               	addwfc	?___awmod+1,w,c
  3564  001842  6EF7               	movwf	tblptrh,c
  3565  001844                     	if	0	;There are less than 3 active tblptr bytes
  3566  001844                     	endif
  3567  001844  0009               	tblrd		*+
  3568  001846  CFF5 F088          	movff	tablat,___flmul@a
  3569  00184A  0009               	tblrd		*+
  3570  00184C  CFF5 F089          	movff	tablat,___flmul@a+1
  3571  001850  0009               	tblrd		*+
  3572  001852  CFF5 F08A          	movff	tablat,___flmul@a+2
  3573  001856  000A               	tblrd		*-
  3574  001858  CFF5 F08B          	movff	tablat,___flmul@a+3
  3575  00185C  ECBC  F00D         	call	___flmul	;wreg free
  3576  001860  C084  F09D         	movff	?___flmul,?_scale
  3577  001864  C085  F09E         	movff	?___flmul+1,?_scale+1
  3578  001868  C086  F09F         	movff	?___flmul+2,?_scale+2
  3579  00186C  C087  F0A0         	movff	?___flmul+3,?_scale+3
  3580  001870  0012               	return	
  3581  001872                     l221:
  3582                           
  3583                           ;doprnt.c: 432: else if(scl > 10)
  3584  001872  0100               	movlb	0	; () banked
  3585  001874  51A5               	movf	scale@scl& (0+255),w,b
  3586  001876  0A80               	xorlw	128
  3587  001878  0F75               	addlw	-139
  3588  00187A  A0D8               	btfss	status,0,c
  3589  00187C  D056               	goto	l224
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3593  00187E  0E00               	movlw	0
  3594  001880  6E37               	movwf	___awdiv@divisor+1,c
  3595  001882  0E0A               	movlw	10
  3596  001884  6E36               	movwf	___awdiv@divisor,c
  3597  001886  51A5               	movf	scale@scl& (0+255),w,b
  3598  001888  6E34               	movwf	___awdiv@dividend,c
  3599  00188A  6A35               	clrf	___awdiv@dividend+1,c
  3600  00188C  BE34               	btfsc	___awdiv@dividend,7,c
  3601  00188E  0635               	decf	___awdiv@dividend+1,f,c
  3602  001890  ECF6  F017         	call	___awdiv	;wreg free
  3603  001894  90D8               	bcf	status,0,c
  3604  001896  3634               	rlcf	?___awdiv,f,c
  3605  001898  3635               	rlcf	?___awdiv+1,f,c
  3606  00189A  90D8               	bcf	status,0,c
  3607  00189C  3634               	rlcf	?___awdiv,f,c
  3608  00189E  3635               	rlcf	?___awdiv+1,f,c
  3609  0018A0  0E24               	movlw	36
  3610  0018A2  2634               	addwf	?___awdiv,f,c
  3611  0018A4  0E00               	movlw	0
  3612  0018A6  2235               	addwfc	?___awdiv+1,f,c
  3613  0018A8  0E35               	movlw	low __npowers_
  3614  0018AA  2434               	addwf	?___awdiv,w,c
  3615  0018AC  6EF6               	movwf	tblptrl,c
  3616  0018AE  0E06               	movlw	high __npowers_
  3617  0018B0  2035               	addwfc	?___awdiv+1,w,c
  3618  0018B2  6EF7               	movwf	tblptrh,c
  3619  0018B4                     	if	0	;There are less than 3 active tblptr bytes
  3620  0018B4                     	endif
  3621  0018B4  0009               	tblrd		*+
  3622  0018B6  CFF5 F084          	movff	tablat,___flmul@b
  3623  0018BA  0009               	tblrd		*+
  3624  0018BC  CFF5 F085          	movff	tablat,___flmul@b+1
  3625  0018C0  0009               	tblrd		*+
  3626  0018C2  CFF5 F086          	movff	tablat,___flmul@b+2
  3627  0018C6  000A               	tblrd		*-
  3628  0018C8  CFF5 F087          	movff	tablat,___flmul@b+3
  3629  0018CC  0E00               	movlw	0
  3630  0018CE  6E31               	movwf	___awmod@divisor+1,c
  3631  0018D0  0E0A               	movlw	10
  3632  0018D2  6E30               	movwf	___awmod@divisor,c
  3633  0018D4  0100               	movlb	0	; () banked
  3634  0018D6  51A5               	movf	scale@scl& (0+255),w,b
  3635  0018D8  6E2E               	movwf	___awmod@dividend,c
  3636  0018DA  6A2F               	clrf	___awmod@dividend+1,c
  3637  0018DC  BE2E               	btfsc	___awmod@dividend,7,c
  3638  0018DE  062F               	decf	___awmod@dividend+1,f,c
  3639  0018E0  EC7A  F018         	call	___awmod	;wreg free
  3640  0018E4  90D8               	bcf	status,0,c
  3641  0018E6  362E               	rlcf	?___awmod,f,c
  3642  0018E8  362F               	rlcf	?___awmod+1,f,c
  3643  0018EA  90D8               	bcf	status,0,c
  3644  0018EC  362E               	rlcf	?___awmod,f,c
  3645  0018EE  362F               	rlcf	?___awmod+1,f,c
  3646  0018F0  0E35               	movlw	low __npowers_
  3647  0018F2  242E               	addwf	?___awmod,w,c
  3648  0018F4  6EF6               	movwf	tblptrl,c
  3649  0018F6  0E06               	movlw	high __npowers_
  3650  0018F8  202F               	addwfc	?___awmod+1,w,c
  3651  0018FA  6EF7               	movwf	tblptrh,c
  3652  0018FC                     	if	0	;There are less than 3 active tblptr bytes
  3653  0018FC                     	endif
  3654  0018FC  0009               	tblrd		*+
  3655  0018FE  CFF5 F088          	movff	tablat,___flmul@a
  3656  001902  0009               	tblrd		*+
  3657  001904  CFF5 F089          	movff	tablat,___flmul@a+1
  3658  001908  0009               	tblrd		*+
  3659  00190A  CFF5 F08A          	movff	tablat,___flmul@a+2
  3660  00190E  000A               	tblrd		*-
  3661  001910  CFF5 F08B          	movff	tablat,___flmul@a+3
  3662  001914  ECBC  F00D         	call	___flmul	;wreg free
  3663  001918  C084  F09D         	movff	?___flmul,?_scale
  3664  00191C  C085  F09E         	movff	?___flmul+1,?_scale+1
  3665  001920  C086  F09F         	movff	?___flmul+2,?_scale+2
  3666  001924  C087  F0A0         	movff	?___flmul+3,?_scale+3
  3667  001928  0012               	return	
  3668  00192A                     l224:
  3669                           
  3670                           ;doprnt.c: 434: return _npowers_[scl];
  3671  00192A  0100               	movlb	0	; () banked
  3672  00192C  51A5               	movf	scale@scl& (0+255),w,b
  3673  00192E  0D04               	mullw	4
  3674  001930  0E35               	movlw	low __npowers_
  3675  001932  24F3               	addwf	prodl,w,c
  3676  001934  6EF6               	movwf	tblptrl,c
  3677  001936  0E06               	movlw	high __npowers_
  3678  001938  20F4               	addwfc	prodh,w,c
  3679  00193A  6EF7               	movwf	tblptrh,c
  3680  00193C                     	if	0	;There are less than 3 active tblptr bytes
  3681  00193C                     	endif
  3682  00193C  0009               	tblrd		*+
  3683  00193E  CFF5 F09D          	movff	tablat,?_scale
  3684  001942  0009               	tblrd		*+
  3685  001944  CFF5 F09E          	movff	tablat,?_scale+1
  3686  001948  0009               	tblrd		*+
  3687  00194A  CFF5 F09F          	movff	tablat,?_scale+2
  3688  00194E  000A               	tblrd		*-
  3689  001950  CFF5 F0A0          	movff	tablat,?_scale+3
  3690                           
  3691                           ; BSR set to: 0
  3692  001954  0012               	return	
  3693  001956                     l220:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;doprnt.c: 435: }
  3697                           ;doprnt.c: 436: if(scl>=110)
  3698                           
  3699                           ; BSR set to: 0
  3700  001956  51A5               	movf	scale@scl& (0+255),w,b
  3701  001958  0A80               	xorlw	128
  3702  00195A  0F12               	addlw	-238
  3703  00195C  A0D8               	btfss	status,0,c
  3704  00195E  D09A               	goto	l225
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3708  001960  0E00               	movlw	0
  3709  001962  6E37               	movwf	___awdiv@divisor+1,c
  3710  001964  0E0A               	movlw	10
  3711  001966  6E36               	movwf	___awdiv@divisor,c
  3712  001968  0E00               	movlw	0
  3713  00196A  6E31               	movwf	___awmod@divisor+1,c
  3714  00196C  0E64               	movlw	100
  3715  00196E  6E30               	movwf	___awmod@divisor,c
  3716  001970  51A5               	movf	scale@scl& (0+255),w,b
  3717  001972  6E2E               	movwf	___awmod@dividend,c
  3718  001974  6A2F               	clrf	___awmod@dividend+1,c
  3719  001976  BE2E               	btfsc	___awmod@dividend,7,c
  3720  001978  062F               	decf	___awmod@dividend+1,f,c
  3721  00197A  EC7A  F018         	call	___awmod	;wreg free
  3722  00197E  C02E  F034         	movff	?___awmod,___awdiv@dividend
  3723  001982  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  3724  001986  ECF6  F017         	call	___awdiv	;wreg free
  3725  00198A  90D8               	bcf	status,0,c
  3726  00198C  3634               	rlcf	?___awdiv,f,c
  3727  00198E  3635               	rlcf	?___awdiv+1,f,c
  3728  001990  90D8               	bcf	status,0,c
  3729  001992  3634               	rlcf	?___awdiv,f,c
  3730  001994  3635               	rlcf	?___awdiv+1,f,c
  3731  001996  0E24               	movlw	36
  3732  001998  2634               	addwf	?___awdiv,f,c
  3733  00199A  0E00               	movlw	0
  3734  00199C  2235               	addwfc	?___awdiv+1,f,c
  3735  00199E  0E01               	movlw	low __powers_
  3736  0019A0  2434               	addwf	?___awdiv,w,c
  3737  0019A2  6EF6               	movwf	tblptrl,c
  3738  0019A4  0E06               	movlw	high __powers_
  3739  0019A6  2035               	addwfc	?___awdiv+1,w,c
  3740  0019A8  6EF7               	movwf	tblptrh,c
  3741  0019AA                     	if	0	;There are less than 3 active tblptr bytes
  3742  0019AA                     	endif
  3743  0019AA  0009               	tblrd		*+
  3744  0019AC  CFF5 F088          	movff	tablat,___flmul@a
  3745  0019B0  0009               	tblrd		*+
  3746  0019B2  CFF5 F089          	movff	tablat,___flmul@a+1
  3747  0019B6  0009               	tblrd		*+
  3748  0019B8  CFF5 F08A          	movff	tablat,___flmul@a+2
  3749  0019BC  000A               	tblrd		*-
  3750  0019BE  CFF5 F08B          	movff	tablat,___flmul@a+3
  3751  0019C2  0E00               	movlw	0
  3752  0019C4  6E37               	movwf	___awdiv@divisor+1,c
  3753  0019C6  0E64               	movlw	100
  3754  0019C8  6E36               	movwf	___awdiv@divisor,c
  3755  0019CA  0100               	movlb	0	; () banked
  3756  0019CC  51A5               	movf	scale@scl& (0+255),w,b
  3757  0019CE  6E34               	movwf	___awdiv@dividend,c
  3758  0019D0  6A35               	clrf	___awdiv@dividend+1,c
  3759  0019D2  BE34               	btfsc	___awdiv@dividend,7,c
  3760  0019D4  0635               	decf	___awdiv@dividend+1,f,c
  3761  0019D6  ECF6  F017         	call	___awdiv	;wreg free
  3762  0019DA  90D8               	bcf	status,0,c
  3763  0019DC  3634               	rlcf	?___awdiv,f,c
  3764  0019DE  3635               	rlcf	?___awdiv+1,f,c
  3765  0019E0  90D8               	bcf	status,0,c
  3766  0019E2  3634               	rlcf	?___awdiv,f,c
  3767  0019E4  3635               	rlcf	?___awdiv+1,f,c
  3768  0019E6  0E48               	movlw	72
  3769  0019E8  2634               	addwf	?___awdiv,f,c
  3770  0019EA  0E00               	movlw	0
  3771  0019EC  2235               	addwfc	?___awdiv+1,f,c
  3772  0019EE  0E01               	movlw	low __powers_
  3773  0019F0  2434               	addwf	?___awdiv,w,c
  3774  0019F2  6EF6               	movwf	tblptrl,c
  3775  0019F4  0E06               	movlw	high __powers_
  3776  0019F6  2035               	addwfc	?___awdiv+1,w,c
  3777  0019F8  6EF7               	movwf	tblptrh,c
  3778  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  3779  0019FA                     	endif
  3780  0019FA  0009               	tblrd		*+
  3781  0019FC  CFF5 F084          	movff	tablat,___flmul@b
  3782  001A00  0009               	tblrd		*+
  3783  001A02  CFF5 F085          	movff	tablat,___flmul@b+1
  3784  001A06  0009               	tblrd		*+
  3785  001A08  CFF5 F086          	movff	tablat,___flmul@b+2
  3786  001A0C  000A               	tblrd		*-
  3787  001A0E  CFF5 F087          	movff	tablat,___flmul@b+3
  3788  001A12  ECBC  F00D         	call	___flmul	;wreg free
  3789  001A16  C084  F0A1         	movff	?___flmul,_scale$874
  3790  001A1A  C085  F0A2         	movff	?___flmul+1,_scale$874+1
  3791  001A1E  C086  F0A3         	movff	?___flmul+2,_scale$874+2
  3792  001A22  C087  F0A4         	movff	?___flmul+3,_scale$874+3
  3793                           
  3794                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3795  001A26  C0A1  F084         	movff	_scale$874,___flmul@b
  3796  001A2A  C0A2  F085         	movff	_scale$874+1,___flmul@b+1
  3797  001A2E  C0A3  F086         	movff	_scale$874+2,___flmul@b+2
  3798  001A32  C0A4  F087         	movff	_scale$874+3,___flmul@b+3
  3799  001A36  0E00               	movlw	0
  3800  001A38  6E31               	movwf	___awmod@divisor+1,c
  3801  001A3A  0E0A               	movlw	10
  3802  001A3C  6E30               	movwf	___awmod@divisor,c
  3803  001A3E  0100               	movlb	0	; () banked
  3804  001A40  51A5               	movf	scale@scl& (0+255),w,b
  3805  001A42  6E2E               	movwf	___awmod@dividend,c
  3806  001A44  6A2F               	clrf	___awmod@dividend+1,c
  3807  001A46  BE2E               	btfsc	___awmod@dividend,7,c
  3808  001A48  062F               	decf	___awmod@dividend+1,f,c
  3809  001A4A  EC7A  F018         	call	___awmod	;wreg free
  3810  001A4E  90D8               	bcf	status,0,c
  3811  001A50  362E               	rlcf	?___awmod,f,c
  3812  001A52  362F               	rlcf	?___awmod+1,f,c
  3813  001A54  90D8               	bcf	status,0,c
  3814  001A56  362E               	rlcf	?___awmod,f,c
  3815  001A58  362F               	rlcf	?___awmod+1,f,c
  3816  001A5A  0E01               	movlw	low __powers_
  3817  001A5C  242E               	addwf	?___awmod,w,c
  3818  001A5E  6EF6               	movwf	tblptrl,c
  3819  001A60  0E06               	movlw	high __powers_
  3820  001A62  202F               	addwfc	?___awmod+1,w,c
  3821  001A64  6EF7               	movwf	tblptrh,c
  3822  001A66                     	if	0	;There are less than 3 active tblptr bytes
  3823  001A66                     	endif
  3824  001A66  0009               	tblrd		*+
  3825  001A68  CFF5 F088          	movff	tablat,___flmul@a
  3826  001A6C  0009               	tblrd		*+
  3827  001A6E  CFF5 F089          	movff	tablat,___flmul@a+1
  3828  001A72  0009               	tblrd		*+
  3829  001A74  CFF5 F08A          	movff	tablat,___flmul@a+2
  3830  001A78  000A               	tblrd		*-
  3831  001A7A  CFF5 F08B          	movff	tablat,___flmul@a+3
  3832  001A7E  ECBC  F00D         	call	___flmul	;wreg free
  3833  001A82  C084  F09D         	movff	?___flmul,?_scale
  3834  001A86  C085  F09E         	movff	?___flmul+1,?_scale+1
  3835  001A8A  C086  F09F         	movff	?___flmul+2,?_scale+2
  3836  001A8E  C087  F0A0         	movff	?___flmul+3,?_scale+3
  3837  001A92  0012               	return	
  3838  001A94                     l225:
  3839                           
  3840                           ;doprnt.c: 438: else if(scl > 10)
  3841  001A94  0100               	movlb	0	; () banked
  3842  001A96  51A5               	movf	scale@scl& (0+255),w,b
  3843  001A98  0A80               	xorlw	128
  3844  001A9A  0F75               	addlw	-139
  3845  001A9C  A0D8               	btfss	status,0,c
  3846  001A9E  D056               	goto	l227
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3850  001AA0  0E00               	movlw	0
  3851  001AA2  6E37               	movwf	___awdiv@divisor+1,c
  3852  001AA4  0E0A               	movlw	10
  3853  001AA6  6E36               	movwf	___awdiv@divisor,c
  3854  001AA8  51A5               	movf	scale@scl& (0+255),w,b
  3855  001AAA  6E34               	movwf	___awdiv@dividend,c
  3856  001AAC  6A35               	clrf	___awdiv@dividend+1,c
  3857  001AAE  BE34               	btfsc	___awdiv@dividend,7,c
  3858  001AB0  0635               	decf	___awdiv@dividend+1,f,c
  3859  001AB2  ECF6  F017         	call	___awdiv	;wreg free
  3860  001AB6  90D8               	bcf	status,0,c
  3861  001AB8  3634               	rlcf	?___awdiv,f,c
  3862  001ABA  3635               	rlcf	?___awdiv+1,f,c
  3863  001ABC  90D8               	bcf	status,0,c
  3864  001ABE  3634               	rlcf	?___awdiv,f,c
  3865  001AC0  3635               	rlcf	?___awdiv+1,f,c
  3866  001AC2  0E24               	movlw	36
  3867  001AC4  2634               	addwf	?___awdiv,f,c
  3868  001AC6  0E00               	movlw	0
  3869  001AC8  2235               	addwfc	?___awdiv+1,f,c
  3870  001ACA  0E01               	movlw	low __powers_
  3871  001ACC  2434               	addwf	?___awdiv,w,c
  3872  001ACE  6EF6               	movwf	tblptrl,c
  3873  001AD0  0E06               	movlw	high __powers_
  3874  001AD2  2035               	addwfc	?___awdiv+1,w,c
  3875  001AD4  6EF7               	movwf	tblptrh,c
  3876  001AD6                     	if	0	;There are less than 3 active tblptr bytes
  3877  001AD6                     	endif
  3878  001AD6  0009               	tblrd		*+
  3879  001AD8  CFF5 F084          	movff	tablat,___flmul@b
  3880  001ADC  0009               	tblrd		*+
  3881  001ADE  CFF5 F085          	movff	tablat,___flmul@b+1
  3882  001AE2  0009               	tblrd		*+
  3883  001AE4  CFF5 F086          	movff	tablat,___flmul@b+2
  3884  001AE8  000A               	tblrd		*-
  3885  001AEA  CFF5 F087          	movff	tablat,___flmul@b+3
  3886  001AEE  0E00               	movlw	0
  3887  001AF0  6E31               	movwf	___awmod@divisor+1,c
  3888  001AF2  0E0A               	movlw	10
  3889  001AF4  6E30               	movwf	___awmod@divisor,c
  3890  001AF6  0100               	movlb	0	; () banked
  3891  001AF8  51A5               	movf	scale@scl& (0+255),w,b
  3892  001AFA  6E2E               	movwf	___awmod@dividend,c
  3893  001AFC  6A2F               	clrf	___awmod@dividend+1,c
  3894  001AFE  BE2E               	btfsc	___awmod@dividend,7,c
  3895  001B00  062F               	decf	___awmod@dividend+1,f,c
  3896  001B02  EC7A  F018         	call	___awmod	;wreg free
  3897  001B06  90D8               	bcf	status,0,c
  3898  001B08  362E               	rlcf	?___awmod,f,c
  3899  001B0A  362F               	rlcf	?___awmod+1,f,c
  3900  001B0C  90D8               	bcf	status,0,c
  3901  001B0E  362E               	rlcf	?___awmod,f,c
  3902  001B10  362F               	rlcf	?___awmod+1,f,c
  3903  001B12  0E01               	movlw	low __powers_
  3904  001B14  242E               	addwf	?___awmod,w,c
  3905  001B16  6EF6               	movwf	tblptrl,c
  3906  001B18  0E06               	movlw	high __powers_
  3907  001B1A  202F               	addwfc	?___awmod+1,w,c
  3908  001B1C  6EF7               	movwf	tblptrh,c
  3909  001B1E                     	if	0	;There are less than 3 active tblptr bytes
  3910  001B1E                     	endif
  3911  001B1E  0009               	tblrd		*+
  3912  001B20  CFF5 F088          	movff	tablat,___flmul@a
  3913  001B24  0009               	tblrd		*+
  3914  001B26  CFF5 F089          	movff	tablat,___flmul@a+1
  3915  001B2A  0009               	tblrd		*+
  3916  001B2C  CFF5 F08A          	movff	tablat,___flmul@a+2
  3917  001B30  000A               	tblrd		*-
  3918  001B32  CFF5 F08B          	movff	tablat,___flmul@a+3
  3919  001B36  ECBC  F00D         	call	___flmul	;wreg free
  3920  001B3A  C084  F09D         	movff	?___flmul,?_scale
  3921  001B3E  C085  F09E         	movff	?___flmul+1,?_scale+1
  3922  001B42  C086  F09F         	movff	?___flmul+2,?_scale+2
  3923  001B46  C087  F0A0         	movff	?___flmul+3,?_scale+3
  3924  001B4A  0012               	return	
  3925  001B4C                     l227:
  3926                           
  3927                           ;doprnt.c: 440: return _powers_[scl];
  3928  001B4C  0100               	movlb	0	; () banked
  3929  001B4E  51A5               	movf	scale@scl& (0+255),w,b
  3930  001B50  0D04               	mullw	4
  3931  001B52  0E01               	movlw	low __powers_
  3932  001B54  24F3               	addwf	prodl,w,c
  3933  001B56  6EF6               	movwf	tblptrl,c
  3934  001B58  0E06               	movlw	high __powers_
  3935  001B5A  20F4               	addwfc	prodh,w,c
  3936  001B5C  6EF7               	movwf	tblptrh,c
  3937  001B5E                     	if	0	;There are less than 3 active tblptr bytes
  3938  001B5E                     	endif
  3939  001B5E  0009               	tblrd		*+
  3940  001B60  CFF5 F09D          	movff	tablat,?_scale
  3941  001B64  0009               	tblrd		*+
  3942  001B66  CFF5 F09E          	movff	tablat,?_scale+1
  3943  001B6A  0009               	tblrd		*+
  3944  001B6C  CFF5 F09F          	movff	tablat,?_scale+2
  3945  001B70  000A               	tblrd		*-
  3946  001B72  CFF5 F0A0          	movff	tablat,?_scale+3
  3947  001B76  0012               	return	
  3948  001B78                     __end_of_scale:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           postinc0	equ	0xFEE
  3958                           wreg	equ	0xFE8
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _isdigit *****************
  3966 ;; Defined at:
  3967 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  c               1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  c               1   47[COMRAM] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3981 ;;      Params:         0       0       0       0       0       0       0
  3982 ;;      Locals:         2       0       0       0       0       0       0
  3983 ;;      Temps:          1       0       0       0       0       0       0
  3984 ;;      Totals:         3       0       0       0       0       0       0
  3985 ;;Total ram usage:        3 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    2
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_sprintf
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text3
  3996  003458                     __ptext3:
  3997                           	opt stack 0
  3998  003458                     _isdigit:
  3999                           	opt stack 27
  4000                           
  4001                           ;incstack = 0
  4002                           ;isdigit@c stored from wreg
  4003  003458  6E30               	movwf	isdigit@c,c
  4004  00345A  0E00               	movlw	0
  4005  00345C  6E2F               	movwf	_isdigit$517,c
  4006  00345E  0E3A               	movlw	58
  4007  003460  6030               	cpfslt	isdigit@c,c
  4008  003462  D005               	goto	l669
  4009  003464  0E2F               	movlw	47
  4010  003466  6430               	cpfsgt	isdigit@c,c
  4011  003468  D002               	goto	l669
  4012  00346A  0E01               	movlw	1
  4013  00346C  6E2F               	movwf	_isdigit$517,c
  4014  00346E                     l669:
  4015  00346E  C02F  F02E         	movff	_isdigit$517,??_isdigit
  4016  003472  302E               	rrcf	??_isdigit,w,c
  4017  003474  0012               	return	
  4018  003476                     __end_of_isdigit:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           intcon	equ	0xFF2
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _fround *****************
  4036 ;; Defined at:
  4037 ;;		line 409 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  prec            1    wreg     unsigned char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  prec            1   41[BANK0 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  4   29[BANK0 ] unsigned char 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4051 ;;      Params:         0       4       0       0       0       0       0
  4052 ;;      Locals:         0       9       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0
  4054 ;;      Totals:         0      13       0       0       0       0       0
  4055 ;;Total ram usage:       13 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    3
  4058 ;; This function calls:
  4059 ;;		___awdiv
  4060 ;;		___awmod
  4061 ;;		___flmul
  4062 ;; This function is called by:
  4063 ;;		_sprintf
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text4
  4068  0024BE                     __ptext4:
  4069                           	opt stack 0
  4070  0024BE                     _fround:
  4071                           	opt stack 26
  4072                           
  4073                           ;incstack = 0
  4074                           ;fround@prec stored from wreg
  4075  0024BE  0100               	movlb	0	; () banked
  4076  0024C0  6FA9               	movwf	fround@prec& (0+255),b
  4077                           
  4078                           ;doprnt.c: 413: if(prec>=110)
  4079  0024C2  0E6D               	movlw	109
  4080  0024C4  0100               	movlb	0	; () banked
  4081  0024C6  65A9               	cpfsgt	fround@prec& (0+255),b
  4082  0024C8  D0AD               	goto	l214
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4086  0024CA  0E00               	movlw	0
  4087  0024CC  6E37               	movwf	___awdiv@divisor+1,c
  4088  0024CE  0E0A               	movlw	10
  4089  0024D0  6E36               	movwf	___awdiv@divisor,c
  4090  0024D2  0E00               	movlw	0
  4091  0024D4  6E31               	movwf	___awmod@divisor+1,c
  4092  0024D6  0E64               	movlw	100
  4093  0024D8  6E30               	movwf	___awmod@divisor,c
  4094  0024DA  C0A9  F02E         	movff	fround@prec,___awmod@dividend
  4095  0024DE  6A2F               	clrf	___awmod@dividend+1,c
  4096  0024E0  EC7A  F018         	call	___awmod	;wreg free
  4097  0024E4  C02E  F034         	movff	?___awmod,___awdiv@dividend
  4098  0024E8  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  4099  0024EC  ECF6  F017         	call	___awdiv	;wreg free
  4100  0024F0  90D8               	bcf	status,0,c
  4101  0024F2  3634               	rlcf	?___awdiv,f,c
  4102  0024F4  3635               	rlcf	?___awdiv+1,f,c
  4103  0024F6  90D8               	bcf	status,0,c
  4104  0024F8  3634               	rlcf	?___awdiv,f,c
  4105  0024FA  3635               	rlcf	?___awdiv+1,f,c
  4106  0024FC  0E24               	movlw	36
  4107  0024FE  2634               	addwf	?___awdiv,f,c
  4108  002500  0E00               	movlw	0
  4109  002502  2235               	addwfc	?___awdiv+1,f,c
  4110  002504  0E35               	movlw	low __npowers_
  4111  002506  2434               	addwf	?___awdiv,w,c
  4112  002508  6EF6               	movwf	tblptrl,c
  4113  00250A  0E06               	movlw	high __npowers_
  4114  00250C  2035               	addwfc	?___awdiv+1,w,c
  4115  00250E  6EF7               	movwf	tblptrh,c
  4116  002510                     	if	0	;There are less than 3 active tblptr bytes
  4117  002510                     	endif
  4118  002510  0009               	tblrd		*+
  4119  002512  CFF5 F088          	movff	tablat,___flmul@a
  4120  002516  0009               	tblrd		*+
  4121  002518  CFF5 F089          	movff	tablat,___flmul@a+1
  4122  00251C  0009               	tblrd		*+
  4123  00251E  CFF5 F08A          	movff	tablat,___flmul@a+2
  4124  002522  000A               	tblrd		*-
  4125  002524  CFF5 F08B          	movff	tablat,___flmul@a+3
  4126  002528  0E00               	movlw	0
  4127  00252A  6E37               	movwf	___awdiv@divisor+1,c
  4128  00252C  0E64               	movlw	100
  4129  00252E  6E36               	movwf	___awdiv@divisor,c
  4130  002530  C0A9  F034         	movff	fround@prec,___awdiv@dividend
  4131  002534  6A35               	clrf	___awdiv@dividend+1,c
  4132  002536  ECF6  F017         	call	___awdiv	;wreg free
  4133  00253A  90D8               	bcf	status,0,c
  4134  00253C  3634               	rlcf	?___awdiv,f,c
  4135  00253E  3635               	rlcf	?___awdiv+1,f,c
  4136  002540  90D8               	bcf	status,0,c
  4137  002542  3634               	rlcf	?___awdiv,f,c
  4138  002544  3635               	rlcf	?___awdiv+1,f,c
  4139  002546  0E48               	movlw	72
  4140  002548  2634               	addwf	?___awdiv,f,c
  4141  00254A  0E00               	movlw	0
  4142  00254C  2235               	addwfc	?___awdiv+1,f,c
  4143  00254E  0E35               	movlw	low __npowers_
  4144  002550  2434               	addwf	?___awdiv,w,c
  4145  002552  6EF6               	movwf	tblptrl,c
  4146  002554  0E06               	movlw	high __npowers_
  4147  002556  2035               	addwfc	?___awdiv+1,w,c
  4148  002558  6EF7               	movwf	tblptrh,c
  4149  00255A                     	if	0	;There are less than 3 active tblptr bytes
  4150  00255A                     	endif
  4151  00255A  0009               	tblrd		*+
  4152  00255C  CFF5 F084          	movff	tablat,___flmul@b
  4153  002560  0009               	tblrd		*+
  4154  002562  CFF5 F085          	movff	tablat,___flmul@b+1
  4155  002566  0009               	tblrd		*+
  4156  002568  CFF5 F086          	movff	tablat,___flmul@b+2
  4157  00256C  000A               	tblrd		*-
  4158  00256E  CFF5 F087          	movff	tablat,___flmul@b+3
  4159  002572  ECBC  F00D         	call	___flmul	;wreg free
  4160  002576  C084  F0A5         	movff	?___flmul,_fround$872
  4161  00257A  C085  F0A6         	movff	?___flmul+1,_fround$872+1
  4162  00257E  C086  F0A7         	movff	?___flmul+2,_fround$872+2
  4163  002582  C087  F0A8         	movff	?___flmul+3,_fround$872+3
  4164                           
  4165                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4166  002586  0E00               	movlw	0
  4167  002588  6E31               	movwf	___awmod@divisor+1,c
  4168  00258A  0E0A               	movlw	10
  4169  00258C  6E30               	movwf	___awmod@divisor,c
  4170  00258E  C0A9  F02E         	movff	fround@prec,___awmod@dividend
  4171  002592  6A2F               	clrf	___awmod@dividend+1,c
  4172  002594  EC7A  F018         	call	___awmod	;wreg free
  4173  002598  90D8               	bcf	status,0,c
  4174  00259A  362E               	rlcf	?___awmod,f,c
  4175  00259C  362F               	rlcf	?___awmod+1,f,c
  4176  00259E  90D8               	bcf	status,0,c
  4177  0025A0  362E               	rlcf	?___awmod,f,c
  4178  0025A2  362F               	rlcf	?___awmod+1,f,c
  4179  0025A4  0E35               	movlw	low __npowers_
  4180  0025A6  242E               	addwf	?___awmod,w,c
  4181  0025A8  6EF6               	movwf	tblptrl,c
  4182  0025AA  0E06               	movlw	high __npowers_
  4183  0025AC  202F               	addwfc	?___awmod+1,w,c
  4184  0025AE  6EF7               	movwf	tblptrh,c
  4185  0025B0                     	if	0	;There are less than 3 active tblptr bytes
  4186  0025B0                     	endif
  4187  0025B0  0009               	tblrd		*+
  4188  0025B2  CFF5 F088          	movff	tablat,___flmul@a
  4189  0025B6  0009               	tblrd		*+
  4190  0025B8  CFF5 F089          	movff	tablat,___flmul@a+1
  4191  0025BC  0009               	tblrd		*+
  4192  0025BE  CFF5 F08A          	movff	tablat,___flmul@a+2
  4193  0025C2  000A               	tblrd		*-
  4194  0025C4  CFF5 F08B          	movff	tablat,___flmul@a+3
  4195  0025C8  C0A5  F084         	movff	_fround$872,___flmul@b
  4196  0025CC  C0A6  F085         	movff	_fround$872+1,___flmul@b+1
  4197  0025D0  C0A7  F086         	movff	_fround$872+2,___flmul@b+2
  4198  0025D4  C0A8  F087         	movff	_fround$872+3,___flmul@b+3
  4199  0025D8  ECBC  F00D         	call	___flmul	;wreg free
  4200  0025DC  C084  F0A1         	movff	?___flmul,_fround$873
  4201  0025E0  C085  F0A2         	movff	?___flmul+1,_fround$873+1
  4202  0025E4  C086  F0A3         	movff	?___flmul+2,_fround$873+2
  4203  0025E8  C087  F0A4         	movff	?___flmul+3,_fround$873+3
  4204                           
  4205                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4206  0025EC  C0A1  F084         	movff	_fround$873,___flmul@b
  4207  0025F0  C0A2  F085         	movff	_fround$873+1,___flmul@b+1
  4208  0025F4  C0A3  F086         	movff	_fround$873+2,___flmul@b+2
  4209  0025F8  C0A4  F087         	movff	_fround$873+3,___flmul@b+3
  4210  0025FC  0E00               	movlw	0
  4211  0025FE  0100               	movlb	0	; () banked
  4212  002600  6F88               	movwf	___flmul@a& (0+255),b
  4213  002602  0E00               	movlw	0
  4214  002604  6F89               	movwf	(___flmul@a+1)& (0+255),b
  4215  002606  0E00               	movlw	0
  4216  002608  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  4217  00260A  0E3F               	movlw	63
  4218  00260C  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  4219  00260E  ECBC  F00D         	call	___flmul	;wreg free
  4220  002612  C084  F09D         	movff	?___flmul,?_fround
  4221  002616  C085  F09E         	movff	?___flmul+1,?_fround+1
  4222  00261A  C086  F09F         	movff	?___flmul+2,?_fround+2
  4223  00261E  C087  F0A0         	movff	?___flmul+3,?_fround+3
  4224  002622  0012               	return	
  4225  002624                     l214:
  4226                           
  4227                           ;doprnt.c: 415: else if(prec > 10)
  4228  002624  0E0A               	movlw	10
  4229  002626  0100               	movlb	0	; () banked
  4230  002628  65A9               	cpfsgt	fround@prec& (0+255),b
  4231  00262A  D06C               	goto	l217
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4235  00262C  0E00               	movlw	0
  4236  00262E  6E31               	movwf	___awmod@divisor+1,c
  4237  002630  0E0A               	movlw	10
  4238  002632  6E30               	movwf	___awmod@divisor,c
  4239  002634  C0A9  F02E         	movff	fround@prec,___awmod@dividend
  4240  002638  6A2F               	clrf	___awmod@dividend+1,c
  4241  00263A  EC7A  F018         	call	___awmod	;wreg free
  4242  00263E  90D8               	bcf	status,0,c
  4243  002640  362E               	rlcf	?___awmod,f,c
  4244  002642  362F               	rlcf	?___awmod+1,f,c
  4245  002644  90D8               	bcf	status,0,c
  4246  002646  362E               	rlcf	?___awmod,f,c
  4247  002648  362F               	rlcf	?___awmod+1,f,c
  4248  00264A  0E35               	movlw	low __npowers_
  4249  00264C  242E               	addwf	?___awmod,w,c
  4250  00264E  6EF6               	movwf	tblptrl,c
  4251  002650  0E06               	movlw	high __npowers_
  4252  002652  202F               	addwfc	?___awmod+1,w,c
  4253  002654  6EF7               	movwf	tblptrh,c
  4254  002656                     	if	0	;There are less than 3 active tblptr bytes
  4255  002656                     	endif
  4256  002656  0009               	tblrd		*+
  4257  002658  CFF5 F088          	movff	tablat,___flmul@a
  4258  00265C  0009               	tblrd		*+
  4259  00265E  CFF5 F089          	movff	tablat,___flmul@a+1
  4260  002662  0009               	tblrd		*+
  4261  002664  CFF5 F08A          	movff	tablat,___flmul@a+2
  4262  002668  000A               	tblrd		*-
  4263  00266A  CFF5 F08B          	movff	tablat,___flmul@a+3
  4264  00266E  0E00               	movlw	0
  4265  002670  6E37               	movwf	___awdiv@divisor+1,c
  4266  002672  0E0A               	movlw	10
  4267  002674  6E36               	movwf	___awdiv@divisor,c
  4268  002676  C0A9  F034         	movff	fround@prec,___awdiv@dividend
  4269  00267A  6A35               	clrf	___awdiv@dividend+1,c
  4270  00267C  ECF6  F017         	call	___awdiv	;wreg free
  4271  002680  90D8               	bcf	status,0,c
  4272  002682  3634               	rlcf	?___awdiv,f,c
  4273  002684  3635               	rlcf	?___awdiv+1,f,c
  4274  002686  90D8               	bcf	status,0,c
  4275  002688  3634               	rlcf	?___awdiv,f,c
  4276  00268A  3635               	rlcf	?___awdiv+1,f,c
  4277  00268C  0E24               	movlw	36
  4278  00268E  2634               	addwf	?___awdiv,f,c
  4279  002690  0E00               	movlw	0
  4280  002692  2235               	addwfc	?___awdiv+1,f,c
  4281  002694  0E35               	movlw	low __npowers_
  4282  002696  2434               	addwf	?___awdiv,w,c
  4283  002698  6EF6               	movwf	tblptrl,c
  4284  00269A  0E06               	movlw	high __npowers_
  4285  00269C  2035               	addwfc	?___awdiv+1,w,c
  4286  00269E  6EF7               	movwf	tblptrh,c
  4287  0026A0                     	if	0	;There are less than 3 active tblptr bytes
  4288  0026A0                     	endif
  4289  0026A0  0009               	tblrd		*+
  4290  0026A2  CFF5 F084          	movff	tablat,___flmul@b
  4291  0026A6  0009               	tblrd		*+
  4292  0026A8  CFF5 F085          	movff	tablat,___flmul@b+1
  4293  0026AC  0009               	tblrd		*+
  4294  0026AE  CFF5 F086          	movff	tablat,___flmul@b+2
  4295  0026B2  000A               	tblrd		*-
  4296  0026B4  CFF5 F087          	movff	tablat,___flmul@b+3
  4297  0026B8  ECBC  F00D         	call	___flmul	;wreg free
  4298  0026BC  C084  F0A5         	movff	?___flmul,_fround$872
  4299  0026C0  C085  F0A6         	movff	?___flmul+1,_fround$872+1
  4300  0026C4  C086  F0A7         	movff	?___flmul+2,_fround$872+2
  4301  0026C8  C087  F0A8         	movff	?___flmul+3,_fround$872+3
  4302                           
  4303                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4304  0026CC  C0A5  F084         	movff	_fround$872,___flmul@b
  4305  0026D0  C0A6  F085         	movff	_fround$872+1,___flmul@b+1
  4306  0026D4  C0A7  F086         	movff	_fround$872+2,___flmul@b+2
  4307  0026D8  C0A8  F087         	movff	_fround$872+3,___flmul@b+3
  4308  0026DC  0E00               	movlw	0
  4309  0026DE  0100               	movlb	0	; () banked
  4310  0026E0  6F88               	movwf	___flmul@a& (0+255),b
  4311  0026E2  0E00               	movlw	0
  4312  0026E4  6F89               	movwf	(___flmul@a+1)& (0+255),b
  4313  0026E6  0E00               	movlw	0
  4314  0026E8  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  4315  0026EA  0E3F               	movlw	63
  4316  0026EC  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  4317  0026EE  ECBC  F00D         	call	___flmul	;wreg free
  4318  0026F2  C084  F09D         	movff	?___flmul,?_fround
  4319  0026F6  C085  F09E         	movff	?___flmul+1,?_fround+1
  4320  0026FA  C086  F09F         	movff	?___flmul+2,?_fround+2
  4321  0026FE  C087  F0A0         	movff	?___flmul+3,?_fround+3
  4322  002702  0012               	return	
  4323  002704                     l217:
  4324                           
  4325                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4326  002704  0100               	movlb	0	; () banked
  4327  002706  51A9               	movf	fround@prec& (0+255),w,b
  4328  002708  0D04               	mullw	4
  4329  00270A  0E35               	movlw	low __npowers_
  4330  00270C  24F3               	addwf	prodl,w,c
  4331  00270E  6EF6               	movwf	tblptrl,c
  4332  002710  0E06               	movlw	high __npowers_
  4333  002712  20F4               	addwfc	prodh,w,c
  4334  002714  6EF7               	movwf	tblptrh,c
  4335  002716                     	if	0	;There are less than 3 active tblptr bytes
  4336  002716                     	endif
  4337  002716  0009               	tblrd		*+
  4338  002718  CFF5 F084          	movff	tablat,___flmul@b
  4339  00271C  0009               	tblrd		*+
  4340  00271E  CFF5 F085          	movff	tablat,___flmul@b+1
  4341  002722  0009               	tblrd		*+
  4342  002724  CFF5 F086          	movff	tablat,___flmul@b+2
  4343  002728  000A               	tblrd		*-
  4344  00272A  CFF5 F087          	movff	tablat,___flmul@b+3
  4345  00272E  0E00               	movlw	0
  4346  002730  6F88               	movwf	___flmul@a& (0+255),b
  4347  002732  0E00               	movlw	0
  4348  002734  6F89               	movwf	(___flmul@a+1)& (0+255),b
  4349  002736  0E00               	movlw	0
  4350  002738  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  4351  00273A  0E3F               	movlw	63
  4352  00273C  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  4353  00273E  ECBC  F00D         	call	___flmul	;wreg free
  4354  002742  C084  F09D         	movff	?___flmul,?_fround
  4355  002746  C085  F09E         	movff	?___flmul+1,?_fround+1
  4356  00274A  C086  F09F         	movff	?___flmul+2,?_fround+2
  4357  00274E  C087  F0A0         	movff	?___flmul+3,?_fround+3
  4358  002752  0012               	return	
  4359  002754                     __end_of_fround:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function ___awmod *****************
  4377 ;; Defined at:
  4378 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  dividend        2   45[COMRAM] int 
  4381 ;;  divisor         2   47[COMRAM] int 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  sign            1   50[COMRAM] unsigned char 
  4384 ;;  counter         1   49[COMRAM] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  2   45[COMRAM] int 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4394 ;;      Params:         4       0       0       0       0       0       0
  4395 ;;      Locals:         2       0       0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0
  4397 ;;      Totals:         6       0       0       0       0       0       0
  4398 ;;Total ram usage:        6 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    2
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_fround
  4405 ;;		_scale
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text5
  4410  0030F4                     __ptext5:
  4411                           	opt stack 0
  4412  0030F4                     ___awmod:
  4413                           	opt stack 26
  4414                           
  4415                           ;incstack = 0
  4416  0030F4  0E00               	movlw	0
  4417  0030F6  6E33               	movwf	___awmod@sign,c
  4418  0030F8  AE2F               	btfss	___awmod@dividend+1,7,c
  4419  0030FA  D006               	goto	l486
  4420  0030FC  6C2E               	negf	___awmod@dividend,c
  4421  0030FE  1E2F               	comf	___awmod@dividend+1,f,c
  4422  003100  B0D8               	btfsc	status,0,c
  4423  003102  2A2F               	incf	___awmod@dividend+1,f,c
  4424  003104  0E01               	movlw	1
  4425  003106  6E33               	movwf	___awmod@sign,c
  4426  003108                     l486:
  4427  003108  AE31               	btfss	___awmod@divisor+1,7,c
  4428  00310A  D004               	goto	l487
  4429  00310C  6C30               	negf	___awmod@divisor,c
  4430  00310E  1E31               	comf	___awmod@divisor+1,f,c
  4431  003110  B0D8               	btfsc	status,0,c
  4432  003112  2A31               	incf	___awmod@divisor+1,f,c
  4433  003114                     l487:
  4434  003114  5030               	movf	___awmod@divisor,w,c
  4435  003116  1031               	iorwf	___awmod@divisor+1,w,c
  4436  003118  B4D8               	btfsc	status,2,c
  4437  00311A  D018               	goto	l494
  4438  00311C  0E01               	movlw	1
  4439  00311E  6E32               	movwf	___awmod@counter,c
  4440  003120  D004               	goto	l489
  4441  003122  90D8               	bcf	status,0,c
  4442  003124  3630               	rlcf	___awmod@divisor,f,c
  4443  003126  3631               	rlcf	___awmod@divisor+1,f,c
  4444  003128  2A32               	incf	___awmod@counter,f,c
  4445  00312A                     l489:
  4446  00312A  AE31               	btfss	___awmod@divisor+1,7,c
  4447  00312C  D7FA               	goto	l490
  4448  00312E                     u5190:
  4449  00312E  5030               	movf	___awmod@divisor,w,c
  4450  003130  5C2E               	subwf	___awmod@dividend,w,c
  4451  003132  5031               	movf	___awmod@divisor+1,w,c
  4452  003134  582F               	subwfb	___awmod@dividend+1,w,c
  4453  003136  A0D8               	btfss	status,0,c
  4454  003138  D004               	goto	l493
  4455  00313A  5030               	movf	___awmod@divisor,w,c
  4456  00313C  5E2E               	subwf	___awmod@dividend,f,c
  4457  00313E  5031               	movf	___awmod@divisor+1,w,c
  4458  003140  5A2F               	subwfb	___awmod@dividend+1,f,c
  4459  003142                     l493:
  4460  003142  90D8               	bcf	status,0,c
  4461  003144  3231               	rrcf	___awmod@divisor+1,f,c
  4462  003146  3230               	rrcf	___awmod@divisor,f,c
  4463  003148  2E32               	decfsz	___awmod@counter,f,c
  4464  00314A  D7F1               	goto	u5190
  4465  00314C                     l494:
  4466  00314C  5033               	movf	___awmod@sign,w,c
  4467  00314E  B4D8               	btfsc	status,2,c
  4468  003150  D004               	goto	l495
  4469  003152  6C2E               	negf	___awmod@dividend,c
  4470  003154  1E2F               	comf	___awmod@dividend+1,f,c
  4471  003156  B0D8               	btfsc	status,0,c
  4472  003158  2A2F               	incf	___awmod@dividend+1,f,c
  4473  00315A                     l495:
  4474  00315A  C02E  F02E         	movff	___awmod@dividend,?___awmod
  4475  00315E  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4476  003162  0012               	return	
  4477  003164                     __end_of___awmod:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           intcon	equ	0xFF2
  4486                           postinc0	equ	0xFEE
  4487                           wreg	equ	0xFE8
  4488                           indf2	equ	0xFDF
  4489                           postinc2	equ	0xFDE
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function ___awdiv *****************
  4495 ;; Defined at:
  4496 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  dividend        2   51[COMRAM] int 
  4499 ;;  divisor         2   53[COMRAM] int 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  quotient        2    2[BANK0 ] int 
  4502 ;;  sign            1    1[BANK0 ] unsigned char 
  4503 ;;  counter         1    0[BANK0 ] unsigned char 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  2   51[COMRAM] int 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4513 ;;      Params:         4       0       0       0       0       0       0
  4514 ;;      Locals:         0       4       0       0       0       0       0
  4515 ;;      Temps:          0       0       0       0       0       0       0
  4516 ;;      Totals:         4       4       0       0       0       0       0
  4517 ;;Total ram usage:        8 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    2
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_fround
  4524 ;;		_scale
  4525 ;;		_sprintf
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text6
  4530  002FEC                     __ptext6:
  4531                           	opt stack 0
  4532  002FEC                     ___awdiv:
  4533                           	opt stack 26
  4534                           
  4535                           ;incstack = 0
  4536  002FEC  0E00               	movlw	0
  4537  002FEE  0100               	movlb	0	; () banked
  4538  002FF0  6F81               	movwf	___awdiv@sign& (0+255),b
  4539                           
  4540                           ; BSR set to: 0
  4541  002FF2  AE37               	btfss	___awdiv@divisor+1,7,c
  4542  002FF4  D006               	goto	l473
  4543                           
  4544                           ; BSR set to: 0
  4545  002FF6  6C36               	negf	___awdiv@divisor,c
  4546  002FF8  1E37               	comf	___awdiv@divisor+1,f,c
  4547  002FFA  B0D8               	btfsc	status,0,c
  4548  002FFC  2A37               	incf	___awdiv@divisor+1,f,c
  4549                           
  4550                           ; BSR set to: 0
  4551  002FFE  0E01               	movlw	1
  4552  003000  6F81               	movwf	___awdiv@sign& (0+255),b
  4553  003002                     l473:
  4554                           
  4555                           ; BSR set to: 0
  4556                           
  4557                           ; BSR set to: 0
  4558  003002  AE35               	btfss	___awdiv@dividend+1,7,c
  4559  003004  D006               	goto	l474
  4560                           
  4561                           ; BSR set to: 0
  4562  003006  6C34               	negf	___awdiv@dividend,c
  4563  003008  1E35               	comf	___awdiv@dividend+1,f,c
  4564  00300A  B0D8               	btfsc	status,0,c
  4565  00300C  2A35               	incf	___awdiv@dividend+1,f,c
  4566                           
  4567                           ; BSR set to: 0
  4568  00300E  0E01               	movlw	1
  4569  003010  1B81               	xorwf	___awdiv@sign& (0+255),f,b
  4570  003012                     l474:
  4571                           
  4572                           ; BSR set to: 0
  4573                           
  4574                           ; BSR set to: 0
  4575  003012  0E00               	movlw	0
  4576  003014  6F83               	movwf	(___awdiv@quotient+1)& (0+255),b
  4577  003016  0E00               	movlw	0
  4578  003018  6F82               	movwf	___awdiv@quotient& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581  00301A  5036               	movf	___awdiv@divisor,w,c
  4582  00301C  1037               	iorwf	___awdiv@divisor+1,w,c
  4583  00301E  B4D8               	btfsc	status,2,c
  4584  003020  D01C               	goto	l481
  4585                           
  4586                           ; BSR set to: 0
  4587  003022  0E01               	movlw	1
  4588  003024  6F80               	movwf	___awdiv@counter& (0+255),b
  4589  003026  D004               	goto	l476
  4590  003028                     
  4591                           ; BSR set to: 0
  4592                           
  4593                           ; BSR set to: 0
  4594  003028  90D8               	bcf	status,0,c
  4595  00302A  3636               	rlcf	___awdiv@divisor,f,c
  4596  00302C  3637               	rlcf	___awdiv@divisor+1,f,c
  4597  00302E  2B80               	incf	___awdiv@counter& (0+255),f,b
  4598  003030                     l476:
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  003030  AE37               	btfss	___awdiv@divisor+1,7,c
  4604  003032  D7FA               	goto	l477
  4605  003034                     u5130:
  4606                           
  4607                           ; BSR set to: 0
  4608                           
  4609                           ; BSR set to: 0
  4610                           
  4611                           ; BSR set to: 0
  4612  003034  90D8               	bcf	status,0,c
  4613  003036  3782               	rlcf	___awdiv@quotient& (0+255),f,b
  4614  003038  3783               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4615                           
  4616                           ; BSR set to: 0
  4617  00303A  5036               	movf	___awdiv@divisor,w,c
  4618  00303C  5C34               	subwf	___awdiv@dividend,w,c
  4619  00303E  5037               	movf	___awdiv@divisor+1,w,c
  4620  003040  5835               	subwfb	___awdiv@dividend+1,w,c
  4621  003042  A0D8               	btfss	status,0,c
  4622  003044  D005               	goto	l480
  4623                           
  4624                           ; BSR set to: 0
  4625  003046  5036               	movf	___awdiv@divisor,w,c
  4626  003048  5E34               	subwf	___awdiv@dividend,f,c
  4627  00304A  5037               	movf	___awdiv@divisor+1,w,c
  4628  00304C  5A35               	subwfb	___awdiv@dividend+1,f,c
  4629                           
  4630                           ; BSR set to: 0
  4631  00304E  8182               	bsf	___awdiv@quotient& (0+255),0,b
  4632  003050                     l480:
  4633                           
  4634                           ; BSR set to: 0
  4635                           
  4636                           ; BSR set to: 0
  4637  003050  90D8               	bcf	status,0,c
  4638  003052  3237               	rrcf	___awdiv@divisor+1,f,c
  4639  003054  3236               	rrcf	___awdiv@divisor,f,c
  4640                           
  4641                           ; BSR set to: 0
  4642  003056  2F80               	decfsz	___awdiv@counter& (0+255),f,b
  4643  003058  D7ED               	goto	u5130
  4644  00305A                     l481:
  4645                           
  4646                           ; BSR set to: 0
  4647                           
  4648                           ; BSR set to: 0
  4649                           
  4650                           ; BSR set to: 0
  4651  00305A  5181               	movf	___awdiv@sign& (0+255),w,b
  4652  00305C  B4D8               	btfsc	status,2,c
  4653  00305E  D004               	goto	l482
  4654                           
  4655                           ; BSR set to: 0
  4656  003060  6D82               	negf	___awdiv@quotient& (0+255),b
  4657  003062  1F83               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4658  003064  B0D8               	btfsc	status,0,c
  4659  003066  2B83               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4660  003068                     l482:
  4661                           
  4662                           ; BSR set to: 0
  4663                           
  4664                           ; BSR set to: 0
  4665  003068  C082  F034         	movff	___awdiv@quotient,?___awdiv
  4666  00306C  C083  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4667  003070  0012               	return	
  4668  003072                     __end_of___awdiv:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           intcon	equ	0xFF2
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function __tdiv_to_l_ *****************
  4686 ;; Defined at:
  4687 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  f1              4   45[COMRAM] float 
  4690 ;;  f2              4   49[COMRAM] float 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  quot            4    0[BANK0 ] unsigned long 
  4693 ;;  exp1            1    5[BANK0 ] unsigned char 
  4694 ;;  cntr            1    4[BANK0 ] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  4   45[COMRAM] unsigned long 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2, status,0
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4704 ;;      Params:         8       0       0       0       0       0       0
  4705 ;;      Locals:         0       6       0       0       0       0       0
  4706 ;;      Temps:          3       0       0       0       0       0       0
  4707 ;;      Totals:        11       6       0       0       0       0       0
  4708 ;;Total ram usage:       17 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    2
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_sprintf
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           	psect	text7
  4719  0028A8                     __ptext7:
  4720                           	opt stack 0
  4721  0028A8                     __tdiv_to_l_:
  4722                           	opt stack 27
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;incstack = 0
  4726  0028A8  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4727  0028AC  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4728  0028AE  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4729  0028B0  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4730  0028B2  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4731  0028B4  E301               	bnc	u5311
  4732  0028B6  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4733  0028B8                     u5311:
  4734  0028B8  5036               	movf	??__tdiv_to_l_,w,c
  4735  0028BA  0100               	movlb	0	; () banked
  4736  0028BC  6F85               	movwf	__tdiv_to_l_@exp1& (0+255),b
  4737  0028BE  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4738  0028C0  A4D8               	btfss	status,2,c
  4739  0028C2  D009               	goto	l609
  4740                           
  4741                           ; BSR set to: 0
  4742  0028C4  0E00               	movlw	0
  4743  0028C6  6E2E               	movwf	?__tdiv_to_l_,c
  4744  0028C8  0E00               	movlw	0
  4745  0028CA  6E2F               	movwf	?__tdiv_to_l_+1,c
  4746  0028CC  0E00               	movlw	0
  4747  0028CE  6E30               	movwf	?__tdiv_to_l_+2,c
  4748  0028D0  0E00               	movlw	0
  4749  0028D2  6E31               	movwf	?__tdiv_to_l_+3,c
  4750                           
  4751                           ; BSR set to: 0
  4752  0028D4  0012               	return	
  4753  0028D6                     l609:
  4754                           
  4755                           ; BSR set to: 0
  4756                           
  4757                           ; BSR set to: 0
  4758  0028D6  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4759  0028DA  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4760  0028DC  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4761  0028DE  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4762  0028E0  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4763  0028E2  E301               	bnc	u5331
  4764  0028E4  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4765  0028E6                     u5331:
  4766  0028E6  5036               	movf	??__tdiv_to_l_,w,c
  4767  0028E8  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4768  0028EA  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4769  0028EC  A4D8               	btfss	status,2,c
  4770  0028EE  D009               	goto	l611
  4771                           
  4772                           ; BSR set to: 0
  4773  0028F0  0E00               	movlw	0
  4774  0028F2  6E2E               	movwf	?__tdiv_to_l_,c
  4775  0028F4  0E00               	movlw	0
  4776  0028F6  6E2F               	movwf	?__tdiv_to_l_+1,c
  4777  0028F8  0E00               	movlw	0
  4778  0028FA  6E30               	movwf	?__tdiv_to_l_+2,c
  4779  0028FC  0E00               	movlw	0
  4780  0028FE  6E31               	movwf	?__tdiv_to_l_+3,c
  4781                           
  4782                           ; BSR set to: 0
  4783  002900  0012               	return	
  4784  002902                     l611:
  4785                           
  4786                           ; BSR set to: 0
  4787                           
  4788                           ; BSR set to: 0
  4789  002902  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4790                           
  4791                           ; BSR set to: 0
  4792  002904  0EFF               	movlw	255
  4793  002906  162E               	andwf	__tdiv_to_l_@f1,f,c
  4794  002908  0EFF               	movlw	255
  4795  00290A  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4796  00290C  0E00               	movlw	0
  4797  00290E  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4798  002910  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4799                           
  4800                           ; BSR set to: 0
  4801  002912  0EFF               	movlw	255
  4802  002914  1632               	andwf	__tdiv_to_l_@f2,f,c
  4803  002916  0EFF               	movlw	255
  4804  002918  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4805  00291A  0E00               	movlw	0
  4806  00291C  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4807                           
  4808                           ; BSR set to: 0
  4809  00291E  0E00               	movlw	0
  4810  002920  6F80               	movwf	__tdiv_to_l_@quot& (0+255),b
  4811  002922  0E00               	movlw	0
  4812  002924  6F81               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  4813  002926  0E00               	movlw	0
  4814  002928  6F82               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  4815  00292A  0E00               	movlw	0
  4816  00292C  6F83               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819  00292E  0E7F               	movlw	127
  4820  002930  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4821                           
  4822                           ; BSR set to: 0
  4823  002932  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4824  002934  0F98               	addlw	152
  4825  002936  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4826                           
  4827                           ; BSR set to: 0
  4828  002938  0E18               	movlw	24
  4829  00293A  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4830  00293C                     l612:
  4831                           
  4832                           ; BSR set to: 0
  4833  00293C  90D8               	bcf	status,0,c
  4834  00293E  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4835  002940  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4836  002942  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4837  002944  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4838                           
  4839                           ; BSR set to: 0
  4840  002946  5032               	movf	__tdiv_to_l_@f2,w,c
  4841  002948  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4842  00294A  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4843  00294C  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4844  00294E  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4845  002950  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4846  002952  A0D8               	btfss	status,0,c
  4847  002954  D007               	goto	l613
  4848                           
  4849                           ; BSR set to: 0
  4850  002956  5032               	movf	__tdiv_to_l_@f2,w,c
  4851  002958  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4852  00295A  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4853  00295C  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4854  00295E  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4855  002960  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4856                           
  4857                           ; BSR set to: 0
  4858  002962  8180               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  4859  002964                     l613:
  4860                           
  4861                           ; BSR set to: 0
  4862  002964  90D8               	bcf	status,0,c
  4863  002966  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4864  002968  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4865  00296A  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4866                           
  4867                           ; BSR set to: 0
  4868  00296C  2F84               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  4869  00296E  D7E6               	goto	l612
  4870                           
  4871                           ; BSR set to: 0
  4872                           
  4873                           ; BSR set to: 0
  4874  002970  AF85               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  4875  002972  D016               	goto	l615
  4876                           
  4877                           ; BSR set to: 0
  4878  002974  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4879  002976  0A80               	xorlw	128
  4880  002978  0F97               	addlw	151
  4881  00297A  B0D8               	btfsc	status,0,c
  4882  00297C  D009               	goto	l616
  4883                           
  4884                           ; BSR set to: 0
  4885  00297E  0E00               	movlw	0
  4886  002980  6E2E               	movwf	?__tdiv_to_l_,c
  4887  002982  0E00               	movlw	0
  4888  002984  6E2F               	movwf	?__tdiv_to_l_+1,c
  4889  002986  0E00               	movlw	0
  4890  002988  6E30               	movwf	?__tdiv_to_l_+2,c
  4891  00298A  0E00               	movlw	0
  4892  00298C  6E31               	movwf	?__tdiv_to_l_+3,c
  4893                           
  4894                           ; BSR set to: 0
  4895  00298E  0012               	return	
  4896  002990                     l616:
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901                           
  4902                           ; BSR set to: 0
  4903  002990  90D8               	bcf	status,0,c
  4904  002992  3383               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4905  002994  3382               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4906  002996  3381               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4907  002998  3380               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  4908                           
  4909                           ; BSR set to: 0
  4910  00299A  3F85               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  4911  00299C  D7F9               	goto	l616
  4912                           
  4913                           ; BSR set to: 0
  4914  00299E  D015               	goto	u5390
  4915  0029A0                     l615:
  4916                           
  4917                           ; BSR set to: 0
  4918                           
  4919                           ; BSR set to: 0
  4920  0029A0  0E17               	movlw	23
  4921  0029A2  6585               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  4922  0029A4  D00F               	goto	l621
  4923                           
  4924                           ; BSR set to: 0
  4925  0029A6  0E00               	movlw	0
  4926  0029A8  6E2E               	movwf	?__tdiv_to_l_,c
  4927  0029AA  0E00               	movlw	0
  4928  0029AC  6E2F               	movwf	?__tdiv_to_l_+1,c
  4929  0029AE  0E00               	movlw	0
  4930  0029B0  6E30               	movwf	?__tdiv_to_l_+2,c
  4931  0029B2  0E00               	movlw	0
  4932  0029B4  6E31               	movwf	?__tdiv_to_l_+3,c
  4933                           
  4934                           ; BSR set to: 0
  4935  0029B6  0012               	return	
  4936  0029B8                     
  4937                           ; BSR set to: 0
  4938                           
  4939                           ; BSR set to: 0
  4940  0029B8  90D8               	bcf	status,0,c
  4941  0029BA  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4942  0029BC  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4943  0029BE  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4944  0029C0  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4945  0029C2  0785               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  4946  0029C4                     l621:
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951  0029C4  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4952  0029C6  A4D8               	btfss	status,2,c
  4953  0029C8  D7F7               	goto	l622
  4954  0029CA                     u5390:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  0029CA  C080  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4960  0029CE  C081  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4961  0029D2  C082  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4962  0029D6  C083  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4963                           
  4964                           ; BSR set to: 0
  4965  0029DA  0012               	return		;funcret
  4966  0029DC                     __end_of__tdiv_to_l_:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           intcon	equ	0xFF2
  4975                           postinc0	equ	0xFEE
  4976                           wreg	equ	0xFE8
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function __div_to_l_ *****************
  4984 ;; Defined at:
  4985 ;;		line 60 in file "/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  f1              4   45[COMRAM] unsigned long 
  4988 ;;  f2              4   49[COMRAM] unsigned long 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;  quot            4    0[BANK0 ] unsigned long 
  4991 ;;  exp1            1    5[BANK0 ] unsigned char 
  4992 ;;  cntr            1    4[BANK0 ] unsigned char 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  4   45[COMRAM] unsigned long 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5002 ;;      Params:         8       0       0       0       0       0       0
  5003 ;;      Locals:         0       6       0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0
  5005 ;;      Totals:         8       6       0       0       0       0       0
  5006 ;;Total ram usage:       14 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    2
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_sprintf
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text8
  5017  0029DC                     __ptext8:
  5018                           	opt stack 0
  5019  0029DC                     __div_to_l_:
  5020                           	opt stack 27
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;incstack = 0
  5024  0029DC  3430               	rlcf	__div_to_l_@f1+2,w,c
  5025  0029DE  3431               	rlcf	__div_to_l_@f1+3,w,c
  5026  0029E0  0100               	movlb	0	; () banked
  5027  0029E2  6F85               	movwf	__div_to_l_@exp1& (0+255),b
  5028  0029E4  5185               	movf	__div_to_l_@exp1& (0+255),w,b
  5029  0029E6  A4D8               	btfss	status,2,c
  5030  0029E8  D009               	goto	l505
  5031                           
  5032                           ; BSR set to: 0
  5033  0029EA  0E00               	movlw	0
  5034  0029EC  6E2E               	movwf	?__div_to_l_,c
  5035  0029EE  0E00               	movlw	0
  5036  0029F0  6E2F               	movwf	?__div_to_l_+1,c
  5037  0029F2  0E00               	movlw	0
  5038  0029F4  6E30               	movwf	?__div_to_l_+2,c
  5039  0029F6  0E00               	movlw	0
  5040  0029F8  6E31               	movwf	?__div_to_l_+3,c
  5041                           
  5042                           ; BSR set to: 0
  5043  0029FA  0012               	return	
  5044  0029FC                     l505:
  5045                           
  5046                           ; BSR set to: 0
  5047                           
  5048                           ; BSR set to: 0
  5049  0029FC  3434               	rlcf	__div_to_l_@f2+2,w,c
  5050  0029FE  3435               	rlcf	__div_to_l_@f2+3,w,c
  5051  002A00  6F84               	movwf	__div_to_l_@cntr& (0+255),b
  5052  002A02  5184               	movf	__div_to_l_@cntr& (0+255),w,b
  5053  002A04  A4D8               	btfss	status,2,c
  5054  002A06  D009               	goto	l507
  5055                           
  5056                           ; BSR set to: 0
  5057  002A08  0E00               	movlw	0
  5058  002A0A  6E2E               	movwf	?__div_to_l_,c
  5059  002A0C  0E00               	movlw	0
  5060  002A0E  6E2F               	movwf	?__div_to_l_+1,c
  5061  002A10  0E00               	movlw	0
  5062  002A12  6E30               	movwf	?__div_to_l_+2,c
  5063  002A14  0E00               	movlw	0
  5064  002A16  6E31               	movwf	?__div_to_l_+3,c
  5065                           
  5066                           ; BSR set to: 0
  5067  002A18  0012               	return	
  5068  002A1A                     l507:
  5069                           
  5070                           ; BSR set to: 0
  5071                           
  5072                           ; BSR set to: 0
  5073  002A1A  8E30               	bsf	__div_to_l_@f1+2,7,c
  5074                           
  5075                           ; BSR set to: 0
  5076  002A1C  0EFF               	movlw	255
  5077  002A1E  162E               	andwf	__div_to_l_@f1,f,c
  5078  002A20  0EFF               	movlw	255
  5079  002A22  162F               	andwf	__div_to_l_@f1+1,f,c
  5080  002A24  0EFF               	movlw	255
  5081  002A26  1630               	andwf	__div_to_l_@f1+2,f,c
  5082  002A28  0E00               	movlw	0
  5083  002A2A  1631               	andwf	__div_to_l_@f1+3,f,c
  5084                           
  5085                           ; BSR set to: 0
  5086  002A2C  8E34               	bsf	__div_to_l_@f2+2,7,c
  5087  002A2E  0EFF               	movlw	255
  5088  002A30  1632               	andwf	__div_to_l_@f2,f,c
  5089  002A32  0EFF               	movlw	255
  5090  002A34  1633               	andwf	__div_to_l_@f2+1,f,c
  5091  002A36  0EFF               	movlw	255
  5092  002A38  1634               	andwf	__div_to_l_@f2+2,f,c
  5093  002A3A  0E00               	movlw	0
  5094  002A3C  1635               	andwf	__div_to_l_@f2+3,f,c
  5095                           
  5096                           ; BSR set to: 0
  5097  002A3E  0E00               	movlw	0
  5098  002A40  6F80               	movwf	__div_to_l_@quot& (0+255),b
  5099  002A42  0E00               	movlw	0
  5100  002A44  6F81               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5101  002A46  0E00               	movlw	0
  5102  002A48  6F82               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5103  002A4A  0E00               	movlw	0
  5104  002A4C  6F83               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5105                           
  5106                           ; BSR set to: 0
  5107  002A4E  0E7F               	movlw	127
  5108  002A50  5F85               	subwf	__div_to_l_@exp1& (0+255),f,b
  5109                           
  5110                           ; BSR set to: 0
  5111  002A52  5184               	movf	__div_to_l_@cntr& (0+255),w,b
  5112  002A54  0FA0               	addlw	160
  5113  002A56  5F85               	subwf	__div_to_l_@exp1& (0+255),f,b
  5114                           
  5115                           ; BSR set to: 0
  5116  002A58  0E20               	movlw	32
  5117  002A5A  6F84               	movwf	__div_to_l_@cntr& (0+255),b
  5118  002A5C                     
  5119                           ; BSR set to: 0
  5120                           
  5121                           ; BSR set to: 0
  5122  002A5C  90D8               	bcf	status,0,c
  5123  002A5E  3780               	rlcf	__div_to_l_@quot& (0+255),f,b
  5124  002A60  3781               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5125  002A62  3782               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5126  002A64  3783               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129  002A66  5032               	movf	__div_to_l_@f2,w,c
  5130  002A68  5C2E               	subwf	__div_to_l_@f1,w,c
  5131  002A6A  5033               	movf	__div_to_l_@f2+1,w,c
  5132  002A6C  582F               	subwfb	__div_to_l_@f1+1,w,c
  5133  002A6E  5034               	movf	__div_to_l_@f2+2,w,c
  5134  002A70  5830               	subwfb	__div_to_l_@f1+2,w,c
  5135  002A72  5035               	movf	__div_to_l_@f2+3,w,c
  5136  002A74  5831               	subwfb	__div_to_l_@f1+3,w,c
  5137  002A76  A0D8               	btfss	status,0,c
  5138  002A78  D009               	goto	l509
  5139                           
  5140                           ; BSR set to: 0
  5141  002A7A  5032               	movf	__div_to_l_@f2,w,c
  5142  002A7C  5E2E               	subwf	__div_to_l_@f1,f,c
  5143  002A7E  5033               	movf	__div_to_l_@f2+1,w,c
  5144  002A80  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  5145  002A82  5034               	movf	__div_to_l_@f2+2,w,c
  5146  002A84  5A30               	subwfb	__div_to_l_@f1+2,f,c
  5147  002A86  5035               	movf	__div_to_l_@f2+3,w,c
  5148  002A88  5A31               	subwfb	__div_to_l_@f1+3,f,c
  5149                           
  5150                           ; BSR set to: 0
  5151  002A8A  8180               	bsf	__div_to_l_@quot& (0+255),0,b
  5152  002A8C                     l509:
  5153                           
  5154                           ; BSR set to: 0
  5155                           
  5156                           ; BSR set to: 0
  5157  002A8C  90D8               	bcf	status,0,c
  5158  002A8E  362E               	rlcf	__div_to_l_@f1,f,c
  5159  002A90  362F               	rlcf	__div_to_l_@f1+1,f,c
  5160  002A92  3630               	rlcf	__div_to_l_@f1+2,f,c
  5161  002A94  3631               	rlcf	__div_to_l_@f1+3,f,c
  5162                           
  5163                           ; BSR set to: 0
  5164  002A96  2F84               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5165  002A98  D7E1               	goto	l508
  5166                           
  5167                           ; BSR set to: 0
  5168                           
  5169                           ; BSR set to: 0
  5170  002A9A  AF85               	btfss	__div_to_l_@exp1& (0+255),7,b
  5171  002A9C  D016               	goto	l511
  5172                           
  5173                           ; BSR set to: 0
  5174  002A9E  5185               	movf	__div_to_l_@exp1& (0+255),w,b
  5175  002AA0  0A80               	xorlw	128
  5176  002AA2  0F9F               	addlw	159
  5177  002AA4  B0D8               	btfsc	status,0,c
  5178  002AA6  D009               	goto	l512
  5179                           
  5180                           ; BSR set to: 0
  5181  002AA8  0E00               	movlw	0
  5182  002AAA  6E2E               	movwf	?__div_to_l_,c
  5183  002AAC  0E00               	movlw	0
  5184  002AAE  6E2F               	movwf	?__div_to_l_+1,c
  5185  002AB0  0E00               	movlw	0
  5186  002AB2  6E30               	movwf	?__div_to_l_+2,c
  5187  002AB4  0E00               	movlw	0
  5188  002AB6  6E31               	movwf	?__div_to_l_+3,c
  5189                           
  5190                           ; BSR set to: 0
  5191  002AB8  0012               	return	
  5192  002ABA                     l512:
  5193                           
  5194                           ; BSR set to: 0
  5195                           
  5196                           ; BSR set to: 0
  5197                           
  5198                           ; BSR set to: 0
  5199  002ABA  90D8               	bcf	status,0,c
  5200  002ABC  3383               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5201  002ABE  3382               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5202  002AC0  3381               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5203  002AC2  3380               	rrcf	__div_to_l_@quot& (0+255),f,b
  5204                           
  5205                           ; BSR set to: 0
  5206  002AC4  3F85               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5207  002AC6  D7F9               	goto	l512
  5208                           
  5209                           ; BSR set to: 0
  5210  002AC8  D015               	goto	u5460
  5211  002ACA                     l511:
  5212                           
  5213                           ; BSR set to: 0
  5214                           
  5215                           ; BSR set to: 0
  5216  002ACA  0E1F               	movlw	31
  5217  002ACC  6585               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5218  002ACE  D00F               	goto	l517
  5219                           
  5220                           ; BSR set to: 0
  5221  002AD0  0E00               	movlw	0
  5222  002AD2  6E2E               	movwf	?__div_to_l_,c
  5223  002AD4  0E00               	movlw	0
  5224  002AD6  6E2F               	movwf	?__div_to_l_+1,c
  5225  002AD8  0E00               	movlw	0
  5226  002ADA  6E30               	movwf	?__div_to_l_+2,c
  5227  002ADC  0E00               	movlw	0
  5228  002ADE  6E31               	movwf	?__div_to_l_+3,c
  5229                           
  5230                           ; BSR set to: 0
  5231  002AE0  0012               	return	
  5232  002AE2                     
  5233                           ; BSR set to: 0
  5234                           
  5235                           ; BSR set to: 0
  5236  002AE2  90D8               	bcf	status,0,c
  5237  002AE4  3780               	rlcf	__div_to_l_@quot& (0+255),f,b
  5238  002AE6  3781               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5239  002AE8  3782               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5240  002AEA  3783               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5241  002AEC  0785               	decf	__div_to_l_@exp1& (0+255),f,b
  5242  002AEE                     l517:
  5243                           
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  002AEE  5185               	movf	__div_to_l_@exp1& (0+255),w,b
  5248  002AF0  A4D8               	btfss	status,2,c
  5249  002AF2  D7F7               	goto	l518
  5250  002AF4                     u5460:
  5251                           
  5252                           ; BSR set to: 0
  5253                           
  5254                           ; BSR set to: 0
  5255  002AF4  C080  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  5256  002AF8  C081  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5257  002AFC  C082  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5258  002B00  C083  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5259                           
  5260                           ; BSR set to: 0
  5261  002B04  0012               	return		;funcret
  5262  002B06                     __end_of__div_to_l_:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           indf2	equ	0xFDF
  5274                           postinc2	equ	0xFDE
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function ___wmul *****************
  5280 ;; Defined at:
  5281 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  multiplier      2   45[COMRAM] unsigned int 
  5284 ;;  multiplicand    2   47[COMRAM] unsigned int 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  product         2   49[COMRAM] unsigned int 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  2   45[COMRAM] unsigned int 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, prodl, prodh
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5296 ;;      Params:         4       0       0       0       0       0       0
  5297 ;;      Locals:         2       0       0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0       0
  5299 ;;      Totals:         6       0       0       0       0       0       0
  5300 ;;Total ram usage:        6 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    2
  5303 ;; This function calls:
  5304 ;;		Nothing
  5305 ;; This function is called by:
  5306 ;;		_sprintf
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text9
  5311  003432                     __ptext9:
  5312                           	opt stack 0
  5313  003432                     ___wmul:
  5314                           	opt stack 27
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;incstack = 0
  5318  003432  502E               	movf	___wmul@multiplier,w,c
  5319  003434  0230               	mulwf	___wmul@multiplicand,c
  5320  003436  CFF3 F032          	movff	prodl,___wmul@product
  5321  00343A  CFF4 F033          	movff	prodh,___wmul@product+1
  5322  00343E  502E               	movf	___wmul@multiplier,w,c
  5323  003440  0231               	mulwf	___wmul@multiplicand+1,c
  5324  003442  50F3               	movf	prodl,w,c
  5325  003444  2633               	addwf	___wmul@product+1,f,c
  5326  003446  502F               	movf	___wmul@multiplier+1,w,c
  5327  003448  0230               	mulwf	___wmul@multiplicand,c
  5328  00344A  50F3               	movf	prodl,w,c
  5329  00344C  2633               	addwf	___wmul@product+1,f,c
  5330  00344E  C032  F02E         	movff	___wmul@product,?___wmul
  5331  003452  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  5332  003456  0012               	return	
  5333  003458                     __end_of___wmul:
  5334                           	opt stack 0
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function ___llmod *****************
  5351 ;; Defined at:
  5352 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  dividend        4   45[COMRAM] unsigned long 
  5355 ;;  divisor         4   49[COMRAM] unsigned long 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  counter         1   53[COMRAM] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  4   45[COMRAM] unsigned long 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5367 ;;      Params:         8       0       0       0       0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0
  5370 ;;      Totals:         9       0       0       0       0       0       0
  5371 ;;Total ram usage:        9 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_sprintf
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text10
  5382  003164                     __ptext10:
  5383                           	opt stack 0
  5384  003164                     ___llmod:
  5385                           	opt stack 27
  5386                           
  5387                           ;incstack = 0
  5388  003164  5032               	movf	___llmod@divisor,w,c
  5389  003166  1033               	iorwf	___llmod@divisor+1,w,c
  5390  003168  1034               	iorwf	___llmod@divisor+2,w,c
  5391  00316A  1035               	iorwf	___llmod@divisor+3,w,c
  5392  00316C  B4D8               	btfsc	status,2,c
  5393  00316E  D024               	goto	l710
  5394  003170  0E01               	movlw	1
  5395  003172  6E36               	movwf	___llmod@counter,c
  5396  003174  D006               	goto	l705
  5397  003176  90D8               	bcf	status,0,c
  5398  003178  3632               	rlcf	___llmod@divisor,f,c
  5399  00317A  3633               	rlcf	___llmod@divisor+1,f,c
  5400  00317C  3634               	rlcf	___llmod@divisor+2,f,c
  5401  00317E  3635               	rlcf	___llmod@divisor+3,f,c
  5402  003180  2A36               	incf	___llmod@counter,f,c
  5403  003182                     l705:
  5404  003182  AE35               	btfss	___llmod@divisor+3,7,c
  5405  003184  D7F8               	goto	l706
  5406  003186                     u5870:
  5407  003186  5032               	movf	___llmod@divisor,w,c
  5408  003188  5C2E               	subwf	___llmod@dividend,w,c
  5409  00318A  5033               	movf	___llmod@divisor+1,w,c
  5410  00318C  582F               	subwfb	___llmod@dividend+1,w,c
  5411  00318E  5034               	movf	___llmod@divisor+2,w,c
  5412  003190  5830               	subwfb	___llmod@dividend+2,w,c
  5413  003192  5035               	movf	___llmod@divisor+3,w,c
  5414  003194  5831               	subwfb	___llmod@dividend+3,w,c
  5415  003196  A0D8               	btfss	status,0,c
  5416  003198  D008               	goto	l709
  5417  00319A  5032               	movf	___llmod@divisor,w,c
  5418  00319C  5E2E               	subwf	___llmod@dividend,f,c
  5419  00319E  5033               	movf	___llmod@divisor+1,w,c
  5420  0031A0  5A2F               	subwfb	___llmod@dividend+1,f,c
  5421  0031A2  5034               	movf	___llmod@divisor+2,w,c
  5422  0031A4  5A30               	subwfb	___llmod@dividend+2,f,c
  5423  0031A6  5035               	movf	___llmod@divisor+3,w,c
  5424  0031A8  5A31               	subwfb	___llmod@dividend+3,f,c
  5425  0031AA                     l709:
  5426  0031AA  90D8               	bcf	status,0,c
  5427  0031AC  3235               	rrcf	___llmod@divisor+3,f,c
  5428  0031AE  3234               	rrcf	___llmod@divisor+2,f,c
  5429  0031B0  3233               	rrcf	___llmod@divisor+1,f,c
  5430  0031B2  3232               	rrcf	___llmod@divisor,f,c
  5431  0031B4  2E36               	decfsz	___llmod@counter,f,c
  5432  0031B6  D7E7               	goto	u5870
  5433  0031B8                     l710:
  5434  0031B8  C02E  F02E         	movff	___llmod@dividend,?___llmod
  5435  0031BC  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  5436  0031C0  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  5437  0031C4  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  5438  0031C8  0012               	return		;funcret
  5439  0031CA                     __end_of___llmod:
  5440                           	opt stack 0
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           intcon	equ	0xFF2
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           indf2	equ	0xFDF
  5451                           postinc2	equ	0xFDE
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function ___lldiv *****************
  5457 ;; Defined at:
  5458 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  dividend        4   45[COMRAM] unsigned long 
  5461 ;;  divisor         4   49[COMRAM] unsigned long 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  quotient        4   53[COMRAM] unsigned long 
  5464 ;;  counter         1   57[COMRAM] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  4   45[COMRAM] unsigned long 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5474 ;;      Params:         8       0       0       0       0       0       0
  5475 ;;      Locals:         5       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0
  5477 ;;      Totals:        13       0       0       0       0       0       0
  5478 ;;Total ram usage:       13 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    2
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_sprintf
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text11
  5489  003072                     __ptext11:
  5490                           	opt stack 0
  5491  003072                     ___lldiv:
  5492                           	opt stack 27
  5493                           
  5494                           ;incstack = 0
  5495  003072  0E00               	movlw	0
  5496  003074  6E36               	movwf	___lldiv@quotient,c
  5497  003076  0E00               	movlw	0
  5498  003078  6E37               	movwf	___lldiv@quotient+1,c
  5499  00307A  0E00               	movlw	0
  5500  00307C  6E38               	movwf	___lldiv@quotient+2,c
  5501  00307E  0E00               	movlw	0
  5502  003080  6E39               	movwf	___lldiv@quotient+3,c
  5503  003082  5032               	movf	___lldiv@divisor,w,c
  5504  003084  1033               	iorwf	___lldiv@divisor+1,w,c
  5505  003086  1034               	iorwf	___lldiv@divisor+2,w,c
  5506  003088  1035               	iorwf	___lldiv@divisor+3,w,c
  5507  00308A  B4D8               	btfsc	status,2,c
  5508  00308C  D02A               	goto	l700
  5509  00308E  0E01               	movlw	1
  5510  003090  6E3A               	movwf	___lldiv@counter,c
  5511  003092  D006               	goto	l695
  5512  003094  90D8               	bcf	status,0,c
  5513  003096  3632               	rlcf	___lldiv@divisor,f,c
  5514  003098  3633               	rlcf	___lldiv@divisor+1,f,c
  5515  00309A  3634               	rlcf	___lldiv@divisor+2,f,c
  5516  00309C  3635               	rlcf	___lldiv@divisor+3,f,c
  5517  00309E  2A3A               	incf	___lldiv@counter,f,c
  5518  0030A0                     l695:
  5519  0030A0  AE35               	btfss	___lldiv@divisor+3,7,c
  5520  0030A2  D7F8               	goto	l696
  5521  0030A4                     u5840:
  5522  0030A4  90D8               	bcf	status,0,c
  5523  0030A6  3636               	rlcf	___lldiv@quotient,f,c
  5524  0030A8  3637               	rlcf	___lldiv@quotient+1,f,c
  5525  0030AA  3638               	rlcf	___lldiv@quotient+2,f,c
  5526  0030AC  3639               	rlcf	___lldiv@quotient+3,f,c
  5527  0030AE  5032               	movf	___lldiv@divisor,w,c
  5528  0030B0  5C2E               	subwf	___lldiv@dividend,w,c
  5529  0030B2  5033               	movf	___lldiv@divisor+1,w,c
  5530  0030B4  582F               	subwfb	___lldiv@dividend+1,w,c
  5531  0030B6  5034               	movf	___lldiv@divisor+2,w,c
  5532  0030B8  5830               	subwfb	___lldiv@dividend+2,w,c
  5533  0030BA  5035               	movf	___lldiv@divisor+3,w,c
  5534  0030BC  5831               	subwfb	___lldiv@dividend+3,w,c
  5535  0030BE  A0D8               	btfss	status,0,c
  5536  0030C0  D009               	goto	l699
  5537  0030C2  5032               	movf	___lldiv@divisor,w,c
  5538  0030C4  5E2E               	subwf	___lldiv@dividend,f,c
  5539  0030C6  5033               	movf	___lldiv@divisor+1,w,c
  5540  0030C8  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5541  0030CA  5034               	movf	___lldiv@divisor+2,w,c
  5542  0030CC  5A30               	subwfb	___lldiv@dividend+2,f,c
  5543  0030CE  5035               	movf	___lldiv@divisor+3,w,c
  5544  0030D0  5A31               	subwfb	___lldiv@dividend+3,f,c
  5545  0030D2  8036               	bsf	___lldiv@quotient,0,c
  5546  0030D4                     l699:
  5547  0030D4  90D8               	bcf	status,0,c
  5548  0030D6  3235               	rrcf	___lldiv@divisor+3,f,c
  5549  0030D8  3234               	rrcf	___lldiv@divisor+2,f,c
  5550  0030DA  3233               	rrcf	___lldiv@divisor+1,f,c
  5551  0030DC  3232               	rrcf	___lldiv@divisor,f,c
  5552  0030DE  2E3A               	decfsz	___lldiv@counter,f,c
  5553  0030E0  D7E1               	goto	u5840
  5554  0030E2                     l700:
  5555  0030E2  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5556  0030E6  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5557  0030EA  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5558  0030EE  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5559  0030F2  0012               	return		;funcret
  5560  0030F4                     __end_of___lldiv:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf2	equ	0xFDF
  5572                           postinc2	equ	0xFDE
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function ___fltol *****************
  5578 ;; Defined at:
  5579 ;;		line 43 in file "/opt/microchip/xc8/v1.45/sources/common/fltol.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  f1              4   38[BANK0 ] unsigned long 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  exp1            1   56[COMRAM] unsigned char 
  5584 ;;  sign1           1   55[COMRAM] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  4   38[BANK0 ] long 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5594 ;;      Params:         0       4       0       0       0       0       0
  5595 ;;      Locals:         2       0       0       0       0       0       0
  5596 ;;      Temps:          0       4       0       0       0       0       0
  5597 ;;      Totals:         2       8       0       0       0       0       0
  5598 ;;Total ram usage:       10 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    2
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_sprintf
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text12
  5609  002E50                     __ptext12:
  5610                           	opt stack 0
  5611  002E50                     ___fltol:
  5612                           	opt stack 27
  5613                           
  5614                           ;incstack = 0
  5615  002E50  0100               	movlb	0	; () banked
  5616  002E52  35A8               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5617  002E54  35A9               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5618  002E56  6E39               	movwf	___fltol@exp1,c
  5619  002E58  5039               	movf	___fltol@exp1,w,c
  5620  002E5A  A4D8               	btfss	status,2,c
  5621  002E5C  D009               	goto	l552
  5622                           
  5623                           ; BSR set to: 0
  5624  002E5E  0E00               	movlw	0
  5625  002E60  6FA6               	movwf	?___fltol& (0+255),b
  5626  002E62  0E00               	movlw	0
  5627  002E64  6FA7               	movwf	(?___fltol+1)& (0+255),b
  5628  002E66  0E00               	movlw	0
  5629  002E68  6FA8               	movwf	(?___fltol+2)& (0+255),b
  5630  002E6A  0E00               	movlw	0
  5631  002E6C  6FA9               	movwf	(?___fltol+3)& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634  002E6E  0012               	return	
  5635  002E70                     l552:
  5636                           
  5637                           ; BSR set to: 0
  5638                           
  5639                           ; BSR set to: 0
  5640  002E70  C0A6  F0AA         	movff	___fltol@f1,??___fltol
  5641  002E74  C0A7  F0AB         	movff	___fltol@f1+1,??___fltol+1
  5642  002E78  C0A8  F0AC         	movff	___fltol@f1+2,??___fltol+2
  5643  002E7C  C0A9  F0AD         	movff	___fltol@f1+3,??___fltol+3
  5644  002E80  0E20               	movlw	32
  5645  002E82  D005               	goto	u5770
  5646  002E84                     u5775:
  5647  002E84  90D8               	bcf	status,0,c
  5648  002E86  33AD               	rrcf	(??___fltol+3)& (0+255),f,b
  5649  002E88  33AC               	rrcf	(??___fltol+2)& (0+255),f,b
  5650  002E8A  33AB               	rrcf	(??___fltol+1)& (0+255),f,b
  5651  002E8C  33AA               	rrcf	??___fltol& (0+255),f,b
  5652  002E8E                     u5770:
  5653  002E8E  2EE8               	decfsz	wreg,f,c
  5654  002E90  D7F9               	goto	u5775
  5655  002E92  51AA               	movf	??___fltol& (0+255),w,b
  5656  002E94  6E38               	movwf	___fltol@sign1,c
  5657                           
  5658                           ; BSR set to: 0
  5659  002E96  8FA8               	bsf	(___fltol@f1+2)& (0+255),7,b
  5660                           
  5661                           ; BSR set to: 0
  5662  002E98  0EFF               	movlw	255
  5663  002E9A  17A6               	andwf	___fltol@f1& (0+255),f,b
  5664  002E9C  0EFF               	movlw	255
  5665  002E9E  17A7               	andwf	(___fltol@f1+1)& (0+255),f,b
  5666  002EA0  0EFF               	movlw	255
  5667  002EA2  17A8               	andwf	(___fltol@f1+2)& (0+255),f,b
  5668  002EA4  0E00               	movlw	0
  5669  002EA6  17A9               	andwf	(___fltol@f1+3)& (0+255),f,b
  5670                           
  5671                           ; BSR set to: 0
  5672  002EA8  0E96               	movlw	150
  5673  002EAA  5E39               	subwf	___fltol@exp1,f,c
  5674                           
  5675                           ; BSR set to: 0
  5676  002EAC  AE39               	btfss	___fltol@exp1,7,c
  5677  002EAE  D016               	goto	l554
  5678                           
  5679                           ; BSR set to: 0
  5680  002EB0  5039               	movf	___fltol@exp1,w,c
  5681  002EB2  0A80               	xorlw	128
  5682  002EB4  0F97               	addlw	151
  5683  002EB6  B0D8               	btfsc	status,0,c
  5684  002EB8  D009               	goto	l555
  5685                           
  5686                           ; BSR set to: 0
  5687  002EBA  0E00               	movlw	0
  5688  002EBC  6FA6               	movwf	?___fltol& (0+255),b
  5689  002EBE  0E00               	movlw	0
  5690  002EC0  6FA7               	movwf	(?___fltol+1)& (0+255),b
  5691  002EC2  0E00               	movlw	0
  5692  002EC4  6FA8               	movwf	(?___fltol+2)& (0+255),b
  5693  002EC6  0E00               	movlw	0
  5694  002EC8  6FA9               	movwf	(?___fltol+3)& (0+255),b
  5695                           
  5696                           ; BSR set to: 0
  5697  002ECA  0012               	return	
  5698  002ECC                     l555:
  5699                           
  5700                           ; BSR set to: 0
  5701                           
  5702                           ; BSR set to: 0
  5703                           
  5704                           ; BSR set to: 0
  5705  002ECC  90D8               	bcf	status,0,c
  5706  002ECE  33A9               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5707  002ED0  33A8               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5708  002ED2  33A7               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5709  002ED4  33A6               	rrcf	___fltol@f1& (0+255),f,b
  5710                           
  5711                           ; BSR set to: 0
  5712  002ED6  3E39               	incfsz	___fltol@exp1,f,c
  5713  002ED8  D7F9               	goto	l555
  5714                           
  5715                           ; BSR set to: 0
  5716  002EDA  D015               	goto	u5810
  5717  002EDC                     l554:
  5718                           
  5719                           ; BSR set to: 0
  5720                           
  5721                           ; BSR set to: 0
  5722  002EDC  0E1F               	movlw	31
  5723  002EDE  6439               	cpfsgt	___fltol@exp1,c
  5724  002EE0  D00F               	goto	l560
  5725                           
  5726                           ; BSR set to: 0
  5727  002EE2  0E00               	movlw	0
  5728  002EE4  6FA6               	movwf	?___fltol& (0+255),b
  5729  002EE6  0E00               	movlw	0
  5730  002EE8  6FA7               	movwf	(?___fltol+1)& (0+255),b
  5731  002EEA  0E00               	movlw	0
  5732  002EEC  6FA8               	movwf	(?___fltol+2)& (0+255),b
  5733  002EEE  0E00               	movlw	0
  5734  002EF0  6FA9               	movwf	(?___fltol+3)& (0+255),b
  5735                           
  5736                           ; BSR set to: 0
  5737  002EF2  0012               	return	
  5738  002EF4                     
  5739                           ; BSR set to: 0
  5740                           
  5741                           ; BSR set to: 0
  5742  002EF4  90D8               	bcf	status,0,c
  5743  002EF6  37A6               	rlcf	___fltol@f1& (0+255),f,b
  5744  002EF8  37A7               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5745  002EFA  37A8               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5746  002EFC  37A9               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5747  002EFE  0639               	decf	___fltol@exp1,f,c
  5748  002F00                     l560:
  5749                           
  5750                           ; BSR set to: 0
  5751                           
  5752                           ; BSR set to: 0
  5753  002F00  5039               	movf	___fltol@exp1,w,c
  5754  002F02  A4D8               	btfss	status,2,c
  5755  002F04  D7F7               	goto	l561
  5756  002F06                     u5810:
  5757                           
  5758                           ; BSR set to: 0
  5759                           
  5760                           ; BSR set to: 0
  5761                           
  5762                           ; BSR set to: 0
  5763  002F06  5038               	movf	___fltol@sign1,w,c
  5764  002F08  B4D8               	btfsc	status,2,c
  5765  002F0A  D008               	goto	l563
  5766                           
  5767                           ; BSR set to: 0
  5768  002F0C  1FA9               	comf	(___fltol@f1+3)& (0+255),f,b
  5769  002F0E  1FA8               	comf	(___fltol@f1+2)& (0+255),f,b
  5770  002F10  1FA7               	comf	(___fltol@f1+1)& (0+255),f,b
  5771  002F12  6DA6               	negf	___fltol@f1& (0+255),b
  5772  002F14  0E00               	movlw	0
  5773  002F16  23A7               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5774  002F18  23A8               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5775  002F1A  23A9               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5776  002F1C                     l563:
  5777                           
  5778                           ; BSR set to: 0
  5779                           
  5780                           ; BSR set to: 0
  5781  002F1C  C0A6  F0A6         	movff	___fltol@f1,?___fltol
  5782  002F20  C0A7  F0A7         	movff	___fltol@f1+1,?___fltol+1
  5783  002F24  C0A8  F0A8         	movff	___fltol@f1+2,?___fltol+2
  5784  002F28  C0A9  F0A9         	movff	___fltol@f1+3,?___fltol+3
  5785  002F2C  0012               	return	
  5786  002F2E                     __end_of___fltol:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           intcon	equ	0xFF2
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function ___flsub *****************
  5804 ;; Defined at:
  5805 ;;		line 245 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  b               4   69[BANK0 ] long 
  5808 ;;  a               4   73[BANK0 ] long 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  4   69[BANK0 ] long 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5820 ;;      Params:         0       8       0       0       0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0
  5823 ;;      Totals:         0       8       0       0       0       0       0
  5824 ;;Total ram usage:        8 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    3
  5827 ;; This function calls:
  5828 ;;		___fladd
  5829 ;; This function is called by:
  5830 ;;		_sprintf
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text13
  5835  003266                     __ptext13:
  5836                           	opt stack 0
  5837  003266                     ___flsub:
  5838                           	opt stack 26
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;incstack = 0
  5842  003266  0E00               	movlw	0
  5843  003268  0100               	movlb	0	; () banked
  5844  00326A  1BC9               	xorwf	___flsub@a& (0+255),f,b
  5845  00326C  0E00               	movlw	0
  5846  00326E  1BCA               	xorwf	(___flsub@a+1)& (0+255),f,b
  5847  003270  0E00               	movlw	0
  5848  003272  1BCB               	xorwf	(___flsub@a+2)& (0+255),f,b
  5849  003274  0E80               	movlw	128
  5850  003276  1BCC               	xorwf	(___flsub@a+3)& (0+255),f,b
  5851                           
  5852                           ; BSR set to: 0
  5853  003278  C0C5  F0B1         	movff	___flsub@b,___fladd@b
  5854  00327C  C0C6  F0B2         	movff	___flsub@b+1,___fladd@b+1
  5855  003280  C0C7  F0B3         	movff	___flsub@b+2,___fladd@b+2
  5856  003284  C0C8  F0B4         	movff	___flsub@b+3,___fladd@b+3
  5857  003288  C0C9  F0B5         	movff	___flsub@a,___fladd@a
  5858  00328C  C0CA  F0B6         	movff	___flsub@a+1,___fladd@a+1
  5859  003290  C0CB  F0B7         	movff	___flsub@a+2,___fladd@a+2
  5860  003294  C0CC  F0B8         	movff	___flsub@a+3,___fladd@a+3
  5861  003298  EC65  F00F         	call	___fladd	;wreg free
  5862  00329C  C0B1  F0C5         	movff	?___fladd,?___flsub
  5863  0032A0  C0B2  F0C6         	movff	?___fladd+1,?___flsub+1
  5864  0032A4  C0B3  F0C7         	movff	?___fladd+2,?___flsub+2
  5865  0032A8  C0B4  F0C8         	movff	?___fladd+3,?___flsub+3
  5866  0032AC  0012               	return	
  5867  0032AE                     __end_of___flsub:
  5868                           	opt stack 0
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           intcon	equ	0xFF2
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function ___fladd *****************
  5885 ;; Defined at:
  5886 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/sprcadd.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  b               4   49[BANK0 ] long 
  5889 ;;  a               4   53[BANK0 ] long 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  grs             1   68[BANK0 ] unsigned char 
  5892 ;;  bexp            1   67[BANK0 ] unsigned char 
  5893 ;;  aexp            1   66[BANK0 ] unsigned char 
  5894 ;;  signs           1   65[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  4   49[BANK0 ] unsigned char 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         0       8       0       0       0       0       0
  5905 ;;      Locals:         0       4       0       0       0       0       0
  5906 ;;      Temps:          0       8       0       0       0       0       0
  5907 ;;      Totals:         0      20       0       0       0       0       0
  5908 ;;Total ram usage:       20 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    2
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;;		_sprintf
  5916 ;;		___flsub
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text14
  5921  001ECA                     __ptext14:
  5922                           	opt stack 0
  5923  001ECA                     ___fladd:
  5924                           	opt stack 26
  5925                           
  5926                           ;incstack = 0
  5927  001ECA  0100               	movlb	0	; () banked
  5928  001ECC  51B4               	movf	(___fladd@b+3)& (0+255),w,b
  5929  001ECE  0B80               	andlw	128
  5930  001ED0  6FC1               	movwf	___fladd@signs& (0+255),b
  5931  001ED2  51B4               	movf	(___fladd@b+3)& (0+255),w,b
  5932  001ED4  25B4               	addwf	(___fladd@b+3)& (0+255),w,b
  5933  001ED6  6FC3               	movwf	___fladd@bexp& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936  001ED8  BFB3               	btfsc	(___fladd@b+2)& (0+255),7,b
  5937                           
  5938                           ; BSR set to: 0
  5939  001EDA  81C3               	bsf	___fladd@bexp& (0+255),0,b
  5940                           
  5941                           ; BSR set to: 0
  5942                           
  5943                           ; BSR set to: 0
  5944  001EDC  51C3               	movf	___fladd@bexp& (0+255),w,b
  5945  001EDE  B4D8               	btfsc	status,2,c
  5946  001EE0  D00D               	goto	l777
  5947                           
  5948                           ; BSR set to: 0
  5949  001EE2  29C3               	incf	___fladd@bexp& (0+255),w,b
  5950  001EE4  A4D8               	btfss	status,2,c
  5951  001EE6  D008               	goto	l778
  5952                           
  5953                           ; BSR set to: 0
  5954  001EE8  0E00               	movlw	0
  5955  001EEA  6FB1               	movwf	___fladd@b& (0+255),b
  5956  001EEC  0E00               	movlw	0
  5957  001EEE  6FB2               	movwf	(___fladd@b+1)& (0+255),b
  5958  001EF0  0E00               	movlw	0
  5959  001EF2  6FB3               	movwf	(___fladd@b+2)& (0+255),b
  5960  001EF4  0E00               	movlw	0
  5961  001EF6  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  5962  001EF8                     l778:
  5963                           
  5964                           ; BSR set to: 0
  5965                           
  5966                           ; BSR set to: 0
  5967  001EF8  8FB3               	bsf	(___fladd@b+2)& (0+255),7,b
  5968  001EFA  D006               	goto	L3
  5969  001EFC                     l777:
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ; BSR set to: 0
  5974  001EFC  0E00               	movlw	0
  5975  001EFE  6FB1               	movwf	___fladd@b& (0+255),b
  5976  001F00  0E00               	movlw	0
  5977  001F02  6FB2               	movwf	(___fladd@b+1)& (0+255),b
  5978  001F04  0E00               	movlw	0
  5979  001F06  6FB3               	movwf	(___fladd@b+2)& (0+255),b
  5980  001F08                     L3:
  5981  001F08  0E00               	movlw	0
  5982  001F0A  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985                           
  5986                           ; BSR set to: 0
  5987  001F0C  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  5988  001F0E  0B80               	andlw	128
  5989  001F10  6FC2               	movwf	___fladd@aexp& (0+255),b
  5990                           
  5991                           ; BSR set to: 0
  5992  001F12  51C1               	movf	___fladd@signs& (0+255),w,b
  5993  001F14  19C2               	xorwf	___fladd@aexp& (0+255),w,b
  5994  001F16  A4D8               	btfss	status,2,c
  5995                           
  5996                           ; BSR set to: 0
  5997  001F18  8DC1               	bsf	___fladd@signs& (0+255),6,b
  5998                           
  5999                           ; BSR set to: 0
  6000                           
  6001                           ; BSR set to: 0
  6002  001F1A  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  6003  001F1C  25B8               	addwf	(___fladd@a+3)& (0+255),w,b
  6004  001F1E  6FC2               	movwf	___fladd@aexp& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007  001F20  BFB7               	btfsc	(___fladd@a+2)& (0+255),7,b
  6008                           
  6009                           ; BSR set to: 0
  6010  001F22  81C2               	bsf	___fladd@aexp& (0+255),0,b
  6011                           
  6012                           ; BSR set to: 0
  6013                           
  6014                           ; BSR set to: 0
  6015  001F24  51C2               	movf	___fladd@aexp& (0+255),w,b
  6016  001F26  B4D8               	btfsc	status,2,c
  6017  001F28  D00D               	goto	l782
  6018                           
  6019                           ; BSR set to: 0
  6020  001F2A  29C2               	incf	___fladd@aexp& (0+255),w,b
  6021  001F2C  A4D8               	btfss	status,2,c
  6022  001F2E  D008               	goto	l783
  6023                           
  6024                           ; BSR set to: 0
  6025  001F30  0E00               	movlw	0
  6026  001F32  6FB5               	movwf	___fladd@a& (0+255),b
  6027  001F34  0E00               	movlw	0
  6028  001F36  6FB6               	movwf	(___fladd@a+1)& (0+255),b
  6029  001F38  0E00               	movlw	0
  6030  001F3A  6FB7               	movwf	(___fladd@a+2)& (0+255),b
  6031  001F3C  0E00               	movlw	0
  6032  001F3E  6FB8               	movwf	(___fladd@a+3)& (0+255),b
  6033  001F40                     l783:
  6034                           
  6035                           ; BSR set to: 0
  6036                           
  6037                           ; BSR set to: 0
  6038  001F40  8FB7               	bsf	(___fladd@a+2)& (0+255),7,b
  6039  001F42  D006               	goto	L4
  6040  001F44                     l782:
  6041                           
  6042                           ; BSR set to: 0
  6043                           
  6044                           ; BSR set to: 0
  6045  001F44  0E00               	movlw	0
  6046  001F46  6FB5               	movwf	___fladd@a& (0+255),b
  6047  001F48  0E00               	movlw	0
  6048  001F4A  6FB6               	movwf	(___fladd@a+1)& (0+255),b
  6049  001F4C  0E00               	movlw	0
  6050  001F4E  6FB7               	movwf	(___fladd@a+2)& (0+255),b
  6051  001F50                     L4:
  6052  001F50  0E00               	movlw	0
  6053  001F52  6FB8               	movwf	(___fladd@a+3)& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058  001F54  51C3               	movf	___fladd@bexp& (0+255),w,b
  6059  001F56  5DC2               	subwf	___fladd@aexp& (0+255),w,b
  6060  001F58  B0D8               	btfsc	status,0,c
  6061  001F5A  D022               	goto	l785
  6062                           
  6063                           ; BSR set to: 0
  6064  001F5C  ADC1               	btfss	___fladd@signs& (0+255),6,b
  6065  001F5E  D002               	goto	l786
  6066                           
  6067                           ; BSR set to: 0
  6068  001F60  0E80               	movlw	128
  6069  001F62  1BC1               	xorwf	___fladd@signs& (0+255),f,b
  6070  001F64                     l786:
  6071                           
  6072                           ; BSR set to: 0
  6073                           
  6074                           ; BSR set to: 0
  6075  001F64  C0C3  F0C4         	movff	___fladd@bexp,___fladd@grs
  6076                           
  6077                           ; BSR set to: 0
  6078  001F68  C0C2  F0C3         	movff	___fladd@aexp,___fladd@bexp
  6079                           
  6080                           ; BSR set to: 0
  6081  001F6C  C0C4  F0C2         	movff	___fladd@grs,___fladd@aexp
  6082                           
  6083                           ; BSR set to: 0
  6084  001F70  C0B1  F0C4         	movff	___fladd@b,___fladd@grs
  6085                           
  6086                           ; BSR set to: 0
  6087  001F74  C0B5  F0B1         	movff	___fladd@a,___fladd@b
  6088                           
  6089                           ; BSR set to: 0
  6090  001F78  C0C4  F0B5         	movff	___fladd@grs,___fladd@a
  6091                           
  6092                           ; BSR set to: 0
  6093  001F7C  C0B2  F0C4         	movff	___fladd@b+1,___fladd@grs
  6094                           
  6095                           ; BSR set to: 0
  6096  001F80  C0B6  F0B2         	movff	___fladd@a+1,___fladd@b+1
  6097                           
  6098                           ; BSR set to: 0
  6099  001F84  C0C4  F0B6         	movff	___fladd@grs,___fladd@a+1
  6100                           
  6101                           ; BSR set to: 0
  6102  001F88  C0B3  F0C4         	movff	___fladd@b+2,___fladd@grs
  6103                           
  6104                           ; BSR set to: 0
  6105  001F8C  C0B7  F0B3         	movff	___fladd@a+2,___fladd@b+2
  6106                           
  6107                           ; BSR set to: 0
  6108  001F90  C0C4  F0B7         	movff	___fladd@grs,___fladd@a+2
  6109                           
  6110                           ; BSR set to: 0
  6111  001F94  C0B4  F0C4         	movff	___fladd@b+3,___fladd@grs
  6112                           
  6113                           ; BSR set to: 0
  6114  001F98  C0B8  F0B4         	movff	___fladd@a+3,___fladd@b+3
  6115                           
  6116                           ; BSR set to: 0
  6117  001F9C  C0C4  F0B8         	movff	___fladd@grs,___fladd@a+3
  6118  001FA0                     l785:
  6119                           
  6120                           ; BSR set to: 0
  6121                           
  6122                           ; BSR set to: 0
  6123  001FA0  0E00               	movlw	0
  6124  001FA2  6FC4               	movwf	___fladd@grs& (0+255),b
  6125                           
  6126                           ; BSR set to: 0
  6127  001FA4  51C3               	movf	___fladd@bexp& (0+255),w,b
  6128  001FA6  6FB9               	movwf	??___fladd& (0+255),b
  6129  001FA8  6BBA               	clrf	(??___fladd+1)& (0+255),b
  6130  001FAA  1FB9               	comf	??___fladd& (0+255),f,b
  6131  001FAC  1FBA               	comf	(??___fladd+1)& (0+255),f,b
  6132  001FAE  4BB9               	infsnz	??___fladd& (0+255),f,b
  6133  001FB0  2BBA               	incf	(??___fladd+1)& (0+255),f,b
  6134  001FB2  51C2               	movf	___fladd@aexp& (0+255),w,b
  6135  001FB4  6FBB               	movwf	(??___fladd+2)& (0+255),b
  6136  001FB6  6BBC               	clrf	(??___fladd+3)& (0+255),b
  6137  001FB8  51B9               	movf	??___fladd& (0+255),w,b
  6138  001FBA  27BB               	addwf	(??___fladd+2)& (0+255),f,b
  6139  001FBC  51BA               	movf	(??___fladd+1)& (0+255),w,b
  6140  001FBE  23BC               	addwfc	(??___fladd+3)& (0+255),f,b
  6141  001FC0  BFBC               	btfsc	(??___fladd+3)& (0+255),7,b
  6142  001FC2  D02C               	goto	l789
  6143  001FC4  51BC               	movf	(??___fladd+3)& (0+255),w,b
  6144  001FC6  E104               	bnz	u4610
  6145  001FC8  0E1A               	movlw	26
  6146  001FCA  5DBB               	subwf	(??___fladd+2)& (0+255),w,b
  6147  001FCC  A0D8               	btfss	status,0,c
  6148  001FCE  D026               	goto	l789
  6149  001FD0                     u4610:
  6150                           
  6151                           ; BSR set to: 0
  6152  001FD0  51B1               	movf	___fladd@b& (0+255),w,b
  6153  001FD2  11B2               	iorwf	(___fladd@b+1)& (0+255),w,b
  6154  001FD4  11B3               	iorwf	(___fladd@b+2)& (0+255),w,b
  6155  001FD6  11B4               	iorwf	(___fladd@b+3)& (0+255),w,b
  6156  001FD8  B4D8               	btfsc	status,2,c
  6157  001FDA  D002               	goto	u4620
  6158  001FDC  0E01               	movlw	1
  6159  001FDE  D001               	goto	u4630
  6160  001FE0                     u4620:
  6161  001FE0  0E00               	movlw	0
  6162  001FE2                     u4630:
  6163  001FE2  6FC4               	movwf	___fladd@grs& (0+255),b
  6164                           
  6165                           ; BSR set to: 0
  6166  001FE4  0E00               	movlw	0
  6167  001FE6  6FB1               	movwf	___fladd@b& (0+255),b
  6168  001FE8  0E00               	movlw	0
  6169  001FEA  6FB2               	movwf	(___fladd@b+1)& (0+255),b
  6170  001FEC  0E00               	movlw	0
  6171  001FEE  6FB3               	movwf	(___fladd@b+2)& (0+255),b
  6172  001FF0  0E00               	movlw	0
  6173  001FF2  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  6174                           
  6175                           ; BSR set to: 0
  6176  001FF4  C0C2  F0C3         	movff	___fladd@aexp,___fladd@bexp
  6177  001FF8  D015               	goto	u4660
  6178  001FFA                     l790:
  6179                           
  6180                           ; BSR set to: 0
  6181  001FFA  A1C4               	btfss	___fladd@grs& (0+255),0,b
  6182  001FFC  D005               	goto	l791
  6183                           
  6184                           ; BSR set to: 0
  6185  001FFE  90D8               	bcf	status,0,c
  6186  002000  31C4               	rrcf	___fladd@grs& (0+255),w,b
  6187  002002  0901               	iorlw	1
  6188  002004  6FC4               	movwf	___fladd@grs& (0+255),b
  6189  002006  D002               	goto	l792
  6190  002008                     l791:
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  002008  90D8               	bcf	status,0,c
  6196  00200A  33C4               	rrcf	___fladd@grs& (0+255),f,b
  6197  00200C                     l792:
  6198                           
  6199                           ; BSR set to: 0
  6200                           
  6201                           ; BSR set to: 0
  6202  00200C  B1B1               	btfsc	___fladd@b& (0+255),0,b
  6203                           
  6204                           ; BSR set to: 0
  6205  00200E  8FC4               	bsf	___fladd@grs& (0+255),7,b
  6206                           
  6207                           ; BSR set to: 0
  6208                           
  6209                           ; BSR set to: 0
  6210  002010  35B4               	rlcf	(___fladd@b+3)& (0+255),w,b
  6211  002012  33B4               	rrcf	(___fladd@b+3)& (0+255),f,b
  6212  002014  33B3               	rrcf	(___fladd@b+2)& (0+255),f,b
  6213  002016  33B2               	rrcf	(___fladd@b+1)& (0+255),f,b
  6214  002018  33B1               	rrcf	___fladd@b& (0+255),f,b
  6215                           
  6216                           ; BSR set to: 0
  6217  00201A  2BC3               	incf	___fladd@bexp& (0+255),f,b
  6218  00201C                     l789:
  6219                           
  6220                           ; BSR set to: 0
  6221  00201C  51C2               	movf	___fladd@aexp& (0+255),w,b
  6222  00201E  5DC3               	subwf	___fladd@bexp& (0+255),w,b
  6223  002020  A0D8               	btfss	status,0,c
  6224  002022  D7EB               	goto	l790
  6225  002024                     u4660:
  6226                           
  6227                           ; BSR set to: 0
  6228                           
  6229                           ; BSR set to: 0
  6230  002024  BDC1               	btfsc	___fladd@signs& (0+255),6,b
  6231  002026  D029               	goto	l795
  6232                           
  6233                           ; BSR set to: 0
  6234  002028  51C3               	movf	___fladd@bexp& (0+255),w,b
  6235  00202A  A4D8               	btfss	status,2,c
  6236  00202C  D009               	goto	l796
  6237                           
  6238                           ; BSR set to: 0
  6239  00202E  0E00               	movlw	0
  6240  002030  6FB1               	movwf	?___fladd& (0+255),b
  6241  002032  0E00               	movlw	0
  6242  002034  6FB2               	movwf	(?___fladd+1)& (0+255),b
  6243  002036  0E00               	movlw	0
  6244  002038  6FB3               	movwf	(?___fladd+2)& (0+255),b
  6245  00203A  0E00               	movlw	0
  6246  00203C  6FB4               	movwf	(?___fladd+3)& (0+255),b
  6247                           
  6248                           ; BSR set to: 0
  6249  00203E  0012               	return	
  6250  002040                     l796:
  6251                           
  6252                           ; BSR set to: 0
  6253                           
  6254                           ; BSR set to: 0
  6255  002040  51B5               	movf	___fladd@a& (0+255),w,b
  6256  002042  27B1               	addwf	___fladd@b& (0+255),f,b
  6257  002044  51B6               	movf	(___fladd@a+1)& (0+255),w,b
  6258  002046  23B2               	addwfc	(___fladd@b+1)& (0+255),f,b
  6259  002048  51B7               	movf	(___fladd@a+2)& (0+255),w,b
  6260  00204A  23B3               	addwfc	(___fladd@b+2)& (0+255),f,b
  6261  00204C  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  6262  00204E  23B4               	addwfc	(___fladd@b+3)& (0+255),f,b
  6263                           
  6264                           ; BSR set to: 0
  6265  002050  A1B4               	btfss	(___fladd@b+3)& (0+255),0,b
  6266  002052  D083               	goto	u4790
  6267                           
  6268                           ; BSR set to: 0
  6269  002054  A1C4               	btfss	___fladd@grs& (0+255),0,b
  6270  002056  D006               	goto	l799
  6271                           
  6272                           ; BSR set to: 0
  6273  002058  90D8               	bcf	status,0,c
  6274  00205A  33C4               	rrcf	___fladd@grs& (0+255),f,b
  6275  00205C  51C4               	movf	___fladd@grs& (0+255),w,b
  6276  00205E  0901               	iorlw	1
  6277  002060  6FC4               	movwf	___fladd@grs& (0+255),b
  6278  002062  D002               	goto	l800
  6279  002064                     l799:
  6280                           
  6281                           ; BSR set to: 0
  6282                           
  6283                           ; BSR set to: 0
  6284  002064  90D8               	bcf	status,0,c
  6285  002066  33C4               	rrcf	___fladd@grs& (0+255),f,b
  6286  002068                     l800:
  6287                           
  6288                           ; BSR set to: 0
  6289                           
  6290                           ; BSR set to: 0
  6291  002068  B1B1               	btfsc	___fladd@b& (0+255),0,b
  6292                           
  6293                           ; BSR set to: 0
  6294  00206A  8FC4               	bsf	___fladd@grs& (0+255),7,b
  6295                           
  6296                           ; BSR set to: 0
  6297                           
  6298                           ; BSR set to: 0
  6299  00206C  35B4               	rlcf	(___fladd@b+3)& (0+255),w,b
  6300  00206E  33B4               	rrcf	(___fladd@b+3)& (0+255),f,b
  6301  002070  33B3               	rrcf	(___fladd@b+2)& (0+255),f,b
  6302  002072  33B2               	rrcf	(___fladd@b+1)& (0+255),f,b
  6303  002074  33B1               	rrcf	___fladd@b& (0+255),f,b
  6304                           
  6305                           ; BSR set to: 0
  6306  002076  2BC3               	incf	___fladd@bexp& (0+255),f,b
  6307                           
  6308                           ; BSR set to: 0
  6309  002078  D070               	goto	u4790
  6310  00207A                     l795:
  6311                           
  6312                           ; BSR set to: 0
  6313                           
  6314                           ; BSR set to: 0
  6315  00207A  51B5               	movf	___fladd@a& (0+255),w,b
  6316  00207C  5DB1               	subwf	___fladd@b& (0+255),w,b
  6317  00207E  51B6               	movf	(___fladd@a+1)& (0+255),w,b
  6318  002080  59B2               	subwfb	(___fladd@b+1)& (0+255),w,b
  6319  002082  51B7               	movf	(___fladd@a+2)& (0+255),w,b
  6320  002084  59B3               	subwfb	(___fladd@b+2)& (0+255),w,b
  6321  002086  51B4               	movf	(___fladd@b+3)& (0+255),w,b
  6322  002088  0A80               	xorlw	128
  6323  00208A  6FB9               	movwf	??___fladd& (0+255),b
  6324  00208C  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  6325  00208E  0A80               	xorlw	128
  6326  002090  59B9               	subwfb	??___fladd& (0+255),w,b
  6327  002092  B0D8               	btfsc	status,0,c
  6328  002094  D036               	goto	l803
  6329                           
  6330                           ; BSR set to: 0
  6331  002096  C0B1  F0B9         	movff	___fladd@b,??___fladd
  6332  00209A  C0B2  F0BA         	movff	___fladd@b+1,??___fladd+1
  6333  00209E  C0B3  F0BB         	movff	___fladd@b+2,??___fladd+2
  6334  0020A2  C0B4  F0BC         	movff	___fladd@b+3,??___fladd+3
  6335  0020A6  1FB9               	comf	??___fladd& (0+255),f,b
  6336  0020A8  1FBA               	comf	(??___fladd+1)& (0+255),f,b
  6337  0020AA  1FBB               	comf	(??___fladd+2)& (0+255),f,b
  6338  0020AC  1FBC               	comf	(??___fladd+3)& (0+255),f,b
  6339  0020AE  2BB9               	incf	??___fladd& (0+255),f,b
  6340  0020B0  0E00               	movlw	0
  6341  0020B2  23BA               	addwfc	(??___fladd+1)& (0+255),f,b
  6342  0020B4  23BB               	addwfc	(??___fladd+2)& (0+255),f,b
  6343  0020B6  23BC               	addwfc	(??___fladd+3)& (0+255),f,b
  6344  0020B8  51B5               	movf	___fladd@a& (0+255),w,b
  6345  0020BA  25B9               	addwf	??___fladd& (0+255),w,b
  6346  0020BC  6FBD               	movwf	(??___fladd+4)& (0+255),b
  6347  0020BE  51B6               	movf	(___fladd@a+1)& (0+255),w,b
  6348  0020C0  21BA               	addwfc	(??___fladd+1)& (0+255),w,b
  6349  0020C2  6FBE               	movwf	(??___fladd+5)& (0+255),b
  6350  0020C4  51B7               	movf	(___fladd@a+2)& (0+255),w,b
  6351  0020C6  21BB               	addwfc	(??___fladd+2)& (0+255),w,b
  6352  0020C8  6FBF               	movwf	(??___fladd+6)& (0+255),b
  6353  0020CA  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  6354  0020CC  21BC               	addwfc	(??___fladd+3)& (0+255),w,b
  6355  0020CE  6FC0               	movwf	(??___fladd+7)& (0+255),b
  6356  0020D0  0EFF               	movlw	255
  6357  0020D2  25BD               	addwf	(??___fladd+4)& (0+255),w,b
  6358  0020D4  6FB1               	movwf	___fladd@b& (0+255),b
  6359  0020D6  0EFF               	movlw	255
  6360  0020D8  21BE               	addwfc	(??___fladd+5)& (0+255),w,b
  6361  0020DA  6FB2               	movwf	(___fladd@b+1)& (0+255),b
  6362  0020DC  0EFF               	movlw	255
  6363  0020DE  21BF               	addwfc	(??___fladd+6)& (0+255),w,b
  6364  0020E0  6FB3               	movwf	(___fladd@b+2)& (0+255),b
  6365  0020E2  0EFF               	movlw	255
  6366  0020E4  21C0               	addwfc	(??___fladd+7)& (0+255),w,b
  6367  0020E6  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  6368  0020E8  0E80               	movlw	128
  6369  0020EA  1BC1               	xorwf	___fladd@signs& (0+255),f,b
  6370                           
  6371                           ; BSR set to: 0
  6372  0020EC  6DC4               	negf	___fladd@grs& (0+255),b
  6373                           
  6374                           ; BSR set to: 0
  6375  0020EE  51C4               	movf	___fladd@grs& (0+255),w,b
  6376  0020F0  A4D8               	btfss	status,2,c
  6377  0020F2  D00F               	goto	l805
  6378                           
  6379                           ; BSR set to: 0
  6380  0020F4  0E01               	movlw	1
  6381  0020F6  27B1               	addwf	___fladd@b& (0+255),f,b
  6382  0020F8  0E00               	movlw	0
  6383  0020FA  23B2               	addwfc	(___fladd@b+1)& (0+255),f,b
  6384  0020FC  23B3               	addwfc	(___fladd@b+2)& (0+255),f,b
  6385  0020FE  23B4               	addwfc	(___fladd@b+3)& (0+255),f,b
  6386                           
  6387                           ; BSR set to: 0
  6388  002100  D008               	goto	l805
  6389  002102                     l803:
  6390                           
  6391                           ; BSR set to: 0
  6392                           
  6393                           ; BSR set to: 0
  6394  002102  51B5               	movf	___fladd@a& (0+255),w,b
  6395  002104  5FB1               	subwf	___fladd@b& (0+255),f,b
  6396  002106  51B6               	movf	(___fladd@a+1)& (0+255),w,b
  6397  002108  5BB2               	subwfb	(___fladd@b+1)& (0+255),f,b
  6398  00210A  51B7               	movf	(___fladd@a+2)& (0+255),w,b
  6399  00210C  5BB3               	subwfb	(___fladd@b+2)& (0+255),f,b
  6400  00210E  51B8               	movf	(___fladd@a+3)& (0+255),w,b
  6401  002110  5BB4               	subwfb	(___fladd@b+3)& (0+255),f,b
  6402  002112                     l805:
  6403                           
  6404                           ; BSR set to: 0
  6405  002112  51B1               	movf	___fladd@b& (0+255),w,b
  6406  002114  11B2               	iorwf	(___fladd@b+1)& (0+255),w,b
  6407  002116  11B3               	iorwf	(___fladd@b+2)& (0+255),w,b
  6408  002118  11B4               	iorwf	(___fladd@b+3)& (0+255),w,b
  6409  00211A  A4D8               	btfss	status,2,c
  6410  00211C  D01C               	goto	l812
  6411                           
  6412                           ; BSR set to: 0
  6413  00211E  51C4               	movf	___fladd@grs& (0+255),w,b
  6414  002120  A4D8               	btfss	status,2,c
  6415  002122  D019               	goto	l812
  6416                           
  6417                           ; BSR set to: 0
  6418  002124  0E00               	movlw	0
  6419  002126  6FB1               	movwf	?___fladd& (0+255),b
  6420  002128  0E00               	movlw	0
  6421  00212A  6FB2               	movwf	(?___fladd+1)& (0+255),b
  6422  00212C  0E00               	movlw	0
  6423  00212E  6FB3               	movwf	(?___fladd+2)& (0+255),b
  6424  002130  0E00               	movlw	0
  6425  002132  6FB4               	movwf	(?___fladd+3)& (0+255),b
  6426                           
  6427                           ; BSR set to: 0
  6428  002134  0012               	return	
  6429  002136                     
  6430                           ; BSR set to: 0
  6431                           
  6432                           ; BSR set to: 0
  6433  002136  90D8               	bcf	status,0,c
  6434  002138  37B1               	rlcf	___fladd@b& (0+255),f,b
  6435  00213A  37B2               	rlcf	(___fladd@b+1)& (0+255),f,b
  6436  00213C  37B3               	rlcf	(___fladd@b+2)& (0+255),f,b
  6437  00213E  37B4               	rlcf	(___fladd@b+3)& (0+255),f,b
  6438                           
  6439                           ; BSR set to: 0
  6440  002140  BFC4               	btfsc	___fladd@grs& (0+255),7,b
  6441                           
  6442                           ; BSR set to: 0
  6443  002142  81B1               	bsf	___fladd@b& (0+255),0,b
  6444                           
  6445                           ; BSR set to: 0
  6446                           
  6447                           ; BSR set to: 0
  6448  002144  A1C4               	btfss	___fladd@grs& (0+255),0,b
  6449  002146  D002               	goto	l810
  6450                           
  6451                           ; BSR set to: 0
  6452  002148  80D8               	bsf	status,0,c
  6453  00214A  D001               	goto	L5
  6454  00214C                     l810:
  6455                           
  6456                           ; BSR set to: 0
  6457                           
  6458                           ; BSR set to: 0
  6459  00214C  90D8               	bcf	status,0,c
  6460  00214E                     L5:
  6461  00214E  37C4               	rlcf	___fladd@grs& (0+255),f,b
  6462                           
  6463                           ; BSR set to: 0
  6464                           
  6465                           ; BSR set to: 0
  6466  002150  51C3               	movf	___fladd@bexp& (0+255),w,b
  6467  002152  A4D8               	btfss	status,2,c
  6468                           
  6469                           ; BSR set to: 0
  6470  002154  07C3               	decf	___fladd@bexp& (0+255),f,b
  6471  002156                     l812:
  6472                           
  6473                           ; BSR set to: 0
  6474                           
  6475                           ; BSR set to: 0
  6476                           
  6477                           ; BSR set to: 0
  6478  002156  AFB3               	btfss	(___fladd@b+2)& (0+255),7,b
  6479  002158  D7EE               	goto	l808
  6480  00215A                     u4790:
  6481                           
  6482                           ; BSR set to: 0
  6483                           
  6484                           ; BSR set to: 0
  6485                           
  6486                           ; BSR set to: 0
  6487  00215A  0E00               	movlw	0
  6488  00215C  6FC2               	movwf	___fladd@aexp& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491  00215E  AFC4               	btfss	___fladd@grs& (0+255),7,b
  6492  002160  D00A               	goto	l817
  6493                           
  6494                           ; BSR set to: 0
  6495  002162  C0C4  F0B9         	movff	___fladd@grs,??___fladd
  6496  002166  0E7F               	movlw	127
  6497  002168  17B9               	andwf	??___fladd& (0+255),f,b
  6498  00216A  A4D8               	btfss	status,2,c
  6499  00216C  D002               	goto	u4820
  6500                           
  6501                           ; BSR set to: 0
  6502                           
  6503                           ; BSR set to: 0
  6504  00216E  A1B1               	btfss	___fladd@b& (0+255),0,b
  6505  002170  D002               	goto	l817
  6506  002172                     u4820:
  6507                           
  6508                           ; BSR set to: 0
  6509  002172  0E01               	movlw	1
  6510  002174  6FC2               	movwf	___fladd@aexp& (0+255),b
  6511  002176                     l817:
  6512                           
  6513                           ; BSR set to: 0
  6514                           
  6515                           ; BSR set to: 0
  6516                           
  6517                           ; BSR set to: 0
  6518  002176  51C2               	movf	___fladd@aexp& (0+255),w,b
  6519  002178  B4D8               	btfsc	status,2,c
  6520  00217A  D020               	goto	l820
  6521                           
  6522                           ; BSR set to: 0
  6523  00217C  0E01               	movlw	1
  6524  00217E  27B1               	addwf	___fladd@b& (0+255),f,b
  6525  002180  0E00               	movlw	0
  6526  002182  23B2               	addwfc	(___fladd@b+1)& (0+255),f,b
  6527  002184  23B3               	addwfc	(___fladd@b+2)& (0+255),f,b
  6528  002186  23B4               	addwfc	(___fladd@b+3)& (0+255),f,b
  6529                           
  6530                           ; BSR set to: 0
  6531  002188  A1B4               	btfss	(___fladd@b+3)& (0+255),0,b
  6532  00218A  D018               	goto	l820
  6533                           
  6534                           ; BSR set to: 0
  6535  00218C  C0B1  F0B9         	movff	___fladd@b,??___fladd
  6536  002190  C0B2  F0BA         	movff	___fladd@b+1,??___fladd+1
  6537  002194  C0B3  F0BB         	movff	___fladd@b+2,??___fladd+2
  6538  002198  C0B4  F0BC         	movff	___fladd@b+3,??___fladd+3
  6539  00219C  35BC               	rlcf	(??___fladd+3)& (0+255),w,b
  6540  00219E  33BC               	rrcf	(??___fladd+3)& (0+255),f,b
  6541  0021A0  33BB               	rrcf	(??___fladd+2)& (0+255),f,b
  6542  0021A2  33BA               	rrcf	(??___fladd+1)& (0+255),f,b
  6543  0021A4  33B9               	rrcf	??___fladd& (0+255),f,b
  6544  0021A6  C0B9  F0B1         	movff	??___fladd,___fladd@b
  6545  0021AA  C0BA  F0B2         	movff	??___fladd+1,___fladd@b+1
  6546  0021AE  C0BB  F0B3         	movff	??___fladd+2,___fladd@b+2
  6547  0021B2  C0BC  F0B4         	movff	??___fladd+3,___fladd@b+3
  6548  0021B6  29C3               	incf	___fladd@bexp& (0+255),w,b
  6549  0021B8  A4D8               	btfss	status,2,c
  6550                           
  6551                           ; BSR set to: 0
  6552  0021BA  2BC3               	incf	___fladd@bexp& (0+255),f,b
  6553  0021BC                     l820:
  6554                           
  6555                           ; BSR set to: 0
  6556                           
  6557                           ; BSR set to: 0
  6558                           
  6559                           ; BSR set to: 0
  6560                           
  6561                           ; BSR set to: 0
  6562  0021BC  29C3               	incf	___fladd@bexp& (0+255),w,b
  6563  0021BE  B4D8               	btfsc	status,2,c
  6564  0021C0  D003               	goto	u4870
  6565                           
  6566                           ; BSR set to: 0
  6567  0021C2  51C3               	movf	___fladd@bexp& (0+255),w,b
  6568  0021C4  A4D8               	btfss	status,2,c
  6569  0021C6  D00D               	goto	l824
  6570  0021C8                     u4870:
  6571                           
  6572                           ; BSR set to: 0
  6573                           
  6574                           ; BSR set to: 0
  6575  0021C8  0E00               	movlw	0
  6576  0021CA  6FB1               	movwf	___fladd@b& (0+255),b
  6577  0021CC  0E00               	movlw	0
  6578  0021CE  6FB2               	movwf	(___fladd@b+1)& (0+255),b
  6579  0021D0  0E00               	movlw	0
  6580  0021D2  6FB3               	movwf	(___fladd@b+2)& (0+255),b
  6581  0021D4  0E00               	movlw	0
  6582  0021D6  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  6583  0021D8  51C3               	movf	___fladd@bexp& (0+255),w,b
  6584  0021DA  A4D8               	btfss	status,2,c
  6585  0021DC  D002               	goto	l824
  6586                           
  6587                           ; BSR set to: 0
  6588  0021DE  0E00               	movlw	0
  6589  0021E0  6FC1               	movwf	___fladd@signs& (0+255),b
  6590  0021E2                     l824:
  6591                           
  6592                           ; BSR set to: 0
  6593                           
  6594                           ; BSR set to: 0
  6595                           
  6596                           ; BSR set to: 0
  6597  0021E2  A1C3               	btfss	___fladd@bexp& (0+255),0,b
  6598  0021E4  D002               	goto	l825
  6599                           
  6600                           ; BSR set to: 0
  6601  0021E6  8FB3               	bsf	(___fladd@b+2)& (0+255),7,b
  6602  0021E8  D001               	goto	l826
  6603  0021EA                     l825:
  6604                           
  6605                           ; BSR set to: 0
  6606                           
  6607                           ; BSR set to: 0
  6608  0021EA  9FB3               	bcf	(___fladd@b+2)& (0+255),7,b
  6609  0021EC                     l826:
  6610                           
  6611                           ; BSR set to: 0
  6612                           
  6613                           ; BSR set to: 0
  6614  0021EC  90D8               	bcf	status,0,c
  6615  0021EE  31C3               	rrcf	___fladd@bexp& (0+255),w,b
  6616  0021F0  6FB4               	movwf	(___fladd@b+3)& (0+255),b
  6617                           
  6618                           ; BSR set to: 0
  6619  0021F2  BFC1               	btfsc	___fladd@signs& (0+255),7,b
  6620                           
  6621                           ; BSR set to: 0
  6622  0021F4  8FB4               	bsf	(___fladd@b+3)& (0+255),7,b
  6623                           
  6624                           ; BSR set to: 0
  6625                           
  6626                           ; BSR set to: 0
  6627  0021F6  C0B1  F0B1         	movff	___fladd@b,?___fladd
  6628  0021FA  C0B2  F0B2         	movff	___fladd@b+1,?___fladd+1
  6629  0021FE  C0B3  F0B3         	movff	___fladd@b+2,?___fladd+2
  6630  002202  C0B4  F0B4         	movff	___fladd@b+3,?___fladd+3
  6631  002206  0012               	return	
  6632  002208                     __end_of___fladd:
  6633                           	opt stack 0
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function ___flneg *****************
  6650 ;; Defined at:
  6651 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/flneg.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  f1              4   45[COMRAM] unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;		None
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  4   45[COMRAM] unsigned char 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2, status,0
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6665 ;;      Params:         4       0       0       0       0       0       0
  6666 ;;      Locals:         0       0       0       0       0       0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0
  6668 ;;      Totals:         4       0       0       0       0       0       0
  6669 ;;Total ram usage:        4 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    2
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_sprintf
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text15
  6680  0033D8                     __ptext15:
  6681                           	opt stack 0
  6682  0033D8                     ___flneg:
  6683                           	opt stack 27
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;incstack = 0
  6687  0033D8  502E               	movf	___flneg@f1,w,c
  6688  0033DA  102F               	iorwf	___flneg@f1+1,w,c
  6689  0033DC  1030               	iorwf	___flneg@f1+2,w,c
  6690  0033DE  1031               	iorwf	___flneg@f1+3,w,c
  6691  0033E0  B4D8               	btfsc	status,2,c
  6692  0033E2  D008               	goto	l529
  6693  0033E4  0E00               	movlw	0
  6694  0033E6  1A2E               	xorwf	___flneg@f1,f,c
  6695  0033E8  0E00               	movlw	0
  6696  0033EA  1A2F               	xorwf	___flneg@f1+1,f,c
  6697  0033EC  0E00               	movlw	0
  6698  0033EE  1A30               	xorwf	___flneg@f1+2,f,c
  6699  0033F0  0E80               	movlw	128
  6700  0033F2  1A31               	xorwf	___flneg@f1+3,f,c
  6701  0033F4                     l529:
  6702  0033F4  C02E  F02E         	movff	___flneg@f1,?___flneg
  6703  0033F8  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  6704  0033FC  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  6705  003400  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  6706  003404  0012               	return	
  6707  003406                     __end_of___flneg:
  6708                           	opt stack 0
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           prodh	equ	0xFF4
  6714                           prodl	equ	0xFF3
  6715                           intcon	equ	0xFF2
  6716                           postinc0	equ	0xFEE
  6717                           wreg	equ	0xFE8
  6718                           indf2	equ	0xFDF
  6719                           postinc2	equ	0xFDE
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function ___flge *****************
  6725 ;; Defined at:
  6726 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/flge.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  ff1             4   45[COMRAM] unsigned char 
  6729 ;;  ff2             4   49[COMRAM] unsigned char 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;		None               void
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6741 ;;      Params:         8       0       0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0
  6743 ;;      Temps:          4       0       0       0       0       0       0
  6744 ;;      Totals:        12       0       0       0       0       0       0
  6745 ;;Total ram usage:       12 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    2
  6748 ;; This function calls:
  6749 ;;		Nothing
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;;		_sprintf
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text16
  6757  002C28                     __ptext16:
  6758                           	opt stack 0
  6759  002C28                     ___flge:
  6760                           	opt stack 27
  6761                           
  6762                           ;incstack = 0
  6763  002C28  0E00               	movlw	0
  6764  002C2A  142E               	andwf	___flge@ff1,w,c
  6765  002C2C  6E36               	movwf	??___flge& (0+255),c
  6766  002C2E  0E00               	movlw	0
  6767  002C30  142F               	andwf	___flge@ff1+1,w,c
  6768  002C32  6E37               	movwf	(??___flge+1)& (0+255),c
  6769  002C34  0E80               	movlw	128
  6770  002C36  1430               	andwf	___flge@ff1+2,w,c
  6771  002C38  6E38               	movwf	(??___flge+2)& (0+255),c
  6772  002C3A  0E7F               	movlw	127
  6773  002C3C  1431               	andwf	___flge@ff1+3,w,c
  6774  002C3E  6E39               	movwf	(??___flge+3)& (0+255),c
  6775  002C40  5036               	movf	??___flge,w,c
  6776  002C42  1037               	iorwf	??___flge+1,w,c
  6777  002C44  1038               	iorwf	??___flge+2,w,c
  6778  002C46  1039               	iorwf	??___flge+3,w,c
  6779  002C48  A4D8               	btfss	status,2,c
  6780  002C4A  D008               	goto	l522
  6781  002C4C  0E00               	movlw	0
  6782  002C4E  6E2E               	movwf	___flge@ff1,c
  6783  002C50  0E00               	movlw	0
  6784  002C52  6E2F               	movwf	___flge@ff1+1,c
  6785  002C54  0E00               	movlw	0
  6786  002C56  6E30               	movwf	___flge@ff1+2,c
  6787  002C58  0E00               	movlw	0
  6788  002C5A  6E31               	movwf	___flge@ff1+3,c
  6789  002C5C                     l522:
  6790  002C5C  0E00               	movlw	0
  6791  002C5E  1432               	andwf	___flge@ff2,w,c
  6792  002C60  6E36               	movwf	??___flge& (0+255),c
  6793  002C62  0E00               	movlw	0
  6794  002C64  1433               	andwf	___flge@ff2+1,w,c
  6795  002C66  6E37               	movwf	(??___flge+1)& (0+255),c
  6796  002C68  0E80               	movlw	128
  6797  002C6A  1434               	andwf	___flge@ff2+2,w,c
  6798  002C6C  6E38               	movwf	(??___flge+2)& (0+255),c
  6799  002C6E  0E7F               	movlw	127
  6800  002C70  1435               	andwf	___flge@ff2+3,w,c
  6801  002C72  6E39               	movwf	(??___flge+3)& (0+255),c
  6802  002C74  5036               	movf	??___flge,w,c
  6803  002C76  1037               	iorwf	??___flge+1,w,c
  6804  002C78  1038               	iorwf	??___flge+2,w,c
  6805  002C7A  1039               	iorwf	??___flge+3,w,c
  6806  002C7C  A4D8               	btfss	status,2,c
  6807  002C7E  D008               	goto	l523
  6808  002C80  0E00               	movlw	0
  6809  002C82  6E32               	movwf	___flge@ff2,c
  6810  002C84  0E00               	movlw	0
  6811  002C86  6E33               	movwf	___flge@ff2+1,c
  6812  002C88  0E00               	movlw	0
  6813  002C8A  6E34               	movwf	___flge@ff2+2,c
  6814  002C8C  0E00               	movlw	0
  6815  002C8E  6E35               	movwf	___flge@ff2+3,c
  6816  002C90                     l523:
  6817  002C90  AE31               	btfss	___flge@ff1+3,7,c
  6818  002C92  D01D               	goto	l524
  6819  002C94  C02E  F036         	movff	___flge@ff1,??___flge
  6820  002C98  C02F  F037         	movff	___flge@ff1+1,??___flge+1
  6821  002C9C  C030  F038         	movff	___flge@ff1+2,??___flge+2
  6822  002CA0  C031  F039         	movff	___flge@ff1+3,??___flge+3
  6823  002CA4  1E36               	comf	??___flge,f,c
  6824  002CA6  1E37               	comf	??___flge+1,f,c
  6825  002CA8  1E38               	comf	??___flge+2,f,c
  6826  002CAA  1E39               	comf	??___flge+3,f,c
  6827  002CAC  2A36               	incf	??___flge,f,c
  6828  002CAE  0E00               	movlw	0
  6829  002CB0  2237               	addwfc	??___flge+1,f,c
  6830  002CB2  2238               	addwfc	??___flge+2,f,c
  6831  002CB4  2239               	addwfc	??___flge+3,f,c
  6832  002CB6  0E00               	movlw	0
  6833  002CB8  2436               	addwf	??___flge,w,c
  6834  002CBA  6E2E               	movwf	___flge@ff1,c
  6835  002CBC  0E00               	movlw	0
  6836  002CBE  2037               	addwfc	??___flge+1,w,c
  6837  002CC0  6E2F               	movwf	___flge@ff1+1,c
  6838  002CC2  0E00               	movlw	0
  6839  002CC4  2038               	addwfc	??___flge+2,w,c
  6840  002CC6  6E30               	movwf	___flge@ff1+2,c
  6841  002CC8  0E80               	movlw	128
  6842  002CCA  2039               	addwfc	??___flge+3,w,c
  6843  002CCC  6E31               	movwf	___flge@ff1+3,c
  6844  002CCE                     l524:
  6845  002CCE  AE35               	btfss	___flge@ff2+3,7,c
  6846  002CD0  D01D               	goto	l525
  6847  002CD2  C032  F036         	movff	___flge@ff2,??___flge
  6848  002CD6  C033  F037         	movff	___flge@ff2+1,??___flge+1
  6849  002CDA  C034  F038         	movff	___flge@ff2+2,??___flge+2
  6850  002CDE  C035  F039         	movff	___flge@ff2+3,??___flge+3
  6851  002CE2  1E36               	comf	??___flge,f,c
  6852  002CE4  1E37               	comf	??___flge+1,f,c
  6853  002CE6  1E38               	comf	??___flge+2,f,c
  6854  002CE8  1E39               	comf	??___flge+3,f,c
  6855  002CEA  2A36               	incf	??___flge,f,c
  6856  002CEC  0E00               	movlw	0
  6857  002CEE  2237               	addwfc	??___flge+1,f,c
  6858  002CF0  2238               	addwfc	??___flge+2,f,c
  6859  002CF2  2239               	addwfc	??___flge+3,f,c
  6860  002CF4  0E00               	movlw	0
  6861  002CF6  2436               	addwf	??___flge,w,c
  6862  002CF8  6E32               	movwf	___flge@ff2,c
  6863  002CFA  0E00               	movlw	0
  6864  002CFC  2037               	addwfc	??___flge+1,w,c
  6865  002CFE  6E33               	movwf	___flge@ff2+1,c
  6866  002D00  0E00               	movlw	0
  6867  002D02  2038               	addwfc	??___flge+2,w,c
  6868  002D04  6E34               	movwf	___flge@ff2+2,c
  6869  002D06  0E80               	movlw	128
  6870  002D08  2039               	addwfc	??___flge+3,w,c
  6871  002D0A  6E35               	movwf	___flge@ff2+3,c
  6872  002D0C                     l525:
  6873  002D0C  0E00               	movlw	0
  6874  002D0E  1A2E               	xorwf	___flge@ff1,f,c
  6875  002D10  0E00               	movlw	0
  6876  002D12  1A2F               	xorwf	___flge@ff1+1,f,c
  6877  002D14  0E00               	movlw	0
  6878  002D16  1A30               	xorwf	___flge@ff1+2,f,c
  6879  002D18  0E80               	movlw	128
  6880  002D1A  1A31               	xorwf	___flge@ff1+3,f,c
  6881  002D1C  0E00               	movlw	0
  6882  002D1E  1A32               	xorwf	___flge@ff2,f,c
  6883  002D20  0E00               	movlw	0
  6884  002D22  1A33               	xorwf	___flge@ff2+1,f,c
  6885  002D24  0E00               	movlw	0
  6886  002D26  1A34               	xorwf	___flge@ff2+2,f,c
  6887  002D28  0E80               	movlw	128
  6888  002D2A  1A35               	xorwf	___flge@ff2+3,f,c
  6889  002D2C  5032               	movf	___flge@ff2,w,c
  6890  002D2E  5C2E               	subwf	___flge@ff1,w,c
  6891  002D30  5033               	movf	___flge@ff2+1,w,c
  6892  002D32  582F               	subwfb	___flge@ff1+1,w,c
  6893  002D34  5034               	movf	___flge@ff2+2,w,c
  6894  002D36  5830               	subwfb	___flge@ff1+2,w,c
  6895  002D38  5035               	movf	___flge@ff2+3,w,c
  6896  002D3A  5831               	subwfb	___flge@ff1+3,w,c
  6897  002D3C  B0D8               	btfsc	status,0,c
  6898  002D3E  D002               	goto	l4172
  6899  002D40  90D8               	bcf	status,0,c
  6900  002D42  0012               	return	
  6901  002D44                     l4172:
  6902  002D44  80D8               	bsf	status,0,c
  6903  002D46  0012               	return	
  6904  002D48                     __end_of___flge:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _seleccionarEscala *****************
  6922 ;; Defined at:
  6923 ;;		line 311 in file "color_2.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  a               1    wreg     enum E3216
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  a               1   45[COMRAM] enum E3216
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2, status,0
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6937 ;;      Params:         0       0       0       0       0       0       0
  6938 ;;      Locals:         1       0       0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0
  6940 ;;      Totals:         1       0       0       0       0       0       0
  6941 ;;Total ram usage:        1 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    2
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text17
  6952  00336C                     __ptext17:
  6953                           	opt stack 0
  6954  00336C                     _seleccionarEscala:
  6955                           	opt stack 28
  6956                           
  6957                           ;incstack = 0
  6958                           ;seleccionarEscala@a stored from wreg
  6959  00336C  6E2E               	movwf	seleccionarEscala@a,c
  6960                           
  6961                           ;color_2.c: 313: switch(a)
  6962  00336E  D00C               	goto	l179
  6963  003370                     
  6964                           ;color_2.c: 316: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  6965  003370  908C               	bcf	3980,0,c	;volatile
  6966                           
  6967                           ;color_2.c: 317: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  6968  003372  928C               	bcf	3980,1,c	;volatile
  6969                           
  6970                           ;color_2.c: 318: break;
  6971  003374  0012               	return	
  6972  003376                     
  6973                           ;color_2.c: 320: (*(&(*(&PORTD + 0x09))) &=~ (1<<(0)));
  6974  003376  908C               	bcf	3980,0,c	;volatile
  6975                           
  6976                           ;color_2.c: 321: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  6977  003378  828C               	bsf	3980,1,c	;volatile
  6978                           
  6979                           ;color_2.c: 322: break;
  6980  00337A  0012               	return	
  6981  00337C                     
  6982                           ;color_2.c: 324: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  6983  00337C  808C               	bsf	3980,0,c	;volatile
  6984                           
  6985                           ;color_2.c: 325: (*(&(*(&PORTD + 0x09))) &=~ (1<<(1)));
  6986  00337E  928C               	bcf	3980,1,c	;volatile
  6987                           
  6988                           ;color_2.c: 326: break;
  6989  003380  0012               	return	
  6990  003382                     
  6991                           ;color_2.c: 328: (*(&(*(&PORTD + 0x09))) |= (1<<(0)));
  6992  003382  808C               	bsf	3980,0,c	;volatile
  6993                           
  6994                           ;color_2.c: 329: (*(&(*(&PORTD + 0x09))) |= (1<<(1)));
  6995  003384  828C               	bsf	3980,1,c	;volatile
  6996                           
  6997                           ;color_2.c: 331: }
  6998                           
  6999                           ;color_2.c: 330: break;
  7000  003386  0012               	return	
  7001  003388                     l179:
  7002  003388  502E               	movf	seleccionarEscala@a,w,c
  7003                           
  7004                           ; Switch size 1, requested type "space"
  7005                           ; Number of cases is 4, Range of values is 0 to 3
  7006                           ; switch strategies available:
  7007                           ; Name         Instructions Cycles
  7008                           ; simple_byte           13     7 (average)
  7009                           ;	Chosen strategy is simple_byte
  7010  00338A  0A00               	xorlw	0	; case 0
  7011  00338C  B4D8               	btfsc	status,2,c
  7012  00338E  D7F9               	goto	l184
  7013  003390  0A01               	xorlw	1	; case 1
  7014  003392  B4D8               	btfsc	status,2,c
  7015  003394  D7F3               	goto	l183
  7016  003396  0A03               	xorlw	3	; case 2
  7017  003398  B4D8               	btfsc	status,2,c
  7018  00339A  D7ED               	goto	l182
  7019  00339C  0A01               	xorlw	1	; case 3
  7020  00339E  A4D8               	btfss	status,2,c
  7021  0033A0  0012               	return	
  7022  0033A2  D7E6               	goto	l180
  7023  0033A4                     __end_of_seleccionarEscala:
  7024                           	opt stack 0
  7025                           tblptru	equ	0xFF8
  7026                           tblptrh	equ	0xFF7
  7027                           tblptrl	equ	0xFF6
  7028                           tablat	equ	0xFF5
  7029                           prodh	equ	0xFF4
  7030                           prodl	equ	0xFF3
  7031                           intcon	equ	0xFF2
  7032                           postinc0	equ	0xFEE
  7033                           wreg	equ	0xFE8
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           fsr2h	equ	0xFDA
  7037                           fsr2l	equ	0xFD9
  7038                           status	equ	0xFD8
  7039                           
  7040 ;; *************** function _seleccionarColor *****************
  7041 ;; Defined at:
  7042 ;;		line 346 in file "color_2.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  col             1    wreg     enum E3210
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  col             1   45[COMRAM] enum E3210
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      void 
  7049 ;; Registers used:
  7050 ;;		wreg, status,2, status,0
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7056 ;;      Params:         0       0       0       0       0       0       0
  7057 ;;      Locals:         1       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0
  7059 ;;      Totals:         1       0       0       0       0       0       0
  7060 ;;Total ram usage:        1 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    2
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_main
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text18
  7071  0032F4                     __ptext18:
  7072                           	opt stack 0
  7073  0032F4                     _seleccionarColor:
  7074                           	opt stack 28
  7075                           
  7076                           ;incstack = 0
  7077                           ;seleccionarColor@col stored from wreg
  7078  0032F4  6E2E               	movwf	seleccionarColor@col,c
  7079                           
  7080                           ;color_2.c: 348: switch(col)
  7081  0032F6  D00F               	goto	l188
  7082  0032F8                     
  7083                           ;color_2.c: 351: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  7084  0032F8  948C               	bcf	3980,2,c	;volatile
  7085                           
  7086                           ;color_2.c: 352: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  7087  0032FA  968C               	bcf	3980,3,c	;volatile
  7088                           
  7089                           ;color_2.c: 353: break;
  7090  0032FC  0012               	return	
  7091  0032FE                     
  7092                           ;color_2.c: 355: (*(&(*(&PORTD + 0x09))) &=~ (1<<(2)));
  7093  0032FE  948C               	bcf	3980,2,c	;volatile
  7094                           
  7095                           ;color_2.c: 356: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  7096  003300  868C               	bsf	3980,3,c	;volatile
  7097                           
  7098                           ;color_2.c: 357: break;
  7099  003302  0012               	return	
  7100  003304                     
  7101                           ;color_2.c: 359: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  7102  003304  848C               	bsf	3980,2,c	;volatile
  7103                           
  7104                           ;color_2.c: 360: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  7105  003306  968C               	bcf	3980,3,c	;volatile
  7106                           
  7107                           ;color_2.c: 361: break;
  7108  003308  0012               	return	
  7109  00330A                     
  7110                           ;color_2.c: 363: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  7111  00330A  848C               	bsf	3980,2,c	;volatile
  7112                           
  7113                           ;color_2.c: 364: (*(&(*(&PORTD + 0x09))) |= (1<<(3)));
  7114  00330C  868C               	bsf	3980,3,c	;volatile
  7115                           
  7116                           ;color_2.c: 365: break;
  7117  00330E  0012               	return	
  7118  003310                     
  7119                           ;color_2.c: 367: (*(&(*(&PORTD + 0x09))) |= (1<<(2)));
  7120  003310  848C               	bsf	3980,2,c	;volatile
  7121                           
  7122                           ;color_2.c: 368: (*(&(*(&PORTD + 0x09))) &=~ (1<<(3)));
  7123  003312  968C               	bcf	3980,3,c	;volatile
  7124                           
  7125                           ;color_2.c: 369: }
  7126  003314  0012               	return	
  7127  003316                     l188:
  7128  003316  502E               	movf	seleccionarColor@col,w,c
  7129                           
  7130                           ; Switch size 1, requested type "space"
  7131                           ; Number of cases is 4, Range of values is 0 to 3
  7132                           ; switch strategies available:
  7133                           ; Name         Instructions Cycles
  7134                           ; simple_byte           13     7 (average)
  7135                           ;	Chosen strategy is simple_byte
  7136  003318  0A00               	xorlw	0	; case 0
  7137  00331A  B4D8               	btfsc	status,2,c
  7138  00331C  D7ED               	goto	l189
  7139  00331E  0A01               	xorlw	1	; case 1
  7140  003320  B4D8               	btfsc	status,2,c
  7141  003322  D7ED               	goto	l191
  7142  003324  0A03               	xorlw	3	; case 2
  7143  003326  B4D8               	btfsc	status,2,c
  7144  003328  D7ED               	goto	l192
  7145  00332A  0A01               	xorlw	1	; case 3
  7146  00332C  B4D8               	btfsc	status,2,c
  7147  00332E  D7ED               	goto	l193
  7148  003330  D7EF               	goto	l194
  7149  003332                     __end_of_seleccionarColor:
  7150                           	opt stack 0
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           prodh	equ	0xFF4
  7156                           prodl	equ	0xFF3
  7157                           intcon	equ	0xFF2
  7158                           postinc0	equ	0xFEE
  7159                           wreg	equ	0xFE8
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _lcd_msg *****************
  7167 ;; Defined at:
  7168 ;;		line 101 in file "../MyLibs/lcd4a.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;  c               2   49[COMRAM] PTR unsigned char 
  7171 ;;		 -> STR_14(17), STR_13(5), STR_12(6), STR_11(5), 
  7172 ;;		 -> STR_10(13), STR_9(4), STR_7(4), STR_5(4), 
  7173 ;;		 -> STR_3(4), value(8), STR_1(18), 
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      void 
  7178 ;; Registers used:
  7179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7185 ;;      Params:         2       0       0       0       0       0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0
  7188 ;;      Totals:         2       0       0       0       0       0       0
  7189 ;;Total ram usage:        2 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    5
  7192 ;; This function calls:
  7193 ;;		_lcd_putc
  7194 ;; This function is called by:
  7195 ;;		_main
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text19
  7200  0031CA                     __ptext19:
  7201                           	opt stack 0
  7202  0031CA                     _lcd_msg:
  7203                           	opt stack 25
  7204                           
  7205                           ;lcd4a.c: 103: while(*c != 0)
  7206                           
  7207                           ;incstack = 0
  7208  0031CA  D014               	goto	l36
  7209  0031CC                     
  7210                           ;lcd4a.c: 104: {
  7211                           ;lcd4a.c: 105: lcd_putc(*c++);
  7212  0031CC  C032  FFF6         	movff	lcd_msg@c,tblptrl
  7213  0031D0  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  7214  0031D4  6AF8               	clrf	tblptru,c
  7215  0031D6  0E05               	movlw	(high __ramtop+-1)
  7216  0031D8  64F7               	cpfsgt	tblptrh,c
  7217  0031DA  D003               	bra	u5997
  7218  0031DC  0008               	tblrd		*
  7219  0031DE  50F5               	movf	tablat,w,c
  7220  0031E0  D005               	bra	u5990
  7221  0031E2                     u5997:
  7222  0031E2  CFF6 FFE9          	movff	tblptrl,fsr0l
  7223  0031E6  CFF7 FFEA          	movff	tblptrh,fsr0h
  7224  0031EA  50EF               	movf	indf0,w,c
  7225  0031EC                     u5990:
  7226  0031EC  EC99  F019         	call	_lcd_putc
  7227  0031F0  4A32               	infsnz	lcd_msg@c,f,c
  7228  0031F2  2A33               	incf	lcd_msg@c+1,f,c
  7229  0031F4                     l36:
  7230  0031F4  C032  FFF6         	movff	lcd_msg@c,tblptrl
  7231  0031F8  C033  FFF7         	movff	lcd_msg@c+1,tblptrh
  7232  0031FC  6AF8               	clrf	tblptru,c
  7233  0031FE  0E05               	movlw	(high __ramtop+-1)
  7234  003200  64F7               	cpfsgt	tblptrh,c
  7235  003202  D003               	bra	u6007
  7236  003204  0008               	tblrd		*
  7237  003206  50F5               	movf	tablat,w,c
  7238  003208  D005               	bra	u6000
  7239  00320A                     u6007:
  7240  00320A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7241  00320E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7242  003212  50EF               	movf	indf0,w,c
  7243  003214                     u6000:
  7244  003214  0900               	iorlw	0
  7245  003216  B4D8               	btfsc	status,2,c
  7246  003218  0012               	return	
  7247  00321A  D7D8               	goto	l37
  7248  00321C                     __end_of_lcd_msg:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           indf0	equ	0xFEF
  7258                           postinc0	equ	0xFEE
  7259                           fsr0h	equ	0xFEA
  7260                           fsr0l	equ	0xFE9
  7261                           wreg	equ	0xFE8
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _lcd_putc *****************
  7269 ;; Defined at:
  7270 ;;		line 66 in file "../MyLibs/lcd4a.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;  c               1    wreg     unsigned char 
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  c               1   48[COMRAM] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg, status,2, status,0, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7284 ;;      Params:         0       0       0       0       0       0       0
  7285 ;;      Locals:         1       0       0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0
  7287 ;;      Totals:         1       0       0       0       0       0       0
  7288 ;;Total ram usage:        1 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    4
  7291 ;; This function calls:
  7292 ;;		_lcd_cmd
  7293 ;;		_lcd_dwr
  7294 ;; This function is called by:
  7295 ;;		_lcd_msg
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text20
  7300  003332                     __ptext20:
  7301                           	opt stack 0
  7302  003332                     _lcd_putc:
  7303                           	opt stack 25
  7304                           
  7305                           ;incstack = 0
  7306                           ;lcd_putc@c stored from wreg
  7307  003332  6E31               	movwf	lcd_putc@c,c
  7308                           
  7309                           ;lcd4a.c: 68: switch(c)
  7310  003334  D010               	goto	l24
  7311  003336                     
  7312                           ;lcd4a.c: 71: lcd_cmd(0x01);
  7313  003336  0E01               	movlw	1
  7314  003338  EC0E  F019         	call	_lcd_cmd
  7315                           
  7316                           ;lcd4a.c: 72: break;
  7317  00333C  0012               	return	
  7318  00333E                     
  7319                           ;lcd4a.c: 74: lcd_cmd(3);
  7320  00333E  0E03               	movlw	3
  7321  003340  EC0E  F019         	call	_lcd_cmd
  7322                           
  7323                           ;lcd4a.c: 75: break;
  7324  003344  0012               	return	
  7325  003346                     
  7326                           ;lcd4a.c: 77: lcd_cmd(0x10);
  7327  003346  0E10               	movlw	16
  7328  003348  EC0E  F019         	call	_lcd_cmd
  7329                           
  7330                           ;lcd4a.c: 78: break;
  7331  00334C  0012               	return	
  7332  00334E                     
  7333                           ;lcd4a.c: 80: lcd_dwr(c);
  7334  00334E  5031               	movf	lcd_putc@c,w,c
  7335  003350  EC57  F019         	call	_lcd_dwr
  7336                           
  7337                           ;lcd4a.c: 82: }
  7338                           
  7339                           ;lcd4a.c: 81: break;
  7340  003354  0012               	return	
  7341  003356                     l24:
  7342  003356  5031               	movf	lcd_putc@c,w,c
  7343                           
  7344                           ; Switch size 1, requested type "space"
  7345                           ; Number of cases is 3, Range of values is 8 to 12
  7346                           ; switch strategies available:
  7347                           ; Name         Instructions Cycles
  7348                           ; simple_byte           10     6 (average)
  7349                           ;	Chosen strategy is simple_byte
  7350  003358  0A08               	xorlw	8	; case 8
  7351  00335A  B4D8               	btfsc	status,2,c
  7352  00335C  D7F4               	goto	l28
  7353  00335E  0A02               	xorlw	2	; case 10
  7354  003360  B4D8               	btfsc	status,2,c
  7355  003362  D7ED               	goto	l27
  7356  003364  0A06               	xorlw	6	; case 12
  7357  003366  B4D8               	btfsc	status,2,c
  7358  003368  D7E6               	goto	l25
  7359  00336A  D7F1               	goto	l29
  7360  00336C                     __end_of_lcd_putc:
  7361                           	opt stack 0
  7362                           tblptru	equ	0xFF8
  7363                           tblptrh	equ	0xFF7
  7364                           tblptrl	equ	0xFF6
  7365                           tablat	equ	0xFF5
  7366                           prodh	equ	0xFF4
  7367                           prodl	equ	0xFF3
  7368                           intcon	equ	0xFF2
  7369                           indf0	equ	0xFEF
  7370                           postinc0	equ	0xFEE
  7371                           fsr0h	equ	0xFEA
  7372                           fsr0l	equ	0xFE9
  7373                           wreg	equ	0xFE8
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           fsr2h	equ	0xFDA
  7377                           fsr2l	equ	0xFD9
  7378                           status	equ	0xFD8
  7379                           
  7380 ;; *************** function _lcd_dwr *****************
  7381 ;; Defined at:
  7382 ;;		line 86 in file "../MyLibs/lcd4a.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  x               1    wreg     unsigned char 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  x               1   47[COMRAM] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0, cstack
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7396 ;;      Params:         0       0       0       0       0       0       0
  7397 ;;      Locals:         1       0       0       0       0       0       0
  7398 ;;      Temps:          1       0       0       0       0       0       0
  7399 ;;      Totals:         2       0       0       0       0       0       0
  7400 ;;Total ram usage:        2 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    3
  7403 ;; This function calls:
  7404 ;;		_lcd_lat
  7405 ;;		_manda
  7406 ;; This function is called by:
  7407 ;;		_lcd_putc
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text21
  7412  0032AE                     __ptext21:
  7413                           	opt stack 0
  7414  0032AE                     _lcd_dwr:
  7415                           	opt stack 25
  7416                           
  7417                           ;incstack = 0
  7418                           ;lcd_dwr@x stored from wreg
  7419  0032AE  6E30               	movwf	lcd_dwr@x,c
  7420                           
  7421                           ;lcd4a.c: 88: (*(&(*(&PORTD + 0x09))) |= (1<<(5)));
  7422  0032B0  8A8C               	bsf	3980,5,c	;volatile
  7423                           
  7424                           ;lcd4a.c: 89: lcd &= 0x0F;
  7425  0032B2  0E0F               	movlw	15
  7426  0032B4  1649               	andwf	_lcd,f,c
  7427                           
  7428                           ;lcd4a.c: 90: lcd |= ((x & 0xF0));
  7429  0032B6  5030               	movf	lcd_dwr@x,w,c
  7430  0032B8  0BF0               	andlw	240
  7431  0032BA  1249               	iorwf	_lcd,f,c
  7432                           
  7433                           ;lcd4a.c: 91: manda(lcd);
  7434  0032BC  5049               	movf	_lcd,w,c
  7435  0032BE  EC03  F01A         	call	_manda
  7436                           
  7437                           ;lcd4a.c: 92: lcd_lat();
  7438  0032C2  EC55  F01A         	call	_lcd_lat	;wreg free
  7439                           
  7440                           ;lcd4a.c: 93: _delay((unsigned long)((4)*(16000000/4000.0)));
  7441  0032C6  0E15               	movlw	21
  7442  0032C8  6E2F               	movwf	??_lcd_dwr& (0+255),c
  7443  0032CA  0EC6               	movlw	198
  7444  0032CC                     u6787:
  7445  0032CC  2EE8               	decfsz	wreg,f,c
  7446  0032CE  D7FE               	bra	u6787
  7447  0032D0  2E2F               	decfsz	??_lcd_dwr& (0+255),f,c
  7448  0032D2  D7FC               	bra	u6787
  7449  0032D4  D000               	nop2	
  7450                           
  7451                           ;lcd4a.c: 95: lcd &= 0x0F;
  7452  0032D6  0E0F               	movlw	15
  7453  0032D8  1649               	andwf	_lcd,f,c
  7454                           
  7455                           ;lcd4a.c: 96: lcd |= ((x & 0x0F)<<4);
  7456  0032DA  C030  F02F         	movff	lcd_dwr@x,??_lcd_dwr
  7457  0032DE  0E0F               	movlw	15
  7458  0032E0  162F               	andwf	??_lcd_dwr,f,c
  7459  0032E2  382F               	swapf	??_lcd_dwr,w,c
  7460  0032E4  0BF0               	andlw	240
  7461  0032E6  1249               	iorwf	_lcd,f,c
  7462                           
  7463                           ;lcd4a.c: 97: manda(lcd);
  7464  0032E8  5049               	movf	_lcd,w,c
  7465  0032EA  EC03  F01A         	call	_manda
  7466                           
  7467                           ;lcd4a.c: 98: lcd_lat();
  7468  0032EE  EC55  F01A         	call	_lcd_lat	;wreg free
  7469  0032F2  0012               	return		;funcret
  7470  0032F4                     __end_of_lcd_dwr:
  7471                           	opt stack 0
  7472                           tblptru	equ	0xFF8
  7473                           tblptrh	equ	0xFF7
  7474                           tblptrl	equ	0xFF6
  7475                           tablat	equ	0xFF5
  7476                           prodh	equ	0xFF4
  7477                           prodl	equ	0xFF3
  7478                           intcon	equ	0xFF2
  7479                           indf0	equ	0xFEF
  7480                           postinc0	equ	0xFEE
  7481                           fsr0h	equ	0xFEA
  7482                           fsr0l	equ	0xFE9
  7483                           wreg	equ	0xFE8
  7484                           indf2	equ	0xFDF
  7485                           postinc2	equ	0xFDE
  7486                           fsr2h	equ	0xFDA
  7487                           fsr2l	equ	0xFD9
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function _lcd_init *****************
  7491 ;; Defined at:
  7492 ;;		line 135 in file "../MyLibs/lcd4a.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;		None
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      void 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7506 ;;      Params:         0       0       0       0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0       0
  7508 ;;      Temps:          1       0       0       0       0       0       0
  7509 ;;      Totals:         1       0       0       0       0       0       0
  7510 ;;Total ram usage:        1 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    4
  7513 ;; This function calls:
  7514 ;;		_lcd_cmd
  7515 ;;		_lcd_cmd_hf
  7516 ;; This function is called by:
  7517 ;;		_main
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           	psect	text22
  7522  002F2E                     __ptext22:
  7523                           	opt stack 0
  7524  002F2E                     _lcd_init:
  7525                           	opt stack 26
  7526                           
  7527                           ;lcd4a.c: 143: (*(&(*(&PORTB + 0x12))) &=~ (1<<(7)));
  7528                           
  7529                           ;incstack = 0
  7530  002F2E  9E93               	bcf	3987,7,c	;volatile
  7531                           
  7532                           ;lcd4a.c: 144: (*(&(*(&PORTB + 0x12))) &=~ (1<<(6)));
  7533  002F30  9C93               	bcf	3987,6,c	;volatile
  7534                           
  7535                           ;lcd4a.c: 145: (*(&(*(&PORTB + 0x12))) &=~ (1<<(5)));
  7536  002F32  9A93               	bcf	3987,5,c	;volatile
  7537                           
  7538                           ;lcd4a.c: 146: (*(&(*(&PORTB + 0x12))) &=~ (1<<(4)));
  7539  002F34  9893               	bcf	3987,4,c	;volatile
  7540                           
  7541                           ;lcd4a.c: 147: (*(&(*(&PORTD + 0x12))) &=~ (1<<(5)));
  7542  002F36  9A95               	bcf	3989,5,c	;volatile
  7543                           
  7544                           ;lcd4a.c: 149: (*(&(*(&PORTD + 0x12))) &=~ (1<<(6)));
  7545  002F38  9C95               	bcf	3989,6,c	;volatile
  7546                           
  7547                           ;lcd4a.c: 152: (*(&(*(&PORTD + 0x12))) &=~ (1<<(7)));
  7548  002F3A  9E95               	bcf	3989,7,c	;volatile
  7549                           
  7550                           ;lcd4a.c: 155: (*(&(*(&PORTD + 0x09))) &=~ (1<<(6)));
  7551  002F3C  9C8C               	bcf	3980,6,c	;volatile
  7552                           
  7553                           ;lcd4a.c: 158: lcd_cmd_hf(0x30);
  7554  002F3E  0E30               	movlw	48
  7555  002F40  EC48  F01A         	call	_lcd_cmd_hf
  7556                           
  7557                           ;lcd4a.c: 159: _delay((unsigned long)((15)*(16000000/4000.0)));
  7558  002F44  0E4E               	movlw	78
  7559  002F46  6E31               	movwf	??_lcd_init& (0+255),c
  7560  002F48  0EEB               	movlw	235
  7561  002F4A                     u6797:
  7562  002F4A  2EE8               	decfsz	wreg,f,c
  7563  002F4C  D7FE               	bra	u6797
  7564  002F4E  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7565  002F50  D7FC               	bra	u6797
  7566  002F52  F000               	nop	
  7567                           
  7568                           ;lcd4a.c: 160: lcd_cmd_hf(0x30);
  7569  002F54  0E30               	movlw	48
  7570  002F56  EC48  F01A         	call	_lcd_cmd_hf
  7571                           
  7572                           ;lcd4a.c: 161: _delay((unsigned long)((3)*(16000000/4000.0)));
  7573  002F5A  0E10               	movlw	16
  7574  002F5C  6E31               	movwf	??_lcd_init& (0+255),c
  7575  002F5E  0E94               	movlw	148
  7576  002F60                     u6807:
  7577  002F60  2EE8               	decfsz	wreg,f,c
  7578  002F62  D7FE               	bra	u6807
  7579  002F64  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7580  002F66  D7FC               	bra	u6807
  7581  002F68  D000               	nop2	
  7582                           
  7583                           ;lcd4a.c: 162: lcd_cmd_hf(0x30);
  7584  002F6A  0E30               	movlw	48
  7585  002F6C  EC48  F01A         	call	_lcd_cmd_hf
  7586                           
  7587                           ;lcd4a.c: 163: _delay((unsigned long)((15)*(16000000/4000.0)));
  7588  002F70  0E4E               	movlw	78
  7589  002F72  6E31               	movwf	??_lcd_init& (0+255),c
  7590  002F74  0EEB               	movlw	235
  7591  002F76                     u6817:
  7592  002F76  2EE8               	decfsz	wreg,f,c
  7593  002F78  D7FE               	bra	u6817
  7594  002F7A  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7595  002F7C  D7FC               	bra	u6817
  7596  002F7E  F000               	nop	
  7597                           
  7598                           ;lcd4a.c: 164: lcd_cmd_hf(0x20);
  7599  002F80  0E20               	movlw	32
  7600  002F82  EC48  F01A         	call	_lcd_cmd_hf
  7601                           
  7602                           ;lcd4a.c: 165: _delay((unsigned long)((6)*(16000000/4000.0)));
  7603  002F86  0E20               	movlw	32
  7604  002F88  6E31               	movwf	??_lcd_init& (0+255),c
  7605  002F8A  0E2A               	movlw	42
  7606  002F8C                     u6827:
  7607  002F8C  2EE8               	decfsz	wreg,f,c
  7608  002F8E  D7FE               	bra	u6827
  7609  002F90  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7610  002F92  D7FC               	bra	u6827
  7611                           
  7612                           ;lcd4a.c: 166: lcd_cmd(0x28);
  7613  002F94  0E28               	movlw	40
  7614  002F96  EC0E  F019         	call	_lcd_cmd
  7615                           
  7616                           ;lcd4a.c: 167: _delay((unsigned long)((6)*(16000000/4000.0)));
  7617  002F9A  0E20               	movlw	32
  7618  002F9C  6E31               	movwf	??_lcd_init& (0+255),c
  7619  002F9E  0E2A               	movlw	42
  7620  002FA0                     u6837:
  7621  002FA0  2EE8               	decfsz	wreg,f,c
  7622  002FA2  D7FE               	bra	u6837
  7623  002FA4  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7624  002FA6  D7FC               	bra	u6837
  7625                           
  7626                           ;lcd4a.c: 168: lcd_cmd(0x0E);
  7627  002FA8  0E0E               	movlw	14
  7628  002FAA  EC0E  F019         	call	_lcd_cmd
  7629                           
  7630                           ;lcd4a.c: 169: _delay((unsigned long)((6)*(16000000/4000.0)));
  7631  002FAE  0E20               	movlw	32
  7632  002FB0  6E31               	movwf	??_lcd_init& (0+255),c
  7633  002FB2  0E2A               	movlw	42
  7634  002FB4                     u6847:
  7635  002FB4  2EE8               	decfsz	wreg,f,c
  7636  002FB6  D7FE               	bra	u6847
  7637  002FB8  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7638  002FBA  D7FC               	bra	u6847
  7639                           
  7640                           ;lcd4a.c: 170: lcd_cmd(0x01);
  7641  002FBC  0E01               	movlw	1
  7642  002FBE  EC0E  F019         	call	_lcd_cmd
  7643                           
  7644                           ;lcd4a.c: 171: _delay((unsigned long)((6)*(16000000/4000.0)));
  7645  002FC2  0E20               	movlw	32
  7646  002FC4  6E31               	movwf	??_lcd_init& (0+255),c
  7647  002FC6  0E2A               	movlw	42
  7648  002FC8                     u6857:
  7649  002FC8  2EE8               	decfsz	wreg,f,c
  7650  002FCA  D7FE               	bra	u6857
  7651  002FCC  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7652  002FCE  D7FC               	bra	u6857
  7653                           
  7654                           ;lcd4a.c: 172: lcd_cmd(0x06);
  7655  002FD0  0E06               	movlw	6
  7656  002FD2  EC0E  F019         	call	_lcd_cmd
  7657                           
  7658                           ;lcd4a.c: 173: _delay((unsigned long)((6)*(16000000/4000.0)));
  7659  002FD6  0E20               	movlw	32
  7660  002FD8  6E31               	movwf	??_lcd_init& (0+255),c
  7661  002FDA  0E2A               	movlw	42
  7662  002FDC                     u6867:
  7663  002FDC  2EE8               	decfsz	wreg,f,c
  7664  002FDE  D7FE               	bra	u6867
  7665  002FE0  2E31               	decfsz	??_lcd_init& (0+255),f,c
  7666  002FE2  D7FC               	bra	u6867
  7667                           
  7668                           ;lcd4a.c: 174: lcd_cmd(0x80);
  7669  002FE4  0E80               	movlw	128
  7670  002FE6  EC0E  F019         	call	_lcd_cmd
  7671  002FEA  0012               	return		;funcret
  7672  002FEC                     __end_of_lcd_init:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           indf0	equ	0xFEF
  7682                           postinc0	equ	0xFEE
  7683                           fsr0h	equ	0xFEA
  7684                           fsr0l	equ	0xFE9
  7685                           wreg	equ	0xFE8
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           
  7692 ;; *************** function _lcd_cmd_hf *****************
  7693 ;; Defined at:
  7694 ;;		line 56 in file "../MyLibs/lcd4a.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  x               1    wreg     unsigned char 
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;  x               1   46[COMRAM] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7708 ;;      Params:         0       0       0       0       0       0       0
  7709 ;;      Locals:         1       0       0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0       0       0
  7711 ;;      Totals:         1       0       0       0       0       0       0
  7712 ;;Total ram usage:        1 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    3
  7715 ;; This function calls:
  7716 ;;		_lcd_lat
  7717 ;;		_manda
  7718 ;; This function is called by:
  7719 ;;		_lcd_init
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text23
  7724  003490                     __ptext23:
  7725                           	opt stack 0
  7726  003490                     _lcd_cmd_hf:
  7727                           	opt stack 26
  7728                           
  7729                           ;incstack = 0
  7730                           ;lcd_cmd_hf@x stored from wreg
  7731  003490  6E2F               	movwf	lcd_cmd_hf@x,c
  7732                           
  7733                           ;lcd4a.c: 58: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  7734  003492  9A8C               	bcf	3980,5,c	;volatile
  7735                           
  7736                           ;lcd4a.c: 59: lcd &= 0x0F;
  7737  003494  0E0F               	movlw	15
  7738  003496  1649               	andwf	_lcd,f,c
  7739                           
  7740                           ;lcd4a.c: 60: lcd |= (x & 0xF0);
  7741  003498  502F               	movf	lcd_cmd_hf@x,w,c
  7742  00349A  0BF0               	andlw	240
  7743  00349C  1249               	iorwf	_lcd,f,c
  7744                           
  7745                           ;lcd4a.c: 61: manda(lcd);
  7746  00349E  5049               	movf	_lcd,w,c
  7747  0034A0  EC03  F01A         	call	_manda
  7748                           
  7749                           ;lcd4a.c: 62: lcd_lat();
  7750  0034A4  EC55  F01A         	call	_lcd_lat	;wreg free
  7751  0034A8  0012               	return		;funcret
  7752  0034AA                     __end_of_lcd_cmd_hf:
  7753                           	opt stack 0
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           indf0	equ	0xFEF
  7762                           postinc0	equ	0xFEE
  7763                           fsr0h	equ	0xFEA
  7764                           fsr0l	equ	0xFE9
  7765                           wreg	equ	0xFE8
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _lcd_gotoxy *****************
  7773 ;; Defined at:
  7774 ;;		line 114 in file "../MyLibs/lcd4a.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  x               1    wreg     unsigned char 
  7777 ;;  y               1   48[COMRAM] unsigned char 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;  x               1   50[COMRAM] unsigned char 
  7780 ;;  ADDRESS         1   51[COMRAM] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7790 ;;      Params:         1       0       0       0       0       0       0
  7791 ;;      Locals:         2       0       0       0       0       0       0
  7792 ;;      Temps:          1       0       0       0       0       0       0
  7793 ;;      Totals:         4       0       0       0       0       0       0
  7794 ;;Total ram usage:        4 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    4
  7797 ;; This function calls:
  7798 ;;		_lcd_cmd
  7799 ;; This function is called by:
  7800 ;;		_main
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text24
  7805  0033A4                     __ptext24:
  7806                           	opt stack 0
  7807  0033A4                     _lcd_gotoxy:
  7808                           	opt stack 26
  7809                           
  7810                           ;incstack = 0
  7811                           ;lcd_gotoxy@x stored from wreg
  7812  0033A4  6E33               	movwf	lcd_gotoxy@x,c
  7813                           
  7814                           ;lcd4a.c: 116: unsigned char ADDRESS= 0x00U;
  7815  0033A6  0E00               	movlw	0
  7816  0033A8  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  7817                           
  7818                           ;lcd4a.c: 118: switch(y)
  7819  0033AA  D005               	goto	l42
  7820  0033AC                     
  7821                           ;lcd4a.c: 124: ADDRESS = 0xC0;
  7822  0033AC  0EC0               	movlw	192
  7823  0033AE  D001               	goto	L7
  7824  0033B0                     
  7825                           ;lcd4a.c: 127: ADDRESS = 0x80;
  7826  0033B0  0E80               	movlw	128
  7827  0033B2                     L7:
  7828  0033B2  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  7829                           
  7830                           ;lcd4a.c: 130: }
  7831                           
  7832                           ;lcd4a.c: 128: break;
  7833  0033B4  D008               	goto	l44
  7834  0033B6                     l42:
  7835  0033B6  5031               	movf	lcd_gotoxy@y,w,c
  7836                           
  7837                           ; Switch size 1, requested type "space"
  7838                           ; Number of cases is 2, Range of values is 1 to 2
  7839                           ; switch strategies available:
  7840                           ; Name         Instructions Cycles
  7841                           ; simple_byte            7     4 (average)
  7842                           ;	Chosen strategy is simple_byte
  7843  0033B8  0A01               	xorlw	1	; case 1
  7844  0033BA  B4D8               	btfsc	status,2,c
  7845  0033BC  D7F9               	goto	l46
  7846  0033BE  0A03               	xorlw	3	; case 2
  7847  0033C0  B4D8               	btfsc	status,2,c
  7848  0033C2  D7F4               	goto	l45
  7849  0033C4  D7F5               	goto	l46
  7850  0033C6                     l44:
  7851                           
  7852                           ;lcd4a.c: 131: ADDRESS = (unsigned char)((unsigned char)(ADDRESS + x) - (1U));
  7853  0033C6  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  7854  0033C8  2433               	addwf	lcd_gotoxy@x,w,c
  7855  0033CA  6E32               	movwf	??_lcd_gotoxy& (0+255),c
  7856  0033CC  0432               	decf	??_lcd_gotoxy,w,c
  7857  0033CE  6E34               	movwf	lcd_gotoxy@ADDRESS,c
  7858                           
  7859                           ;lcd4a.c: 132: lcd_cmd(ADDRESS);
  7860  0033D0  5034               	movf	lcd_gotoxy@ADDRESS,w,c
  7861  0033D2  EC0E  F019         	call	_lcd_cmd
  7862  0033D6  0012               	return		;funcret
  7863  0033D8                     __end_of_lcd_gotoxy:
  7864                           	opt stack 0
  7865                           tblptru	equ	0xFF8
  7866                           tblptrh	equ	0xFF7
  7867                           tblptrl	equ	0xFF6
  7868                           tablat	equ	0xFF5
  7869                           prodh	equ	0xFF4
  7870                           prodl	equ	0xFF3
  7871                           intcon	equ	0xFF2
  7872                           indf0	equ	0xFEF
  7873                           postinc0	equ	0xFEE
  7874                           fsr0h	equ	0xFEA
  7875                           fsr0l	equ	0xFE9
  7876                           wreg	equ	0xFE8
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _lcd_cmd *****************
  7884 ;; Defined at:
  7885 ;;		line 40 in file "../MyLibs/lcd4a.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  x               1    wreg     unsigned char 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  x               1   47[COMRAM] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  1    wreg      void 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7899 ;;      Params:         0       0       0       0       0       0       0
  7900 ;;      Locals:         1       0       0       0       0       0       0
  7901 ;;      Temps:          1       0       0       0       0       0       0
  7902 ;;      Totals:         2       0       0       0       0       0       0
  7903 ;;Total ram usage:        2 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    3
  7906 ;; This function calls:
  7907 ;;		_lcd_lat
  7908 ;;		_manda
  7909 ;; This function is called by:
  7910 ;;		_lcd_putc
  7911 ;;		_lcd_gotoxy
  7912 ;;		_lcd_init
  7913 ;;		_lcd_setcursor_vb
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text25
  7918  00321C                     __ptext25:
  7919                           	opt stack 0
  7920  00321C                     _lcd_cmd:
  7921                           	opt stack 25
  7922                           
  7923                           ;incstack = 0
  7924                           ;lcd_cmd@x stored from wreg
  7925  00321C  6E30               	movwf	lcd_cmd@x,c
  7926                           
  7927                           ;lcd4a.c: 42: lcd = 0;
  7928  00321E  0E00               	movlw	0
  7929  003220  6E49               	movwf	_lcd,c
  7930                           
  7931                           ;lcd4a.c: 43: (*(&(*(&PORTD + 0x09))) &=~ (1<<(5)));
  7932  003222  9A8C               	bcf	3980,5,c	;volatile
  7933                           
  7934                           ;lcd4a.c: 44: lcd &= 0x0F;
  7935  003224  0E0F               	movlw	15
  7936  003226  1649               	andwf	_lcd,f,c
  7937                           
  7938                           ;lcd4a.c: 45: lcd |= (x & 0xF0);
  7939  003228  5030               	movf	lcd_cmd@x,w,c
  7940  00322A  0BF0               	andlw	240
  7941  00322C  1249               	iorwf	_lcd,f,c
  7942                           
  7943                           ;lcd4a.c: 46: manda(lcd);
  7944  00322E  5049               	movf	_lcd,w,c
  7945  003230  EC03  F01A         	call	_manda
  7946                           
  7947                           ;lcd4a.c: 47: lcd_lat();
  7948  003234  EC55  F01A         	call	_lcd_lat	;wreg free
  7949                           
  7950                           ;lcd4a.c: 48: _delay((unsigned long)((4)*(16000000/4000.0)));
  7951  003238  0E15               	movlw	21
  7952  00323A  6E2F               	movwf	??_lcd_cmd& (0+255),c
  7953  00323C  0EC6               	movlw	198
  7954  00323E                     u6877:
  7955  00323E  2EE8               	decfsz	wreg,f,c
  7956  003240  D7FE               	bra	u6877
  7957  003242  2E2F               	decfsz	??_lcd_cmd& (0+255),f,c
  7958  003244  D7FC               	bra	u6877
  7959  003246  D000               	nop2	
  7960                           
  7961                           ;lcd4a.c: 50: lcd &= 0x0F;
  7962  003248  0E0F               	movlw	15
  7963  00324A  1649               	andwf	_lcd,f,c
  7964                           
  7965                           ;lcd4a.c: 51: lcd |= ((x & 0x0F)<<4);
  7966  00324C  C030  F02F         	movff	lcd_cmd@x,??_lcd_cmd
  7967  003250  0E0F               	movlw	15
  7968  003252  162F               	andwf	??_lcd_cmd,f,c
  7969  003254  382F               	swapf	??_lcd_cmd,w,c
  7970  003256  0BF0               	andlw	240
  7971  003258  1249               	iorwf	_lcd,f,c
  7972                           
  7973                           ;lcd4a.c: 52: manda(lcd);
  7974  00325A  5049               	movf	_lcd,w,c
  7975  00325C  EC03  F01A         	call	_manda
  7976                           
  7977                           ;lcd4a.c: 53: lcd_lat();
  7978  003260  EC55  F01A         	call	_lcd_lat	;wreg free
  7979  003264  0012               	return		;funcret
  7980  003266                     __end_of_lcd_cmd:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           fsr2h	equ	0xFDA
  7997                           fsr2l	equ	0xFD9
  7998                           status	equ	0xFD8
  7999                           
  8000 ;; *************** function _manda *****************
  8001 ;; Defined at:
  8002 ;;		line 178 in file "../MyLibs/lcd4a.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;  dato            1    wreg     unsigned char 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  dato            1   45[COMRAM] unsigned char 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      void 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8016 ;;      Params:         0       0       0       0       0       0       0
  8017 ;;      Locals:         1       0       0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0
  8019 ;;      Totals:         1       0       0       0       0       0       0
  8020 ;;Total ram usage:        1 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    2
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		_lcd_cmd
  8027 ;;		_lcd_cmd_hf
  8028 ;;		_lcd_dwr
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           	psect	text26
  8033  003406                     __ptext26:
  8034                           	opt stack 0
  8035  003406                     _manda:
  8036                           	opt stack 25
  8037                           
  8038                           ;incstack = 0
  8039                           ;manda@dato stored from wreg
  8040  003406  6E2E               	movwf	manda@dato,c
  8041                           
  8042                           ;lcd4a.c: 180: if(dato & (1 << 4)) (*(&(*(&PORTB + 0x09))) |= (1<<(4)));
  8043  003408  A82E               	btfss	manda@dato,4,c
  8044  00340A  D002               	goto	l53
  8045  00340C  888A               	bsf	3978,4,c	;volatile
  8046  00340E  D001               	goto	l54
  8047  003410                     l53:
  8048                           
  8049                           ;lcd4a.c: 181: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(4)));
  8050  003410  988A               	bcf	3978,4,c	;volatile
  8051  003412                     l54:
  8052                           
  8053                           ;lcd4a.c: 182: if(dato & (1 << 5)) (*(&(*(&PORTB + 0x09))) |= (1<<(5)));
  8054  003412  AA2E               	btfss	manda@dato,5,c
  8055  003414  D002               	goto	l55
  8056  003416  8A8A               	bsf	3978,5,c	;volatile
  8057  003418  D001               	goto	l56
  8058  00341A                     l55:
  8059                           
  8060                           ;lcd4a.c: 183: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(5)));
  8061  00341A  9A8A               	bcf	3978,5,c	;volatile
  8062  00341C                     l56:
  8063                           
  8064                           ;lcd4a.c: 184: if(dato & (1 << 6)) (*(&(*(&PORTB + 0x09))) |= (1<<(6)));
  8065  00341C  AC2E               	btfss	manda@dato,6,c
  8066  00341E  D002               	goto	l57
  8067  003420  8C8A               	bsf	3978,6,c	;volatile
  8068  003422  D001               	goto	l58
  8069  003424                     l57:
  8070                           
  8071                           ;lcd4a.c: 185: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(6)));
  8072  003424  9C8A               	bcf	3978,6,c	;volatile
  8073  003426                     l58:
  8074                           
  8075                           ;lcd4a.c: 186: if(dato & (1 << 7)) (*(&(*(&PORTB + 0x09))) |= (1<<(7)));
  8076  003426  AE2E               	btfss	manda@dato,7,c
  8077  003428  D002               	goto	l59
  8078  00342A  8E8A               	bsf	3978,7,c	;volatile
  8079  00342C  0012               	return	
  8080  00342E                     l59:
  8081                           
  8082                           ;lcd4a.c: 187: else (*(&(*(&PORTB + 0x09))) &=~ (1<<(7)));
  8083  00342E  9E8A               	bcf	3978,7,c	;volatile
  8084  003430  0012               	return	
  8085  003432                     __end_of_manda:
  8086                           	opt stack 0
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           indf0	equ	0xFEF
  8095                           postinc0	equ	0xFEE
  8096                           fsr0h	equ	0xFEA
  8097                           fsr0l	equ	0xFE9
  8098                           wreg	equ	0xFE8
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _lcd_lat *****************
  8106 ;; Defined at:
  8107 ;;		line 29 in file "../MyLibs/lcd4a.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8121 ;;      Params:         0       0       0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0
  8123 ;;      Temps:          1       0       0       0       0       0       0
  8124 ;;      Totals:         1       0       0       0       0       0       0
  8125 ;;Total ram usage:        1 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    2
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_lcd_cmd
  8132 ;;		_lcd_cmd_hf
  8133 ;;		_lcd_dwr
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text27
  8138  0034AA                     __ptext27:
  8139                           	opt stack 0
  8140  0034AA                     _lcd_lat:
  8141                           	opt stack 25
  8142                           
  8143                           ;lcd4a.c: 33: (*(&(*(&PORTD + 0x09))) |= (1<<(7)));
  8144                           
  8145                           ;incstack = 0
  8146  0034AA  8E8C               	bsf	3980,7,c	;volatile
  8147                           
  8148                           ;lcd4a.c: 35: _delay((unsigned long)((3)*(16000000/4000.0)));
  8149  0034AC  0E10               	movlw	16
  8150  0034AE  6E2E               	movwf	??_lcd_lat& (0+255),c
  8151  0034B0  0E94               	movlw	148
  8152  0034B2                     u6887:
  8153  0034B2  2EE8               	decfsz	wreg,f,c
  8154  0034B4  D7FE               	bra	u6887
  8155  0034B6  2E2E               	decfsz	??_lcd_lat& (0+255),f,c
  8156  0034B8  D7FC               	bra	u6887
  8157  0034BA  D000               	nop2	
  8158                           
  8159                           ;lcd4a.c: 36: (*(&(*(&PORTD + 0x09))) &=~ (1<<(7)));
  8160  0034BC  9E8C               	bcf	3980,7,c	;volatile
  8161  0034BE  0012               	return		;funcret
  8162  0034C0                     __end_of_lcd_lat:
  8163                           	opt stack 0
  8164                           tblptru	equ	0xFF8
  8165                           tblptrh	equ	0xFF7
  8166                           tblptrl	equ	0xFF6
  8167                           tablat	equ	0xFF5
  8168                           prodh	equ	0xFF4
  8169                           prodl	equ	0xFF3
  8170                           intcon	equ	0xFF2
  8171                           indf0	equ	0xFEF
  8172                           postinc0	equ	0xFEE
  8173                           fsr0h	equ	0xFEA
  8174                           fsr0l	equ	0xFE9
  8175                           wreg	equ	0xFE8
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _calcula *****************
  8183 ;; Defined at:
  8184 ;;		line 265 in file "color_2.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  temp            4   45[BANK0 ] float 
  8189 ;;  freq            4   41[BANK0 ] float 
  8190 ;;  elapsedTime     4   37[BANK0 ] unsigned long 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  4   29[BANK0 ] float 
  8193 ;; Registers used:
  8194 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8200 ;;      Params:         0       4       0       0       0       0       0
  8201 ;;      Locals:         0      12       0       0       0       0       0
  8202 ;;      Temps:          0       4       0       0       0       0       0
  8203 ;;      Totals:         0      20       0       0       0       0       0
  8204 ;;Total ram usage:       20 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    3
  8207 ;; This function calls:
  8208 ;;		___fldiv
  8209 ;;		___flmul
  8210 ;;		___xxtofl
  8211 ;;		_prepareForInterrupts
  8212 ;; This function is called by:
  8213 ;;		_main
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           	psect	text28
  8218  002D48                     __ptext28:
  8219                           	opt stack 0
  8220  002D48                     _calcula:
  8221                           	opt stack 27
  8222                           
  8223                           ;color_2.c: 267: float freq = 0.0;
  8224                           
  8225                           ;incstack = 0
  8226  002D48  0E00               	movlw	0
  8227  002D4A  0100               	movlb	0	; () banked
  8228  002D4C  6FA9               	movwf	calcula@freq& (0+255),b
  8229  002D4E  0E00               	movlw	0
  8230  002D50  6FAA               	movwf	(calcula@freq+1)& (0+255),b
  8231  002D52  0E00               	movlw	0
  8232  002D54  6FAB               	movwf	(calcula@freq+2)& (0+255),b
  8233  002D56  0E00               	movlw	0
  8234  002D58  6FAC               	movwf	(calcula@freq+3)& (0+255),b
  8235                           
  8236                           ;color_2.c: 268: float temp = 0.0;
  8237  002D5A  0E00               	movlw	0
  8238  002D5C  6FAD               	movwf	calcula@temp& (0+255),b
  8239  002D5E  0E00               	movlw	0
  8240  002D60  6FAE               	movwf	(calcula@temp+1)& (0+255),b
  8241  002D62  0E00               	movlw	0
  8242  002D64  6FAF               	movwf	(calcula@temp+2)& (0+255),b
  8243  002D66  0E00               	movlw	0
  8244  002D68  6FB0               	movwf	(calcula@temp+3)& (0+255),b
  8245                           
  8246                           ;color_2.c: 269: if (!triggered)
  8247  002D6A  5047               	movf	_triggered,w,c	;volatile
  8248  002D6C  B4D8               	btfsc	status,2,c
  8249  002D6E  0012               	return	
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;color_2.c: 274: }
  8253                           ;color_2.c: 276: unsigned long elapsedTime = finishTime - startTime;
  8254                           
  8255                           ; BSR set to: 0
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;color_2.c: 270: {
  8259                           ;color_2.c: 273: return;
  8260  002D70  C03F  F0A1         	movff	_startTime,??_calcula	;volatile
  8261  002D74  C040  F0A2         	movff	_startTime+1,??_calcula+1	;volatile
  8262  002D78  C041  F0A3         	movff	_startTime+2,??_calcula+2	;volatile
  8263  002D7C  C042  F0A4         	movff	_startTime+3,??_calcula+3	;volatile
  8264  002D80  1FA1               	comf	??_calcula& (0+255),f,b
  8265  002D82  1FA2               	comf	(??_calcula+1)& (0+255),f,b
  8266  002D84  1FA3               	comf	(??_calcula+2)& (0+255),f,b
  8267  002D86  1FA4               	comf	(??_calcula+3)& (0+255),f,b
  8268  002D88  2BA1               	incf	??_calcula& (0+255),f,b
  8269  002D8A  0E00               	movlw	0
  8270  002D8C  23A2               	addwfc	(??_calcula+1)& (0+255),f,b
  8271  002D8E  23A3               	addwfc	(??_calcula+2)& (0+255),f,b
  8272  002D90  23A4               	addwfc	(??_calcula+3)& (0+255),f,b
  8273  002D92  503B               	movf	_finishTime,w,c	;volatile
  8274  002D94  25A1               	addwf	??_calcula& (0+255),w,b
  8275  002D96  6FA5               	movwf	calcula@elapsedTime& (0+255),b
  8276  002D98  503C               	movf	_finishTime+1,w,c	;volatile
  8277  002D9A  21A2               	addwfc	(??_calcula+1)& (0+255),w,b
  8278  002D9C  6FA6               	movwf	(calcula@elapsedTime+1)& (0+255),b
  8279  002D9E  503D               	movf	_finishTime+2,w,c	;volatile
  8280  002DA0  21A3               	addwfc	(??_calcula+2)& (0+255),w,b
  8281  002DA2  6FA7               	movwf	(calcula@elapsedTime+2)& (0+255),b
  8282  002DA4  503E               	movf	_finishTime+3,w,c	;volatile
  8283  002DA6  21A4               	addwfc	(??_calcula+3)& (0+255),w,b
  8284  002DA8  6FA8               	movwf	(calcula@elapsedTime+3)& (0+255),b
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;color_2.c: 278: temp = (float) (elapsedTime);
  8288  002DAA  C0A5  F080         	movff	calcula@elapsedTime,___xxtofl@val
  8289  002DAE  C0A6  F081         	movff	calcula@elapsedTime+1,___xxtofl@val+1
  8290  002DB2  C0A7  F082         	movff	calcula@elapsedTime+2,___xxtofl@val+2
  8291  002DB6  C0A8  F083         	movff	calcula@elapsedTime+3,___xxtofl@val+3
  8292  002DBA  0E00               	movlw	0
  8293  002DBC  ECAA  F013         	call	___xxtofl
  8294  002DC0  C080  F0AD         	movff	?___xxtofl,calcula@temp
  8295  002DC4  C081  F0AE         	movff	?___xxtofl+1,calcula@temp+1
  8296  002DC8  C082  F0AF         	movff	?___xxtofl+2,calcula@temp+2
  8297  002DCC  C083  F0B0         	movff	?___xxtofl+3,calcula@temp+3
  8298                           
  8299                           ;color_2.c: 279: temp *= 250e-9;
  8300  002DD0  C0AD  F084         	movff	calcula@temp,___flmul@b
  8301  002DD4  C0AE  F085         	movff	calcula@temp+1,___flmul@b+1
  8302  002DD8  C0AF  F086         	movff	calcula@temp+2,___flmul@b+2
  8303  002DDC  C0B0  F087         	movff	calcula@temp+3,___flmul@b+3
  8304  002DE0  0EBD               	movlw	189
  8305  002DE2  0100               	movlb	0	; () banked
  8306  002DE4  6F88               	movwf	___flmul@a& (0+255),b
  8307  002DE6  0E37               	movlw	55
  8308  002DE8  6F89               	movwf	(___flmul@a+1)& (0+255),b
  8309  002DEA  0E86               	movlw	134
  8310  002DEC  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  8311  002DEE  0E34               	movlw	52
  8312  002DF0  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  8313  002DF2  ECBC  F00D         	call	___flmul	;wreg free
  8314  002DF6  C084  F0AD         	movff	?___flmul,calcula@temp
  8315  002DFA  C085  F0AE         	movff	?___flmul+1,calcula@temp+1
  8316  002DFE  C086  F0AF         	movff	?___flmul+2,calcula@temp+2
  8317  002E02  C087  F0B0         	movff	?___flmul+3,calcula@temp+3
  8318                           
  8319                           ;color_2.c: 280: freq = 1.0/(temp);
  8320  002E06  0E00               	movlw	0
  8321  002E08  6E2E               	movwf	___fldiv@b,c
  8322  002E0A  0E00               	movlw	0
  8323  002E0C  6E2F               	movwf	___fldiv@b+1,c
  8324  002E0E  0E80               	movlw	128
  8325  002E10  6E30               	movwf	___fldiv@b+2,c
  8326  002E12  0E3F               	movlw	63
  8327  002E14  6E31               	movwf	___fldiv@b+3,c
  8328  002E16  C0AD  F032         	movff	calcula@temp,___fldiv@a
  8329  002E1A  C0AE  F033         	movff	calcula@temp+1,___fldiv@a+1
  8330  002E1E  C0AF  F034         	movff	calcula@temp+2,___fldiv@a+2
  8331  002E22  C0B0  F035         	movff	calcula@temp+3,___fldiv@a+3
  8332  002E26  EC04  F011         	call	___fldiv	;wreg free
  8333  002E2A  C02E  F0A9         	movff	?___fldiv,calcula@freq
  8334  002E2E  C02F  F0AA         	movff	?___fldiv+1,calcula@freq+1
  8335  002E32  C030  F0AB         	movff	?___fldiv+2,calcula@freq+2
  8336  002E36  C031  F0AC         	movff	?___fldiv+3,calcula@freq+3
  8337                           
  8338                           ;color_2.c: 281: prepareForInterrupts ();
  8339  002E3A  EC60  F01A         	call	_prepareForInterrupts	;wreg free
  8340                           
  8341                           ;color_2.c: 282: return freq;
  8342  002E3E  C0A9  F09D         	movff	calcula@freq,?_calcula
  8343  002E42  C0AA  F09E         	movff	calcula@freq+1,?_calcula+1
  8344  002E46  C0AB  F09F         	movff	calcula@freq+2,?_calcula+2
  8345  002E4A  C0AC  F0A0         	movff	calcula@freq+3,?_calcula+3
  8346  002E4E  0012               	return	
  8347  002E50                     __end_of_calcula:
  8348                           	opt stack 0
  8349                           tblptru	equ	0xFF8
  8350                           tblptrh	equ	0xFF7
  8351                           tblptrl	equ	0xFF6
  8352                           tablat	equ	0xFF5
  8353                           prodh	equ	0xFF4
  8354                           prodl	equ	0xFF3
  8355                           intcon	equ	0xFF2
  8356                           indf0	equ	0xFEF
  8357                           postinc0	equ	0xFEE
  8358                           fsr0h	equ	0xFEA
  8359                           fsr0l	equ	0xFE9
  8360                           wreg	equ	0xFE8
  8361                           indf2	equ	0xFDF
  8362                           postinc2	equ	0xFDE
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367 ;; *************** function _prepareForInterrupts *****************
  8368 ;; Defined at:
  8369 ;;		line 285 in file "color_2.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;		None
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;		None
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8383 ;;      Params:         0       0       0       0       0       0       0
  8384 ;;      Locals:         0       0       0       0       0       0       0
  8385 ;;      Temps:          0       0       0       0       0       0       0
  8386 ;;      Totals:         0       0       0       0       0       0       0
  8387 ;;Total ram usage:        0 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    2
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_main
  8394 ;;		_calcula
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           	psect	text29
  8399  0034C0                     __ptext29:
  8400                           	opt stack 0
  8401  0034C0                     _prepareForInterrupts:
  8402                           	opt stack 28
  8403                           
  8404                           ;color_2.c: 289: first = true;
  8405                           
  8406                           ;color_2.c: 288: INT0IF == 0;
  8407                           
  8408                           ;incstack = 0
  8409  0034C0  0E01               	movlw	1
  8410  0034C2  6E48               	movwf	_first,c	;volatile
  8411                           
  8412                           ;color_2.c: 290: triggered = false;
  8413  0034C4  0E00               	movlw	0
  8414  0034C6  6E47               	movwf	_triggered,c	;volatile
  8415                           
  8416                           ;color_2.c: 295: INT0IE = 1;
  8417  0034C8  88F2               	bsf	intcon,4,c	;volatile
  8418                           
  8419                           ;color_2.c: 296: INTEDG0 = 1;
  8420  0034CA  8CF1               	bsf	intcon2,6,c	;volatile
  8421  0034CC  0012               	return		;funcret
  8422  0034CE                     __end_of_prepareForInterrupts:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           indf0	equ	0xFEF
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           fsr2h	equ	0xFDA
  8440                           fsr2l	equ	0xFD9
  8441                           status	equ	0xFD8
  8442                           
  8443 ;; *************** function ___xxtofl *****************
  8444 ;; Defined at:
  8445 ;;		line 10 in file "/opt/microchip/xc8/v1.45/sources/common/xxtofl.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;  sign            1    wreg     unsigned char 
  8448 ;;  val             4    0[BANK0 ] long 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  sign            1    8[BANK0 ] unsigned char 
  8451 ;;  arg             4   10[BANK0 ] unsigned long 
  8452 ;;  exp             1    9[BANK0 ] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  4    0[BANK0 ] unsigned char 
  8455 ;; Registers used:
  8456 ;;		wreg, status,2, status,0
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8462 ;;      Params:         0       4       0       0       0       0       0
  8463 ;;      Locals:         0       6       0       0       0       0       0
  8464 ;;      Temps:          0       4       0       0       0       0       0
  8465 ;;      Totals:         0      14       0       0       0       0       0
  8466 ;;Total ram usage:       14 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    2
  8469 ;; This function calls:
  8470 ;;		Nothing
  8471 ;; This function is called by:
  8472 ;;		_main
  8473 ;;		_calcula
  8474 ;;		_sprintf
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text30
  8479  002754                     __ptext30:
  8480                           	opt stack 0
  8481  002754                     ___xxtofl:
  8482                           	opt stack 27
  8483                           
  8484                           ;incstack = 0
  8485                           ;___xxtofl@sign stored from wreg
  8486  002754  0100               	movlb	0	; () banked
  8487  002756  6F88               	movwf	___xxtofl@sign& (0+255),b
  8488  002758  0100               	movlb	0	; () banked
  8489  00275A  5188               	movf	___xxtofl@sign& (0+255),w,b
  8490  00275C  A4D8               	btfss	status,2,c
  8491                           
  8492                           ; BSR set to: 0
  8493  00275E  AF83               	btfss	(___xxtofl@val+3)& (0+255),7,b
  8494  002760  D01A               	goto	l896
  8495                           
  8496                           ; BSR set to: 0
  8497  002762  C080  F084         	movff	___xxtofl@val,??___xxtofl
  8498  002766  C081  F085         	movff	___xxtofl@val+1,??___xxtofl+1
  8499  00276A  C082  F086         	movff	___xxtofl@val+2,??___xxtofl+2
  8500  00276E  C083  F087         	movff	___xxtofl@val+3,??___xxtofl+3
  8501  002772  1F84               	comf	??___xxtofl& (0+255),f,b
  8502  002774  1F85               	comf	(??___xxtofl+1)& (0+255),f,b
  8503  002776  1F86               	comf	(??___xxtofl+2)& (0+255),f,b
  8504  002778  1F87               	comf	(??___xxtofl+3)& (0+255),f,b
  8505  00277A  2B84               	incf	??___xxtofl& (0+255),f,b
  8506  00277C  0E00               	movlw	0
  8507  00277E  2385               	addwfc	(??___xxtofl+1)& (0+255),f,b
  8508  002780  2386               	addwfc	(??___xxtofl+2)& (0+255),f,b
  8509  002782  2387               	addwfc	(??___xxtofl+3)& (0+255),f,b
  8510  002784  C084  F08A         	movff	??___xxtofl,___xxtofl@arg
  8511  002788  C085  F08B         	movff	??___xxtofl+1,___xxtofl@arg+1
  8512  00278C  C086  F08C         	movff	??___xxtofl+2,___xxtofl@arg+2
  8513  002790  C087  F08D         	movff	??___xxtofl+3,___xxtofl@arg+3
  8514  002794  D008               	goto	l897
  8515  002796                     l896:
  8516                           
  8517                           ; BSR set to: 0
  8518  002796  C080  F08A         	movff	___xxtofl@val,___xxtofl@arg
  8519  00279A  C081  F08B         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8520  00279E  C082  F08C         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8521  0027A2  C083  F08D         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8522  0027A6                     l897:
  8523                           
  8524                           ; BSR set to: 0
  8525                           
  8526                           ; BSR set to: 0
  8527  0027A6  5180               	movf	___xxtofl@val& (0+255),w,b
  8528  0027A8  1181               	iorwf	(___xxtofl@val+1)& (0+255),w,b
  8529  0027AA  1182               	iorwf	(___xxtofl@val+2)& (0+255),w,b
  8530  0027AC  1183               	iorwf	(___xxtofl@val+3)& (0+255),w,b
  8531  0027AE  A4D8               	btfss	status,2,c
  8532  0027B0  D009               	goto	l898
  8533                           
  8534                           ; BSR set to: 0
  8535  0027B2  0E00               	movlw	0
  8536  0027B4  6F80               	movwf	?___xxtofl& (0+255),b
  8537  0027B6  0E00               	movlw	0
  8538  0027B8  6F81               	movwf	(?___xxtofl+1)& (0+255),b
  8539  0027BA  0E00               	movlw	0
  8540  0027BC  6F82               	movwf	(?___xxtofl+2)& (0+255),b
  8541  0027BE  0E00               	movlw	0
  8542  0027C0  6F83               	movwf	(?___xxtofl+3)& (0+255),b
  8543                           
  8544                           ; BSR set to: 0
  8545  0027C2  0012               	return	
  8546  0027C4                     l898:
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551  0027C4  0E96               	movlw	150
  8552  0027C6  6F89               	movwf	___xxtofl@exp& (0+255),b
  8553  0027C8  D006               	goto	l900
  8554  0027CA                     
  8555                           ; BSR set to: 0
  8556                           
  8557                           ; BSR set to: 0
  8558  0027CA  2B89               	incf	___xxtofl@exp& (0+255),f,b
  8559  0027CC  90D8               	bcf	status,0,c
  8560  0027CE  338D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  8561  0027D0  338C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  8562  0027D2  338B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  8563  0027D4  338A               	rrcf	___xxtofl@arg& (0+255),f,b
  8564  0027D6                     l900:
  8565                           
  8566                           ; BSR set to: 0
  8567                           
  8568                           ; BSR set to: 0
  8569  0027D6  0E00               	movlw	0
  8570  0027D8  158A               	andwf	___xxtofl@arg& (0+255),w,b
  8571  0027DA  6F84               	movwf	??___xxtofl& (0+255),b
  8572  0027DC  0E00               	movlw	0
  8573  0027DE  158B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  8574  0027E0  6F85               	movwf	(??___xxtofl+1)& (0+255),b
  8575  0027E2  0E00               	movlw	0
  8576  0027E4  158C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  8577  0027E6  6F86               	movwf	(??___xxtofl+2)& (0+255),b
  8578  0027E8  0EFE               	movlw	254
  8579  0027EA  158D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  8580  0027EC  6F87               	movwf	(??___xxtofl+3)& (0+255),b
  8581  0027EE  5184               	movf	??___xxtofl& (0+255),w,b
  8582  0027F0  1185               	iorwf	(??___xxtofl+1)& (0+255),w,b
  8583  0027F2  1186               	iorwf	(??___xxtofl+2)& (0+255),w,b
  8584  0027F4  1187               	iorwf	(??___xxtofl+3)& (0+255),w,b
  8585  0027F6  B4D8               	btfsc	status,2,c
  8586  0027F8  D00D               	goto	l903
  8587  0027FA  D7E7               	goto	l901
  8588  0027FC                     
  8589                           ; BSR set to: 0
  8590                           
  8591                           ; BSR set to: 0
  8592  0027FC  2B89               	incf	___xxtofl@exp& (0+255),f,b
  8593                           
  8594                           ; BSR set to: 0
  8595  0027FE  0E01               	movlw	1
  8596  002800  278A               	addwf	___xxtofl@arg& (0+255),f,b
  8597  002802  0E00               	movlw	0
  8598  002804  238B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
  8599  002806  238C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
  8600  002808  238D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
  8601                           
  8602                           ; BSR set to: 0
  8603  00280A  90D8               	bcf	status,0,c
  8604  00280C  338D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  8605  00280E  338C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  8606  002810  338B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  8607  002812  338A               	rrcf	___xxtofl@arg& (0+255),f,b
  8608  002814                     l903:
  8609                           
  8610                           ; BSR set to: 0
  8611  002814  0E00               	movlw	0
  8612  002816  158A               	andwf	___xxtofl@arg& (0+255),w,b
  8613  002818  6F84               	movwf	??___xxtofl& (0+255),b
  8614  00281A  0E00               	movlw	0
  8615  00281C  158B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  8616  00281E  6F85               	movwf	(??___xxtofl+1)& (0+255),b
  8617  002820  0E00               	movlw	0
  8618  002822  158C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  8619  002824  6F86               	movwf	(??___xxtofl+2)& (0+255),b
  8620  002826  0EFF               	movlw	255
  8621  002828  158D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  8622  00282A  6F87               	movwf	(??___xxtofl+3)& (0+255),b
  8623  00282C  5184               	movf	??___xxtofl& (0+255),w,b
  8624  00282E  1185               	iorwf	(??___xxtofl+1)& (0+255),w,b
  8625  002830  1186               	iorwf	(??___xxtofl+2)& (0+255),w,b
  8626  002832  1187               	iorwf	(??___xxtofl+3)& (0+255),w,b
  8627  002834  B4D8               	btfsc	status,2,c
  8628  002836  D007               	goto	l906
  8629  002838  D7E1               	goto	l904
  8630  00283A                     
  8631                           ; BSR set to: 0
  8632                           
  8633                           ; BSR set to: 0
  8634  00283A  0789               	decf	___xxtofl@exp& (0+255),f,b
  8635  00283C  90D8               	bcf	status,0,c
  8636  00283E  378A               	rlcf	___xxtofl@arg& (0+255),f,b
  8637  002840  378B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
  8638  002842  378C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
  8639  002844  378D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
  8640  002846                     l906:
  8641                           
  8642                           ; BSR set to: 0
  8643                           
  8644                           ; BSR set to: 0
  8645  002846  BF8C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
  8646  002848  D003               	goto	u5950
  8647                           
  8648                           ; BSR set to: 0
  8649  00284A  0E02               	movlw	2
  8650  00284C  6189               	cpfslt	___xxtofl@exp& (0+255),b
  8651  00284E  D7F5               	goto	l907
  8652  002850                     u5950:
  8653                           
  8654                           ; BSR set to: 0
  8655                           
  8656                           ; BSR set to: 0
  8657  002850  B189               	btfsc	___xxtofl@exp& (0+255),0,b
  8658  002852  D008               	goto	l911
  8659                           
  8660                           ; BSR set to: 0
  8661  002854  0EFF               	movlw	255
  8662  002856  178A               	andwf	___xxtofl@arg& (0+255),f,b
  8663  002858  0EFF               	movlw	255
  8664  00285A  178B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
  8665  00285C  0E7F               	movlw	127
  8666  00285E  178C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
  8667  002860  0EFF               	movlw	255
  8668  002862  178D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
  8669  002864                     l911:
  8670                           
  8671                           ; BSR set to: 0
  8672  002864  90D8               	bcf	status,0,c
  8673  002866  3389               	rrcf	___xxtofl@exp& (0+255),f,b
  8674  002868  C089  F084         	movff	___xxtofl@exp,??___xxtofl
  8675  00286C  6B85               	clrf	(??___xxtofl+1)& (0+255),b
  8676  00286E  6B86               	clrf	(??___xxtofl+2)& (0+255),b
  8677  002870  6B87               	clrf	(??___xxtofl+3)& (0+255),b
  8678  002872  C084  F087         	movff	??___xxtofl,??___xxtofl+3
  8679  002876  6B86               	clrf	(??___xxtofl+2)& (0+255),b
  8680  002878  6B85               	clrf	(??___xxtofl+1)& (0+255),b
  8681  00287A  6B84               	clrf	??___xxtofl& (0+255),b
  8682  00287C  5184               	movf	??___xxtofl& (0+255),w,b
  8683  00287E  138A               	iorwf	___xxtofl@arg& (0+255),f,b
  8684  002880  5185               	movf	(??___xxtofl+1)& (0+255),w,b
  8685  002882  138B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
  8686  002884  5186               	movf	(??___xxtofl+2)& (0+255),w,b
  8687  002886  138C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
  8688  002888  5187               	movf	(??___xxtofl+3)& (0+255),w,b
  8689  00288A  138D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
  8690                           
  8691                           ; BSR set to: 0
  8692  00288C  5188               	movf	___xxtofl@sign& (0+255),w,b
  8693  00288E  A4D8               	btfss	status,2,c
  8694                           
  8695                           ; BSR set to: 0
  8696  002890  AF83               	btfss	(___xxtofl@val+3)& (0+255),7,b
  8697  002892  D001               	goto	l912
  8698                           
  8699                           ; BSR set to: 0
  8700  002894  8F8D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
  8701  002896                     l912:
  8702                           
  8703                           ; BSR set to: 0
  8704                           
  8705                           ; BSR set to: 0
  8706  002896  C08A  F080         	movff	___xxtofl@arg,?___xxtofl
  8707  00289A  C08B  F081         	movff	___xxtofl@arg+1,?___xxtofl+1
  8708  00289E  C08C  F082         	movff	___xxtofl@arg+2,?___xxtofl+2
  8709  0028A2  C08D  F083         	movff	___xxtofl@arg+3,?___xxtofl+3
  8710  0028A6  0012               	return	
  8711  0028A8                     __end_of___xxtofl:
  8712                           	opt stack 0
  8713                           tblptru	equ	0xFF8
  8714                           tblptrh	equ	0xFF7
  8715                           tblptrl	equ	0xFF6
  8716                           tablat	equ	0xFF5
  8717                           prodh	equ	0xFF4
  8718                           prodl	equ	0xFF3
  8719                           intcon	equ	0xFF2
  8720                           intcon2	equ	0xFF1
  8721                           indf0	equ	0xFEF
  8722                           postinc0	equ	0xFEE
  8723                           fsr0h	equ	0xFEA
  8724                           fsr0l	equ	0xFE9
  8725                           wreg	equ	0xFE8
  8726                           indf2	equ	0xFDF
  8727                           postinc2	equ	0xFDE
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function ___flmul *****************
  8733 ;; Defined at:
  8734 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/sprcmul.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  b               4    4[BANK0 ] unsigned char 
  8737 ;;  a               4    8[BANK0 ] unsigned char 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  prod            4   23[BANK0 ] struct .
  8740 ;;  grs             4   18[BANK0 ] unsigned long 
  8741 ;;  temp            2   27[BANK0 ] struct .
  8742 ;;  bexp            1   22[BANK0 ] unsigned char 
  8743 ;;  aexp            1   17[BANK0 ] unsigned char 
  8744 ;;  sign            1   16[BANK0 ] unsigned char 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  4    4[BANK0 ] unsigned char 
  8747 ;; Registers used:
  8748 ;;		wreg, status,2, status,0, prodl, prodh
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8754 ;;      Params:         0       8       0       0       0       0       0
  8755 ;;      Locals:         0      13       0       0       0       0       0
  8756 ;;      Temps:          0       4       0       0       0       0       0
  8757 ;;      Totals:         0      25       0       0       0       0       0
  8758 ;;Total ram usage:       25 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:    2
  8761 ;; This function calls:
  8762 ;;		Nothing
  8763 ;; This function is called by:
  8764 ;;		_calcula
  8765 ;;		_fround
  8766 ;;		_scale
  8767 ;;		_sprintf
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text31
  8772  001B78                     __ptext31:
  8773                           	opt stack 0
  8774  001B78                     ___flmul:
  8775                           	opt stack 26
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;incstack = 0
  8779  001B78  0100               	movlb	0	; () banked
  8780  001B7A  5187               	movf	(___flmul@b+3)& (0+255),w,b
  8781  001B7C  0B80               	andlw	128
  8782  001B7E  6F90               	movwf	___flmul@sign& (0+255),b
  8783  001B80  5187               	movf	(___flmul@b+3)& (0+255),w,b
  8784  001B82  2587               	addwf	(___flmul@b+3)& (0+255),w,b
  8785  001B84  6F96               	movwf	___flmul@bexp& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788  001B86  BF86               	btfsc	(___flmul@b+2)& (0+255),7,b
  8789                           
  8790                           ; BSR set to: 0
  8791  001B88  8196               	bsf	___flmul@bexp& (0+255),0,b
  8792                           
  8793                           ; BSR set to: 0
  8794                           
  8795                           ; BSR set to: 0
  8796  001B8A  5196               	movf	___flmul@bexp& (0+255),w,b
  8797  001B8C  B4D8               	btfsc	status,2,c
  8798  001B8E  D00D               	goto	l868
  8799                           
  8800                           ; BSR set to: 0
  8801  001B90  2996               	incf	___flmul@bexp& (0+255),w,b
  8802  001B92  A4D8               	btfss	status,2,c
  8803  001B94  D008               	goto	l869
  8804                           
  8805                           ; BSR set to: 0
  8806  001B96  0E00               	movlw	0
  8807  001B98  6F84               	movwf	___flmul@b& (0+255),b
  8808  001B9A  0E00               	movlw	0
  8809  001B9C  6F85               	movwf	(___flmul@b+1)& (0+255),b
  8810  001B9E  0E00               	movlw	0
  8811  001BA0  6F86               	movwf	(___flmul@b+2)& (0+255),b
  8812  001BA2  0E00               	movlw	0
  8813  001BA4  6F87               	movwf	(___flmul@b+3)& (0+255),b
  8814  001BA6                     l869:
  8815                           
  8816                           ; BSR set to: 0
  8817                           
  8818                           ; BSR set to: 0
  8819  001BA6  8F86               	bsf	(___flmul@b+2)& (0+255),7,b
  8820  001BA8  D008               	goto	l870
  8821  001BAA                     l868:
  8822                           
  8823                           ; BSR set to: 0
  8824                           
  8825                           ; BSR set to: 0
  8826  001BAA  0E00               	movlw	0
  8827  001BAC  6F84               	movwf	___flmul@b& (0+255),b
  8828  001BAE  0E00               	movlw	0
  8829  001BB0  6F85               	movwf	(___flmul@b+1)& (0+255),b
  8830  001BB2  0E00               	movlw	0
  8831  001BB4  6F86               	movwf	(___flmul@b+2)& (0+255),b
  8832  001BB6  0E00               	movlw	0
  8833  001BB8  6F87               	movwf	(___flmul@b+3)& (0+255),b
  8834  001BBA                     l870:
  8835                           
  8836                           ; BSR set to: 0
  8837                           
  8838                           ; BSR set to: 0
  8839  001BBA  518B               	movf	(___flmul@a+3)& (0+255),w,b
  8840  001BBC  0B80               	andlw	128
  8841  001BBE  1B90               	xorwf	___flmul@sign& (0+255),f,b
  8842                           
  8843                           ; BSR set to: 0
  8844  001BC0  518B               	movf	(___flmul@a+3)& (0+255),w,b
  8845  001BC2  258B               	addwf	(___flmul@a+3)& (0+255),w,b
  8846  001BC4  6F91               	movwf	___flmul@aexp& (0+255),b
  8847                           
  8848                           ; BSR set to: 0
  8849  001BC6  BF8A               	btfsc	(___flmul@a+2)& (0+255),7,b
  8850                           
  8851                           ; BSR set to: 0
  8852  001BC8  8191               	bsf	___flmul@aexp& (0+255),0,b
  8853                           
  8854                           ; BSR set to: 0
  8855                           
  8856                           ; BSR set to: 0
  8857  001BCA  5191               	movf	___flmul@aexp& (0+255),w,b
  8858  001BCC  B4D8               	btfsc	status,2,c
  8859  001BCE  D00D               	goto	l872
  8860                           
  8861                           ; BSR set to: 0
  8862  001BD0  2991               	incf	___flmul@aexp& (0+255),w,b
  8863  001BD2  A4D8               	btfss	status,2,c
  8864  001BD4  D008               	goto	l873
  8865                           
  8866                           ; BSR set to: 0
  8867  001BD6  0E00               	movlw	0
  8868  001BD8  6F88               	movwf	___flmul@a& (0+255),b
  8869  001BDA  0E00               	movlw	0
  8870  001BDC  6F89               	movwf	(___flmul@a+1)& (0+255),b
  8871  001BDE  0E00               	movlw	0
  8872  001BE0  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  8873  001BE2  0E00               	movlw	0
  8874  001BE4  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  8875  001BE6                     l873:
  8876                           
  8877                           ; BSR set to: 0
  8878                           
  8879                           ; BSR set to: 0
  8880  001BE6  8F8A               	bsf	(___flmul@a+2)& (0+255),7,b
  8881  001BE8  D008               	goto	l874
  8882  001BEA                     l872:
  8883                           
  8884                           ; BSR set to: 0
  8885                           
  8886                           ; BSR set to: 0
  8887  001BEA  0E00               	movlw	0
  8888  001BEC  6F88               	movwf	___flmul@a& (0+255),b
  8889  001BEE  0E00               	movlw	0
  8890  001BF0  6F89               	movwf	(___flmul@a+1)& (0+255),b
  8891  001BF2  0E00               	movlw	0
  8892  001BF4  6F8A               	movwf	(___flmul@a+2)& (0+255),b
  8893  001BF6  0E00               	movlw	0
  8894  001BF8  6F8B               	movwf	(___flmul@a+3)& (0+255),b
  8895  001BFA                     l874:
  8896                           
  8897                           ; BSR set to: 0
  8898  001BFA  5191               	movf	___flmul@aexp& (0+255),w,b
  8899  001BFC  B4D8               	btfsc	status,2,c
  8900  001BFE  D003               	goto	u4980
  8901                           
  8902                           ; BSR set to: 0
  8903  001C00  5196               	movf	___flmul@bexp& (0+255),w,b
  8904  001C02  A4D8               	btfss	status,2,c
  8905  001C04  D009               	goto	l875
  8906  001C06                     u4980:
  8907                           
  8908                           ; BSR set to: 0
  8909                           
  8910                           ; BSR set to: 0
  8911  001C06  0E00               	movlw	0
  8912  001C08  6F84               	movwf	?___flmul& (0+255),b
  8913  001C0A  0E00               	movlw	0
  8914  001C0C  6F85               	movwf	(?___flmul+1)& (0+255),b
  8915  001C0E  0E00               	movlw	0
  8916  001C10  6F86               	movwf	(?___flmul+2)& (0+255),b
  8917  001C12  0E00               	movlw	0
  8918  001C14  6F87               	movwf	(?___flmul+3)& (0+255),b
  8919                           
  8920                           ; BSR set to: 0
  8921  001C16  0012               	return	
  8922  001C18                     l875:
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927  001C18  518A               	movf	(___flmul@a+2)& (0+255),w,b
  8928  001C1A  0384               	mulwf	___flmul@b& (0+255),b
  8929  001C1C  CFF3 F09B          	movff	prodl,___flmul@temp
  8930  001C20  CFF4 F09C          	movff	prodh,___flmul@temp+1
  8931                           
  8932                           ; BSR set to: 0
  8933  001C24  519B               	movf	___flmul@temp& (0+255),w,b
  8934  001C26  6F92               	movwf	___flmul@grs& (0+255),b
  8935  001C28  6B93               	clrf	(___flmul@grs+1)& (0+255),b
  8936  001C2A  6B94               	clrf	(___flmul@grs+2)& (0+255),b
  8937  001C2C  6B95               	clrf	(___flmul@grs+3)& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940  001C2E  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  8941  001C30  6F97               	movwf	___flmul@prod& (0+255),b
  8942  001C32  6B98               	clrf	(___flmul@prod+1)& (0+255),b
  8943  001C34  6B99               	clrf	(___flmul@prod+2)& (0+255),b
  8944  001C36  6B9A               	clrf	(___flmul@prod+3)& (0+255),b
  8945  001C38  5189               	movf	(___flmul@a+1)& (0+255),w,b
  8946  001C3A  0385               	mulwf	(___flmul@b+1)& (0+255),b
  8947  001C3C  CFF3 F09B          	movff	prodl,___flmul@temp
  8948  001C40  CFF4 F09C          	movff	prodh,___flmul@temp+1
  8949                           
  8950                           ; BSR set to: 0
  8951  001C44  519B               	movf	___flmul@temp& (0+255),w,b
  8952  001C46  2792               	addwf	___flmul@grs& (0+255),f,b
  8953  001C48  0E00               	movlw	0
  8954  001C4A  2393               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8955  001C4C  2394               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8956  001C4E  2395               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8957                           
  8958                           ; BSR set to: 0
  8959  001C50  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  8960  001C52  2797               	addwf	___flmul@prod& (0+255),f,b
  8961  001C54  0E00               	movlw	0
  8962  001C56  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8963  001C58  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8964  001C5A  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8965  001C5C  5188               	movf	___flmul@a& (0+255),w,b
  8966  001C5E  0386               	mulwf	(___flmul@b+2)& (0+255),b
  8967  001C60  CFF3 F09B          	movff	prodl,___flmul@temp
  8968  001C64  CFF4 F09C          	movff	prodh,___flmul@temp+1
  8969                           
  8970                           ; BSR set to: 0
  8971  001C68  519B               	movf	___flmul@temp& (0+255),w,b
  8972  001C6A  2792               	addwf	___flmul@grs& (0+255),f,b
  8973  001C6C  0E00               	movlw	0
  8974  001C6E  2393               	addwfc	(___flmul@grs+1)& (0+255),f,b
  8975  001C70  2394               	addwfc	(___flmul@grs+2)& (0+255),f,b
  8976  001C72  2395               	addwfc	(___flmul@grs+3)& (0+255),f,b
  8977                           
  8978                           ; BSR set to: 0
  8979  001C74  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  8980  001C76  2797               	addwf	___flmul@prod& (0+255),f,b
  8981  001C78  0E00               	movlw	0
  8982  001C7A  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  8983  001C7C  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  8984  001C7E  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  8985                           
  8986                           ; BSR set to: 0
  8987  001C80  C094  F095         	movff	___flmul@grs+2,___flmul@grs+3
  8988  001C84  C093  F094         	movff	___flmul@grs+1,___flmul@grs+2
  8989  001C88  C092  F093         	movff	___flmul@grs,___flmul@grs+1
  8990  001C8C  6B92               	clrf	___flmul@grs& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993  001C8E  5188               	movf	___flmul@a& (0+255),w,b
  8994  001C90  0385               	mulwf	(___flmul@b+1)& (0+255),b
  8995  001C92  CFF3 F09B          	movff	prodl,___flmul@temp
  8996  001C96  CFF4 F09C          	movff	prodh,___flmul@temp+1
  8997                           
  8998                           ; BSR set to: 0
  8999  001C9A  519B               	movf	___flmul@temp& (0+255),w,b
  9000  001C9C  2792               	addwf	___flmul@grs& (0+255),f,b
  9001  001C9E  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9002  001CA0  2393               	addwfc	(___flmul@grs+1)& (0+255),f,b
  9003  001CA2  0E00               	movlw	0
  9004  001CA4  2394               	addwfc	(___flmul@grs+2)& (0+255),f,b
  9005  001CA6  0E00               	movlw	0
  9006  001CA8  2395               	addwfc	(___flmul@grs+3)& (0+255),f,b
  9007                           
  9008                           ; BSR set to: 0
  9009  001CAA  5189               	movf	(___flmul@a+1)& (0+255),w,b
  9010  001CAC  0384               	mulwf	___flmul@b& (0+255),b
  9011  001CAE  CFF3 F09B          	movff	prodl,___flmul@temp
  9012  001CB2  CFF4 F09C          	movff	prodh,___flmul@temp+1
  9013                           
  9014                           ; BSR set to: 0
  9015  001CB6  519B               	movf	___flmul@temp& (0+255),w,b
  9016  001CB8  2792               	addwf	___flmul@grs& (0+255),f,b
  9017  001CBA  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9018  001CBC  2393               	addwfc	(___flmul@grs+1)& (0+255),f,b
  9019  001CBE  0E00               	movlw	0
  9020  001CC0  2394               	addwfc	(___flmul@grs+2)& (0+255),f,b
  9021  001CC2  0E00               	movlw	0
  9022  001CC4  2395               	addwfc	(___flmul@grs+3)& (0+255),f,b
  9023                           
  9024                           ; BSR set to: 0
  9025  001CC6  C094  F095         	movff	___flmul@grs+2,___flmul@grs+3
  9026  001CCA  C093  F094         	movff	___flmul@grs+1,___flmul@grs+2
  9027  001CCE  C092  F093         	movff	___flmul@grs,___flmul@grs+1
  9028  001CD2  6B92               	clrf	___flmul@grs& (0+255),b
  9029  001CD4  5188               	movf	___flmul@a& (0+255),w,b
  9030  001CD6  0384               	mulwf	___flmul@b& (0+255),b
  9031  001CD8  CFF3 F09B          	movff	prodl,___flmul@temp
  9032  001CDC  CFF4 F09C          	movff	prodh,___flmul@temp+1
  9033                           
  9034                           ; BSR set to: 0
  9035  001CE0  519B               	movf	___flmul@temp& (0+255),w,b
  9036  001CE2  2792               	addwf	___flmul@grs& (0+255),f,b
  9037  001CE4  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9038  001CE6  2393               	addwfc	(___flmul@grs+1)& (0+255),f,b
  9039  001CE8  0E00               	movlw	0
  9040  001CEA  2394               	addwfc	(___flmul@grs+2)& (0+255),f,b
  9041  001CEC  0E00               	movlw	0
  9042  001CEE  2395               	addwfc	(___flmul@grs+3)& (0+255),f,b
  9043                           
  9044                           ; BSR set to: 0
  9045  001CF0  518A               	movf	(___flmul@a+2)& (0+255),w,b
  9046  001CF2  0385               	mulwf	(___flmul@b+1)& (0+255),b
  9047  001CF4  CFF3 F09B          	movff	prodl,___flmul@temp
  9048  001CF8  CFF4 F09C          	movff	prodh,___flmul@temp+1
  9049  001CFC  519B               	movf	___flmul@temp& (0+255),w,b
  9050  001CFE  2797               	addwf	___flmul@prod& (0+255),f,b
  9051  001D00  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9052  001D02  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9053  001D04  0E00               	movlw	0
  9054  001D06  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9055  001D08  0E00               	movlw	0
  9056  001D0A  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9057                           
  9058                           ; BSR set to: 0
  9059  001D0C  5189               	movf	(___flmul@a+1)& (0+255),w,b
  9060  001D0E  0386               	mulwf	(___flmul@b+2)& (0+255),b
  9061  001D10  CFF3 F09B          	movff	prodl,___flmul@temp
  9062  001D14  CFF4 F09C          	movff	prodh,___flmul@temp+1
  9063                           
  9064                           ; BSR set to: 0
  9065  001D18  519B               	movf	___flmul@temp& (0+255),w,b
  9066  001D1A  2797               	addwf	___flmul@prod& (0+255),f,b
  9067  001D1C  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9068  001D1E  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9069  001D20  0E00               	movlw	0
  9070  001D22  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9071  001D24  0E00               	movlw	0
  9072  001D26  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9073  001D28  518A               	movf	(___flmul@a+2)& (0+255),w,b
  9074  001D2A  0386               	mulwf	(___flmul@b+2)& (0+255),b
  9075  001D2C  CFF3 F09B          	movff	prodl,___flmul@temp
  9076  001D30  CFF4 F09C          	movff	prodh,___flmul@temp+1
  9077                           
  9078                           ; BSR set to: 0
  9079  001D34  519B               	movf	___flmul@temp& (0+255),w,b
  9080  001D36  6F8C               	movwf	??___flmul& (0+255),b
  9081  001D38  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9082  001D3A  6F8D               	movwf	(??___flmul+1)& (0+255),b
  9083  001D3C  6B8E               	clrf	(??___flmul+2)& (0+255),b
  9084  001D3E  6B8F               	clrf	(??___flmul+3)& (0+255),b
  9085  001D40  C08E  F08F         	movff	??___flmul+2,??___flmul+3
  9086  001D44  C08D  F08E         	movff	??___flmul+1,??___flmul+2
  9087  001D48  C08C  F08D         	movff	??___flmul,??___flmul+1
  9088  001D4C  6B8C               	clrf	??___flmul& (0+255),b
  9089  001D4E  518C               	movf	??___flmul& (0+255),w,b
  9090  001D50  2797               	addwf	___flmul@prod& (0+255),f,b
  9091  001D52  518D               	movf	(??___flmul+1)& (0+255),w,b
  9092  001D54  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9093  001D56  518E               	movf	(??___flmul+2)& (0+255),w,b
  9094  001D58  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9095  001D5A  518F               	movf	(??___flmul+3)& (0+255),w,b
  9096  001D5C  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 0
  9099  001D5E  C092  F08C         	movff	___flmul@grs,??___flmul
  9100  001D62  C093  F08D         	movff	___flmul@grs+1,??___flmul+1
  9101  001D66  C094  F08E         	movff	___flmul@grs+2,??___flmul+2
  9102  001D6A  C095  F08F         	movff	___flmul@grs+3,??___flmul+3
  9103  001D6E  0E19               	movlw	25
  9104  001D70  D005               	goto	u4990
  9105  001D72                     u4995:
  9106  001D72  90D8               	bcf	status,0,c
  9107  001D74  338F               	rrcf	(??___flmul+3)& (0+255),f,b
  9108  001D76  338E               	rrcf	(??___flmul+2)& (0+255),f,b
  9109  001D78  338D               	rrcf	(??___flmul+1)& (0+255),f,b
  9110  001D7A  338C               	rrcf	??___flmul& (0+255),f,b
  9111  001D7C                     u4990:
  9112  001D7C  2EE8               	decfsz	wreg,f,c
  9113  001D7E  D7F9               	goto	u4995
  9114  001D80  518C               	movf	??___flmul& (0+255),w,b
  9115  001D82  2797               	addwf	___flmul@prod& (0+255),f,b
  9116  001D84  518D               	movf	(??___flmul+1)& (0+255),w,b
  9117  001D86  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9118  001D88  518E               	movf	(??___flmul+2)& (0+255),w,b
  9119  001D8A  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9120  001D8C  518F               	movf	(??___flmul+3)& (0+255),w,b
  9121  001D8E  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9122                           
  9123                           ; BSR set to: 0
  9124  001D90  C094  F095         	movff	___flmul@grs+2,___flmul@grs+3
  9125  001D94  C093  F094         	movff	___flmul@grs+1,___flmul@grs+2
  9126  001D98  C092  F093         	movff	___flmul@grs,___flmul@grs+1
  9127  001D9C  6B92               	clrf	___flmul@grs& (0+255),b
  9128                           
  9129                           ; BSR set to: 0
  9130  001D9E  5191               	movf	___flmul@aexp& (0+255),w,b
  9131  001DA0  C096  F08C         	movff	___flmul@bexp,??___flmul
  9132  001DA4  6B8D               	clrf	(??___flmul+1)& (0+255),b
  9133  001DA6  278C               	addwf	??___flmul& (0+255),f,b
  9134  001DA8  0E00               	movlw	0
  9135  001DAA  238D               	addwfc	(??___flmul+1)& (0+255),f,b
  9136  001DAC  0E82               	movlw	130
  9137  001DAE  258C               	addwf	??___flmul& (0+255),w,b
  9138  001DB0  6F9B               	movwf	___flmul@temp& (0+255),b
  9139  001DB2  0EFF               	movlw	255
  9140  001DB4  218D               	addwfc	(??___flmul+1)& (0+255),w,b
  9141  001DB6  6F9C               	movwf	(___flmul@temp+1)& (0+255),b
  9142  001DB8  D00F               	goto	l879
  9143  001DBA                     
  9144                           ; BSR set to: 0
  9145                           
  9146                           ; BSR set to: 0
  9147  001DBA  90D8               	bcf	status,0,c
  9148  001DBC  3797               	rlcf	___flmul@prod& (0+255),f,b
  9149  001DBE  3798               	rlcf	(___flmul@prod+1)& (0+255),f,b
  9150  001DC0  3799               	rlcf	(___flmul@prod+2)& (0+255),f,b
  9151  001DC2  379A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154  001DC4  BF95               	btfsc	(___flmul@grs+3)& (0+255),7,b
  9155                           
  9156                           ; BSR set to: 0
  9157  001DC6  8197               	bsf	___flmul@prod& (0+255),0,b
  9158                           
  9159                           ; BSR set to: 0
  9160  001DC8  90D8               	bcf	status,0,c
  9161  001DCA  3792               	rlcf	___flmul@grs& (0+255),f,b
  9162  001DCC  3793               	rlcf	(___flmul@grs+1)& (0+255),f,b
  9163  001DCE  3794               	rlcf	(___flmul@grs+2)& (0+255),f,b
  9164  001DD0  3795               	rlcf	(___flmul@grs+3)& (0+255),f,b
  9165  001DD2  079B               	decf	___flmul@temp& (0+255),f,b
  9166  001DD4  A0D8               	btfss	status,0,c
  9167  001DD6  079C               	decf	(___flmul@temp+1)& (0+255),f,b
  9168  001DD8                     l879:
  9169                           
  9170                           ; BSR set to: 0
  9171                           
  9172                           ; BSR set to: 0
  9173  001DD8  AF99               	btfss	(___flmul@prod+2)& (0+255),7,b
  9174  001DDA  D7EF               	goto	l880
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179  001DDC  0E00               	movlw	0
  9180  001DDE  6F91               	movwf	___flmul@aexp& (0+255),b
  9181                           
  9182                           ; BSR set to: 0
  9183  001DE0  AF95               	btfss	(___flmul@grs+3)& (0+255),7,b
  9184  001DE2  D016               	goto	l886
  9185                           
  9186                           ; BSR set to: 0
  9187  001DE4  0EFF               	movlw	255
  9188  001DE6  1592               	andwf	___flmul@grs& (0+255),w,b
  9189  001DE8  6F8C               	movwf	??___flmul& (0+255),b
  9190  001DEA  0EFF               	movlw	255
  9191  001DEC  1593               	andwf	(___flmul@grs+1)& (0+255),w,b
  9192  001DEE  6F8D               	movwf	(??___flmul+1)& (0+255),b
  9193  001DF0  0EFF               	movlw	255
  9194  001DF2  1594               	andwf	(___flmul@grs+2)& (0+255),w,b
  9195  001DF4  6F8E               	movwf	(??___flmul+2)& (0+255),b
  9196  001DF6  0E7F               	movlw	127
  9197  001DF8  1595               	andwf	(___flmul@grs+3)& (0+255),w,b
  9198  001DFA  6F8F               	movwf	(??___flmul+3)& (0+255),b
  9199  001DFC  518C               	movf	??___flmul& (0+255),w,b
  9200  001DFE  118D               	iorwf	(??___flmul+1)& (0+255),w,b
  9201  001E00  118E               	iorwf	(??___flmul+2)& (0+255),w,b
  9202  001E02  118F               	iorwf	(??___flmul+3)& (0+255),w,b
  9203  001E04  A4D8               	btfss	status,2,c
  9204  001E06  D002               	goto	u5040
  9205                           
  9206                           ; BSR set to: 0
  9207                           
  9208                           ; BSR set to: 0
  9209  001E08  A197               	btfss	___flmul@prod& (0+255),0,b
  9210  001E0A  D002               	goto	l886
  9211  001E0C                     u5040:
  9212                           
  9213                           ; BSR set to: 0
  9214  001E0C  0E01               	movlw	1
  9215  001E0E  6F91               	movwf	___flmul@aexp& (0+255),b
  9216  001E10                     l886:
  9217                           
  9218                           ; BSR set to: 0
  9219                           
  9220                           ; BSR set to: 0
  9221                           
  9222                           ; BSR set to: 0
  9223  001E10  5191               	movf	___flmul@aexp& (0+255),w,b
  9224  001E12  B4D8               	btfsc	status,2,c
  9225  001E14  D01F               	goto	l888
  9226                           
  9227                           ; BSR set to: 0
  9228  001E16  0E01               	movlw	1
  9229  001E18  2797               	addwf	___flmul@prod& (0+255),f,b
  9230  001E1A  0E00               	movlw	0
  9231  001E1C  2398               	addwfc	(___flmul@prod+1)& (0+255),f,b
  9232  001E1E  2399               	addwfc	(___flmul@prod+2)& (0+255),f,b
  9233  001E20  239A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  001E22  A19A               	btfss	(___flmul@prod+3)& (0+255),0,b
  9237  001E24  D017               	goto	l888
  9238                           
  9239                           ; BSR set to: 0
  9240  001E26  C097  F08C         	movff	___flmul@prod,??___flmul
  9241  001E2A  C098  F08D         	movff	___flmul@prod+1,??___flmul+1
  9242  001E2E  C099  F08E         	movff	___flmul@prod+2,??___flmul+2
  9243  001E32  C09A  F08F         	movff	___flmul@prod+3,??___flmul+3
  9244  001E36  358F               	rlcf	(??___flmul+3)& (0+255),w,b
  9245  001E38  338F               	rrcf	(??___flmul+3)& (0+255),f,b
  9246  001E3A  338E               	rrcf	(??___flmul+2)& (0+255),f,b
  9247  001E3C  338D               	rrcf	(??___flmul+1)& (0+255),f,b
  9248  001E3E  338C               	rrcf	??___flmul& (0+255),f,b
  9249  001E40  C08C  F097         	movff	??___flmul,___flmul@prod
  9250  001E44  C08D  F098         	movff	??___flmul+1,___flmul@prod+1
  9251  001E48  C08E  F099         	movff	??___flmul+2,___flmul@prod+2
  9252  001E4C  C08F  F09A         	movff	??___flmul+3,___flmul@prod+3
  9253                           
  9254                           ; BSR set to: 0
  9255  001E50  4B9B               	infsnz	___flmul@temp& (0+255),f,b
  9256  001E52  2B9C               	incf	(___flmul@temp+1)& (0+255),f,b
  9257  001E54                     l888:
  9258                           
  9259                           ; BSR set to: 0
  9260                           
  9261                           ; BSR set to: 0
  9262                           
  9263                           ; BSR set to: 0
  9264  001E54  BF9C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9265  001E56  D00D               	goto	l889
  9266  001E58  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9267  001E5A  E103               	bnz	u5070
  9268  001E5C  299B               	incf	___flmul@temp& (0+255),w,b
  9269  001E5E  A0D8               	btfss	status,0,c
  9270  001E60  D008               	goto	l889
  9271  001E62                     u5070:
  9272                           
  9273                           ; BSR set to: 0
  9274  001E62  0E00               	movlw	0
  9275  001E64  6F97               	movwf	___flmul@prod& (0+255),b
  9276  001E66  0E00               	movlw	0
  9277  001E68  6F98               	movwf	(___flmul@prod+1)& (0+255),b
  9278  001E6A  0E80               	movlw	128
  9279  001E6C  6F99               	movwf	(___flmul@prod+2)& (0+255),b
  9280  001E6E  0E7F               	movlw	127
  9281  001E70  D020               	goto	L8
  9282  001E72                     l889:
  9283                           
  9284                           ; BSR set to: 0
  9285                           
  9286                           ; BSR set to: 0
  9287  001E72  BF9C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  9288  001E74  D005               	goto	u5080
  9289  001E76  519C               	movf	(___flmul@temp+1)& (0+255),w,b
  9290  001E78  E10E               	bnz	l891
  9291  001E7A  059B               	decf	___flmul@temp& (0+255),w,b
  9292  001E7C  B0D8               	btfsc	status,0,c
  9293  001E7E  D00B               	goto	l891
  9294  001E80                     u5080:
  9295                           
  9296                           ; BSR set to: 0
  9297  001E80  0E00               	movlw	0
  9298  001E82  6F97               	movwf	___flmul@prod& (0+255),b
  9299  001E84  0E00               	movlw	0
  9300  001E86  6F98               	movwf	(___flmul@prod+1)& (0+255),b
  9301  001E88  0E00               	movlw	0
  9302  001E8A  6F99               	movwf	(___flmul@prod+2)& (0+255),b
  9303  001E8C  0E00               	movlw	0
  9304  001E8E  6F9A               	movwf	(___flmul@prod+3)& (0+255),b
  9305  001E90  0E00               	movlw	0
  9306  001E92  6F90               	movwf	___flmul@sign& (0+255),b
  9307  001E94  D00F               	goto	l892
  9308  001E96                     l891:
  9309                           
  9310                           ; BSR set to: 0
  9311  001E96  C09B  F096         	movff	___flmul@temp,___flmul@bexp
  9312                           
  9313                           ; BSR set to: 0
  9314  001E9A  0EFF               	movlw	255
  9315  001E9C  1797               	andwf	___flmul@prod& (0+255),f,b
  9316  001E9E  0EFF               	movlw	255
  9317  001EA0  1798               	andwf	(___flmul@prod+1)& (0+255),f,b
  9318  001EA2  0E7F               	movlw	127
  9319  001EA4  1799               	andwf	(___flmul@prod+2)& (0+255),f,b
  9320  001EA6  0E00               	movlw	0
  9321  001EA8  179A               	andwf	(___flmul@prod+3)& (0+255),f,b
  9322                           
  9323                           ; BSR set to: 0
  9324  001EAA  B196               	btfsc	___flmul@bexp& (0+255),0,b
  9325                           
  9326                           ; BSR set to: 0
  9327  001EAC  8F99               	bsf	(___flmul@prod+2)& (0+255),7,b
  9328                           
  9329                           ; BSR set to: 0
  9330                           
  9331                           ; BSR set to: 0
  9332  001EAE  90D8               	bcf	status,0,c
  9333  001EB0  3196               	rrcf	___flmul@bexp& (0+255),w,b
  9334  001EB2                     L8:
  9335  001EB2  6F9A               	movwf	(___flmul@prod+3)& (0+255),b
  9336  001EB4                     l892:
  9337                           
  9338                           ; BSR set to: 0
  9339                           
  9340                           ; BSR set to: 0
  9341                           
  9342                           ; BSR set to: 0
  9343  001EB4  5190               	movf	___flmul@sign& (0+255),w,b
  9344  001EB6  139A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  9345                           
  9346                           ; BSR set to: 0
  9347  001EB8  C097  F084         	movff	___flmul@prod,?___flmul
  9348  001EBC  C098  F085         	movff	___flmul@prod+1,?___flmul+1
  9349  001EC0  C099  F086         	movff	___flmul@prod+2,?___flmul+2
  9350  001EC4  C09A  F087         	movff	___flmul@prod+3,?___flmul+3
  9351  001EC8  0012               	return	
  9352  001ECA                     __end_of___flmul:
  9353                           	opt stack 0
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           indf0	equ	0xFEF
  9363                           postinc0	equ	0xFEE
  9364                           fsr0h	equ	0xFEA
  9365                           fsr0l	equ	0xFE9
  9366                           wreg	equ	0xFE8
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           fsr2h	equ	0xFDA
  9370                           fsr2l	equ	0xFD9
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function ___fldiv *****************
  9374 ;; Defined at:
  9375 ;;		line 11 in file "/opt/microchip/xc8/v1.45/sources/common/sprcdiv.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;  b               4   45[COMRAM] unsigned char 
  9378 ;;  a               4   49[COMRAM] unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  grs             4    7[BANK0 ] unsigned long 
  9381 ;;  rem             4    1[BANK0 ] unsigned long 
  9382 ;;  new_exp         2    5[BANK0 ] int 
  9383 ;;  aexp            1   12[BANK0 ] unsigned char 
  9384 ;;  bexp            1   11[BANK0 ] unsigned char 
  9385 ;;  sign            1    0[BANK0 ] unsigned char 
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  4   45[COMRAM] unsigned char 
  9388 ;; Registers used:
  9389 ;;		wreg, status,2, status,0
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9395 ;;      Params:         8       0       0       0       0       0       0
  9396 ;;      Locals:         0      13       0       0       0       0       0
  9397 ;;      Temps:          4       0       0       0       0       0       0
  9398 ;;      Totals:        12      13       0       0       0       0       0
  9399 ;;Total ram usage:       25 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    2
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_main
  9406 ;;		_calcula
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text32
  9411  002208                     __ptext32:
  9412                           	opt stack 0
  9413  002208                     ___fldiv:
  9414                           	opt stack 27
  9415                           
  9416                           ; BSR set to: 0
  9417                           ;incstack = 0
  9418  002208  5031               	movf	___fldiv@b+3,w,c
  9419  00220A  0B80               	andlw	128
  9420  00220C  0100               	movlb	0	; () banked
  9421  00220E  6F80               	movwf	___fldiv@sign& (0+255),b
  9422  002210  5031               	movf	___fldiv@b+3,w,c
  9423  002212  2431               	addwf	___fldiv@b+3,w,c
  9424  002214  6F8B               	movwf	___fldiv@bexp& (0+255),b
  9425                           
  9426                           ; BSR set to: 0
  9427  002216  BE30               	btfsc	___fldiv@b+2,7,c
  9428                           
  9429                           ; BSR set to: 0
  9430  002218  818B               	bsf	___fldiv@bexp& (0+255),0,b
  9431                           
  9432                           ; BSR set to: 0
  9433                           
  9434                           ; BSR set to: 0
  9435  00221A  518B               	movf	___fldiv@bexp& (0+255),w,b
  9436  00221C  B4D8               	btfsc	status,2,c
  9437  00221E  D00D               	goto	l834
  9438                           
  9439                           ; BSR set to: 0
  9440  002220  298B               	incf	___fldiv@bexp& (0+255),w,b
  9441  002222  A4D8               	btfss	status,2,c
  9442  002224  D008               	goto	l835
  9443                           
  9444                           ; BSR set to: 0
  9445  002226  0E00               	movlw	0
  9446  002228  6E2E               	movwf	___fldiv@b,c
  9447  00222A  0E00               	movlw	0
  9448  00222C  6E2F               	movwf	___fldiv@b+1,c
  9449  00222E  0E00               	movlw	0
  9450  002230  6E30               	movwf	___fldiv@b+2,c
  9451  002232  0E00               	movlw	0
  9452  002234  6E31               	movwf	___fldiv@b+3,c
  9453  002236                     l835:
  9454                           
  9455                           ; BSR set to: 0
  9456                           
  9457                           ; BSR set to: 0
  9458  002236  8E30               	bsf	___fldiv@b+2,7,c
  9459  002238  D006               	goto	L9
  9460  00223A                     l834:
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  00223A  0E00               	movlw	0
  9466  00223C  6E2E               	movwf	___fldiv@b,c
  9467  00223E  0E00               	movlw	0
  9468  002240  6E2F               	movwf	___fldiv@b+1,c
  9469  002242  0E00               	movlw	0
  9470  002244  6E30               	movwf	___fldiv@b+2,c
  9471  002246                     L9:
  9472  002246  0E00               	movlw	0
  9473  002248  6E31               	movwf	___fldiv@b+3,c
  9474                           
  9475                           ; BSR set to: 0
  9476                           
  9477                           ; BSR set to: 0
  9478  00224A  5035               	movf	___fldiv@a+3,w,c
  9479  00224C  0B80               	andlw	128
  9480  00224E  1B80               	xorwf	___fldiv@sign& (0+255),f,b
  9481                           
  9482                           ; BSR set to: 0
  9483  002250  5035               	movf	___fldiv@a+3,w,c
  9484  002252  2435               	addwf	___fldiv@a+3,w,c
  9485  002254  6F8C               	movwf	___fldiv@aexp& (0+255),b
  9486                           
  9487                           ; BSR set to: 0
  9488  002256  BE34               	btfsc	___fldiv@a+2,7,c
  9489                           
  9490                           ; BSR set to: 0
  9491  002258  818C               	bsf	___fldiv@aexp& (0+255),0,b
  9492                           
  9493                           ; BSR set to: 0
  9494                           
  9495                           ; BSR set to: 0
  9496  00225A  518C               	movf	___fldiv@aexp& (0+255),w,b
  9497  00225C  B4D8               	btfsc	status,2,c
  9498  00225E  D00D               	goto	l838
  9499                           
  9500                           ; BSR set to: 0
  9501  002260  298C               	incf	___fldiv@aexp& (0+255),w,b
  9502  002262  A4D8               	btfss	status,2,c
  9503  002264  D008               	goto	l839
  9504                           
  9505                           ; BSR set to: 0
  9506  002266  0E00               	movlw	0
  9507  002268  6E32               	movwf	___fldiv@a,c
  9508  00226A  0E00               	movlw	0
  9509  00226C  6E33               	movwf	___fldiv@a+1,c
  9510  00226E  0E00               	movlw	0
  9511  002270  6E34               	movwf	___fldiv@a+2,c
  9512  002272  0E00               	movlw	0
  9513  002274  6E35               	movwf	___fldiv@a+3,c
  9514  002276                     l839:
  9515                           
  9516                           ; BSR set to: 0
  9517                           
  9518                           ; BSR set to: 0
  9519  002276  8E34               	bsf	___fldiv@a+2,7,c
  9520  002278  D006               	goto	L10
  9521  00227A                     l838:
  9522                           
  9523                           ; BSR set to: 0
  9524                           
  9525                           ; BSR set to: 0
  9526  00227A  0E00               	movlw	0
  9527  00227C  6E32               	movwf	___fldiv@a,c
  9528  00227E  0E00               	movlw	0
  9529  002280  6E33               	movwf	___fldiv@a+1,c
  9530  002282  0E00               	movlw	0
  9531  002284  6E34               	movwf	___fldiv@a+2,c
  9532  002286                     L10:
  9533  002286  0E00               	movlw	0
  9534  002288  6E35               	movwf	___fldiv@a+3,c
  9535                           
  9536                           ; BSR set to: 0
  9537                           
  9538                           ; BSR set to: 0
  9539  00228A  5032               	movf	___fldiv@a,w,c
  9540  00228C  1033               	iorwf	___fldiv@a+1,w,c
  9541  00228E  1034               	iorwf	___fldiv@a+2,w,c
  9542  002290  1035               	iorwf	___fldiv@a+3,w,c
  9543  002292  A4D8               	btfss	status,2,c
  9544  002294  D015               	goto	l841
  9545                           
  9546                           ; BSR set to: 0
  9547  002296  0E00               	movlw	0
  9548  002298  6E2E               	movwf	___fldiv@b,c
  9549  00229A  0E00               	movlw	0
  9550  00229C  6E2F               	movwf	___fldiv@b+1,c
  9551  00229E  0E00               	movlw	0
  9552  0022A0  6E30               	movwf	___fldiv@b+2,c
  9553  0022A2  0E00               	movlw	0
  9554  0022A4  6E31               	movwf	___fldiv@b+3,c
  9555                           
  9556                           ; BSR set to: 0
  9557  0022A6  0E80               	movlw	128
  9558  0022A8  1230               	iorwf	___fldiv@b+2,f,c
  9559  0022AA  0E7F               	movlw	127
  9560  0022AC  1231               	iorwf	___fldiv@b+3,f,c
  9561                           
  9562                           ; BSR set to: 0
  9563  0022AE  C02E  F02E         	movff	___fldiv@b,?___fldiv
  9564  0022B2  C02F  F02F         	movff	___fldiv@b+1,?___fldiv+1
  9565  0022B6  C030  F030         	movff	___fldiv@b+2,?___fldiv+2
  9566  0022BA  C031  F031         	movff	___fldiv@b+3,?___fldiv+3
  9567                           
  9568                           ; BSR set to: 0
  9569  0022BE  0012               	return	
  9570  0022C0                     l841:
  9571                           
  9572                           ; BSR set to: 0
  9573                           
  9574                           ; BSR set to: 0
  9575  0022C0  518B               	movf	___fldiv@bexp& (0+255),w,b
  9576  0022C2  A4D8               	btfss	status,2,c
  9577  0022C4  D011               	goto	l843
  9578                           
  9579                           ; BSR set to: 0
  9580  0022C6  0E00               	movlw	0
  9581  0022C8  6E2E               	movwf	___fldiv@b,c
  9582  0022CA  0E00               	movlw	0
  9583  0022CC  6E2F               	movwf	___fldiv@b+1,c
  9584  0022CE  0E00               	movlw	0
  9585  0022D0  6E30               	movwf	___fldiv@b+2,c
  9586  0022D2  0E00               	movlw	0
  9587  0022D4  6E31               	movwf	___fldiv@b+3,c
  9588                           
  9589                           ; BSR set to: 0
  9590  0022D6  C02E  F02E         	movff	___fldiv@b,?___fldiv
  9591  0022DA  C02F  F02F         	movff	___fldiv@b+1,?___fldiv+1
  9592  0022DE  C030  F030         	movff	___fldiv@b+2,?___fldiv+2
  9593  0022E2  C031  F031         	movff	___fldiv@b+3,?___fldiv+3
  9594                           
  9595                           ; BSR set to: 0
  9596  0022E6  0012               	return	
  9597  0022E8                     l843:
  9598                           
  9599                           ; BSR set to: 0
  9600                           
  9601                           ; BSR set to: 0
  9602  0022E8  518C               	movf	___fldiv@aexp& (0+255),w,b
  9603  0022EA  6E36               	movwf	??___fldiv& (0+255),c
  9604  0022EC  6A37               	clrf	(??___fldiv+1)& (0+255),c
  9605  0022EE  1E36               	comf	??___fldiv,f,c
  9606  0022F0  1E37               	comf	??___fldiv+1,f,c
  9607  0022F2  4A36               	infsnz	??___fldiv,f,c
  9608  0022F4  2A37               	incf	??___fldiv+1,f,c
  9609  0022F6  518B               	movf	___fldiv@bexp& (0+255),w,b
  9610  0022F8  6E38               	movwf	(??___fldiv+2)& (0+255),c
  9611  0022FA  6A39               	clrf	(??___fldiv+3)& (0+255),c
  9612  0022FC  5036               	movf	??___fldiv,w,c
  9613  0022FE  2638               	addwf	??___fldiv+2,f,c
  9614  002300  5037               	movf	??___fldiv+1,w,c
  9615  002302  2239               	addwfc	??___fldiv+3,f,c
  9616  002304  0E7F               	movlw	127
  9617  002306  2438               	addwf	??___fldiv+2,w,c
  9618  002308  6F85               	movwf	___fldiv@new_exp& (0+255),b
  9619  00230A  0E00               	movlw	0
  9620  00230C  2039               	addwfc	??___fldiv+3,w,c
  9621  00230E  6F86               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9622                           
  9623                           ; BSR set to: 0
  9624  002310  C02E  F081         	movff	___fldiv@b,___fldiv@rem
  9625  002314  C02F  F082         	movff	___fldiv@b+1,___fldiv@rem+1
  9626  002318  C030  F083         	movff	___fldiv@b+2,___fldiv@rem+2
  9627  00231C  C031  F084         	movff	___fldiv@b+3,___fldiv@rem+3
  9628                           
  9629                           ; BSR set to: 0
  9630  002320  0E00               	movlw	0
  9631  002322  6E2E               	movwf	___fldiv@b,c
  9632  002324  0E00               	movlw	0
  9633  002326  6E2F               	movwf	___fldiv@b+1,c
  9634  002328  0E00               	movlw	0
  9635  00232A  6E30               	movwf	___fldiv@b+2,c
  9636  00232C  0E00               	movlw	0
  9637  00232E  6E31               	movwf	___fldiv@b+3,c
  9638                           
  9639                           ; BSR set to: 0
  9640  002330  0E00               	movlw	0
  9641  002332  6F87               	movwf	___fldiv@grs& (0+255),b
  9642  002334  0E00               	movlw	0
  9643  002336  6F88               	movwf	(___fldiv@grs+1)& (0+255),b
  9644  002338  0E00               	movlw	0
  9645  00233A  6F89               	movwf	(___fldiv@grs+2)& (0+255),b
  9646  00233C  0E00               	movlw	0
  9647  00233E  6F8A               	movwf	(___fldiv@grs+3)& (0+255),b
  9648                           
  9649                           ; BSR set to: 0
  9650  002340  0E00               	movlw	0
  9651  002342  6F8C               	movwf	___fldiv@aexp& (0+255),b
  9652  002344  D028               	goto	l844
  9653  002346                     
  9654                           ; BSR set to: 0
  9655                           
  9656                           ; BSR set to: 0
  9657  002346  518C               	movf	___fldiv@aexp& (0+255),w,b
  9658  002348  B4D8               	btfsc	status,2,c
  9659  00234A  D011               	goto	l846
  9660                           
  9661                           ; BSR set to: 0
  9662  00234C  90D8               	bcf	status,0,c
  9663  00234E  3781               	rlcf	___fldiv@rem& (0+255),f,b
  9664  002350  3782               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  9665  002352  3783               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  9666  002354  3784               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  9667  002356  90D8               	bcf	status,0,c
  9668  002358  362E               	rlcf	___fldiv@b,f,c
  9669  00235A  362F               	rlcf	___fldiv@b+1,f,c
  9670  00235C  3630               	rlcf	___fldiv@b+2,f,c
  9671  00235E  3631               	rlcf	___fldiv@b+3,f,c
  9672                           
  9673                           ; BSR set to: 0
  9674  002360  BF8A               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9675                           
  9676                           ; BSR set to: 0
  9677  002362  802E               	bsf	___fldiv@b,0,c
  9678                           
  9679                           ; BSR set to: 0
  9680  002364  90D8               	bcf	status,0,c
  9681  002366  3787               	rlcf	___fldiv@grs& (0+255),f,b
  9682  002368  3788               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9683  00236A  3789               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9684  00236C  378A               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9685  00236E                     l846:
  9686                           
  9687                           ; BSR set to: 0
  9688                           
  9689                           ; BSR set to: 0
  9690  00236E  5032               	movf	___fldiv@a,w,c
  9691  002370  5D81               	subwf	___fldiv@rem& (0+255),w,b
  9692  002372  5033               	movf	___fldiv@a+1,w,c
  9693  002374  5982               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  9694  002376  5034               	movf	___fldiv@a+2,w,c
  9695  002378  5983               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  9696  00237A  5035               	movf	___fldiv@a+3,w,c
  9697  00237C  5984               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  9698  00237E  A0D8               	btfss	status,0,c
  9699  002380  D009               	goto	l848
  9700                           
  9701                           ; BSR set to: 0
  9702  002382  8D8A               	bsf	(___fldiv@grs+3)& (0+255),6,b
  9703                           
  9704                           ; BSR set to: 0
  9705  002384  5032               	movf	___fldiv@a,w,c
  9706  002386  5F81               	subwf	___fldiv@rem& (0+255),f,b
  9707  002388  5033               	movf	___fldiv@a+1,w,c
  9708  00238A  5B82               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  9709  00238C  5034               	movf	___fldiv@a+2,w,c
  9710  00238E  5B83               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  9711  002390  5035               	movf	___fldiv@a+3,w,c
  9712  002392  5B84               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  9713  002394                     l848:
  9714                           
  9715                           ; BSR set to: 0
  9716                           
  9717                           ; BSR set to: 0
  9718  002394  2B8C               	incf	___fldiv@aexp& (0+255),f,b
  9719  002396                     l844:
  9720                           
  9721                           ; BSR set to: 0
  9722  002396  0E19               	movlw	25
  9723  002398  658C               	cpfsgt	___fldiv@aexp& (0+255),b
  9724  00239A  D7D5               	goto	l845
  9725                           
  9726                           ; BSR set to: 0
  9727                           
  9728                           ; BSR set to: 0
  9729  00239C  5181               	movf	___fldiv@rem& (0+255),w,b
  9730  00239E  1182               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  9731  0023A0  1183               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  9732  0023A2  1184               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  9733  0023A4  B4D8               	btfsc	status,2,c
  9734  0023A6  D011               	goto	l851
  9735                           
  9736                           ; BSR set to: 0
  9737  0023A8  8187               	bsf	___fldiv@grs& (0+255),0,b
  9738                           
  9739                           ; BSR set to: 0
  9740  0023AA  D00F               	goto	l851
  9741  0023AC                     
  9742                           ; BSR set to: 0
  9743                           
  9744                           ; BSR set to: 0
  9745  0023AC  90D8               	bcf	status,0,c
  9746  0023AE  362E               	rlcf	___fldiv@b,f,c
  9747  0023B0  362F               	rlcf	___fldiv@b+1,f,c
  9748  0023B2  3630               	rlcf	___fldiv@b+2,f,c
  9749  0023B4  3631               	rlcf	___fldiv@b+3,f,c
  9750                           
  9751                           ; BSR set to: 0
  9752  0023B6  BF8A               	btfsc	(___fldiv@grs+3)& (0+255),7,b
  9753                           
  9754                           ; BSR set to: 0
  9755  0023B8  802E               	bsf	___fldiv@b,0,c
  9756                           
  9757                           ; BSR set to: 0
  9758  0023BA  90D8               	bcf	status,0,c
  9759  0023BC  3787               	rlcf	___fldiv@grs& (0+255),f,b
  9760  0023BE  3788               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  9761  0023C0  3789               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  9762  0023C2  378A               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  9763  0023C4  0785               	decf	___fldiv@new_exp& (0+255),f,b
  9764  0023C6  A0D8               	btfss	status,0,c
  9765  0023C8  0786               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  9766  0023CA                     l851:
  9767                           
  9768                           ; BSR set to: 0
  9769                           
  9770                           ; BSR set to: 0
  9771  0023CA  AE30               	btfss	___fldiv@b+2,7,c
  9772  0023CC  D7EF               	goto	l852
  9773                           
  9774                           ; BSR set to: 0
  9775                           
  9776                           ; BSR set to: 0
  9777  0023CE  0E00               	movlw	0
  9778  0023D0  6F8C               	movwf	___fldiv@aexp& (0+255),b
  9779                           
  9780                           ; BSR set to: 0
  9781  0023D2  AF8A               	btfss	(___fldiv@grs+3)& (0+255),7,b
  9782  0023D4  D016               	goto	l858
  9783                           
  9784                           ; BSR set to: 0
  9785  0023D6  0EFF               	movlw	255
  9786  0023D8  1587               	andwf	___fldiv@grs& (0+255),w,b
  9787  0023DA  6E36               	movwf	??___fldiv& (0+255),c
  9788  0023DC  0EFF               	movlw	255
  9789  0023DE  1588               	andwf	(___fldiv@grs+1)& (0+255),w,b
  9790  0023E0  6E37               	movwf	(??___fldiv+1)& (0+255),c
  9791  0023E2  0EFF               	movlw	255
  9792  0023E4  1589               	andwf	(___fldiv@grs+2)& (0+255),w,b
  9793  0023E6  6E38               	movwf	(??___fldiv+2)& (0+255),c
  9794  0023E8  0E7F               	movlw	127
  9795  0023EA  158A               	andwf	(___fldiv@grs+3)& (0+255),w,b
  9796  0023EC  6E39               	movwf	(??___fldiv+3)& (0+255),c
  9797  0023EE  5036               	movf	??___fldiv,w,c
  9798  0023F0  1037               	iorwf	??___fldiv+1,w,c
  9799  0023F2  1038               	iorwf	??___fldiv+2,w,c
  9800  0023F4  1039               	iorwf	??___fldiv+3,w,c
  9801  0023F6  A4D8               	btfss	status,2,c
  9802  0023F8  D002               	goto	u5640
  9803                           
  9804                           ; BSR set to: 0
  9805                           
  9806                           ; BSR set to: 0
  9807  0023FA  A02E               	btfss	___fldiv@b,0,c
  9808  0023FC  D002               	goto	l858
  9809  0023FE                     u5640:
  9810                           
  9811                           ; BSR set to: 0
  9812  0023FE  0E01               	movlw	1
  9813  002400  6F8C               	movwf	___fldiv@aexp& (0+255),b
  9814  002402                     l858:
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819                           
  9820                           ; BSR set to: 0
  9821  002402  518C               	movf	___fldiv@aexp& (0+255),w,b
  9822  002404  B4D8               	btfsc	status,2,c
  9823  002406  D01F               	goto	l860
  9824                           
  9825                           ; BSR set to: 0
  9826  002408  0E01               	movlw	1
  9827  00240A  262E               	addwf	___fldiv@b,f,c
  9828  00240C  0E00               	movlw	0
  9829  00240E  222F               	addwfc	___fldiv@b+1,f,c
  9830  002410  2230               	addwfc	___fldiv@b+2,f,c
  9831  002412  2231               	addwfc	___fldiv@b+3,f,c
  9832                           
  9833                           ; BSR set to: 0
  9834  002414  A031               	btfss	___fldiv@b+3,0,c
  9835  002416  D017               	goto	l860
  9836                           
  9837                           ; BSR set to: 0
  9838  002418  C02E  F036         	movff	___fldiv@b,??___fldiv
  9839  00241C  C02F  F037         	movff	___fldiv@b+1,??___fldiv+1
  9840  002420  C030  F038         	movff	___fldiv@b+2,??___fldiv+2
  9841  002424  C031  F039         	movff	___fldiv@b+3,??___fldiv+3
  9842  002428  3439               	rlcf	??___fldiv+3,w,c
  9843  00242A  3239               	rrcf	??___fldiv+3,f,c
  9844  00242C  3238               	rrcf	??___fldiv+2,f,c
  9845  00242E  3237               	rrcf	??___fldiv+1,f,c
  9846  002430  3236               	rrcf	??___fldiv,f,c
  9847  002432  C036  F02E         	movff	??___fldiv,___fldiv@b
  9848  002436  C037  F02F         	movff	??___fldiv+1,___fldiv@b+1
  9849  00243A  C038  F030         	movff	??___fldiv+2,___fldiv@b+2
  9850  00243E  C039  F031         	movff	??___fldiv+3,___fldiv@b+3
  9851                           
  9852                           ; BSR set to: 0
  9853  002442  4B85               	infsnz	___fldiv@new_exp& (0+255),f,b
  9854  002444  2B86               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  9855  002446                     l860:
  9856                           
  9857                           ; BSR set to: 0
  9858                           
  9859                           ; BSR set to: 0
  9860                           
  9861                           ; BSR set to: 0
  9862  002446  BF86               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9863  002448  D010               	goto	l861
  9864  00244A  5186               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9865  00244C  E103               	bnz	u5670
  9866  00244E  2985               	incf	___fldiv@new_exp& (0+255),w,b
  9867  002450  A0D8               	btfss	status,0,c
  9868  002452  D00B               	goto	l861
  9869  002454                     u5670:
  9870                           
  9871                           ; BSR set to: 0
  9872  002454  0E00               	movlw	0
  9873  002456  6F86               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9874  002458  6985               	setf	___fldiv@new_exp& (0+255),b
  9875  00245A  0E00               	movlw	0
  9876  00245C  6E2E               	movwf	___fldiv@b,c
  9877  00245E  0E00               	movlw	0
  9878  002460  6E2F               	movwf	___fldiv@b+1,c
  9879  002462  0E00               	movlw	0
  9880  002464  6E30               	movwf	___fldiv@b+2,c
  9881  002466  0E00               	movlw	0
  9882  002468  6E31               	movwf	___fldiv@b+3,c
  9883  00246A                     l861:
  9884                           
  9885                           ; BSR set to: 0
  9886                           
  9887                           ; BSR set to: 0
  9888  00246A  BF86               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  9889  00246C  D005               	goto	u5680
  9890  00246E  5186               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  9891  002470  E111               	bnz	l5002
  9892  002472  0585               	decf	___fldiv@new_exp& (0+255),w,b
  9893  002474  B0D8               	btfsc	status,0,c
  9894  002476  D00E               	goto	l862
  9895  002478                     u5680:
  9896                           
  9897                           ; BSR set to: 0
  9898  002478  0E00               	movlw	0
  9899  00247A  6F86               	movwf	(___fldiv@new_exp+1)& (0+255),b
  9900  00247C  0E00               	movlw	0
  9901  00247E  6F85               	movwf	___fldiv@new_exp& (0+255),b
  9902  002480  0E00               	movlw	0
  9903  002482  6E2E               	movwf	___fldiv@b,c
  9904  002484  0E00               	movlw	0
  9905  002486  6E2F               	movwf	___fldiv@b+1,c
  9906  002488  0E00               	movlw	0
  9907  00248A  6E30               	movwf	___fldiv@b+2,c
  9908  00248C  0E00               	movlw	0
  9909  00248E  6E31               	movwf	___fldiv@b+3,c
  9910  002490  0E00               	movlw	0
  9911  002492  6F80               	movwf	___fldiv@sign& (0+255),b
  9912  002494                     l862:
  9913  002494                     l5002:
  9914                           
  9915                           ; BSR set to: 0
  9916  002494  C085  F08B         	movff	___fldiv@new_exp,___fldiv@bexp
  9917                           
  9918                           ; BSR set to: 0
  9919  002498  A18B               	btfss	___fldiv@bexp& (0+255),0,b
  9920  00249A  D002               	goto	l863
  9921                           
  9922                           ; BSR set to: 0
  9923  00249C  8E30               	bsf	___fldiv@b+2,7,c
  9924  00249E  D001               	goto	l864
  9925  0024A0                     l863:
  9926                           
  9927                           ; BSR set to: 0
  9928                           
  9929                           ; BSR set to: 0
  9930  0024A0  9E30               	bcf	___fldiv@b+2,7,c
  9931  0024A2                     l864:
  9932                           
  9933                           ; BSR set to: 0
  9934                           
  9935                           ; BSR set to: 0
  9936  0024A2  90D8               	bcf	status,0,c
  9937  0024A4  318B               	rrcf	___fldiv@bexp& (0+255),w,b
  9938  0024A6  6E31               	movwf	___fldiv@b+3,c
  9939                           
  9940                           ; BSR set to: 0
  9941  0024A8  5180               	movf	___fldiv@sign& (0+255),w,b
  9942  0024AA  1231               	iorwf	___fldiv@b+3,f,c
  9943                           
  9944                           ; BSR set to: 0
  9945  0024AC  C02E  F02E         	movff	___fldiv@b,?___fldiv
  9946  0024B0  C02F  F02F         	movff	___fldiv@b+1,?___fldiv+1
  9947  0024B4  C030  F030         	movff	___fldiv@b+2,?___fldiv+2
  9948  0024B8  C031  F031         	movff	___fldiv@b+3,?___fldiv+3
  9949  0024BC  0012               	return	
  9950  0024BE                     __end_of___fldiv:
  9951                           	opt stack 0
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           intcon2	equ	0xFF1
  9960                           indf0	equ	0xFEF
  9961                           postinc0	equ	0xFEE
  9962                           fsr0h	equ	0xFEA
  9963                           fsr0l	equ	0xFE9
  9964                           wreg	equ	0xFE8
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function _low_isr *****************
  9972 ;; Defined at:
  9973 ;;		line 74 in file "color_2.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;		None
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;		None
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  1    wreg      void 
  9980 ;; Registers used:
  9981 ;;		wreg, status,2, status,0
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9987 ;;      Params:         0       0       0       0       0       0       0
  9988 ;;      Locals:         0       0       0       0       0       0       0
  9989 ;;      Temps:         21       0       0       0       0       0       0
  9990 ;;      Totals:        21       0       0       0       0       0       0
  9991 ;;Total ram usage:       21 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    1
  9994 ;; This function calls:
  9995 ;;		Nothing
  9996 ;; This function is called by:
  9997 ;;		Interrupt level 1
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           	psect	intcodelo
 10002  000018                     __pintcodelo:
 10003                           	opt stack 0
 10004  000018                     _low_isr:
 10005                           	opt stack 25
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;incstack = 0
 10009  000018  8052               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10010  00001A  CFD8 F019          	movff	status,??_low_isr
 10011  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
 10012  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
 10013  000026  CFFA F01C          	movff	pclath,??_low_isr+3
 10014  00002A  CFFB F01D          	movff	pclatu,??_low_isr+4
 10015  00002E  CFE9 F01E          	movff	fsr0l,??_low_isr+5
 10016  000032  CFEA F01F          	movff	fsr0h,??_low_isr+6
 10017  000036  CFE1 F020          	movff	fsr1l,??_low_isr+7
 10018  00003A  CFE2 F021          	movff	fsr1h,??_low_isr+8
 10019  00003E  CFD9 F022          	movff	fsr2l,??_low_isr+9
 10020  000042  CFDA F023          	movff	fsr2h,??_low_isr+10
 10021  000046  CFF3 F024          	movff	prodl,??_low_isr+11
 10022  00004A  CFF4 F025          	movff	prodh,??_low_isr+12
 10023  00004E  CFF6 F026          	movff	tblptrl,??_low_isr+13
 10024  000052  CFF7 F027          	movff	tblptrh,??_low_isr+14
 10025  000056  CFF8 F028          	movff	tblptru,??_low_isr+15
 10026  00005A  CFF5 F029          	movff	tablat,??_low_isr+16
 10027  00005E  C052  F02A         	movff	btemp,??_low_isr+17
 10028  000062  C053  F02B         	movff	btemp+1,??_low_isr+18
 10029  000066  C054  F02C         	movff	btemp+2,??_low_isr+19
 10030  00006A  C055  F02D         	movff	btemp+3,??_low_isr+20
 10031                           
 10032                           ;color_2.c: 76: if(TMR1IF == 1)
 10033  00006E  A09E               	btfss	3998,0,c	;volatile
 10034  000070  D007               	goto	i1l2368
 10035                           
 10036                           ;color_2.c: 77: {
 10037                           ;color_2.c: 78: overflowCount++;
 10038  000072  0E01               	movlw	1
 10039  000074  2643               	addwf	_overflowCount,f,c	;volatile
 10040  000076  0E00               	movlw	0
 10041  000078  2244               	addwfc	_overflowCount+1,f,c	;volatile
 10042  00007A  2245               	addwfc	_overflowCount+2,f,c	;volatile
 10043  00007C  2246               	addwfc	_overflowCount+3,f,c	;volatile
 10044                           
 10045                           ;color_2.c: 79: TMR1IF =0;
 10046  00007E  909E               	bcf	3998,0,c	;volatile
 10047  000080                     i1l2368:
 10048                           
 10049                           ;color_2.c: 80: return;
 10050  000080  C02D  F055         	movff	??_low_isr+20,btemp+3
 10051  000084  C02C  F054         	movff	??_low_isr+19,btemp+2
 10052  000088  C02B  F053         	movff	??_low_isr+18,btemp+1
 10053  00008C  C02A  F052         	movff	??_low_isr+17,btemp
 10054  000090  C029  FFF5         	movff	??_low_isr+16,tablat
 10055  000094  C028  FFF8         	movff	??_low_isr+15,tblptru
 10056  000098  C027  FFF7         	movff	??_low_isr+14,tblptrh
 10057  00009C  C026  FFF6         	movff	??_low_isr+13,tblptrl
 10058  0000A0  C025  FFF4         	movff	??_low_isr+12,prodh
 10059  0000A4  C024  FFF3         	movff	??_low_isr+11,prodl
 10060  0000A8  C023  FFDA         	movff	??_low_isr+10,fsr2h
 10061  0000AC  C022  FFD9         	movff	??_low_isr+9,fsr2l
 10062  0000B0  C021  FFE2         	movff	??_low_isr+8,fsr1h
 10063  0000B4  C020  FFE1         	movff	??_low_isr+7,fsr1l
 10064  0000B8  C01F  FFEA         	movff	??_low_isr+6,fsr0h
 10065  0000BC  C01E  FFE9         	movff	??_low_isr+5,fsr0l
 10066  0000C0  C01D  FFFB         	movff	??_low_isr+4,pclatu
 10067  0000C4  C01C  FFFA         	movff	??_low_isr+3,pclath
 10068  0000C8  C01B  FFE0         	movff	??_low_isr+2,bsr
 10069  0000CC  C01A  FFE8         	movff	??_low_isr+1,wreg
 10070  0000D0  C019  FFD8         	movff	??_low_isr,status
 10071  0000D4  9052               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10072  0000D6  0010               	retfie	
 10073  0000D8                     __end_of_low_isr:
 10074                           	opt stack 0
 10075                           pclatu	equ	0xFFB
 10076                           pclath	equ	0xFFA
 10077                           tblptru	equ	0xFF8
 10078                           tblptrh	equ	0xFF7
 10079                           tblptrl	equ	0xFF6
 10080                           tablat	equ	0xFF5
 10081                           prodh	equ	0xFF4
 10082                           prodl	equ	0xFF3
 10083                           intcon	equ	0xFF2
 10084                           intcon2	equ	0xFF1
 10085                           indf0	equ	0xFEF
 10086                           postinc0	equ	0xFEE
 10087                           fsr0h	equ	0xFEA
 10088                           fsr0l	equ	0xFE9
 10089                           wreg	equ	0xFE8
 10090                           fsr1h	equ	0xFE2
 10091                           fsr1l	equ	0xFE1
 10092                           bsr	equ	0xFE0
 10093                           indf2	equ	0xFDF
 10094                           postinc2	equ	0xFDE
 10095                           fsr2h	equ	0xFDA
 10096                           fsr2l	equ	0xFD9
 10097                           status	equ	0xFD8
 10098                           
 10099 ;; *************** function _high_isr *****************
 10100 ;; Defined at:
 10101 ;;		line 84 in file "color_2.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  counter         2   22[COMRAM] unsigned int 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10115 ;;      Params:         0       0       0       0       0       0       0
 10116 ;;      Locals:         2       0       0       0       0       0       0
 10117 ;;      Temps:         22       0       0       0       0       0       0
 10118 ;;      Totals:        24       0       0       0       0       0       0
 10119 ;;Total ram usage:       24 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; This function calls:
 10122 ;;		Nothing
 10123 ;; This function is called by:
 10124 ;;		Interrupt level 2
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           	psect	intcode
 10129  000008                     __pintcode:
 10130                           	opt stack 0
 10131  000008                     _high_isr:
 10132                           	opt stack 25
 10133                           
 10134                           ;incstack = 0
 10135  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10136  00000A  ED83  F015         	call	int_func,f	;refresh shadow registers
 10137                           pclatu	equ	0xFFB
 10138                           pclath	equ	0xFFA
 10139                           tblptru	equ	0xFF8
 10140                           tblptrh	equ	0xFF7
 10141                           tblptrl	equ	0xFF6
 10142                           tablat	equ	0xFF5
 10143                           prodh	equ	0xFF4
 10144                           prodl	equ	0xFF3
 10145                           intcon	equ	0xFF2
 10146                           intcon2	equ	0xFF1
 10147                           indf0	equ	0xFEF
 10148                           postinc0	equ	0xFEE
 10149                           fsr0h	equ	0xFEA
 10150                           fsr0l	equ	0xFE9
 10151                           wreg	equ	0xFE8
 10152                           fsr1h	equ	0xFE2
 10153                           fsr1l	equ	0xFE1
 10154                           bsr	equ	0xFE0
 10155                           indf2	equ	0xFDF
 10156                           postinc2	equ	0xFDE
 10157                           fsr2h	equ	0xFDA
 10158                           fsr2l	equ	0xFD9
 10159                           status	equ	0xFD8
 10160                           
 10161                           	psect	intcode_body
 10162  002B06                     __pintcode_body:
 10163                           	opt stack 25
 10164  002B06                     int_func:
 10165                           	opt stack 25
 10166  002B06  0006               	pop		; remove dummy address from shadow register refresh
 10167  002B08  CFFA F005          	movff	pclath,??_high_isr+4
 10168  002B0C  CFFB F006          	movff	pclatu,??_high_isr+5
 10169  002B10  CFE9 F007          	movff	fsr0l,??_high_isr+6
 10170  002B14  CFEA F008          	movff	fsr0h,??_high_isr+7
 10171  002B18  CFE1 F009          	movff	fsr1l,??_high_isr+8
 10172  002B1C  CFE2 F00A          	movff	fsr1h,??_high_isr+9
 10173  002B20  CFD9 F00B          	movff	fsr2l,??_high_isr+10
 10174  002B24  CFDA F00C          	movff	fsr2h,??_high_isr+11
 10175  002B28  CFF3 F00D          	movff	prodl,??_high_isr+12
 10176  002B2C  CFF4 F00E          	movff	prodh,??_high_isr+13
 10177  002B30  CFF6 F00F          	movff	tblptrl,??_high_isr+14
 10178  002B34  CFF7 F010          	movff	tblptrh,??_high_isr+15
 10179  002B38  CFF8 F011          	movff	tblptru,??_high_isr+16
 10180  002B3C  CFF5 F012          	movff	tablat,??_high_isr+17
 10181  002B40  C052  F013         	movff	btemp,??_high_isr+18
 10182  002B44  C053  F014         	movff	btemp+1,??_high_isr+19
 10183  002B48  C054  F015         	movff	btemp+2,??_high_isr+20
 10184  002B4C  C055  F016         	movff	btemp+3,??_high_isr+21
 10185                           
 10186                           ;color_2.c: 87: if(INT0IF == 1)
 10187  002B50  A2F2               	btfss	intcon,1,c	;volatile
 10188  002B52  D044               	goto	i2l2394
 10189                           
 10190                           ;color_2.c: 88: {
 10191                           ;color_2.c: 89: unsigned int counter = TMR1;
 10192  002B54  CFCE F017          	movff	4046,high_isr@counter	;volatile
 10193  002B58  CFCF F018          	movff	4047,high_isr@counter+1	;volatile
 10194                           
 10195                           ;color_2.c: 92: if (triggered)
 10196  002B5C  5047               	movf	_triggered,w,c	;volatile
 10197  002B5E  A4D8               	btfss	status,2,c
 10198  002B60  D03C               	goto	i2l2392
 10199                           
 10200                           ;color_2.c: 96: }
 10201                           ;color_2.c: 98: if (first)
 10202                           
 10203                           ;color_2.c: 95: return;
 10204                           
 10205                           ;color_2.c: 93: {
 10206                           ;color_2.c: 94: INT0IF = 0;
 10207  002B62  5048               	movf	_first,w,c	;volatile
 10208  002B64  B4D8               	btfsc	status,2,c
 10209  002B66  D01D               	goto	i2l145
 10210                           
 10211                           ;color_2.c: 99: {
 10212                           ;color_2.c: 100: startTime = (overflowCount << 16) + counter;
 10213  002B68  C043  F001         	movff	_overflowCount,??_high_isr	;volatile
 10214  002B6C  C044  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10215  002B70  C045  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10216  002B74  C046  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10217  002B78  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10218  002B7C  C001  F003         	movff	??_high_isr,??_high_isr+2
 10219  002B80  6A02               	clrf	??_high_isr+1,c
 10220  002B82  6A01               	clrf	??_high_isr,c
 10221  002B84  5017               	movf	high_isr@counter,w,c
 10222  002B86  2401               	addwf	??_high_isr,w,c
 10223  002B88  6E3F               	movwf	_startTime,c	;volatile
 10224  002B8A  5018               	movf	high_isr@counter+1,w,c
 10225  002B8C  2002               	addwfc	??_high_isr+1,w,c
 10226  002B8E  6E40               	movwf	_startTime+1,c	;volatile
 10227  002B90  0E00               	movlw	0
 10228  002B92  2003               	addwfc	??_high_isr+2,w,c
 10229  002B94  6E41               	movwf	_startTime+2,c	;volatile
 10230  002B96  0E00               	movlw	0
 10231  002B98  2004               	addwfc	??_high_isr+3,w,c
 10232  002B9A  6E42               	movwf	_startTime+3,c	;volatile
 10233                           
 10234                           ;color_2.c: 101: first = false;
 10235  002B9C  0E00               	movlw	0
 10236  002B9E  6E48               	movwf	_first,c	;volatile
 10237  002BA0  D01C               	goto	i2l2392
 10238  002BA2                     i2l145:
 10239                           
 10240                           ;color_2.c: 104: }
 10241                           ;color_2.c: 106: finishTime = (overflowCount << 16) + counter;
 10242  002BA2  C043  F001         	movff	_overflowCount,??_high_isr	;volatile
 10243  002BA6  C044  F002         	movff	_overflowCount+1,??_high_isr+1	;volatile
 10244  002BAA  C045  F003         	movff	_overflowCount+2,??_high_isr+2	;volatile
 10245  002BAE  C046  F004         	movff	_overflowCount+3,??_high_isr+3	;volatile
 10246  002BB2  C002  F004         	movff	??_high_isr+1,??_high_isr+3
 10247  002BB6  C001  F003         	movff	??_high_isr,??_high_isr+2
 10248  002BBA  6A02               	clrf	??_high_isr+1,c
 10249  002BBC  6A01               	clrf	??_high_isr,c
 10250  002BBE  5017               	movf	high_isr@counter,w,c
 10251  002BC0  2401               	addwf	??_high_isr,w,c
 10252  002BC2  6E3B               	movwf	_finishTime,c	;volatile
 10253  002BC4  5018               	movf	high_isr@counter+1,w,c
 10254  002BC6  2002               	addwfc	??_high_isr+1,w,c
 10255  002BC8  6E3C               	movwf	_finishTime+1,c	;volatile
 10256  002BCA  0E00               	movlw	0
 10257  002BCC  2003               	addwfc	??_high_isr+2,w,c
 10258  002BCE  6E3D               	movwf	_finishTime+2,c	;volatile
 10259  002BD0  0E00               	movlw	0
 10260  002BD2  2004               	addwfc	??_high_isr+3,w,c
 10261  002BD4  6E3E               	movwf	_finishTime+3,c	;volatile
 10262                           
 10263                           ;color_2.c: 107: triggered = true;
 10264  002BD6  0E01               	movlw	1
 10265  002BD8  6E47               	movwf	_triggered,c	;volatile
 10266  002BDA                     i2l2392:
 10267                           
 10268                           ;color_2.c: 108: INT0IF = 0;
 10269  002BDA  92F2               	bcf	intcon,1,c	;volatile
 10270  002BDC                     i2l2394:
 10271                           
 10272                           ;color_2.c: 109: return;
 10273  002BDC  C016  F055         	movff	??_high_isr+21,btemp+3
 10274  002BE0  C015  F054         	movff	??_high_isr+20,btemp+2
 10275  002BE4  C014  F053         	movff	??_high_isr+19,btemp+1
 10276  002BE8  C013  F052         	movff	??_high_isr+18,btemp
 10277  002BEC  C012  FFF5         	movff	??_high_isr+17,tablat
 10278  002BF0  C011  FFF8         	movff	??_high_isr+16,tblptru
 10279  002BF4  C010  FFF7         	movff	??_high_isr+15,tblptrh
 10280  002BF8  C00F  FFF6         	movff	??_high_isr+14,tblptrl
 10281  002BFC  C00E  FFF4         	movff	??_high_isr+13,prodh
 10282  002C00  C00D  FFF3         	movff	??_high_isr+12,prodl
 10283  002C04  C00C  FFDA         	movff	??_high_isr+11,fsr2h
 10284  002C08  C00B  FFD9         	movff	??_high_isr+10,fsr2l
 10285  002C0C  C00A  FFE2         	movff	??_high_isr+9,fsr1h
 10286  002C10  C009  FFE1         	movff	??_high_isr+8,fsr1l
 10287  002C14  C008  FFEA         	movff	??_high_isr+7,fsr0h
 10288  002C18  C007  FFE9         	movff	??_high_isr+6,fsr0l
 10289  002C1C  C006  FFFB         	movff	??_high_isr+5,pclatu
 10290  002C20  C005  FFFA         	movff	??_high_isr+4,pclath
 10291  002C24  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10292  002C26  0011               	retfie		f
 10293  002C28                     __end_of_high_isr:
 10294                           	opt stack 0
 10295                           pclatu	equ	0xFFB
 10296                           pclath	equ	0xFFA
 10297                           tblptru	equ	0xFF8
 10298                           tblptrh	equ	0xFF7
 10299                           tblptrl	equ	0xFF6
 10300                           tablat	equ	0xFF5
 10301                           prodh	equ	0xFF4
 10302                           prodl	equ	0xFF3
 10303                           intcon	equ	0xFF2
 10304                           intcon2	equ	0xFF1
 10305                           indf0	equ	0xFEF
 10306                           postinc0	equ	0xFEE
 10307                           fsr0h	equ	0xFEA
 10308                           fsr0l	equ	0xFE9
 10309                           wreg	equ	0xFE8
 10310                           fsr1h	equ	0xFE2
 10311                           fsr1l	equ	0xFE1
 10312                           bsr	equ	0xFE0
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           fsr2h	equ	0xFDA
 10316                           fsr2l	equ	0xFD9
 10317                           status	equ	0xFD8
 10318                           pclatu	equ	0xFFB
 10319                           pclath	equ	0xFFA
 10320                           tblptru	equ	0xFF8
 10321                           tblptrh	equ	0xFF7
 10322                           tblptrl	equ	0xFF6
 10323                           tablat	equ	0xFF5
 10324                           prodh	equ	0xFF4
 10325                           prodl	equ	0xFF3
 10326                           intcon	equ	0xFF2
 10327                           intcon2	equ	0xFF1
 10328                           indf0	equ	0xFEF
 10329                           postinc0	equ	0xFEE
 10330                           fsr0h	equ	0xFEA
 10331                           fsr0l	equ	0xFE9
 10332                           wreg	equ	0xFE8
 10333                           fsr1h	equ	0xFE2
 10334                           fsr1l	equ	0xFE1
 10335                           bsr	equ	0xFE0
 10336                           indf2	equ	0xFDF
 10337                           postinc2	equ	0xFDE
 10338                           fsr2h	equ	0xFDA
 10339                           fsr2l	equ	0xFD9
 10340                           status	equ	0xFD8
 10341                           
 10342                           	psect	rparam
 10343  0000                     pclatu	equ	0xFFB
 10344                           pclath	equ	0xFFA
 10345                           tblptru	equ	0xFF8
 10346                           tblptrh	equ	0xFF7
 10347                           tblptrl	equ	0xFF6
 10348                           tablat	equ	0xFF5
 10349                           prodh	equ	0xFF4
 10350                           prodl	equ	0xFF3
 10351                           intcon	equ	0xFF2
 10352                           intcon2	equ	0xFF1
 10353                           indf0	equ	0xFEF
 10354                           postinc0	equ	0xFEE
 10355                           fsr0h	equ	0xFEA
 10356                           fsr0l	equ	0xFE9
 10357                           wreg	equ	0xFE8
 10358                           fsr1h	equ	0xFE2
 10359                           fsr1l	equ	0xFE1
 10360                           bsr	equ	0xFE0
 10361                           indf2	equ	0xFDF
 10362                           postinc2	equ	0xFDE
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367                           	psect	temp
 10368  000052                     btemp:
 10369                           	opt stack 0
 10370  000052                     	ds	1
 10371  0000                     int$flags	set	btemp
 10372  0000                     wtemp6	set	btemp+1
 10373                           pclatu	equ	0xFFB
 10374                           pclath	equ	0xFFA
 10375                           tblptru	equ	0xFF8
 10376                           tblptrh	equ	0xFF7
 10377                           tblptrl	equ	0xFF6
 10378                           tablat	equ	0xFF5
 10379                           prodh	equ	0xFF4
 10380                           prodl	equ	0xFF3
 10381                           intcon	equ	0xFF2
 10382                           intcon2	equ	0xFF1
 10383                           indf0	equ	0xFEF
 10384                           postinc0	equ	0xFEE
 10385                           fsr0h	equ	0xFEA
 10386                           fsr0l	equ	0xFE9
 10387                           wreg	equ	0xFE8
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           bsr	equ	0xFE0
 10391                           indf2	equ	0xFDF
 10392                           postinc2	equ	0xFDE
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8


Data Sizes:
    Strings     86
    Constant    144
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      81
    BANK0           128    118     118
    BANK1           256     29      29
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[6]), STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> value(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[17]), STR_13(CODE[5]), STR_12(CODE[6]), STR_11(CODE[5]), 
		 -> STR_10(CODE[13]), STR_9(CODE[4]), STR_7(CODE[4]), STR_5(CODE[4]), 
		 -> STR_3(CODE[4]), value(COMRAM[8]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _sprintf->___lldiv
    _scale->___awdiv
    _fround->___awdiv
    ___awdiv->___awmod
    _lcd_msg->_lcd_putc
    _lcd_putc->_lcd_cmd
    _lcd_putc->_lcd_dwr
    _lcd_dwr->_lcd_lat
    _lcd_dwr->_manda
    _lcd_init->_lcd_cmd
    _lcd_cmd_hf->_lcd_lat
    _lcd_cmd_hf->_manda
    _lcd_gotoxy->_lcd_cmd
    _lcd_cmd->_lcd_lat
    _lcd_cmd->_manda
    _calcula->___fldiv
    ___xxtofl->___flge
    ___flmul->___awdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_calcula
    _calcula->___flmul
    ___flmul->___awdiv

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   71288
                                            116 BANK0      2     2      0
                                              0 BANK1     29    29      0
                            ___fladd
                            ___fldiv
                             ___flge
                           ___xxtofl
                            _calcula
                         _lcd_gotoxy
                           _lcd_init
                            _lcd_msg
               _prepareForInterrupts
                   _seleccionarColor
                  _seleccionarEscala
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   47674
                                             77 BANK0     39    31      8
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4    9960
                                             29 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             45 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4    9681
                                             29 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             45 COMRAM    11     3      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             45 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     607
                                             55 COMRAM     2     2      0
                                             38 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4547
                                             69 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4162
                                             49 BANK0     20    12      8
                            _calcula (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     155
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2426
                                             45 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _seleccionarEscala                                    1     1      0      31
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _seleccionarColor                                     1     1      0      31
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_msg                                              2     0      2    1759
                                             49 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     434
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     341
                                             48 COMRAM     1     1      0
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0     155
                                             46 COMRAM     1     1      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           4     3      1     775
                                             48 COMRAM     4     3      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     186
                                             46 COMRAM     2     2      0
                            _lcd_lat
                              _manda
 ---------------------------------------------------------------------------------
 (4) _manda                                                1     1      0     124
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calcula                                             20    16      4    8936
                                             29 BANK0     20    16      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
               _prepareForInterrupts
 ---------------------------------------------------------------------------------
 (1) _prepareForInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                              0 BANK0     14    10      4
                             ___flge (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5033
                                              4 BANK0     25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2655
                                             45 COMRAM    12     4      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             21    21      0       0
                                             24 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            24    24      0      30
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___fladd
     _calcula (ARG)
       ___fldiv
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___xxtofl
         ___flge (ARG)
       _prepareForInterrupts
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___fldiv
   ___flge
   ___xxtofl
     ___flge (ARG)
   _calcula
     ___fldiv
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___xxtofl
       ___flge (ARG)
     _prepareForInterrupts
   _lcd_gotoxy
     _lcd_cmd
       _lcd_lat
       _manda
   _lcd_init
     _lcd_cmd
       _lcd_lat
       _manda
     _lcd_cmd_hf
       _lcd_lat
       _manda
   _lcd_msg
     _lcd_putc
       _lcd_cmd
         _lcd_lat
         _manda
       _lcd_dwr
         _lcd_lat
         _manda
   _prepareForInterrupts
   _seleccionarColor
   _seleccionarEscala
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       _calcula (ARG)
         ___fldiv
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___xxtofl
           ___flge (ARG)
         _prepareForInterrupts
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___flneg
     ___flsub
       ___fladd
         _calcula (ARG)
           ___fldiv
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___xxtofl
             ___flge (ARG)
           _prepareForInterrupts
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___xxtofl (ARG)
         ___flge (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
       ___flge (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1D      1D       7       11.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     76      76       5       92.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4      15        0.0%
DATA                 0      0      E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 12 20:00:53 2018

                 ___fldiv@aexp 008C                   ___fldiv@bexp 008B                   ___fldiv@sign 0080  
                  lcd_cmd_hf@x 002F                             l24 3356                             l25 3336  
                           l42 33B6                             l27 333E                             l44 33C6  
                           l28 3346                             l36 31F4                             l53 3410  
                           l45 33AC                             l29 334E                             l37 31CC  
                           l54 3412                             l46 33B0                             l55 341A  
                           l56 341C                             l57 3424                             l58 3426  
                           l59 342E                   ___awdiv@sign 0081                             bsr 000FE0  
          ___wmul@multiplicand 0030                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                            l220 1956                            l221 1872  
                          l214 2624                            l150 101E                            l303 0FAC  
                          l231 06F6                            l151 1036                            l224 192A  
                          l232 070E                            l217 2704                            l225 1A94  
                          l241 081E                            l161 15F8                            l153 1156  
                          l234 073C                            l227 1B4C                            l251 0910  
                          l163 167C                            l155 1276                            l180 3370  
                          l252 098E                            l244 081A                            l236 080C  
                          l245 0842                            l237 07F6                            l165 1700  
                          l157 1390                            l182 3376                            l254 09BC  
                          l238 07BE                            l166 170C                            l191 32FE  
                          l183 337C                            l511 2ACA                            l247 0E96  
                          l271 0BFC                            l255 0A08                            l159 1574  
                          l192 3304                            l184 3382                            l512 2ABA  
                          l272 0BE6                            l256 0AEC                            l248 0856  
                          l193 330A                            l505 29FC                            l281 0D02  
                          l265 0B64                            l249 08A4                            l194 3310  
                          l522 2C5C                            l290 0EAE                            l282 0D06  
                          l179 3388                            l523 2C90                            l507 2A1A  
                          l611 2902                            l291 0ECA                            l283 0D28  
                          l275 0CBE                            l259 0A84                            l188 3316  
                          l524 2CCE                            l700 30E2                            l508 2A5C  
                          l612 293C                            l284 0E6A                            l276 0C2A  
                          l189 32F8                            l525 2D0C                            l517 2AEE  
                          l509 2A8C                            l621 29C4                            l613 2964  
                          l293 0EEA                            l285 0D88                            l269 0BD0  
                          l710 31B8                            l518 2AE2                            l622 29B8  
                          l294 0F0C                            l278 0CDE                            l615 29A0  
                          l287 0E8C                            l279 0CC8                            l800 2068  
                          l560 2F00                            l552 2E70                            l616 2990  
                          l480 3050                            l296 0F2E                            l288 0E76  
                          l529 33F4                            l561 2EF4                            l705 3182  
                          l609 28D6                            l481 305A                            l473 3002  
                          l297 0F36                            l810 214C                            l554 2EDC  
                          l706 3176                            l482 3068                            l474 3012  
                          l490 3122                            l298 0F5A                            l803 2102  
                          l563 2F1C                            l555 2ECC                            l299 0F62  
                          l900 27D6                            l820 21BC                            l812 2156  
                          l476 3030                            l901 27CA                            l805 2112  
                          l709 31AA                            l477 3028                            l493 3142  
                          l494 314C                            l486 3108                            l911 2864  
                          l903 2814                            l495 315A                            l487 3114  
                          l912 2896                            l904 27FC                            l824 21E2  
                          l808 2136                            l841 22C0                            l825 21EA  
                          l817 2176                            l489 312A                            l834 223A  
                          l906 2846                            l826 21EC                            l851 23CA  
                          l843 22E8                            l835 2236                            l907 283A  
                          l860 2446                            l852 23AC                            l844 2396  
                          l861 246A                            l845 2346                            l669 346E  
                          l862 2494                            l846 236E                            l838 227A  
                          l870 1BBA                            l790 1FFA                            l782 1F44  
                          l863 24A0                            l839 2276                            l791 2008  
                          l783 1F40                            l695 30A0                            l864 24A2  
                          l848 2394                            l880 1DBA                            l872 1BEA  
                          l792 200C                            l696 3094                            l873 1BE6  
                          l785 1FA0                            l777 1EFC                            l858 2402  
                          l874 1BFA                            l786 1F64                            l778 1EF8  
                          l891 1E96                            l875 1C18                            l795 207A  
                          l699 30D4                            l892 1EB4                            l868 1BAA  
                          l796 2040                            l869 1BA6                            l789 201C  
                          l886 1E10                            l879 1DD8                            l799 2064  
                          l888 1E54                            l896 2796                            l889 1E72  
                          l897 27A6                            l898 27C4                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                            _lcd 0049                   ___awmod@sign 0033  
                          wreg 000FE8                   ___flmul@aexp 0091                   ___flmul@bexp 0096  
                  _sprintf$875 00D9                   ___flmul@sign 0090                   ___flmul@temp 009B  
                 ___flmul@prod 0097                    lcd_gotoxy@x 0033                    lcd_gotoxy@y 0031  
                 __CFG_LVP$OFF 000000                   ___fltol@exp1 0039                   __CFG_WDT$OFF 000000  
                         l5002 2494                           l4172 2D44                           l5404 0B68  
                         l5424 0BE6                           l5428 0BF6                           l5448 0CC8  
                         l5384 0A56                           l5376 0A08                           l5538 0FA8  
                         l5628 114E                           l5662 126E                           l5594 102E  
                         l5694 1388                           STR_1 0691                           STR_2 06C7  
                         STR_3 06DB                           STR_4 06C7                           STR_5 06DF  
                         STR_6 06C7                           STR_7 06E3                           STR_8 06C7  
                         STR_9 06D7                           _GIEH 007F97                           _GIEL 007F96  
                         u5040 1E0C                           u6000 3214                           _IPEN 007E87  
                         u5130 3034                           u5070 1E62                           u6007 320A  
                         u5311 28B8                           u5080 1E80                           u4610 1FD0  
                         u6050 079A                           u5331 28E6                           u4620 1FE0  
                         u6300 0CFC                           u4630 1FE2                           u5190 312E  
                         u6230 0BA0                           u6150 09CE                           u6160 0A1A  
                         u4820 2172                           u4660 2024                           u5460 2AF4  
                         u6260 0C0A                           u6500 11A6                           u5390 29CA  
                         u6430 0F6A                           u6190 0A56                           u5640 23FE  
                         u6440 0F88                           u6600 15A0                           u6520 12C6  
                         u5810 2F06                           u6290 0CEC                           u6610 15A2  
                         u6460 0FC6                           u6540 13E0                           u5670 2454  
                         u4870 21C8                           u4790 215A                           u6630 1624  
                         u6550 14CE                           u5680 2478                           u5840 30A4  
                         u6640 1626                           u6560 14D0                           u6480 1086  
                         u5770 2E8E                           u6570 151C                           u6707 1130  
                         u4980 1C06                           u6660 16A8                           u6580 151E  
                         u6717 115E                           u4990 1D7C                           u5950 2850  
                         u5870 3186                           u6670 16AA                           u6807 2F60  
                         u5775 2E84                           u6727 1250                           u6817 2F76  
                         u6737 127E                           u4995 1D72                           u6827 2F8C  
                         u6747 1370                           u6837 2FA0                           u6757 1398  
                         u5990 31EC                           u6847 2FB4                           u6767 148A  
                         u6857 2FC8                           u6777 1718                           u6697 103E  
                         u6867 2FDC                           u6787 32CC                           u6877 323E  
                         u6797 2F4A                           u5997 31E2                           u6887 34B2  
                         _TMR1 000FCE                   __CFG_PWRT$ON 000000            seleccionarColor@col 002E  
                         _main 0FD4                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0052                           prodh 000FF4                           prodl 000FF3  
                         start 00D8                  __CFG_IESO$OFF 000000                ___fldiv@new_exp 0085  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                  ___fltol@sign1 0038  
              __end_of___fladd 2208                          ?_main 0001                __end_of___fldiv 24BE  
              __end_of___awdiv 3072                __end_of___flneg 3406                          STR_10 06B4  
                        STR_11 06D2                          STR_12 06C1                          STR_13 06CD  
                        STR_14 06A3                __end_of___awmod 3164                __end_of___flmul 1ECA  
              __end_of___flsub 32AE                __end_of___fltol 2F2E                __end_of___lldiv 30F4  
              ___awdiv@divisor 0036                __end_of___llmod 31CA                          i2l145 2BA2  
              ___awdiv@counter 0080                          _PORTB 000F81                          _PORTD 000F83  
              __end_of_calcula 2E50       __end_of_seleccionarColor 3332                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                __end_of_lcd_cmd 3266  
              __end_of_lcd_lat 34C0                __end_of_lcd_dwr 32F4                __end_of_lcd_msg 321C  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers 0691                          _manda 3406  
                        _first 0048                          _scale 1728                __end_of_isdigit 3476  
                        _value 004A                          main@a 0110                          main@i 0118  
                        main@r 0108                          main@v 010C                __end_of_low_isr 00D8  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                          wtemp6 0053                __end_of_sprintf 0FD4  
              __initialization 3476                   __end_of_main 1728                         ??_main 00F4  
                __activetblptr 000002           __size_of__tdiv_to_l_ 0134                         ?_manda 0001  
             ___llmod@dividend 002E                         ?_scale 009D               ___awdiv@dividend 0034  
                       _INT0IE 007F94                         _INT0IF 007F91                         i1l2368 0080  
                       i2l2392 2BDA                         i2l2394 2BDC                         _TMR1IE 007CE8  
                       _TMR1IF 007CF0                         _TMR1CS 007E69                         _TMR1IP 007CF8  
                       _TMR1ON 007E68               __end_of___xxtofl 28A8                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 0635               __end_of_lcd_init 2FEC               __end_of_high_isr 2C28  
                       ___flge 2C28               __end_of_lcd_putc 336C                      ??___fladd 00B9  
                       ___wmul 3432                      ??___fldiv 0036                      ??___awdiv 0038  
                    ??___flneg 0032                 __CFG_STVREN$ON 000000                      ??___awmod 0032  
                    ??___flmul 008C                      ??___flsub 003A                      ??___fltol 00AA  
                    ??___lldiv 0036                      ??___llmod 0036                      ??_calcula 00A1  
                       _fround 24BE  __size_of_prepareForInterrupts 000E                         clear_0 347C  
             ___awdiv@quotient 0082                ___awmod@divisor 0030                ___awmod@counter 0032  
                    ??_lcd_cmd 002F                      ??_lcd_lat 002E                      ??_lcd_dwr 002F  
                    ??_lcd_msg 0034                      ??_isdigit 002E                   __mediumconst 0000  
                    ??_low_isr 0019                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8              lcd_gotoxy@ADDRESS 0034                      ??_sprintf 00D5  
                   ___flge@ff1 002E                     ___flge@ff2 0032                   ___xxtofl@arg 008A  
                 ___xxtofl@exp 0089                   ___xxtofl@val 0080                     __accesstop 0080  
      __end_of__initialization 3482                __CFG_PBADEN$OFF 000000                     ___flneg@f1 002E  
                ___rparam_used 000001                     ___fltol@f1 00A6                 __pcstackCOMRAM 0001  
                __end_of_manda 3432                  __end_of_scale 1B78                     __div_to_l_ 29DC  
                      ??_manda 002E                __div_to_l_@exp1 0085                __div_to_l_@cntr 0084  
                      ??_scale 0038                __div_to_l_@quot 0080                   sprintf@width 00E5  
                __div_to_l_@f1 002E                  __div_to_l_@f2 0032             __CFG_CCP2MX$PORTBE 000000  
                      ?___flge 002E                        ?___wmul 002E                        ?_fround 009D  
                      _T1CKPS0 007E6C                        _T1CKPS1 007E6D                        _INTEDG0 007F8E  
                   _lcd_cmd_hf 3490                      ?___xxtofl 0080             calcula@elapsedTime 00A5  
            ?_seleccionarColor 0001                     _lcd_gotoxy 33A4             ??_seleccionarColor 002E  
                   _finishTime 003B                      ?_lcd_init 0001                      ?_high_isr 0001  
                    ?_lcd_putc 0001              __end_of__npowers_ 0669                        __Hparam 0000  
                      __Lparam 0000                __size_of___flge 0120                        ___fladd 1ECA  
                      ___fldiv 2208                        ___awdiv 2FEC                        ___flneg 33D8  
                      ___awmod 30F4                        ___flmul 1B78                        ___flsub 3266  
                      ___fltol 2E50                        ___lldiv 3072                __size_of___wmul 0026  
                      ___llmod 3164                     _fround$872 00A5                     _fround$873 00A1  
                 __psmallconst 0600                        _calcula 2D48                        __pcinit 3476  
              __size_of_fround 0296                        __ramtop 0600                        __ptext0 0FD4  
                      __ptext1 06E8                        __ptext2 1728                        __ptext3 3458  
                      __ptext4 24BE                        __ptext5 30F4                        __ptext6 2FEC  
                      __ptext7 28A8                        __ptext8 29DC                        __ptext9 3432  
                      _lcd_cmd 321C                        _lcd_lat 34AA                        _lcd_dwr 32AE  
                      _lcd_msg 31CA                      _T1CONbits 000FCD                    ?__div_to_l_ 002E  
                      _dpowers 0669                        _isdigit 3458                     ??___xxtofl 0084  
             ___awmod@dividend 002E                        _low_isr 0018                        _sprintf 06E8  
                   ??_lcd_init 0031                     ??_high_isr 0001                 __pintcode_body 2B06  
                   ??_lcd_putc 0031           end_of_initialization 3482                  __Lmediumconst 0000  
                      int_func 2B06                ___lldiv@divisor 0032                ___lldiv@counter 003A  
                      postinc0 000FEE                        postinc2 000FDE                 __tdiv_to_l_@f1 002E  
               __tdiv_to_l_@f2 0032                  ??__tdiv_to_l_ 0036                    ___fladd@grs 00C4  
                  ?_lcd_cmd_hf 0001                  ___xxtofl@sign 0088                    ?_lcd_gotoxy 0031  
                  ___fldiv@grs 0087                    ___fldiv@rem 0081   __end_of_prepareForInterrupts 34CE  
                  ___flmul@grs 0092                     main@brillo 0100             seleccionarEscala@a 002E  
          __size_of__div_to_l_ 012A                 __end_of___flge 2D48                 __end_of___wmul 3458  
               __end_of_fround 2754            start_initialization 3476            __end_of__tdiv_to_l_ 29DC  
              high_isr@counter 0017                ___llmod@divisor 0032                ___llmod@counter 0036  
          __size_of_lcd_cmd_hf 001A                       ??___flge 0036            __size_of_lcd_gotoxy 0034  
                     ??___wmul 0032               __CFG_LPT1OSC$OFF 000000                       ??_fround 0038  
                sprintf@tmpval 00E7                      ___fladd@a 00B5                      ___fladd@b 00B1  
                   fround@prec 00A9                      ___fldiv@a 0032                      ___fldiv@b 002E  
                    ___flmul@a 0088                      ___flmul@b 0084                    __pbssCOMRAM 003B  
                    ___flsub@a 00C9                      ___flsub@b 00C5                  __pcstackBANK0 0080  
                __pcstackBANK1 0100              __size_of___xxtofl 0154              __size_of_lcd_init 00BE  
            __size_of_high_isr 2C20                    sprintf@flag 00E3              __size_of_lcd_putc 003A  
                  sprintf@fval 00ED                    sprintf@prec 00F1      __size_of_seleccionarColor 003E  
                    __pintcode 0008                       ?___fladd 00B1                       ?___fldiv 002E  
                     ?___awdiv 0034                       ?___flneg 002E                       ?___awmod 002E  
                     ?___flmul 0084                       ?___flsub 00C5                       ?___fltol 00A6  
                     ?___lldiv 002E                       ?___llmod 002E                      __npowers_ 0635  
                     ?_calcula 009D                    __pintcodelo 0018           _prepareForInterrupts 34C0  
                  __tdiv_to_l_ 28A8                       ?_lcd_cmd 0001                       ?_lcd_lat 0001  
                     ?_lcd_dwr 0001                       ?_lcd_msg 0032                   ??__div_to_l_ 0036  
                  __smallconst 0600                       ?_isdigit 0001                       ?_low_isr 0001  
                    _scale$874 00A1                 __size_of_manda 002C                       ?_sprintf 00CD  
               __size_of_scale 0450                 ___wmul@product 0032              _seleccionarEscala 336C  
           ?_seleccionarEscala 0001             __end_of__div_to_l_ 2B06               __CFG_WDTPS$32768 000000  
          ??_seleccionarEscala 002E          ?_prepareForInterrupts 0001              ___wmul@multiplier 002E  
                    _startTime 003F                      _triggered 0047                   ??_lcd_cmd_hf 002F  
                    lcd_putc@c 0031                   ??_lcd_gotoxy 0032                      manda@dato 002E  
    __end_of_seleccionarEscala 33A4                    calcula@freq 00A9                    calcula@temp 00AD  
                     __Hrparam 0000                       __Lrparam 0000             __end_of_lcd_cmd_hf 34AA  
           __end_of_lcd_gotoxy 33D8               __size_of___fladd 033E               __size_of___fldiv 02B6  
             __size_of___awdiv 0086               __size_of___flneg 002E               __size_of___awmod 0070  
             __size_of___flmul 0352               __size_of___flsub 0048               __size_of___fltol 00DE  
             __size_of___lldiv 0082               __size_of___llmod 0066               __size_of_calcula 0108  
                  _isdigit$517 002F               __size_of_lcd_cmd 004A               __size_of_lcd_lat 0016  
             __size_of_lcd_dwr 0046               __size_of_lcd_msg 0052                     sprintf@exp 00EB  
                   sprintf@val 00DF                       ___xxtofl 2754               __size_of_isdigit 001E  
                     _main$870 0114                       _main$871 0104               __size_of_low_isr 00C0  
                     __ptext10 3164                       __ptext11 3072                       __ptext20 3332  
                     __ptext12 2E50                       __ptext21 32AE                       __ptext13 3266  
                     __ptext30 2754                       __ptext22 2F2E                       __ptext14 1ECA  
                     __ptext31 1B78                       __ptext23 3490                       __ptext15 33D8  
                     __ptext32 2208                       __ptext24 33A4                       __ptext16 2C28  
                     __ptext25 321C                       __ptext17 336C                       __ptext26 3406  
                     __ptext18 32F4                       __ptext27 34AA                       __ptext19 31CA  
                     __ptext28 2D48                       __ptext29 34C0                       __powers_ 0601  
                     _lcd_init 2F2E                       _high_isr 0008                       _lcd_putc 3332  
             __size_of_sprintf 08EC                  __size_of_main 0754               _seleccionarColor 32F4  
       ??_prepareForInterrupts 002E                       int$flags 0052                       lcd_cmd@x 0030  
                     lcd_dwr@x 0030                       lcd_msg@c 0032                       main@freq 0119  
                     isdigit@c 0030                       scale@scl 00A5                       intlevel1 0000  
                     intlevel2 0000     __size_of_seleccionarEscala 0038                      sprintf@ap 00DD  
             __tdiv_to_l_@exp1 0085                      sprintf@sp 00CD               __tdiv_to_l_@cntr 0084  
             __tdiv_to_l_@quot 0080               ___lldiv@dividend 002E                  _overflowCount 0043  
                 ?__tdiv_to_l_ 002E                       sprintf@c 00F3                       sprintf@f 00CF  
             ___lldiv@quotient 0036                  ___fladd@signs 00C1                   ___fladd@aexp 00C2  
                 ___fladd@bexp 00C3  
