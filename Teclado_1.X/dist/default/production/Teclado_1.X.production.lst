

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Mar  2 23:40:04 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 1.44
    17                           ; Generated 14/09/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F45K50 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     
    51                           	psect	smallconst
    52  000800                     __psmallconst:
    53                           	opt stack 0
    54  000800  00                 	db	0
    55  000801                     _KEYS:
    56                           	opt stack 0
    57  000801  31                 	db	49
    58  000802  32                 	db	50
    59  000803  33                 	db	51
    60  000804  41                 	db	65
    61  000805  34                 	db	52
    62  000806  35                 	db	53
    63  000807  36                 	db	54
    64  000808  42                 	db	66
    65  000809  37                 	db	55
    66  00080A  38                 	db	56
    67  00080B  39                 	db	57
    68  00080C  43                 	db	67
    69  00080D  2A                 	db	42
    70  00080E  30                 	db	48
    71  00080F  23                 	db	35
    72  000810  44                 	db	68
    73  000811                     __end_of_KEYS:
    74                           	opt stack 0
    75  0000                     _ANSELA	set	3931
    76  0000                     _PORTB	set	3969
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _TRISCbits	set	3988
    80  0000                     _TRISDbits	set	3989
    81                           
    82                           ; #config settings
    83  000811  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           	psect	cinit
    86  0009DE                     __pcinit:
    87                           	opt stack 0
    88  0009DE                     start_initialization:
    89                           	opt stack 0
    90  0009DE                     __initialization:
    91                           	opt stack 0
    92  0009DE                     end_of_initialization:
    93                           	opt stack 0
    94  0009DE                     __end_of__initialization:
    95                           	opt stack 0
    96  0009DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
    97  0009E0  6EF8               	movwf	tblptru,c
    98  0009E2  0100               	movlb	0
    99  0009E4  EFCB  F004         	goto	_main	;jump to C main() function
   100                           tblptru	equ	0xFF8
   101                           
   102                           	psect	cstackCOMRAM
   103  000001                     __pcstackCOMRAM:
   104                           	opt stack 0
   105  000001                     display@valor:
   106                           	opt stack 0
   107  000001                     ui8_TestKeyPad@k:
   108                           	opt stack 0
   109                           
   110                           ; 1 bytes @ 0x0
   111  000001                     	ds	1
   112  000002                     kbd_getc@kchar:
   113                           	opt stack 0
   114                           
   115                           ; 1 bytes @ 0x1
   116  000002                     	ds	1
   117  000003                     kbd_getc@temp:
   118                           	opt stack 0
   119                           
   120                           ; 1 bytes @ 0x2
   121  000003                     	ds	1
   122  000004                     main@tecla:
   123                           	opt stack 0
   124                           
   125                           ; 1 bytes @ 0x3
   126  000004                     	ds	1
   127                           tblptru	equ	0xFF8
   128                           
   129 ;;
   130 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   131 ;;
   132 ;; *************** function _main *****************
   133 ;; Defined at:
   134 ;;		line 64 in file "Teclado_1.c"
   135 ;; Parameters:    Size  Location     Type
   136 ;;		None
   137 ;; Auto vars:     Size  Location     Type
   138 ;;  tecla           1    3[COMRAM] unsigned char 
   139 ;;  vtecla          1    0        unsigned char 
   140 ;; Return value:  Size  Location     Type
   141 ;;                  1    wreg      void 
   142 ;; Registers used:
   143 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   144 ;; Tracked objects:
   145 ;;		On entry : 0/0
   146 ;;		On exit  : 0/0
   147 ;;		Unchanged: 0/0
   148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   149 ;;      Params:         0       0       0       0       0       0       0       0       0
   150 ;;      Locals:         1       0       0       0       0       0       0       0       0
   151 ;;      Temps:          0       0       0       0       0       0       0       0       0
   152 ;;      Totals:         1       0       0       0       0       0       0       0       0
   153 ;;Total ram usage:        1 bytes
   154 ;; Hardware stack levels required when called:    2
   155 ;; This function calls:
   156 ;;		_display
   157 ;;		_kbd_getc
   158 ;;		_vInitKeyPad
   159 ;; This function is called by:
   160 ;;		Startup code after reset
   161 ;; This function uses a non-reentrant model
   162 ;;
   163                           
   164                           	psect	text0
   165  000996                     __ptext0:
   166                           	opt stack 0
   167  000996                     _main:
   168                           	opt stack 29
   169                           
   170                           ;Teclado_1.c: 66: unsigned char tecla,vtecla;
   171                           ;Teclado_1.c: 67: ANSELA = 0x00;
   172                           
   173                           ;incstack = 0
   174  000996  0E00               	movlw	0
   175  000998  010F               	movlb	15	; () banked
   176  00099A  6F5B               	movwf	91,b	;volatile
   177                           
   178                           ; BSR set to: 15
   179                           ;Teclado_1.c: 68: vInitKeyPad();
   180  00099C  ECE6  F004         	call	_vInitKeyPad	;wreg free
   181                           
   182                           ;Teclado_1.c: 71: TRISDbits.TRISD1 = 0;
   183  0009A0  9295               	bcf	3989,1,c	;volatile
   184                           
   185                           ;Teclado_1.c: 72: TRISCbits.TRISC1 = 0;
   186  0009A2  9294               	bcf	3988,1,c	;volatile
   187                           
   188                           ;Teclado_1.c: 73: TRISCbits.TRISC2 = 0;
   189  0009A4  9494               	bcf	3988,2,c	;volatile
   190                           
   191                           ;Teclado_1.c: 74: TRISDbits.TRISD0 = 0;
   192  0009A6  9095               	bcf	3989,0,c	;volatile
   193                           
   194                           ;Teclado_1.c: 75: TRISDbits.TRISD2 = 0;
   195  0009A8  9495               	bcf	3989,2,c	;volatile
   196                           
   197                           ;Teclado_1.c: 76: TRISDbits.TRISD3 = 0;
   198  0009AA  9695               	bcf	3989,3,c	;volatile
   199                           
   200                           ;Teclado_1.c: 77: TRISCbits.TRISC6 = 0;
   201  0009AC  9C94               	bcf	3988,6,c	;volatile
   202                           
   203                           ;Teclado_1.c: 78: TRISCbits.TRISC7 = 0;
   204  0009AE  9E94               	bcf	3988,7,c	;volatile
   205                           
   206                           ;Teclado_1.c: 80: display(8);
   207  0009B0  0E08               	movlw	8
   208  0009B2  ECA1  F004         	call	_display
   209  0009B6                     
   210                           ;Teclado_1.c: 85: {
   211                           ;Teclado_1.c: 86: tecla = kbd_getc();
   212  0009B6  EC5B  F004         	call	_kbd_getc	;wreg free
   213  0009BA  6E04               	movwf	main@tecla,c
   214                           
   215                           ;Teclado_1.c: 87: if(tecla!='\0')
   216  0009BC  5004               	movf	main@tecla,w,c
   217  0009BE  B4D8               	btfsc	status,2,c
   218  0009C0  D7FA               	goto	l21
   219                           
   220                           ;Teclado_1.c: 88: display(tecla-'0');
   221  0009C2  5004               	movf	main@tecla,w,c
   222  0009C4  0FD0               	addlw	208
   223  0009C6  ECA1  F004         	call	_display
   224  0009CA  D7F5               	goto	l21
   225  0009CC                     __end_of_main:
   226                           	opt stack 0
   227                           tblptru	equ	0xFF8
   228                           status	equ	0xFD8
   229                           
   230 ;; *************** function _vInitKeyPad *****************
   231 ;; Defined at:
   232 ;;		line 35 in file "../MyLibs/keyb.c"
   233 ;; Parameters:    Size  Location     Type
   234 ;;		None
   235 ;; Auto vars:     Size  Location     Type
   236 ;;		None
   237 ;; Return value:  Size  Location     Type
   238 ;;                  1    wreg      void 
   239 ;; Registers used:
   240 ;;		status,2, status,0
   241 ;; Tracked objects:
   242 ;;		On entry : 0/0
   243 ;;		On exit  : 0/0
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   246 ;;      Params:         0       0       0       0       0       0       0       0       0
   247 ;;      Locals:         0       0       0       0       0       0       0       0       0
   248 ;;      Temps:          0       0       0       0       0       0       0       0       0
   249 ;;      Totals:         0       0       0       0       0       0       0       0       0
   250 ;;Total ram usage:        0 bytes
   251 ;; Hardware stack levels used:    1
   252 ;; This function calls:
   253 ;;		Nothing
   254 ;; This function is called by:
   255 ;;		_main
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text1
   260  0009CC                     __ptext1:
   261                           	opt stack 0
   262  0009CC                     _vInitKeyPad:
   263                           	opt stack 30
   264                           
   265                           ;keyb.c: 38: (*(&(*(&PORTB + 0x12))) |= (1<<(4)));
   266                           
   267                           ;incstack = 0
   268  0009CC  8893               	bsf	3987,4,c	;volatile
   269                           
   270                           ;keyb.c: 39: (*(&(*(&PORTB + 0x12))) |= (1<<(5)));
   271  0009CE  8A93               	bsf	3987,5,c	;volatile
   272                           
   273                           ;keyb.c: 40: (*(&(*(&PORTB + 0x12))) |= (1<<(6)));
   274  0009D0  8C93               	bsf	3987,6,c	;volatile
   275                           
   276                           ;keyb.c: 41: (*(&(*(&PORTB + 0x12))) |= (1<<(7)));
   277  0009D2  8E93               	bsf	3987,7,c	;volatile
   278                           
   279                           ;keyb.c: 43: (*(&(*(&PORTB + 0x12))) &=~ (1<<(0)));
   280  0009D4  9093               	bcf	3987,0,c	;volatile
   281                           
   282                           ;keyb.c: 44: (*(&(*(&PORTB + 0x12))) &=~ (1<<(1)));
   283  0009D6  9293               	bcf	3987,1,c	;volatile
   284                           
   285                           ;keyb.c: 45: (*(&(*(&PORTB + 0x12))) &=~ (1<<(2)));
   286  0009D8  9493               	bcf	3987,2,c	;volatile
   287                           
   288                           ;keyb.c: 46: (*(&(*(&PORTB + 0x12))) &=~ (1<<(3)));
   289  0009DA  9693               	bcf	3987,3,c	;volatile
   290  0009DC  0012               	return		;funcret
   291  0009DE                     __end_of_vInitKeyPad:
   292                           	opt stack 0
   293                           tblptru	equ	0xFF8
   294                           status	equ	0xFD8
   295                           
   296 ;; *************** function _kbd_getc *****************
   297 ;; Defined at:
   298 ;;		line 83 in file "../MyLibs/keyb.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  temp            1    2[COMRAM] unsigned char 
   303 ;;  kchar           1    1[COMRAM] unsigned char 
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      unsigned char 
   306 ;; Registers used:
   307 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   313 ;;      Params:         0       0       0       0       0       0       0       0       0
   314 ;;      Locals:         2       0       0       0       0       0       0       0       0
   315 ;;      Temps:          0       0       0       0       0       0       0       0       0
   316 ;;      Totals:         2       0       0       0       0       0       0       0       0
   317 ;;Total ram usage:        2 bytes
   318 ;; Hardware stack levels used:    1
   319 ;; Hardware stack levels required when called:    1
   320 ;; This function calls:
   321 ;;		_ui8_TestKeyPad
   322 ;; This function is called by:
   323 ;;		_main
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           	psect	text2
   328  0008B6                     __ptext2:
   329                           	opt stack 0
   330  0008B6                     _kbd_getc:
   331                           	opt stack 29
   332                           
   333                           ;keyb.c: 85: unsigned char kchar,temp;
   334                           ;keyb.c: 87: temp = ui8_TestKeyPad();
   335                           
   336                           ;incstack = 0
   337  0008B6  EC09  F004         	call	_ui8_TestKeyPad	;wreg free
   338  0008BA  6E03               	movwf	kbd_getc@temp,c
   339                           
   340                           ;keyb.c: 88: if (temp <=3)
   341  0008BC  0E04               	movlw	4
   342  0008BE  6003               	cpfslt	kbd_getc@temp,c
   343  0008C0  D00B               	goto	l56
   344                           
   345                           ;keyb.c: 89: kchar = KEYS[0][temp];
   346  0008C2  5003               	movf	kbd_getc@temp,w,c
   347  0008C4  0D01               	mullw	1
   348  0008C6  0E01               	movlw	low _KEYS
   349  0008C8  24F3               	addwf	prodl,w,c
   350  0008CA  6EF6               	movwf	tblptrl,c
   351  0008CC  0E08               	movlw	high _KEYS
   352  0008CE  20F4               	addwfc	prodh,w,c
   353  0008D0  6EF7               	movwf	tblptrh,c
   354  0008D2                     	if	0	;There are less than 3 active tblptr bytes
   355  0008D2                     	endif
   356  0008D2  0008               	tblrd		*
   357  0008D4  CFF5 F002          	movff	tablat,kbd_getc@kchar
   358  0008D8                     l56:
   359                           
   360                           ;keyb.c: 90: if (temp >=4 || temp <=7)
   361  0008D8  0E04               	movlw	4
   362  0008DA  6003               	cpfslt	kbd_getc@temp,c
   363  0008DC  D003               	goto	u170
   364  0008DE  0E08               	movlw	8
   365  0008E0  6003               	cpfslt	kbd_getc@temp,c
   366  0008E2  D009               	goto	l57
   367  0008E4                     u170:
   368                           
   369                           ;keyb.c: 91: kchar = KEYS[1][temp-4];
   370  0008E4  0E01               	movlw	low _KEYS
   371  0008E6  2403               	addwf	kbd_getc@temp,w,c
   372  0008E8  6EF6               	movwf	tblptrl,c
   373  0008EA  6AF7               	clrf	tblptrh,c
   374  0008EC  0E08               	movlw	high _KEYS
   375  0008EE  22F7               	addwfc	tblptrh,f,c
   376  0008F0                     	if	0	;There are less than 3 active tblptr bytes
   377  0008F0                     	endif
   378  0008F0  0008               	tblrd		*
   379  0008F2  CFF5 F002          	movff	tablat,kbd_getc@kchar
   380  0008F6                     l57:
   381                           
   382                           ;keyb.c: 92: if (temp >=8 || temp <=11)
   383  0008F6  0E08               	movlw	8
   384  0008F8  6003               	cpfslt	kbd_getc@temp,c
   385  0008FA  D003               	goto	u190
   386  0008FC  0E0C               	movlw	12
   387  0008FE  6003               	cpfslt	kbd_getc@temp,c
   388  000900  D009               	goto	l60
   389  000902                     u190:
   390                           
   391                           ;keyb.c: 93: kchar = KEYS[2][temp-8];
   392  000902  0E01               	movlw	low _KEYS
   393  000904  2403               	addwf	kbd_getc@temp,w,c
   394  000906  6EF6               	movwf	tblptrl,c
   395  000908  6AF7               	clrf	tblptrh,c
   396  00090A  0E08               	movlw	high _KEYS
   397  00090C  22F7               	addwfc	tblptrh,f,c
   398  00090E                     	if	0	;There are less than 3 active tblptr bytes
   399  00090E                     	endif
   400  00090E  0008               	tblrd		*
   401  000910  CFF5 F002          	movff	tablat,kbd_getc@kchar
   402  000914                     l60:
   403                           
   404                           ;keyb.c: 94: if (temp >=12 || temp <=15)
   405  000914  0E0C               	movlw	12
   406  000916  6003               	cpfslt	kbd_getc@temp,c
   407  000918  D003               	goto	u210
   408  00091A  0E10               	movlw	16
   409  00091C  6003               	cpfslt	kbd_getc@temp,c
   410  00091E  D009               	goto	l63
   411  000920                     u210:
   412                           
   413                           ;keyb.c: 95: kchar = KEYS[3][temp-12];
   414  000920  0E01               	movlw	low _KEYS
   415  000922  2403               	addwf	kbd_getc@temp,w,c
   416  000924  6EF6               	movwf	tblptrl,c
   417  000926  6AF7               	clrf	tblptrh,c
   418  000928  0E08               	movlw	high _KEYS
   419  00092A  22F7               	addwfc	tblptrh,f,c
   420  00092C                     	if	0	;There are less than 3 active tblptr bytes
   421  00092C                     	endif
   422  00092C  0008               	tblrd		*
   423  00092E  CFF5 F002          	movff	tablat,kbd_getc@kchar
   424  000932                     l63:
   425                           
   426                           ;keyb.c: 96: if(temp == 16)
   427  000932  0E10               	movlw	16
   428  000934  1803               	xorwf	kbd_getc@temp,w,c
   429  000936  A4D8               	btfss	status,2,c
   430  000938  D002               	goto	l66
   431                           
   432                           ;keyb.c: 97: kchar = '\0';
   433  00093A  0E00               	movlw	0
   434  00093C  6E02               	movwf	kbd_getc@kchar,c
   435  00093E                     l66:
   436                           
   437                           ;keyb.c: 98: return kchar;
   438  00093E  5002               	movf	kbd_getc@kchar,w,c
   439  000940  0012               	return	
   440  000942                     __end_of_kbd_getc:
   441                           	opt stack 0
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           prodh	equ	0xFF4
   447                           prodl	equ	0xFF3
   448                           status	equ	0xFD8
   449                           
   450 ;; *************** function _ui8_TestKeyPad *****************
   451 ;; Defined at:
   452 ;;		line 101 in file "../MyLibs/keyb.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;		None
   455 ;; Auto vars:     Size  Location     Type
   456 ;;  k               1    0[COMRAM] unsigned char 
   457 ;; Return value:  Size  Location     Type
   458 ;;                  1    wreg      unsigned char 
   459 ;; Registers used:
   460 ;;		wreg, status,2, status,0
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   466 ;;      Params:         0       0       0       0       0       0       0       0       0
   467 ;;      Locals:         1       0       0       0       0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0       0       0       0       0
   469 ;;      Totals:         1       0       0       0       0       0       0       0       0
   470 ;;Total ram usage:        1 bytes
   471 ;; Hardware stack levels used:    1
   472 ;; This function calls:
   473 ;;		Nothing
   474 ;; This function is called by:
   475 ;;		_kbd_getc
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text3
   480  000812                     __ptext3:
   481                           	opt stack 0
   482  000812                     _ui8_TestKeyPad:
   483                           	opt stack 29
   484                           
   485                           ;keyb.c: 103: unsigned char k;
   486                           ;keyb.c: 104: for(k=0;k<16;k++)
   487                           
   488                           ;incstack = 0
   489  000812  0E00               	movlw	0
   490  000814  6E01               	movwf	ui8_TestKeyPad@k,c
   491  000816                     l707:
   492  000816  0E0F               	movlw	15
   493  000818  6401               	cpfsgt	ui8_TestKeyPad@k,c
   494  00081A  D014               	goto	l72
   495  00081C  D046               	goto	u60
   496  00081E  908A               	bcf	3978,0,c	;volatile
   497  000820  D00D               	goto	L5
   498  000822  808A               	bsf	3978,0,c	;volatile
   499  000824  928A               	bcf	3978,1,c	;volatile
   500  000826  D00B               	goto	L4
   501  000828  808A               	bsf	3978,0,c	;volatile
   502  00082A  828A               	bsf	3978,1,c	;volatile
   503  00082C  948A               	bcf	3978,2,c	;volatile
   504  00082E  D008               	goto	L3
   505  000830  808A               	bsf	3978,0,c	;volatile
   506  000832  828A               	bsf	3978,1,c	;volatile
   507  000834  848A               	bsf	3978,2,c	;volatile
   508  000836  968A               	bcf	3978,3,c	;volatile
   509                           
   510                           ;keyb.c: 119: break;
   511  000838  D013               	goto	l74
   512  00083A  808A               	bsf	3978,0,c	;volatile
   513  00083C                     L5:
   514  00083C  828A               	bsf	3978,1,c	;volatile
   515  00083E                     L4:
   516  00083E  848A               	bsf	3978,2,c	;volatile
   517  000840                     L3:
   518  000840  868A               	bsf	3978,3,c	;volatile
   519                           
   520                           ;keyb.c: 121: }
   521  000842  D00E               	goto	l74
   522  000844                     l72:
   523  000844  5001               	movf	ui8_TestKeyPad@k,w,c
   524                           
   525                           ; Switch size 1, requested type "space"
   526                           ; Number of cases is 4, Range of values is 0 to 12
   527                           ; switch strategies available:
   528                           ; Name         Instructions Cycles
   529                           ; simple_byte           13     7 (average)
   530                           ;	Chosen strategy is simple_byte
   531  000846  0A00               	xorlw	0	; case 0
   532  000848  B4D8               	btfsc	status,2,c
   533  00084A  D7E9               	goto	l73
   534  00084C  0A04               	xorlw	4	; case 4
   535  00084E  B4D8               	btfsc	status,2,c
   536  000850  D7E8               	goto	l75
   537  000852  0A0C               	xorlw	12	; case 8
   538  000854  B4D8               	btfsc	status,2,c
   539  000856  D7E8               	goto	l76
   540  000858  0A04               	xorlw	4	; case 12
   541  00085A  B4D8               	btfsc	status,2,c
   542  00085C  D7E9               	goto	l77
   543  00085E  D7ED               	goto	l78
   544  000860                     l74:
   545                           
   546                           ;keyb.c: 124: if (!((PORTB) & (1 << 4)))
   547  000860  B881               	btfsc	3969,4,c	;volatile
   548  000862  D006               	goto	l79
   549                           
   550                           ;keyb.c: 125: {
   551                           ;keyb.c: 128: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   552  000864  808A               	bsf	3978,0,c	;volatile
   553  000866  828A               	bsf	3978,1,c	;volatile
   554  000868  848A               	bsf	3978,2,c	;volatile
   555  00086A  868A               	bsf	3978,3,c	;volatile
   556                           
   557                           ;keyb.c: 129: return k;
   558  00086C  5001               	movf	ui8_TestKeyPad@k,w,c
   559  00086E  0012               	return	
   560  000870                     l79:
   561                           
   562                           ;keyb.c: 130: }
   563                           ;keyb.c: 131: } k++;
   564  000870  2A01               	incf	ui8_TestKeyPad@k,f,c
   565                           
   566                           ;keyb.c: 133: if (!((PORTB) & (1 << 5)))
   567  000872  BA81               	btfsc	3969,5,c	;volatile
   568  000874  D006               	goto	l81
   569                           
   570                           ;keyb.c: 134: {
   571                           ;keyb.c: 137: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   572  000876  808A               	bsf	3978,0,c	;volatile
   573  000878  828A               	bsf	3978,1,c	;volatile
   574  00087A  848A               	bsf	3978,2,c	;volatile
   575  00087C  868A               	bsf	3978,3,c	;volatile
   576                           
   577                           ;keyb.c: 138: return k;
   578  00087E  5001               	movf	ui8_TestKeyPad@k,w,c
   579  000880  0012               	return	
   580  000882                     l81:
   581                           
   582                           ;keyb.c: 139: }
   583                           ;keyb.c: 140: }k++;
   584  000882  2A01               	incf	ui8_TestKeyPad@k,f,c
   585                           
   586                           ;keyb.c: 142: if (!((PORTB) & (1 << 6)))
   587  000884  BC81               	btfsc	3969,6,c	;volatile
   588  000886  D006               	goto	l82
   589                           
   590                           ;keyb.c: 143: {
   591                           ;keyb.c: 146: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   592  000888  808A               	bsf	3978,0,c	;volatile
   593  00088A  828A               	bsf	3978,1,c	;volatile
   594  00088C  848A               	bsf	3978,2,c	;volatile
   595  00088E  868A               	bsf	3978,3,c	;volatile
   596                           
   597                           ;keyb.c: 147: return k;
   598  000890  5001               	movf	ui8_TestKeyPad@k,w,c
   599  000892  0012               	return	
   600  000894                     l82:
   601                           
   602                           ;keyb.c: 148: }
   603                           ;keyb.c: 149: }k++;
   604  000894  2A01               	incf	ui8_TestKeyPad@k,f,c
   605                           
   606                           ;keyb.c: 151: if (!((PORTB) & (1 << 7)))
   607  000896  BE81               	btfsc	3969,7,c	;volatile
   608  000898  D006               	goto	l83
   609                           
   610                           ;keyb.c: 152: {
   611                           ;keyb.c: 155: {{(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1)
      +                          )); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   612  00089A  808A               	bsf	3978,0,c	;volatile
   613  00089C  828A               	bsf	3978,1,c	;volatile
   614  00089E  848A               	bsf	3978,2,c	;volatile
   615  0008A0  868A               	bsf	3978,3,c	;volatile
   616                           
   617                           ;keyb.c: 156: return k;
   618  0008A2  5001               	movf	ui8_TestKeyPad@k,w,c
   619  0008A4  0012               	return	
   620  0008A6                     l83:
   621  0008A6  2A01               	incf	ui8_TestKeyPad@k,f,c
   622  0008A8  D7B6               	goto	l707
   623  0008AA                     u60:
   624                           
   625                           ;keyb.c: 157: }
   626                           ;keyb.c: 158: }
   627                           ;keyb.c: 159: }
   628                           ;keyb.c: 160: {(*(&(*(&PORTB + 0x09))) |= (1<<(0))); (*(&(*(&PORTB + 0x09))) |= (1<<(1))
      +                          ); (*(&(*(&PORTB + 0x09))) |= (1<<(2))); (*(&(*(&PORTB + 0x09))) |= (1<<(3)));};
   629  0008AA  808A               	bsf	3978,0,c	;volatile
   630  0008AC  828A               	bsf	3978,1,c	;volatile
   631  0008AE  848A               	bsf	3978,2,c	;volatile
   632  0008B0  868A               	bsf	3978,3,c	;volatile
   633                           
   634                           ;keyb.c: 161: return (16);
   635  0008B2  0E10               	movlw	16
   636  0008B4  0012               	return	
   637  0008B6                     __end_of_ui8_TestKeyPad:
   638                           	opt stack 0
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           prodh	equ	0xFF4
   644                           prodl	equ	0xFF3
   645                           status	equ	0xFD8
   646                           
   647 ;; *************** function _display *****************
   648 ;; Defined at:
   649 ;;		line 93 in file "Teclado_1.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;  valor           1    wreg     unsigned char 
   652 ;; Auto vars:     Size  Location     Type
   653 ;;  valor           1    0[COMRAM] unsigned char 
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   663 ;;      Params:         0       0       0       0       0       0       0       0       0
   664 ;;      Locals:         1       0       0       0       0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0
   666 ;;      Totals:         1       0       0       0       0       0       0       0       0
   667 ;;Total ram usage:        1 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; This function calls:
   670 ;;		Nothing
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text4
   677  000942                     __ptext4:
   678                           	opt stack 0
   679  000942                     _display:
   680                           	opt stack 30
   681                           
   682                           ;incstack = 0
   683                           ;display@valor stored from wreg
   684  000942  6E01               	movwf	display@valor,c
   685                           
   686                           ;Teclado_1.c: 96: if (valor & (1 << 0)) LATDbits.LATD1 = 1;
   687  000944  A001               	btfss	display@valor,0,c
   688  000946  D002               	goto	l28
   689  000948  828C               	bsf	3980,1,c	;volatile
   690  00094A  D001               	goto	l29
   691  00094C                     l28:
   692                           
   693                           ;Teclado_1.c: 97: else LATDbits.LATD1 = 0;
   694  00094C  928C               	bcf	3980,1,c	;volatile
   695  00094E                     l29:
   696                           
   697                           ;Teclado_1.c: 99: if (valor & (1 << 1)) LATCbits.LATC1 = 1;
   698  00094E  A201               	btfss	display@valor,1,c
   699  000950  D002               	goto	l30
   700  000952  828B               	bsf	3979,1,c	;volatile
   701  000954  D001               	goto	l31
   702  000956                     l30:
   703                           
   704                           ;Teclado_1.c: 100: else LATCbits.LATC1 = 0;
   705  000956  928B               	bcf	3979,1,c	;volatile
   706  000958                     l31:
   707                           
   708                           ;Teclado_1.c: 102: if (valor & (1 << 2)) LATCbits.LATC2 = 1;
   709  000958  A401               	btfss	display@valor,2,c
   710  00095A  D002               	goto	l32
   711  00095C  848B               	bsf	3979,2,c	;volatile
   712  00095E  D001               	goto	l33
   713  000960                     l32:
   714                           
   715                           ;Teclado_1.c: 103: else LATCbits.LATC2 = 0;
   716  000960  948B               	bcf	3979,2,c	;volatile
   717  000962                     l33:
   718                           
   719                           ;Teclado_1.c: 105: if (valor & (1 << 3)) LATDbits.LATD0 = 1;
   720  000962  A601               	btfss	display@valor,3,c
   721  000964  D002               	goto	l34
   722  000966  808C               	bsf	3980,0,c	;volatile
   723  000968  D001               	goto	l35
   724  00096A                     l34:
   725                           
   726                           ;Teclado_1.c: 106: else LATDbits.LATD0 = 0;
   727  00096A  908C               	bcf	3980,0,c	;volatile
   728  00096C                     l35:
   729                           
   730                           ;Teclado_1.c: 108: if (valor & (1 << 4)) LATDbits.LATD2 = 1;
   731  00096C  A801               	btfss	display@valor,4,c
   732  00096E  D002               	goto	l36
   733  000970  848C               	bsf	3980,2,c	;volatile
   734  000972  D001               	goto	l37
   735  000974                     l36:
   736                           
   737                           ;Teclado_1.c: 109: else LATDbits.LATD2 = 0;
   738  000974  948C               	bcf	3980,2,c	;volatile
   739  000976                     l37:
   740                           
   741                           ;Teclado_1.c: 111: if (valor & (1 << 5)) LATDbits.LATD3 = 1;
   742  000976  AA01               	btfss	display@valor,5,c
   743  000978  D002               	goto	l38
   744  00097A  868C               	bsf	3980,3,c	;volatile
   745  00097C  D001               	goto	l39
   746  00097E                     l38:
   747                           
   748                           ;Teclado_1.c: 112: else LATDbits.LATD3 = 0;
   749  00097E  968C               	bcf	3980,3,c	;volatile
   750  000980                     l39:
   751                           
   752                           ;Teclado_1.c: 114: if (valor & (1 << 6)) LATCbits.LATC6 = 1;
   753  000980  AC01               	btfss	display@valor,6,c
   754  000982  D002               	goto	l40
   755  000984  8C8B               	bsf	3979,6,c	;volatile
   756  000986  D001               	goto	l41
   757  000988                     l40:
   758                           
   759                           ;Teclado_1.c: 115: else LATCbits.LATC6 = 0;
   760  000988  9C8B               	bcf	3979,6,c	;volatile
   761  00098A                     l41:
   762                           
   763                           ;Teclado_1.c: 117: if (valor & (1 << 7)) LATCbits.LATC7 = 1;
   764  00098A  AE01               	btfss	display@valor,7,c
   765  00098C  D002               	goto	l42
   766  00098E  8E8B               	bsf	3979,7,c	;volatile
   767  000990  0012               	return	
   768  000992                     l42:
   769                           
   770                           ;Teclado_1.c: 118: else LATCbits.LATC7 = 0;
   771  000992  9E8B               	bcf	3979,7,c	;volatile
   772  000994  0012               	return	
   773  000996                     __end_of_display:
   774                           	opt stack 0
   775                           tblptru	equ	0xFF8
   776                           tblptrh	equ	0xFF7
   777                           tblptrl	equ	0xFF6
   778                           tablat	equ	0xFF5
   779                           prodh	equ	0xFF4
   780                           prodl	equ	0xFF3
   781                           status	equ	0xFD8
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           prodh	equ	0xFF4
   787                           prodl	equ	0xFF3
   788                           status	equ	0xFD8
   789                           
   790                           	psect	rparam
   791  0000                     tblptru	equ	0xFF8
   792                           tblptrh	equ	0xFF7
   793                           tblptrl	equ	0xFF6
   794                           tablat	equ	0xFF5
   795                           prodh	equ	0xFF4
   796                           prodl	equ	0xFF3
   797                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      4       4
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_kbd_getc
    _kbd_getc->_ui8_TestKeyPad

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     450
                                              3 COMRAM     1     1      0
                            _display
                           _kbd_getc
                        _vInitKeyPad
 ---------------------------------------------------------------------------------
 (1) _vInitKeyPad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _kbd_getc                                             2     2      0     300
                                              1 COMRAM     2     2      0
                     _ui8_TestKeyPad
 ---------------------------------------------------------------------------------
 (2) _ui8_TestKeyPad                                       1     1      0     105
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0     120
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _kbd_getc
     _ui8_TestKeyPad
   _vInitKeyPad

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      4       4       1        4.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Mar  2 23:40:04 2018

           ?_vInitKeyPad 0001                       l21 09B6                       l30 0956  
                     l31 0958                       l40 0988                       l32 0960  
                     l41 098A                       l33 0962                       l42 0992  
                     l34 096A                       l35 096C                       l36 0974  
                     l28 094C                       l60 0914                       l37 0976  
                     l29 094E                       l38 097E                       l39 0980  
                     l63 0932                       l72 0844                       l56 08D8  
                     l81 0882                       l73 081E                       l57 08F6  
                     l82 0894                       l74 0860                       l66 093E  
                     l83 08A6                       l75 0822                       l76 0828  
                     l77 0830                       l78 083A                       l79 0870  
                     u60 08AA             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l707 0816             __CFG_CPB$OFF 000000                      u210 0920  
                    u170 08E4                      u190 0902             __CFG_CPD$OFF 000000  
           __CFG_FOSC$XT 000000                     _KEYS 0801                     _main 0996  
          __CFG_BORV$190 000000                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001                    _PORTB 000F81  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000          __end_of_display 0996            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000             display@valor 0001           __CFG_EBTRB$OFF 000000  
         __CFG_BOREN$OFF 000000                    tablat 000FF5                    status 000FD8  
         __CFG_T3CMX$RC0 000000           __CFG_ICPRT$OFF 000000             __end_of_KEYS 0811  
        __initialization 09DE             __end_of_main 09CC           __CFG_PCLKEN$ON 000000  
                 ??_main 0004            __activetblptr 000002         ??_ui8_TestKeyPad 0001  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   _ANSELA 000F5B  
         __CFG_WDTEN$OFF 000000         __end_of_kbd_getc 0942           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000     __size_of_vInitKeyPad 0012                ??_display 0001  
        ui8_TestKeyPad@k 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8     __CFG_LS48MHZ$SYS24X4 000000  
             __accesstop 0060  __end_of__initialization 09DE          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001        __CFG_PLLSEL$PLL4X 000000  
              ?_kbd_getc 0001                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0800                  __pcinit 09DE                  __ramtop 0800  
                __ptext0 0996                  __ptext1 09CC                  __ptext2 08B6  
                __ptext3 0812                  __ptext4 0942                  _display 0942  
             ??_kbd_getc 0002     end_of_initialization 09DE            __Lmediumconst 0000  
              _TRISCbits 000F94                _TRISDbits 000F95            ??_vInitKeyPad 0001  
    start_initialization 09DE          __CFG_nLPBOR$OFF 000000  __size_of_ui8_TestKeyPad 00A4  
    __end_of_vInitKeyPad 09DE          __CFG_nPWRTEN$ON 000000        __size_of_kbd_getc 008C  
               ?_display 0001              __smallconst 0800                 _LATCbits 000F8B  
               _LATDbits 000F8C              _vInitKeyPad 09CC         __CFG_WDTPS$32768 000000  
              main@tecla 0004        __CFG_CFGPLLEN$OFF 000000           _ui8_TestKeyPad 0812  
               __Hrparam 0000                 __Lrparam 0000         __size_of_display 0054  
               _kbd_getc 08B6   __end_of_ui8_TestKeyPad 08B6            __size_of_main 0036  
          kbd_getc@kchar 0002          ?_ui8_TestKeyPad 0001             kbd_getc@temp 0003  
   __CFG_CPUDIV$NOCLKDIV 000000  
